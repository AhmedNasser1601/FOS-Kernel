
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc df 14 f0       	mov    $0xf014dfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();


//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba f4 96 61 f0       	mov    $0xf06196f4,%edx
f010004a:	b8 f2 26 53 f0       	mov    $0xf05326f2,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 f2 26 53 f0       	push   $0xf05326f2
f010005e:	e8 94 75 01 00       	call   f01175f7 <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 52 0c 00 00       	call   f0100cbd <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 8d 00 00 00       	call   f01000fd <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 3b 2b 00 00       	call   f0102bb0 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 80 31 00 00       	call   f01031fa <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 9d 35 00 00       	call   f010361c <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 07 61 00 00       	call   f010618b <env_init>
	idt_init();
f0100084:	e8 5e 6d 00 00       	call   f0106de7 <idt_init>

	setPageReplacmentAlgorithmModifiedCLOCK();
f0100089:	e8 67 82 00 00       	call   f01082f5 <setPageReplacmentAlgorithmModifiedCLOCK>
	setUHeapPlacementStrategyNEXTFIT();
f010008e:	e8 f2 51 00 00       	call   f0105285 <setUHeapPlacementStrategyNEXTFIT>
	setKHeapPlacementStrategyNEXTFIT();
f0100093:	e8 a9 52 00 00       	call   f0105341 <setKHeapPlacementStrategyNEXTFIT>
	enableBuffering(0);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 00                	push   $0x0
f010009d:	e8 e7 82 00 00       	call   f0108389 <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 00                	push   $0x0
f01000aa:	e8 c2 82 00 00       	call   f0108371 <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	//TODODONE: remove this line
	chksch(1);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	6a 01                	push   $0x1
f01000b7:	e8 86 54 01 00       	call   f0115542 <chksch>
f01000bc:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000bf:	e8 03 6b 00 00       	call   f0106bc7 <pic_init>

	kclock_start(CLOCK_INTERVAL_IN_MS);
f01000c4:	83 ec 0c             	sub    $0xc,%esp
f01000c7:	6a 0a                	push   $0xa
f01000c9:	e8 ce 68 00 00       	call   f010699c <kclock_start>
f01000ce:	83 c4 10             	add    $0x10,%esp
	sched_init() ;
f01000d1:	e8 68 8d 00 00       	call   f0108e3e <sched_init>

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f01000d6:	83 ec 0c             	sub    $0xc,%esp
f01000d9:	68 40 80 11 f0       	push   $0xf0118040
f01000de:	e8 b3 6c 00 00       	call   f0106d96 <cprintf>
f01000e3:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f01000e6:	83 ec 0c             	sub    $0xc,%esp
f01000e9:	68 6c 80 11 f0       	push   $0xf011806c
f01000ee:	e8 a3 6c 00 00       	call   f0106d96 <cprintf>
f01000f3:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f01000f6:	e8 f9 16 00 00       	call   f01017f4 <run_command_prompt>
	}
f01000fb:	eb d9                	jmp    f01000d6 <FOS_initialize+0x97>

f01000fd <print_welcome_message>:
}


void print_welcome_message()
{
f01000fd:	55                   	push   %ebp
f01000fe:	89 e5                	mov    %esp,%ebp
f0100100:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	68 91 80 11 f0       	push   $0xf0118091
f010010b:	e8 86 6c 00 00       	call   f0106d96 <cprintf>
f0100110:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100113:	83 ec 0c             	sub    $0xc,%esp
f0100116:	68 98 80 11 f0       	push   $0xf0118098
f010011b:	e8 76 6c 00 00       	call   f0106d96 <cprintf>
f0100120:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100123:	83 ec 0c             	sub    $0xc,%esp
f0100126:	68 e0 80 11 f0       	push   $0xf01180e0
f010012b:	e8 66 6c 00 00       	call   f0106d96 <cprintf>
f0100130:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 28 81 11 f0       	push   $0xf0118128
f010013b:	e8 56 6c 00 00       	call   f0106d96 <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 e0 80 11 f0       	push   $0xf01180e0
f010014b:	e8 46 6c 00 00       	call   f0106d96 <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 98 80 11 f0       	push   $0xf0118098
f010015b:	e8 36 6c 00 00       	call   f0106d96 <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 6d 81 11 f0       	push   $0xf011816d
f010016b:	e8 26 6c 00 00       	call   f0106d96 <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
}
f0100173:	90                   	nop
f0100174:	c9                   	leave  
f0100175:	c3                   	ret    

f0100176 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100176:	55                   	push   %ebp
f0100177:	89 e5                	mov    %esp,%ebp
f0100179:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010017c:	8b 45 10             	mov    0x10(%ebp),%eax
f010017f:	a3 00 27 53 f0       	mov    %eax,0xf0532700

	va_start(ap, fmt);
f0100184:	8d 45 10             	lea    0x10(%ebp),%eax
f0100187:	83 c0 04             	add    $0x4,%eax
f010018a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010018d:	83 ec 04             	sub    $0x4,%esp
f0100190:	ff 75 0c             	pushl  0xc(%ebp)
f0100193:	ff 75 08             	pushl  0x8(%ebp)
f0100196:	68 72 81 11 f0       	push   $0xf0118172
f010019b:	e8 f6 6b 00 00       	call   f0106d96 <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001a6:	83 ec 08             	sub    $0x8,%esp
f01001a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001ac:	50                   	push   %eax
f01001ad:	e8 bb 6b 00 00       	call   f0106d6d <vcprintf>
f01001b2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001b5:	83 ec 0c             	sub    $0xc,%esp
f01001b8:	68 8b 81 11 f0       	push   $0xf011818b
f01001bd:	e8 d4 6b 00 00       	call   f0106d96 <cprintf>
f01001c2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001c5:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01001ca:	85 c0                	test   %eax,%eax
f01001cc:	74 12                	je     f01001e0 <_panic+0x6a>
f01001ce:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01001d3:	8b 40 54             	mov    0x54(%eax),%eax
f01001d6:	83 f8 02             	cmp    $0x2,%eax
f01001d9:	75 05                	jne    f01001e0 <_panic+0x6a>
	{
		//2015
		env_exit();
f01001db:	e8 43 66 00 00       	call   f0106823 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f01001e0:	e8 e2 8a 00 00       	call   f0108cc7 <fos_scheduler>

f01001e5 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all ready env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01001e5:	55                   	push   %ebp
f01001e6:	89 e5                	mov    %esp,%ebp
f01001e8:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001eb:	8b 45 10             	mov    0x10(%ebp),%eax
f01001ee:	a3 00 27 53 f0       	mov    %eax,0xf0532700

	va_start(ap, fmt);
f01001f3:	8d 45 10             	lea    0x10(%ebp),%eax
f01001f6:	83 c0 04             	add    $0x4,%eax
f01001f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001fc:	83 ec 04             	sub    $0x4,%esp
f01001ff:	ff 75 0c             	pushl  0xc(%ebp)
f0100202:	ff 75 08             	pushl  0x8(%ebp)
f0100205:	68 72 81 11 f0       	push   $0xf0118172
f010020a:	e8 87 6b 00 00       	call   f0106d96 <cprintf>
f010020f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100212:	8b 45 10             	mov    0x10(%ebp),%eax
f0100215:	83 ec 08             	sub    $0x8,%esp
f0100218:	ff 75 f4             	pushl  -0xc(%ebp)
f010021b:	50                   	push   %eax
f010021c:	e8 4c 6b 00 00       	call   f0106d6d <vcprintf>
f0100221:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100224:	83 ec 0c             	sub    $0xc,%esp
f0100227:	68 8b 81 11 f0       	push   $0xf011818b
f010022c:	e8 65 6b 00 00       	call   f0106d96 <cprintf>
f0100231:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100234:	e8 51 97 00 00       	call   f010998a <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100239:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010023e:	85 c0                	test   %eax,%eax
f0100240:	74 14                	je     f0100256 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100242:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0100247:	8b 40 4c             	mov    0x4c(%eax),%eax
f010024a:	83 ec 0c             	sub    $0xc,%esp
f010024d:	50                   	push   %eax
f010024e:	e8 1e 95 00 00       	call   f0109771 <sched_exit_env>
f0100253:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100256:	e8 6c 8a 00 00       	call   f0108cc7 <fos_scheduler>

f010025b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010025b:	55                   	push   %ebp
f010025c:	89 e5                	mov    %esp,%ebp
f010025e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100261:	8b 45 10             	mov    0x10(%ebp),%eax
f0100264:	a3 00 27 53 f0       	mov    %eax,0xf0532700

	va_start(ap, fmt);
f0100269:	8d 45 10             	lea    0x10(%ebp),%eax
f010026c:	83 c0 04             	add    $0x4,%eax
f010026f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100272:	83 ec 04             	sub    $0x4,%esp
f0100275:	ff 75 0c             	pushl  0xc(%ebp)
f0100278:	ff 75 08             	pushl  0x8(%ebp)
f010027b:	68 72 81 11 f0       	push   $0xf0118172
f0100280:	e8 11 6b 00 00       	call   f0106d96 <cprintf>
f0100285:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100288:	8b 45 10             	mov    0x10(%ebp),%eax
f010028b:	83 ec 08             	sub    $0x8,%esp
f010028e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100291:	50                   	push   %eax
f0100292:	e8 d6 6a 00 00       	call   f0106d6d <vcprintf>
f0100297:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010029a:	83 ec 0c             	sub    $0xc,%esp
f010029d:	68 8b 81 11 f0       	push   $0xf011818b
f01002a2:	e8 ef 6a 00 00       	call   f0106d96 <cprintf>
f01002a7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002aa:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01002af:	85 c0                	test   %eax,%eax
f01002b1:	74 28                	je     f01002db <_panic_into_prompt+0x80>
f01002b3:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01002b8:	8b 40 54             	mov    0x54(%eax),%eax
f01002bb:	83 f8 02             	cmp    $0x2,%eax
f01002be:	75 1b                	jne    f01002db <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002c0:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01002c5:	83 ec 0c             	sub    $0xc,%esp
f01002c8:	50                   	push   %eax
f01002c9:	e8 ae 8d 00 00       	call   f010907c <sched_insert_exit>
f01002ce:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01002d1:	c7 05 50 29 53 f0 00 	movl   $0x0,0xf0532950
f01002d8:	00 00 00 
	}

	lcr3(phys_page_directory);
f01002db:	a1 d8 16 55 f0       	mov    0xf05516d8,%eax
f01002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002e6:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f01002e9:	c7 05 5c 32 53 f0 00 	movl   $0x0,0xf053325c
f01002f0:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f01002f3:	83 ec 0c             	sub    $0xc,%esp
f01002f6:	6a 00                	push   $0x0
f01002f8:	e8 f7 14 00 00       	call   f01017f4 <run_command_prompt>
f01002fd:	83 c4 10             	add    $0x10,%esp
f0100300:	eb f1                	jmp    f01002f3 <_panic_into_prompt+0x98>

f0100302 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100302:	55                   	push   %ebp
f0100303:	89 e5                	mov    %esp,%ebp
f0100305:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100308:	8d 45 10             	lea    0x10(%ebp),%eax
f010030b:	83 c0 04             	add    $0x4,%eax
f010030e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100311:	83 ec 04             	sub    $0x4,%esp
f0100314:	ff 75 0c             	pushl  0xc(%ebp)
f0100317:	ff 75 08             	pushl  0x8(%ebp)
f010031a:	68 8d 81 11 f0       	push   $0xf011818d
f010031f:	e8 72 6a 00 00       	call   f0106d96 <cprintf>
f0100324:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100327:	8b 45 10             	mov    0x10(%ebp),%eax
f010032a:	83 ec 08             	sub    $0x8,%esp
f010032d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100330:	50                   	push   %eax
f0100331:	e8 37 6a 00 00       	call   f0106d6d <vcprintf>
f0100336:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100339:	83 ec 0c             	sub    $0xc,%esp
f010033c:	68 8b 81 11 f0       	push   $0xf011818b
f0100341:	e8 50 6a 00 00       	call   f0106d96 <cprintf>
f0100346:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100349:	90                   	nop
f010034a:	c9                   	leave  
f010034b:	c3                   	ret    

f010034c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010034c:	55                   	push   %ebp
f010034d:	89 e5                	mov    %esp,%ebp
f010034f:	83 ec 10             	sub    $0x10,%esp
f0100352:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100359:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010035c:	89 c2                	mov    %eax,%edx
f010035e:	ec                   	in     (%dx),%al
f010035f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100362:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100365:	0f b6 c0             	movzbl %al,%eax
f0100368:	83 e0 01             	and    $0x1,%eax
f010036b:	85 c0                	test   %eax,%eax
f010036d:	75 07                	jne    f0100376 <serial_proc_data+0x2a>
		return -1;
f010036f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100374:	eb 16                	jmp    f010038c <serial_proc_data+0x40>
f0100376:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010037d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100380:	89 c2                	mov    %eax,%edx
f0100382:	ec                   	in     (%dx),%al
f0100383:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100386:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100389:	0f b6 c0             	movzbl %al,%eax
}
f010038c:	c9                   	leave  
f010038d:	c3                   	ret    

f010038e <serial_intr>:

void
serial_intr(void)
{
f010038e:	55                   	push   %ebp
f010038f:	89 e5                	mov    %esp,%ebp
f0100391:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100394:	a1 24 27 53 f0       	mov    0xf0532724,%eax
f0100399:	85 c0                	test   %eax,%eax
f010039b:	74 10                	je     f01003ad <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f010039d:	83 ec 0c             	sub    $0xc,%esp
f01003a0:	68 4c 03 10 f0       	push   $0xf010034c
f01003a5:	e8 58 07 00 00       	call   f0100b02 <cons_intr>
f01003aa:	83 c4 10             	add    $0x10,%esp
}
f01003ad:	90                   	nop
f01003ae:	c9                   	leave  
f01003af:	c3                   	ret    

f01003b0 <serial_init>:

void
serial_init(void)
{
f01003b0:	55                   	push   %ebp
f01003b1:	89 e5                	mov    %esp,%ebp
f01003b3:	83 ec 40             	sub    $0x40,%esp
f01003b6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003bd:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003c1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003c7:	ee                   	out    %al,(%dx)
f01003c8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003cf:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01003d3:	8a 45 cf             	mov    -0x31(%ebp),%al
f01003d6:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01003d9:	ee                   	out    %al,(%dx)
f01003da:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01003e1:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01003e5:	8a 45 d0             	mov    -0x30(%ebp),%al
f01003e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01003eb:	ee                   	out    %al,(%dx)
f01003ec:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01003f3:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01003f7:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01003fd:	ee                   	out    %al,(%dx)
f01003fe:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100405:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100409:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010040c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010040f:	ee                   	out    %al,(%dx)
f0100410:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100417:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010041b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010041e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100421:	ee                   	out    %al,(%dx)
f0100422:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100429:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010042d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100430:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100433:	ee                   	out    %al,(%dx)
f0100434:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010043b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010043e:	89 c2                	mov    %eax,%edx
f0100440:	ec                   	in     (%dx),%al
f0100441:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100444:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100447:	3c ff                	cmp    $0xff,%al
f0100449:	0f 95 c0             	setne  %al
f010044c:	0f b6 c0             	movzbl %al,%eax
f010044f:	a3 24 27 53 f0       	mov    %eax,0xf0532724
f0100454:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010045b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010045e:	89 c2                	mov    %eax,%edx
f0100460:	ec                   	in     (%dx),%al
f0100461:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100464:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010046b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100474:	90                   	nop
f0100475:	c9                   	leave  
f0100476:	c3                   	ret    

f0100477 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100477:	55                   	push   %ebp
f0100478:	89 e5                	mov    %esp,%ebp
f010047a:	83 ec 20             	sub    $0x20,%esp
f010047d:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100484:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100487:	89 c2                	mov    %eax,%edx
f0100489:	ec                   	in     (%dx),%al
f010048a:	88 45 ec             	mov    %al,-0x14(%ebp)
f010048d:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100494:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100497:	89 c2                	mov    %eax,%edx
f0100499:	ec                   	in     (%dx),%al
f010049a:	88 45 ed             	mov    %al,-0x13(%ebp)
f010049d:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004a7:	89 c2                	mov    %eax,%edx
f01004a9:	ec                   	in     (%dx),%al
f01004aa:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004ad:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004bd:	90                   	nop
f01004be:	c9                   	leave  
f01004bf:	c3                   	ret    

f01004c0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004c0:	55                   	push   %ebp
f01004c1:	89 e5                	mov    %esp,%ebp
f01004c3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004cd:	eb 08                	jmp    f01004d7 <lpt_putc+0x17>
		delay();
f01004cf:	e8 a3 ff ff ff       	call   f0100477 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004d4:	ff 45 fc             	incl   -0x4(%ebp)
f01004d7:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01004de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01004e1:	89 c2                	mov    %eax,%edx
f01004e3:	ec                   	in     (%dx),%al
f01004e4:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01004e7:	8a 45 eb             	mov    -0x15(%ebp),%al
f01004ea:	84 c0                	test   %al,%al
f01004ec:	78 09                	js     f01004f7 <lpt_putc+0x37>
f01004ee:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01004f5:	7e d8                	jle    f01004cf <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01004f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01004fa:	0f b6 c0             	movzbl %al,%eax
f01004fd:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100504:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100507:	8a 45 e8             	mov    -0x18(%ebp),%al
f010050a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010050d:	ee                   	out    %al,(%dx)
f010050e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100515:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100519:	8a 45 e9             	mov    -0x17(%ebp),%al
f010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010051f:	ee                   	out    %al,(%dx)
f0100520:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100527:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010052b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010052e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100531:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100532:	90                   	nop
f0100533:	c9                   	leave  
f0100534:	c3                   	ret    

f0100535 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100535:	55                   	push   %ebp
f0100536:	89 e5                	mov    %esp,%ebp
f0100538:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010053b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100542:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100545:	66 8b 00             	mov    (%eax),%ax
f0100548:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010054c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010054f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100554:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100557:	66 8b 00             	mov    (%eax),%ax
f010055a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010055e:	74 13                	je     f0100573 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100560:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100567:	c7 05 28 27 53 f0 b4 	movl   $0x3b4,0xf0532728
f010056e:	03 00 00 
f0100571:	eb 14                	jmp    f0100587 <cga_init+0x52>
	} else {
		*cp = was;
f0100573:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100576:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010057a:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010057d:	c7 05 28 27 53 f0 d4 	movl   $0x3d4,0xf0532728
f0100584:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100587:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f010058c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010058f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100593:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100596:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100599:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010059a:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f010059f:	40                   	inc    %eax
f01005a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005a6:	89 c2                	mov    %eax,%edx
f01005a8:	ec                   	in     (%dx),%al
f01005a9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005ac:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005af:	0f b6 c0             	movzbl %al,%eax
f01005b2:	c1 e0 08             	shl    $0x8,%eax
f01005b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005b8:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f01005bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005c0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005ca:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005cb:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f01005d0:	40                   	inc    %eax
f01005d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01005d7:	89 c2                	mov    %eax,%edx
f01005d9:	ec                   	in     (%dx),%al
f01005da:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01005dd:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01005e0:	0f b6 c0             	movzbl %al,%eax
f01005e3:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01005e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005e9:	a3 2c 27 53 f0       	mov    %eax,0xf053272c
	crt_pos = pos;
f01005ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005f1:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
}
f01005f7:	90                   	nop
f01005f8:	c9                   	leave  
f01005f9:	c3                   	ret    

f01005fa <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01005fa:	55                   	push   %ebp
f01005fb:	89 e5                	mov    %esp,%ebp
f01005fd:	53                   	push   %ebx
f01005fe:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100601:	8b 45 08             	mov    0x8(%ebp),%eax
f0100604:	b0 00                	mov    $0x0,%al
f0100606:	85 c0                	test   %eax,%eax
f0100608:	75 07                	jne    f0100611 <cga_putc+0x17>
		c |= 0x0700;
f010060a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100611:	8b 45 08             	mov    0x8(%ebp),%eax
f0100614:	0f b6 c0             	movzbl %al,%eax
f0100617:	83 f8 0a             	cmp    $0xa,%eax
f010061a:	74 77                	je     f0100693 <cga_putc+0x99>
f010061c:	83 f8 0a             	cmp    $0xa,%eax
f010061f:	7f 13                	jg     f0100634 <cga_putc+0x3a>
f0100621:	83 f8 08             	cmp    $0x8,%eax
f0100624:	74 2e                	je     f0100654 <cga_putc+0x5a>
f0100626:	83 f8 09             	cmp    $0x9,%eax
f0100629:	0f 84 a8 00 00 00    	je     f01006d7 <cga_putc+0xdd>
f010062f:	e9 22 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
f0100634:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100639:	0f 84 de 00 00 00    	je     f010071d <cga_putc+0x123>
f010063f:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100644:	0f 84 f1 00 00 00    	je     f010073b <cga_putc+0x141>
f010064a:	83 f8 0d             	cmp    $0xd,%eax
f010064d:	74 5d                	je     f01006ac <cga_putc+0xb2>
f010064f:	e9 02 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100654:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f010065a:	66 85 c0             	test   %ax,%ax
f010065d:	0f 84 4f 01 00 00    	je     f01007b2 <cga_putc+0x1b8>
			crt_pos--;
f0100663:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100669:	48                   	dec    %eax
f010066a:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100670:	8b 15 2c 27 53 f0    	mov    0xf053272c,%edx
f0100676:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f010067c:	0f b7 c0             	movzwl %ax,%eax
f010067f:	01 c0                	add    %eax,%eax
f0100681:	01 c2                	add    %eax,%edx
f0100683:	8b 45 08             	mov    0x8(%ebp),%eax
f0100686:	b0 00                	mov    $0x0,%al
f0100688:	83 c8 20             	or     $0x20,%eax
f010068b:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010068e:	e9 1f 01 00 00       	jmp    f01007b2 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100693:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100699:	83 c0 50             	add    $0x50,%eax
f010069c:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
		text_length = 0;
f01006a2:	c7 05 20 27 53 f0 00 	movl   $0x0,0xf0532720
f01006a9:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006ac:	66 8b 0d 30 27 53 f0 	mov    0xf0532730,%cx
f01006b3:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f01006b9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006be:	ba 00 00 00 00       	mov    $0x0,%edx
f01006c3:	66 f7 f3             	div    %bx
f01006c6:	89 d0                	mov    %edx,%eax
f01006c8:	29 c1                	sub    %eax,%ecx
f01006ca:	89 c8                	mov    %ecx,%eax
f01006cc:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
		break;
f01006d2:	e9 e5 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01006d7:	83 ec 0c             	sub    $0xc,%esp
f01006da:	6a 20                	push   $0x20
f01006dc:	e8 ba 05 00 00       	call   f0100c9b <cons_putc>
f01006e1:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 ad 05 00 00       	call   f0100c9b <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 a0 05 00 00       	call   f0100c9b <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 93 05 00 00       	call   f0100c9b <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 86 05 00 00       	call   f0100c9b <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		break;
f0100718:	e9 9f 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f010071d:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100723:	66 85 c0             	test   %ax,%ax
f0100726:	0f 84 89 00 00 00    	je     f01007b5 <cga_putc+0x1bb>
		     crt_pos--;
f010072c:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100732:	48                   	dec    %eax
f0100733:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
		     break;
f0100739:	eb 7a                	jmp    f01007b5 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f010073b:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100741:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100745:	77 71                	ja     f01007b8 <cga_putc+0x1be>
			     crt_pos++;
f0100747:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f010074d:	40                   	inc    %eax
f010074e:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
			     break;
f0100754:	eb 62                	jmp    f01007b8 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100756:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f010075d:	74 5c                	je     f01007bb <cga_putc+0x1c1>
f010075f:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100766:	74 53                	je     f01007bb <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100768:	8b 0d 2c 27 53 f0    	mov    0xf053272c,%ecx
f010076e:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100774:	8d 50 01             	lea    0x1(%eax),%edx
f0100777:	66 89 15 30 27 53 f0 	mov    %dx,0xf0532730
f010077e:	0f b7 c0             	movzwl %ax,%eax
f0100781:	01 c0                	add    %eax,%eax
f0100783:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100786:	8b 45 08             	mov    0x8(%ebp),%eax
f0100789:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f010078c:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	8b 15 20 27 53 f0    	mov    0xf0532720,%edx
f010079b:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007a1:	39 d0                	cmp    %edx,%eax
f01007a3:	7e 16                	jle    f01007bb <cga_putc+0x1c1>
				text_length++;
f01007a5:	a1 20 27 53 f0       	mov    0xf0532720,%eax
f01007aa:	40                   	inc    %eax
f01007ab:	a3 20 27 53 f0       	mov    %eax,0xf0532720
		}
		break;
f01007b0:	eb 09                	jmp    f01007bb <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007b2:	90                   	nop
f01007b3:	eb 07                	jmp    f01007bc <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007b5:	90                   	nop
f01007b6:	eb 04                	jmp    f01007bc <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007b8:	90                   	nop
f01007b9:	eb 01                	jmp    f01007bc <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007bb:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007bc:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f01007c2:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007c6:	76 58                	jbe    f0100820 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007c8:	a1 2c 27 53 f0       	mov    0xf053272c,%eax
f01007cd:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007d3:	a1 2c 27 53 f0       	mov    0xf053272c,%eax
f01007d8:	83 ec 04             	sub    $0x4,%esp
f01007db:	68 00 0f 00 00       	push   $0xf00
f01007e0:	52                   	push   %edx
f01007e1:	50                   	push   %eax
f01007e2:	e8 40 6e 01 00       	call   f0117627 <memcpy>
f01007e7:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ea:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007f1:	eb 15                	jmp    f0100808 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01007f3:	8b 15 2c 27 53 f0    	mov    0xf053272c,%edx
f01007f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007fc:	01 c0                	add    %eax,%eax
f01007fe:	01 d0                	add    %edx,%eax
f0100800:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100805:	ff 45 f4             	incl   -0xc(%ebp)
f0100808:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f010080f:	7e e2                	jle    f01007f3 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100811:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100817:	83 e8 50             	sub    $0x50,%eax
f010081a:	66 a3 30 27 53 f0    	mov    %ax,0xf0532730
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100820:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f0100825:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100828:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010082c:	8a 45 e0             	mov    -0x20(%ebp),%al
f010082f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100832:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100833:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100839:	66 c1 e8 08          	shr    $0x8,%ax
f010083d:	0f b6 c0             	movzbl %al,%eax
f0100840:	8b 15 28 27 53 f0    	mov    0xf0532728,%edx
f0100846:	42                   	inc    %edx
f0100847:	89 55 ec             	mov    %edx,-0x14(%ebp)
f010084a:	88 45 e1             	mov    %al,-0x1f(%ebp)
f010084d:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100850:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100853:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100854:	a1 28 27 53 f0       	mov    0xf0532728,%eax
f0100859:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010085c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100860:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100863:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100866:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100867:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f010086d:	0f b6 c0             	movzbl %al,%eax
f0100870:	8b 15 28 27 53 f0    	mov    0xf0532728,%edx
f0100876:	42                   	inc    %edx
f0100877:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010087a:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010087d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100880:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100883:	ee                   	out    %al,(%dx)
}
f0100884:	90                   	nop
f0100885:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100888:	c9                   	leave  
f0100889:	c3                   	ret    

f010088a <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010088a:	55                   	push   %ebp
f010088b:	89 e5                	mov    %esp,%ebp
f010088d:	83 ec 28             	sub    $0x28,%esp
f0100890:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010089a:	89 c2                	mov    %eax,%edx
f010089c:	ec                   	in     (%dx),%al
f010089d:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008a0:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008a3:	0f b6 c0             	movzbl %al,%eax
f01008a6:	83 e0 01             	and    $0x1,%eax
f01008a9:	85 c0                	test   %eax,%eax
f01008ab:	75 0a                	jne    f01008b7 <kbd_proc_data+0x2d>
		return -1;
f01008ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008b2:	e9 2a 02 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
f01008b7:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008c1:	89 c2                	mov    %eax,%edx
f01008c3:	ec                   	in     (%dx),%al
f01008c4:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01008c7:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01008ca:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008cd:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008d1:	75 17                	jne    f01008ea <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008d3:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f01008d8:	83 c8 40             	or     $0x40,%eax
f01008db:	a3 48 29 53 f0       	mov    %eax,0xf0532948
		return 0;
f01008e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01008e5:	e9 f7 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01008ea:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ed:	84 c0                	test   %al,%al
f01008ef:	79 44                	jns    f0100935 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008f1:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f01008f6:	83 e0 40             	and    $0x40,%eax
f01008f9:	85 c0                	test   %eax,%eax
f01008fb:	75 08                	jne    f0100905 <kbd_proc_data+0x7b>
f01008fd:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100900:	83 e0 7f             	and    $0x7f,%eax
f0100903:	eb 03                	jmp    f0100908 <kbd_proc_data+0x7e>
f0100905:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100908:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010090b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010090f:	8a 80 20 e0 14 f0    	mov    -0xfeb1fe0(%eax),%al
f0100915:	83 c8 40             	or     $0x40,%eax
f0100918:	0f b6 c0             	movzbl %al,%eax
f010091b:	f7 d0                	not    %eax
f010091d:	89 c2                	mov    %eax,%edx
f010091f:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100924:	21 d0                	and    %edx,%eax
f0100926:	a3 48 29 53 f0       	mov    %eax,0xf0532948
		return 0;
f010092b:	b8 00 00 00 00       	mov    $0x0,%eax
f0100930:	e9 ac 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100935:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f010093a:	83 e0 40             	and    $0x40,%eax
f010093d:	85 c0                	test   %eax,%eax
f010093f:	74 11                	je     f0100952 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100941:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100945:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f010094a:	83 e0 bf             	and    $0xffffffbf,%eax
f010094d:	a3 48 29 53 f0       	mov    %eax,0xf0532948
	}

	shift |= shiftcode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 e0 14 f0    	mov    -0xfeb1fe0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100964:	09 d0                	or     %edx,%eax
f0100966:	a3 48 29 53 f0       	mov    %eax,0xf0532948
	shift ^= togglecode[data];
f010096b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010096f:	8a 80 20 e1 14 f0    	mov    -0xfeb1ee0(%eax),%al
f0100975:	0f b6 d0             	movzbl %al,%edx
f0100978:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f010097d:	31 d0                	xor    %edx,%eax
f010097f:	a3 48 29 53 f0       	mov    %eax,0xf0532948

	c = charcode[shift & (CTL | SHIFT)][data];
f0100984:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100989:	83 e0 03             	and    $0x3,%eax
f010098c:	8b 14 85 20 e5 14 f0 	mov    -0xfeb1ae0(,%eax,4),%edx
f0100993:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100997:	01 d0                	add    %edx,%eax
f0100999:	8a 00                	mov    (%eax),%al
f010099b:	0f b6 c0             	movzbl %al,%eax
f010099e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009a1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009a8:	0f 85 9c 00 00 00    	jne    f0100a4a <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009ae:	a1 20 27 53 f0       	mov    0xf0532720,%eax
f01009b3:	85 c0                	test   %eax,%eax
f01009b5:	0f 8e 85 00 00 00    	jle    f0100a40 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009bb:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f01009c1:	0f b7 c0             	movzwl %ax,%eax
f01009c4:	8b 15 20 27 53 f0    	mov    0xf0532720,%edx
f01009ca:	81 c2 80 07 00 00    	add    $0x780,%edx
f01009d0:	39 d0                	cmp    %edx,%eax
f01009d2:	75 0a                	jne    f01009de <kbd_proc_data+0x154>
				return 0;
f01009d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01009d9:	e9 03 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			else {
			text_length--;
f01009de:	a1 20 27 53 f0       	mov    0xf0532720,%eax
f01009e3:	48                   	dec    %eax
f01009e4:	a3 20 27 53 f0       	mov    %eax,0xf0532720
				int crt_pos_Length = crt_pos - 1925;
f01009e9:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f01009ef:	0f b7 c0             	movzwl %ax,%eax
f01009f2:	2d 85 07 00 00       	sub    $0x785,%eax
f01009f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f01009fa:	66 a1 30 27 53 f0    	mov    0xf0532730,%ax
f0100a00:	0f b7 c0             	movzwl %ax,%eax
f0100a03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a06:	eb 26                	jmp    f0100a2e <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a08:	8b 15 2c 27 53 f0    	mov    0xf053272c,%edx
f0100a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a11:	01 c0                	add    %eax,%eax
f0100a13:	01 c2                	add    %eax,%edx
f0100a15:	a1 2c 27 53 f0       	mov    0xf053272c,%eax
f0100a1a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a1d:	41                   	inc    %ecx
f0100a1e:	01 c9                	add    %ecx,%ecx
f0100a20:	01 c8                	add    %ecx,%eax
f0100a22:	66 8b 00             	mov    (%eax),%ax
f0100a25:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a28:	ff 45 e8             	incl   -0x18(%ebp)
f0100a2b:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a2e:	a1 20 27 53 f0       	mov    0xf0532720,%eax
f0100a33:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a36:	7e d0                	jle    f0100a08 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a3b:	e9 a1 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a45:	e9 97 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a4a:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100a4f:	83 e0 08             	and    $0x8,%eax
f0100a52:	85 c0                	test   %eax,%eax
f0100a54:	74 22                	je     f0100a78 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a56:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a5a:	7e 0c                	jle    f0100a68 <kbd_proc_data+0x1de>
f0100a5c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a60:	7f 06                	jg     f0100a68 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a62:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a66:	eb 10                	jmp    f0100a78 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100a68:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a6c:	7e 0a                	jle    f0100a78 <kbd_proc_data+0x1ee>
f0100a6e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a72:	7f 04                	jg     f0100a78 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100a74:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100a78:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100a7d:	83 f8 10             	cmp    $0x10,%eax
f0100a80:	75 13                	jne    f0100a95 <kbd_proc_data+0x20b>
f0100a82:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100a86:	7e 0d                	jle    f0100a95 <kbd_proc_data+0x20b>
f0100a88:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100a8c:	7f 07                	jg     f0100a95 <kbd_proc_data+0x20b>
		return 0;
f0100a8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a93:	eb 4c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	if (c == 255)
f0100a95:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100a9c:	75 07                	jne    f0100aa5 <kbd_proc_data+0x21b>
		return 0;
f0100a9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aa3:	eb 3c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100aa5:	a1 48 29 53 f0       	mov    0xf0532948,%eax
f0100aaa:	f7 d0                	not    %eax
f0100aac:	83 e0 06             	and    $0x6,%eax
f0100aaf:	85 c0                	test   %eax,%eax
f0100ab1:	75 2b                	jne    f0100ade <kbd_proc_data+0x254>
f0100ab3:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100aba:	75 22                	jne    f0100ade <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100abc:	83 ec 0c             	sub    $0xc,%esp
f0100abf:	68 a8 81 11 f0       	push   $0xf01181a8
f0100ac4:	e8 cd 62 00 00       	call   f0106d96 <cprintf>
f0100ac9:	83 c4 10             	add    $0x10,%esp
f0100acc:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100ad3:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100ad7:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100ada:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100add:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100ae1:	c9                   	leave  
f0100ae2:	c3                   	ret    

f0100ae3 <kbd_intr>:

void
kbd_intr(void)
{
f0100ae3:	55                   	push   %ebp
f0100ae4:	89 e5                	mov    %esp,%ebp
f0100ae6:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ae9:	83 ec 0c             	sub    $0xc,%esp
f0100aec:	68 8a 08 10 f0       	push   $0xf010088a
f0100af1:	e8 0c 00 00 00       	call   f0100b02 <cons_intr>
f0100af6:	83 c4 10             	add    $0x10,%esp
}
f0100af9:	90                   	nop
f0100afa:	c9                   	leave  
f0100afb:	c3                   	ret    

f0100afc <kbd_init>:

void
kbd_init(void)
{
f0100afc:	55                   	push   %ebp
f0100afd:	89 e5                	mov    %esp,%ebp
}
f0100aff:	90                   	nop
f0100b00:	5d                   	pop    %ebp
f0100b01:	c3                   	ret    

f0100b02 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b02:	55                   	push   %ebp
f0100b03:	89 e5                	mov    %esp,%ebp
f0100b05:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b08:	eb 35                	jmp    f0100b3f <cons_intr+0x3d>
		if (c == 0)
f0100b0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b0e:	75 02                	jne    f0100b12 <cons_intr+0x10>
			continue;
f0100b10:	eb 2d                	jmp    f0100b3f <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b12:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100b17:	8d 50 01             	lea    0x1(%eax),%edx
f0100b1a:	89 15 44 29 53 f0    	mov    %edx,0xf0532944
f0100b20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b23:	88 90 40 27 53 f0    	mov    %dl,-0xfacd8c0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b29:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100b2e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b33:	75 0a                	jne    f0100b3f <cons_intr+0x3d>
			cons.wpos = 0;
f0100b35:	c7 05 44 29 53 f0 00 	movl   $0x0,0xf0532944
f0100b3c:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b42:	ff d0                	call   *%eax
f0100b44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b47:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b4b:	75 bd                	jne    f0100b0a <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b4d:	90                   	nop
f0100b4e:	c9                   	leave  
f0100b4f:	c3                   	ret    

f0100b50 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b50:	55                   	push   %ebp
f0100b51:	89 e5                	mov    %esp,%ebp
f0100b53:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b56:	e8 33 f8 ff ff       	call   f010038e <serial_intr>
	kbd_intr();
f0100b5b:	e8 83 ff ff ff       	call   f0100ae3 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b60:	8b 15 40 29 53 f0    	mov    0xf0532940,%edx
f0100b66:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100b6b:	39 c2                	cmp    %eax,%edx
f0100b6d:	74 35                	je     f0100ba4 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b6f:	a1 40 29 53 f0       	mov    0xf0532940,%eax
f0100b74:	8d 50 01             	lea    0x1(%eax),%edx
f0100b77:	89 15 40 29 53 f0    	mov    %edx,0xf0532940
f0100b7d:	8a 80 40 27 53 f0    	mov    -0xfacd8c0(%eax),%al
f0100b83:	0f b6 c0             	movzbl %al,%eax
f0100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b89:	a1 40 29 53 f0       	mov    0xf0532940,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc+0x4f>
			cons.rpos = 0;
f0100b95:	c7 05 40 29 53 f0 00 	movl   $0x0,0xf0532940
f0100b9c:	00 00 00 
		return c;
f0100b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ba2:	eb 05                	jmp    f0100ba9 <cons_getc+0x59>
	}
	return 0;
f0100ba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ba9:	c9                   	leave  
f0100baa:	c3                   	ret    

f0100bab <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100bab:	55                   	push   %ebp
f0100bac:	89 e5                	mov    %esp,%ebp
f0100bae:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bb8:	a1 24 27 53 f0       	mov    0xf0532724,%eax
f0100bbd:	85 c0                	test   %eax,%eax
f0100bbf:	74 41                	je     f0100c02 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bc1:	e8 86 f7 ff ff       	call   f010034c <serial_proc_data>
f0100bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bc9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100bcd:	74 33                	je     f0100c02 <cons_getc2+0x57>
				if (c1 == 0)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 2d                	je     f0100c02 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100bd5:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100bda:	8d 50 01             	lea    0x1(%eax),%edx
f0100bdd:	89 15 44 29 53 f0    	mov    %edx,0xf0532944
f0100be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100be6:	88 90 40 27 53 f0    	mov    %dl,-0xfacd8c0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100bec:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100bf1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bf6:	75 0a                	jne    f0100c02 <cons_getc2+0x57>
						cons.wpos = 0;
f0100bf8:	c7 05 44 29 53 f0 00 	movl   $0x0,0xf0532944
f0100bff:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c09:	e8 7c fc ff ff       	call   f010088a <kbd_proc_data>
f0100c0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c11:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c15:	74 33                	je     f0100c4a <cons_getc2+0x9f>
			if (c2 == 0)
f0100c17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c1b:	74 2d                	je     f0100c4a <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c1d:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100c22:	8d 50 01             	lea    0x1(%eax),%edx
f0100c25:	89 15 44 29 53 f0    	mov    %edx,0xf0532944
f0100c2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c2e:	88 90 40 27 53 f0    	mov    %dl,-0xfacd8c0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c34:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100c39:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c3e:	75 0a                	jne    f0100c4a <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c40:	c7 05 44 29 53 f0 00 	movl   $0x0,0xf0532944
f0100c47:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c4e:	7e 44                	jle    f0100c94 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c50:	8b 15 40 29 53 f0    	mov    0xf0532940,%edx
f0100c56:	a1 44 29 53 f0       	mov    0xf0532944,%eax
f0100c5b:	39 c2                	cmp    %eax,%edx
f0100c5d:	74 35                	je     f0100c94 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c5f:	a1 40 29 53 f0       	mov    0xf0532940,%eax
f0100c64:	8d 50 01             	lea    0x1(%eax),%edx
f0100c67:	89 15 40 29 53 f0    	mov    %edx,0xf0532940
f0100c6d:	8a 80 40 27 53 f0    	mov    -0xfacd8c0(%eax),%al
f0100c73:	0f b6 c0             	movzbl %al,%eax
f0100c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c79:	a1 40 29 53 f0       	mov    0xf0532940,%eax
f0100c7e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c83:	75 0a                	jne    f0100c8f <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c85:	c7 05 40 29 53 f0 00 	movl   $0x0,0xf0532940
f0100c8c:	00 00 00 
			return c;
f0100c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c92:	eb 05                	jmp    f0100c99 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c99:	c9                   	leave  
f0100c9a:	c3                   	ret    

f0100c9b <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c9b:	55                   	push   %ebp
f0100c9c:	89 e5                	mov    %esp,%ebp
f0100c9e:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100ca1:	ff 75 08             	pushl  0x8(%ebp)
f0100ca4:	e8 17 f8 ff ff       	call   f01004c0 <lpt_putc>
f0100ca9:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100cac:	83 ec 0c             	sub    $0xc,%esp
f0100caf:	ff 75 08             	pushl  0x8(%ebp)
f0100cb2:	e8 43 f9 ff ff       	call   f01005fa <cga_putc>
f0100cb7:	83 c4 10             	add    $0x10,%esp
}
f0100cba:	90                   	nop
f0100cbb:	c9                   	leave  
f0100cbc:	c3                   	ret    

f0100cbd <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cbd:	55                   	push   %ebp
f0100cbe:	89 e5                	mov    %esp,%ebp
f0100cc0:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100cc3:	e8 6d f8 ff ff       	call   f0100535 <cga_init>
	kbd_init();
f0100cc8:	e8 2f fe ff ff       	call   f0100afc <kbd_init>
	serial_init();
f0100ccd:	e8 de f6 ff ff       	call   f01003b0 <serial_init>

	if (!serial_exists)
f0100cd2:	a1 24 27 53 f0       	mov    0xf0532724,%eax
f0100cd7:	85 c0                	test   %eax,%eax
f0100cd9:	75 10                	jne    f0100ceb <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100cdb:	83 ec 0c             	sub    $0xc,%esp
f0100cde:	68 b4 81 11 f0       	push   $0xf01181b4
f0100ce3:	e8 ae 60 00 00       	call   f0106d96 <cprintf>
f0100ce8:	83 c4 10             	add    $0x10,%esp
}
f0100ceb:	90                   	nop
f0100cec:	c9                   	leave  
f0100ced:	c3                   	ret    

f0100cee <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100cee:	55                   	push   %ebp
f0100cef:	89 e5                	mov    %esp,%ebp
f0100cf1:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100cf4:	83 ec 0c             	sub    $0xc,%esp
f0100cf7:	ff 75 08             	pushl  0x8(%ebp)
f0100cfa:	e8 9c ff ff ff       	call   f0100c9b <cons_putc>
f0100cff:	83 c4 10             	add    $0x10,%esp
}
f0100d02:	90                   	nop
f0100d03:	c9                   	leave  
f0100d04:	c3                   	ret    

f0100d05 <getchar>:

int
getchar(void)
{
f0100d05:	55                   	push   %ebp
f0100d06:	89 e5                	mov    %esp,%ebp
f0100d08:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d0b:	e8 40 fe ff ff       	call   f0100b50 <cons_getc>
f0100d10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d17:	74 f2                	je     f0100d0b <getchar+0x6>
		/* do nothing */;
	return c;
f0100d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d1c:	c9                   	leave  
f0100d1d:	c3                   	ret    

f0100d1e <iscons>:

int
iscons(int fdnum)
{
f0100d1e:	55                   	push   %ebp
f0100d1f:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d21:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d26:	5d                   	pop    %ebp
f0100d27:	c3                   	ret    

f0100d28 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d28:	55                   	push   %ebp
f0100d29:	89 e5                	mov    %esp,%ebp
f0100d2b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d31:	c1 e8 0c             	shr    $0xc,%eax
f0100d34:	89 c2                	mov    %eax,%edx
f0100d36:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0100d3b:	39 c2                	cmp    %eax,%edx
f0100d3d:	72 14                	jb     f0100d53 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d3f:	83 ec 04             	sub    $0x4,%esp
f0100d42:	68 d4 81 11 f0       	push   $0xf01181d4
f0100d47:	6a 75                	push   $0x75
f0100d49:	68 f9 81 11 f0       	push   $0xf01181f9
f0100d4e:	e8 23 f4 ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f0100d53:	8b 15 c4 16 55 f0    	mov    0xf05516c4,%edx
f0100d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d5c:	c1 e8 0c             	shr    $0xc,%eax
f0100d5f:	89 c1                	mov    %eax,%ecx
f0100d61:	89 c8                	mov    %ecx,%eax
f0100d63:	01 c0                	add    %eax,%eax
f0100d65:	01 c8                	add    %ecx,%eax
f0100d67:	c1 e0 03             	shl    $0x3,%eax
f0100d6a:	01 d0                	add    %edx,%eax
}
f0100d6c:	c9                   	leave  
f0100d6d:	c3                   	ret    

f0100d6e <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100d6e:	55                   	push   %ebp
f0100d6f:	89 e5                	mov    %esp,%ebp
f0100d71:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100d74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100d7b:	eb 10                	jmp    f0100d8d <clearandwritecommand+0x1f>
		cputchar('\b');
f0100d7d:	83 ec 0c             	sub    $0xc,%esp
f0100d80:	6a 08                	push   $0x8
f0100d82:	e8 67 ff ff ff       	call   f0100cee <cputchar>
f0100d87:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100d8a:	ff 45 f4             	incl   -0xc(%ebp)
f0100d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d90:	8b 00                	mov    (%eax),%eax
f0100d92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100d95:	7f e6                	jg     f0100d7d <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100d97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100d9a:	c1 e0 0a             	shl    $0xa,%eax
f0100d9d:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f0100da2:	83 ec 0c             	sub    $0xc,%esp
f0100da5:	50                   	push   %eax
f0100da6:	e8 5e 66 01 00       	call   f0117409 <strlen>
f0100dab:	83 c4 10             	add    $0x10,%esp
f0100dae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100db1:	83 ec 04             	sub    $0x4,%esp
f0100db4:	68 00 04 00 00       	push   $0x400
f0100db9:	68 a0 12 55 f0       	push   $0xf05512a0
f0100dbe:	ff 75 10             	pushl  0x10(%ebp)
f0100dc1:	e8 61 68 01 00       	call   f0117627 <memcpy>
f0100dc6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dcc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100dd2:	eb 52                	jmp    f0100e26 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dd7:	8b 00                	mov    (%eax),%eax
f0100dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ddc:	c1 e2 0a             	shl    $0xa,%edx
f0100ddf:	01 d0                	add    %edx,%eax
f0100de1:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f0100de6:	8a 00                	mov    (%eax),%al
f0100de8:	0f be c0             	movsbl %al,%eax
f0100deb:	83 ec 0c             	sub    $0xc,%esp
f0100dee:	50                   	push   %eax
f0100def:	e8 fa fe ff ff       	call   f0100cee <cputchar>
f0100df4:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dfa:	8b 00                	mov    (%eax),%eax
f0100dfc:	89 c2                	mov    %eax,%edx
f0100dfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e01:	01 c2                	add    %eax,%edx
f0100e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e06:	8b 00                	mov    (%eax),%eax
f0100e08:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e0b:	c1 e1 0a             	shl    $0xa,%ecx
f0100e0e:	01 c8                	add    %ecx,%eax
f0100e10:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f0100e15:	8a 00                	mov    (%eax),%al
f0100e17:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e1c:	8b 00                	mov    (%eax),%eax
f0100e1e:	8d 50 01             	lea    0x1(%eax),%edx
f0100e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e24:	89 10                	mov    %edx,(%eax)
f0100e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e29:	8b 00                	mov    (%eax),%eax
f0100e2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e2e:	7c a4                	jl     f0100dd4 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e30:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e36:	89 10                	mov    %edx,(%eax)
}
f0100e38:	90                   	nop
f0100e39:	c9                   	leave  
f0100e3a:	c3                   	ret    

f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e3b:	55                   	push   %ebp
f0100e3c:	89 e5                	mov    %esp,%ebp
f0100e3e:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e48:	eb 10                	jmp    f0100e5a <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e4a:	83 ec 0c             	sub    $0xc,%esp
f0100e4d:	6a 08                	push   $0x8
f0100e4f:	e8 9a fe ff ff       	call   f0100cee <cputchar>
f0100e54:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e57:	ff 45 f4             	incl   -0xc(%ebp)
f0100e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e5d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e60:	7c e8                	jl     f0100e4a <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e62:	83 ec 0c             	sub    $0xc,%esp
f0100e65:	ff 75 0c             	pushl  0xc(%ebp)
f0100e68:	e8 9c 65 01 00       	call   f0117409 <strlen>
f0100e6d:	83 c4 10             	add    $0x10,%esp
f0100e70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e73:	83 ec 04             	sub    $0x4,%esp
f0100e76:	68 00 04 00 00       	push   $0x400
f0100e7b:	68 a0 12 55 f0       	push   $0xf05512a0
f0100e80:	ff 75 10             	pushl  0x10(%ebp)
f0100e83:	e8 9f 67 01 00       	call   f0117627 <memcpy>
f0100e88:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100e8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100e94:	eb 46                	jmp    f0100edc <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100e96:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e99:	8b 00                	mov    (%eax),%eax
f0100e9b:	89 c2                	mov    %eax,%edx
f0100e9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ea0:	01 d0                	add    %edx,%eax
f0100ea2:	8a 00                	mov    (%eax),%al
f0100ea4:	0f be c0             	movsbl %al,%eax
f0100ea7:	83 ec 0c             	sub    $0xc,%esp
f0100eaa:	50                   	push   %eax
f0100eab:	e8 3e fe ff ff       	call   f0100cee <cputchar>
f0100eb0:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eb6:	8b 00                	mov    (%eax),%eax
f0100eb8:	89 c2                	mov    %eax,%edx
f0100eba:	8b 45 10             	mov    0x10(%ebp),%eax
f0100ebd:	01 c2                	add    %eax,%edx
f0100ebf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ec2:	8b 00                	mov    (%eax),%eax
f0100ec4:	89 c1                	mov    %eax,%ecx
f0100ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ec9:	01 c8                	add    %ecx,%eax
f0100ecb:	8a 00                	mov    (%eax),%al
f0100ecd:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100ecf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed2:	8b 00                	mov    (%eax),%eax
f0100ed4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ed7:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eda:	89 10                	mov    %edx,(%eax)
f0100edc:	8b 45 14             	mov    0x14(%ebp),%eax
f0100edf:	8b 00                	mov    (%eax),%eax
f0100ee1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100ee4:	7c b0                	jl     f0100e96 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100ee6:	8b 45 18             	mov    0x18(%ebp),%eax
f0100ee9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100eec:	89 10                	mov    %edx,(%eax)
}
f0100eee:	90                   	nop
f0100eef:	c9                   	leave  
f0100ef0:	c3                   	ret    

f0100ef1 <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100ef1:	55                   	push   %ebp
f0100ef2:	89 e5                	mov    %esp,%ebp
f0100ef4:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100efe:	eb 21                	jmp    f0100f21 <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f03:	c1 e0 0a             	shl    $0xa,%eax
f0100f06:	05 80 32 53 f0       	add    $0xf0533280,%eax
f0100f0b:	83 ec 04             	sub    $0x4,%esp
f0100f0e:	68 00 04 00 00       	push   $0x400
f0100f13:	6a 00                	push   $0x0
f0100f15:	50                   	push   %eax
f0100f16:	e8 dc 66 01 00       	call   f01175f7 <memset>
f0100f1b:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0100f21:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f25:	7e d9                	jle    f0100f00 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f27:	90                   	nop
f0100f28:	c9                   	leave  
f0100f29:	c3                   	ret    

f0100f2a <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f2a:	55                   	push   %ebp
f0100f2b:	89 e5                	mov    %esp,%ebp
f0100f2d:	57                   	push   %edi
f0100f2e:	53                   	push   %ebx
f0100f2f:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f39:	74 13                	je     f0100f4e <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f3b:	83 ec 08             	sub    $0x8,%esp
f0100f3e:	ff 75 08             	pushl  0x8(%ebp)
f0100f41:	68 dd 8a 11 f0       	push   $0xf0118add
f0100f46:	e8 4b 5e 00 00       	call   f0106d96 <cprintf>
f0100f4b:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f4e:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0100f53:	40                   	inc    %eax
f0100f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f57:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f5e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f61:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f64:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100f6a:	83 ec 0c             	sub    $0xc,%esp
f0100f6d:	6a 00                	push   $0x0
f0100f6f:	e8 aa fd ff ff       	call   f0100d1e <iscons>
f0100f74:	83 c4 10             	add    $0x10,%esp
f0100f77:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100f7a:	e8 86 fd ff ff       	call   f0100d05 <getchar>
f0100f7f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100f82:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100f85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f88:	39 c2                	cmp    %eax,%edx
f0100f8a:	7e 06                	jle    f0100f92 <command_prompt_readline+0x68>
			lastIndex = i;
f0100f8c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f8f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100f92:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100f96:	79 22                	jns    f0100fba <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100f98:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100f9c:	0f 84 47 08 00 00    	je     f01017e9 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fa2:	83 ec 08             	sub    $0x8,%esp
f0100fa5:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fa8:	68 e0 8a 11 f0       	push   $0xf0118ae0
f0100fad:	e8 e4 5d 00 00       	call   f0106d96 <cprintf>
f0100fb2:	83 c4 10             	add    $0x10,%esp
			return;
f0100fb5:	e9 2f 08 00 00       	jmp    f01017e9 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100fba:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100fc1:	75 24                	jne    f0100fe7 <command_prompt_readline+0xbd>
			if (commandidx)
f0100fc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100fc7:	74 03                	je     f0100fcc <command_prompt_readline+0xa2>
				commandidx--;
f0100fc9:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0100fcc:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0100fcf:	50                   	push   %eax
f0100fd0:	ff 75 0c             	pushl  0xc(%ebp)
f0100fd3:	ff 75 f4             	pushl  -0xc(%ebp)
f0100fd6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0100fd9:	50                   	push   %eax
f0100fda:	e8 8f fd ff ff       	call   f0100d6e <clearandwritecommand>
f0100fdf:	83 c4 10             	add    $0x10,%esp
f0100fe2:	e9 eb 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0100fe7:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f0100fee:	75 35                	jne    f0101025 <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f0100ff0:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0100ff5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0100ff8:	7d 03                	jge    f0100ffd <command_prompt_readline+0xd3>
				commandidx++;
f0100ffa:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0100ffd:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101002:	85 c0                	test   %eax,%eax
f0101004:	0f 88 c8 07 00 00    	js     f01017d2 <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010100a:	8d 45 8c             	lea    -0x74(%ebp),%eax
f010100d:	50                   	push   %eax
f010100e:	ff 75 0c             	pushl  0xc(%ebp)
f0101011:	ff 75 f4             	pushl  -0xc(%ebp)
f0101014:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101017:	50                   	push   %eax
f0101018:	e8 51 fd ff ff       	call   f0100d6e <clearandwritecommand>
f010101d:	83 c4 10             	add    $0x10,%esp
f0101020:	e9 ad 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f0101025:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101029:	0f 85 71 05 00 00    	jne    f01015a0 <command_prompt_readline+0x676>
			if (last_c != 9) {
f010102f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101033:	0f 84 0c 05 00 00    	je     f0101545 <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101039:	83 ec 08             	sub    $0x8,%esp
f010103c:	6a 64                	push   $0x64
f010103e:	68 80 32 53 f0       	push   $0xf0533280
f0101043:	e8 a9 fe ff ff       	call   f0100ef1 <clear_prefix_list>
f0101048:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f010104b:	83 ec 0c             	sub    $0xc,%esp
f010104e:	ff 75 0c             	pushl  0xc(%ebp)
f0101051:	e8 b3 63 01 00       	call   f0117409 <strlen>
f0101056:	83 c4 10             	add    $0x10,%esp
f0101059:	85 c0                	test   %eax,%eax
f010105b:	0f 84 7c 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
f0101061:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101068:	0f 84 6f 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f010106e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101075:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101078:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f010107b:	83 ec 08             	sub    $0x8,%esp
f010107e:	ff 75 0c             	pushl  0xc(%ebp)
f0101081:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101087:	50                   	push   %eax
f0101088:	e8 cb 63 01 00       	call   f0117458 <strcpy>
f010108d:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 6e 63 01 00       	call   f0117409 <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010a4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010aa:	01 d0                	add    %edx,%eax
f01010ac:	8a 00                	mov    (%eax),%al
f01010ae:	3c 20                	cmp    $0x20,%al
f01010b0:	0f 84 2d 07 00 00    	je     f01017e3 <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010b6:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010b9:	50                   	push   %eax
f01010ba:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010c0:	50                   	push   %eax
f01010c1:	68 f0 8a 11 f0       	push   $0xf0118af0
f01010c6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010cc:	50                   	push   %eax
f01010cd:	e8 6b 69 01 00       	call   f0117a3d <strsplit>
f01010d2:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01010d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f01010dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01010df:	83 f8 01             	cmp    $0x1,%eax
f01010e2:	0f 8e dc 00 00 00    	jle    f01011c4 <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f01010e8:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f01010ee:	83 ec 08             	sub    $0x8,%esp
f01010f1:	68 af 84 11 f0       	push   $0xf01184af
f01010f6:	50                   	push   %eax
f01010f7:	e8 19 64 01 00       	call   f0117515 <strcmp>
f01010fc:	83 c4 10             	add    $0x10,%esp
f01010ff:	85 c0                	test   %eax,%eax
f0101101:	74 21                	je     f0101124 <command_prompt_readline+0x1fa>
f0101103:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101109:	83 ec 08             	sub    $0x8,%esp
f010110c:	68 ce 84 11 f0       	push   $0xf01184ce
f0101111:	50                   	push   %eax
f0101112:	e8 fe 63 01 00       	call   f0117515 <strcmp>
f0101117:	83 c4 10             	add    $0x10,%esp
f010111a:	85 c0                	test   %eax,%eax
f010111c:	74 06                	je     f0101124 <command_prompt_readline+0x1fa>
						continue;
f010111e:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010111f:	e9 b9 06 00 00       	jmp    f01017dd <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f0101124:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f010112b:	00 00 00 
f010112e:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101134:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101139:	b8 00 00 00 00       	mov    $0x0,%eax
f010113e:	89 d7                	mov    %edx,%edi
f0101140:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f0101142:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101145:	48                   	dec    %eax
f0101146:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f010114d:	83 ec 0c             	sub    $0xc,%esp
f0101150:	50                   	push   %eax
f0101151:	e8 b3 62 01 00       	call   f0117409 <strlen>
f0101156:	83 c4 10             	add    $0x10,%esp
f0101159:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010115c:	29 c2                	sub    %eax,%edx
f010115e:	89 d0                	mov    %edx,%eax
f0101160:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101163:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010116a:	eb 1d                	jmp    f0101189 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f010116c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010116f:	8d 50 01             	lea    0x1(%eax),%edx
f0101172:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101175:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101178:	8b 55 0c             	mov    0xc(%ebp),%edx
f010117b:	01 ca                	add    %ecx,%edx
f010117d:	8a 12                	mov    (%edx),%dl
f010117f:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101186:	ff 45 e0             	incl   -0x20(%ebp)
f0101189:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010118c:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f010118f:	7c db                	jl     f010116c <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101191:	83 ec 08             	sub    $0x8,%esp
f0101194:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f010119a:	50                   	push   %eax
f010119b:	ff 75 0c             	pushl  0xc(%ebp)
f010119e:	e8 b5 62 01 00       	call   f0117458 <strcpy>
f01011a3:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011a6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011a9:	48                   	dec    %eax
f01011aa:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011b1:	83 ec 08             	sub    $0x8,%esp
f01011b4:	50                   	push   %eax
f01011b5:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011bb:	50                   	push   %eax
f01011bc:	e8 97 62 01 00       	call   f0117458 <strcpy>
f01011c1:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f01011cb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011ce:	83 f8 01             	cmp    $0x1,%eax
f01011d1:	0f 85 2c 01 00 00    	jne    f0101303 <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01011d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01011de:	e9 0f 01 00 00       	jmp    f01012f2 <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f01011e3:	83 ec 0c             	sub    $0xc,%esp
f01011e6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011ec:	50                   	push   %eax
f01011ed:	e8 17 62 01 00       	call   f0117409 <strlen>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 c1                	mov    %eax,%ecx
f01011f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01011fa:	89 d0                	mov    %edx,%eax
f01011fc:	01 c0                	add    %eax,%eax
f01011fe:	01 d0                	add    %edx,%eax
f0101200:	c1 e0 02             	shl    $0x2,%eax
f0101203:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101208:	8b 00                	mov    (%eax),%eax
f010120a:	83 ec 04             	sub    $0x4,%esp
f010120d:	51                   	push   %ecx
f010120e:	50                   	push   %eax
f010120f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101215:	50                   	push   %eax
f0101216:	e8 32 63 01 00       	call   f011754d <strncmp>
f010121b:	83 c4 10             	add    $0x10,%esp
f010121e:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f0101221:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0101225:	0f 85 c4 00 00 00    	jne    f01012ef <command_prompt_readline+0x3c5>
							it_str = -1;
f010122b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101232:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101239:	00 00 00 
f010123c:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101242:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101247:	b8 00 00 00 00       	mov    $0x0,%eax
f010124c:	89 d7                	mov    %edx,%edi
f010124e:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101250:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101257:	eb 2d                	jmp    f0101286 <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101259:	ff 45 e4             	incl   -0x1c(%ebp)
f010125c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010125f:	89 d0                	mov    %edx,%eax
f0101261:	01 c0                	add    %eax,%eax
f0101263:	01 d0                	add    %edx,%eax
f0101265:	c1 e0 02             	shl    $0x2,%eax
f0101268:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f010126d:	8b 10                	mov    (%eax),%edx
f010126f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101272:	01 d0                	add    %edx,%eax
f0101274:	8a 00                	mov    (%eax),%al
f0101276:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f010127c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010127f:	01 ca                	add    %ecx,%edx
f0101281:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101283:	ff 45 d4             	incl   -0x2c(%ebp)
f0101286:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101289:	89 d0                	mov    %edx,%eax
f010128b:	01 c0                	add    %eax,%eax
f010128d:	01 d0                	add    %edx,%eax
f010128f:	c1 e0 02             	shl    $0x2,%eax
f0101292:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101297:	8b 00                	mov    (%eax),%eax
f0101299:	83 ec 0c             	sub    $0xc,%esp
f010129c:	50                   	push   %eax
f010129d:	e8 67 61 01 00       	call   f0117409 <strlen>
f01012a2:	83 c4 10             	add    $0x10,%esp
f01012a5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012a8:	7f af                	jg     f0101259 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012ad:	c1 e0 0a             	shl    $0xa,%eax
f01012b0:	05 80 32 53 f0       	add    $0xf0533280,%eax
f01012b5:	83 ec 04             	sub    $0x4,%esp
f01012b8:	68 00 04 00 00       	push   $0x400
f01012bd:	6a 00                	push   $0x0
f01012bf:	50                   	push   %eax
f01012c0:	e8 32 63 01 00       	call   f01175f7 <memset>
f01012c5:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01012c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01012cb:	40                   	inc    %eax
f01012cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01012cf:	c1 e2 0a             	shl    $0xa,%edx
f01012d2:	81 c2 80 32 53 f0    	add    $0xf0533280,%edx
f01012d8:	83 ec 04             	sub    $0x4,%esp
f01012db:	50                   	push   %eax
f01012dc:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01012e2:	50                   	push   %eax
f01012e3:	52                   	push   %edx
f01012e4:	e8 9d 61 01 00       	call   f0117486 <strncpy>
f01012e9:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01012ec:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01012ef:	ff 45 d8             	incl   -0x28(%ebp)
f01012f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f5:	83 f8 30             	cmp    $0x30,%eax
f01012f8:	0f 86 e5 fe ff ff    	jbe    f01011e3 <command_prompt_readline+0x2b9>
f01012fe:	e9 73 01 00 00       	jmp    f0101476 <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101303:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010130a:	e9 59 01 00 00       	jmp    f0101468 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f010130f:	83 ec 0c             	sub    $0xc,%esp
f0101312:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101318:	50                   	push   %eax
f0101319:	e8 eb 60 01 00       	call   f0117409 <strlen>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 c1                	mov    %eax,%ecx
f0101323:	8b 1d 14 ea 14 f0    	mov    0xf014ea14,%ebx
f0101329:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010132c:	89 d0                	mov    %edx,%eax
f010132e:	01 c0                	add    %eax,%eax
f0101330:	01 d0                	add    %edx,%eax
f0101332:	c1 e0 02             	shl    $0x2,%eax
f0101335:	01 d8                	add    %ebx,%eax
f0101337:	8b 00                	mov    (%eax),%eax
f0101339:	83 ec 04             	sub    $0x4,%esp
f010133c:	51                   	push   %ecx
f010133d:	50                   	push   %eax
f010133e:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101344:	50                   	push   %eax
f0101345:	e8 03 62 01 00       	call   f011754d <strncmp>
f010134a:	83 c4 10             	add    $0x10,%esp
f010134d:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f0101350:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101354:	0f 85 0b 01 00 00    	jne    f0101465 <command_prompt_readline+0x53b>
							it_str = -1;
f010135a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101361:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101368:	00 00 00 
f010136b:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101371:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101376:	b8 00 00 00 00       	mov    $0x0,%eax
f010137b:	89 d7                	mov    %edx,%edi
f010137d:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f010137f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101382:	83 f8 01             	cmp    $0x1,%eax
f0101385:	7e 39                	jle    f01013c0 <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101387:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010138e:	eb 1d                	jmp    f01013ad <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f0101390:	ff 45 e4             	incl   -0x1c(%ebp)
f0101393:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0101396:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101399:	01 d0                	add    %edx,%eax
f010139b:	8a 00                	mov    (%eax),%al
f010139d:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013a6:	01 ca                	add    %ecx,%edx
f01013a8:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013aa:	ff 45 cc             	incl   -0x34(%ebp)
f01013ad:	83 ec 0c             	sub    $0xc,%esp
f01013b0:	ff 75 0c             	pushl  0xc(%ebp)
f01013b3:	e8 51 60 01 00       	call   f0117409 <strlen>
f01013b8:	83 c4 10             	add    $0x10,%esp
f01013bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013be:	7f d0                	jg     f0101390 <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013c0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01013c7:	eb 30                	jmp    f01013f9 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f01013c9:	ff 45 e4             	incl   -0x1c(%ebp)
f01013cc:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f01013d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d5:	89 d0                	mov    %edx,%eax
f01013d7:	01 c0                	add    %eax,%eax
f01013d9:	01 d0                	add    %edx,%eax
f01013db:	c1 e0 02             	shl    $0x2,%eax
f01013de:	01 c8                	add    %ecx,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013f6:	ff 45 c8             	incl   -0x38(%ebp)
f01013f9:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f01013ff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101402:	89 d0                	mov    %edx,%eax
f0101404:	01 c0                	add    %eax,%eax
f0101406:	01 d0                	add    %edx,%eax
f0101408:	c1 e0 02             	shl    $0x2,%eax
f010140b:	01 c8                	add    %ecx,%eax
f010140d:	8b 00                	mov    (%eax),%eax
f010140f:	83 ec 0c             	sub    $0xc,%esp
f0101412:	50                   	push   %eax
f0101413:	e8 f1 5f 01 00       	call   f0117409 <strlen>
f0101418:	83 c4 10             	add    $0x10,%esp
f010141b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010141e:	7f a9                	jg     f01013c9 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101420:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101423:	c1 e0 0a             	shl    $0xa,%eax
f0101426:	05 80 32 53 f0       	add    $0xf0533280,%eax
f010142b:	83 ec 04             	sub    $0x4,%esp
f010142e:	68 00 04 00 00       	push   $0x400
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 bc 61 01 00       	call   f01175f7 <memset>
f010143b:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101441:	40                   	inc    %eax
f0101442:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101445:	c1 e2 0a             	shl    $0xa,%edx
f0101448:	81 c2 80 32 53 f0    	add    $0xf0533280,%edx
f010144e:	83 ec 04             	sub    $0x4,%esp
f0101451:	50                   	push   %eax
f0101452:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101458:	50                   	push   %eax
f0101459:	52                   	push   %edx
f010145a:	e8 27 60 01 00       	call   f0117486 <strncpy>
f010145f:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101462:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101465:	ff 45 d0             	incl   -0x30(%ebp)
f0101468:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f010146d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f0101470:	0f 8c 99 fe ff ff    	jl     f010130f <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101476:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101479:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010147c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101480:	0f 84 4c 03 00 00    	je     f01017d2 <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f0101486:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010148d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101490:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101493:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f010149a:	eb 1f                	jmp    f01014bb <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f010149c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010149f:	8d 50 01             	lea    0x1(%eax),%edx
f01014a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014a5:	89 c2                	mov    %eax,%edx
f01014a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014aa:	01 c2                	add    %eax,%edx
f01014ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014af:	05 80 32 53 f0       	add    $0xf0533280,%eax
f01014b4:	8a 00                	mov    (%eax),%al
f01014b6:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014b8:	ff 45 c4             	incl   -0x3c(%ebp)
f01014bb:	83 ec 0c             	sub    $0xc,%esp
f01014be:	68 80 32 53 f0       	push   $0xf0533280
f01014c3:	e8 41 5f 01 00       	call   f0117409 <strlen>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01014ce:	7f cc                	jg     f010149c <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014d0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01014d7:	eb 10                	jmp    f01014e9 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f01014d9:	83 ec 0c             	sub    $0xc,%esp
f01014dc:	6a 08                	push   $0x8
f01014de:	e8 0b f8 ff ff       	call   f0100cee <cputchar>
f01014e3:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014e6:	ff 45 c0             	incl   -0x40(%ebp)
f01014e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01014ec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01014ef:	7c e8                	jl     f01014d9 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01014f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01014f8:	eb 1c                	jmp    f0101516 <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f01014fa:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	01 d0                	add    %edx,%eax
f0101502:	8a 00                	mov    (%eax),%al
f0101504:	0f be c0             	movsbl %al,%eax
f0101507:	83 ec 0c             	sub    $0xc,%esp
f010150a:	50                   	push   %eax
f010150b:	e8 de f7 ff ff       	call   f0100cee <cputchar>
f0101510:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101513:	ff 45 bc             	incl   -0x44(%ebp)
f0101516:	83 ec 0c             	sub    $0xc,%esp
f0101519:	ff 75 0c             	pushl  0xc(%ebp)
f010151c:	e8 e8 5e 01 00       	call   f0117409 <strlen>
f0101521:	83 c4 10             	add    $0x10,%esp
f0101524:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101527:	7f d1                	jg     f01014fa <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101529:	83 ec 0c             	sub    $0xc,%esp
f010152c:	ff 75 0c             	pushl  0xc(%ebp)
f010152f:	e8 d5 5e 01 00       	call   f0117409 <strlen>
f0101534:	83 c4 10             	add    $0x10,%esp
f0101537:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010153a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010153d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0101540:	e9 8d 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101545:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101549:	0f 8e 83 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
f010154f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101552:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101555:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101558:	40                   	inc    %eax
f0101559:	99                   	cltd   
f010155a:	f7 7d ec             	idivl  -0x14(%ebp)
f010155d:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f0101560:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101563:	c1 e0 0a             	shl    $0xa,%eax
f0101566:	8d 98 80 32 53 f0    	lea    -0xfaccd80(%eax),%ebx
f010156c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010156f:	c1 e0 0a             	shl    $0xa,%eax
f0101572:	05 80 32 53 f0       	add    $0xf0533280,%eax
f0101577:	83 ec 0c             	sub    $0xc,%esp
f010157a:	50                   	push   %eax
f010157b:	e8 89 5e 01 00       	call   f0117409 <strlen>
f0101580:	83 c4 10             	add    $0x10,%esp
f0101583:	83 ec 0c             	sub    $0xc,%esp
f0101586:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0101589:	52                   	push   %edx
f010158a:	8d 55 90             	lea    -0x70(%ebp),%edx
f010158d:	52                   	push   %edx
f010158e:	ff 75 0c             	pushl  0xc(%ebp)
f0101591:	53                   	push   %ebx
f0101592:	50                   	push   %eax
f0101593:	e8 a3 f8 ff ff       	call   f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>
f0101598:	83 c4 20             	add    $0x20,%esp
f010159b:	e9 32 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015a0:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015a7:	75 25                	jne    f01015ce <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015ac:	85 c0                	test   %eax,%eax
f01015ae:	0f 8e 1e 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
				i--;
f01015b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015b7:	48                   	dec    %eax
f01015b8:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015bb:	83 ec 0c             	sub    $0xc,%esp
f01015be:	ff 75 a8             	pushl  -0x58(%ebp)
f01015c1:	e8 28 f7 ff ff       	call   f0100cee <cputchar>
f01015c6:	83 c4 10             	add    $0x10,%esp
f01015c9:	e9 04 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f01015ce:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f01015d5:	75 28                	jne    f01015ff <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f01015d7:	8b 55 90             	mov    -0x70(%ebp),%edx
f01015da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01015dd:	39 c2                	cmp    %eax,%edx
f01015df:	0f 8d ed 01 00 00    	jge    f01017d2 <command_prompt_readline+0x8a8>
				i++;
f01015e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015e8:	40                   	inc    %eax
f01015e9:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015ec:	83 ec 0c             	sub    $0xc,%esp
f01015ef:	ff 75 a8             	pushl  -0x58(%ebp)
f01015f2:	e8 f7 f6 ff ff       	call   f0100cee <cputchar>
f01015f7:	83 c4 10             	add    $0x10,%esp
f01015fa:	e9 d3 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f01015ff:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f0101606:	75 3d                	jne    f0101645 <command_prompt_readline+0x71b>
f0101608:	8b 45 90             	mov    -0x70(%ebp),%eax
f010160b:	85 c0                	test   %eax,%eax
f010160d:	7e 36                	jle    f0101645 <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f010160f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101612:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0101615:	eb 1a                	jmp    f0101631 <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101617:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010161a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010161d:	01 c2                	add    %eax,%edx
f010161f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0101622:	8d 48 01             	lea    0x1(%eax),%ecx
f0101625:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101628:	01 c8                	add    %ecx,%eax
f010162a:	8a 00                	mov    (%eax),%al
f010162c:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f010162e:	ff 45 b8             	incl   -0x48(%ebp)
f0101631:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101634:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101637:	7e de                	jle    f0101617 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101639:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010163c:	48                   	dec    %eax
f010163d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101640:	e9 8d 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101645:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101649:	7e 51                	jle    f010169c <command_prompt_readline+0x772>
f010164b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010164e:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101653:	7f 47                	jg     f010169c <command_prompt_readline+0x772>
f0101655:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f010165c:	74 3e                	je     f010169c <command_prompt_readline+0x772>
f010165e:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f0101665:	74 35                	je     f010169c <command_prompt_readline+0x772>
			if (echoing)
f0101667:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f010166b:	74 0e                	je     f010167b <command_prompt_readline+0x751>
				cputchar(c);
f010166d:	83 ec 0c             	sub    $0xc,%esp
f0101670:	ff 75 a8             	pushl  -0x58(%ebp)
f0101673:	e8 76 f6 ff ff       	call   f0100cee <cputchar>
f0101678:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f010167b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010167e:	8d 50 01             	lea    0x1(%eax),%edx
f0101681:	89 55 90             	mov    %edx,-0x70(%ebp)
f0101684:	89 c2                	mov    %eax,%edx
f0101686:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101689:	01 d0                	add    %edx,%eax
f010168b:	8b 55 a8             	mov    -0x58(%ebp),%edx
f010168e:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101690:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101693:	40                   	inc    %eax
f0101694:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101697:	e9 36 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f010169c:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016a0:	75 51                	jne    f01016f3 <command_prompt_readline+0x7c9>
f01016a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016a5:	85 c0                	test   %eax,%eax
f01016a7:	7e 4a                	jle    f01016f3 <command_prompt_readline+0x7c9>

			if (echoing)
f01016a9:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016ad:	74 0e                	je     f01016bd <command_prompt_readline+0x793>
				cputchar(c);
f01016af:	83 ec 0c             	sub    $0xc,%esp
f01016b2:	ff 75 a8             	pushl  -0x58(%ebp)
f01016b5:	e8 34 f6 ff ff       	call   f0100cee <cputchar>
f01016ba:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016c3:	eb 1a                	jmp    f01016df <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016c8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01016cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ce:	01 c2                	add    %eax,%edx
f01016d0:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01016d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016d6:	01 c8                	add    %ecx,%eax
f01016d8:	8a 00                	mov    (%eax),%al
f01016da:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f01016dc:	ff 45 b4             	incl   -0x4c(%ebp)
f01016df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016e2:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f01016e5:	7e de                	jle    f01016c5 <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f01016e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016ea:	48                   	dec    %eax
f01016eb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01016ee:	e9 df 00 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f01016f3:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f01016f7:	74 0a                	je     f0101703 <command_prompt_readline+0x7d9>
f01016f9:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f01016fd:	0f 85 cf 00 00 00    	jne    f01017d2 <command_prompt_readline+0x8a8>

			if (echoing)
f0101703:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101707:	74 0e                	je     f0101717 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101709:	83 ec 0c             	sub    $0xc,%esp
f010170c:	ff 75 a8             	pushl  -0x58(%ebp)
f010170f:	e8 da f5 ff ff       	call   f0100cee <cputchar>
f0101714:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101717:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010171a:	89 c2                	mov    %eax,%edx
f010171c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010171f:	01 d0                	add    %edx,%eax
f0101721:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101724:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101729:	83 f8 13             	cmp    $0x13,%eax
f010172c:	75 56                	jne    f0101784 <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010172e:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101735:	eb 2d                	jmp    f0101764 <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101737:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010173a:	40                   	inc    %eax
f010173b:	c1 e0 0a             	shl    $0xa,%eax
f010173e:	8d 90 80 c2 54 f0    	lea    -0xfab3d80(%eax),%edx
f0101744:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101747:	c1 e0 0a             	shl    $0xa,%eax
f010174a:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f010174f:	83 ec 04             	sub    $0x4,%esp
f0101752:	68 00 04 00 00       	push   $0x400
f0101757:	52                   	push   %edx
f0101758:	50                   	push   %eax
f0101759:	e8 c9 5e 01 00       	call   f0117627 <memcpy>
f010175e:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101761:	ff 45 b0             	incl   -0x50(%ebp)
f0101764:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f0101768:	7e cd                	jle    f0101737 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f010176a:	83 ec 04             	sub    $0x4,%esp
f010176d:	68 00 04 00 00       	push   $0x400
f0101772:	ff 75 0c             	pushl  0xc(%ebp)
f0101775:	68 80 0e 55 f0       	push   $0xf0550e80
f010177a:	e8 a8 5e 01 00       	call   f0117627 <memcpy>
f010177f:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101782:	eb 68                	jmp    f01017ec <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101784:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101789:	c1 e0 0a             	shl    $0xa,%eax
f010178c:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f0101791:	83 ec 08             	sub    $0x8,%esp
f0101794:	ff 75 0c             	pushl  0xc(%ebp)
f0101797:	50                   	push   %eax
f0101798:	e8 78 5d 01 00       	call   f0117515 <strcmp>
f010179d:	83 c4 10             	add    $0x10,%esp
f01017a0:	85 c0                	test   %eax,%eax
f01017a2:	74 48                	je     f01017ec <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017a4:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f01017a9:	40                   	inc    %eax
f01017aa:	a3 8c e7 14 f0       	mov    %eax,0xf014e78c
f01017af:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f01017b4:	c1 e0 0a             	shl    $0xa,%eax
f01017b7:	05 80 c2 54 f0       	add    $0xf054c280,%eax
f01017bc:	83 ec 04             	sub    $0x4,%esp
f01017bf:	68 00 04 00 00       	push   $0x400
f01017c4:	ff 75 0c             	pushl  0xc(%ebp)
f01017c7:	50                   	push   %eax
f01017c8:	e8 5a 5e 01 00       	call   f0117627 <memcpy>
f01017cd:	83 c4 10             	add    $0x10,%esp
			}
			return;
f01017d0:	eb 1a                	jmp    f01017ec <command_prompt_readline+0x8c2>

		}
		last_c = c;
f01017d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01017d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01017d8:	e9 9d f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01017dd:	90                   	nop
f01017de:	e9 97 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f01017e3:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f01017e4:	e9 91 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01017e9:	90                   	nop
f01017ea:	eb 01                	jmp    f01017ed <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f01017ec:	90                   	nop

		}
		last_c = c;
	}
}
f01017ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01017f0:	5b                   	pop    %ebx
f01017f1:	5f                   	pop    %edi
f01017f2:	5d                   	pop    %ebp
f01017f3:	c3                   	ret    

f01017f4 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f01017f4:	55                   	push   %ebp
f01017f5:	89 e5                	mov    %esp,%ebp
f01017f7:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f01017fd:	83 ec 04             	sub    $0x4,%esp
f0101800:	68 00 04 00 00       	push   $0x400
f0101805:	6a 00                	push   $0x0
f0101807:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010180d:	50                   	push   %eax
f010180e:	e8 e4 5d 01 00       	call   f01175f7 <memset>
f0101813:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101816:	83 ec 08             	sub    $0x8,%esp
f0101819:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010181f:	50                   	push   %eax
f0101820:	68 f5 8a 11 f0       	push   $0xf0118af5
f0101825:	e8 00 f7 ff ff       	call   f0100f2a <command_prompt_readline>
f010182a:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f010182d:	83 ec 0c             	sub    $0xc,%esp
f0101830:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101836:	50                   	push   %eax
f0101837:	e8 0d 00 00 00       	call   f0101849 <execute_command>
f010183c:	83 c4 10             	add    $0x10,%esp
f010183f:	85 c0                	test   %eax,%eax
f0101841:	78 02                	js     f0101845 <run_command_prompt+0x51>
				break;
	}
f0101843:	eb b8                	jmp    f01017fd <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101845:	90                   	nop
	}
}
f0101846:	90                   	nop
f0101847:	c9                   	leave  
f0101848:	c3                   	ret    

f0101849 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101849:	55                   	push   %ebp
f010184a:	89 e5                	mov    %esp,%ebp
f010184c:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f010184f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0101852:	50                   	push   %eax
f0101853:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0101856:	50                   	push   %eax
f0101857:	68 f0 8a 11 f0       	push   $0xf0118af0
f010185c:	ff 75 08             	pushl  0x8(%ebp)
f010185f:	e8 d9 61 01 00       	call   f0117a3d <strsplit>
f0101864:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101867:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010186a:	85 c0                	test   %eax,%eax
f010186c:	75 0a                	jne    f0101878 <execute_command+0x2f>
		return 0;
f010186e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101873:	e9 95 00 00 00       	jmp    f010190d <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0101878:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010187f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101886:	eb 33                	jmp    f01018bb <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0101888:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010188b:	89 d0                	mov    %edx,%eax
f010188d:	01 c0                	add    %eax,%eax
f010188f:	01 d0                	add    %edx,%eax
f0101891:	c1 e0 02             	shl    $0x2,%eax
f0101894:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101899:	8b 10                	mov    (%eax),%edx
f010189b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010189e:	83 ec 08             	sub    $0x8,%esp
f01018a1:	52                   	push   %edx
f01018a2:	50                   	push   %eax
f01018a3:	e8 6d 5c 01 00       	call   f0117515 <strcmp>
f01018a8:	83 c4 10             	add    $0x10,%esp
f01018ab:	85 c0                	test   %eax,%eax
f01018ad:	75 09                	jne    f01018b8 <execute_command+0x6f>
		{
			command_found = 1;
f01018af:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018b6:	eb 0b                	jmp    f01018c3 <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018b8:	ff 45 f0             	incl   -0x10(%ebp)
f01018bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018be:	83 f8 30             	cmp    $0x30,%eax
f01018c1:	76 c5                	jbe    f0101888 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018c7:	74 2b                	je     f01018f4 <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f01018c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018cc:	89 d0                	mov    %edx,%eax
f01018ce:	01 c0                	add    %eax,%eax
f01018d0:	01 d0                	add    %edx,%eax
f01018d2:	c1 e0 02             	shl    $0x2,%eax
f01018d5:	05 48 e5 14 f0       	add    $0xf014e548,%eax
f01018da:	8b 00                	mov    (%eax),%eax
f01018dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01018df:	83 ec 08             	sub    $0x8,%esp
f01018e2:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f01018e5:	51                   	push   %ecx
f01018e6:	52                   	push   %edx
f01018e7:	ff d0                	call   *%eax
f01018e9:	83 c4 10             	add    $0x10,%esp
f01018ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f01018ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01018f2:	eb 19                	jmp    f010190d <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f01018f4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018f7:	83 ec 08             	sub    $0x8,%esp
f01018fa:	50                   	push   %eax
f01018fb:	68 fb 8a 11 f0       	push   $0xf0118afb
f0101900:	e8 91 54 00 00       	call   f0106d96 <cprintf>
f0101905:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101908:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010190d:	c9                   	leave  
f010190e:	c3                   	ret    

f010190f <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010190f:	55                   	push   %ebp
f0101910:	89 e5                	mov    %esp,%ebp
f0101912:	53                   	push   %ebx
f0101913:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010191d:	eb 3b                	jmp    f010195a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010191f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101922:	89 d0                	mov    %edx,%eax
f0101924:	01 c0                	add    %eax,%eax
f0101926:	01 d0                	add    %edx,%eax
f0101928:	c1 e0 02             	shl    $0x2,%eax
f010192b:	05 44 e5 14 f0       	add    $0xf014e544,%eax
f0101930:	8b 10                	mov    (%eax),%edx
f0101932:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101935:	89 c8                	mov    %ecx,%eax
f0101937:	01 c0                	add    %eax,%eax
f0101939:	01 c8                	add    %ecx,%eax
f010193b:	c1 e0 02             	shl    $0x2,%eax
f010193e:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101943:	8b 00                	mov    (%eax),%eax
f0101945:	83 ec 04             	sub    $0x4,%esp
f0101948:	52                   	push   %edx
f0101949:	50                   	push   %eax
f010194a:	68 11 8b 11 f0       	push   $0xf0118b11
f010194f:	e8 42 54 00 00       	call   f0106d96 <cprintf>
f0101954:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101957:	ff 45 f4             	incl   -0xc(%ebp)
f010195a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010195d:	83 f8 30             	cmp    $0x30,%eax
f0101960:	76 bd                	jbe    f010191f <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101962:	83 ec 0c             	sub    $0xc,%esp
f0101965:	68 1a 8b 11 f0       	push   $0xf0118b1a
f010196a:	e8 27 54 00 00       	call   f0106d96 <cprintf>
f010196f:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101972:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101979:	eb 42                	jmp    f01019bd <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010197b:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f0101981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101984:	89 d0                	mov    %edx,%eax
f0101986:	01 c0                	add    %eax,%eax
f0101988:	01 d0                	add    %edx,%eax
f010198a:	c1 e0 02             	shl    $0x2,%eax
f010198d:	01 c8                	add    %ecx,%eax
f010198f:	8b 50 04             	mov    0x4(%eax),%edx
f0101992:	8b 1d 14 ea 14 f0    	mov    0xf014ea14,%ebx
f0101998:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010199b:	89 c8                	mov    %ecx,%eax
f010199d:	01 c0                	add    %eax,%eax
f010199f:	01 c8                	add    %ecx,%eax
f01019a1:	c1 e0 02             	shl    $0x2,%eax
f01019a4:	01 d8                	add    %ebx,%eax
f01019a6:	8b 00                	mov    (%eax),%eax
f01019a8:	83 ec 04             	sub    $0x4,%esp
f01019ab:	52                   	push   %edx
f01019ac:	50                   	push   %eax
f01019ad:	68 2f 8b 11 f0       	push   $0xf0118b2f
f01019b2:	e8 df 53 00 00       	call   f0106d96 <cprintf>
f01019b7:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019ba:	ff 45 f4             	incl   -0xc(%ebp)
f01019bd:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01019c2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019c5:	7c b4                	jl     f010197b <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f01019c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01019cf:	c9                   	leave  
f01019d0:	c3                   	ret    

f01019d1 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01019d1:	55                   	push   %ebp
f01019d2:	89 e5                	mov    %esp,%ebp
f01019d4:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01019d7:	83 ec 0c             	sub    $0xc,%esp
f01019da:	68 4b 8b 11 f0       	push   $0xf0118b4b
f01019df:	e8 b2 53 00 00       	call   f0106d96 <cprintf>
f01019e4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01019e7:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01019ec:	83 ec 04             	sub    $0x4,%esp
f01019ef:	50                   	push   %eax
f01019f0:	68 0c 00 10 f0       	push   $0xf010000c
f01019f5:	68 64 8b 11 f0       	push   $0xf0118b64
f01019fa:	e8 97 53 00 00       	call   f0106d96 <cprintf>
f01019ff:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a02:	b8 3d 80 11 00       	mov    $0x11803d,%eax
f0101a07:	83 ec 04             	sub    $0x4,%esp
f0101a0a:	50                   	push   %eax
f0101a0b:	68 3d 80 11 f0       	push   $0xf011803d
f0101a10:	68 a0 8b 11 f0       	push   $0xf0118ba0
f0101a15:	e8 7c 53 00 00       	call   f0106d96 <cprintf>
f0101a1a:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a1d:	b8 f2 26 53 00       	mov    $0x5326f2,%eax
f0101a22:	83 ec 04             	sub    $0x4,%esp
f0101a25:	50                   	push   %eax
f0101a26:	68 f2 26 53 f0       	push   $0xf05326f2
f0101a2b:	68 dc 8b 11 f0       	push   $0xf0118bdc
f0101a30:	e8 61 53 00 00       	call   f0106d96 <cprintf>
f0101a35:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a38:	b8 f4 96 61 00       	mov    $0x6196f4,%eax
f0101a3d:	83 ec 04             	sub    $0x4,%esp
f0101a40:	50                   	push   %eax
f0101a41:	68 f4 96 61 f0       	push   $0xf06196f4
f0101a46:	68 24 8c 11 f0       	push   $0xf0118c24
f0101a4b:	e8 46 53 00 00       	call   f0106d96 <cprintf>
f0101a50:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a53:	b8 f4 96 61 f0       	mov    $0xf06196f4,%eax
f0101a58:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a5e:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a63:	29 c2                	sub    %eax,%edx
f0101a65:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101a67:	85 c0                	test   %eax,%eax
f0101a69:	79 05                	jns    f0101a70 <command_kernel_info+0x9f>
f0101a6b:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101a70:	c1 f8 0a             	sar    $0xa,%eax
f0101a73:	83 ec 08             	sub    $0x8,%esp
f0101a76:	50                   	push   %eax
f0101a77:	68 60 8c 11 f0       	push   $0xf0118c60
f0101a7c:	e8 15 53 00 00       	call   f0106d96 <cprintf>
f0101a81:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101a84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a89:	c9                   	leave  
f0101a8a:	c3                   	ret    

f0101a8b <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101a8b:	55                   	push   %ebp
f0101a8c:	89 e5                	mov    %esp,%ebp
f0101a8e:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	83 c0 04             	add    $0x4,%eax
f0101a97:	8b 00                	mov    (%eax),%eax
f0101a99:	83 ec 04             	sub    $0x4,%esp
f0101a9c:	6a 0a                	push   $0xa
f0101a9e:	6a 00                	push   $0x0
f0101aa0:	50                   	push   %eax
f0101aa1:	e8 c3 5c 01 00       	call   f0117769 <strtol>
f0101aa6:	83 c4 10             	add    $0x10,%esp
f0101aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101aac:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101ab3:	83 ec 04             	sub    $0x4,%esp
f0101ab6:	6a 00                	push   $0x0
f0101ab8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101abb:	50                   	push   %eax
f0101abc:	ff 75 f4             	pushl  -0xc(%ebp)
f0101abf:	e8 ee 15 00 00       	call   f01030b2 <envid2env>
f0101ac4:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aca:	83 c0 0c             	add    $0xc,%eax
f0101acd:	8b 00                	mov    (%eax),%eax
f0101acf:	83 ec 04             	sub    $0x4,%esp
f0101ad2:	6a 10                	push   $0x10
f0101ad4:	6a 00                	push   $0x0
f0101ad6:	50                   	push   %eax
f0101ad7:	e8 8d 5c 01 00       	call   f0117769 <strtol>
f0101adc:	83 c4 10             	add    $0x10,%esp
f0101adf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101ae2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ae5:	85 c0                	test   %eax,%eax
f0101ae7:	75 07                	jne    f0101af0 <command_writeusermem+0x65>
f0101ae9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101aee:	eb 43                	jmp    f0101b33 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101af0:	0f 20 d8             	mov    %cr3,%eax
f0101af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101af6:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101af9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101afc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101aff:	8b 40 60             	mov    0x60(%eax),%eax
f0101b02:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b08:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b14:	83 c0 08             	add    $0x8,%eax
f0101b17:	8b 00                	mov    (%eax),%eax
f0101b19:	8a 00                	mov    (%eax),%al
f0101b1b:	88 c2                	mov    %al,%dl
f0101b1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b20:	88 10                	mov    %dl,(%eax)
f0101b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b25:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b2b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b33:	c9                   	leave  
f0101b34:	c3                   	ret    

f0101b35 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b35:	55                   	push   %ebp
f0101b36:	89 e5                	mov    %esp,%ebp
f0101b38:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b3e:	83 c0 04             	add    $0x4,%eax
f0101b41:	8b 00                	mov    (%eax),%eax
f0101b43:	83 ec 04             	sub    $0x4,%esp
f0101b46:	6a 10                	push   $0x10
f0101b48:	6a 00                	push   $0x0
f0101b4a:	50                   	push   %eax
f0101b4b:	e8 19 5c 01 00       	call   f0117769 <strtol>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5e:	83 c0 08             	add    $0x8,%eax
f0101b61:	8b 00                	mov    (%eax),%eax
f0101b63:	83 ec 04             	sub    $0x4,%esp
f0101b66:	6a 0a                	push   $0xa
f0101b68:	6a 00                	push   $0x0
f0101b6a:	50                   	push   %eax
f0101b6b:	e8 f9 5b 01 00       	call   f0117769 <strtol>
f0101b70:	83 c4 10             	add    $0x10,%esp
f0101b73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101b76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 0c             	sub    $0xc,%esp
f0101b88:	50                   	push   %eax
f0101b89:	e8 7b 58 01 00       	call   f0117409 <strlen>
f0101b8e:	83 c4 10             	add    $0x10,%esp
f0101b91:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101b94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101b9b:	eb 30                	jmp    f0101bcd <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101b9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ba4:	eb 1c                	jmp    f0101bc2 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ba9:	83 c0 0c             	add    $0xc,%eax
f0101bac:	8b 10                	mov    (%eax),%edx
f0101bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bb1:	01 d0                	add    %edx,%eax
f0101bb3:	8a 00                	mov    (%eax),%al
f0101bb5:	88 c2                	mov    %al,%dl
f0101bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bba:	88 10                	mov    %dl,(%eax)
			address++;
f0101bbc:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bbf:	ff 45 ec             	incl   -0x14(%ebp)
f0101bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bc5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101bc8:	7c dc                	jl     f0101ba6 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101bca:	ff 45 f0             	incl   -0x10(%ebp)
f0101bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101bd0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101bd3:	7c c8                	jl     f0101b9d <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101bd5:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101bda:	c9                   	leave  
f0101bdb:	c3                   	ret    

f0101bdc <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101bdc:	55                   	push   %ebp
f0101bdd:	89 e5                	mov    %esp,%ebp
f0101bdf:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101be2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be5:	83 c0 04             	add    $0x4,%eax
f0101be8:	8b 00                	mov    (%eax),%eax
f0101bea:	83 ec 04             	sub    $0x4,%esp
f0101bed:	6a 0a                	push   $0xa
f0101bef:	6a 00                	push   $0x0
f0101bf1:	50                   	push   %eax
f0101bf2:	e8 72 5b 01 00       	call   f0117769 <strtol>
f0101bf7:	83 c4 10             	add    $0x10,%esp
f0101bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101bfd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c04:	83 ec 04             	sub    $0x4,%esp
f0101c07:	6a 00                	push   $0x0
f0101c09:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c0c:	50                   	push   %eax
f0101c0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c10:	e8 9d 14 00 00       	call   f01030b2 <envid2env>
f0101c15:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c1b:	83 c0 08             	add    $0x8,%eax
f0101c1e:	8b 00                	mov    (%eax),%eax
f0101c20:	83 ec 04             	sub    $0x4,%esp
f0101c23:	6a 10                	push   $0x10
f0101c25:	6a 00                	push   $0x0
f0101c27:	50                   	push   %eax
f0101c28:	e8 3c 5b 01 00       	call   f0117769 <strtol>
f0101c2d:	83 c4 10             	add    $0x10,%esp
f0101c30:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c36:	85 c0                	test   %eax,%eax
f0101c38:	75 07                	jne    f0101c41 <command_readusermem+0x65>
f0101c3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3f:	eb 4e                	jmp    f0101c8f <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c41:	0f 20 d8             	mov    %cr3,%eax
f0101c44:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c47:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c50:	8b 40 60             	mov    0x60(%eax),%eax
f0101c53:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c59:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c65:	8a 00                	mov    (%eax),%al
f0101c67:	0f b6 c0             	movzbl %al,%eax
f0101c6a:	83 ec 04             	sub    $0x4,%esp
f0101c6d:	50                   	push   %eax
f0101c6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c71:	68 8b 8c 11 f0       	push   $0xf0118c8b
f0101c76:	e8 1b 51 00 00       	call   f0106d96 <cprintf>
f0101c7b:	83 c4 10             	add    $0x10,%esp
f0101c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101c81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101c84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101c87:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c8f:	c9                   	leave  
f0101c90:	c3                   	ret    

f0101c91 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101c91:	55                   	push   %ebp
f0101c92:	89 e5                	mov    %esp,%ebp
f0101c94:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c9a:	83 c0 04             	add    $0x4,%eax
f0101c9d:	8b 00                	mov    (%eax),%eax
f0101c9f:	83 ec 04             	sub    $0x4,%esp
f0101ca2:	6a 10                	push   $0x10
f0101ca4:	6a 00                	push   $0x0
f0101ca6:	50                   	push   %eax
f0101ca7:	e8 bd 5a 01 00       	call   f0117769 <strtol>
f0101cac:	83 c4 10             	add    $0x10,%esp
f0101caf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cba:	83 c0 08             	add    $0x8,%eax
f0101cbd:	8b 00                	mov    (%eax),%eax
f0101cbf:	83 ec 04             	sub    $0x4,%esp
f0101cc2:	6a 0a                	push   $0xa
f0101cc4:	6a 00                	push   $0x0
f0101cc6:	50                   	push   %eax
f0101cc7:	e8 9d 5a 01 00       	call   f0117769 <strtol>
f0101ccc:	83 c4 10             	add    $0x10,%esp
f0101ccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101cd2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101cd9:	eb 22                	jmp    f0101cfd <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cde:	8d 50 01             	lea    0x1(%eax),%edx
f0101ce1:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101ce4:	8a 00                	mov    (%eax),%al
f0101ce6:	0f b6 c0             	movzbl %al,%eax
f0101ce9:	83 ec 08             	sub    $0x8,%esp
f0101cec:	50                   	push   %eax
f0101ced:	68 a5 8c 11 f0       	push   $0xf0118ca5
f0101cf2:	e8 9f 50 00 00       	call   f0106d96 <cprintf>
f0101cf7:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101cfa:	ff 45 f0             	incl   -0x10(%ebp)
f0101cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d03:	7c d6                	jl     f0101cdb <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d05:	83 ec 0c             	sub    $0xc,%esp
f0101d08:	68 a8 8c 11 f0       	push   $0xf0118ca8
f0101d0d:	e8 84 50 00 00       	call   f0106d96 <cprintf>
f0101d12:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d1a:	c9                   	leave  
f0101d1b:	c3                   	ret    

f0101d1c <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d1c:	55                   	push   %ebp
f0101d1d:	89 e5                	mov    %esp,%ebp
f0101d1f:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d25:	83 c0 04             	add    $0x4,%eax
f0101d28:	8b 00                	mov    (%eax),%eax
f0101d2a:	83 ec 04             	sub    $0x4,%esp
f0101d2d:	6a 0a                	push   $0xa
f0101d2f:	6a 00                	push   $0x0
f0101d31:	50                   	push   %eax
f0101d32:	e8 32 5a 01 00       	call   f0117769 <strtol>
f0101d37:	83 c4 10             	add    $0x10,%esp
f0101d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d3d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d44:	83 ec 04             	sub    $0x4,%esp
f0101d47:	6a 00                	push   $0x0
f0101d49:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d4c:	50                   	push   %eax
f0101d4d:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d50:	e8 5d 13 00 00       	call   f01030b2 <envid2env>
f0101d55:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d5b:	83 c0 08             	add    $0x8,%eax
f0101d5e:	8b 00                	mov    (%eax),%eax
f0101d60:	83 ec 04             	sub    $0x4,%esp
f0101d63:	6a 10                	push   $0x10
f0101d65:	6a 00                	push   $0x0
f0101d67:	50                   	push   %eax
f0101d68:	e8 fc 59 01 00       	call   f0117769 <strtol>
f0101d6d:	83 c4 10             	add    $0x10,%esp
f0101d70:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101d73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d76:	83 c0 0c             	add    $0xc,%eax
f0101d79:	8b 00                	mov    (%eax),%eax
f0101d7b:	83 ec 04             	sub    $0x4,%esp
f0101d7e:	6a 0a                	push   $0xa
f0101d80:	6a 00                	push   $0x0
f0101d82:	50                   	push   %eax
f0101d83:	e8 e1 59 01 00       	call   f0117769 <strtol>
f0101d88:	83 c4 10             	add    $0x10,%esp
f0101d8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101d94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101d97:	85 c0                	test   %eax,%eax
f0101d99:	75 07                	jne    f0101da2 <command_readuserblock+0x86>
f0101d9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101da0:	eb 65                	jmp    f0101e07 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101da2:	0f 20 d8             	mov    %cr3,%eax
f0101da5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101da8:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101dab:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101dae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101db1:	8b 40 60             	mov    0x60(%eax),%eax
f0101db4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101db7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101dba:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101dbd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dc4:	eb 28                	jmp    f0101dee <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dc9:	8a 00                	mov    (%eax),%al
f0101dcb:	0f b6 d0             	movzbl %al,%edx
f0101dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dd1:	8a 00                	mov    (%eax),%al
f0101dd3:	0f b6 c0             	movzbl %al,%eax
f0101dd6:	52                   	push   %edx
f0101dd7:	50                   	push   %eax
f0101dd8:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ddb:	68 aa 8c 11 f0       	push   $0xf0118caa
f0101de0:	e8 b1 4f 00 00       	call   f0106d96 <cprintf>
f0101de5:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101de8:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101deb:	ff 45 f0             	incl   -0x10(%ebp)
f0101dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101df4:	7c d0                	jl     f0101dc6 <command_readuserblock+0xaa>
f0101df6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101df9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101dfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101dff:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e07:	c9                   	leave  
f0101e08:	c3                   	ret    

f0101e09 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e09:	55                   	push   %ebp
f0101e0a:	89 e5                	mov    %esp,%ebp
f0101e0c:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e12:	83 c0 04             	add    $0x4,%eax
f0101e15:	8b 00                	mov    (%eax),%eax
f0101e17:	83 ec 04             	sub    $0x4,%esp
f0101e1a:	6a 0a                	push   $0xa
f0101e1c:	6a 00                	push   $0x0
f0101e1e:	50                   	push   %eax
f0101e1f:	e8 45 59 01 00       	call   f0117769 <strtol>
f0101e24:	83 c4 10             	add    $0x10,%esp
f0101e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e2a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e31:	83 ec 04             	sub    $0x4,%esp
f0101e34:	6a 00                	push   $0x0
f0101e36:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e39:	50                   	push   %eax
f0101e3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e3d:	e8 70 12 00 00       	call   f01030b2 <envid2env>
f0101e42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e45:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e48:	85 c0                	test   %eax,%eax
f0101e4a:	75 0a                	jne    f0101e56 <command_remove_table+0x4d>
f0101e4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e51:	e9 c7 00 00 00       	jmp    f0101f1d <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e59:	83 c0 08             	add    $0x8,%eax
f0101e5c:	8b 00                	mov    (%eax),%eax
f0101e5e:	83 ec 04             	sub    $0x4,%esp
f0101e61:	6a 10                	push   $0x10
f0101e63:	6a 00                	push   $0x0
f0101e65:	50                   	push   %eax
f0101e66:	e8 fe 58 01 00       	call   f0117769 <strtol>
f0101e6b:	83 c4 10             	add    $0x10,%esp
f0101e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101e71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e74:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101e77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e7a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101e7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101e80:	c1 ea 16             	shr    $0x16,%edx
f0101e83:	c1 e2 02             	shl    $0x2,%edx
f0101e86:	01 d0                	add    %edx,%eax
f0101e88:	8b 00                	mov    (%eax),%eax
f0101e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101e8f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101e92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101e95:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101e9a:	77 1c                	ja     f0101eb8 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101e9c:	83 ec 0c             	sub    $0xc,%esp
f0101e9f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ea2:	e8 8e a2 00 00       	call   f010c135 <kheap_virtual_address>
f0101ea7:	83 c4 10             	add    $0x10,%esp
f0101eaa:	83 ec 0c             	sub    $0xc,%esp
f0101ead:	50                   	push   %eax
f0101eae:	e8 04 a0 00 00       	call   f010beb7 <kfree>
f0101eb3:	83 c4 10             	add    $0x10,%esp
f0101eb6:	eb 28                	jmp    f0101ee0 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ebe:	e8 65 ee ff ff       	call   f0100d28 <to_frame_info>
f0101ec3:	83 c4 10             	add    $0x10,%esp
f0101ec6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101ec9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ecc:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101ed2:	83 ec 0c             	sub    $0xc,%esp
f0101ed5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101ed8:	e8 ab 1b 00 00       	call   f0103a88 <free_frame>
f0101edd:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ee3:	c1 e8 16             	shr    $0x16,%eax
f0101ee6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101ee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101eec:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101eef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ef2:	c1 e2 02             	shl    $0x2,%edx
f0101ef5:	01 c2                	add    %eax,%edx
f0101ef7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101efa:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101efd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101f00:	c1 e1 02             	shl    $0x2,%ecx
f0101f03:	01 c8                	add    %ecx,%eax
f0101f05:	8b 00                	mov    (%eax),%eax
f0101f07:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f0a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f0c:	0f 20 d8             	mov    %cr3,%eax
f0101f0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f15:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f18:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f1d:	c9                   	leave  
f0101f1e:	c3                   	ret    

f0101f1f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f1f:	55                   	push   %ebp
f0101f20:	89 e5                	mov    %esp,%ebp
f0101f22:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f28:	83 c0 04             	add    $0x4,%eax
f0101f2b:	8b 00                	mov    (%eax),%eax
f0101f2d:	83 ec 04             	sub    $0x4,%esp
f0101f30:	6a 0a                	push   $0xa
f0101f32:	6a 00                	push   $0x0
f0101f34:	50                   	push   %eax
f0101f35:	e8 2f 58 01 00       	call   f0117769 <strtol>
f0101f3a:	83 c4 10             	add    $0x10,%esp
f0101f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f47:	83 ec 04             	sub    $0x4,%esp
f0101f4a:	6a 00                	push   $0x0
f0101f4c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f4f:	50                   	push   %eax
f0101f50:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f53:	e8 5a 11 00 00       	call   f01030b2 <envid2env>
f0101f58:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f5e:	85 c0                	test   %eax,%eax
f0101f60:	75 07                	jne    f0101f69 <command_allocuserpage+0x4a>
f0101f62:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f67:	eb 6d                	jmp    f0101fd6 <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f6c:	83 c0 08             	add    $0x8,%eax
f0101f6f:	8b 00                	mov    (%eax),%eax
f0101f71:	83 ec 04             	sub    $0x4,%esp
f0101f74:	6a 10                	push   $0x10
f0101f76:	6a 00                	push   $0x0
f0101f78:	50                   	push   %eax
f0101f79:	e8 eb 57 01 00       	call   f0117769 <strtol>
f0101f7e:	83 c4 10             	add    $0x10,%esp
f0101f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f87:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101f8a:	83 ec 0c             	sub    $0xc,%esp
f0101f8d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101f90:	50                   	push   %eax
f0101f91:	e8 00 1a 00 00       	call   f0103996 <allocate_frame>
f0101f96:	83 c4 10             	add    $0x10,%esp
f0101f99:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101f9c:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101fa0:	75 17                	jne    f0101fb9 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	68 bb 8c 11 f0       	push   $0xf0118cbb
f0101faa:	e8 e7 4d 00 00       	call   f0106d96 <cprintf>
f0101faf:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101fb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fb7:	eb 1d                	jmp    f0101fd6 <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101fb9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101fbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101fbf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101fc2:	6a 06                	push   $0x6
f0101fc4:	ff 75 ec             	pushl  -0x14(%ebp)
f0101fc7:	52                   	push   %edx
f0101fc8:	50                   	push   %eax
f0101fc9:	e8 3c 1d 00 00       	call   f0103d0a <map_frame>
f0101fce:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd6:	c9                   	leave  
f0101fd7:	c3                   	ret    

f0101fd8 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101fd8:	55                   	push   %ebp
f0101fd9:	89 e5                	mov    %esp,%ebp
f0101fdb:	56                   	push   %esi
f0101fdc:	53                   	push   %ebx
f0101fdd:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101fe0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101fe3:	83 ec 0c             	sub    $0xc,%esp
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 17 22 00 00       	call   f0104203 <calculate_available_frames>
f0101fec:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101fef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101ff2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101ff8:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101ffb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101ffe:	01 de                	add    %ebx,%esi
f0102000:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102003:	01 f3                	add    %esi,%ebx
f0102005:	83 ec 0c             	sub    $0xc,%esp
f0102008:	51                   	push   %ecx
f0102009:	52                   	push   %edx
f010200a:	50                   	push   %eax
f010200b:	53                   	push   %ebx
f010200c:	68 d4 8c 11 f0       	push   $0xf0118cd4
f0102011:	e8 80 4d 00 00       	call   f0106d96 <cprintf>
f0102016:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102019:	a1 80 12 55 f0       	mov    0xf0551280,%eax
f010201e:	83 ec 08             	sub    $0x8,%esp
f0102021:	50                   	push   %eax
f0102022:	68 2c 8d 11 f0       	push   $0xf0118d2c
f0102027:	e8 6a 4d 00 00       	call   f0106d96 <cprintf>
f010202c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010202f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102034:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102037:	5b                   	pop    %ebx
f0102038:	5e                   	pop    %esi
f0102039:	5d                   	pop    %ebp
f010203a:	c3                   	ret    

f010203b <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010203b:	55                   	push   %ebp
f010203c:	89 e5                	mov    %esp,%ebp
f010203e:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102041:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102045:	7f 1a                	jg     f0102061 <command_run_program+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102047:	83 ec 0c             	sub    $0xc,%esp
f010204a:	68 68 8d 11 f0       	push   $0xf0118d68
f010204f:	e8 42 4d 00 00       	call   f0106d96 <cprintf>
f0102054:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102057:	b8 00 00 00 00       	mov    $0x0,%eax
f010205c:	e9 b2 00 00 00       	jmp    f0102113 <command_run_program+0xd8>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102061:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102065:	75 1d                	jne    f0102084 <command_run_program+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102067:	8b 45 0c             	mov    0xc(%ebp),%eax
f010206a:	83 c0 0c             	add    $0xc,%eax
f010206d:	8b 00                	mov    (%eax),%eax
f010206f:	83 ec 04             	sub    $0x4,%esp
f0102072:	6a 0a                	push   $0xa
f0102074:	6a 00                	push   $0x0
f0102076:	50                   	push   %eax
f0102077:	e8 ed 56 01 00       	call   f0117769 <strtol>
f010207c:	83 c4 10             	add    $0x10,%esp
f010207f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102082:	eb 07                	jmp    f010208b <command_run_program+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102084:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010208b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010208e:	83 c0 08             	add    $0x8,%eax
f0102091:	8b 00                	mov    (%eax),%eax
f0102093:	83 ec 04             	sub    $0x4,%esp
f0102096:	6a 0a                	push   $0xa
f0102098:	6a 00                	push   $0x0
f010209a:	50                   	push   %eax
f010209b:	e8 c9 56 01 00       	call   f0117769 <strtol>
f01020a0:	83 c4 10             	add    $0x10,%esp
f01020a3:	89 c2                	mov    %eax,%edx
f01020a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020a8:	83 c0 04             	add    $0x4,%eax
f01020ab:	8b 00                	mov    (%eax),%eax
f01020ad:	83 ec 04             	sub    $0x4,%esp
f01020b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01020b3:	52                   	push   %edx
f01020b4:	50                   	push   %eax
f01020b5:	e8 63 39 00 00       	call   f0105a1d <env_create>
f01020ba:	83 c4 10             	add    $0x10,%esp
f01020bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if(env == NULL) return 0;
f01020c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01020c4:	75 07                	jne    f01020cd <command_run_program+0x92>
f01020c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01020cb:	eb 46                	jmp    f0102113 <command_run_program+0xd8>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01020cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020d0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01020d3:	83 ec 08             	sub    $0x8,%esp
f01020d6:	50                   	push   %eax
f01020d7:	68 b3 8d 11 f0       	push   $0xf0118db3
f01020dc:	e8 b5 4c 00 00       	call   f0106d96 <cprintf>
f01020e1:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f01020e4:	c7 05 80 12 55 f0 00 	movl   $0x0,0xf0551280
f01020eb:	00 00 00 

	sched_new_env(env);
f01020ee:	83 ec 0c             	sub    $0xc,%esp
f01020f1:	ff 75 f0             	pushl  -0x10(%ebp)
f01020f4:	e8 e6 75 00 00       	call   f01096df <sched_new_env>
f01020f9:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f01020fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	50                   	push   %eax
f0102106:	e8 eb 75 00 00       	call   f01096f6 <sched_run_env>
f010210b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010210e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102113:	c9                   	leave  
f0102114:	c3                   	ret    

f0102115 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102115:	55                   	push   %ebp
f0102116:	89 e5                	mov    %esp,%ebp
f0102118:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010211b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010211e:	83 c0 04             	add    $0x4,%eax
f0102121:	8b 00                	mov    (%eax),%eax
f0102123:	83 ec 04             	sub    $0x4,%esp
f0102126:	6a 0a                	push   $0xa
f0102128:	6a 00                	push   $0x0
f010212a:	50                   	push   %eax
f010212b:	e8 39 56 01 00       	call   f0117769 <strtol>
f0102130:	83 c4 10             	add    $0x10,%esp
f0102133:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102136:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	50                   	push   %eax
f010213d:	e8 8f 79 00 00       	call   f0109ad1 <sched_kill_env>
f0102142:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214a:	c9                   	leave  
f010214b:	c3                   	ret    

f010214c <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010214c:	55                   	push   %ebp
f010214d:	89 e5                	mov    %esp,%ebp
f010214f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102152:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102156:	7f 1a                	jg     f0102172 <commnad_load_env+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102158:	83 ec 0c             	sub    $0xc,%esp
f010215b:	68 68 8d 11 f0       	push   $0xf0118d68
f0102160:	e8 31 4c 00 00       	call   f0106d96 <cprintf>
f0102165:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102168:	b8 00 00 00 00       	mov    $0x0,%eax
f010216d:	e9 96 00 00 00       	jmp    f0102208 <commnad_load_env+0xbc>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102172:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102176:	75 1d                	jne    f0102195 <commnad_load_env+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102178:	8b 45 0c             	mov    0xc(%ebp),%eax
f010217b:	83 c0 0c             	add    $0xc,%eax
f010217e:	8b 00                	mov    (%eax),%eax
f0102180:	83 ec 04             	sub    $0x4,%esp
f0102183:	6a 0a                	push   $0xa
f0102185:	6a 00                	push   $0x0
f0102187:	50                   	push   %eax
f0102188:	e8 dc 55 01 00       	call   f0117769 <strtol>
f010218d:	83 c4 10             	add    $0x10,%esp
f0102190:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102193:	eb 07                	jmp    f010219c <commnad_load_env+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102195:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010219c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010219f:	83 c0 08             	add    $0x8,%eax
f01021a2:	8b 00                	mov    (%eax),%eax
f01021a4:	83 ec 04             	sub    $0x4,%esp
f01021a7:	6a 0a                	push   $0xa
f01021a9:	6a 00                	push   $0x0
f01021ab:	50                   	push   %eax
f01021ac:	e8 b8 55 01 00       	call   f0117769 <strtol>
f01021b1:	83 c4 10             	add    $0x10,%esp
f01021b4:	89 c2                	mov    %eax,%edx
f01021b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021b9:	83 c0 04             	add    $0x4,%eax
f01021bc:	8b 00                	mov    (%eax),%eax
f01021be:	83 ec 04             	sub    $0x4,%esp
f01021c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01021c4:	52                   	push   %edx
f01021c5:	50                   	push   %eax
f01021c6:	e8 52 38 00 00       	call   f0105a1d <env_create>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if (env == NULL)
f01021d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01021d5:	75 07                	jne    f01021de <commnad_load_env+0x92>
		return 0 ;
f01021d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01021dc:	eb 2a                	jmp    f0102208 <commnad_load_env+0xbc>

	sched_new_env(env) ;
f01021de:	83 ec 0c             	sub    $0xc,%esp
f01021e1:	ff 75 f0             	pushl  -0x10(%ebp)
f01021e4:	e8 f6 74 00 00       	call   f01096df <sched_new_env>
f01021e9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01021ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01021ef:	8b 40 4c             	mov    0x4c(%eax),%eax
f01021f2:	83 ec 08             	sub    $0x8,%esp
f01021f5:	50                   	push   %eax
f01021f6:	68 b3 8d 11 f0       	push   $0xf0118db3
f01021fb:	e8 96 4b 00 00       	call   f0106d96 <cprintf>
f0102200:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102203:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102208:	c9                   	leave  
f0102209:	c3                   	ret    

f010220a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f010220a:	55                   	push   %ebp
f010220b:	89 e5                	mov    %esp,%ebp
f010220d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102210:	c7 05 80 12 55 f0 00 	movl   $0x0,0xf0551280
f0102217:	00 00 00 
	sched_run_all();
f010221a:	e8 2b 71 00 00       	call   f010934a <sched_run_all>

	return 0 ;
f010221f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102224:	c9                   	leave  
f0102225:	c3                   	ret    

f0102226 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102226:	55                   	push   %ebp
f0102227:	89 e5                	mov    %esp,%ebp
f0102229:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f010222c:	e8 0f 6f 00 00       	call   f0109140 <sched_print_all>

	return 0 ;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f010223e:	e8 74 71 00 00       	call   f01093b7 <sched_kill_all>

	return 0 ;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmLRU();
f0102250:	e8 70 60 00 00       	call   f01082c5 <setPageReplacmentAlgorithmLRU>
	cprintf("Page replacement algorithm is now LRU\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 c8 8d 11 f0       	push   $0xf0118dc8
f010225d:	e8 34 4b 00 00       	call   f0106d96 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102272:	e8 5e 60 00 00       	call   f01082d5 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102277:	83 ec 0c             	sub    $0xc,%esp
f010227a:	68 f0 8d 11 f0       	push   $0xf0118df0
f010227f:	e8 12 4b 00 00       	call   f0106d96 <cprintf>
f0102284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010228c:	c9                   	leave  
f010228d:	c3                   	ret    

f010228e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f010228e:	55                   	push   %ebp
f010228f:	89 e5                	mov    %esp,%ebp
f0102291:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102294:	e8 4c 60 00 00       	call   f01082e5 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102299:	83 ec 0c             	sub    $0xc,%esp
f010229c:	68 1c 8e 11 f0       	push   $0xf0118e1c
f01022a1:	e8 f0 4a 00 00       	call   f0106d96 <cprintf>
f01022a6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ae:	c9                   	leave  
f01022af:	c3                   	ret    

f01022b0 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f01022b0:	55                   	push   %ebp
f01022b1:	89 e5                	mov    %esp,%ebp
f01022b3:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f01022b6:	e8 3a 60 00 00       	call   f01082f5 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f01022bb:	83 ec 0c             	sub    $0xc,%esp
f01022be:	68 44 8e 11 f0       	push   $0xf0118e44
f01022c3:	e8 ce 4a 00 00       	call   f0106d96 <cprintf>
f01022c8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d0:	c9                   	leave  
f01022d1:	c3                   	ret    

f01022d2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f01022d2:	55                   	push   %ebp
f01022d3:	89 e5                	mov    %esp,%ebp
f01022d5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f01022d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022db:	83 c0 04             	add    $0x4,%eax
f01022de:	8b 00                	mov    (%eax),%eax
f01022e0:	83 ec 04             	sub    $0x4,%esp
f01022e3:	6a 0a                	push   $0xa
f01022e5:	6a 00                	push   $0x0
f01022e7:	50                   	push   %eax
f01022e8:	e8 7c 54 01 00       	call   f0117769 <strtol>
f01022ed:	83 c4 10             	add    $0x10,%esp
f01022f0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f01022f3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01022f7:	83 ec 0c             	sub    $0xc,%esp
f01022fa:	50                   	push   %eax
f01022fb:	e8 b3 6a 00 00       	call   f0108db3 <sched_init_RR>
f0102300:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102303:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0102308:	8a 00                	mov    (%eax),%al
f010230a:	0f b6 c0             	movzbl %al,%eax
f010230d:	83 ec 08             	sub    $0x8,%esp
f0102310:	50                   	push   %eax
f0102311:	68 78 8e 11 f0       	push   $0xf0118e78
f0102316:	e8 7b 4a 00 00       	call   f0106d96 <cprintf>
f010231b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010231e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102323:	c9                   	leave  
f0102324:	c3                   	ret    

f0102325 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102325:	55                   	push   %ebp
f0102326:	89 e5                	mov    %esp,%ebp
f0102328:	53                   	push   %ebx
f0102329:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f010232c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010232f:	83 c0 04             	add    $0x4,%eax
f0102332:	8b 00                	mov    (%eax),%eax
f0102334:	83 ec 04             	sub    $0x4,%esp
f0102337:	6a 0a                	push   $0xa
f0102339:	6a 00                	push   $0x0
f010233b:	50                   	push   %eax
f010233c:	e8 28 54 01 00       	call   f0117769 <strtol>
f0102341:	83 c4 10             	add    $0x10,%esp
f0102344:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102347:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010234e:	eb 2e                	jmp    f010237e <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102350:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102353:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102359:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102360:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102363:	01 d0                	add    %edx,%eax
f0102365:	8b 00                	mov    (%eax),%eax
f0102367:	83 ec 04             	sub    $0x4,%esp
f010236a:	6a 0a                	push   $0xa
f010236c:	6a 00                	push   $0x0
f010236e:	50                   	push   %eax
f010236f:	e8 f5 53 01 00       	call   f0117769 <strtol>
f0102374:	83 c4 10             	add    $0x10,%esp
f0102377:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010237b:	ff 45 f4             	incl   -0xc(%ebp)
f010237e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102381:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102384:	7c ca                	jl     f0102350 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102386:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010238a:	83 ec 08             	sub    $0x8,%esp
f010238d:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102390:	52                   	push   %edx
f0102391:	50                   	push   %eax
f0102392:	e8 24 67 00 00       	call   f0108abb <sched_init_MLFQ>
f0102397:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010239a:	83 ec 0c             	sub    $0xc,%esp
f010239d:	68 b0 8e 11 f0       	push   $0xf0118eb0
f01023a2:	e8 ef 49 00 00       	call   f0106d96 <cprintf>
f01023a7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01023b1:	eb 24                	jmp    f01023d7 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f01023b3:	8b 15 34 32 53 f0    	mov    0xf0533234,%edx
f01023b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01023bc:	01 d0                	add    %edx,%eax
f01023be:	8a 00                	mov    (%eax),%al
f01023c0:	0f b6 c0             	movzbl %al,%eax
f01023c3:	83 ec 08             	sub    $0x8,%esp
f01023c6:	50                   	push   %eax
f01023c7:	68 dd 8e 11 f0       	push   $0xf0118edd
f01023cc:	e8 c5 49 00 00       	call   f0106d96 <cprintf>
f01023d1:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023d4:	ff 45 f0             	incl   -0x10(%ebp)
f01023d7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01023dc:	0f b6 c0             	movzbl %al,%eax
f01023df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01023e2:	7f cf                	jg     f01023b3 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 a8 8c 11 f0       	push   $0xf0118ca8
f01023ec:	e8 a5 49 00 00       	call   f0106d96 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023fc:	c9                   	leave  
f01023fd:	c3                   	ret    

f01023fe <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01023fe:	55                   	push   %ebp
f01023ff:	89 e5                	mov    %esp,%ebp
f0102401:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102404:	e8 98 64 00 00       	call   f01088a1 <isSchedMethodMLFQ>
f0102409:	85 c0                	test   %eax,%eax
f010240b:	74 5c                	je     f0102469 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010240d:	83 ec 0c             	sub    $0xc,%esp
f0102410:	68 e4 8e 11 f0       	push   $0xf0118ee4
f0102415:	e8 7c 49 00 00       	call   f0106d96 <cprintf>
f010241a:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010241d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102424:	eb 24                	jmp    f010244a <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102426:	8b 15 34 32 53 f0    	mov    0xf0533234,%edx
f010242c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010242f:	01 d0                	add    %edx,%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	0f b6 c0             	movzbl %al,%eax
f0102436:	83 ec 08             	sub    $0x8,%esp
f0102439:	50                   	push   %eax
f010243a:	68 dd 8e 11 f0       	push   $0xf0118edd
f010243f:	e8 52 49 00 00       	call   f0106d96 <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102447:	ff 45 f4             	incl   -0xc(%ebp)
f010244a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010244f:	0f b6 c0             	movzbl %al,%eax
f0102452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102455:	7f cf                	jg     f0102426 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102457:	83 ec 0c             	sub    $0xc,%esp
f010245a:	68 a8 8c 11 f0       	push   $0xf0118ca8
f010245f:	e8 32 49 00 00       	call   f0106d96 <cprintf>
f0102464:	83 c4 10             	add    $0x10,%esp
f0102467:	eb 36                	jmp    f010249f <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102469:	e8 19 64 00 00       	call   f0108887 <isSchedMethodRR>
f010246e:	85 c0                	test   %eax,%eax
f0102470:	74 1d                	je     f010248f <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102472:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0102477:	8a 00                	mov    (%eax),%al
f0102479:	0f b6 c0             	movzbl %al,%eax
f010247c:	83 ec 08             	sub    $0x8,%esp
f010247f:	50                   	push   %eax
f0102480:	68 18 8f 11 f0       	push   $0xf0118f18
f0102485:	e8 0c 49 00 00       	call   f0106d96 <cprintf>
f010248a:	83 c4 10             	add    $0x10,%esp
f010248d:	eb 10                	jmp    f010249f <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010248f:	83 ec 0c             	sub    $0xc,%esp
f0102492:	68 54 8f 11 f0       	push   $0xf0118f54
f0102497:	e8 fa 48 00 00       	call   f0106d96 <cprintf>
f010249c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010249f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a4:	c9                   	leave  
f01024a5:	c3                   	ret    

f01024a6 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01024a6:	55                   	push   %ebp
f01024a7:	89 e5                	mov    %esp,%ebp
f01024a9:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01024ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024af:	83 c0 04             	add    $0x4,%eax
f01024b2:	8b 00                	mov    (%eax),%eax
f01024b4:	83 ec 04             	sub    $0x4,%esp
f01024b7:	6a 0a                	push   $0xa
f01024b9:	6a 00                	push   $0x0
f01024bb:	50                   	push   %eax
f01024bc:	e8 a8 52 01 00       	call   f0117769 <strtol>
f01024c1:	83 c4 10             	add    $0x10,%esp
f01024c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01024c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01024ca:	0f b6 c0             	movzbl %al,%eax
f01024cd:	83 ec 0c             	sub    $0xc,%esp
f01024d0:	50                   	push   %eax
f01024d1:	e8 6c 30 01 00       	call   f0115542 <chksch>
f01024d6:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01024d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024dd:	75 12                	jne    f01024f1 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01024df:	83 ec 0c             	sub    $0xc,%esp
f01024e2:	68 7c 8f 11 f0       	push   $0xf0118f7c
f01024e7:	e8 aa 48 00 00       	call   f0106d96 <cprintf>
f01024ec:	83 c4 10             	add    $0x10,%esp
f01024ef:	eb 16                	jmp    f0102507 <command_sch_test+0x61>
	else if (status == 1)
f01024f1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024f5:	75 10                	jne    f0102507 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01024f7:	83 ec 0c             	sub    $0xc,%esp
f01024fa:	68 a4 8f 11 f0       	push   $0xf0118fa4
f01024ff:	e8 92 48 00 00       	call   f0106d96 <cprintf>
f0102504:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102507:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010250c:	c9                   	leave  
f010250d:	c3                   	ret    

f010250e <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010250e:	55                   	push   %ebp
f010250f:	89 e5                	mov    %esp,%ebp
f0102511:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102514:	e8 07 5e 00 00       	call   f0108320 <isPageReplacmentAlgorithmCLOCK>
f0102519:	85 c0                	test   %eax,%eax
f010251b:	74 12                	je     f010252f <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f010251d:	83 ec 0c             	sub    $0xc,%esp
f0102520:	68 c8 8f 11 f0       	push   $0xf0118fc8
f0102525:	e8 6c 48 00 00       	call   f0106d96 <cprintf>
f010252a:	83 c4 10             	add    $0x10,%esp
f010252d:	eb 61                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmLRU())
f010252f:	e8 d1 5d 00 00       	call   f0108305 <isPageReplacmentAlgorithmLRU>
f0102534:	85 c0                	test   %eax,%eax
f0102536:	74 12                	je     f010254a <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU\n");
f0102538:	83 ec 0c             	sub    $0xc,%esp
f010253b:	68 f0 8f 11 f0       	push   $0xf0118ff0
f0102540:	e8 51 48 00 00       	call   f0106d96 <cprintf>
f0102545:	83 c4 10             	add    $0x10,%esp
f0102548:	eb 46                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmFIFO())
f010254a:	e8 ec 5d 00 00       	call   f010833b <isPageReplacmentAlgorithmFIFO>
f010254f:	85 c0                	test   %eax,%eax
f0102551:	74 12                	je     f0102565 <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is FIFO\n");
f0102553:	83 ec 0c             	sub    $0xc,%esp
f0102556:	68 14 90 11 f0       	push   $0xf0119014
f010255b:	e8 36 48 00 00       	call   f0106d96 <cprintf>
f0102560:	83 c4 10             	add    $0x10,%esp
f0102563:	eb 2b                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102565:	e8 ec 5d 00 00       	call   f0108356 <isPageReplacmentAlgorithmModifiedCLOCK>
f010256a:	85 c0                	test   %eax,%eax
f010256c:	74 12                	je     f0102580 <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f010256e:	83 ec 0c             	sub    $0xc,%esp
f0102571:	68 38 90 11 f0       	push   $0xf0119038
f0102576:	e8 1b 48 00 00       	call   f0106d96 <cprintf>
f010257b:	83 c4 10             	add    $0x10,%esp
f010257e:	eb 10                	jmp    f0102590 <command_print_page_rep+0x82>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102580:	83 ec 0c             	sub    $0xc,%esp
f0102583:	68 68 90 11 f0       	push   $0xf0119068
f0102588:	e8 09 48 00 00       	call   f0106d96 <cprintf>
f010258d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102590:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102595:	c9                   	leave  
f0102596:	c3                   	ret    

f0102597 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102597:	55                   	push   %ebp
f0102598:	89 e5                	mov    %esp,%ebp
f010259a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f010259d:	e8 c3 2c 00 00       	call   f0105265 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01025a2:	83 ec 0c             	sub    $0xc,%esp
f01025a5:	68 94 90 11 f0       	push   $0xf0119094
f01025aa:	e8 e7 47 00 00       	call   f0106d96 <cprintf>
f01025af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025b7:	c9                   	leave  
f01025b8:	c3                   	ret    

f01025b9 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01025b9:	55                   	push   %ebp
f01025ba:	89 e5                	mov    %esp,%ebp
f01025bc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01025bf:	e8 b1 2c 00 00       	call   f0105275 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01025c4:	83 ec 0c             	sub    $0xc,%esp
f01025c7:	68 c4 90 11 f0       	push   $0xf01190c4
f01025cc:	e8 c5 47 00 00       	call   f0106d96 <cprintf>
f01025d1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025d9:	c9                   	leave  
f01025da:	c3                   	ret    

f01025db <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01025e1:	e8 9f 2c 00 00       	call   f0105285 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01025e6:	83 ec 0c             	sub    $0xc,%esp
f01025e9:	68 f4 90 11 f0       	push   $0xf01190f4
f01025ee:	e8 a3 47 00 00       	call   f0106d96 <cprintf>
f01025f3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025fb:	c9                   	leave  
f01025fc:	c3                   	ret    

f01025fd <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01025fd:	55                   	push   %ebp
f01025fe:	89 e5                	mov    %esp,%ebp
f0102600:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102603:	e8 8d 2c 00 00       	call   f0105295 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102608:	83 ec 0c             	sub    $0xc,%esp
f010260b:	68 24 91 11 f0       	push   $0xf0119124
f0102610:	e8 81 47 00 00       	call   f0106d96 <cprintf>
f0102615:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102618:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261d:	c9                   	leave  
f010261e:	c3                   	ret    

f010261f <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010261f:	55                   	push   %ebp
f0102620:	89 e5                	mov    %esp,%ebp
f0102622:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102625:	e8 7b 2c 00 00       	call   f01052a5 <isUHeapPlacementStrategyFIRSTFIT>
f010262a:	85 c0                	test   %eax,%eax
f010262c:	74 12                	je     f0102640 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010262e:	83 ec 0c             	sub    $0xc,%esp
f0102631:	68 54 91 11 f0       	push   $0xf0119154
f0102636:	e8 5b 47 00 00       	call   f0106d96 <cprintf>
f010263b:	83 c4 10             	add    $0x10,%esp
f010263e:	eb 61                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102640:	e8 7b 2c 00 00       	call   f01052c0 <isUHeapPlacementStrategyBESTFIT>
f0102645:	85 c0                	test   %eax,%eax
f0102647:	74 12                	je     f010265b <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102649:	83 ec 0c             	sub    $0xc,%esp
f010264c:	68 80 91 11 f0       	push   $0xf0119180
f0102651:	e8 40 47 00 00       	call   f0106d96 <cprintf>
f0102656:	83 c4 10             	add    $0x10,%esp
f0102659:	eb 46                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010265b:	e8 7b 2c 00 00       	call   f01052db <isUHeapPlacementStrategyNEXTFIT>
f0102660:	85 c0                	test   %eax,%eax
f0102662:	74 12                	je     f0102676 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102664:	83 ec 0c             	sub    $0xc,%esp
f0102667:	68 ac 91 11 f0       	push   $0xf01191ac
f010266c:	e8 25 47 00 00       	call   f0106d96 <cprintf>
f0102671:	83 c4 10             	add    $0x10,%esp
f0102674:	eb 2b                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0102676:	e8 7b 2c 00 00       	call   f01052f6 <isUHeapPlacementStrategyWORSTFIT>
f010267b:	85 c0                	test   %eax,%eax
f010267d:	74 12                	je     f0102691 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f010267f:	83 ec 0c             	sub    $0xc,%esp
f0102682:	68 d8 91 11 f0       	push   $0xf01191d8
f0102687:	e8 0a 47 00 00       	call   f0106d96 <cprintf>
f010268c:	83 c4 10             	add    $0x10,%esp
f010268f:	eb 10                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102691:	83 ec 0c             	sub    $0xc,%esp
f0102694:	68 04 92 11 f0       	push   $0xf0119204
f0102699:	e8 f8 46 00 00       	call   f0106d96 <cprintf>
f010269e:	83 c4 10             	add    $0x10,%esp

	return 0;
f01026a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a6:	c9                   	leave  
f01026a7:	c3                   	ret    

f01026a8 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01026a8:	55                   	push   %ebp
f01026a9:	89 e5                	mov    %esp,%ebp
f01026ab:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01026ae:	e8 5e 2c 00 00       	call   f0105311 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 30 92 11 f0       	push   $0xf0119230
f01026bb:	e8 d6 46 00 00       	call   f0106d96 <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c8:	c9                   	leave  
f01026c9:	c3                   	ret    

f01026ca <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01026ca:	55                   	push   %ebp
f01026cb:	89 e5                	mov    %esp,%ebp
f01026cd:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01026d0:	e8 4c 2c 00 00       	call   f0105321 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026d5:	83 ec 0c             	sub    $0xc,%esp
f01026d8:	68 30 92 11 f0       	push   $0xf0119230
f01026dd:	e8 b4 46 00 00       	call   f0106d96 <cprintf>
f01026e2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026ea:	c9                   	leave  
f01026eb:	c3                   	ret    

f01026ec <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01026ec:	55                   	push   %ebp
f01026ed:	89 e5                	mov    %esp,%ebp
f01026ef:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01026f2:	e8 3a 2c 00 00       	call   f0105331 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01026f7:	83 ec 0c             	sub    $0xc,%esp
f01026fa:	68 64 92 11 f0       	push   $0xf0119264
f01026ff:	e8 92 46 00 00       	call   f0106d96 <cprintf>
f0102704:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102707:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010270c:	c9                   	leave  
f010270d:	c3                   	ret    

f010270e <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010270e:	55                   	push   %ebp
f010270f:	89 e5                	mov    %esp,%ebp
f0102711:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102714:	e8 28 2c 00 00       	call   f0105341 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102719:	83 ec 0c             	sub    $0xc,%esp
f010271c:	68 94 92 11 f0       	push   $0xf0119294
f0102721:	e8 70 46 00 00       	call   f0106d96 <cprintf>
f0102726:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102729:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010272e:	c9                   	leave  
f010272f:	c3                   	ret    

f0102730 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102730:	55                   	push   %ebp
f0102731:	89 e5                	mov    %esp,%ebp
f0102733:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102736:	e8 16 2c 00 00       	call   f0105351 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010273b:	83 ec 0c             	sub    $0xc,%esp
f010273e:	68 c4 92 11 f0       	push   $0xf01192c4
f0102743:	e8 4e 46 00 00       	call   f0106d96 <cprintf>
f0102748:	83 c4 10             	add    $0x10,%esp
	return 0;
f010274b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102750:	c9                   	leave  
f0102751:	c3                   	ret    

f0102752 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102752:	55                   	push   %ebp
f0102753:	89 e5                	mov    %esp,%ebp
f0102755:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102758:	e8 04 2c 00 00       	call   f0105361 <isKHeapPlacementStrategyCONTALLOC>
f010275d:	85 c0                	test   %eax,%eax
f010275f:	74 12                	je     f0102773 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 f8 92 11 f0       	push   $0xf01192f8
f0102769:	e8 28 46 00 00       	call   f0106d96 <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
f0102771:	eb 7c                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102773:	e8 03 2c 00 00       	call   f010537b <isKHeapPlacementStrategyFIRSTFIT>
f0102778:	85 c0                	test   %eax,%eax
f010277a:	74 12                	je     f010278e <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010277c:	83 ec 0c             	sub    $0xc,%esp
f010277f:	68 34 93 11 f0       	push   $0xf0119334
f0102784:	e8 0d 46 00 00       	call   f0106d96 <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
f010278c:	eb 61                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f010278e:	e8 03 2c 00 00       	call   f0105396 <isKHeapPlacementStrategyBESTFIT>
f0102793:	85 c0                	test   %eax,%eax
f0102795:	74 12                	je     f01027a9 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102797:	83 ec 0c             	sub    $0xc,%esp
f010279a:	68 64 93 11 f0       	push   $0xf0119364
f010279f:	e8 f2 45 00 00       	call   f0106d96 <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
f01027a7:	eb 46                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027a9:	e8 03 2c 00 00       	call   f01053b1 <isKHeapPlacementStrategyNEXTFIT>
f01027ae:	85 c0                	test   %eax,%eax
f01027b0:	74 12                	je     f01027c4 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01027b2:	83 ec 0c             	sub    $0xc,%esp
f01027b5:	68 90 93 11 f0       	push   $0xf0119390
f01027ba:	e8 d7 45 00 00       	call   f0106d96 <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
f01027c2:	eb 2b                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027c4:	e8 03 2c 00 00       	call   f01053cc <isKHeapPlacementStrategyWORSTFIT>
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	74 12                	je     f01027df <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01027cd:	83 ec 0c             	sub    $0xc,%esp
f01027d0:	68 bc 93 11 f0       	push   $0xf01193bc
f01027d5:	e8 bc 45 00 00       	call   f0106d96 <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
f01027dd:	eb 10                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01027df:	83 ec 0c             	sub    $0xc,%esp
f01027e2:	68 ec 93 11 f0       	push   $0xf01193ec
f01027e7:	e8 aa 45 00 00       	call   f0106d96 <cprintf>
f01027ec:	83 c4 10             	add    $0x10,%esp

	return 0;
f01027ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027f4:	c9                   	leave  
f01027f5:	c3                   	ret    

f01027f6 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01027f6:	55                   	push   %ebp
f01027f7:	89 e5                	mov    %esp,%ebp
f01027f9:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01027fc:	e8 96 5b 00 00       	call   f0108397 <isBufferingEnabled>
f0102801:	85 c0                	test   %eax,%eax
f0102803:	75 12                	jne    f0102817 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102805:	83 ec 0c             	sub    $0xc,%esp
f0102808:	68 1c 94 11 f0       	push   $0xf011941c
f010280d:	e8 84 45 00 00       	call   f0106d96 <cprintf>
f0102812:	83 c4 10             	add    $0x10,%esp
f0102815:	eb 1d                	jmp    f0102834 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102817:	83 ec 0c             	sub    $0xc,%esp
f010281a:	6a 00                	push   $0x0
f010281c:	e8 50 5b 00 00       	call   f0108371 <enableModifiedBuffer>
f0102821:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102824:	83 ec 0c             	sub    $0xc,%esp
f0102827:	68 58 94 11 f0       	push   $0xf0119458
f010282c:	e8 65 45 00 00       	call   f0106d96 <cprintf>
f0102831:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102834:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102839:	c9                   	leave  
f010283a:	c3                   	ret    

f010283b <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010283b:	55                   	push   %ebp
f010283c:	89 e5                	mov    %esp,%ebp
f010283e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102841:	e8 51 5b 00 00       	call   f0108397 <isBufferingEnabled>
f0102846:	85 c0                	test   %eax,%eax
f0102848:	75 12                	jne    f010285c <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010284a:	83 ec 0c             	sub    $0xc,%esp
f010284d:	68 1c 94 11 f0       	push   $0xf011941c
f0102852:	e8 3f 45 00 00       	call   f0106d96 <cprintf>
f0102857:	83 c4 10             	add    $0x10,%esp
f010285a:	eb 1d                	jmp    f0102879 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010285c:	83 ec 0c             	sub    $0xc,%esp
f010285f:	6a 01                	push   $0x1
f0102861:	e8 0b 5b 00 00       	call   f0108371 <enableModifiedBuffer>
f0102866:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102869:	83 ec 0c             	sub    $0xc,%esp
f010286c:	68 7c 94 11 f0       	push   $0xf011947c
f0102871:	e8 20 45 00 00       	call   f0106d96 <cprintf>
f0102876:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102879:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010287e:	c9                   	leave  
f010287f:	c3                   	ret    

f0102880 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102880:	55                   	push   %ebp
f0102881:	89 e5                	mov    %esp,%ebp
f0102883:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102886:	83 ec 0c             	sub    $0xc,%esp
f0102889:	6a 00                	push   $0x0
f010288b:	e8 f9 5a 00 00       	call   f0108389 <enableBuffering>
f0102890:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102893:	83 ec 0c             	sub    $0xc,%esp
f0102896:	6a 00                	push   $0x0
f0102898:	e8 d4 5a 00 00       	call   f0108371 <enableModifiedBuffer>
f010289d:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01028a0:	83 ec 0c             	sub    $0xc,%esp
f01028a3:	68 9c 94 11 f0       	push   $0xf011949c
f01028a8:	e8 e9 44 00 00       	call   f0106d96 <cprintf>
f01028ad:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01028bd:	83 ec 0c             	sub    $0xc,%esp
f01028c0:	6a 01                	push   $0x1
f01028c2:	e8 c2 5a 00 00       	call   f0108389 <enableBuffering>
f01028c7:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01028ca:	83 ec 0c             	sub    $0xc,%esp
f01028cd:	6a 01                	push   $0x1
f01028cf:	e8 9d 5a 00 00       	call   f0108371 <enableModifiedBuffer>
f01028d4:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01028d7:	e8 d3 5a 00 00       	call   f01083af <getModifiedBufferLength>
f01028dc:	85 c0                	test   %eax,%eax
f01028de:	75 59                	jne    f0102939 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01028e0:	83 ec 0c             	sub    $0xc,%esp
f01028e3:	68 b8 94 11 f0       	push   $0xf01194b8
f01028e8:	e8 a9 44 00 00       	call   f0106d96 <cprintf>
f01028ed:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01028f0:	83 ec 08             	sub    $0x8,%esp
f01028f3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01028f6:	50                   	push   %eax
f01028f7:	68 e8 94 11 f0       	push   $0xf01194e8
f01028fc:	e8 02 49 01 00       	call   f0117203 <readline>
f0102901:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102904:	83 ec 04             	sub    $0x4,%esp
f0102907:	6a 0a                	push   $0xa
f0102909:	6a 00                	push   $0x0
f010290b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010290e:	50                   	push   %eax
f010290f:	e8 55 4e 01 00       	call   f0117769 <strtol>
f0102914:	83 c4 10             	add    $0x10,%esp
f0102917:	83 ec 0c             	sub    $0xc,%esp
f010291a:	50                   	push   %eax
f010291b:	e8 81 5a 00 00       	call   f01083a1 <setModifiedBufferLength>
f0102920:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102923:	e8 87 5a 00 00       	call   f01083af <getModifiedBufferLength>
f0102928:	83 ec 08             	sub    $0x8,%esp
f010292b:	50                   	push   %eax
f010292c:	68 14 95 11 f0       	push   $0xf0119514
f0102931:	e8 60 44 00 00       	call   f0106d96 <cprintf>
f0102936:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102939:	83 ec 0c             	sub    $0xc,%esp
f010293c:	68 39 95 11 f0       	push   $0xf0119539
f0102941:	e8 50 44 00 00       	call   f0106d96 <cprintf>
f0102946:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010294e:	c9                   	leave  
f010294f:	c3                   	ret    

f0102950 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102950:	55                   	push   %ebp
f0102951:	89 e5                	mov    %esp,%ebp
f0102953:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102956:	e8 3c 5a 00 00       	call   f0108397 <isBufferingEnabled>
f010295b:	85 c0                	test   %eax,%eax
f010295d:	75 12                	jne    f0102971 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010295f:	83 ec 0c             	sub    $0xc,%esp
f0102962:	68 54 95 11 f0       	push   $0xf0119554
f0102967:	e8 2a 44 00 00       	call   f0106d96 <cprintf>
f010296c:	83 c4 10             	add    $0x10,%esp
f010296f:	eb 19                	jmp    f010298a <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102971:	e8 09 5a 00 00       	call   f010837f <isModifiedBufferEnabled>
f0102976:	85 c0                	test   %eax,%eax
f0102978:	75 10                	jne    f010298a <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010297a:	83 ec 0c             	sub    $0xc,%esp
f010297d:	68 a4 95 11 f0       	push   $0xf01195a4
f0102982:	e8 0f 44 00 00       	call   f0106d96 <cprintf>
f0102987:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010298a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298d:	83 c0 04             	add    $0x4,%eax
f0102990:	8b 00                	mov    (%eax),%eax
f0102992:	83 ec 04             	sub    $0x4,%esp
f0102995:	6a 0a                	push   $0xa
f0102997:	6a 00                	push   $0x0
f0102999:	50                   	push   %eax
f010299a:	e8 ca 4d 01 00       	call   f0117769 <strtol>
f010299f:	83 c4 10             	add    $0x10,%esp
f01029a2:	83 ec 0c             	sub    $0xc,%esp
f01029a5:	50                   	push   %eax
f01029a6:	e8 f6 59 00 00       	call   f01083a1 <setModifiedBufferLength>
f01029ab:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01029ae:	e8 fc 59 00 00       	call   f01083af <getModifiedBufferLength>
f01029b3:	83 ec 08             	sub    $0x8,%esp
f01029b6:	50                   	push   %eax
f01029b7:	68 14 95 11 f0       	push   $0xf0119514
f01029bc:	e8 d5 43 00 00       	call   f0106d96 <cprintf>
f01029c1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01029c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029c9:	c9                   	leave  
f01029ca:	c3                   	ret    

f01029cb <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01029cb:	55                   	push   %ebp
f01029cc:	89 e5                	mov    %esp,%ebp
f01029ce:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01029d1:	e8 c1 59 00 00       	call   f0108397 <isBufferingEnabled>
f01029d6:	85 c0                	test   %eax,%eax
f01029d8:	75 12                	jne    f01029ec <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01029da:	83 ec 0c             	sub    $0xc,%esp
f01029dd:	68 54 95 11 f0       	push   $0xf0119554
f01029e2:	e8 af 43 00 00       	call   f0106d96 <cprintf>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	eb 19                	jmp    f0102a05 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01029ec:	e8 8e 59 00 00       	call   f010837f <isModifiedBufferEnabled>
f01029f1:	85 c0                	test   %eax,%eax
f01029f3:	75 10                	jne    f0102a05 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01029f5:	83 ec 0c             	sub    $0xc,%esp
f01029f8:	68 a4 95 11 f0       	push   $0xf01195a4
f01029fd:	e8 94 43 00 00       	call   f0106d96 <cprintf>
f0102a02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102a05:	e8 a5 59 00 00       	call   f01083af <getModifiedBufferLength>
f0102a0a:	83 ec 08             	sub    $0x8,%esp
f0102a0d:	50                   	push   %eax
f0102a0e:	68 ea 95 11 f0       	push   $0xf01195ea
f0102a13:	e8 7e 43 00 00       	call   f0106d96 <cprintf>
f0102a18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a20:	c9                   	leave  
f0102a21:	c3                   	ret    

f0102a22 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102a22:	55                   	push   %ebp
f0102a23:	89 e5                	mov    %esp,%ebp
f0102a25:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102a2f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a33:	75 1b                	jne    f0102a50 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102a35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a38:	83 c0 04             	add    $0x4,%eax
f0102a3b:	8b 00                	mov    (%eax),%eax
f0102a3d:	83 ec 04             	sub    $0x4,%esp
f0102a40:	6a 0a                	push   $0xa
f0102a42:	6a 00                	push   $0x0
f0102a44:	50                   	push   %eax
f0102a45:	e8 1f 4d 01 00       	call   f0117769 <strtol>
f0102a4a:	83 c4 10             	add    $0x10,%esp
f0102a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (isKHeapPlacementStrategyNEXTFIT())
f0102a50:	e8 5c 29 00 00       	call   f01053b1 <isKHeapPlacementStrategyNEXTFIT>
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	74 47                	je     f0102aa0 <command_test_kmalloc+0x7e>
	{
		cprintf("Inside the NEXTFIT\n");
f0102a59:	83 ec 0c             	sub    $0xc,%esp
f0102a5c:	68 07 96 11 f0       	push   $0xf0119607
f0102a61:	e8 30 43 00 00       	call   f0106d96 <cprintf>
f0102a66:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102a69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a6d:	75 17                	jne    f0102a86 <command_test_kmalloc+0x64>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102a6f:	83 ec 0c             	sub    $0xc,%esp
f0102a72:	68 1c 96 11 f0       	push   $0xf011961c
f0102a77:	e8 1a 43 00 00       	call   f0106d96 <cprintf>
f0102a7c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102a7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a84:	eb 7a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102a86:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102a8a:	75 07                	jne    f0102a93 <command_test_kmalloc+0x71>
			test_kmalloc();
f0102a8c:	e8 16 97 00 00       	call   f010c1a7 <test_kmalloc>
f0102a91:	eb 68                	jmp    f0102afb <command_test_kmalloc+0xd9>
		//Test nextfit strategy
		else if (testNum == 2)
f0102a93:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102a97:	75 62                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_nextfit();
f0102a99:	e8 0d a7 00 00       	call   f010d1ab <test_kmalloc_nextfit>
f0102a9e:	eb 5b                	jmp    f0102afb <command_test_kmalloc+0xd9>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102aa0:	e8 f1 28 00 00       	call   f0105396 <isKHeapPlacementStrategyBESTFIT>
f0102aa5:	85 c0                	test   %eax,%eax
f0102aa7:	74 52                	je     f0102afb <command_test_kmalloc+0xd9>
	{
		cprintf("Inside the BESTFIT\n");
f0102aa9:	83 ec 0c             	sub    $0xc,%esp
f0102aac:	68 6a 96 11 f0       	push   $0xf011966a
f0102ab1:	e8 e0 42 00 00       	call   f0106d96 <cprintf>
f0102ab6:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102ab9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102abd:	75 17                	jne    f0102ad6 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102abf:	83 ec 0c             	sub    $0xc,%esp
f0102ac2:	68 80 96 11 f0       	push   $0xf0119680
f0102ac7:	e8 ca 42 00 00       	call   f0106d96 <cprintf>
f0102acc:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102acf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ad4:	eb 2a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		if (testNum == 1)
f0102ad6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ada:	75 07                	jne    f0102ae3 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102adc:	e8 c6 96 00 00       	call   f010c1a7 <test_kmalloc>
f0102ae1:	eb 18                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 2)
f0102ae3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ae7:	75 07                	jne    f0102af0 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102ae9:	e8 7a b9 00 00       	call   f010e468 <test_kmalloc_bestfit1>
f0102aee:	eb 0b                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 3)
f0102af0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102af4:	75 05                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_bestfit2();
f0102af6:	e8 05 c9 00 00       	call   f010f400 <test_kmalloc_bestfit2>
	}

	return 0;
f0102afb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b00:	c9                   	leave  
f0102b01:	c3                   	ret    

f0102b02 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102b02:	55                   	push   %ebp
f0102b03:	89 e5                	mov    %esp,%ebp
f0102b05:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102b08:	e8 89 28 00 00       	call   f0105396 <isKHeapPlacementStrategyBESTFIT>
f0102b0d:	85 c0                	test   %eax,%eax
f0102b0f:	74 07                	je     f0102b18 <command_test_kfree+0x16>
		{
			test_kfree_bestfit();
f0102b11:	e8 20 ef 00 00       	call   f0111a36 <test_kfree_bestfit>
f0102b16:	eb 05                	jmp    f0102b1d <command_test_kfree+0x1b>
		}
		else
			test_kfree();
f0102b18:	e8 cf d8 00 00       	call   f01103ec <test_kfree>
		return 0;
f0102b1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b22:	c9                   	leave  
f0102b23:	c3                   	ret    

f0102b24 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102b24:	55                   	push   %ebp
f0102b25:	89 e5                	mov    %esp,%ebp
f0102b27:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102b2a:	e8 51 05 01 00       	call   f0113080 <test_kheap_phys_addr>
	return 0;
f0102b2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b34:	c9                   	leave  
f0102b35:	c3                   	ret    

f0102b36 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102b36:	55                   	push   %ebp
f0102b37:	89 e5                	mov    %esp,%ebp
f0102b39:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102b3c:	e8 73 16 01 00       	call   f01141b4 <test_kheap_virt_addr>
	return 0;
f0102b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b46:	c9                   	leave  
f0102b47:	c3                   	ret    

f0102b48 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102b48:	55                   	push   %ebp
f0102b49:	89 e5                	mov    %esp,%ebp
f0102b4b:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102b4e:	e8 d7 26 01 00       	call   f011522a <test_three_creation_functions>
	return 0;
f0102b53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b58:	c9                   	leave  
f0102b59:	c3                   	ret    

f0102b5a <command_test_priority1>:
int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102b5a:	55                   	push   %ebp
f0102b5b:	89 e5                	mov    %esp,%ebp
f0102b5d:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102b60:	e8 a0 2c 01 00       	call   f0115805 <test_priority_normal_and_higher>
	return 0;
f0102b65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b6a:	c9                   	leave  
f0102b6b:	c3                   	ret    

f0102b6c <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102b6c:	55                   	push   %ebp
f0102b6d:	89 e5                	mov    %esp,%ebp
f0102b6f:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102b72:	e8 77 36 01 00       	call   f01161ee <test_priority_normal_and_lower>
	return 0;
f0102b77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b7c:	c9                   	leave  
f0102b7d:	c3                   	ret    

f0102b7e <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102b7e:	55                   	push   %ebp
f0102b7f:	89 e5                	mov    %esp,%ebp
f0102b81:	53                   	push   %ebx
f0102b82:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b88:	83 ec 0c             	sub    $0xc,%esp
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 9f 3d 00 00       	call   f0106930 <mc146818_read>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	89 c3                	mov    %eax,%ebx
f0102b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b99:	40                   	inc    %eax
f0102b9a:	83 ec 0c             	sub    $0xc,%esp
f0102b9d:	50                   	push   %eax
f0102b9e:	e8 8d 3d 00 00       	call   f0106930 <mc146818_read>
f0102ba3:	83 c4 10             	add    $0x10,%esp
f0102ba6:	c1 e0 08             	shl    $0x8,%eax
f0102ba9:	09 d8                	or     %ebx,%eax
}
f0102bab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102bae:	c9                   	leave  
f0102baf:	c3                   	ret    

f0102bb0 <detect_memory>:

void detect_memory()
{
f0102bb0:	55                   	push   %ebp
f0102bb1:	89 e5                	mov    %esp,%ebp
f0102bb3:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102bb6:	83 ec 0c             	sub    $0xc,%esp
f0102bb9:	6a 15                	push   $0x15
f0102bbb:	e8 be ff ff ff       	call   f0102b7e <nvram_read>
f0102bc0:	83 c4 10             	add    $0x10,%esp
f0102bc3:	c1 e0 0a             	shl    $0xa,%eax
f0102bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102bcc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102bd4:	83 ec 0c             	sub    $0xc,%esp
f0102bd7:	6a 17                	push   $0x17
f0102bd9:	e8 a0 ff ff ff       	call   f0102b7e <nvram_read>
f0102bde:	83 c4 10             	add    $0x10,%esp
f0102be1:	c1 e0 0a             	shl    $0xa,%eax
f0102be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102be7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102bf2:	83 ec 0c             	sub    $0xc,%esp
f0102bf5:	6a 34                	push   $0x34
f0102bf7:	e8 82 ff ff ff       	call   f0102b7e <nvram_read>
f0102bfc:	83 c4 10             	add    $0x10,%esp
f0102bff:	c1 e0 10             	shl    $0x10,%eax
f0102c02:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102c05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102c08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102c10:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102c14:	74 18                	je     f0102c2e <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102c19:	05 00 00 00 01       	add    $0x1000000,%eax
f0102c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c24:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102c29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102c2c:	eb 19                	jmp    f0102c47 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102c2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102c32:	74 0d                	je     f0102c41 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102c34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c37:	05 00 00 10 00       	add    $0x100000,%eax
f0102c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102c3f:	eb 06                	jmp    f0102c47 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102c41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102c47:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c51:	c1 e8 0c             	shr    $0xc,%eax
f0102c54:	a3 30 32 53 f0       	mov    %eax,0xf0533230

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c5c:	c1 e8 0a             	shr    $0xa,%eax
f0102c5f:	83 ec 08             	sub    $0x8,%esp
f0102c62:	50                   	push   %eax
f0102c63:	68 d0 96 11 f0       	push   $0xf01196d0
f0102c68:	e8 29 41 00 00       	call   f0106d96 <cprintf>
f0102c6d:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102c70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c73:	c1 e8 0a             	shr    $0xa,%eax
f0102c76:	89 c2                	mov    %eax,%edx
f0102c78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102c7b:	c1 e8 0a             	shr    $0xa,%eax
f0102c7e:	83 ec 04             	sub    $0x4,%esp
f0102c81:	52                   	push   %edx
f0102c82:	50                   	push   %eax
f0102c83:	68 f1 96 11 f0       	push   $0xf01196f1
f0102c88:	e8 09 41 00 00       	call   f0106d96 <cprintf>
f0102c8d:	83 c4 10             	add    $0x10,%esp
}
f0102c90:	90                   	nop
f0102c91:	c9                   	leave  
f0102c92:	c3                   	ret    

f0102c93 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102c93:	55                   	push   %ebp
f0102c94:	89 e5                	mov    %esp,%ebp
f0102c96:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102c99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102ca0:	eb 40                	jmp    f0102ce2 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ca5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102cab:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102cb0:	83 ec 08             	sub    $0x8,%esp
f0102cb3:	52                   	push   %edx
f0102cb4:	50                   	push   %eax
f0102cb5:	e8 9b 01 00 00       	call   f0102e55 <check_va2pa>
f0102cba:	83 c4 10             	add    $0x10,%esp
f0102cbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102cc0:	74 19                	je     f0102cdb <check_boot_pgdir+0x48>
f0102cc2:	68 10 97 11 f0       	push   $0xf0119710
f0102cc7:	68 46 97 11 f0       	push   $0xf0119746
f0102ccc:	68 86 00 00 00       	push   $0x86
f0102cd1:	68 5b 97 11 f0       	push   $0xf011975b
f0102cd6:	e8 9b d4 ff ff       	call   f0100176 <_panic>

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102cdb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ce5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102ceb:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f0102cf0:	39 c2                	cmp    %eax,%edx
f0102cf2:	72 ae                	jb     f0102ca2 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102cf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102cfb:	eb 74                	jmp    f0102d71 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0102cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d00:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0102d06:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102d0b:	83 ec 08             	sub    $0x8,%esp
f0102d0e:	52                   	push   %edx
f0102d0f:	50                   	push   %eax
f0102d10:	e8 40 01 00 00       	call   f0102e55 <check_va2pa>
f0102d15:	83 c4 10             	add    $0x10,%esp
f0102d18:	c7 45 f0 00 60 14 f0 	movl   $0xf0146000,-0x10(%ebp)
f0102d1f:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0102d26:	77 17                	ja     f0102d3f <check_boot_pgdir+0xac>
f0102d28:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d2b:	68 6c 97 11 f0       	push   $0xf011976c
f0102d30:	68 90 00 00 00       	push   $0x90
f0102d35:	68 5b 97 11 f0       	push   $0xf011975b
f0102d3a:	e8 37 d4 ff ff       	call   f0100176 <_panic>
f0102d3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102d42:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0102d48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102d4b:	01 ca                	add    %ecx,%edx
f0102d4d:	39 d0                	cmp    %edx,%eax
f0102d4f:	74 19                	je     f0102d6a <check_boot_pgdir+0xd7>
f0102d51:	68 a0 97 11 f0       	push   $0xf01197a0
f0102d56:	68 46 97 11 f0       	push   $0xf0119746
f0102d5b:	68 90 00 00 00       	push   $0x90
f0102d60:	68 5b 97 11 f0       	push   $0xf011975b
f0102d65:	e8 0c d4 ff ff       	call   f0100176 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102d6a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102d71:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0102d78:	76 83                	jbe    f0102cfd <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102d7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102d81:	e9 af 00 00 00       	jmp    f0102e35 <check_boot_pgdir+0x1a2>
		switch (i) {
f0102d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d89:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d8e:	74 11                	je     f0102da1 <check_boot_pgdir+0x10e>
f0102d90:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d95:	72 36                	jb     f0102dcd <check_boot_pgdir+0x13a>
f0102d97:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0102d9c:	83 f8 02             	cmp    $0x2,%eax
f0102d9f:	77 2c                	ja     f0102dcd <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0102da1:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102da6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102da9:	c1 e2 02             	shl    $0x2,%edx
f0102dac:	01 d0                	add    %edx,%eax
f0102dae:	8b 00                	mov    (%eax),%eax
f0102db0:	85 c0                	test   %eax,%eax
f0102db2:	75 7a                	jne    f0102e2e <check_boot_pgdir+0x19b>
f0102db4:	68 22 98 11 f0       	push   $0xf0119822
f0102db9:	68 46 97 11 f0       	push   $0xf0119746
f0102dbe:	68 9b 00 00 00       	push   $0x9b
f0102dc3:	68 5b 97 11 f0       	push   $0xf011975b
f0102dc8:	e8 a9 d3 ff ff       	call   f0100176 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0102dcd:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0102dd4:	76 2c                	jbe    f0102e02 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0102dd6:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102dde:	c1 e2 02             	shl    $0x2,%edx
f0102de1:	01 d0                	add    %edx,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	85 c0                	test   %eax,%eax
f0102de7:	75 48                	jne    f0102e31 <check_boot_pgdir+0x19e>
f0102de9:	68 22 98 11 f0       	push   $0xf0119822
f0102dee:	68 46 97 11 f0       	push   $0xf0119746
f0102df3:	68 9f 00 00 00       	push   $0x9f
f0102df8:	68 5b 97 11 f0       	push   $0xf011975b
f0102dfd:	e8 74 d3 ff ff       	call   f0100176 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0102e02:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102e0a:	c1 e2 02             	shl    $0x2,%edx
f0102e0d:	01 d0                	add    %edx,%eax
f0102e0f:	8b 00                	mov    (%eax),%eax
f0102e11:	85 c0                	test   %eax,%eax
f0102e13:	74 1c                	je     f0102e31 <check_boot_pgdir+0x19e>
f0102e15:	68 38 98 11 f0       	push   $0xf0119838
f0102e1a:	68 46 97 11 f0       	push   $0xf0119746
f0102e1f:	68 a1 00 00 00       	push   $0xa1
f0102e24:	68 5b 97 11 f0       	push   $0xf011975b
f0102e29:	e8 48 d3 ff ff       	call   f0100176 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0102e2e:	90                   	nop
f0102e2f:	eb 01                	jmp    f0102e32 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0102e31:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102e32:	ff 45 f4             	incl   -0xc(%ebp)
f0102e35:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0102e3c:	0f 86 44 ff ff ff    	jbe    f0102d86 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0102e42:	83 ec 0c             	sub    $0xc,%esp
f0102e45:	68 54 98 11 f0       	push   $0xf0119854
f0102e4a:	e8 47 3f 00 00       	call   f0106d96 <cprintf>
f0102e4f:	83 c4 10             	add    $0x10,%esp
}
f0102e52:	90                   	nop
f0102e53:	c9                   	leave  
f0102e54:	c3                   	ret    

f0102e55 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0102e55:	55                   	push   %ebp
f0102e56:	89 e5                	mov    %esp,%ebp
f0102e58:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0102e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e5e:	c1 e8 16             	shr    $0x16,%eax
f0102e61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102e68:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e6b:	01 d0                	add    %edx,%eax
f0102e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0102e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e73:	8b 00                	mov    (%eax),%eax
f0102e75:	83 e0 01             	and    $0x1,%eax
f0102e78:	85 c0                	test   %eax,%eax
f0102e7a:	75 0a                	jne    f0102e86 <check_va2pa+0x31>
		return ~0;
f0102e7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102e81:	e9 87 00 00 00       	jmp    f0102f0d <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0102e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e89:	8b 00                	mov    (%eax),%eax
f0102e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102e96:	c1 e8 0c             	shr    $0xc,%eax
f0102e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e9c:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0102ea1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0102ea4:	72 17                	jb     f0102ebd <check_va2pa+0x68>
f0102ea6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ea9:	68 74 98 11 f0       	push   $0xf0119874
f0102eae:	68 b7 00 00 00       	push   $0xb7
f0102eb3:	68 5b 97 11 f0       	push   $0xf011975b
f0102eb8:	e8 b9 d2 ff ff       	call   f0100176 <_panic>
f0102ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102ec0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102ec5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0102ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ecb:	c1 e8 0c             	shr    $0xc,%eax
f0102ece:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102ed3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102edd:	01 d0                	add    %edx,%eax
f0102edf:	8b 00                	mov    (%eax),%eax
f0102ee1:	83 e0 01             	and    $0x1,%eax
f0102ee4:	85 c0                	test   %eax,%eax
f0102ee6:	75 07                	jne    f0102eef <check_va2pa+0x9a>
		return ~0;
f0102ee8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102eed:	eb 1e                	jmp    f0102f0d <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0102eef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef2:	c1 e8 0c             	shr    $0xc,%eax
f0102ef5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102efa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f04:	01 d0                	add    %edx,%eax
f0102f06:	8b 00                	mov    (%eax),%eax
f0102f08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0102f0d:	c9                   	leave  
f0102f0e:	c3                   	ret    

f0102f0f <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0102f0f:	55                   	push   %ebp
f0102f10:	89 e5                	mov    %esp,%ebp
f0102f12:	83 ec 10             	sub    $0x10,%esp
f0102f15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f18:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0102f1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f1e:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0102f21:	90                   	nop
f0102f22:	c9                   	leave  
f0102f23:	c3                   	ret    

f0102f24 <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0102f24:	55                   	push   %ebp
f0102f25:	89 e5                	mov    %esp,%ebp
f0102f27:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0102f2a:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0102f31:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f38:	eb 24                	jmp    f0102f5e <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0102f3a:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102f3f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0102f42:	c1 e2 02             	shl    $0x2,%edx
f0102f45:	01 c2                	add    %eax,%edx
f0102f47:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102f4c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0102f4f:	c1 e1 02             	shl    $0x2,%ecx
f0102f52:	01 c8                	add    %ecx,%eax
f0102f54:	8b 00                	mov    (%eax),%eax
f0102f56:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f58:	ff 45 fc             	incl   -0x4(%ebp)
f0102f5b:	ff 45 f8             	incl   -0x8(%ebp)
f0102f5e:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f0102f63:	c1 e8 16             	shr    $0x16,%eax
f0102f66:	89 c2                	mov    %eax,%edx
f0102f68:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f6b:	39 c2                	cmp    %eax,%edx
f0102f6d:	77 cb                	ja     f0102f3a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0102f6f:	a1 d8 16 55 f0       	mov    0xf05516d8,%eax
f0102f74:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f7a:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0102f7d:	0f 20 c0             	mov    %cr0,%eax
f0102f80:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0102f83:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0102f86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0102f89:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0102f90:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0102f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f97:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0102f9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102f9d:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0102fa0:	0f 01 15 d0 e7 14 f0 	lgdtl  0xf014e7d0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0102fa7:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fac:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0102fae:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fb3:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0102fb5:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fba:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0102fbc:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc1:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0102fc3:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc8:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0102fca:	ea d1 2f 10 f0 08 00 	ljmp   $0x8,$0xf0102fd1
	asm volatile("lldt %%ax" :: "a" (0));
f0102fd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fd6:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0102fd9:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0102fe0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102fe7:	eb 19                	jmp    f0103002 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0102fe9:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0102fee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102ff1:	c1 e2 02             	shl    $0x2,%edx
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102ffc:	ff 45 f4             	incl   -0xc(%ebp)
f0102fff:	ff 45 f0             	incl   -0x10(%ebp)
f0103002:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f0103007:	c1 e8 16             	shr    $0x16,%eax
f010300a:	89 c2                	mov    %eax,%edx
f010300c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010300f:	39 c2                	cmp    %eax,%edx
f0103011:	77 d6                	ja     f0102fe9 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0103013:	a1 d8 16 55 f0       	mov    0xf05516d8,%eax
f0103018:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010301b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010301e:	0f 22 d8             	mov    %eax,%cr3
}
f0103021:	90                   	nop
f0103022:	c9                   	leave  
f0103023:	c3                   	ret    

f0103024 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0103024:	55                   	push   %ebp
f0103025:	89 e5                	mov    %esp,%ebp
f0103027:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010302a:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010302f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103032:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0103039:	77 17                	ja     f0103052 <setup_listing_to_all_page_tables_entries+0x2e>
f010303b:	ff 75 f4             	pushl  -0xc(%ebp)
f010303e:	68 6c 97 11 f0       	push   $0xf011976c
f0103043:	68 86 01 00 00       	push   $0x186
f0103048:	68 5b 97 11 f0       	push   $0xf011975b
f010304d:	e8 24 d1 ff ff       	call   f0100176 <_panic>
f0103052:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103055:	05 00 00 00 10       	add    $0x10000000,%eax
f010305a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f010305d:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0103062:	05 fc 0e 00 00       	add    $0xefc,%eax
f0103067:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010306a:	83 ca 03             	or     $0x3,%edx
f010306d:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010306f:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0103074:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010307a:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010307f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103082:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0103089:	77 17                	ja     f01030a2 <setup_listing_to_all_page_tables_entries+0x7e>
f010308b:	ff 75 ec             	pushl  -0x14(%ebp)
f010308e:	68 6c 97 11 f0       	push   $0xf011976c
f0103093:	68 8b 01 00 00       	push   $0x18b
f0103098:	68 5b 97 11 f0       	push   $0xf011975b
f010309d:	e8 d4 d0 ff ff       	call   f0100176 <_panic>
f01030a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01030a5:	05 00 00 00 10       	add    $0x10000000,%eax
f01030aa:	83 c8 05             	or     $0x5,%eax
f01030ad:	89 02                	mov    %eax,(%edx)

}
f01030af:	90                   	nop
f01030b0:	c9                   	leave  
f01030b1:	c3                   	ret    

f01030b2 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01030b2:	55                   	push   %ebp
f01030b3:	89 e5                	mov    %esp,%ebp
f01030b5:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01030b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01030bc:	75 15                	jne    f01030d3 <envid2env+0x21>
		*env_store = curenv;
f01030be:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f01030c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030c7:	89 10                	mov    %edx,(%eax)
		return 0;
f01030c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01030ce:	e9 94 00 00 00       	jmp    f0103167 <envid2env+0xb5>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01030d3:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f01030d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01030dc:	25 f1 04 00 00       	and    $0x4f1,%eax
f01030e1:	89 c2                	mov    %eax,%edx
f01030e3:	89 d0                	mov    %edx,%eax
f01030e5:	c1 e0 02             	shl    $0x2,%eax
f01030e8:	01 d0                	add    %edx,%eax
f01030ea:	01 c0                	add    %eax,%eax
f01030ec:	01 d0                	add    %edx,%eax
f01030ee:	01 c0                	add    %eax,%eax
f01030f0:	01 d0                	add    %edx,%eax
f01030f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01030f9:	01 d0                	add    %edx,%eax
f01030fb:	c1 e0 02             	shl    $0x2,%eax
f01030fe:	01 c8                	add    %ecx,%eax
f0103100:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0103103:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103106:	8b 40 54             	mov    0x54(%eax),%eax
f0103109:	85 c0                	test   %eax,%eax
f010310b:	74 0b                	je     f0103118 <envid2env+0x66>
f010310d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103110:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103113:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103116:	74 10                	je     f0103128 <envid2env+0x76>
		*env_store = 0;
f0103118:	8b 45 0c             	mov    0xc(%ebp),%eax
f010311b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103121:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103126:	eb 3f                	jmp    f0103167 <envid2env+0xb5>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0103128:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010312c:	74 2c                	je     f010315a <envid2env+0xa8>
f010312e:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0103133:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f0103136:	74 22                	je     f010315a <envid2env+0xa8>
f0103138:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010313b:	8b 50 50             	mov    0x50(%eax),%edx
f010313e:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0103143:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103146:	39 c2                	cmp    %eax,%edx
f0103148:	74 10                	je     f010315a <envid2env+0xa8>
		*env_store = 0;
f010314a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010314d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103153:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103158:	eb 0d                	jmp    f0103167 <envid2env+0xb5>
	}

	*env_store = e;
f010315a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010315d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103160:	89 10                	mov    %edx,(%eax)
	return 0;
f0103162:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103167:	c9                   	leave  
f0103168:	c3                   	ret    

f0103169 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0103169:	55                   	push   %ebp
f010316a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010316c:	8b 45 08             	mov    0x8(%ebp),%eax
f010316f:	8b 15 c4 16 55 f0    	mov    0xf05516c4,%edx
f0103175:	29 d0                	sub    %edx,%eax
f0103177:	c1 f8 03             	sar    $0x3,%eax
f010317a:	89 c2                	mov    %eax,%edx
f010317c:	89 d0                	mov    %edx,%eax
f010317e:	c1 e0 02             	shl    $0x2,%eax
f0103181:	01 d0                	add    %edx,%eax
f0103183:	c1 e0 02             	shl    $0x2,%eax
f0103186:	01 d0                	add    %edx,%eax
f0103188:	c1 e0 02             	shl    $0x2,%eax
f010318b:	01 d0                	add    %edx,%eax
f010318d:	89 c1                	mov    %eax,%ecx
f010318f:	c1 e1 08             	shl    $0x8,%ecx
f0103192:	01 c8                	add    %ecx,%eax
f0103194:	89 c1                	mov    %eax,%ecx
f0103196:	c1 e1 10             	shl    $0x10,%ecx
f0103199:	01 c8                	add    %ecx,%eax
f010319b:	01 c0                	add    %eax,%eax
f010319d:	01 d0                	add    %edx,%eax
}
f010319f:	5d                   	pop    %ebp
f01031a0:	c3                   	ret    

f01031a1 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f01031a1:	55                   	push   %ebp
f01031a2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01031a4:	ff 75 08             	pushl  0x8(%ebp)
f01031a7:	e8 bd ff ff ff       	call   f0103169 <to_frame_number>
f01031ac:	83 c4 04             	add    $0x4,%esp
f01031af:	c1 e0 0c             	shl    $0xc,%eax
}
f01031b2:	c9                   	leave  
f01031b3:	c3                   	ret    

f01031b4 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f01031b4:	55                   	push   %ebp
f01031b5:	89 e5                	mov    %esp,%ebp
f01031b7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01031ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01031bd:	c1 e8 0c             	shr    $0xc,%eax
f01031c0:	89 c2                	mov    %eax,%edx
f01031c2:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f01031c7:	39 c2                	cmp    %eax,%edx
f01031c9:	72 14                	jb     f01031df <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01031cb:	83 ec 04             	sub    $0x4,%esp
f01031ce:	68 a4 98 11 f0       	push   $0xf01198a4
f01031d3:	6a 75                	push   $0x75
f01031d5:	68 c9 98 11 f0       	push   $0xf01198c9
f01031da:	e8 97 cf ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f01031df:	8b 15 c4 16 55 f0    	mov    0xf05516c4,%edx
f01031e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031e8:	c1 e8 0c             	shr    $0xc,%eax
f01031eb:	89 c1                	mov    %eax,%ecx
f01031ed:	89 c8                	mov    %ecx,%eax
f01031ef:	01 c0                	add    %eax,%eax
f01031f1:	01 c8                	add    %ecx,%eax
f01031f3:	c1 e0 03             	shl    $0x3,%eax
f01031f6:	01 d0                	add    %edx,%eax
}
f01031f8:	c9                   	leave  
f01031f9:	c3                   	ret    

f01031fa <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f01031fa:	55                   	push   %ebp
f01031fb:	89 e5                	mov    %esp,%ebp
f01031fd:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103200:	83 ec 08             	sub    $0x8,%esp
f0103203:	68 00 10 00 00       	push   $0x1000
f0103208:	68 00 10 00 00       	push   $0x1000
f010320d:	e8 4f 02 00 00       	call   f0103461 <boot_allocate_space>
f0103212:	83 c4 10             	add    $0x10,%esp
f0103215:	a3 d0 16 55 f0       	mov    %eax,0xf05516d0
	memset(ptr_page_directory, 0, PAGE_SIZE);
f010321a:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010321f:	83 ec 04             	sub    $0x4,%esp
f0103222:	68 00 10 00 00       	push   $0x1000
f0103227:	6a 00                	push   $0x0
f0103229:	50                   	push   %eax
f010322a:	e8 c8 43 01 00       	call   f01175f7 <memset>
f010322f:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0103232:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0103237:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010323a:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0103241:	77 14                	ja     f0103257 <initialize_kernel_VM+0x5d>
f0103243:	ff 75 e8             	pushl  -0x18(%ebp)
f0103246:	68 e4 98 11 f0       	push   $0xf01198e4
f010324b:	6a 57                	push   $0x57
f010324d:	68 15 99 11 f0       	push   $0xf0119915
f0103252:	e8 1f cf ff ff       	call   f0100176 <_panic>
f0103257:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010325a:	05 00 00 00 10       	add    $0x10000000,%eax
f010325f:	a3 d8 16 55 f0       	mov    %eax,0xf05516d8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0103264:	c7 45 e4 00 60 14 f0 	movl   $0xf0146000,-0x1c(%ebp)
f010326b:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0103272:	77 14                	ja     f0103288 <initialize_kernel_VM+0x8e>
f0103274:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103277:	68 e4 98 11 f0       	push   $0xf01198e4
f010327c:	6a 5f                	push   $0x5f
f010327e:	68 15 99 11 f0       	push   $0xf0119915
f0103283:	e8 ee ce ff ff       	call   f0100176 <_panic>
f0103288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010328b:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103291:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0103296:	83 ec 0c             	sub    $0xc,%esp
f0103299:	6a 02                	push   $0x2
f010329b:	52                   	push   %edx
f010329c:	68 00 80 00 00       	push   $0x8000
f01032a1:	68 00 80 bf ef       	push   $0xefbf8000
f01032a6:	50                   	push   %eax
f01032a7:	e8 16 02 00 00       	call   f01034c2 <boot_map_range>
f01032ac:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01032af:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01032b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01032bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032c4:	eb 25                	jmp    f01032eb <initialize_kernel_VM+0xf1>
	{
		++nTables;
f01032c6:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01032c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01032cc:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f01032d1:	83 ec 04             	sub    $0x4,%esp
f01032d4:	6a 01                	push   $0x1
f01032d6:	52                   	push   %edx
f01032d7:	50                   	push   %eax
f01032d8:	e8 59 02 00 00       	call   f0103536 <boot_get_page_table>
f01032dd:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032e0:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01032e7:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f01032eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032ef:	72 d5                	jb     f01032c6 <initialize_kernel_VM+0xcc>
f01032f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032f5:	77 06                	ja     f01032fd <initialize_kernel_VM+0x103>
f01032f7:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f01032fb:	76 c9                	jbe    f01032c6 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct Frame_Info) ;
f01032fd:	8b 15 30 32 53 f0    	mov    0xf0533230,%edx
f0103303:	89 d0                	mov    %edx,%eax
f0103305:	01 c0                	add    %eax,%eax
f0103307:	01 d0                	add    %edx,%eax
f0103309:	c1 e0 03             	shl    $0x3,%eax
f010330c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	68 00 10 00 00       	push   $0x1000
f0103317:	ff 75 e0             	pushl  -0x20(%ebp)
f010331a:	e8 42 01 00 00       	call   f0103461 <boot_allocate_space>
f010331f:	83 c4 10             	add    $0x10,%esp
f0103322:	a3 c4 16 55 f0       	mov    %eax,0xf05516c4
	memset(frames_info, 0, array_size);
f0103327:	a1 c4 16 55 f0       	mov    0xf05516c4,%eax
f010332c:	83 ec 04             	sub    $0x4,%esp
f010332f:	ff 75 e0             	pushl  -0x20(%ebp)
f0103332:	6a 00                	push   $0x0
f0103334:	50                   	push   %eax
f0103335:	e8 bd 42 01 00       	call   f01175f7 <memset>
f010333a:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f010333d:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0103344:	83 ec 08             	sub    $0x8,%esp
f0103347:	68 00 10 00 00       	push   $0x1000
f010334c:	ff 75 dc             	pushl  -0x24(%ebp)
f010334f:	e8 0d 01 00 00       	call   f0103461 <boot_allocate_space>
f0103354:	83 c4 10             	add    $0x10,%esp
f0103357:	a3 b0 16 55 f0       	mov    %eax,0xf05516b0
	memset(disk_frames_info , 0, disk_array_size);
f010335c:	a1 b0 16 55 f0       	mov    0xf05516b0,%eax
f0103361:	83 ec 04             	sub    $0x4,%esp
f0103364:	ff 75 dc             	pushl  -0x24(%ebp)
f0103367:	6a 00                	push   $0x0
f0103369:	50                   	push   %eax
f010336a:	e8 88 42 01 00       	call   f01175f7 <memset>
f010336f:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0103372:	e8 ad fc ff ff       	call   f0103024 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d\n",NENV);
f0103377:	83 ec 08             	sub    $0x8,%esp
f010337a:	68 f2 04 00 00       	push   $0x4f2
f010337f:	68 2b 99 11 f0       	push   $0xf011992b
f0103384:	e8 0d 3a 00 00       	call   f0106d96 <cprintf>
f0103389:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f010338c:	c7 45 d8 b8 fe 0f 00 	movl   $0xffeb8,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0103393:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103396:	83 ec 08             	sub    $0x8,%esp
f0103399:	68 00 10 00 00       	push   $0x1000
f010339e:	50                   	push   %eax
f010339f:	e8 bd 00 00 00       	call   f0103461 <boot_allocate_space>
f01033a4:	83 c4 10             	add    $0x10,%esp
f01033a7:	a3 4c 29 53 f0       	mov    %eax,0xf053294c
	memset(envs , 0, envs_size);
f01033ac:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033af:	a1 4c 29 53 f0       	mov    0xf053294c,%eax
f01033b4:	83 ec 04             	sub    $0x4,%esp
f01033b7:	52                   	push   %edx
f01033b8:	6a 00                	push   $0x0
f01033ba:	50                   	push   %eax
f01033bb:	e8 37 42 01 00       	call   f01175f7 <memset>
f01033c0:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01033c3:	a1 4c 29 53 f0       	mov    0xf053294c,%eax
f01033c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01033cb:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01033d2:	77 17                	ja     f01033eb <initialize_kernel_VM+0x1f1>
f01033d4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01033d7:	68 e4 98 11 f0       	push   $0xf01198e4
f01033dc:	68 a8 00 00 00       	push   $0xa8
f01033e1:	68 15 99 11 f0       	push   $0xf0119915
f01033e6:	e8 8b cd ff ff       	call   f0100176 <_panic>
f01033eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01033ee:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01033f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033f7:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f01033fc:	83 ec 0c             	sub    $0xc,%esp
f01033ff:	6a 04                	push   $0x4
f0103401:	51                   	push   %ecx
f0103402:	52                   	push   %edx
f0103403:	68 00 00 c0 ee       	push   $0xeec00000
f0103408:	50                   	push   %eax
f0103409:	e8 b4 00 00 00       	call   f01034c2 <boot_map_range>
f010340e:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0103411:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0103416:	05 ec 0e 00 00       	add    $0xeec,%eax
f010341b:	8b 15 d0 16 55 f0    	mov    0xf05516d0,%edx
f0103421:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0103427:	8b 12                	mov    (%edx),%edx
f0103429:	83 ca 05             	or     $0x5,%edx
f010342c:	89 10                	mov    %edx,(%eax)
	if(USE_KHEAP)
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010342e:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f0103433:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103439:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010343e:	83 ec 0c             	sub    $0xc,%esp
f0103441:	6a 02                	push   $0x2
f0103443:	6a 00                	push   $0x0
f0103445:	52                   	push   %edx
f0103446:	68 00 00 00 f0       	push   $0xf0000000
f010344b:	50                   	push   %eax
f010344c:	e8 71 00 00 00       	call   f01034c2 <boot_map_range>
f0103451:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}

	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0103454:	e8 3a f8 ff ff       	call   f0102c93 <check_boot_pgdir>

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0103459:	e8 c6 fa ff ff       	call   f0102f24 <turn_on_paging>
}
f010345e:	90                   	nop
f010345f:	c9                   	leave  
f0103460:	c3                   	ret    

f0103461 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0103461:	55                   	push   %ebp
f0103462:	89 e5                	mov    %esp,%ebp
f0103464:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0103467:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f010346c:	85 c0                	test   %eax,%eax
f010346e:	75 0a                	jne    f010347a <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0103470:	c7 05 cc 16 55 f0 f4 	movl   $0xf06196f4,0xf05516cc
f0103477:	96 61 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010347a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010347d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103480:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f0103485:	89 c2                	mov    %eax,%edx
f0103487:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010348a:	01 d0                	add    %edx,%eax
f010348c:	48                   	dec    %eax
f010348d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0103490:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103493:	ba 00 00 00 00       	mov    $0x0,%edx
f0103498:	f7 75 fc             	divl   -0x4(%ebp)
f010349b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010349e:	29 d0                	sub    %edx,%eax
f01034a0:	a3 cc 16 55 f0       	mov    %eax,0xf05516cc

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01034a5:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f01034aa:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01034ad:	8b 15 cc 16 55 f0    	mov    0xf05516cc,%edx
f01034b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b6:	01 d0                	add    %edx,%eax
f01034b8:	a3 cc 16 55 f0       	mov    %eax,0xf05516cc

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01034bd:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f01034c0:	c9                   	leave  
f01034c1:	c3                   	ret    

f01034c2 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01034c2:	55                   	push   %ebp
f01034c3:	89 e5                	mov    %esp,%ebp
f01034c5:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01034c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01034cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01034d6:	eb 53                	jmp    f010352b <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01034d8:	83 ec 04             	sub    $0x4,%esp
f01034db:	6a 01                	push   $0x1
f01034dd:	ff 75 0c             	pushl  0xc(%ebp)
f01034e0:	ff 75 08             	pushl  0x8(%ebp)
f01034e3:	e8 4e 00 00 00       	call   f0103536 <boot_get_page_table>
f01034e8:	83 c4 10             	add    $0x10,%esp
f01034eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01034ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034f1:	c1 e8 0c             	shr    $0xc,%eax
f01034f4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01034f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103506:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103509:	01 c2                	add    %eax,%edx
f010350b:	8b 45 18             	mov    0x18(%ebp),%eax
f010350e:	0b 45 14             	or     0x14(%ebp),%eax
f0103511:	83 c8 01             	or     $0x1,%eax
f0103514:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0103516:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f010351d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0103524:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010352b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010352e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103531:	72 a5                	jb     f01034d8 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0103533:	90                   	nop
f0103534:	c9                   	leave  
f0103535:	c3                   	ret    

f0103536 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0103536:	55                   	push   %ebp
f0103537:	89 e5                	mov    %esp,%ebp
f0103539:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f010353c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010353f:	c1 e8 16             	shr    $0x16,%eax
f0103542:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0103545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103548:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010354f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103552:	01 d0                	add    %edx,%eax
f0103554:	8b 00                	mov    (%eax),%eax
f0103556:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0103559:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010355c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103561:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0103564:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103567:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010356a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010356d:	c1 e8 0c             	shr    $0xc,%eax
f0103570:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103573:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0103578:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010357b:	72 17                	jb     f0103594 <boot_get_page_table+0x5e>
f010357d:	ff 75 e8             	pushl  -0x18(%ebp)
f0103580:	68 3c 99 11 f0       	push   $0xf011993c
f0103585:	68 26 01 00 00       	push   $0x126
f010358a:	68 15 99 11 f0       	push   $0xf0119915
f010358f:	e8 e2 cb ff ff       	call   f0100176 <_panic>
f0103594:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103597:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010359c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010359f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01035a3:	75 72                	jne    f0103617 <boot_get_page_table+0xe1>
	{
		if (create)
f01035a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01035a9:	74 65                	je     f0103610 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01035ab:	83 ec 08             	sub    $0x8,%esp
f01035ae:	68 00 10 00 00       	push   $0x1000
f01035b3:	68 00 10 00 00       	push   $0x1000
f01035b8:	e8 a4 fe ff ff       	call   f0103461 <boot_allocate_space>
f01035bd:	83 c4 10             	add    $0x10,%esp
f01035c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01035c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01035c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01035c9:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01035d0:	77 17                	ja     f01035e9 <boot_get_page_table+0xb3>
f01035d2:	ff 75 dc             	pushl  -0x24(%ebp)
f01035d5:	68 e4 98 11 f0       	push   $0xf01198e4
f01035da:	68 2c 01 00 00       	push   $0x12c
f01035df:	68 15 99 11 f0       	push   $0xf0119915
f01035e4:	e8 8d cb ff ff       	call   f0100176 <_panic>
f01035e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01035ec:	05 00 00 00 10       	add    $0x10000000,%eax
f01035f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01035f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103601:	01 d0                	add    %edx,%eax
f0103603:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103606:	83 ca 03             	or     $0x3,%edx
f0103609:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f010360b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010360e:	eb 0a                	jmp    f010361a <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0103610:	b8 00 00 00 00       	mov    $0x0,%eax
f0103615:	eb 03                	jmp    f010361a <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0103617:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f010361a:	c9                   	leave  
f010361b:	c3                   	ret    

f010361c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010361c:	55                   	push   %ebp
f010361d:	89 e5                	mov    %esp,%ebp
f010361f:	53                   	push   %ebx
f0103620:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0103623:	c7 05 b4 16 55 f0 00 	movl   $0x0,0xf05516b4
f010362a:	00 00 00 
f010362d:	c7 05 b8 16 55 f0 00 	movl   $0x0,0xf05516b8
f0103634:	00 00 00 
f0103637:	c7 05 c0 16 55 f0 00 	movl   $0x0,0xf05516c0
f010363e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0103641:	c7 05 a0 16 55 f0 00 	movl   $0x0,0xf05516a0
f0103648:	00 00 00 
f010364b:	c7 05 a4 16 55 f0 00 	movl   $0x0,0xf05516a4
f0103652:	00 00 00 
f0103655:	c7 05 ac 16 55 f0 00 	movl   $0x0,0xf05516ac
f010365c:	00 00 00 

	frames_info[0].references = 1;
f010365f:	a1 c4 16 55 f0       	mov    0xf05516c4,%eax
f0103664:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010366a:	a1 c4 16 55 f0       	mov    0xf05516c4,%eax
f010366f:	83 c0 18             	add    $0x18,%eax
f0103672:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0103678:	a1 c4 16 55 f0       	mov    0xf05516c4,%eax
f010367d:	83 c0 30             	add    $0x30,%eax
f0103680:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0103686:	c7 05 c8 16 55 f0 00 	movl   $0xf0001000,0xf05516c8
f010368d:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0103690:	c7 05 d4 16 55 f0 00 	movl   $0xf0002000,0xf05516d4
f0103697:	20 00 f0 
	i =0;
f010369a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01036a1:	eb 1f                	jmp    f01036c2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01036a3:	8b 15 c8 16 55 f0    	mov    0xf05516c8,%edx
f01036a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ac:	01 d0                	add    %edx,%eax
f01036ae:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01036b1:	8b 15 d4 16 55 f0    	mov    0xf05516d4,%edx
f01036b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ba:	01 d0                	add    %edx,%eax
f01036bc:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01036bf:	ff 45 f4             	incl   -0xc(%ebp)
f01036c2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01036c9:	7e d8                	jle    f01036a3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01036cb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01036d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036d5:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01036da:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01036dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01036e5:	f7 75 f0             	divl   -0x10(%ebp)
f01036e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036eb:	29 d0                	sub    %edx,%eax
f01036ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01036f0:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01036f7:	e9 bc 00 00 00       	jmp    f01037b8 <initialize_paging+0x19c>
	{

		initialize_frame_info(&(frames_info[i]));
f01036fc:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103702:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103705:	89 d0                	mov    %edx,%eax
f0103707:	01 c0                	add    %eax,%eax
f0103709:	01 d0                	add    %edx,%eax
f010370b:	c1 e0 03             	shl    $0x3,%eax
f010370e:	01 c8                	add    %ecx,%eax
f0103710:	83 ec 0c             	sub    $0xc,%esp
f0103713:	50                   	push   %eax
f0103714:	e8 62 02 00 00       	call   f010397b <initialize_frame_info>
f0103719:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010371c:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103722:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103725:	89 d0                	mov    %edx,%eax
f0103727:	01 c0                	add    %eax,%eax
f0103729:	01 d0                	add    %edx,%eax
f010372b:	c1 e0 03             	shl    $0x3,%eax
f010372e:	01 c8                	add    %ecx,%eax
f0103730:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f0103736:	89 10                	mov    %edx,(%eax)
f0103738:	8b 00                	mov    (%eax),%eax
f010373a:	85 c0                	test   %eax,%eax
f010373c:	74 1f                	je     f010375d <initialize_paging+0x141>
f010373e:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f0103744:	8b 1d c4 16 55 f0    	mov    0xf05516c4,%ebx
f010374a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010374d:	89 c8                	mov    %ecx,%eax
f010374f:	01 c0                	add    %eax,%eax
f0103751:	01 c8                	add    %ecx,%eax
f0103753:	c1 e0 03             	shl    $0x3,%eax
f0103756:	01 d8                	add    %ebx,%eax
f0103758:	89 42 04             	mov    %eax,0x4(%edx)
f010375b:	eb 19                	jmp    f0103776 <initialize_paging+0x15a>
f010375d:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103763:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103766:	89 d0                	mov    %edx,%eax
f0103768:	01 c0                	add    %eax,%eax
f010376a:	01 d0                	add    %edx,%eax
f010376c:	c1 e0 03             	shl    $0x3,%eax
f010376f:	01 c8                	add    %ecx,%eax
f0103771:	a3 b8 16 55 f0       	mov    %eax,0xf05516b8
f0103776:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f010377c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010377f:	89 d0                	mov    %edx,%eax
f0103781:	01 c0                	add    %eax,%eax
f0103783:	01 d0                	add    %edx,%eax
f0103785:	c1 e0 03             	shl    $0x3,%eax
f0103788:	01 c8                	add    %ecx,%eax
f010378a:	a3 b4 16 55 f0       	mov    %eax,0xf05516b4
f010378f:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103795:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103798:	89 d0                	mov    %edx,%eax
f010379a:	01 c0                	add    %eax,%eax
f010379c:	01 d0                	add    %edx,%eax
f010379e:	c1 e0 03             	shl    $0x3,%eax
f01037a1:	01 c8                	add    %ecx,%eax
f01037a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01037aa:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
f01037af:	40                   	inc    %eax
f01037b0:	a3 c0 16 55 f0       	mov    %eax,0xf05516c0
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01037b5:	ff 45 f4             	incl   -0xc(%ebp)
f01037b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01037bb:	85 c0                	test   %eax,%eax
f01037bd:	79 05                	jns    f01037c4 <initialize_paging+0x1a8>
f01037bf:	05 ff 0f 00 00       	add    $0xfff,%eax
f01037c4:	c1 f8 0c             	sar    $0xc,%eax
f01037c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01037ca:	0f 8f 2c ff ff ff    	jg     f01036fc <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037d0:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01037d7:	eb 1d                	jmp    f01037f6 <initialize_paging+0x1da>
	{
		frames_info[i].references = 1;
f01037d9:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f01037df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01037e2:	89 d0                	mov    %edx,%eax
f01037e4:	01 c0                	add    %eax,%eax
f01037e6:	01 d0                	add    %edx,%eax
f01037e8:	c1 e0 03             	shl    $0x3,%eax
f01037eb:	01 c8                	add    %ecx,%eax
f01037ed:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037f3:	ff 45 f4             	incl   -0xc(%ebp)
f01037f6:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01037fd:	7e da                	jle    f01037d9 <initialize_paging+0x1bd>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01037ff:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0103806:	a1 cc 16 55 f0       	mov    0xf05516cc,%eax
f010380b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010380e:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0103815:	77 17                	ja     f010382e <initialize_paging+0x212>
f0103817:	ff 75 e0             	pushl  -0x20(%ebp)
f010381a:	68 e4 98 11 f0       	push   $0xf01198e4
f010381f:	68 79 01 00 00       	push   $0x179
f0103824:	68 15 99 11 f0       	push   $0xf0119915
f0103829:	e8 48 c9 ff ff       	call   f0100176 <_panic>
f010382e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103831:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103837:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010383a:	01 d0                	add    %edx,%eax
f010383c:	48                   	dec    %eax
f010383d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103840:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103843:	ba 00 00 00 00       	mov    $0x0,%edx
f0103848:	f7 75 e4             	divl   -0x1c(%ebp)
f010384b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010384e:	29 d0                	sub    %edx,%eax
f0103850:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103853:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010385a:	eb 1d                	jmp    f0103879 <initialize_paging+0x25d>
	{
		frames_info[i].references = 1;
f010385c:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103862:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103865:	89 d0                	mov    %edx,%eax
f0103867:	01 c0                	add    %eax,%eax
f0103869:	01 d0                	add    %edx,%eax
f010386b:	c1 e0 03             	shl    $0x3,%eax
f010386e:	01 c8                	add    %ecx,%eax
f0103870:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103876:	ff 45 f4             	incl   -0xc(%ebp)
f0103879:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387c:	85 c0                	test   %eax,%eax
f010387e:	79 05                	jns    f0103885 <initialize_paging+0x269>
f0103880:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103885:	c1 f8 0c             	sar    $0xc,%eax
f0103888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010388b:	7f cf                	jg     f010385c <initialize_paging+0x240>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010388d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103890:	85 c0                	test   %eax,%eax
f0103892:	79 05                	jns    f0103899 <initialize_paging+0x27d>
f0103894:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103899:	c1 f8 0c             	sar    $0xc,%eax
f010389c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010389f:	e9 bc 00 00 00       	jmp    f0103960 <initialize_paging+0x344>
	{
		initialize_frame_info(&(frames_info[i]));
f01038a4:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f01038aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038ad:	89 d0                	mov    %edx,%eax
f01038af:	01 c0                	add    %eax,%eax
f01038b1:	01 d0                	add    %edx,%eax
f01038b3:	c1 e0 03             	shl    $0x3,%eax
f01038b6:	01 c8                	add    %ecx,%eax
f01038b8:	83 ec 0c             	sub    $0xc,%esp
f01038bb:	50                   	push   %eax
f01038bc:	e8 ba 00 00 00       	call   f010397b <initialize_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01038c4:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f01038ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038cd:	89 d0                	mov    %edx,%eax
f01038cf:	01 c0                	add    %eax,%eax
f01038d1:	01 d0                	add    %edx,%eax
f01038d3:	c1 e0 03             	shl    $0x3,%eax
f01038d6:	01 c8                	add    %ecx,%eax
f01038d8:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f01038de:	89 10                	mov    %edx,(%eax)
f01038e0:	8b 00                	mov    (%eax),%eax
f01038e2:	85 c0                	test   %eax,%eax
f01038e4:	74 1f                	je     f0103905 <initialize_paging+0x2e9>
f01038e6:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f01038ec:	8b 1d c4 16 55 f0    	mov    0xf05516c4,%ebx
f01038f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01038f5:	89 c8                	mov    %ecx,%eax
f01038f7:	01 c0                	add    %eax,%eax
f01038f9:	01 c8                	add    %ecx,%eax
f01038fb:	c1 e0 03             	shl    $0x3,%eax
f01038fe:	01 d8                	add    %ebx,%eax
f0103900:	89 42 04             	mov    %eax,0x4(%edx)
f0103903:	eb 19                	jmp    f010391e <initialize_paging+0x302>
f0103905:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f010390b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010390e:	89 d0                	mov    %edx,%eax
f0103910:	01 c0                	add    %eax,%eax
f0103912:	01 d0                	add    %edx,%eax
f0103914:	c1 e0 03             	shl    $0x3,%eax
f0103917:	01 c8                	add    %ecx,%eax
f0103919:	a3 b8 16 55 f0       	mov    %eax,0xf05516b8
f010391e:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f0103924:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103927:	89 d0                	mov    %edx,%eax
f0103929:	01 c0                	add    %eax,%eax
f010392b:	01 d0                	add    %edx,%eax
f010392d:	c1 e0 03             	shl    $0x3,%eax
f0103930:	01 c8                	add    %ecx,%eax
f0103932:	a3 b4 16 55 f0       	mov    %eax,0xf05516b4
f0103937:	8b 0d c4 16 55 f0    	mov    0xf05516c4,%ecx
f010393d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103940:	89 d0                	mov    %edx,%eax
f0103942:	01 c0                	add    %eax,%eax
f0103944:	01 d0                	add    %edx,%eax
f0103946:	c1 e0 03             	shl    $0x3,%eax
f0103949:	01 c8                	add    %ecx,%eax
f010394b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103952:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
f0103957:	40                   	inc    %eax
f0103958:	a3 c0 16 55 f0       	mov    %eax,0xf05516c0
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010395d:	ff 45 f4             	incl   -0xc(%ebp)
f0103960:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103963:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0103968:	39 c2                	cmp    %eax,%edx
f010396a:	0f 82 34 ff ff ff    	jb     f01038a4 <initialize_paging+0x288>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0103970:	e8 4c 75 00 00       	call   f010aec1 <initialize_disk_page_file>
}
f0103975:	90                   	nop
f0103976:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103979:	c9                   	leave  
f010397a:	c3                   	ret    

f010397b <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct Frame_Info *ptr_frame_info)
{
f010397b:	55                   	push   %ebp
f010397c:	89 e5                	mov    %esp,%ebp
f010397e:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103981:	83 ec 04             	sub    $0x4,%esp
f0103984:	6a 18                	push   $0x18
f0103986:	6a 00                	push   $0x0
f0103988:	ff 75 08             	pushl  0x8(%ebp)
f010398b:	e8 67 3c 01 00       	call   f01175f7 <memset>
f0103990:	83 c4 10             	add    $0x10,%esp
}
f0103993:	90                   	nop
f0103994:	c9                   	leave  
f0103995:	c3                   	ret    

f0103996 <allocate_frame>:
// Hint: references should not be incremented

extern void env_free(struct Env *e);

int allocate_frame(struct Frame_Info **ptr_frame_info)
{
f0103996:	55                   	push   %ebp
f0103997:	89 e5                	mov    %esp,%ebp
f0103999:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010399c:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f01039a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a5:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01039a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01039ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b1:	8b 00                	mov    (%eax),%eax
f01039b3:	85 c0                	test   %eax,%eax
f01039b5:	75 17                	jne    f01039ce <allocate_frame+0x38>
	{
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01039b7:	83 ec 04             	sub    $0x4,%esp
f01039ba:	68 6c 99 11 f0       	push   $0xf011996c
f01039bf:	68 ac 01 00 00       	push   $0x1ac
f01039c4:	68 15 99 11 f0       	push   $0xf0119915
f01039c9:	e8 a8 c7 ff ff       	call   f0100176 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01039ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01039d1:	8b 00                	mov    (%eax),%eax
f01039d3:	8b 00                	mov    (%eax),%eax
f01039d5:	85 c0                	test   %eax,%eax
f01039d7:	74 14                	je     f01039ed <allocate_frame+0x57>
f01039d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01039dc:	8b 00                	mov    (%eax),%eax
f01039de:	8b 00                	mov    (%eax),%eax
f01039e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01039e3:	8b 12                	mov    (%edx),%edx
f01039e5:	8b 52 04             	mov    0x4(%edx),%edx
f01039e8:	89 50 04             	mov    %edx,0x4(%eax)
f01039eb:	eb 0d                	jmp    f01039fa <allocate_frame+0x64>
f01039ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01039f0:	8b 00                	mov    (%eax),%eax
f01039f2:	8b 40 04             	mov    0x4(%eax),%eax
f01039f5:	a3 b8 16 55 f0       	mov    %eax,0xf05516b8
f01039fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fd:	8b 00                	mov    (%eax),%eax
f01039ff:	8b 40 04             	mov    0x4(%eax),%eax
f0103a02:	85 c0                	test   %eax,%eax
f0103a04:	74 13                	je     f0103a19 <allocate_frame+0x83>
f0103a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a09:	8b 00                	mov    (%eax),%eax
f0103a0b:	8b 40 04             	mov    0x4(%eax),%eax
f0103a0e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103a11:	8b 12                	mov    (%edx),%edx
f0103a13:	8b 12                	mov    (%edx),%edx
f0103a15:	89 10                	mov    %edx,(%eax)
f0103a17:	eb 0c                	jmp    f0103a25 <allocate_frame+0x8f>
f0103a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a1c:	8b 00                	mov    (%eax),%eax
f0103a1e:	8b 00                	mov    (%eax),%eax
f0103a20:	a3 b4 16 55 f0       	mov    %eax,0xf05516b4
f0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a28:	8b 00                	mov    (%eax),%eax
f0103a2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103a30:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a33:	8b 00                	mov    (%eax),%eax
f0103a35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a3c:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
f0103a41:	48                   	dec    %eax
f0103a42:	a3 c0 16 55 f0       	mov    %eax,0xf05516c0

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0103a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4a:	8b 00                	mov    (%eax),%eax
f0103a4c:	8a 40 14             	mov    0x14(%eax),%al
f0103a4f:	84 c0                	test   %al,%al
f0103a51:	74 1d                	je     f0103a70 <allocate_frame+0xda>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment,(*ptr_frame_info)->va);
f0103a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a56:	8b 00                	mov    (%eax),%eax
f0103a58:	8b 50 0c             	mov    0xc(%eax),%edx
f0103a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a5e:	8b 00                	mov    (%eax),%eax
f0103a60:	8b 40 10             	mov    0x10(%eax),%eax
f0103a63:	83 ec 08             	sub    $0x8,%esp
f0103a66:	52                   	push   %edx
f0103a67:	50                   	push   %eax
f0103a68:	e8 41 14 00 00       	call   f0104eae <pt_clear_page_table_entry>
f0103a6d:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0103a70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a73:	8b 00                	mov    (%eax),%eax
f0103a75:	83 ec 0c             	sub    $0xc,%esp
f0103a78:	50                   	push   %eax
f0103a79:	e8 fd fe ff ff       	call   f010397b <initialize_frame_info>
f0103a7e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103a81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a86:	c9                   	leave  
f0103a87:	c3                   	ret    

f0103a88 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct Frame_Info *ptr_frame_info)
{
f0103a88:	55                   	push   %ebp
f0103a89:	89 e5                	mov    %esp,%ebp
f0103a8b:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0103a8e:	83 ec 0c             	sub    $0xc,%esp
f0103a91:	ff 75 08             	pushl  0x8(%ebp)
f0103a94:	e8 e2 fe ff ff       	call   f010397b <initialize_frame_info>
f0103a99:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103a9c:	8b 15 b4 16 55 f0    	mov    0xf05516b4,%edx
f0103aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa5:	89 10                	mov    %edx,(%eax)
f0103aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aaa:	8b 00                	mov    (%eax),%eax
f0103aac:	85 c0                	test   %eax,%eax
f0103aae:	74 0d                	je     f0103abd <free_frame+0x35>
f0103ab0:	a1 b4 16 55 f0       	mov    0xf05516b4,%eax
f0103ab5:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ab8:	89 50 04             	mov    %edx,0x4(%eax)
f0103abb:	eb 08                	jmp    f0103ac5 <free_frame+0x3d>
f0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac0:	a3 b8 16 55 f0       	mov    %eax,0xf05516b8
f0103ac5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac8:	a3 b4 16 55 f0       	mov    %eax,0xf05516b4
f0103acd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ad7:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
f0103adc:	40                   	inc    %eax
f0103add:	a3 c0 16 55 f0       	mov    %eax,0xf05516c0
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0103ae2:	90                   	nop
f0103ae3:	c9                   	leave  
f0103ae4:	c3                   	ret    

f0103ae5 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct Frame_Info* ptr_frame_info)
{
f0103ae5:	55                   	push   %ebp
f0103ae6:	89 e5                	mov    %esp,%ebp
f0103ae8:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0103aeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aee:	8b 40 08             	mov    0x8(%eax),%eax
f0103af1:	48                   	dec    %eax
f0103af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0103af5:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afc:	8b 40 08             	mov    0x8(%eax),%eax
f0103aff:	66 85 c0             	test   %ax,%ax
f0103b02:	75 0e                	jne    f0103b12 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0103b04:	83 ec 0c             	sub    $0xc,%esp
f0103b07:	ff 75 08             	pushl  0x8(%ebp)
f0103b0a:	e8 79 ff ff ff       	call   f0103a88 <free_frame>
f0103b0f:	83 c4 10             	add    $0x10,%esp
}
f0103b12:	90                   	nop
f0103b13:	c9                   	leave  
f0103b14:	c3                   	ret    

f0103b15 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const void *virtual_address, uint32 **ptr_page_table)
{
f0103b15:	55                   	push   %ebp
f0103b16:	89 e5                	mov    %esp,%ebp
f0103b18:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b1e:	c1 e8 16             	shr    $0x16,%eax
f0103b21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b28:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2b:	01 d0                	add    %edx,%eax
f0103b2d:	8b 00                	mov    (%eax),%eax
f0103b2f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103b32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b35:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103b3a:	77 1d                	ja     f0103b59 <get_page_table+0x44>
	{
		*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b44:	83 ec 0c             	sub    $0xc,%esp
f0103b47:	50                   	push   %eax
f0103b48:	e8 e8 85 00 00       	call   f010c135 <kheap_virtual_address>
f0103b4d:	83 c4 10             	add    $0x10,%esp
f0103b50:	89 c2                	mov    %eax,%edx
f0103b52:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b55:	89 10                	mov    %edx,(%eax)
f0103b57:	eb 44                	jmp    f0103b9d <get_page_table+0x88>
	}
	else
	{
		*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b67:	c1 e8 0c             	shr    $0xc,%eax
f0103b6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b6d:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0103b72:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b75:	72 17                	jb     f0103b8e <get_page_table+0x79>
f0103b77:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b7a:	68 3c 99 11 f0       	push   $0xf011993c
f0103b7f:	68 f2 01 00 00       	push   $0x1f2
f0103b84:	68 15 99 11 f0       	push   $0xf0119915
f0103b89:	e8 e8 c5 ff ff       	call   f0100176 <_panic>
f0103b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b96:	89 c2                	mov    %eax,%edx
f0103b98:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b9b:	89 10                	mov    %edx,(%eax)
	}

	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ba0:	83 e0 01             	and    $0x1,%eax
f0103ba3:	85 c0                	test   %eax,%eax
f0103ba5:	74 0a                	je     f0103bb1 <get_page_table+0x9c>
	{
		return TABLE_IN_MEMORY;
f0103ba7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103bac:	e9 ba 00 00 00       	jmp    f0103c6b <get_page_table+0x156>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103bb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103bb5:	0f 84 a2 00 00 00    	je     f0103c5d <get_page_table+0x148>
	{
		// Put the faulted address in CR2 and then
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;
f0103bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bbe:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103bc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103bc4:	0f 22 d0             	mov    %eax,%cr2

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0103bc7:	83 ec 0c             	sub    $0xc,%esp
f0103bca:	6a 00                	push   $0x0
f0103bcc:	e8 74 48 00 00       	call   f0108445 <fault_handler>
f0103bd1:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bd7:	c1 e8 16             	shr    $0x16,%eax
f0103bda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be4:	01 d0                	add    %edx,%eax
f0103be6:	8b 00                	mov    (%eax),%eax
f0103be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103beb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103bf3:	77 1d                	ja     f0103c12 <get_page_table+0xfd>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103bf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bfd:	83 ec 0c             	sub    $0xc,%esp
f0103c00:	50                   	push   %eax
f0103c01:	e8 2f 85 00 00       	call   f010c135 <kheap_virtual_address>
f0103c06:	83 c4 10             	add    $0x10,%esp
f0103c09:	89 c2                	mov    %eax,%edx
f0103c0b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c0e:	89 10                	mov    %edx,(%eax)
f0103c10:	eb 44                	jmp    f0103c56 <get_page_table+0x141>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c20:	c1 e8 0c             	shr    $0xc,%eax
f0103c23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c26:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0103c2b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103c2e:	72 17                	jb     f0103c47 <get_page_table+0x132>
f0103c30:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c33:	68 3c 99 11 f0       	push   $0xf011993c
f0103c38:	68 0d 02 00 00       	push   $0x20d
f0103c3d:	68 15 99 11 f0       	push   $0xf0119915
f0103c42:	e8 2f c5 ff ff       	call   f0100176 <_panic>
f0103c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c4a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c4f:	89 c2                	mov    %eax,%edx
f0103c51:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c54:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0103c56:	b8 00 00 00 00       	mov    $0x0,%eax
f0103c5b:	eb 0e                	jmp    f0103c6b <get_page_table+0x156>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0103c5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0103c66:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0103c6b:	c9                   	leave  
f0103c6c:	c3                   	ret    

f0103c6d <create_page_table>:

void * create_page_table(uint32 *ptr_page_directory, const uint32 virtual_address) {
f0103c6d:	55                   	push   %ebp
f0103c6e:	89 e5                	mov    %esp,%ebp
f0103c70:	83 ec 18             	sub    $0x18,%esp
	//REMEMBER TO:
	//	a.	clear all entries (as it may contain garbage data)
	//	b.	clear the TLB cache (using "tlbflush()")
	//change this "return" according to your answer

	uint32* newPT = kmalloc(PAGE_SIZE);
f0103c73:	83 ec 0c             	sub    $0xc,%esp
f0103c76:	68 00 10 00 00       	push   $0x1000
f0103c7b:	e8 a6 81 00 00       	call   f010be26 <kmalloc>
f0103c80:	83 c4 10             	add    $0x10,%esp
f0103c83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
f0103c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c89:	83 ec 0c             	sub    $0xc,%esp
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 c4 84 00 00       	call   f010c156 <kheap_physical_address>
f0103c92:	83 c4 10             	add    $0x10,%esp
f0103c95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;
f0103c98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c9b:	c1 e8 16             	shr    $0x16,%eax
f0103c9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ca5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca8:	01 d0                	add    %edx,%eax
f0103caa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103cad:	83 ca 07             	or     $0x7,%edx
f0103cb0:	89 10                	mov    %edx,(%eax)

	for(int i=0; i < kilo; i++) {
f0103cb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb9:	eb 18                	jmp    f0103cd3 <create_page_table+0x66>
		newPT[i] = 0;
f0103cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc8:	01 d0                	add    %edx,%eax
f0103cca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	uint32* newPT = kmalloc(PAGE_SIZE);
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;

	for(int i=0; i < kilo; i++) {
f0103cd0:	ff 45 f4             	incl   -0xc(%ebp)
f0103cd3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0103cda:	7e df                	jle    f0103cbb <create_page_table+0x4e>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0103cdc:	0f 20 d8             	mov    %cr3,%eax
f0103cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0103ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ce5:	0f 22 d8             	mov    %eax,%cr3
		newPT[i] = 0;
	}

	tlbflush();
	return newPT;
f0103ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ceb:	c9                   	leave  
f0103cec:	c3                   	ret    

f0103ced <__static_cpt>:


void __static_cpt(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0103ced:	55                   	push   %ebp
f0103cee:	89 e5                	mov    %esp,%ebp
f0103cf0:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0103cf3:	83 ec 04             	sub    $0x4,%esp
f0103cf6:	68 bc 99 11 f0       	push   $0xf01199bc
f0103cfb:	68 36 02 00 00       	push   $0x236
f0103d00:	68 15 99 11 f0       	push   $0xf0119915
f0103d05:	e8 6c c4 ff ff       	call   f0100176 <_panic>

f0103d0a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103d0a:	55                   	push   %ebp
f0103d0b:	89 e5                	mov    %esp,%ebp
f0103d0d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103d10:	ff 75 0c             	pushl  0xc(%ebp)
f0103d13:	e8 89 f4 ff ff       	call   f01031a1 <to_physical_address>
f0103d18:	83 c4 04             	add    $0x4,%esp
f0103d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0103d1e:	83 ec 04             	sub    $0x4,%esp
f0103d21:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103d24:	50                   	push   %eax
f0103d25:	ff 75 10             	pushl  0x10(%ebp)
f0103d28:	ff 75 08             	pushl  0x8(%ebp)
f0103d2b:	e8 e5 fd ff ff       	call   f0103b15 <get_page_table>
f0103d30:	83 c4 10             	add    $0x10,%esp
f0103d33:	83 f8 01             	cmp    $0x1,%eax
f0103d36:	75 15                	jne    f0103d4d <map_frame+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103d38:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d3b:	83 ec 08             	sub    $0x8,%esp
f0103d3e:	50                   	push   %eax
f0103d3f:	ff 75 08             	pushl  0x8(%ebp)
f0103d42:	e8 26 ff ff ff       	call   f0103c6d <create_page_table>
f0103d47:	83 c4 10             	add    $0x10,%esp
f0103d4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}

	}

	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0103d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d50:	8b 55 10             	mov    0x10(%ebp),%edx
f0103d53:	c1 ea 0c             	shr    $0xc,%edx
f0103d56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103d5c:	c1 e2 02             	shl    $0x2,%edx
f0103d5f:	01 d0                	add    %edx,%eax
f0103d61:	8b 00                	mov    (%eax),%eax
f0103d63:	89 45 f0             	mov    %eax,-0x10(%ebp)


	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0103d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d69:	83 e0 01             	and    $0x1,%eax
f0103d6c:	85 c0                	test   %eax,%eax
f0103d6e:	74 25                	je     f0103d95 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0103d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103d7b:	75 07                	jne    f0103d84 <map_frame+0x7a>
			return 0;
f0103d7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d82:	eb 43                	jmp    f0103dc7 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0103d84:	83 ec 08             	sub    $0x8,%esp
f0103d87:	ff 75 10             	pushl  0x10(%ebp)
f0103d8a:	ff 75 08             	pushl  0x8(%ebp)
f0103d8d:	e8 a7 00 00 00       	call   f0103e39 <unmap_frame>
f0103d92:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	8b 40 08             	mov    0x8(%eax),%eax
f0103d9b:	40                   	inc    %eax
f0103d9c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d9f:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103da6:	8b 55 10             	mov    0x10(%ebp),%edx
f0103da9:	c1 ea 0c             	shr    $0xc,%edx
f0103dac:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103db2:	c1 e2 02             	shl    $0x2,%edx
f0103db5:	01 c2                	add    %eax,%edx
f0103db7:	8b 45 14             	mov    0x14(%ebp),%eax
f0103dba:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103dbd:	83 c8 01             	or     $0x1,%eax
f0103dc0:	89 02                	mov    %eax,(%edx)

	return 0;
f0103dc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103dc7:	c9                   	leave  
f0103dc8:	c3                   	ret    

f0103dc9 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct Frame_Info * get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table)
{
f0103dc9:	55                   	push   %ebp
f0103dca:	89 e5                	mov    %esp,%ebp
f0103dcc:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0103dcf:	83 ec 04             	sub    $0x4,%esp
f0103dd2:	ff 75 10             	pushl  0x10(%ebp)
f0103dd5:	ff 75 0c             	pushl  0xc(%ebp)
f0103dd8:	ff 75 08             	pushl  0x8(%ebp)
f0103ddb:	e8 35 fd ff ff       	call   f0103b15 <get_page_table>
f0103de0:	83 c4 10             	add    $0x10,%esp
f0103de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if((*ptr_page_table) != 0)
f0103de6:	8b 45 10             	mov    0x10(%ebp),%eax
f0103de9:	8b 00                	mov    (%eax),%eax
f0103deb:	85 c0                	test   %eax,%eax
f0103ded:	74 43                	je     f0103e32 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0103def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103df2:	c1 e8 0c             	shr    $0xc,%eax
f0103df5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0103dfd:	8b 45 10             	mov    0x10(%ebp),%eax
f0103e00:	8b 00                	mov    (%eax),%eax
f0103e02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103e05:	c1 e2 02             	shl    $0x2,%edx
f0103e08:	01 d0                	add    %edx,%eax
f0103e0a:	8b 00                	mov    (%eax),%eax
f0103e0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0103e0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0103e13:	74 16                	je     f0103e2b <get_frame_info+0x62>
		{
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0103e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e1d:	83 ec 0c             	sub    $0xc,%esp
f0103e20:	50                   	push   %eax
f0103e21:	e8 8e f3 ff ff       	call   f01031b4 <to_frame_info>
f0103e26:	83 c4 10             	add    $0x10,%esp
f0103e29:	eb 0c                	jmp    f0103e37 <get_frame_info+0x6e>
		}
		return 0;
f0103e2b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e30:	eb 05                	jmp    f0103e37 <get_frame_info+0x6e>
	}
	return 0;
f0103e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e37:	c9                   	leave  
f0103e38:	c3                   	ret    

f0103e39 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, void *virtual_address)
{
f0103e39:	55                   	push   %ebp
f0103e3a:	89 e5                	mov    %esp,%ebp
f0103e3c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0103e3f:	83 ec 04             	sub    $0x4,%esp
f0103e42:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e45:	50                   	push   %eax
f0103e46:	ff 75 0c             	pushl  0xc(%ebp)
f0103e49:	ff 75 08             	pushl  0x8(%ebp)
f0103e4c:	e8 78 ff ff ff       	call   f0103dc9 <get_frame_info>
f0103e51:	83 c4 10             	add    $0x10,%esp
f0103e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0103e57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e5b:	74 60                	je     f0103ebd <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0103e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e60:	8a 40 14             	mov    0x14(%eax),%al
f0103e63:	84 c0                	test   %al,%al
f0103e65:	74 1d                	je     f0103e84 <unmap_frame+0x4b>
f0103e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e6a:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103e6f:	77 13                	ja     f0103e84 <unmap_frame+0x4b>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0103e71:	83 ec 08             	sub    $0x8,%esp
f0103e74:	ff 75 0c             	pushl  0xc(%ebp)
f0103e77:	68 e0 99 11 f0       	push   $0xf01199e0
f0103e7c:	e8 15 2f 00 00       	call   f0106d96 <cprintf>
f0103e81:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0103e84:	83 ec 0c             	sub    $0xc,%esp
f0103e87:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e8a:	e8 56 fc ff ff       	call   f0103ae5 <decrement_references>
f0103e8f:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0103e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e95:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e98:	c1 ea 0c             	shr    $0xc,%edx
f0103e9b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ea1:	c1 e2 02             	shl    $0x2,%edx
f0103ea4:	01 d0                	add    %edx,%eax
f0103ea6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, virtual_address);
f0103eac:	83 ec 08             	sub    $0x8,%esp
f0103eaf:	ff 75 0c             	pushl  0xc(%ebp)
f0103eb2:	ff 75 08             	pushl  0x8(%ebp)
f0103eb5:	e8 55 f0 ff ff       	call   f0102f0f <tlb_invalidate>
f0103eba:	83 c4 10             	add    $0x10,%esp
	}
}
f0103ebd:	90                   	nop
f0103ebe:	c9                   	leave  
f0103ebf:	c3                   	ret    

f0103ec0 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103ec0:	55                   	push   %ebp
f0103ec1:	89 e5                	mov    %esp,%ebp
f0103ec3:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103ec6:	ff 75 0c             	pushl  0xc(%ebp)
f0103ec9:	e8 d3 f2 ff ff       	call   f01031a1 <to_physical_address>
f0103ece:	83 c4 04             	add    $0x4,%esp
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103ed4:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ed7:	c1 e8 16             	shr    $0x16,%eax
f0103eda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee4:	01 d0                	add    %edx,%eax
f0103ee6:	8b 00                	mov    (%eax),%eax
f0103ee8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103eeb:	8b 45 10             	mov    0x10(%ebp),%eax
f0103eee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103ef3:	77 19                	ja     f0103f0e <loadtime_map_frame+0x4e>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ef8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103efd:	83 ec 0c             	sub    $0xc,%esp
f0103f00:	50                   	push   %eax
f0103f01:	e8 2f 82 00 00       	call   f010c135 <kheap_virtual_address>
f0103f06:	83 c4 10             	add    $0x10,%esp
f0103f09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f0c:	eb 40                	jmp    f0103f4e <loadtime_map_frame+0x8e>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103f22:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0103f27:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <loadtime_map_frame+0x83>
f0103f2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0103f2f:	68 3c 99 11 f0       	push   $0xf011993c
f0103f34:	68 c3 02 00 00       	push   $0x2c3
f0103f39:	68 15 99 11 f0       	push   $0xf0119915
f0103f3e:	e8 33 c2 ff ff       	call   f0100176 <_panic>
f0103f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0103f4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103f52:	75 15                	jne    f0103f69 <loadtime_map_frame+0xa9>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103f54:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f57:	83 ec 08             	sub    $0x8,%esp
f0103f5a:	50                   	push   %eax
f0103f5b:	ff 75 08             	pushl  0x8(%ebp)
f0103f5e:	e8 0a fd ff ff       	call   f0103c6d <create_page_table>
f0103f63:	83 c4 10             	add    $0x10,%esp
f0103f66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}
	}

	ptr_frame_info->references++;
f0103f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f6c:	8b 40 08             	mov    0x8(%eax),%eax
f0103f6f:	40                   	inc    %eax
f0103f70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f73:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103f77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0103f7d:	c1 ea 0c             	shr    $0xc,%edx
f0103f80:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f86:	c1 e2 02             	shl    $0x2,%edx
f0103f89:	01 c2                	add    %eax,%edx
f0103f8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f8e:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103f91:	83 c8 01             	or     $0x1,%eax
f0103f94:	89 02                	mov    %eax,(%edx)

	return 0;
f0103f96:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103f9b:	c9                   	leave  
f0103f9c:	c3                   	ret    

f0103f9d <allocateMem>:
//======================================================
/// functions used for malloc() and freeHeap()
//======================================================

// [10] allocateMem
void allocateMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103f9d:	55                   	push   %ebp
f0103f9e:	89 e5                	mov    %esp,%ebp
f0103fa0:	83 ec 18             	sub    $0x18,%esp
	//panic("allocateMem() is not implemented yet...!!");

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
f0103fa3:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103faa:	8b 55 10             	mov    0x10(%ebp),%edx
f0103fad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fb0:	01 d0                	add    %edx,%eax
f0103fb2:	48                   	dec    %eax
f0103fb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0103fbe:	f7 75 f0             	divl   -0x10(%ebp)
f0103fc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fc4:	29 d0                	sub    %edx,%eax
f0103fc6:	89 45 10             	mov    %eax,0x10(%ebp)
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103fcf:	eb 1b                	jmp    f0103fec <allocateMem+0x4f>
		pf_add_empty_env_page(e, i, 1);
f0103fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd4:	83 ec 04             	sub    $0x4,%esp
f0103fd7:	6a 01                	push   $0x1
f0103fd9:	50                   	push   %eax
f0103fda:	ff 75 08             	pushl  0x8(%ebp)
f0103fdd:	e8 8e 72 00 00       	call   f010b270 <pf_add_empty_env_page>
f0103fe2:	83 c4 10             	add    $0x10,%esp

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fe5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0103fec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103fef:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ff2:	01 c2                	add    %eax,%edx
f0103ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ff7:	39 c2                	cmp    %eax,%edx
f0103ff9:	77 d6                	ja     f0103fd1 <allocateMem+0x34>
		pf_add_empty_env_page(e, i, 1);
	}
}
f0103ffb:	90                   	nop
f0103ffc:	c9                   	leave  
f0103ffd:	c3                   	ret    

f0103ffe <freeMem>:


// [12] freeMem

void freeMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103ffe:	55                   	push   %ebp
f0103fff:	89 e5                	mov    %esp,%ebp
f0104001:	83 ec 28             	sub    $0x28,%esp
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0104004:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104007:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010400a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010400d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104012:	89 45 0c             	mov    %eax,0xc(%ebp)
	uint32* ptrPT = NULL;
f0104015:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for(uint32 i=virtual_address ; i<virtual_address+size; i+=PAGE_SIZE) {
f010401c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010401f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104022:	e9 f5 00 00 00       	jmp    f010411c <freeMem+0x11e>
		pf_remove_env_page(e, i);
f0104027:	83 ec 08             	sub    $0x8,%esp
f010402a:	ff 75 f4             	pushl  -0xc(%ebp)
f010402d:	ff 75 08             	pushl  0x8(%ebp)
f0104030:	e8 7a 75 00 00       	call   f010b5af <pf_remove_env_page>
f0104035:	83 c4 10             	add    $0x10,%esp

		for(int j=0; j<e->page_WS_max_size; j++) {
f0104038:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010403f:	eb 44                	jmp    f0104085 <freeMem+0x87>
			if(i == env_page_ws_get_virtual_address(e, j)) {
f0104041:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104044:	83 ec 08             	sub    $0x8,%esp
f0104047:	50                   	push   %eax
f0104048:	ff 75 08             	pushl  0x8(%ebp)
f010404b:	e8 69 04 00 00       	call   f01044b9 <env_page_ws_get_virtual_address>
f0104050:	83 c4 10             	add    $0x10,%esp
f0104053:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104056:	75 2a                	jne    f0104082 <freeMem+0x84>
				unmap_frame(e->env_page_directory, (void*)i);
f0104058:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010405b:	8b 45 08             	mov    0x8(%ebp),%eax
f010405e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104061:	83 ec 08             	sub    $0x8,%esp
f0104064:	52                   	push   %edx
f0104065:	50                   	push   %eax
f0104066:	e8 ce fd ff ff       	call   f0103e39 <unmap_frame>
f010406b:	83 c4 10             	add    $0x10,%esp
				env_page_ws_clear_entry(e, j);
f010406e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104071:	83 ec 08             	sub    $0x8,%esp
f0104074:	50                   	push   %eax
f0104075:	ff 75 08             	pushl  0x8(%ebp)
f0104078:	e8 c2 03 00 00       	call   f010443f <env_page_ws_clear_entry>
f010407d:	83 c4 10             	add    $0x10,%esp
				break;
f0104080:	eb 10                	jmp    f0104092 <freeMem+0x94>
	uint32* ptrPT = NULL;

	for(uint32 i=virtual_address ; i<virtual_address+size; i+=PAGE_SIZE) {
		pf_remove_env_page(e, i);

		for(int j=0; j<e->page_WS_max_size; j++) {
f0104082:	ff 45 f0             	incl   -0x10(%ebp)
f0104085:	8b 45 08             	mov    0x8(%ebp),%eax
f0104088:	8b 50 74             	mov    0x74(%eax),%edx
f010408b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010408e:	39 c2                	cmp    %eax,%edx
f0104090:	77 af                	ja     f0104041 <freeMem+0x43>
				env_page_ws_clear_entry(e, j);
				break;
			}
		}

		get_page_table(e->env_page_directory, (void*)i, &ptrPT);
f0104092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104095:	8b 45 08             	mov    0x8(%ebp),%eax
f0104098:	8b 40 5c             	mov    0x5c(%eax),%eax
f010409b:	83 ec 04             	sub    $0x4,%esp
f010409e:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f01040a1:	51                   	push   %ecx
f01040a2:	52                   	push   %edx
f01040a3:	50                   	push   %eax
f01040a4:	e8 6c fa ff ff       	call   f0103b15 <get_page_table>
f01040a9:	83 c4 10             	add    $0x10,%esp
		int x = 1;
f01040ac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

		if(ptrPT != NULL) {
f01040b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01040b6:	85 c0                	test   %eax,%eax
f01040b8:	74 5b                	je     f0104115 <freeMem+0x117>
			for(int j=0; j<kilo; j++) {
f01040ba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01040c1:	eb 1d                	jmp    f01040e0 <freeMem+0xe2>
				if(ptrPT[j] != 0) {
f01040c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01040c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01040c9:	c1 e2 02             	shl    $0x2,%edx
f01040cc:	01 d0                	add    %edx,%eax
f01040ce:	8b 00                	mov    (%eax),%eax
f01040d0:	85 c0                	test   %eax,%eax
f01040d2:	74 09                	je     f01040dd <freeMem+0xdf>
					x = 0;
f01040d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
					break;
f01040db:	eb 0c                	jmp    f01040e9 <freeMem+0xeb>

		get_page_table(e->env_page_directory, (void*)i, &ptrPT);
		int x = 1;

		if(ptrPT != NULL) {
			for(int j=0; j<kilo; j++) {
f01040dd:	ff 45 e8             	incl   -0x18(%ebp)
f01040e0:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
f01040e7:	7e da                	jle    f01040c3 <freeMem+0xc5>
					x = 0;
					break;
				}
			}

			if(x == 1) {
f01040e9:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f01040ed:	75 26                	jne    f0104115 <freeMem+0x117>
				e->env_page_directory[PDX(i)]=0;
f01040ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01040f2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01040f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040f8:	c1 ea 16             	shr    $0x16,%edx
f01040fb:	c1 e2 02             	shl    $0x2,%edx
f01040fe:	01 d0                	add    %edx,%eax
f0104100:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				kfree((void*)ptrPT);
f0104106:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104109:	83 ec 0c             	sub    $0xc,%esp
f010410c:	50                   	push   %eax
f010410d:	e8 a5 7d 00 00       	call   f010beb7 <kfree>
f0104112:	83 c4 10             	add    $0x10,%esp
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
	uint32* ptrPT = NULL;

	for(uint32 i=virtual_address ; i<virtual_address+size; i+=PAGE_SIZE) {
f0104115:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010411c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010411f:	8b 45 10             	mov    0x10(%ebp),%eax
f0104122:	01 d0                	add    %edx,%eax
f0104124:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104127:	0f 87 fa fe ff ff    	ja     f0104027 <freeMem+0x29>
				e->env_page_directory[PDX(i)]=0;
				kfree((void*)ptrPT);
			}
		}
	}
}
f010412d:	90                   	nop
f010412e:	c9                   	leave  
f010412f:	c3                   	ret    

f0104130 <__freeMem_with_buffering>:

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104130:	55                   	push   %ebp
f0104131:	89 e5                	mov    %esp,%ebp
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Free any BUFFERED pages in the given range
	//4. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

	//Refer to the project presentation and documentation for details
}
f0104133:	90                   	nop
f0104134:	5d                   	pop    %ebp
f0104135:	c3                   	ret    

f0104136 <moveMem>:

//================= [BONUS] =====================
// [3] moveMem

void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size) {
f0104136:	55                   	push   %ebp
f0104137:	89 e5                	mov    %esp,%ebp
f0104139:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS3] User Heap Realloc [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("moveMem() is not implemented yet...!!");
f010413c:	83 ec 04             	sub    $0x4,%esp
f010413f:	68 04 9a 11 f0       	push   $0xf0119a04
f0104144:	68 36 03 00 00       	push   $0x336
f0104149:	68 15 99 11 f0       	push   $0xf0119915
f010414e:	e8 23 c0 ff ff       	call   f0100176 <_panic>

f0104153 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocatino size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
{
f0104153:	55                   	push   %ebp
f0104154:	89 e5                	mov    %esp,%ebp
f0104156:	83 ec 28             	sub    $0x28,%esp
	LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x",start_virtual_address));
	//calculate the required page tables
	uint32 number_of_tables = 0;
f0104159:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	long i = 0;
f0104160:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);
f0104167:	8b 45 0c             	mov    0xc(%ebp),%eax
f010416a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010416d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104170:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104175:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f0104178:	eb 27                	jmp    f01041a1 <calculate_required_frames+0x4e>
	{
		uint32 *ptr_page_table;
		get_page_table(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table);
f010417a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010417d:	83 ec 04             	sub    $0x4,%esp
f0104180:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0104183:	52                   	push   %edx
f0104184:	50                   	push   %eax
f0104185:	ff 75 08             	pushl  0x8(%ebp)
f0104188:	e8 88 f9 ff ff       	call   f0103b15 <get_page_table>
f010418d:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table == 0)
f0104190:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104193:	85 c0                	test   %eax,%eax
f0104195:	75 03                	jne    f010419a <calculate_required_frames+0x47>
		{
			(number_of_tables)++;
f0104197:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 number_of_tables = 0;

	long i = 0;
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f010419a:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01041a1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a4:	8b 45 10             	mov    0x10(%ebp),%eax
f01041a7:	01 d0                	add    %edx,%eax
f01041a9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01041ac:	77 cc                	ja     f010417a <calculate_required_frames+0x27>
			(number_of_tables)++;
		}
	}

	//calc the required page frames
	uint32 number_of_pages = 0;
f01041ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f01041b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01041bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01041be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01041c6:	eb 24                	jmp    f01041ec <calculate_required_frames+0x99>
	{
		uint32 *ptr_page_table;
		if (get_frame_info(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table) == 0)
f01041c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041cb:	83 ec 04             	sub    $0x4,%esp
f01041ce:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01041d1:	52                   	push   %edx
f01041d2:	50                   	push   %eax
f01041d3:	ff 75 08             	pushl  0x8(%ebp)
f01041d6:	e8 ee fb ff ff       	call   f0103dc9 <get_frame_info>
f01041db:	83 c4 10             	add    $0x10,%esp
f01041de:	85 c0                	test   %eax,%eax
f01041e0:	75 03                	jne    f01041e5 <calculate_required_frames+0x92>
		{
			(number_of_pages)++;
f01041e2:	ff 45 ec             	incl   -0x14(%ebp)

	//calc the required page frames
	uint32 number_of_pages = 0;
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01041e5:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01041ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041ef:	8b 45 10             	mov    0x10(%ebp),%eax
f01041f2:	01 d0                	add    %edx,%eax
f01041f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01041f7:	77 cf                	ja     f01041c8 <calculate_required_frames+0x75>
		}
	}

	//return total number of frames
	LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	return number_of_tables+number_of_pages;
f01041f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041ff:	01 d0                	add    %edx,%eax
}
f0104201:	c9                   	leave  
f0104202:	c3                   	ret    

f0104203 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0104203:	55                   	push   %ebp
f0104204:	89 e5                	mov    %esp,%ebp
f0104206:	57                   	push   %edi
f0104207:	56                   	push   %esi
f0104208:	53                   	push   %ebx
f0104209:	83 ec 20             	sub    $0x20,%esp
	//DETECTING LOOP inside the list
	//================================

	//calculate the free frames from the free frame list
	struct Frame_Info *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010420c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0104213:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f010421a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	LIST_FOREACH(ptr, &free_frame_list)
f0104221:	a1 b4 16 55 f0       	mov    0xf05516b4,%eax
f0104226:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104229:	eb 1a                	jmp    f0104245 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010422b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010422e:	8a 40 14             	mov    0x14(%eax),%al
f0104231:	84 c0                	test   %al,%al
f0104233:	74 05                	je     f010423a <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0104235:	ff 45 e8             	incl   -0x18(%ebp)
f0104238:	eb 03                	jmp    f010423d <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010423a:	ff 45 ec             	incl   -0x14(%ebp)
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;


	LIST_FOREACH(ptr, &free_frame_list)
f010423d:	a1 bc 16 55 f0       	mov    0xf05516bc,%eax
f0104242:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104245:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104249:	74 07                	je     f0104252 <calculate_available_frames+0x4f>
f010424b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010424e:	8b 00                	mov    (%eax),%eax
f0104250:	eb 05                	jmp    f0104257 <calculate_available_frames+0x54>
f0104252:	b8 00 00 00 00       	mov    $0x0,%eax
f0104257:	a3 bc 16 55 f0       	mov    %eax,0xf05516bc
f010425c:	a1 bc 16 55 f0       	mov    0xf05516bc,%eax
f0104261:	85 c0                	test   %eax,%eax
f0104263:	75 c6                	jne    f010422b <calculate_available_frames+0x28>
f0104265:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104269:	75 c0                	jne    f010422b <calculate_available_frames+0x28>
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f010426b:	a1 a0 16 55 f0       	mov    0xf05516a0,%eax
f0104270:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104273:	eb 0b                	jmp    f0104280 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0104275:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f0104278:	a1 a8 16 55 f0       	mov    0xf05516a8,%eax
f010427d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104284:	74 07                	je     f010428d <calculate_available_frames+0x8a>
f0104286:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104289:	8b 00                	mov    (%eax),%eax
f010428b:	eb 05                	jmp    f0104292 <calculate_available_frames+0x8f>
f010428d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104292:	a3 a8 16 55 f0       	mov    %eax,0xf05516a8
f0104297:	a1 a8 16 55 f0       	mov    0xf05516a8,%eax
f010429c:	85 c0                	test   %eax,%eax
f010429e:	75 d5                	jne    f0104275 <calculate_available_frames+0x72>
f01042a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01042a4:	75 cf                	jne    f0104275 <calculate_available_frames+0x72>
		totalModified++ ;
	}


	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01042a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01042a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01042ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042af:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01042b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01042b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01042b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01042bb:	89 c3                	mov    %eax,%ebx
f01042bd:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01042c0:	ba 03 00 00 00       	mov    $0x3,%edx
f01042c5:	89 df                	mov    %ebx,%edi
f01042c7:	89 c6                	mov    %eax,%esi
f01042c9:	89 d1                	mov    %edx,%ecx
f01042cb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01042cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01042d0:	83 c4 20             	add    $0x20,%esp
f01042d3:	5b                   	pop    %ebx
f01042d4:	5e                   	pop    %esi
f01042d5:	5f                   	pop    %edi
f01042d6:	5d                   	pop    %ebp
f01042d7:	c2 04 00             	ret    $0x4

f01042da <calculate_free_frames>:

//2018
// calculate_free_frames:
uint32 calculate_free_frames()
{
f01042da:	55                   	push   %ebp
f01042db:	89 e5                	mov    %esp,%ebp
	return LIST_SIZE(&free_frame_list);
f01042dd:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
}
f01042e2:	5d                   	pop    %ebp
f01042e3:	c3                   	ret    

f01042e4 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f01042e4:	55                   	push   %ebp
f01042e5:	89 e5                	mov    %esp,%ebp
f01042e7:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01042ea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01042f1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01042f8:	eb 21                	jmp    f010431b <env_page_ws_get_size+0x37>
f01042fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01042fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0104300:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104303:	89 d0                	mov    %edx,%eax
f0104305:	01 c0                	add    %eax,%eax
f0104307:	01 d0                	add    %edx,%eax
f0104309:	c1 e0 02             	shl    $0x2,%eax
f010430c:	01 c8                	add    %ecx,%eax
f010430e:	8a 40 04             	mov    0x4(%eax),%al
f0104311:	84 c0                	test   %al,%al
f0104313:	75 03                	jne    f0104318 <env_page_ws_get_size+0x34>
f0104315:	ff 45 f8             	incl   -0x8(%ebp)
f0104318:	ff 45 fc             	incl   -0x4(%ebp)
f010431b:	8b 45 08             	mov    0x8(%ebp),%eax
f010431e:	8b 50 74             	mov    0x74(%eax),%edx
f0104321:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104324:	39 c2                	cmp    %eax,%edx
f0104326:	77 d2                	ja     f01042fa <env_page_ws_get_size+0x16>
	return counter;
f0104328:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010432b:	c9                   	leave  
f010432c:	c3                   	ret    

f010432d <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010432d:	55                   	push   %ebp
f010432e:	89 e5                	mov    %esp,%ebp
f0104330:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0104333:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f010433a:	eb 4c                	jmp    f0104388 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010433c:	8b 45 08             	mov    0x8(%ebp),%eax
f010433f:	8b 48 78             	mov    0x78(%eax),%ecx
f0104342:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104345:	89 d0                	mov    %edx,%eax
f0104347:	01 c0                	add    %eax,%eax
f0104349:	01 d0                	add    %edx,%eax
f010434b:	c1 e0 02             	shl    $0x2,%eax
f010434e:	01 c8                	add    %ecx,%eax
f0104350:	8b 00                	mov    (%eax),%eax
f0104352:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104355:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104358:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010435d:	89 c2                	mov    %eax,%edx
f010435f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104362:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104365:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104368:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010436d:	39 c2                	cmp    %eax,%edx
f010436f:	75 14                	jne    f0104385 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0104371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104374:	83 ec 08             	sub    $0x8,%esp
f0104377:	50                   	push   %eax
f0104378:	ff 75 08             	pushl  0x8(%ebp)
f010437b:	e8 bf 00 00 00       	call   f010443f <env_page_ws_clear_entry>
f0104380:	83 c4 10             	add    $0x10,%esp
			break;
f0104383:	eb 10                	jmp    f0104395 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0104385:	ff 45 f4             	incl   -0xc(%ebp)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	8b 50 74             	mov    0x74(%eax),%edx
f010438e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104391:	39 c2                	cmp    %eax,%edx
f0104393:	77 a7                	ja     f010433c <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0104395:	90                   	nop
f0104396:	c9                   	leave  
f0104397:	c3                   	ret    

f0104398 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0104398:	55                   	push   %ebp
f0104399:	89 e5                	mov    %esp,%ebp
f010439b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f010439e:	8b 45 08             	mov    0x8(%ebp),%eax
f01043a1:	8b 40 74             	mov    0x74(%eax),%eax
f01043a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01043a7:	77 19                	ja     f01043c2 <env_page_ws_set_entry+0x2a>
f01043a9:	68 2c 9a 11 f0       	push   $0xf0119a2c
f01043ae:	68 62 9a 11 f0       	push   $0xf0119a62
f01043b3:	68 b6 03 00 00       	push   $0x3b6
f01043b8:	68 15 99 11 f0       	push   $0xf0119915
f01043bd:	e8 b4 bd ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01043c2:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01043c9:	76 19                	jbe    f01043e4 <env_page_ws_set_entry+0x4c>
f01043cb:	68 78 9a 11 f0       	push   $0xf0119a78
f01043d0:	68 62 9a 11 f0       	push   $0xf0119a62
f01043d5:	68 b7 03 00 00       	push   $0x3b7
f01043da:	68 15 99 11 f0       	push   $0xf0119915
f01043df:	e8 92 bd ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01043e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e7:	8b 48 78             	mov    0x78(%eax),%ecx
f01043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043ed:	89 d0                	mov    %edx,%eax
f01043ef:	01 c0                	add    %eax,%eax
f01043f1:	01 d0                	add    %edx,%eax
f01043f3:	c1 e0 02             	shl    $0x2,%eax
f01043f6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01043f9:	8b 45 10             	mov    0x10(%ebp),%eax
f01043fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104402:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104407:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0104409:	8b 45 08             	mov    0x8(%ebp),%eax
f010440c:	8b 48 78             	mov    0x78(%eax),%ecx
f010440f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104412:	89 d0                	mov    %edx,%eax
f0104414:	01 c0                	add    %eax,%eax
f0104416:	01 d0                	add    %edx,%eax
f0104418:	c1 e0 02             	shl    $0x2,%eax
f010441b:	01 c8                	add    %ecx,%eax
f010441d:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0104421:	8b 45 08             	mov    0x8(%ebp),%eax
f0104424:	8b 48 78             	mov    0x78(%eax),%ecx
f0104427:	8b 55 0c             	mov    0xc(%ebp),%edx
f010442a:	89 d0                	mov    %edx,%eax
f010442c:	01 c0                	add    %eax,%eax
f010442e:	01 d0                	add    %edx,%eax
f0104430:	c1 e0 02             	shl    $0x2,%eax
f0104433:	01 c8                	add    %ecx,%eax
f0104435:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010443c:	90                   	nop
}
f010443d:	c9                   	leave  
f010443e:	c3                   	ret    

f010443f <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010443f:	55                   	push   %ebp
f0104440:	89 e5                	mov    %esp,%ebp
f0104442:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104445:	8b 45 08             	mov    0x8(%ebp),%eax
f0104448:	8b 40 74             	mov    0x74(%eax),%eax
f010444b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010444e:	77 19                	ja     f0104469 <env_page_ws_clear_entry+0x2a>
f0104450:	68 ac 9a 11 f0       	push   $0xf0119aac
f0104455:	68 62 9a 11 f0       	push   $0xf0119a62
f010445a:	68 c2 03 00 00       	push   $0x3c2
f010445f:	68 15 99 11 f0       	push   $0xf0119915
f0104464:	e8 0d bd ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0104469:	8b 45 08             	mov    0x8(%ebp),%eax
f010446c:	8b 48 78             	mov    0x78(%eax),%ecx
f010446f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104472:	89 d0                	mov    %edx,%eax
f0104474:	01 c0                	add    %eax,%eax
f0104476:	01 d0                	add    %edx,%eax
f0104478:	c1 e0 02             	shl    $0x2,%eax
f010447b:	01 c8                	add    %ecx,%eax
f010447d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0104483:	8b 45 08             	mov    0x8(%ebp),%eax
f0104486:	8b 48 78             	mov    0x78(%eax),%ecx
f0104489:	8b 55 0c             	mov    0xc(%ebp),%edx
f010448c:	89 d0                	mov    %edx,%eax
f010448e:	01 c0                	add    %eax,%eax
f0104490:	01 d0                	add    %edx,%eax
f0104492:	c1 e0 02             	shl    $0x2,%eax
f0104495:	01 c8                	add    %ecx,%eax
f0104497:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f010449b:	8b 45 08             	mov    0x8(%ebp),%eax
f010449e:	8b 48 78             	mov    0x78(%eax),%ecx
f01044a1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044a4:	89 d0                	mov    %edx,%eax
f01044a6:	01 c0                	add    %eax,%eax
f01044a8:	01 d0                	add    %edx,%eax
f01044aa:	c1 e0 02             	shl    $0x2,%eax
f01044ad:	01 c8                	add    %ecx,%eax
f01044af:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01044b6:	90                   	nop
f01044b7:	c9                   	leave  
f01044b8:	c3                   	ret    

f01044b9 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01044b9:	55                   	push   %ebp
f01044ba:	89 e5                	mov    %esp,%ebp
f01044bc:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01044bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c2:	8b 40 74             	mov    0x74(%eax),%eax
f01044c5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01044c8:	77 19                	ja     f01044e3 <env_page_ws_get_virtual_address+0x2a>
f01044ca:	68 ac 9a 11 f0       	push   $0xf0119aac
f01044cf:	68 62 9a 11 f0       	push   $0xf0119a62
f01044d4:	68 ca 03 00 00       	push   $0x3ca
f01044d9:	68 15 99 11 f0       	push   $0xf0119915
f01044de:	e8 93 bc ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01044e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e6:	8b 48 78             	mov    0x78(%eax),%ecx
f01044e9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ec:	89 d0                	mov    %edx,%eax
f01044ee:	01 c0                	add    %eax,%eax
f01044f0:	01 d0                	add    %edx,%eax
f01044f2:	c1 e0 02             	shl    $0x2,%eax
f01044f5:	01 c8                	add    %ecx,%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01044fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0104504:	c9                   	leave  
f0104505:	c3                   	ret    

f0104506 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104506:	55                   	push   %ebp
f0104507:	89 e5                	mov    %esp,%ebp
f0104509:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010450c:	8b 45 08             	mov    0x8(%ebp),%eax
f010450f:	8b 40 74             	mov    0x74(%eax),%eax
f0104512:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104515:	77 19                	ja     f0104530 <env_page_ws_get_time_stamp+0x2a>
f0104517:	68 ac 9a 11 f0       	push   $0xf0119aac
f010451c:	68 62 9a 11 f0       	push   $0xf0119a62
f0104521:	68 d0 03 00 00       	push   $0x3d0
f0104526:	68 15 99 11 f0       	push   $0xf0119915
f010452b:	e8 46 bc ff ff       	call   f0100176 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0104530:	8b 45 08             	mov    0x8(%ebp),%eax
f0104533:	8b 48 78             	mov    0x78(%eax),%ecx
f0104536:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104539:	89 d0                	mov    %edx,%eax
f010453b:	01 c0                	add    %eax,%eax
f010453d:	01 d0                	add    %edx,%eax
f010453f:	c1 e0 02             	shl    $0x2,%eax
f0104542:	01 c8                	add    %ecx,%eax
f0104544:	8b 40 08             	mov    0x8(%eax),%eax
}
f0104547:	c9                   	leave  
f0104548:	c3                   	ret    

f0104549 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104549:	55                   	push   %ebp
f010454a:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010454c:	8b 45 08             	mov    0x8(%ebp),%eax
f010454f:	8b 48 78             	mov    0x78(%eax),%ecx
f0104552:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104555:	89 d0                	mov    %edx,%eax
f0104557:	01 c0                	add    %eax,%eax
f0104559:	01 d0                	add    %edx,%eax
f010455b:	c1 e0 02             	shl    $0x2,%eax
f010455e:	01 c8                	add    %ecx,%eax
f0104560:	8a 40 04             	mov    0x4(%eax),%al
f0104563:	0f b6 c0             	movzbl %al,%eax
}
f0104566:	5d                   	pop    %ebp
f0104567:	c3                   	ret    

f0104568 <env_page_ws_print>:

void env_page_ws_print(struct Env *curenv)
{
f0104568:	55                   	push   %ebp
f0104569:	89 e5                	mov    %esp,%ebp
f010456b:	83 ec 28             	sub    $0x28,%esp
	uint32 i;
	cprintf("PAGE WS:\n");
f010456e:	83 ec 0c             	sub    $0xc,%esp
f0104571:	68 e4 9a 11 f0       	push   $0xf0119ae4
f0104576:	e8 1b 28 00 00       	call   f0106d96 <cprintf>
f010457b:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f010457e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104585:	e9 4e 01 00 00       	jmp    f01046d8 <env_page_ws_print+0x170>
	{
		if (curenv->ptr_pageWorkingSet[i].empty)
f010458a:	8b 45 08             	mov    0x8(%ebp),%eax
f010458d:	8b 48 78             	mov    0x78(%eax),%ecx
f0104590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104593:	89 d0                	mov    %edx,%eax
f0104595:	01 c0                	add    %eax,%eax
f0104597:	01 d0                	add    %edx,%eax
f0104599:	c1 e0 02             	shl    $0x2,%eax
f010459c:	01 c8                	add    %ecx,%eax
f010459e:	8a 40 04             	mov    0x4(%eax),%al
f01045a1:	84 c0                	test   %al,%al
f01045a3:	74 43                	je     f01045e8 <env_page_ws_print+0x80>
		{
			cprintf("EMPTY LOCATION");
f01045a5:	83 ec 0c             	sub    $0xc,%esp
f01045a8:	68 ee 9a 11 f0       	push   $0xf0119aee
f01045ad:	e8 e4 27 00 00       	call   f0106d96 <cprintf>
f01045b2:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->page_last_WS_index )
f01045b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01045b8:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01045be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01045c1:	75 10                	jne    f01045d3 <env_page_ws_print+0x6b>
			{
				cprintf("		<--");
f01045c3:	83 ec 0c             	sub    $0xc,%esp
f01045c6:	68 fd 9a 11 f0       	push   $0xf0119afd
f01045cb:	e8 c6 27 00 00       	call   f0106d96 <cprintf>
f01045d0:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01045d3:	83 ec 0c             	sub    $0xc,%esp
f01045d6:	68 03 9b 11 f0       	push   $0xf0119b03
f01045db:	e8 b6 27 00 00       	call   f0106d96 <cprintf>
f01045e0:	83 c4 10             	add    $0x10,%esp
			continue;
f01045e3:	e9 ed 00 00 00       	jmp    f01046d5 <env_page_ws_print+0x16d>
		}
		uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f01045e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045eb:	8b 48 78             	mov    0x78(%eax),%ecx
f01045ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f1:	89 d0                	mov    %edx,%eax
f01045f3:	01 c0                	add    %eax,%eax
f01045f5:	01 d0                	add    %edx,%eax
f01045f7:	c1 e0 02             	shl    $0x2,%eax
f01045fa:	01 c8                	add    %ecx,%eax
f01045fc:	8b 00                	mov    (%eax),%eax
f01045fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f0104601:	8b 45 08             	mov    0x8(%ebp),%eax
f0104604:	8b 48 78             	mov    0x78(%eax),%ecx
f0104607:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010460a:	89 d0                	mov    %edx,%eax
f010460c:	01 c0                	add    %eax,%eax
f010460e:	01 d0                	add    %edx,%eax
f0104610:	c1 e0 02             	shl    $0x2,%eax
f0104613:	01 c8                	add    %ecx,%eax
f0104615:	8b 40 08             	mov    0x8(%eax),%eax
f0104618:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 perm = pt_get_page_permissions(curenv, virtual_address) ;
f010461b:	83 ec 08             	sub    $0x8,%esp
f010461e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104621:	ff 75 08             	pushl  0x8(%ebp)
f0104624:	e8 e3 09 00 00       	call   f010500c <pt_get_page_permissions>
f0104629:	83 c4 10             	add    $0x10,%esp
f010462c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010462f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104632:	83 e0 40             	and    $0x40,%eax
f0104635:	85 c0                	test   %eax,%eax
f0104637:	0f 95 c0             	setne  %al
f010463a:	88 45 e7             	mov    %al,-0x19(%ebp)
		char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010463d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104640:	83 e0 20             	and    $0x20,%eax
f0104643:	85 c0                	test   %eax,%eax
f0104645:	0f 95 c0             	setne  %al
f0104648:	88 45 e6             	mov    %al,-0x1a(%ebp)
		char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010464b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010464e:	25 00 02 00 00       	and    $0x200,%eax
f0104653:	85 c0                	test   %eax,%eax
f0104655:	0f 95 c0             	setne  %al
f0104658:	88 45 e5             	mov    %al,-0x1b(%ebp)


		cprintf("address @ %d = %x",i, curenv->ptr_pageWorkingSet[i].virtual_address);
f010465b:	8b 45 08             	mov    0x8(%ebp),%eax
f010465e:	8b 48 78             	mov    0x78(%eax),%ecx
f0104661:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104664:	89 d0                	mov    %edx,%eax
f0104666:	01 c0                	add    %eax,%eax
f0104668:	01 d0                	add    %edx,%eax
f010466a:	c1 e0 02             	shl    $0x2,%eax
f010466d:	01 c8                	add    %ecx,%eax
f010466f:	8b 00                	mov    (%eax),%eax
f0104671:	83 ec 04             	sub    $0x4,%esp
f0104674:	50                   	push   %eax
f0104675:	ff 75 f4             	pushl  -0xc(%ebp)
f0104678:	68 05 9b 11 f0       	push   $0xf0119b05
f010467d:	e8 14 27 00 00       	call   f0106d96 <cprintf>
f0104682:	83 c4 10             	add    $0x10,%esp

		cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp) ;
f0104685:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f0104689:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f010468d:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f0104691:	83 ec 0c             	sub    $0xc,%esp
f0104694:	ff 75 ec             	pushl  -0x14(%ebp)
f0104697:	51                   	push   %ecx
f0104698:	52                   	push   %edx
f0104699:	50                   	push   %eax
f010469a:	68 18 9b 11 f0       	push   $0xf0119b18
f010469f:	e8 f2 26 00 00       	call   f0106d96 <cprintf>
f01046a4:	83 c4 20             	add    $0x20,%esp

		if(i==curenv->page_last_WS_index )
f01046a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046aa:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01046b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046b3:	75 10                	jne    f01046c5 <env_page_ws_print+0x15d>
		{
			cprintf(" <--");
f01046b5:	83 ec 0c             	sub    $0xc,%esp
f01046b8:	68 4f 9b 11 f0       	push   $0xf0119b4f
f01046bd:	e8 d4 26 00 00       	call   f0106d96 <cprintf>
f01046c2:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01046c5:	83 ec 0c             	sub    $0xc,%esp
f01046c8:	68 03 9b 11 f0       	push   $0xf0119b03
f01046cd:	e8 c4 26 00 00       	call   f0106d96 <cprintf>
f01046d2:	83 c4 10             	add    $0x10,%esp

void env_page_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("PAGE WS:\n");
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f01046d5:	ff 45 f4             	incl   -0xc(%ebp)
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	8b 40 74             	mov    0x74(%eax),%eax
f01046de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046e1:	0f 87 a3 fe ff ff    	ja     f010458a <env_page_ws_print+0x22>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01046e7:	90                   	nop
f01046e8:	c9                   	leave  
f01046e9:	c3                   	ret    

f01046ea <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *curenv)
{
f01046ea:	55                   	push   %ebp
f01046eb:	89 e5                	mov    %esp,%ebp
f01046ed:	53                   	push   %ebx
f01046ee:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01046f1:	83 ec 0c             	sub    $0xc,%esp
f01046f4:	68 54 9b 11 f0       	push   $0xf0119b54
f01046f9:	e8 98 26 00 00       	call   f0106d96 <cprintf>
f01046fe:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0104701:	83 ec 0c             	sub    $0xc,%esp
f0104704:	68 89 9b 11 f0       	push   $0xf0119b89
f0104709:	e8 88 26 00 00       	call   f0106d96 <cprintf>
f010470e:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104718:	e9 0c 01 00 00       	jmp    f0104829 <env_table_ws_print+0x13f>
	{
		if (curenv->__ptr_tws[i].empty)
f010471d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104720:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104723:	89 d0                	mov    %edx,%eax
f0104725:	01 c0                	add    %eax,%eax
f0104727:	01 d0                	add    %edx,%eax
f0104729:	c1 e0 02             	shl    $0x2,%eax
f010472c:	01 c8                	add    %ecx,%eax
f010472e:	83 e8 80             	sub    $0xffffff80,%eax
f0104731:	8a 00                	mov    (%eax),%al
f0104733:	84 c0                	test   %al,%al
f0104735:	74 43                	je     f010477a <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0104737:	83 ec 0c             	sub    $0xc,%esp
f010473a:	68 ee 9a 11 f0       	push   $0xf0119aee
f010473f:	e8 52 26 00 00       	call   f0106d96 <cprintf>
f0104744:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->table_last_WS_index )
f0104747:	8b 45 08             	mov    0x8(%ebp),%eax
f010474a:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104750:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104753:	75 10                	jne    f0104765 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0104755:	83 ec 0c             	sub    $0xc,%esp
f0104758:	68 fd 9a 11 f0       	push   $0xf0119afd
f010475d:	e8 34 26 00 00       	call   f0106d96 <cprintf>
f0104762:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0104765:	83 ec 0c             	sub    $0xc,%esp
f0104768:	68 03 9b 11 f0       	push   $0xf0119b03
f010476d:	e8 24 26 00 00       	call   f0106d96 <cprintf>
f0104772:	83 c4 10             	add    $0x10,%esp
			continue;
f0104775:	e9 ac 00 00 00       	jmp    f0104826 <env_table_ws_print+0x13c>
		}
		uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f010477a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010477d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104780:	89 d0                	mov    %edx,%eax
f0104782:	01 c0                	add    %eax,%eax
f0104784:	01 d0                	add    %edx,%eax
f0104786:	c1 e0 02             	shl    $0x2,%eax
f0104789:	01 c8                	add    %ecx,%eax
f010478b:	83 c0 7c             	add    $0x7c,%eax
f010478e:	8b 00                	mov    (%eax),%eax
f0104790:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, curenv->__ptr_tws[i].virtual_address);
f0104793:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104796:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104799:	89 d0                	mov    %edx,%eax
f010479b:	01 c0                	add    %eax,%eax
f010479d:	01 d0                	add    %edx,%eax
f010479f:	c1 e0 02             	shl    $0x2,%eax
f01047a2:	01 c8                	add    %ecx,%eax
f01047a4:	83 c0 7c             	add    $0x7c,%eax
f01047a7:	8b 00                	mov    (%eax),%eax
f01047a9:	83 ec 04             	sub    $0x4,%esp
f01047ac:	50                   	push   %eax
f01047ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01047b0:	68 94 9b 11 f0       	push   $0xf0119b94
f01047b5:	e8 dc 25 00 00       	call   f0106d96 <cprintf>
f01047ba:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(curenv, virtual_address), curenv->__ptr_tws[i].time_stamp);
f01047bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047c3:	89 d0                	mov    %edx,%eax
f01047c5:	01 c0                	add    %eax,%eax
f01047c7:	01 d0                	add    %edx,%eax
f01047c9:	c1 e0 02             	shl    $0x2,%eax
f01047cc:	01 c8                	add    %ecx,%eax
f01047ce:	05 84 00 00 00       	add    $0x84,%eax
f01047d3:	8b 18                	mov    (%eax),%ebx
f01047d5:	83 ec 08             	sub    $0x8,%esp
f01047d8:	ff 75 f0             	pushl  -0x10(%ebp)
f01047db:	ff 75 08             	pushl  0x8(%ebp)
f01047de:	e8 29 04 00 00       	call   f0104c0c <pd_is_table_used>
f01047e3:	83 c4 10             	add    $0x10,%esp
f01047e6:	83 ec 04             	sub    $0x4,%esp
f01047e9:	53                   	push   %ebx
f01047ea:	50                   	push   %eax
f01047eb:	68 ac 9b 11 f0       	push   $0xf0119bac
f01047f0:	e8 a1 25 00 00       	call   f0106d96 <cprintf>
f01047f5:	83 c4 10             	add    $0x10,%esp
		if(i==curenv->table_last_WS_index )
f01047f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01047fb:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104801:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104804:	75 10                	jne    f0104816 <env_table_ws_print+0x12c>
		{
			cprintf(" <--");
f0104806:	83 ec 0c             	sub    $0xc,%esp
f0104809:	68 4f 9b 11 f0       	push   $0xf0119b4f
f010480e:	e8 83 25 00 00       	call   f0106d96 <cprintf>
f0104813:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0104816:	83 ec 0c             	sub    $0xc,%esp
f0104819:	68 03 9b 11 f0       	push   $0xf0119b03
f010481e:	e8 73 25 00 00       	call   f0106d96 <cprintf>
f0104823:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104826:	ff 45 f4             	incl   -0xc(%ebp)
f0104829:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010482d:	0f 86 ea fe ff ff    	jbe    f010471d <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0104833:	90                   	nop
f0104834:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104837:	c9                   	leave  
f0104838:	c3                   	ret    

f0104839 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0104839:	55                   	push   %ebp
f010483a:	89 e5                	mov    %esp,%ebp
f010483c:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010483f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0104846:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010484d:	eb 20                	jmp    f010486f <env_table_ws_get_size+0x36>
f010484f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104852:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104855:	89 d0                	mov    %edx,%eax
f0104857:	01 c0                	add    %eax,%eax
f0104859:	01 d0                	add    %edx,%eax
f010485b:	c1 e0 02             	shl    $0x2,%eax
f010485e:	01 c8                	add    %ecx,%eax
f0104860:	83 e8 80             	sub    $0xffffff80,%eax
f0104863:	8a 00                	mov    (%eax),%al
f0104865:	84 c0                	test   %al,%al
f0104867:	75 03                	jne    f010486c <env_table_ws_get_size+0x33>
f0104869:	ff 45 f8             	incl   -0x8(%ebp)
f010486c:	ff 45 fc             	incl   -0x4(%ebp)
f010486f:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0104873:	7e da                	jle    f010484f <env_table_ws_get_size+0x16>
	return counter;
f0104875:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104878:	c9                   	leave  
f0104879:	c3                   	ret    

f010487a <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010487a:	55                   	push   %ebp
f010487b:	89 e5                	mov    %esp,%ebp
f010487d:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0104880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0104887:	eb 4c                	jmp    f01048d5 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0104889:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010488c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010488f:	89 d0                	mov    %edx,%eax
f0104891:	01 c0                	add    %eax,%eax
f0104893:	01 d0                	add    %edx,%eax
f0104895:	c1 e0 02             	shl    $0x2,%eax
f0104898:	01 c8                	add    %ecx,%eax
f010489a:	83 c0 7c             	add    $0x7c,%eax
f010489d:	8b 00                	mov    (%eax),%eax
f010489f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048a5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048aa:	89 c2                	mov    %eax,%edx
f01048ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01048af:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048b5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048ba:	39 c2                	cmp    %eax,%edx
f01048bc:	75 14                	jne    f01048d2 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01048be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c1:	83 ec 08             	sub    $0x8,%esp
f01048c4:	50                   	push   %eax
f01048c5:	ff 75 08             	pushl  0x8(%ebp)
f01048c8:	e8 b8 00 00 00       	call   f0104985 <env_table_ws_clear_entry>
f01048cd:	83 c4 10             	add    $0x10,%esp
			break;
f01048d0:	eb 09                	jmp    f01048db <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01048d2:	ff 45 f4             	incl   -0xc(%ebp)
f01048d5:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01048d9:	7e ae                	jle    f0104889 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01048db:	90                   	nop
f01048dc:	c9                   	leave  
f01048dd:	c3                   	ret    

f01048de <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01048de:	55                   	push   %ebp
f01048df:	89 e5                	mov    %esp,%ebp
f01048e1:	53                   	push   %ebx
f01048e2:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01048e5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01048e9:	76 19                	jbe    f0104904 <env_table_ws_set_entry+0x26>
f01048eb:	68 d0 9b 11 f0       	push   $0xf0119bd0
f01048f0:	68 62 9a 11 f0       	push   $0xf0119a62
f01048f5:	68 33 04 00 00       	push   $0x433
f01048fa:	68 15 99 11 f0       	push   $0xf0119915
f01048ff:	e8 72 b8 ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0104904:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010490b:	76 19                	jbe    f0104926 <env_table_ws_set_entry+0x48>
f010490d:	68 78 9a 11 f0       	push   $0xf0119a78
f0104912:	68 62 9a 11 f0       	push   $0xf0119a62
f0104917:	68 34 04 00 00       	push   $0x434
f010491c:	68 15 99 11 f0       	push   $0xf0119915
f0104921:	e8 50 b8 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0104926:	8b 45 10             	mov    0x10(%ebp),%eax
f0104929:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010492c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010492f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104934:	89 c1                	mov    %eax,%ecx
f0104936:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0104939:	8b 55 0c             	mov    0xc(%ebp),%edx
f010493c:	89 d0                	mov    %edx,%eax
f010493e:	01 c0                	add    %eax,%eax
f0104940:	01 d0                	add    %edx,%eax
f0104942:	c1 e0 02             	shl    $0x2,%eax
f0104945:	01 d8                	add    %ebx,%eax
f0104947:	83 c0 7c             	add    $0x7c,%eax
f010494a:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f010494c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010494f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104952:	89 d0                	mov    %edx,%eax
f0104954:	01 c0                	add    %eax,%eax
f0104956:	01 d0                	add    %edx,%eax
f0104958:	c1 e0 02             	shl    $0x2,%eax
f010495b:	01 c8                	add    %ecx,%eax
f010495d:	83 e8 80             	sub    $0xffffff80,%eax
f0104960:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0104963:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104966:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104969:	89 d0                	mov    %edx,%eax
f010496b:	01 c0                	add    %eax,%eax
f010496d:	01 d0                	add    %edx,%eax
f010496f:	c1 e0 02             	shl    $0x2,%eax
f0104972:	01 c8                	add    %ecx,%eax
f0104974:	05 84 00 00 00       	add    $0x84,%eax
f0104979:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010497f:	90                   	nop
}
f0104980:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104983:	c9                   	leave  
f0104984:	c3                   	ret    

f0104985 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0104985:	55                   	push   %ebp
f0104986:	89 e5                	mov    %esp,%ebp
f0104988:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010498b:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010498f:	76 19                	jbe    f01049aa <env_table_ws_clear_entry+0x25>
f0104991:	68 d0 9b 11 f0       	push   $0xf0119bd0
f0104996:	68 62 9a 11 f0       	push   $0xf0119a62
f010499b:	68 3f 04 00 00       	push   $0x43f
f01049a0:	68 15 99 11 f0       	push   $0xf0119915
f01049a5:	e8 cc b7 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01049aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049ad:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049b0:	89 d0                	mov    %edx,%eax
f01049b2:	01 c0                	add    %eax,%eax
f01049b4:	01 d0                	add    %edx,%eax
f01049b6:	c1 e0 02             	shl    $0x2,%eax
f01049b9:	01 c8                	add    %ecx,%eax
f01049bb:	83 c0 7c             	add    $0x7c,%eax
f01049be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01049c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049ca:	89 d0                	mov    %edx,%eax
f01049cc:	01 c0                	add    %eax,%eax
f01049ce:	01 d0                	add    %edx,%eax
f01049d0:	c1 e0 02             	shl    $0x2,%eax
f01049d3:	01 c8                	add    %ecx,%eax
f01049d5:	83 e8 80             	sub    $0xffffff80,%eax
f01049d8:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01049db:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049de:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049e1:	89 d0                	mov    %edx,%eax
f01049e3:	01 c0                	add    %eax,%eax
f01049e5:	01 d0                	add    %edx,%eax
f01049e7:	c1 e0 02             	shl    $0x2,%eax
f01049ea:	01 c8                	add    %ecx,%eax
f01049ec:	05 84 00 00 00       	add    $0x84,%eax
f01049f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01049f7:	90                   	nop
f01049f8:	c9                   	leave  
f01049f9:	c3                   	ret    

f01049fa <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01049fa:	55                   	push   %ebp
f01049fb:	89 e5                	mov    %esp,%ebp
f01049fd:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104a00:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a04:	76 19                	jbe    f0104a1f <env_table_ws_get_virtual_address+0x25>
f0104a06:	68 d0 9b 11 f0       	push   $0xf0119bd0
f0104a0b:	68 62 9a 11 f0       	push   $0xf0119a62
f0104a10:	68 47 04 00 00       	push   $0x447
f0104a15:	68 15 99 11 f0       	push   $0xf0119915
f0104a1a:	e8 57 b7 ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0104a1f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a22:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a25:	89 d0                	mov    %edx,%eax
f0104a27:	01 c0                	add    %eax,%eax
f0104a29:	01 d0                	add    %edx,%eax
f0104a2b:	c1 e0 02             	shl    $0x2,%eax
f0104a2e:	01 c8                	add    %ecx,%eax
f0104a30:	83 c0 7c             	add    $0x7c,%eax
f0104a33:	8b 00                	mov    (%eax),%eax
f0104a35:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a3b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0104a40:	c9                   	leave  
f0104a41:	c3                   	ret    

f0104a42 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104a42:	55                   	push   %ebp
f0104a43:	89 e5                	mov    %esp,%ebp
f0104a45:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104a48:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a4c:	76 19                	jbe    f0104a67 <env_table_ws_get_time_stamp+0x25>
f0104a4e:	68 d0 9b 11 f0       	push   $0xf0119bd0
f0104a53:	68 62 9a 11 f0       	push   $0xf0119a62
f0104a58:	68 4e 04 00 00       	push   $0x44e
f0104a5d:	68 15 99 11 f0       	push   $0xf0119915
f0104a62:	e8 0f b7 ff ff       	call   f0100176 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0104a67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a6d:	89 d0                	mov    %edx,%eax
f0104a6f:	01 c0                	add    %eax,%eax
f0104a71:	01 d0                	add    %edx,%eax
f0104a73:	c1 e0 02             	shl    $0x2,%eax
f0104a76:	01 c8                	add    %ecx,%eax
f0104a78:	05 84 00 00 00       	add    $0x84,%eax
f0104a7d:	8b 00                	mov    (%eax),%eax
}
f0104a7f:	c9                   	leave  
f0104a80:	c3                   	ret    

f0104a81 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104a81:	55                   	push   %ebp
f0104a82:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0104a84:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a87:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a8a:	89 d0                	mov    %edx,%eax
f0104a8c:	01 c0                	add    %eax,%eax
f0104a8e:	01 d0                	add    %edx,%eax
f0104a90:	c1 e0 02             	shl    $0x2,%eax
f0104a93:	01 c8                	add    %ecx,%eax
f0104a95:	83 e8 80             	sub    $0xffffff80,%eax
f0104a98:	8a 00                	mov    (%eax),%al
f0104a9a:	0f b6 c0             	movzbl %al,%eax
}
f0104a9d:	5d                   	pop    %ebp
f0104a9e:	c3                   	ret    

f0104a9f <addTableToTableWorkingSet>:

void addTableToTableWorkingSet(struct Env *e, uint32 tableAddress)
{
f0104a9f:	55                   	push   %ebp
f0104aa0:	89 e5                	mov    %esp,%ebp
f0104aa2:	83 ec 10             	sub    $0x10,%esp
	tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE*1024);
f0104aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104aa8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104aab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104aae:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104ab3:	89 45 0c             	mov    %eax,0xc(%ebp)
	e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f0104ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ab9:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104ac2:	89 d0                	mov    %edx,%eax
f0104ac4:	01 c0                	add    %eax,%eax
f0104ac6:	01 d0                	add    %edx,%eax
f0104ac8:	c1 e0 02             	shl    $0x2,%eax
f0104acb:	01 c8                	add    %ecx,%eax
f0104acd:	8d 50 7c             	lea    0x7c(%eax),%edx
f0104ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ad3:	89 02                	mov    %eax,(%edx)
	e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0104ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ad8:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104ade:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104ae1:	89 d0                	mov    %edx,%eax
f0104ae3:	01 c0                	add    %eax,%eax
f0104ae5:	01 d0                	add    %edx,%eax
f0104ae7:	c1 e0 02             	shl    $0x2,%eax
f0104aea:	01 c8                	add    %ecx,%eax
f0104aec:	83 e8 80             	sub    $0xffffff80,%eax
f0104aef:	c6 00 00             	movb   $0x0,(%eax)
	e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0104af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af5:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104afb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104afe:	89 d0                	mov    %edx,%eax
f0104b00:	01 c0                	add    %eax,%eax
f0104b02:	01 d0                	add    %edx,%eax
f0104b04:	c1 e0 02             	shl    $0x2,%eax
f0104b07:	01 c8                	add    %ecx,%eax
f0104b09:	05 84 00 00 00       	add    $0x84,%eax
f0104b0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//e->__ptr_tws[e->table_last_WS_index].time_stamp = time;

	e->table_last_WS_index ++;
f0104b14:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b17:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b1d:	8d 50 01             	lea    0x1(%eax),%edx
f0104b20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b23:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2c:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b32:	b9 32 00 00 00       	mov    $0x32,%ecx
f0104b37:	ba 00 00 00 00       	mov    $0x0,%edx
f0104b3c:	f7 f1                	div    %ecx
f0104b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b41:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
}
f0104b47:	90                   	nop
f0104b48:	c9                   	leave  
f0104b49:	c3                   	ret    

f0104b4a <bufferList_add_page>:
///****************************************************************************************///
///******************************* PAGE BUFFERING FUNCTIONS ******************************///
///****************************************************************************************///

void bufferList_add_page(struct Linked_List* bufferList,struct Frame_Info *ptr_frame_info)
{
f0104b4a:	55                   	push   %ebp
f0104b4b:	89 e5                	mov    %esp,%ebp

		LIST_INSERT_TAIL(bufferList, ptr_frame_info);
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	8b 50 04             	mov    0x4(%eax),%edx
f0104b53:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b56:	89 50 04             	mov    %edx,0x4(%eax)
f0104b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b5c:	8b 40 04             	mov    0x4(%eax),%eax
f0104b5f:	85 c0                	test   %eax,%eax
f0104b61:	74 0d                	je     f0104b70 <bufferList_add_page+0x26>
f0104b63:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b66:	8b 40 04             	mov    0x4(%eax),%eax
f0104b69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b6c:	89 10                	mov    %edx,(%eax)
f0104b6e:	eb 08                	jmp    f0104b78 <bufferList_add_page+0x2e>
f0104b70:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b76:	89 10                	mov    %edx,(%eax)
f0104b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b7b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b7e:	89 50 04             	mov    %edx,0x4(%eax)
f0104b81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b84:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104b8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b8d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104b90:	8d 50 01             	lea    0x1(%eax),%edx
f0104b93:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b96:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104b99:	90                   	nop
f0104b9a:	5d                   	pop    %ebp
f0104b9b:	c3                   	ret    

f0104b9c <bufferlist_remove_page>:
void bufferlist_remove_page(struct Linked_List* bufferList, struct Frame_Info *ptr_frame_info)
{
f0104b9c:	55                   	push   %ebp
f0104b9d:	89 e5                	mov    %esp,%ebp
	LIST_REMOVE(bufferList, ptr_frame_info);
f0104b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ba2:	8b 00                	mov    (%eax),%eax
f0104ba4:	85 c0                	test   %eax,%eax
f0104ba6:	74 10                	je     f0104bb8 <bufferlist_remove_page+0x1c>
f0104ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bab:	8b 00                	mov    (%eax),%eax
f0104bad:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bb0:	8b 52 04             	mov    0x4(%edx),%edx
f0104bb3:	89 50 04             	mov    %edx,0x4(%eax)
f0104bb6:	eb 0c                	jmp    f0104bc4 <bufferlist_remove_page+0x28>
f0104bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bbb:	8b 50 04             	mov    0x4(%eax),%edx
f0104bbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bc1:	89 50 04             	mov    %edx,0x4(%eax)
f0104bc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bc7:	8b 40 04             	mov    0x4(%eax),%eax
f0104bca:	85 c0                	test   %eax,%eax
f0104bcc:	74 0f                	je     f0104bdd <bufferlist_remove_page+0x41>
f0104bce:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bd1:	8b 40 04             	mov    0x4(%eax),%eax
f0104bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bd7:	8b 12                	mov    (%edx),%edx
f0104bd9:	89 10                	mov    %edx,(%eax)
f0104bdb:	eb 0a                	jmp    f0104be7 <bufferlist_remove_page+0x4b>
f0104bdd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104be0:	8b 10                	mov    (%eax),%edx
f0104be2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be5:	89 10                	mov    %edx,(%eax)
f0104be7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bf3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104c00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c06:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104c09:	90                   	nop
f0104c0a:	5d                   	pop    %ebp
f0104c0b:	c3                   	ret    

f0104c0c <pd_is_table_used>:

///============================================================================================
/// Dealing with page and page table entry flags

inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
{
f0104c0c:	55                   	push   %ebp
f0104c0d:	89 e5                	mov    %esp,%ebp
	return ( (ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0104c0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c12:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c15:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c18:	c1 ea 16             	shr    $0x16,%edx
f0104c1b:	c1 e2 02             	shl    $0x2,%edx
f0104c1e:	01 d0                	add    %edx,%eax
f0104c20:	8b 00                	mov    (%eax),%eax
f0104c22:	83 e0 20             	and    $0x20,%eax
f0104c25:	85 c0                	test   %eax,%eax
f0104c27:	0f 95 c0             	setne  %al
f0104c2a:	0f b6 c0             	movzbl %al,%eax
}
f0104c2d:	5d                   	pop    %ebp
f0104c2e:	c3                   	ret    

f0104c2f <pd_set_table_unused>:

inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
{
f0104c2f:	55                   	push   %ebp
f0104c30:	89 e5                	mov    %esp,%ebp
f0104c32:	83 ec 08             	sub    $0x8,%esp
	ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c3e:	c1 ea 16             	shr    $0x16,%edx
f0104c41:	c1 e2 02             	shl    $0x2,%edx
f0104c44:	01 c2                	add    %eax,%edx
f0104c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c49:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c4c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104c4f:	c1 e9 16             	shr    $0x16,%ecx
f0104c52:	c1 e1 02             	shl    $0x2,%ecx
f0104c55:	01 c8                	add    %ecx,%eax
f0104c57:	8b 00                	mov    (%eax),%eax
f0104c59:	83 e0 df             	and    $0xffffffdf,%eax
f0104c5c:	89 02                	mov    %eax,(%edx)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104c5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c61:	83 ec 08             	sub    $0x8,%esp
f0104c64:	50                   	push   %eax
f0104c65:	6a 00                	push   $0x0
f0104c67:	e8 a3 e2 ff ff       	call   f0102f0f <tlb_invalidate>
f0104c6c:	83 c4 10             	add    $0x10,%esp
}
f0104c6f:	90                   	nop
f0104c70:	c9                   	leave  
f0104c71:	c3                   	ret    

f0104c72 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104c72:	55                   	push   %ebp
f0104c73:	89 e5                	mov    %esp,%ebp
f0104c75:	83 ec 10             	sub    $0x10,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104c78:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	ptr_pgdir[PDX(virtual_address)] = 0 ;
f0104c81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c84:	c1 e8 16             	shr    $0x16,%eax
f0104c87:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104c8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c91:	01 d0                	add    %edx,%eax
f0104c93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104c99:	0f 20 d8             	mov    %cr3,%eax
f0104c9c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104c9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ca2:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104ca5:	90                   	nop
f0104ca6:	c9                   	leave  
f0104ca7:	c3                   	ret    

f0104ca8 <pt_set_page_permissions>:

extern int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

inline void pt_set_page_permissions(struct Env* ptr_env, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0104ca8:	55                   	push   %ebp
f0104ca9:	89 e5                	mov    %esp,%ebp
f0104cab:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104cae:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cb1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104cba:	c1 e8 16             	shr    $0x16,%eax
f0104cbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104cc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cc7:	01 d0                	add    %edx,%eax
f0104cc9:	8b 00                	mov    (%eax),%eax
f0104ccb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104cce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104cd1:	83 e0 01             	and    $0x1,%eax
f0104cd4:	85 c0                	test   %eax,%eax
f0104cd6:	0f 84 d6 00 00 00    	je     f0104db2 <pt_set_page_permissions+0x10a>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104cdc:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104ce3:	77 19                	ja     f0104cfe <pt_set_page_permissions+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104ce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ce8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104ced:	83 ec 0c             	sub    $0xc,%esp
f0104cf0:	50                   	push   %eax
f0104cf1:	e8 3f 74 00 00       	call   f010c135 <kheap_virtual_address>
f0104cf6:	83 c4 10             	add    $0x10,%esp
f0104cf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cfc:	eb 40                	jmp    f0104d3e <pt_set_page_permissions+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104cfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d06:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d0c:	c1 e8 0c             	shr    $0xc,%eax
f0104d0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104d12:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0104d17:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104d1a:	72 17                	jb     f0104d33 <pt_set_page_permissions+0x8b>
f0104d1c:	ff 75 e8             	pushl  -0x18(%ebp)
f0104d1f:	68 3c 99 11 f0       	push   $0xf011993c
f0104d24:	68 9f 04 00 00       	push   $0x49f
f0104d29:	68 15 99 11 f0       	push   $0xf0119915
f0104d2e:	e8 43 b4 ff ff       	call   f0100176 <_panic>
f0104d33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104d3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d41:	c1 e8 0c             	shr    $0xc,%eax
f0104d44:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d53:	01 c2                	add    %eax,%edx
f0104d55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d58:	c1 e8 0c             	shr    $0xc,%eax
f0104d5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d60:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d6a:	01 c8                	add    %ecx,%eax
f0104d6c:	8b 00                	mov    (%eax),%eax
f0104d6e:	0b 45 10             	or     0x10(%ebp),%eax
f0104d71:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104d73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d76:	c1 e8 0c             	shr    $0xc,%eax
f0104d79:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d88:	01 d0                	add    %edx,%eax
f0104d8a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104d8d:	c1 ea 0c             	shr    $0xc,%edx
f0104d90:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104d96:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104d9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104da0:	01 ca                	add    %ecx,%edx
f0104da2:	8b 12                	mov    (%edx),%edx
f0104da4:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104da7:	f7 d1                	not    %ecx
f0104da9:	21 ca                	and    %ecx,%edx
f0104dab:	89 10                	mov    %edx,(%eax)
f0104dad:	e9 e8 00 00 00       	jmp    f0104e9a <pt_set_page_permissions+0x1f2>

	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104db2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104db6:	0f 84 c7 00 00 00    	je     f0104e83 <pt_set_page_permissions+0x1db>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104dbc:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104dc1:	83 ec 04             	sub    $0x4,%esp
f0104dc4:	50                   	push   %eax
f0104dc5:	ff 75 0c             	pushl  0xc(%ebp)
f0104dc8:	ff 75 08             	pushl  0x8(%ebp)
f0104dcb:	e8 1c 6c 00 00       	call   f010b9ec <__pf_read_env_table>
f0104dd0:	83 c4 10             	add    $0x10,%esp
f0104dd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104dd6:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104dde:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104de2:	75 17                	jne    f0104dfb <pt_set_page_permissions+0x153>
			panic("pt_set_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f0104de4:	83 ec 04             	sub    $0x4,%esp
f0104de7:	68 04 9c 11 f0       	push   $0xf0119c04
f0104dec:	68 ad 04 00 00       	push   $0x4ad
f0104df1:	68 15 99 11 f0       	push   $0xf0119915
f0104df6:	e8 7b b3 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104dfe:	c1 e8 0c             	shr    $0xc,%eax
f0104e01:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e10:	01 c2                	add    %eax,%edx
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	c1 e8 0c             	shr    $0xc,%eax
f0104e18:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e1d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e27:	01 c8                	add    %ecx,%eax
f0104e29:	8b 00                	mov    (%eax),%eax
f0104e2b:	0b 45 10             	or     0x10(%ebp),%eax
f0104e2e:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104e30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e33:	c1 e8 0c             	shr    $0xc,%eax
f0104e36:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e45:	01 d0                	add    %edx,%eax
f0104e47:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e4a:	c1 ea 0c             	shr    $0xc,%edx
f0104e4d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104e53:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104e5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e5d:	01 ca                	add    %ecx,%edx
f0104e5f:	8b 12                	mov    (%edx),%edx
f0104e61:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104e64:	f7 d1                	not    %ecx
f0104e66:	21 ca                	and    %ecx,%edx
f0104e68:	89 10                	mov    %edx,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104e6a:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104e6f:	83 ec 04             	sub    $0x4,%esp
f0104e72:	50                   	push   %eax
f0104e73:	ff 75 0c             	pushl  0xc(%ebp)
f0104e76:	ff 75 08             	pushl  0x8(%ebp)
f0104e79:	e8 c9 6a 00 00       	call   f010b947 <__pf_write_env_table>
f0104e7e:	83 c4 10             	add    $0x10,%esp
f0104e81:	eb 17                	jmp    f0104e9a <pt_set_page_permissions+0x1f2>
	}
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104e83:	83 ec 04             	sub    $0x4,%esp
f0104e86:	68 80 9c 11 f0       	push   $0xf0119c80
f0104e8b:	68 b7 04 00 00       	push   $0x4b7
f0104e90:	68 15 99 11 f0       	push   $0xf0119915
f0104e95:	e8 dc b2 ff ff       	call   f0100176 <_panic>
	}

	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104e9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e9d:	83 ec 08             	sub    $0x8,%esp
f0104ea0:	50                   	push   %eax
f0104ea1:	6a 00                	push   $0x0
f0104ea3:	e8 67 e0 ff ff       	call   f0102f0f <tlb_invalidate>
f0104ea8:	83 c4 10             	add    $0x10,%esp
}
f0104eab:	90                   	nop
f0104eac:	c9                   	leave  
f0104ead:	c3                   	ret    

f0104eae <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104eae:	55                   	push   %ebp
f0104eaf:	89 e5                	mov    %esp,%ebp
f0104eb1:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104eb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104eb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104eba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ec0:	c1 e8 16             	shr    $0x16,%eax
f0104ec3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104eca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ecd:	01 d0                	add    %edx,%eax
f0104ecf:	8b 00                	mov    (%eax),%eax
f0104ed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ed7:	83 e0 01             	and    $0x1,%eax
f0104eda:	85 c0                	test   %eax,%eax
f0104edc:	0f 84 84 00 00 00    	je     f0104f66 <pt_clear_page_table_entry+0xb8>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104ee2:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104ee9:	77 19                	ja     f0104f04 <pt_clear_page_table_entry+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104eeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104eee:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104ef3:	83 ec 0c             	sub    $0xc,%esp
f0104ef6:	50                   	push   %eax
f0104ef7:	e8 39 72 00 00       	call   f010c135 <kheap_virtual_address>
f0104efc:	83 c4 10             	add    $0x10,%esp
f0104eff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f02:	eb 40                	jmp    f0104f44 <pt_clear_page_table_entry+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f07:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104f0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104f0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f12:	c1 e8 0c             	shr    $0xc,%eax
f0104f15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104f18:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f0104f1d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104f20:	72 17                	jb     f0104f39 <pt_clear_page_table_entry+0x8b>
f0104f22:	ff 75 e8             	pushl  -0x18(%ebp)
f0104f25:	68 3c 99 11 f0       	push   $0xf011993c
f0104f2a:	68 cd 04 00 00       	push   $0x4cd
f0104f2f:	68 15 99 11 f0       	push   $0xf0119915
f0104f34:	e8 3d b2 ff ff       	call   f0100176 <_panic>
f0104f39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f3c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104f41:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104f44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f47:	c1 e8 0c             	shr    $0xc,%eax
f0104f4a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104f4f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f59:	01 d0                	add    %edx,%eax
f0104f5b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f61:	e9 92 00 00 00       	jmp    f0104ff8 <pt_clear_page_table_entry+0x14a>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104f66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104f6a:	74 75                	je     f0104fe1 <pt_clear_page_table_entry+0x133>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory

		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104f6c:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104f71:	83 ec 04             	sub    $0x4,%esp
f0104f74:	50                   	push   %eax
f0104f75:	ff 75 0c             	pushl  0xc(%ebp)
f0104f78:	ff 75 08             	pushl  0x8(%ebp)
f0104f7b:	e8 6c 6a 00 00       	call   f010b9ec <__pf_read_env_table>
f0104f80:	83 c4 10             	add    $0x10,%esp
f0104f83:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104f86:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104f8e:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104f92:	75 17                	jne    f0104fab <pt_clear_page_table_entry+0xfd>
			panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0104f94:	83 ec 04             	sub    $0x4,%esp
f0104f97:	68 f4 9c 11 f0       	push   $0xf0119cf4
f0104f9c:	68 db 04 00 00       	push   $0x4db
f0104fa1:	68 15 99 11 f0       	push   $0xf0119915
f0104fa6:	e8 cb b1 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c1 e8 0c             	shr    $0xc,%eax
f0104fb1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104fb6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fc0:	01 d0                	add    %edx,%eax
f0104fc2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104fc8:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0104fcd:	83 ec 04             	sub    $0x4,%esp
f0104fd0:	50                   	push   %eax
f0104fd1:	ff 75 0c             	pushl  0xc(%ebp)
f0104fd4:	ff 75 08             	pushl  0x8(%ebp)
f0104fd7:	e8 6b 69 00 00       	call   f010b947 <__pf_write_env_table>
f0104fdc:	83 c4 10             	add    $0x10,%esp
f0104fdf:	eb 17                	jmp    f0104ff8 <pt_clear_page_table_entry+0x14a>
	}
	else
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104fe1:	83 ec 04             	sub    $0x4,%esp
f0104fe4:	68 74 9d 11 f0       	push   $0xf0119d74
f0104fe9:	68 e2 04 00 00       	push   $0x4e2
f0104fee:	68 15 99 11 f0       	push   $0xf0119915
f0104ff3:	e8 7e b1 ff ff       	call   f0100176 <_panic>


	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ffb:	83 ec 08             	sub    $0x8,%esp
f0104ffe:	50                   	push   %eax
f0104fff:	6a 00                	push   $0x0
f0105001:	e8 09 df ff ff       	call   f0102f0f <tlb_invalidate>
f0105006:	83 c4 10             	add    $0x10,%esp
}
f0105009:	90                   	nop
f010500a:	c9                   	leave  
f010500b:	c3                   	ret    

f010500c <pt_get_page_permissions>:

inline uint32 pt_get_page_permissions(struct Env* ptr_env, uint32 virtual_address )
{
f010500c:	55                   	push   %ebp
f010500d:	89 e5                	mov    %esp,%ebp
f010500f:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0105012:	8b 45 08             	mov    0x8(%ebp),%eax
f0105015:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105018:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f010501b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010501e:	c1 e8 16             	shr    $0x16,%eax
f0105021:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105028:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010502b:	01 d0                	add    %edx,%eax
f010502d:	8b 00                	mov    (%eax),%eax
f010502f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0105032:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105035:	83 e0 01             	and    $0x1,%eax
f0105038:	85 c0                	test   %eax,%eax
f010503a:	74 67                	je     f01050a3 <pt_get_page_permissions+0x97>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010503c:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0105043:	77 1c                	ja     f0105061 <pt_get_page_permissions+0x55>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0105045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105048:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010504d:	83 ec 0c             	sub    $0xc,%esp
f0105050:	50                   	push   %eax
f0105051:	e8 df 70 00 00       	call   f010c135 <kheap_virtual_address>
f0105056:	83 c4 10             	add    $0x10,%esp
f0105059:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010505c:	e9 8e 00 00 00       	jmp    f01050ef <pt_get_page_permissions+0xe3>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0105061:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105064:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105069:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010506c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010506f:	c1 e8 0c             	shr    $0xc,%eax
f0105072:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0105075:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f010507a:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010507d:	72 17                	jb     f0105096 <pt_get_page_permissions+0x8a>
f010507f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105082:	68 3c 99 11 f0       	push   $0xf011993c
f0105087:	68 f6 04 00 00       	push   $0x4f6
f010508c:	68 15 99 11 f0       	push   $0xf0119915
f0105091:	e8 e0 b0 ff ff       	call   f0100176 <_panic>
f0105096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105099:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010509e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a1:	eb 4c                	jmp    f01050ef <pt_get_page_permissions+0xe3>
		}
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01050a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01050a7:	74 3f                	je     f01050e8 <pt_get_page_permissions+0xdc>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f01050a9:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f01050ae:	83 ec 04             	sub    $0x4,%esp
f01050b1:	50                   	push   %eax
f01050b2:	ff 75 0c             	pushl  0xc(%ebp)
f01050b5:	ff 75 08             	pushl  0x8(%ebp)
f01050b8:	e8 2f 69 00 00       	call   f010b9ec <__pf_read_env_table>
f01050bd:	83 c4 10             	add    $0x10,%esp
f01050c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f01050c3:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f01050c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f01050cb:	83 7d e8 f6          	cmpl   $0xfffffff6,-0x18(%ebp)
f01050cf:	75 1e                	jne    f01050ef <pt_get_page_permissions+0xe3>
			panic("pt_get_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f01050d1:	83 ec 04             	sub    $0x4,%esp
f01050d4:	68 ec 9d 11 f0       	push   $0xf0119dec
f01050d9:	68 01 05 00 00       	push   $0x501
f01050de:	68 15 99 11 f0       	push   $0xf0119915
f01050e3:	e8 8e b0 ff ff       	call   f0100176 <_panic>
			handling code");
	}
	else
		return 0;
f01050e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01050ed:	eb 1e                	jmp    f010510d <pt_get_page_permissions+0x101>
	//panic("function pt_get_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;

	//	if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//		panic("function pt_is_page_modified() called with invalid virtual address\n") ;

	return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01050ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01050f2:	c1 e8 0c             	shr    $0xc,%eax
f01050f5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01050fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105101:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105104:	01 d0                	add    %edx,%eax
f0105106:	8b 00                	mov    (%eax),%eax
f0105108:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f010510d:	c9                   	leave  
f010510e:	c3                   	ret    

f010510f <create_frames_storage>:
//=============================================================
// 2014 - edited in 2017
//=============================================================
// [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f010510f:	55                   	push   %ebp
f0105110:	89 e5                	mov    %esp,%ebp
f0105112:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = (void *)kmalloc(PAGE_SIZE);
f0105115:	83 ec 0c             	sub    $0xc,%esp
f0105118:	68 00 10 00 00       	push   $0x1000
f010511d:	e8 04 6d 00 00       	call   f010be26 <kmalloc>
f0105122:	83 c4 10             	add    $0x10,%esp
f0105125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0105128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010512c:	75 17                	jne    f0105145 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010512e:	83 ec 04             	sub    $0x4,%esp
f0105131:	68 67 9e 11 f0       	push   $0xf0119e67
f0105136:	68 17 05 00 00       	push   $0x517
f010513b:	68 15 99 11 f0       	push   $0xf0119915
f0105140:	e8 31 b0 ff ff       	call   f0100176 <_panic>
	}
	return frames_storage;
f0105145:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0105148:	c9                   	leave  
f0105149:	c3                   	ret    

f010514a <add_frame_to_storage>:
// [2] Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
{
f010514a:	55                   	push   %ebp
f010514b:	89 e5                	mov    %esp,%ebp
f010514d:	53                   	push   %ebx
f010514e:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0105151:	8b 45 10             	mov    0x10(%ebp),%eax
f0105154:	c1 e0 0c             	shl    $0xc,%eax
f0105157:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage, (void*) va, &ptr_page_table);
f010515a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010515d:	83 ec 04             	sub    $0x4,%esp
f0105160:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0105163:	52                   	push   %edx
f0105164:	50                   	push   %eax
f0105165:	ff 75 08             	pushl  0x8(%ebp)
f0105168:	e8 a8 e9 ff ff       	call   f0103b15 <get_page_table>
f010516d:	83 c4 10             	add    $0x10,%esp
f0105170:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0105173:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0105177:	75 14                	jne    f010518d <add_frame_to_storage+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0105179:	83 ec 08             	sub    $0x8,%esp
f010517c:	ff 75 f4             	pushl  -0xc(%ebp)
f010517f:	ff 75 08             	pushl  0x8(%ebp)
f0105182:	e8 e6 ea ff ff       	call   f0103c6d <create_page_table>
f0105187:	83 c4 10             	add    $0x10,%esp
f010518a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
		}

	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010518d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105190:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105193:	c1 ea 0c             	shr    $0xc,%edx
f0105196:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010519c:	c1 e2 02             	shl    $0x2,%edx
f010519f:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01051a2:	83 ec 0c             	sub    $0xc,%esp
f01051a5:	ff 75 0c             	pushl  0xc(%ebp)
f01051a8:	e8 f4 df ff ff       	call   f01031a1 <to_physical_address>
f01051ad:	83 c4 10             	add    $0x10,%esp
f01051b0:	83 c8 01             	or     $0x1,%eax
f01051b3:	89 03                	mov    %eax,(%ebx)
}
f01051b5:	90                   	nop
f01051b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01051b9:	c9                   	leave  
f01051ba:	c3                   	ret    

f01051bb <get_frame_from_storage>:

// [3] Get a frame info from the storage of frames at the given index
inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01051bb:	55                   	push   %ebp
f01051bc:	89 e5                	mov    %esp,%ebp
f01051be:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01051c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01051c4:	c1 e0 0c             	shl    $0xc,%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage, (void*) va, &ptr_page_table);
f01051ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051cd:	83 ec 04             	sub    $0x4,%esp
f01051d0:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01051d3:	52                   	push   %edx
f01051d4:	50                   	push   %eax
f01051d5:	ff 75 08             	pushl  0x8(%ebp)
f01051d8:	e8 ec eb ff ff       	call   f0103dc9 <get_frame_info>
f01051dd:	83 c4 10             	add    $0x10,%esp
f01051e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01051e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01051e6:	c9                   	leave  
f01051e7:	c3                   	ret    

f01051e8 <clear_frames_storage>:

// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
f01051e8:	55                   	push   %ebp
f01051e9:	89 e5                	mov    %esp,%ebp
f01051eb:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01051ee:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01051f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01051fc:	eb 5b                	jmp    f0105259 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01051fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105201:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105208:	8b 45 08             	mov    0x8(%ebp),%eax
f010520b:	01 d0                	add    %edx,%eax
f010520d:	8b 00                	mov    (%eax),%eax
f010520f:	85 c0                	test   %eax,%eax
f0105211:	74 43                	je     f0105256 <clear_frames_storage+0x6e>
		{
			if(USE_KHEAP)
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0105213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105216:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010521d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105220:	01 d0                	add    %edx,%eax
f0105222:	8b 00                	mov    (%eax),%eax
f0105224:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105229:	83 ec 0c             	sub    $0xc,%esp
f010522c:	50                   	push   %eax
f010522d:	e8 03 6f 00 00       	call   f010c135 <kheap_virtual_address>
f0105232:	83 c4 10             	add    $0x10,%esp
f0105235:	83 ec 0c             	sub    $0xc,%esp
f0105238:	50                   	push   %eax
f0105239:	e8 79 6c 00 00       	call   f010beb7 <kfree>
f010523e:	83 c4 10             	add    $0x10,%esp
			}
			else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
f0105241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105244:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010524b:	8b 45 08             	mov    0x8(%ebp),%eax
f010524e:	01 d0                	add    %edx,%eax
f0105250:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0105256:	ff 45 f4             	incl   -0xc(%ebp)
f0105259:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105260:	7e 9c                	jle    f01051fe <clear_frames_storage+0x16>
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
		}
	}
}
f0105262:	90                   	nop
f0105263:	c9                   	leave  
f0105264:	c3                   	ret    

f0105265 <setUHeapPlacementStrategyFIRSTFIT>:
//********************************************************************************//

void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0105265:	55                   	push   %ebp
f0105266:	89 e5                	mov    %esp,%ebp
f0105268:	c7 05 38 32 53 f0 01 	movl   $0x1,0xf0533238
f010526f:	00 00 00 
f0105272:	90                   	nop
f0105273:	5d                   	pop    %ebp
f0105274:	c3                   	ret    

f0105275 <setUHeapPlacementStrategyBESTFIT>:
void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0105275:	55                   	push   %ebp
f0105276:	89 e5                	mov    %esp,%ebp
f0105278:	c7 05 38 32 53 f0 02 	movl   $0x2,0xf0533238
f010527f:	00 00 00 
f0105282:	90                   	nop
f0105283:	5d                   	pop    %ebp
f0105284:	c3                   	ret    

f0105285 <setUHeapPlacementStrategyNEXTFIT>:
void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0105285:	55                   	push   %ebp
f0105286:	89 e5                	mov    %esp,%ebp
f0105288:	c7 05 38 32 53 f0 03 	movl   $0x3,0xf0533238
f010528f:	00 00 00 
f0105292:	90                   	nop
f0105293:	5d                   	pop    %ebp
f0105294:	c3                   	ret    

f0105295 <setUHeapPlacementStrategyWORSTFIT>:
void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0105295:	55                   	push   %ebp
f0105296:	89 e5                	mov    %esp,%ebp
f0105298:	c7 05 38 32 53 f0 04 	movl   $0x4,0xf0533238
f010529f:	00 00 00 
f01052a2:	90                   	nop
f01052a3:	5d                   	pop    %ebp
f01052a4:	c3                   	ret    

f01052a5 <isUHeapPlacementStrategyFIRSTFIT>:

uint32 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01052a5:	55                   	push   %ebp
f01052a6:	89 e5                	mov    %esp,%ebp
f01052a8:	a1 38 32 53 f0       	mov    0xf0533238,%eax
f01052ad:	83 f8 01             	cmp    $0x1,%eax
f01052b0:	75 07                	jne    f01052b9 <isUHeapPlacementStrategyFIRSTFIT+0x14>
f01052b2:	b8 01 00 00 00       	mov    $0x1,%eax
f01052b7:	eb 05                	jmp    f01052be <isUHeapPlacementStrategyFIRSTFIT+0x19>
f01052b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01052be:	5d                   	pop    %ebp
f01052bf:	c3                   	ret    

f01052c0 <isUHeapPlacementStrategyBESTFIT>:
uint32 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f01052c0:	55                   	push   %ebp
f01052c1:	89 e5                	mov    %esp,%ebp
f01052c3:	a1 38 32 53 f0       	mov    0xf0533238,%eax
f01052c8:	83 f8 02             	cmp    $0x2,%eax
f01052cb:	75 07                	jne    f01052d4 <isUHeapPlacementStrategyBESTFIT+0x14>
f01052cd:	b8 01 00 00 00       	mov    $0x1,%eax
f01052d2:	eb 05                	jmp    f01052d9 <isUHeapPlacementStrategyBESTFIT+0x19>
f01052d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01052d9:	5d                   	pop    %ebp
f01052da:	c3                   	ret    

f01052db <isUHeapPlacementStrategyNEXTFIT>:
uint32 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f01052db:	55                   	push   %ebp
f01052dc:	89 e5                	mov    %esp,%ebp
f01052de:	a1 38 32 53 f0       	mov    0xf0533238,%eax
f01052e3:	83 f8 03             	cmp    $0x3,%eax
f01052e6:	75 07                	jne    f01052ef <isUHeapPlacementStrategyNEXTFIT+0x14>
f01052e8:	b8 01 00 00 00       	mov    $0x1,%eax
f01052ed:	eb 05                	jmp    f01052f4 <isUHeapPlacementStrategyNEXTFIT+0x19>
f01052ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01052f4:	5d                   	pop    %ebp
f01052f5:	c3                   	ret    

f01052f6 <isUHeapPlacementStrategyWORSTFIT>:
uint32 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f01052f6:	55                   	push   %ebp
f01052f7:	89 e5                	mov    %esp,%ebp
f01052f9:	a1 38 32 53 f0       	mov    0xf0533238,%eax
f01052fe:	83 f8 04             	cmp    $0x4,%eax
f0105301:	75 07                	jne    f010530a <isUHeapPlacementStrategyWORSTFIT+0x14>
f0105303:	b8 01 00 00 00       	mov    $0x1,%eax
f0105308:	eb 05                	jmp    f010530f <isUHeapPlacementStrategyWORSTFIT+0x19>
f010530a:	b8 00 00 00 00       	mov    $0x0,%eax
f010530f:	5d                   	pop    %ebp
f0105310:	c3                   	ret    

f0105311 <setKHeapPlacementStrategyCONTALLOC>:

//********************************************************************************//
void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0105311:	55                   	push   %ebp
f0105312:	89 e5                	mov    %esp,%ebp
f0105314:	c7 05 60 32 53 f0 00 	movl   $0x0,0xf0533260
f010531b:	00 00 00 
f010531e:	90                   	nop
f010531f:	5d                   	pop    %ebp
f0105320:	c3                   	ret    

f0105321 <setKHeapPlacementStrategyFIRSTFIT>:
void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0105321:	55                   	push   %ebp
f0105322:	89 e5                	mov    %esp,%ebp
f0105324:	c7 05 60 32 53 f0 01 	movl   $0x1,0xf0533260
f010532b:	00 00 00 
f010532e:	90                   	nop
f010532f:	5d                   	pop    %ebp
f0105330:	c3                   	ret    

f0105331 <setKHeapPlacementStrategyBESTFIT>:
void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0105331:	55                   	push   %ebp
f0105332:	89 e5                	mov    %esp,%ebp
f0105334:	c7 05 60 32 53 f0 02 	movl   $0x2,0xf0533260
f010533b:	00 00 00 
f010533e:	90                   	nop
f010533f:	5d                   	pop    %ebp
f0105340:	c3                   	ret    

f0105341 <setKHeapPlacementStrategyNEXTFIT>:
void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0105341:	55                   	push   %ebp
f0105342:	89 e5                	mov    %esp,%ebp
f0105344:	c7 05 60 32 53 f0 03 	movl   $0x3,0xf0533260
f010534b:	00 00 00 
f010534e:	90                   	nop
f010534f:	5d                   	pop    %ebp
f0105350:	c3                   	ret    

f0105351 <setKHeapPlacementStrategyWORSTFIT>:
void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0105351:	55                   	push   %ebp
f0105352:	89 e5                	mov    %esp,%ebp
f0105354:	c7 05 60 32 53 f0 04 	movl   $0x4,0xf0533260
f010535b:	00 00 00 
f010535e:	90                   	nop
f010535f:	5d                   	pop    %ebp
f0105360:	c3                   	ret    

f0105361 <isKHeapPlacementStrategyCONTALLOC>:

uint32 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0105361:	55                   	push   %ebp
f0105362:	89 e5                	mov    %esp,%ebp
f0105364:	a1 60 32 53 f0       	mov    0xf0533260,%eax
f0105369:	85 c0                	test   %eax,%eax
f010536b:	75 07                	jne    f0105374 <isKHeapPlacementStrategyCONTALLOC+0x13>
f010536d:	b8 01 00 00 00       	mov    $0x1,%eax
f0105372:	eb 05                	jmp    f0105379 <isKHeapPlacementStrategyCONTALLOC+0x18>
f0105374:	b8 00 00 00 00       	mov    $0x0,%eax
f0105379:	5d                   	pop    %ebp
f010537a:	c3                   	ret    

f010537b <isKHeapPlacementStrategyFIRSTFIT>:
uint32 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010537b:	55                   	push   %ebp
f010537c:	89 e5                	mov    %esp,%ebp
f010537e:	a1 60 32 53 f0       	mov    0xf0533260,%eax
f0105383:	83 f8 01             	cmp    $0x1,%eax
f0105386:	75 07                	jne    f010538f <isKHeapPlacementStrategyFIRSTFIT+0x14>
f0105388:	b8 01 00 00 00       	mov    $0x1,%eax
f010538d:	eb 05                	jmp    f0105394 <isKHeapPlacementStrategyFIRSTFIT+0x19>
f010538f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105394:	5d                   	pop    %ebp
f0105395:	c3                   	ret    

f0105396 <isKHeapPlacementStrategyBESTFIT>:
uint32 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0105396:	55                   	push   %ebp
f0105397:	89 e5                	mov    %esp,%ebp
f0105399:	a1 60 32 53 f0       	mov    0xf0533260,%eax
f010539e:	83 f8 02             	cmp    $0x2,%eax
f01053a1:	75 07                	jne    f01053aa <isKHeapPlacementStrategyBESTFIT+0x14>
f01053a3:	b8 01 00 00 00       	mov    $0x1,%eax
f01053a8:	eb 05                	jmp    f01053af <isKHeapPlacementStrategyBESTFIT+0x19>
f01053aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01053af:	5d                   	pop    %ebp
f01053b0:	c3                   	ret    

f01053b1 <isKHeapPlacementStrategyNEXTFIT>:
uint32 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01053b1:	55                   	push   %ebp
f01053b2:	89 e5                	mov    %esp,%ebp
f01053b4:	a1 60 32 53 f0       	mov    0xf0533260,%eax
f01053b9:	83 f8 03             	cmp    $0x3,%eax
f01053bc:	75 07                	jne    f01053c5 <isKHeapPlacementStrategyNEXTFIT+0x14>
f01053be:	b8 01 00 00 00       	mov    $0x1,%eax
f01053c3:	eb 05                	jmp    f01053ca <isKHeapPlacementStrategyNEXTFIT+0x19>
f01053c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01053ca:	5d                   	pop    %ebp
f01053cb:	c3                   	ret    

f01053cc <isKHeapPlacementStrategyWORSTFIT>:
uint32 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01053cc:	55                   	push   %ebp
f01053cd:	89 e5                	mov    %esp,%ebp
f01053cf:	a1 60 32 53 f0       	mov    0xf0533260,%eax
f01053d4:	83 f8 04             	cmp    $0x4,%eax
f01053d7:	75 07                	jne    f01053e0 <isKHeapPlacementStrategyWORSTFIT+0x14>
f01053d9:	b8 01 00 00 00       	mov    $0x1,%eax
f01053de:	eb 05                	jmp    f01053e5 <isKHeapPlacementStrategyWORSTFIT+0x19>
f01053e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01053e5:	5d                   	pop    %ebp
f01053e6:	c3                   	ret    

f01053e7 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01053e7:	55                   	push   %ebp
f01053e8:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01053ea:	8b 15 54 29 53 f0    	mov    0xf0532954,%edx
f01053f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f3:	89 10                	mov    %edx,(%eax)
f01053f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f8:	8b 00                	mov    (%eax),%eax
f01053fa:	85 c0                	test   %eax,%eax
f01053fc:	75 07                	jne    f0105405 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f01053fe:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0105403:	eb 11                	jmp    f0105416 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0105405:	8b 45 08             	mov    0x8(%ebp),%eax
f0105408:	8b 00                	mov    (%eax),%eax
f010540a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0105411:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105416:	5d                   	pop    %ebp
f0105417:	c3                   	ret    

f0105418 <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0105418:	55                   	push   %ebp
f0105419:	89 e5                	mov    %esp,%ebp
f010541b:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010541e:	83 ec 04             	sub    $0x4,%esp
f0105421:	68 3c 03 00 00       	push   $0x33c
f0105426:	6a 00                	push   $0x0
f0105428:	ff 75 08             	pushl  0x8(%ebp)
f010542b:	e8 c7 21 01 00       	call   f01175f7 <memset>
f0105430:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0105433:	8b 45 08             	mov    0x8(%ebp),%eax
f0105436:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010543d:	8b 15 54 29 53 f0    	mov    0xf0532954,%edx
f0105443:	8b 45 08             	mov    0x8(%ebp),%eax
f0105446:	89 50 44             	mov    %edx,0x44(%eax)
f0105449:	8b 45 08             	mov    0x8(%ebp),%eax
f010544c:	8b 40 44             	mov    0x44(%eax),%eax
f010544f:	85 c0                	test   %eax,%eax
f0105451:	74 0d                	je     f0105460 <free_environment+0x48>
f0105453:	a1 54 29 53 f0       	mov    0xf0532954,%eax
f0105458:	8b 55 08             	mov    0x8(%ebp),%edx
f010545b:	89 50 48             	mov    %edx,0x48(%eax)
f010545e:	eb 08                	jmp    f0105468 <free_environment+0x50>
f0105460:	8b 45 08             	mov    0x8(%ebp),%eax
f0105463:	a3 58 29 53 f0       	mov    %eax,0xf0532958
f0105468:	8b 45 08             	mov    0x8(%ebp),%eax
f010546b:	a3 54 29 53 f0       	mov    %eax,0xf0532954
f0105470:	8b 45 08             	mov    0x8(%ebp),%eax
f0105473:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010547a:	a1 60 29 53 f0       	mov    0xf0532960,%eax
f010547f:	40                   	inc    %eax
f0105480:	a3 60 29 53 f0       	mov    %eax,0xf0532960
}
f0105485:	90                   	nop
f0105486:	c9                   	leave  
f0105487:	c3                   	ret    

f0105488 <create_user_page_WS>:


void * create_user_page_WS(unsigned int numOfElements)
{
f0105488:	55                   	push   %ebp
f0105489:	89 e5                	mov    %esp,%ebp
f010548b:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010548e:	8b 55 08             	mov    0x8(%ebp),%edx
f0105491:	89 d0                	mov    %edx,%eax
f0105493:	01 c0                	add    %eax,%eax
f0105495:	01 d0                	add    %edx,%eax
f0105497:	c1 e0 02             	shl    $0x2,%eax
f010549a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return kmalloc(nBytes);
f010549d:	83 ec 0c             	sub    $0xc,%esp
f01054a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01054a3:	e8 7e 69 00 00       	call   f010be26 <kmalloc>
f01054a8:	83 c4 10             	add    $0x10,%esp
}
f01054ab:	c9                   	leave  
f01054ac:	c3                   	ret    

f01054ad <create_user_directory>:


void * create_user_directory()
{
f01054ad:	55                   	push   %ebp
f01054ae:	89 e5                	mov    %esp,%ebp
f01054b0:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new directory
	uint32* ptr_user_page_directory = (void *)kmalloc(PAGE_SIZE);
f01054b3:	83 ec 0c             	sub    $0xc,%esp
f01054b6:	68 00 10 00 00       	push   $0x1000
f01054bb:	e8 66 69 00 00       	call   f010be26 <kmalloc>
f01054c0:	83 c4 10             	add    $0x10,%esp
f01054c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f01054c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054ca:	75 17                	jne    f01054e3 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01054cc:	83 ec 04             	sub    $0x4,%esp
f01054cf:	68 12 a5 11 f0       	push   $0xf011a512
f01054d4:	68 f5 00 00 00       	push   $0xf5
f01054d9:	68 2f a5 11 f0       	push   $0xf011a52f
f01054de:	e8 93 ac ff ff       	call   f0100176 <_panic>
	}
	return ptr_user_page_directory;
f01054e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01054e6:	c9                   	leave  
f01054e7:	c3                   	ret    

f01054e8 <ShareWSAtUserSpace>:

void ShareWSAtUserSpace(struct Env* e)
{
f01054e8:	55                   	push   %ebp
f01054e9:	89 e5                	mov    %esp,%ebp
f01054eb:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f01054ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01054f1:	c7 80 34 03 00 00 00 	movl   $0xa0000000,0x334(%eax)
f01054f8:	00 00 a0 
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
f01054fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fe:	8b 40 74             	mov    0x74(%eax),%eax
f0105501:	83 ec 0c             	sub    $0xc,%esp
f0105504:	50                   	push   %eax
f0105505:	e8 7e ff ff ff       	call   f0105488 <create_user_page_WS>
f010550a:	83 c4 10             	add    $0x10,%esp
f010550d:	89 c2                	mov    %eax,%edx
f010550f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105512:	89 50 78             	mov    %edx,0x78(%eax)
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f0105515:	8b 45 08             	mov    0x8(%ebp),%eax
f0105518:	8b 40 78             	mov    0x78(%eax),%eax
f010551b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010551e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105521:	8b 50 74             	mov    0x74(%eax),%edx
f0105524:	89 d0                	mov    %edx,%eax
f0105526:	01 c0                	add    %eax,%eax
f0105528:	01 d0                	add    %edx,%eax
f010552a:	c1 e0 02             	shl    $0x2,%eax
f010552d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f0105530:	8b 45 08             	mov    0x8(%ebp),%eax
f0105533:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0105539:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010553c:	8b 45 08             	mov    0x8(%ebp),%eax
f010553f:	8b 40 78             	mov    0x78(%eax),%eax
f0105542:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105545:	eb 72                	jmp    f01055b9 <ShareWSAtUserSpace+0xd1>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f0105547:	83 ec 0c             	sub    $0xc,%esp
f010554a:	ff 75 f4             	pushl  -0xc(%ebp)
f010554d:	e8 04 6c 00 00       	call   f010c156 <kheap_physical_address>
f0105552:	83 c4 10             	add    $0x10,%esp
f0105555:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f0105558:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010555b:	8b 45 08             	mov    0x8(%ebp),%eax
f010555e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105561:	83 ec 04             	sub    $0x4,%esp
f0105564:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0105567:	51                   	push   %ecx
f0105568:	52                   	push   %edx
f0105569:	50                   	push   %eax
f010556a:	e8 a6 e5 ff ff       	call   f0103b15 <get_page_table>
f010556f:	83 c4 10             	add    $0x10,%esp
f0105572:	83 f8 01             	cmp    $0x1,%eax
f0105575:	75 18                	jne    f010558f <ShareWSAtUserSpace+0xa7>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f0105577:	8b 45 08             	mov    0x8(%ebp),%eax
f010557a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010557d:	83 ec 08             	sub    $0x8,%esp
f0105580:	ff 75 f0             	pushl  -0x10(%ebp)
f0105583:	50                   	push   %eax
f0105584:	e8 e4 e6 ff ff       	call   f0103c6d <create_page_table>
f0105589:	83 c4 10             	add    $0x10,%esp
f010558c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010558f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105592:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105595:	c1 ea 0c             	shr    $0xc,%edx
f0105598:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010559e:	c1 e2 02             	shl    $0x2,%edx
f01055a1:	01 d0                	add    %edx,%eax
f01055a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01055a6:	83 ca 05             	or     $0x5,%edx
f01055a9:	89 10                	mov    %edx,(%eax)
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f01055ab:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01055b2:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01055b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01055bc:	8b 40 78             	mov    0x78(%eax),%eax
f01055bf:	89 c2                	mov    %eax,%edx
f01055c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055c4:	01 d0                	add    %edx,%eax
f01055c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01055c9:	0f 87 78 ff ff ff    	ja     f0105547 <ShareWSAtUserSpace+0x5f>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f01055cf:	90                   	nop
f01055d0:	c9                   	leave  
f01055d1:	c3                   	ret    

f01055d2 <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f01055d2:	55                   	push   %ebp
f01055d3:	89 e5                	mov    %esp,%ebp
f01055d5:	83 ec 18             	sub    $0x18,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f01055d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01055db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01055de:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f01055e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01055e4:	8b 55 10             	mov    0x10(%ebp),%edx
f01055e7:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f01055ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01055f1:	eb 17                	jmp    f010560a <initialize_environment+0x38>
	{
		e->env_page_directory[i] = 0 ;
f01055f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01055f6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01055f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055fc:	c1 e2 02             	shl    $0x2,%edx
f01055ff:	01 d0                	add    %edx,%eax
f0105601:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105607:	ff 45 f4             	incl   -0xc(%ebp)
f010560a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010560d:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0105612:	76 df                	jbe    f01055f3 <initialize_environment+0x21>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0105614:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010561b:	eb 22                	jmp    f010563f <initialize_environment+0x6d>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010561d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105620:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105623:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105626:	c1 e2 02             	shl    $0x2,%edx
f0105629:	01 c2                	add    %eax,%edx
f010562b:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0105630:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105633:	c1 e1 02             	shl    $0x2,%ecx
f0105636:	01 c8                	add    %ecx,%eax
f0105638:	8b 00                	mov    (%eax),%eax
f010563a:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010563c:	ff 45 f4             	incl   -0xc(%ebp)
f010563f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105646:	7e d5                	jle    f010561d <initialize_environment+0x4b>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		ShareWSAtUserSpace(e);
f0105648:	83 ec 0c             	sub    $0xc,%esp
f010564b:	ff 75 08             	pushl  0x8(%ebp)
f010564e:	e8 95 fe ff ff       	call   f01054e8 <ShareWSAtUserSpace>
f0105653:	83 c4 10             	add    $0x10,%esp
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0105656:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010565d:	eb 50                	jmp    f01056af <initialize_environment+0xdd>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010565f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105662:	8b 48 78             	mov    0x78(%eax),%ecx
f0105665:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105668:	89 d0                	mov    %edx,%eax
f010566a:	01 c0                	add    %eax,%eax
f010566c:	01 d0                	add    %edx,%eax
f010566e:	c1 e0 02             	shl    $0x2,%eax
f0105671:	01 c8                	add    %ecx,%eax
f0105673:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0105679:	8b 45 08             	mov    0x8(%ebp),%eax
f010567c:	8b 48 78             	mov    0x78(%eax),%ecx
f010567f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105682:	89 d0                	mov    %edx,%eax
f0105684:	01 c0                	add    %eax,%eax
f0105686:	01 d0                	add    %edx,%eax
f0105688:	c1 e0 02             	shl    $0x2,%eax
f010568b:	01 c8                	add    %ecx,%eax
f010568d:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0105691:	8b 45 08             	mov    0x8(%ebp),%eax
f0105694:	8b 48 78             	mov    0x78(%eax),%ecx
f0105697:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010569a:	89 d0                	mov    %edx,%eax
f010569c:	01 c0                	add    %eax,%eax
f010569e:	01 d0                	add    %edx,%eax
f01056a0:	c1 e0 02             	shl    $0x2,%eax
f01056a3:	01 c8                	add    %ecx,%eax
f01056a5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f01056ac:	ff 45 f4             	incl   -0xc(%ebp)
f01056af:	8b 45 08             	mov    0x8(%ebp),%eax
f01056b2:	8b 50 74             	mov    0x74(%eax),%edx
f01056b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056b8:	39 c2                	cmp    %eax,%edx
f01056ba:	77 a3                	ja     f010565f <initialize_environment+0x8d>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f01056bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01056bf:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01056c6:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f01056c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01056d0:	eb 50                	jmp    f0105722 <initialize_environment+0x150>
	{
		e->__ptr_tws[i].virtual_address = 0;
f01056d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d8:	89 d0                	mov    %edx,%eax
f01056da:	01 c0                	add    %eax,%eax
f01056dc:	01 d0                	add    %edx,%eax
f01056de:	c1 e0 02             	shl    $0x2,%eax
f01056e1:	01 c8                	add    %ecx,%eax
f01056e3:	83 c0 7c             	add    $0x7c,%eax
f01056e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f01056ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056f2:	89 d0                	mov    %edx,%eax
f01056f4:	01 c0                	add    %eax,%eax
f01056f6:	01 d0                	add    %edx,%eax
f01056f8:	c1 e0 02             	shl    $0x2,%eax
f01056fb:	01 c8                	add    %ecx,%eax
f01056fd:	83 e8 80             	sub    $0xffffff80,%eax
f0105700:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0105703:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105706:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105709:	89 d0                	mov    %edx,%eax
f010570b:	01 c0                	add    %eax,%eax
f010570d:	01 d0                	add    %edx,%eax
f010570f:	c1 e0 02             	shl    $0x2,%eax
f0105712:	01 c8                	add    %ecx,%eax
f0105714:	05 84 00 00 00       	add    $0x84,%eax
f0105719:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010571f:	ff 45 f4             	incl   -0xc(%ebp)
f0105722:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0105726:	7e aa                	jle    f01056d2 <initialize_environment+0x100>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0105728:	8b 45 08             	mov    0x8(%ebp),%eax
f010572b:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
f0105732:	00 00 00 

	e->pageFaultsCounter=0;
f0105735:	8b 45 08             	mov    0x8(%ebp),%eax
f0105738:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
f010573f:	00 00 00 
	e->tableFaultsCounter=0;
f0105742:	8b 45 08             	mov    0x8(%ebp),%eax
f0105745:	c7 80 e0 02 00 00 00 	movl   $0x0,0x2e0(%eax)
f010574c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010574f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105752:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
f0105759:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010575c:	8b 45 08             	mov    0x8(%ebp),%eax
f010575f:	c7 80 e8 02 00 00 00 	movl   $0x0,0x2e8(%eax)
f0105766:	00 00 00 

	e->nModifiedPages=0;
f0105769:	8b 45 08             	mov    0x8(%ebp),%eax
f010576c:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
f0105773:	00 00 00 
	e->nNotModifiedPages=0;
f0105776:	8b 45 08             	mov    0x8(%ebp),%eax
f0105779:	c7 80 f0 02 00 00 00 	movl   $0x0,0x2f0(%eax)
f0105780:	00 00 00 

	e->nClocks = 0;
f0105783:	8b 45 08             	mov    0x8(%ebp),%eax
f0105786:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
f010578d:	00 00 00 


	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0105790:	83 ec 0c             	sub    $0xc,%esp
f0105793:	ff 75 08             	pushl  0x8(%ebp)
f0105796:	e8 66 0b 00 00       	call   f0106301 <complete_environment_initialization>
f010579b:	83 c4 10             	add    $0x10,%esp
}
f010579e:	90                   	nop
f010579f:	c9                   	leave  
f01057a0:	c3                   	ret    

f01057a1 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01057a1:	55                   	push   %ebp
f01057a2:	89 e5                	mov    %esp,%ebp
f01057a4:	83 ec 48             	sub    $0x48,%esp
	void *vaddr = seg->virtual_address;
f01057a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057aa:	8b 40 0c             	mov    0xc(%eax),%eax
f01057ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01057b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057b3:	8b 40 08             	mov    0x8(%eax),%eax
f01057b6:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01057b9:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01057c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01057c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01057c6:	01 c2                	add    %eax,%edx
f01057c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01057cb:	01 d0                	add    %edx,%eax
f01057cd:	48                   	dec    %eax
f01057ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01057d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01057d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01057d9:	f7 75 dc             	divl   -0x24(%ebp)
f01057dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01057df:	29 d0                	sub    %edx,%eax
f01057e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f01057e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01057e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01057ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01057ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01057f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f01057f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f01057fc:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0105803:	8b 45 10             	mov    0x10(%ebp),%eax
f0105806:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010580c:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0105813:	0f 85 67 01 00 00    	jne    f0105980 <program_segment_alloc_map_copy_workingset+0x1df>
f0105819:	8b 45 08             	mov    0x8(%ebp),%eax
f010581c:	05 f4 02 00 00       	add    $0x2f4,%eax
f0105821:	83 ec 08             	sub    $0x8,%esp
f0105824:	68 08 9f 11 f0       	push   $0xf0119f08
f0105829:	50                   	push   %eax
f010582a:	e8 e6 1c 01 00       	call   f0117515 <strcmp>
f010582f:	83 c4 10             	add    $0x10,%esp
f0105832:	85 c0                	test   %eax,%eax
f0105834:	0f 84 46 01 00 00    	je     f0105980 <program_segment_alloc_map_copy_workingset+0x1df>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010583a:	8b 45 14             	mov    0x14(%ebp),%eax
f010583d:	83 f8 06             	cmp    $0x6,%eax
f0105840:	76 05                	jbe    f0105847 <program_segment_alloc_map_copy_workingset+0xa6>
f0105842:	b8 06 00 00 00       	mov    $0x6,%eax
f0105847:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010584a:	e9 31 01 00 00       	jmp    f0105980 <program_segment_alloc_map_copy_workingset+0x1df>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010584f:	83 ec 0c             	sub    $0xc,%esp
f0105852:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0105855:	50                   	push   %eax
f0105856:	e8 3b e1 ff ff       	call   f0103996 <allocate_frame>
f010585b:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f010585e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105861:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105864:	8b 45 08             	mov    0x8(%ebp),%eax
f0105867:	8b 40 5c             	mov    0x5c(%eax),%eax
f010586a:	6a 06                	push   $0x6
f010586c:	51                   	push   %ecx
f010586d:	52                   	push   %edx
f010586e:	50                   	push   %eax
f010586f:	e8 4c e6 ff ff       	call   f0103ec0 <loadtime_map_frame>
f0105874:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0105877:	8b 45 08             	mov    0x8(%ebp),%eax
f010587a:	8b 48 78             	mov    0x78(%eax),%ecx
f010587d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105880:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0105886:	89 d0                	mov    %edx,%eax
f0105888:	01 c0                	add    %eax,%eax
f010588a:	01 d0                	add    %edx,%eax
f010588c:	c1 e0 02             	shl    $0x2,%eax
f010588f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0105892:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105895:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0105897:	8b 45 08             	mov    0x8(%ebp),%eax
f010589a:	8b 48 78             	mov    0x78(%eax),%ecx
f010589d:	8b 45 08             	mov    0x8(%ebp),%eax
f01058a0:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058a6:	89 d0                	mov    %edx,%eax
f01058a8:	01 c0                	add    %eax,%eax
f01058aa:	01 d0                	add    %edx,%eax
f01058ac:	c1 e0 02             	shl    $0x2,%eax
f01058af:	01 c8                	add    %ecx,%eax
f01058b1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f01058b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01058b8:	8b 48 78             	mov    0x78(%eax),%ecx
f01058bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01058be:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058c4:	89 d0                	mov    %edx,%eax
f01058c6:	01 c0                	add    %eax,%eax
f01058c8:	01 d0                	add    %edx,%eax
f01058ca:	c1 e0 02             	shl    $0x2,%eax
f01058cd:	01 c8                	add    %ecx,%eax
f01058cf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		e->page_last_WS_index ++;
f01058d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d9:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01058df:	8d 50 01             	lea    0x1(%eax),%edx
f01058e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01058e5:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f01058eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01058ee:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01058f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01058f7:	8b 4a 74             	mov    0x74(%edx),%ecx
f01058fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01058ff:	f7 f1                	div    %ecx
f0105901:	8b 45 08             	mov    0x8(%ebp),%eax
f0105904:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010590a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010590d:	c1 e8 16             	shr    $0x16,%eax
f0105910:	89 c2                	mov    %eax,%edx
f0105912:	8b 45 18             	mov    0x18(%ebp),%eax
f0105915:	8b 00                	mov    (%eax),%eax
f0105917:	39 c2                	cmp    %eax,%edx
f0105919:	74 4e                	je     f0105969 <program_segment_alloc_map_copy_workingset+0x1c8>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f010591b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010591e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105921:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105924:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0105929:	83 ec 08             	sub    $0x8,%esp
f010592c:	50                   	push   %eax
f010592d:	ff 75 08             	pushl  0x8(%ebp)
f0105930:	e8 6a f1 ff ff       	call   f0104a9f <addTableToTableWorkingSet>
f0105935:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f0105938:	8b 45 08             	mov    0x8(%ebp),%eax
f010593b:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0105941:	85 c0                	test   %eax,%eax
f0105943:	75 17                	jne    f010595c <program_segment_alloc_map_copy_workingset+0x1bb>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0105945:	83 ec 04             	sub    $0x4,%esp
f0105948:	68 48 a5 11 f0       	push   $0xf011a548
f010594d:	68 8b 01 00 00       	push   $0x18b
f0105952:	68 2f a5 11 f0       	push   $0xf011a52f
f0105957:	e8 1a a8 ff ff       	call   f0100176 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010595c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010595f:	c1 e8 16             	shr    $0x16,%eax
f0105962:	89 c2                	mov    %eax,%edx
f0105964:	8b 45 18             	mov    0x18(%ebp),%eax
f0105967:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0105969:	8b 45 10             	mov    0x10(%ebp),%eax
f010596c:	8b 00                	mov    (%eax),%eax
f010596e:	8d 50 01             	lea    0x1(%eax),%edx
f0105971:	8b 45 10             	mov    0x10(%ebp),%eax
f0105974:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105976:	ff 45 f0             	incl   -0x10(%ebp)
f0105979:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105980:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105983:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0105986:	73 0c                	jae    f0105994 <program_segment_alloc_map_copy_workingset+0x1f3>
f0105988:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010598b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010598e:	0f 82 bb fe ff ff    	jb     f010584f <program_segment_alloc_map_copy_workingset+0xae>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0105994:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105997:	8b 00                	mov    (%eax),%eax
f0105999:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010599c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010599f:	8b 40 0c             	mov    0xc(%eax),%eax
f01059a2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059a5:	eb 10                	jmp    f01059b7 <program_segment_alloc_map_copy_workingset+0x216>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8a 10                	mov    (%eax),%dl
f01059ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059af:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01059b1:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01059b4:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059ba:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01059bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01059c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01059c5:	89 c2                	mov    %eax,%edx
f01059c7:	8b 45 10             	mov    0x10(%ebp),%eax
f01059ca:	8b 00                	mov    (%eax),%eax
f01059cc:	c1 e0 0c             	shl    $0xc,%eax
f01059cf:	01 c2                	add    %eax,%edx
f01059d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059d4:	39 c2                	cmp    %eax,%edx
f01059d6:	76 1d                	jbe    f01059f5 <program_segment_alloc_map_copy_workingset+0x254>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01059d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01059db:	8b 50 04             	mov    0x4(%eax),%edx
f01059de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e1:	01 c2                	add    %eax,%edx
f01059e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059e6:	39 c2                	cmp    %eax,%edx
f01059e8:	77 bd                	ja     f01059a7 <program_segment_alloc_map_copy_workingset+0x206>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01059ea:	eb 09                	jmp    f01059f5 <program_segment_alloc_map_copy_workingset+0x254>
	{
		*dst_ptr = 0;
f01059ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059ef:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f01059f2:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01059f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059f8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01059fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01059fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105a03:	89 c2                	mov    %eax,%edx
f0105a05:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a08:	8b 00                	mov    (%eax),%eax
f0105a0a:	c1 e0 0c             	shl    $0xc,%eax
f0105a0d:	01 c2                	add    %eax,%edx
f0105a0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a12:	39 c2                	cmp    %eax,%edx
f0105a14:	77 d6                	ja     f01059ec <program_segment_alloc_map_copy_workingset+0x24b>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0105a16:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105a1b:	c9                   	leave  
f0105a1c:	c3                   	ret    

f0105a1d <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f0105a1d:	55                   	push   %ebp
f0105a1e:	89 e5                	mov    %esp,%ebp
f0105a20:	57                   	push   %edi
f0105a21:	56                   	push   %esi
f0105a22:	53                   	push   %ebx
f0105a23:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105a29:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105a30:	83 ec 0c             	sub    $0xc,%esp
f0105a33:	ff 75 08             	pushl  0x8(%ebp)
f0105a36:	e8 ac 0c 00 00       	call   f01066e7 <get_user_program_info>
f0105a3b:	83 c4 10             	add    $0x10,%esp
f0105a3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105a41:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0105a45:	75 0a                	jne    f0105a51 <env_create+0x34>
f0105a47:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a4c:	e9 5d 06 00 00       	jmp    f01060ae <env_create+0x691>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105a51:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a54:	8b 40 08             	mov    0x8(%eax),%eax
f0105a57:	89 45 bc             	mov    %eax,-0x44(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105a5a:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%ebp)
f0105a61:	00 00 00 
	if(allocate_environment(&e) < 0)
f0105a64:	83 ec 0c             	sub    $0xc,%esp
f0105a67:	8d 85 50 ff ff ff    	lea    -0xb0(%ebp),%eax
f0105a6d:	50                   	push   %eax
f0105a6e:	e8 74 f9 ff ff       	call   f01053e7 <allocate_environment>
f0105a73:	83 c4 10             	add    $0x10,%esp
f0105a76:	85 c0                	test   %eax,%eax
f0105a78:	79 0a                	jns    f0105a84 <env_create+0x67>
	{
		return 0;
f0105a7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a7f:	e9 2a 06 00 00       	jmp    f01060ae <env_create+0x691>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0105a84:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	83 ec 0c             	sub    $0xc,%esp
f0105a8c:	50                   	push   %eax
f0105a8d:	e8 77 19 01 00       	call   f0117409 <strlen>
f0105a92:	83 c4 10             	add    $0x10,%esp
f0105a95:	83 f8 3f             	cmp    $0x3f,%eax
f0105a98:	7f 20                	jg     f0105aba <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0105a9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a9d:	8b 00                	mov    (%eax),%eax
f0105a9f:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105aa5:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105aab:	83 ec 08             	sub    $0x8,%esp
f0105aae:	50                   	push   %eax
f0105aaf:	52                   	push   %edx
f0105ab0:	e8 a3 19 01 00       	call   f0117458 <strcpy>
f0105ab5:	83 c4 10             	add    $0x10,%esp
f0105ab8:	eb 20                	jmp    f0105ada <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0105aba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105abd:	8b 00                	mov    (%eax),%eax
f0105abf:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105ac5:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105acb:	83 ec 04             	sub    $0x4,%esp
f0105ace:	6a 3f                	push   $0x3f
f0105ad0:	50                   	push   %eax
f0105ad1:	52                   	push   %edx
f0105ad2:	e8 af 19 01 00       	call   f0117486 <strncpy>
f0105ad7:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
	if(USE_KHEAP)
	{
		ptr_user_page_directory = create_user_directory();
f0105ada:	e8 ce f9 ff ff       	call   f01054ad <create_user_directory>
f0105adf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0105ae2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105ae5:	83 ec 0c             	sub    $0xc,%esp
f0105ae8:	50                   	push   %eax
f0105ae9:	e8 68 66 00 00       	call   f010c156 <kheap_physical_address>
f0105aee:	83 c4 10             	add    $0x10,%esp
f0105af1:	89 45 b0             	mov    %eax,-0x50(%ebp)

	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105af4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105afa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105afd:	89 50 74             	mov    %edx,0x74(%eax)


	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105b00:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b06:	83 ec 04             	sub    $0x4,%esp
f0105b09:	ff 75 b0             	pushl  -0x50(%ebp)
f0105b0c:	ff 75 b4             	pushl  -0x4c(%ebp)
f0105b0f:	50                   	push   %eax
f0105b10:	e8 bd fa ff ff       	call   f01055d2 <initialize_environment>
f0105b15:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105b18:	0f 20 d8             	mov    %cr3,%eax
f0105b1b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	return val;
f0105b1e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105b21:	89 45 a8             	mov    %eax,-0x58(%ebp)
	lcr3(e->env_cr3) ;
f0105b24:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b2a:	8b 40 60             	mov    0x60(%eax),%eax
f0105b2d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105b33:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0105b39:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105b3c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105b43:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105b4a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b50:	8b 40 74             	mov    0x74(%eax),%eax
f0105b53:	48                   	dec    %eax
f0105b54:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105b57:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%ebp)
f0105b5e:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105b61:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0105b67:	83 ec 08             	sub    $0x8,%esp
f0105b6a:	ff 75 bc             	pushl  -0x44(%ebp)
f0105b6d:	50                   	push   %eax
f0105b6e:	e8 5b 0a 00 00       	call   f01065ce <PROGRAM_SEGMENT_FIRST>
f0105b73:	83 c4 0c             	add    $0xc,%esp
f0105b76:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105b7c:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0105b82:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105b87:	89 c7                	mov    %eax,%edi
f0105b89:	89 d6                	mov    %edx,%esi
f0105b8b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105b8d:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105b93:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105b96:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b99:	8b 40 10             	mov    0x10(%eax),%eax
f0105b9c:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105b9f:	75 07                	jne    f0105ba8 <env_create+0x18b>
f0105ba1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105bae:	e9 0f 03 00 00       	jmp    f0105ec2 <env_create+0x4a5>
	{
		segment_counter++;
f0105bb3:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105bb6:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0105bbd:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105bc0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105bc6:	83 ec 0c             	sub    $0xc,%esp
f0105bc9:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f0105bcf:	52                   	push   %edx
f0105bd0:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd3:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0105bd9:	52                   	push   %edx
f0105bda:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105bdd:	50                   	push   %eax
f0105bde:	e8 be fb ff ff       	call   f01057a1 <program_segment_alloc_map_copy_workingset>
f0105be3:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105be6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0105bec:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105bef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bf2:	8b 00                	mov    (%eax),%eax
f0105bf4:	89 45 a0             	mov    %eax,-0x60(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105bf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bfa:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bfd:	89 45 9c             	mov    %eax,-0x64(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105c00:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c03:	89 45 98             	mov    %eax,-0x68(%ebp)
f0105c06:	8b 45 98             	mov    -0x68(%ebp),%eax
f0105c09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105c0e:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105c11:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0105c18:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0105c1b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105c1e:	01 d0                	add    %edx,%eax
f0105c20:	48                   	dec    %eax
f0105c21:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105c24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c27:	ba 00 00 00 00       	mov    $0x0,%edx
f0105c2c:	f7 75 90             	divl   -0x70(%ebp)
f0105c2f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c32:	29 d0                	sub    %edx,%eax
f0105c34:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105c37:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c3a:	2b 45 94             	sub    -0x6c(%ebp),%eax
f0105c3d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105c40:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0105c45:	83 ec 04             	sub    $0x4,%esp
f0105c48:	68 00 10 00 00       	push   $0x1000
f0105c4d:	6a 00                	push   $0x0
f0105c4f:	50                   	push   %eax
f0105c50:	e8 a2 19 01 00       	call   f01175f7 <memset>
f0105c55:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105c58:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0105c5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105c5e:	8b 15 d4 16 55 f0    	mov    0xf05516d4,%edx
f0105c64:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105c67:	01 d0                	add    %edx,%eax
f0105c69:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c6c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105c72:	eb 13                	jmp    f0105c87 <env_create+0x26a>
		{
			*dst_ptr = *src_ptr ;
f0105c74:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105c77:	8a 10                	mov    (%eax),%dl
f0105c79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105c7c:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c7e:	ff 45 cc             	incl   -0x34(%ebp)
f0105c81:	ff 45 d4             	incl   -0x2c(%ebp)
f0105c84:	ff 45 d0             	incl   -0x30(%ebp)
f0105c87:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105c8a:	3b 45 88             	cmp    -0x78(%ebp),%eax
f0105c8d:	72 e5                	jb     f0105c74 <env_create+0x257>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105c8f:	8b 15 d4 16 55 f0    	mov    0xf05516d4,%edx
f0105c95:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105c9b:	83 ec 04             	sub    $0x4,%esp
f0105c9e:	52                   	push   %edx
f0105c9f:	ff 75 94             	pushl  -0x6c(%ebp)
f0105ca2:	50                   	push   %eax
f0105ca3:	e8 a1 56 00 00       	call   f010b349 <pf_add_env_page>
f0105ca8:	83 c4 10             	add    $0x10,%esp
f0105cab:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105cae:	75 17                	jne    f0105cc7 <env_create+0x2aa>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105cb0:	83 ec 04             	sub    $0x4,%esp
f0105cb3:	68 ec a5 11 f0       	push   $0xf011a5ec
f0105cb8:	68 2d 02 00 00       	push   $0x22d
f0105cbd:	68 2f a5 11 f0       	push   $0xf011a52f
f0105cc2:	e8 af a4 ff ff       	call   f0100176 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105cc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cca:	8b 50 04             	mov    0x4(%eax),%edx
f0105ccd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105cd0:	01 d0                	add    %edx,%eax
f0105cd2:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105cd5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105cd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105cdd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105ce3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105ce6:	8b 50 04             	mov    0x4(%eax),%edx
f0105ce9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105cec:	01 d0                	add    %edx,%eax
f0105cee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105cf4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0105cf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105cfa:	eb 43                	jmp    f0105d3f <env_create+0x322>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0105cfc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105d05:	83 ec 04             	sub    $0x4,%esp
f0105d08:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105d0b:	52                   	push   %edx
f0105d0c:	50                   	push   %eax
f0105d0d:	e8 37 56 00 00       	call   f010b349 <pf_add_env_page>
f0105d12:	83 c4 10             	add    $0x10,%esp
f0105d15:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105d18:	75 17                	jne    f0105d31 <env_create+0x314>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105d1a:	83 ec 04             	sub    $0x4,%esp
f0105d1d:	68 ec a5 11 f0       	push   $0xf011a5ec
f0105d22:	68 3a 02 00 00       	push   $0x23a
f0105d27:	68 2f a5 11 f0       	push   $0xf011a52f
f0105d2c:	e8 45 a4 ff ff       	call   f0100176 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105d31:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105d38:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0105d3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d42:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0105d48:	72 b2                	jb     f0105cfc <env_create+0x2df>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0105d4a:	a1 d4 16 55 f0       	mov    0xf05516d4,%eax
f0105d4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0105d52:	83 ec 04             	sub    $0x4,%esp
f0105d55:	68 00 10 00 00       	push   $0x1000
f0105d5a:	6a 00                	push   $0x0
f0105d5c:	ff 75 d0             	pushl  -0x30(%ebp)
f0105d5f:	e8 93 18 01 00       	call   f01175f7 <memset>
f0105d64:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d67:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0105d6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105d70:	eb 13                	jmp    f0105d85 <env_create+0x368>
		{
			*dst_ptr = *src_ptr;
f0105d72:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105d75:	8a 10                	mov    (%eax),%dl
f0105d77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105d7a:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d7c:	ff 45 cc             	incl   -0x34(%ebp)
f0105d7f:	ff 45 d4             	incl   -0x2c(%ebp)
f0105d82:	ff 45 d0             	incl   -0x30(%ebp)
f0105d85:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d88:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0105d8e:	72 e2                	jb     f0105d72 <env_create+0x355>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105d90:	8b 15 d4 16 55 f0    	mov    0xf05516d4,%edx
f0105d96:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105d9c:	83 ec 04             	sub    $0x4,%esp
f0105d9f:	52                   	push   %edx
f0105da0:	ff b5 7c ff ff ff    	pushl  -0x84(%ebp)
f0105da6:	50                   	push   %eax
f0105da7:	e8 9d 55 00 00       	call   f010b349 <pf_add_env_page>
f0105dac:	83 c4 10             	add    $0x10,%esp
f0105daf:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105db2:	75 17                	jne    f0105dcb <env_create+0x3ae>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105db4:	83 ec 04             	sub    $0x4,%esp
f0105db7:	68 ec a5 11 f0       	push   $0xf011a5ec
f0105dbc:	68 49 02 00 00       	push   $0x249
f0105dc1:	68 2f a5 11 f0       	push   $0xf011a52f
f0105dc6:	e8 ab a3 ff ff       	call   f0100176 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0105dcb:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0105dd2:	10 00 00 
f0105dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105dd8:	8b 50 04             	mov    0x4(%eax),%edx
f0105ddb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105dde:	01 c2                	add    %eax,%edx
f0105de0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0105de6:	01 d0                	add    %edx,%eax
f0105de8:	48                   	dec    %eax
f0105de9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0105def:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105df5:	ba 00 00 00 00       	mov    $0x0,%edx
f0105dfa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0105e00:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105e06:	29 d0                	sub    %edx,%eax
f0105e08:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0105e0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e0e:	8b 50 08             	mov    0x8(%eax),%edx
f0105e11:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105e14:	01 d0                	add    %edx,%eax
f0105e16:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0105e19:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e1f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0105e26:	eb 41                	jmp    f0105e69 <env_create+0x44c>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0105e28:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e2e:	83 ec 04             	sub    $0x4,%esp
f0105e31:	6a 01                	push   $0x1
f0105e33:	ff 75 c8             	pushl  -0x38(%ebp)
f0105e36:	50                   	push   %eax
f0105e37:	e8 34 54 00 00       	call   f010b270 <pf_add_empty_env_page>
f0105e3c:	83 c4 10             	add    $0x10,%esp
f0105e3f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105e42:	75 17                	jne    f0105e5b <env_create+0x43e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105e44:	83 ec 04             	sub    $0x4,%esp
f0105e47:	68 ec a5 11 f0       	push   $0xf011a5ec
f0105e4c:	68 56 02 00 00       	push   $0x256
f0105e51:	68 2f a5 11 f0       	push   $0xf011a52f
f0105e56:	e8 1b a3 ff ff       	call   f0100176 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e5b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105e62:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0105e69:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0105e70:	10 00 00 
f0105e73:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
f0105e79:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0105e7f:	01 d0                	add    %edx,%eax
f0105e81:	48                   	dec    %eax
f0105e82:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0105e88:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105e8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0105e93:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0105e99:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105e9f:	29 d0                	sub    %edx,%eax
f0105ea1:	89 c2                	mov    %eax,%edx
f0105ea3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105ea6:	39 c2                	cmp    %eax,%edx
f0105ea8:	0f 87 7a ff ff ff    	ja     f0105e28 <env_create+0x40b>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105eae:	83 ec 08             	sub    $0x8,%esp
f0105eb1:	ff 75 bc             	pushl  -0x44(%ebp)
f0105eb4:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105eb7:	e8 07 06 00 00       	call   f01064c3 <PROGRAM_SEGMENT_NEXT>
f0105ebc:	83 c4 10             	add    $0x10,%esp
f0105ebf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105ec2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0105ec6:	0f 85 e7 fc ff ff    	jne    f0105bb3 <env_create+0x196>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0105ecc:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0105ed3:	e9 9e 00 00 00       	jmp    f0105f76 <env_create+0x559>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0105ed8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105ede:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ee1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105ee4:	89 d0                	mov    %edx,%eax
f0105ee6:	01 c0                	add    %eax,%eax
f0105ee8:	01 d0                	add    %edx,%eax
f0105eea:	c1 e0 02             	shl    $0x2,%eax
f0105eed:	01 c8                	add    %ecx,%eax
f0105eef:	8a 40 04             	mov    0x4(%eax),%al
f0105ef2:	84 c0                	test   %al,%al
f0105ef4:	75 7d                	jne    f0105f73 <env_create+0x556>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0105ef6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105efc:	8b 48 78             	mov    0x78(%eax),%ecx
f0105eff:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105f02:	89 d0                	mov    %edx,%eax
f0105f04:	01 c0                	add    %eax,%eax
f0105f06:	01 d0                	add    %edx,%eax
f0105f08:	c1 e0 02             	shl    $0x2,%eax
f0105f0b:	01 c8                	add    %ecx,%eax
f0105f0d:	8b 00                	mov    (%eax),%eax
f0105f0f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f0105f15:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f1b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f21:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105f24:	83 ec 04             	sub    $0x4,%esp
f0105f27:	8d 8d 2c ff ff ff    	lea    -0xd4(%ebp),%ecx
f0105f2d:	51                   	push   %ecx
f0105f2e:	52                   	push   %edx
f0105f2f:	50                   	push   %eax
f0105f30:	e8 e0 db ff ff       	call   f0103b15 <get_page_table>
f0105f35:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0105f38:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0105f3e:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f44:	c1 ea 0c             	shr    $0xc,%edx
f0105f47:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105f4d:	c1 e2 02             	shl    $0x2,%edx
f0105f50:	01 d0                	add    %edx,%eax
f0105f52:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0105f58:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
f0105f5e:	c1 e9 0c             	shr    $0xc,%ecx
f0105f61:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0105f67:	c1 e1 02             	shl    $0x2,%ecx
f0105f6a:	01 ca                	add    %ecx,%edx
f0105f6c:	8b 12                	mov    (%edx),%edx
f0105f6e:	83 e2 bf             	and    $0xffffffbf,%edx
f0105f71:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0105f73:	ff 45 c4             	incl   -0x3c(%ebp)
f0105f76:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f7c:	8b 50 74             	mov    0x74(%eax),%edx
f0105f7f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105f82:	39 c2                	cmp    %eax,%edx
f0105f84:	0f 87 4e ff ff ff    	ja     f0105ed8 <env_create+0x4bb>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0105f8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105f8d:	8b 50 08             	mov    0x8(%eax),%edx
f0105f90:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f96:	83 ec 08             	sub    $0x8,%esp
f0105f99:	52                   	push   %edx
f0105f9a:	50                   	push   %eax
f0105f9b:	e8 43 08 00 00       	call   f01067e3 <set_environment_entry_point>
f0105fa0:	83 c4 10             	add    $0x10,%esp
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set


	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0105fa3:	c7 85 5c ff ff ff 00 	movl   $0xeebfd000,-0xa4(%ebp)
f0105faa:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0105fad:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0105fb4:	e9 d4 00 00 00       	jmp    f010608d <env_create+0x670>
	{
		struct Frame_Info *pp = NULL;
f0105fb9:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0105fc0:	00 00 00 
		allocate_frame(&pp);
f0105fc3:	83 ec 0c             	sub    $0xc,%esp
f0105fc6:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105fcc:	50                   	push   %eax
f0105fcd:	e8 c4 d9 ff ff       	call   f0103996 <allocate_frame>
f0105fd2:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f0105fd5:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0105fd8:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0105fde:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105fe4:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105fe7:	6a 06                	push   $0x6
f0105fe9:	51                   	push   %ecx
f0105fea:	52                   	push   %edx
f0105feb:	50                   	push   %eax
f0105fec:	e8 cf de ff ff       	call   f0103ec0 <loadtime_map_frame>
f0105ff1:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0105ff4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0105ff7:	83 ec 04             	sub    $0x4,%esp
f0105ffa:	68 00 10 00 00       	push   $0x1000
f0105fff:	6a 00                	push   $0x0
f0106001:	50                   	push   %eax
f0106002:	e8 f0 15 01 00       	call   f01175f7 <memset>
f0106007:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010600a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106010:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106016:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010601c:	83 ec 04             	sub    $0x4,%esp
f010601f:	ff 75 c0             	pushl  -0x40(%ebp)
f0106022:	52                   	push   %edx
f0106023:	50                   	push   %eax
f0106024:	e8 6f e3 ff ff       	call   f0104398 <env_page_ws_set_entry>
f0106029:	83 c4 10             	add    $0x10,%esp
			e->page_last_WS_index ++;
f010602c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106032:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106038:	42                   	inc    %edx
f0106039:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010603f:	8b 8d 50 ff ff ff    	mov    -0xb0(%ebp),%ecx
f0106045:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010604b:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0106051:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0106057:	8b 5a 74             	mov    0x74(%edx),%ebx
f010605a:	ba 00 00 00 00       	mov    $0x0,%edx
f010605f:	f7 f3                	div    %ebx
f0106061:	89 d0                	mov    %edx,%eax
f0106063:	89 81 d4 02 00 00    	mov    %eax,0x2d4(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0106069:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010606f:	83 ec 04             	sub    $0x4,%esp
f0106072:	6a 01                	push   $0x1
f0106074:	ff 75 c0             	pushl  -0x40(%ebp)
f0106077:	50                   	push   %eax
f0106078:	e8 f3 51 00 00       	call   f010b270 <pf_add_empty_env_page>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0106086:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010608d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106090:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0106096:	0f 83 1d ff ff ff    	jae    f0105fb9 <env_create+0x59c>
f010609c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010609f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01060a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01060a5:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01060a8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
}
f01060ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01060b1:	5b                   	pop    %ebx
f01060b2:	5e                   	pop    %esi
f01060b3:	5f                   	pop    %edi
f01060b4:	5d                   	pop    %ebp
f01060b5:	c3                   	ret    

f01060b6 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01060b6:	55                   	push   %ebp
f01060b7:	89 e5                	mov    %esp,%ebp
f01060b9:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01060bc:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01060c1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01060c4:	74 25                	je     f01060eb <env_run+0x35>
	{
		curenv = e ;
f01060c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01060c9:	a3 50 29 53 f0       	mov    %eax,0xf0532950
		curenv->env_runs++ ;
f01060ce:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01060d3:	8b 50 58             	mov    0x58(%eax),%edx
f01060d6:	42                   	inc    %edx
f01060d7:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f01060da:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01060df:	8b 40 60             	mov    0x60(%eax),%eax
f01060e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060e8:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01060eb:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01060f0:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01060f7:	e8 32 09 00 00       	call   f0106a2e <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01060fc:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0106101:	83 ec 0c             	sub    $0xc,%esp
f0106104:	50                   	push   %eax
f0106105:	e8 ff 07 00 00       	call   f0106909 <env_pop_tf>

f010610a <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f010610a:	55                   	push   %ebp
f010610b:	89 e5                	mov    %esp,%ebp
f010610d:	83 ec 08             	sub    $0x8,%esp
	panic("This function is not required\n");
f0106110:	83 ec 04             	sub    $0x4,%esp
f0106113:	68 34 a6 11 f0       	push   $0xf011a634
f0106118:	68 bc 02 00 00       	push   $0x2bc
f010611d:	68 2f a5 11 f0       	push   $0xf011a52f
f0106122:	e8 4f a0 ff ff       	call   f0100176 <_panic>

f0106127 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f0106127:	55                   	push   %ebp
f0106128:	89 e5                	mov    %esp,%ebp
f010612a:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010612d:	e8 65 22 00 00       	call   f0108397 <isBufferingEnabled>
f0106132:	85 c0                	test   %eax,%eax
f0106134:	74 10                	je     f0106146 <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f0106136:	83 ec 0c             	sub    $0xc,%esp
f0106139:	ff 75 08             	pushl  0x8(%ebp)
f010613c:	e8 33 00 00 00       	call   f0106174 <__env_free_with_buffering>
f0106141:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f0106144:	eb 0e                	jmp    f0106154 <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f0106146:	83 ec 0c             	sub    $0xc,%esp
f0106149:	ff 75 08             	pushl  0x8(%ebp)
f010614c:	e8 06 00 00 00       	call   f0106157 <env_free>
f0106151:	83 c4 10             	add    $0x10,%esp
	}
}
f0106154:	90                   	nop
f0106155:	c9                   	leave  
f0106156:	c3                   	ret    

f0106157 <env_free>:
void env_free(struct Env *e) {
f0106157:	55                   	push   %ebp
f0106158:	89 e5                	mov    %esp,%ebp
f010615a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS 2] Exit [env_free()]

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("env_free() is not implemented yet...!!");
f010615d:	83 ec 04             	sub    $0x4,%esp
f0106160:	68 54 a6 11 f0       	push   $0xf011a654
f0106165:	68 d4 02 00 00       	push   $0x2d4
f010616a:	68 2f a5 11 f0       	push   $0xf011a52f
f010616f:	e8 02 a0 ff ff       	call   f0100176 <_panic>

f0106174 <__env_free_with_buffering>:
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
}


void __env_free_with_buffering(struct Env *e)
{
f0106174:	55                   	push   %ebp
f0106175:	89 e5                	mov    %esp,%ebp
f0106177:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f010617a:	83 ec 0c             	sub    $0xc,%esp
f010617d:	ff 75 08             	pushl  0x8(%ebp)
f0106180:	e8 85 ff ff ff       	call   f010610a <__remove_pws_user_pages>
f0106185:	83 c4 10             	add    $0x10,%esp

}
f0106188:	90                   	nop
f0106189:	c9                   	leave  
f010618a:	c3                   	ret    

f010618b <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010618b:	55                   	push   %ebp
f010618c:	89 e5                	mov    %esp,%ebp
f010618e:	53                   	push   %ebx
f010618f:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0106192:	c7 45 f8 f1 04 00 00 	movl   $0x4f1,-0x8(%ebp)
	for(; iEnv >= 0; iEnv--)
f0106199:	e9 52 01 00 00       	jmp    f01062f0 <env_init+0x165>
	{
		envs[iEnv].env_status = ENV_FREE;
f010619e:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f01061a4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061a7:	89 d0                	mov    %edx,%eax
f01061a9:	c1 e0 02             	shl    $0x2,%eax
f01061ac:	01 d0                	add    %edx,%eax
f01061ae:	01 c0                	add    %eax,%eax
f01061b0:	01 d0                	add    %edx,%eax
f01061b2:	01 c0                	add    %eax,%eax
f01061b4:	01 d0                	add    %edx,%eax
f01061b6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01061bd:	01 d0                	add    %edx,%eax
f01061bf:	c1 e0 02             	shl    $0x2,%eax
f01061c2:	01 c8                	add    %ecx,%eax
f01061c4:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f01061cb:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f01061d1:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061d4:	89 d0                	mov    %edx,%eax
f01061d6:	c1 e0 02             	shl    $0x2,%eax
f01061d9:	01 d0                	add    %edx,%eax
f01061db:	01 c0                	add    %eax,%eax
f01061dd:	01 d0                	add    %edx,%eax
f01061df:	01 c0                	add    %eax,%eax
f01061e1:	01 d0                	add    %edx,%eax
f01061e3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01061ea:	01 d0                	add    %edx,%eax
f01061ec:	c1 e0 02             	shl    $0x2,%eax
f01061ef:	01 c8                	add    %ecx,%eax
f01061f1:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01061f8:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f01061fe:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106201:	89 d0                	mov    %edx,%eax
f0106203:	c1 e0 02             	shl    $0x2,%eax
f0106206:	01 d0                	add    %edx,%eax
f0106208:	01 c0                	add    %eax,%eax
f010620a:	01 d0                	add    %edx,%eax
f010620c:	01 c0                	add    %eax,%eax
f010620e:	01 d0                	add    %edx,%eax
f0106210:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106217:	01 d0                	add    %edx,%eax
f0106219:	c1 e0 02             	shl    $0x2,%eax
f010621c:	01 c8                	add    %ecx,%eax
f010621e:	8b 15 54 29 53 f0    	mov    0xf0532954,%edx
f0106224:	89 50 44             	mov    %edx,0x44(%eax)
f0106227:	8b 40 44             	mov    0x44(%eax),%eax
f010622a:	85 c0                	test   %eax,%eax
f010622c:	74 31                	je     f010625f <env_init+0xd4>
f010622e:	8b 0d 54 29 53 f0    	mov    0xf0532954,%ecx
f0106234:	8b 1d 4c 29 53 f0    	mov    0xf053294c,%ebx
f010623a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010623d:	89 d0                	mov    %edx,%eax
f010623f:	c1 e0 02             	shl    $0x2,%eax
f0106242:	01 d0                	add    %edx,%eax
f0106244:	01 c0                	add    %eax,%eax
f0106246:	01 d0                	add    %edx,%eax
f0106248:	01 c0                	add    %eax,%eax
f010624a:	01 d0                	add    %edx,%eax
f010624c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106253:	01 d0                	add    %edx,%eax
f0106255:	c1 e0 02             	shl    $0x2,%eax
f0106258:	01 d8                	add    %ebx,%eax
f010625a:	89 41 48             	mov    %eax,0x48(%ecx)
f010625d:	eb 2b                	jmp    f010628a <env_init+0xff>
f010625f:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f0106265:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106268:	89 d0                	mov    %edx,%eax
f010626a:	c1 e0 02             	shl    $0x2,%eax
f010626d:	01 d0                	add    %edx,%eax
f010626f:	01 c0                	add    %eax,%eax
f0106271:	01 d0                	add    %edx,%eax
f0106273:	01 c0                	add    %eax,%eax
f0106275:	01 d0                	add    %edx,%eax
f0106277:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010627e:	01 d0                	add    %edx,%eax
f0106280:	c1 e0 02             	shl    $0x2,%eax
f0106283:	01 c8                	add    %ecx,%eax
f0106285:	a3 58 29 53 f0       	mov    %eax,0xf0532958
f010628a:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f0106290:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106293:	89 d0                	mov    %edx,%eax
f0106295:	c1 e0 02             	shl    $0x2,%eax
f0106298:	01 d0                	add    %edx,%eax
f010629a:	01 c0                	add    %eax,%eax
f010629c:	01 d0                	add    %edx,%eax
f010629e:	01 c0                	add    %eax,%eax
f01062a0:	01 d0                	add    %edx,%eax
f01062a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062a9:	01 d0                	add    %edx,%eax
f01062ab:	c1 e0 02             	shl    $0x2,%eax
f01062ae:	01 c8                	add    %ecx,%eax
f01062b0:	a3 54 29 53 f0       	mov    %eax,0xf0532954
f01062b5:	8b 0d 4c 29 53 f0    	mov    0xf053294c,%ecx
f01062bb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062be:	89 d0                	mov    %edx,%eax
f01062c0:	c1 e0 02             	shl    $0x2,%eax
f01062c3:	01 d0                	add    %edx,%eax
f01062c5:	01 c0                	add    %eax,%eax
f01062c7:	01 d0                	add    %edx,%eax
f01062c9:	01 c0                	add    %eax,%eax
f01062cb:	01 d0                	add    %edx,%eax
f01062cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062d4:	01 d0                	add    %edx,%eax
f01062d6:	c1 e0 02             	shl    $0x2,%eax
f01062d9:	01 c8                	add    %ecx,%eax
f01062db:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01062e2:	a1 60 29 53 f0       	mov    0xf0532960,%eax
f01062e7:	40                   	inc    %eax
f01062e8:	a3 60 29 53 f0       	mov    %eax,0xf0532960
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01062ed:	ff 4d f8             	decl   -0x8(%ebp)
f01062f0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01062f4:	0f 89 a4 fe ff ff    	jns    f010619e <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01062fa:	90                   	nop
f01062fb:	83 c4 10             	add    $0x10,%esp
f01062fe:	5b                   	pop    %ebx
f01062ff:	5d                   	pop    %ebp
f0106300:	c3                   	ret    

f0106301 <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f0106301:	55                   	push   %ebp
f0106302:	89 e5                	mov    %esp,%ebp
f0106304:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0106307:	8b 45 08             	mov    0x8(%ebp),%eax
f010630a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010630d:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f0106313:	8b 45 08             	mov    0x8(%ebp),%eax
f0106316:	8b 40 60             	mov    0x60(%eax),%eax
f0106319:	83 c8 03             	or     $0x3,%eax
f010631c:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010631e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106321:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106324:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010632a:	8b 45 08             	mov    0x8(%ebp),%eax
f010632d:	8b 40 60             	mov    0x60(%eax),%eax
f0106330:	83 c8 05             	or     $0x5,%eax
f0106333:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0106335:	8b 45 08             	mov    0x8(%ebp),%eax
f0106338:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010633f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106342:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0106349:	8b 45 08             	mov    0x8(%ebp),%eax
f010634c:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0106353:	8b 45 08             	mov    0x8(%ebp),%eax
f0106356:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f010635d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106360:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106363:	05 00 10 00 00       	add    $0x1000,%eax
f0106368:	25 0e fb ff ff       	and    $0xfffffb0e,%eax
f010636d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f0106370:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106374:	7f 07                	jg     f010637d <complete_environment_initialization+0x7c>
		generation = 1 << ENVGENSHIFT;
f0106376:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010637d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106380:	8b 15 4c 29 53 f0    	mov    0xf053294c,%edx
f0106386:	29 d0                	sub    %edx,%eax
f0106388:	c1 f8 02             	sar    $0x2,%eax
f010638b:	89 c2                	mov    %eax,%edx
f010638d:	89 d0                	mov    %edx,%eax
f010638f:	01 c0                	add    %eax,%eax
f0106391:	01 d0                	add    %edx,%eax
f0106393:	c1 e0 09             	shl    $0x9,%eax
f0106396:	29 d0                	sub    %edx,%eax
f0106398:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010639f:	01 c8                	add    %ecx,%eax
f01063a1:	c1 e0 03             	shl    $0x3,%eax
f01063a4:	01 d0                	add    %edx,%eax
f01063a6:	89 c1                	mov    %eax,%ecx
f01063a8:	c1 e1 05             	shl    $0x5,%ecx
f01063ab:	01 c8                	add    %ecx,%eax
f01063ad:	01 c0                	add    %eax,%eax
f01063af:	01 d0                	add    %edx,%eax
f01063b1:	01 c0                	add    %eax,%eax
f01063b3:	01 d0                	add    %edx,%eax
f01063b5:	c1 e0 02             	shl    $0x2,%eax
f01063b8:	01 d0                	add    %edx,%eax
f01063ba:	c1 e0 04             	shl    $0x4,%eax
f01063bd:	01 d0                	add    %edx,%eax
f01063bf:	f7 d8                	neg    %eax
f01063c1:	0b 45 f4             	or     -0xc(%ebp),%eax
f01063c4:	89 c2                	mov    %eax,%edx
f01063c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01063c9:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f01063cc:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01063d1:	85 c0                	test   %eax,%eax
f01063d3:	75 0c                	jne    f01063e1 <complete_environment_initialization+0xe0>
		e->env_parent_id = 0;//no parent;
f01063d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01063d8:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f01063df:	eb 0e                	jmp    f01063ef <complete_environment_initialization+0xee>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f01063e1:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01063e6:	8b 50 4c             	mov    0x4c(%eax),%edx
f01063e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063ec:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f01063ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01063f2:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f01063f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fc:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0106403:	8b 45 08             	mov    0x8(%ebp),%eax
f0106406:	83 ec 04             	sub    $0x4,%esp
f0106409:	6a 44                	push   $0x44
f010640b:	6a 00                	push   $0x0
f010640d:	50                   	push   %eax
f010640e:	e8 e4 11 01 00       	call   f01175f7 <memset>
f0106413:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0106416:	8b 45 08             	mov    0x8(%ebp),%eax
f0106419:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010641f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106422:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0106428:	8b 45 08             	mov    0x8(%ebp),%eax
f010642b:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0106431:	8b 45 08             	mov    0x8(%ebp),%eax
f0106434:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010643b:	8b 45 08             	mov    0x8(%ebp),%eax
f010643e:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f0106444:	8b 45 08             	mov    0x8(%ebp),%eax
f0106447:	8b 40 38             	mov    0x38(%eax),%eax
f010644a:	80 cc 02             	or     $0x2,%ah
f010644d:	89 c2                	mov    %eax,%edx
f010644f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106452:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f0106455:	8b 45 08             	mov    0x8(%ebp),%eax
f0106458:	8b 40 44             	mov    0x44(%eax),%eax
f010645b:	85 c0                	test   %eax,%eax
f010645d:	74 11                	je     f0106470 <complete_environment_initialization+0x16f>
f010645f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106462:	8b 40 44             	mov    0x44(%eax),%eax
f0106465:	8b 55 08             	mov    0x8(%ebp),%edx
f0106468:	8b 52 48             	mov    0x48(%edx),%edx
f010646b:	89 50 48             	mov    %edx,0x48(%eax)
f010646e:	eb 0b                	jmp    f010647b <complete_environment_initialization+0x17a>
f0106470:	8b 45 08             	mov    0x8(%ebp),%eax
f0106473:	8b 40 48             	mov    0x48(%eax),%eax
f0106476:	a3 58 29 53 f0       	mov    %eax,0xf0532958
f010647b:	8b 45 08             	mov    0x8(%ebp),%eax
f010647e:	8b 40 48             	mov    0x48(%eax),%eax
f0106481:	85 c0                	test   %eax,%eax
f0106483:	74 11                	je     f0106496 <complete_environment_initialization+0x195>
f0106485:	8b 45 08             	mov    0x8(%ebp),%eax
f0106488:	8b 40 48             	mov    0x48(%eax),%eax
f010648b:	8b 55 08             	mov    0x8(%ebp),%edx
f010648e:	8b 52 44             	mov    0x44(%edx),%edx
f0106491:	89 50 44             	mov    %edx,0x44(%eax)
f0106494:	eb 0b                	jmp    f01064a1 <complete_environment_initialization+0x1a0>
f0106496:	8b 45 08             	mov    0x8(%ebp),%eax
f0106499:	8b 40 44             	mov    0x44(%eax),%eax
f010649c:	a3 54 29 53 f0       	mov    %eax,0xf0532954
f01064a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01064a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01064ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01064ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01064b5:	a1 60 29 53 f0       	mov    0xf0532960,%eax
f01064ba:	48                   	dec    %eax
f01064bb:	a3 60 29 53 f0       	mov    %eax,0xf0532960
	return ;
f01064c0:	90                   	nop
}
f01064c1:	c9                   	leave  
f01064c2:	c3                   	ret    

f01064c3 <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f01064c3:	55                   	push   %ebp
f01064c4:	89 e5                	mov    %esp,%ebp
f01064c6:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f01064c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064cc:	8b 40 10             	mov    0x10(%eax),%eax
f01064cf:	8d 48 01             	lea    0x1(%eax),%ecx
f01064d2:	8b 55 08             	mov    0x8(%ebp),%edx
f01064d5:	89 4a 10             	mov    %ecx,0x10(%edx)
f01064d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01064db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01064de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01064e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01064e4:	8b 00                	mov    (%eax),%eax
f01064e6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01064eb:	74 17                	je     f0106504 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f01064ed:	83 ec 04             	sub    $0x4,%esp
f01064f0:	68 7b a6 11 f0       	push   $0xf011a67b
f01064f5:	68 3f 03 00 00       	push   $0x33f
f01064fa:	68 2f a5 11 f0       	push   $0xf011a52f
f01064ff:	e8 72 9c ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106504:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106507:	8b 50 1c             	mov    0x1c(%eax),%edx
f010650a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010650d:	01 d0                	add    %edx,%eax
f010650f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0106512:	eb 0f                	jmp    f0106523 <PROGRAM_SEGMENT_NEXT+0x60>
f0106514:	8b 45 08             	mov    0x8(%ebp),%eax
f0106517:	8b 40 10             	mov    0x10(%eax),%eax
f010651a:	8d 50 01             	lea    0x1(%eax),%edx
f010651d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106520:	89 50 10             	mov    %edx,0x10(%eax)
f0106523:	8b 45 08             	mov    0x8(%ebp),%eax
f0106526:	8b 40 10             	mov    0x10(%eax),%eax
f0106529:	c1 e0 05             	shl    $0x5,%eax
f010652c:	89 c2                	mov    %eax,%edx
f010652e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106531:	01 d0                	add    %edx,%eax
f0106533:	8b 00                	mov    (%eax),%eax
f0106535:	83 f8 01             	cmp    $0x1,%eax
f0106538:	74 13                	je     f010654d <PROGRAM_SEGMENT_NEXT+0x8a>
f010653a:	8b 45 08             	mov    0x8(%ebp),%eax
f010653d:	8b 50 10             	mov    0x10(%eax),%edx
f0106540:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106543:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106546:	0f b7 c0             	movzwl %ax,%eax
f0106549:	39 c2                	cmp    %eax,%edx
f010654b:	72 c7                	jb     f0106514 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010654d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106550:	8b 40 10             	mov    0x10(%eax),%eax
f0106553:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0106556:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106559:	8b 40 2c             	mov    0x2c(%eax),%eax
f010655c:	0f b7 c0             	movzwl %ax,%eax
f010655f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106562:	7e 63                	jle    f01065c7 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106564:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106567:	c1 e0 05             	shl    $0x5,%eax
f010656a:	89 c2                	mov    %eax,%edx
f010656c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010656f:	01 d0                	add    %edx,%eax
f0106571:	8b 50 04             	mov    0x4(%eax),%edx
f0106574:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106577:	01 c2                	add    %eax,%edx
f0106579:	8b 45 08             	mov    0x8(%ebp),%eax
f010657c:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010657e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106581:	c1 e0 05             	shl    $0x5,%eax
f0106584:	89 c2                	mov    %eax,%edx
f0106586:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106589:	01 d0                	add    %edx,%eax
f010658b:	8b 50 14             	mov    0x14(%eax),%edx
f010658e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106591:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f0106594:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106597:	c1 e0 05             	shl    $0x5,%eax
f010659a:	89 c2                	mov    %eax,%edx
f010659c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010659f:	01 d0                	add    %edx,%eax
f01065a1:	8b 50 10             	mov    0x10(%eax),%edx
f01065a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01065a7:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f01065aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065ad:	c1 e0 05             	shl    $0x5,%eax
f01065b0:	89 c2                	mov    %eax,%edx
f01065b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065b5:	01 d0                	add    %edx,%eax
f01065b7:	8b 40 08             	mov    0x8(%eax),%eax
f01065ba:	89 c2                	mov    %eax,%edx
f01065bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01065bf:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f01065c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01065c5:	eb 05                	jmp    f01065cc <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f01065c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01065cc:	c9                   	leave  
f01065cd:	c3                   	ret    

f01065ce <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f01065ce:	55                   	push   %ebp
f01065cf:	89 e5                	mov    %esp,%ebp
f01065d1:	57                   	push   %edi
f01065d2:	56                   	push   %esi
f01065d3:	53                   	push   %ebx
f01065d4:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f01065d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01065de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01065e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01065e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01065e7:	8b 00                	mov    (%eax),%eax
f01065e9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01065ee:	74 17                	je     f0106607 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f01065f0:	83 ec 04             	sub    $0x4,%esp
f01065f3:	68 7b a6 11 f0       	push   $0xf011a67b
f01065f8:	68 58 03 00 00       	push   $0x358
f01065fd:	68 2f a5 11 f0       	push   $0xf011a52f
f0106602:	e8 6f 9b ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010660a:	8b 50 1c             	mov    0x1c(%eax),%edx
f010660d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f0106615:	eb 07                	jmp    f010661e <PROGRAM_SEGMENT_FIRST+0x50>
f0106617:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010661a:	40                   	inc    %eax
f010661b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010661e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106621:	c1 e0 05             	shl    $0x5,%eax
f0106624:	89 c2                	mov    %eax,%edx
f0106626:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106629:	01 d0                	add    %edx,%eax
f010662b:	8b 00                	mov    (%eax),%eax
f010662d:	83 f8 01             	cmp    $0x1,%eax
f0106630:	74 10                	je     f0106642 <PROGRAM_SEGMENT_FIRST+0x74>
f0106632:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106638:	8b 40 2c             	mov    0x2c(%eax),%eax
f010663b:	0f b7 c0             	movzwl %ax,%eax
f010663e:	39 c2                	cmp    %eax,%edx
f0106640:	72 d5                	jb     f0106617 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f0106642:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106645:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f0106648:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010664b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010664e:	0f b7 c0             	movzwl %ax,%eax
f0106651:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0106654:	7e 68                	jle    f01066be <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106656:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106659:	c1 e0 05             	shl    $0x5,%eax
f010665c:	89 c2                	mov    %eax,%edx
f010665e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106661:	01 d0                	add    %edx,%eax
f0106663:	8b 50 04             	mov    0x4(%eax),%edx
f0106666:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106669:	01 d0                	add    %edx,%eax
f010666b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010666e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106671:	c1 e0 05             	shl    $0x5,%eax
f0106674:	89 c2                	mov    %eax,%edx
f0106676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106679:	01 d0                	add    %edx,%eax
f010667b:	8b 40 14             	mov    0x14(%eax),%eax
f010667e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f0106681:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106684:	c1 e0 05             	shl    $0x5,%eax
f0106687:	89 c2                	mov    %eax,%edx
f0106689:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668c:	01 d0                	add    %edx,%eax
f010668e:	8b 40 10             	mov    0x10(%eax),%eax
f0106691:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f0106694:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106697:	c1 e0 05             	shl    $0x5,%eax
f010669a:	89 c2                	mov    %eax,%edx
f010669c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010669f:	01 d0                	add    %edx,%eax
f01066a1:	8b 40 08             	mov    0x8(%eax),%eax
f01066a4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f01066a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01066aa:	89 c3                	mov    %eax,%ebx
f01066ac:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01066af:	ba 05 00 00 00       	mov    $0x5,%edx
f01066b4:	89 df                	mov    %ebx,%edi
f01066b6:	89 c6                	mov    %eax,%esi
f01066b8:	89 d1                	mov    %edx,%ecx
f01066ba:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01066bc:	eb 1c                	jmp    f01066da <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f01066be:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f01066c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01066c8:	89 c3                	mov    %eax,%ebx
f01066ca:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01066cd:	ba 05 00 00 00       	mov    $0x5,%edx
f01066d2:	89 df                	mov    %ebx,%edi
f01066d4:	89 c6                	mov    %eax,%esi
f01066d6:	89 d1                	mov    %edx,%ecx
f01066d8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01066da:	8b 45 08             	mov    0x8(%ebp),%eax
f01066dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01066e0:	5b                   	pop    %ebx
f01066e1:	5e                   	pop    %esi
f01066e2:	5f                   	pop    %edi
f01066e3:	5d                   	pop    %ebp
f01066e4:	c2 04 00             	ret    $0x4

f01066e7 <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f01066e7:	55                   	push   %ebp
f01066e8:	89 e5                	mov    %esp,%ebp
f01066ea:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f01066ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01066f4:	eb 29                	jmp    f010671f <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f01066f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066f9:	89 d0                	mov    %edx,%eax
f01066fb:	01 c0                	add    %eax,%eax
f01066fd:	01 d0                	add    %edx,%eax
f01066ff:	c1 e0 02             	shl    $0x2,%eax
f0106702:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
f0106707:	8b 00                	mov    (%eax),%eax
f0106709:	83 ec 08             	sub    $0x8,%esp
f010670c:	50                   	push   %eax
f010670d:	ff 75 08             	pushl  0x8(%ebp)
f0106710:	e8 00 0e 01 00       	call   f0117515 <strcmp>
f0106715:	83 c4 10             	add    $0x10,%esp
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 0f                	je     f010672b <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010671c:	ff 45 f4             	incl   -0xc(%ebp)
f010671f:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f0106724:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106727:	7c cd                	jl     f01066f6 <get_user_program_info+0xf>
f0106729:	eb 01                	jmp    f010672c <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010672b:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010672c:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f0106731:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106734:	75 1a                	jne    f0106750 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0106736:	83 ec 08             	sub    $0x8,%esp
f0106739:	ff 75 08             	pushl  0x8(%ebp)
f010673c:	68 91 a6 11 f0       	push   $0xf011a691
f0106741:	e8 50 06 00 00       	call   f0106d96 <cprintf>
f0106746:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106749:	b8 00 00 00 00       	mov    $0x0,%eax
f010674e:	eb 11                	jmp    f0106761 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0106750:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106753:	89 d0                	mov    %edx,%eax
f0106755:	01 c0                	add    %eax,%eax
f0106757:	01 d0                	add    %edx,%eax
f0106759:	c1 e0 02             	shl    $0x2,%eax
f010675c:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
}
f0106761:	c9                   	leave  
f0106762:	c3                   	ret    

f0106763 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0106763:	55                   	push   %ebp
f0106764:	89 e5                	mov    %esp,%ebp
f0106766:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106770:	eb 30                	jmp    f01067a2 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0106772:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106775:	89 d0                	mov    %edx,%eax
f0106777:	01 c0                	add    %eax,%eax
f0106779:	01 d0                	add    %edx,%eax
f010677b:	c1 e0 02             	shl    $0x2,%eax
f010677e:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
f0106783:	8b 00                	mov    (%eax),%eax
f0106785:	8b 55 08             	mov    0x8(%ebp),%edx
f0106788:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f010678e:	83 ec 08             	sub    $0x8,%esp
f0106791:	50                   	push   %eax
f0106792:	52                   	push   %edx
f0106793:	e8 7d 0d 01 00       	call   f0117515 <strcmp>
f0106798:	83 c4 10             	add    $0x10,%esp
f010679b:	85 c0                	test   %eax,%eax
f010679d:	74 0f                	je     f01067ae <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010679f:	ff 45 f4             	incl   -0xc(%ebp)
f01067a2:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01067a7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067aa:	7c c6                	jl     f0106772 <get_user_program_info_by_env+0xf>
f01067ac:	eb 01                	jmp    f01067af <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f01067ae:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f01067af:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01067b4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067b7:	75 17                	jne    f01067d0 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f01067b9:	83 ec 0c             	sub    $0xc,%esp
f01067bc:	68 ac a6 11 f0       	push   $0xf011a6ac
f01067c1:	e8 d0 05 00 00       	call   f0106d96 <cprintf>
f01067c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f01067c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01067ce:	eb 11                	jmp    f01067e1 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f01067d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067d3:	89 d0                	mov    %edx,%eax
f01067d5:	01 c0                	add    %eax,%eax
f01067d7:	01 d0                	add    %edx,%eax
f01067d9:	c1 e0 02             	shl    $0x2,%eax
f01067dc:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
}
f01067e1:	c9                   	leave  
f01067e2:	c3                   	ret    

f01067e3 <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f01067e3:	55                   	push   %ebp
f01067e4:	89 e5                	mov    %esp,%ebp
f01067e6:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01067e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01067ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01067ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01067f2:	8b 00                	mov    (%eax),%eax
f01067f4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01067f9:	74 17                	je     f0106812 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f01067fb:	83 ec 04             	sub    $0x4,%esp
f01067fe:	68 7b a6 11 f0       	push   $0xf011a67b
f0106803:	68 8d 03 00 00       	push   $0x38d
f0106808:	68 2f a5 11 f0       	push   $0xf011a52f
f010680d:	e8 64 99 ff ff       	call   f0100176 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0106812:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106815:	8b 40 18             	mov    0x18(%eax),%eax
f0106818:	89 c2                	mov    %eax,%edx
f010681a:	8b 45 08             	mov    0x8(%ebp),%eax
f010681d:	89 50 30             	mov    %edx,0x30(%eax)
}
f0106820:	90                   	nop
f0106821:	c9                   	leave  
f0106822:	c3                   	ret    

f0106823 <env_exit>:



//it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0106823:	55                   	push   %ebp
f0106824:	89 e5                	mov    %esp,%ebp
f0106826:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106829:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010682e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106831:	83 ec 0c             	sub    $0xc,%esp
f0106834:	50                   	push   %eax
f0106835:	e8 37 2f 00 00       	call   f0109771 <sched_exit_env>
f010683a:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010683d:	e8 85 24 00 00       	call   f0108cc7 <fos_scheduler>

f0106842 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
/*2015*///obsolete! we run on a scheduler!!
void env_destroy(struct Env *e)
{
f0106842:	55                   	push   %ebp
f0106843:	89 e5                	mov    %esp,%ebp
f0106845:	83 ec 08             	sub    $0x8,%esp
	panic("env_destroy() is obsoleted since 2015!");
f0106848:	83 ec 04             	sub    $0x4,%esp
f010684b:	68 c4 a6 11 f0       	push   $0xf011a6c4
f0106850:	68 a3 03 00 00       	push   $0x3a3
f0106855:	68 2f a5 11 f0       	push   $0xf011a52f
f010685a:	e8 17 99 ff ff       	call   f0100176 <_panic>

f010685f <cleanup_buffers>:
		run_command_prompt();
	 */
}

void cleanup_buffers(struct Env* e)
{
f010685f:	55                   	push   %ebp
f0106860:	89 e5                	mov    %esp,%ebp
f0106862:	83 ec 18             	sub    $0x18,%esp
	// remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f0106865:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010686c:	a1 a0 16 55 f0       	mov    0xf05516a0,%eax
f0106871:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106874:	eb 4d                	jmp    f01068c3 <cleanup_buffers+0x64>
	{
		if(ptr_fi->environment == e)
f0106876:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106879:	8b 40 10             	mov    0x10(%eax),%eax
f010687c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010687f:	75 3a                	jne    f01068bb <cleanup_buffers+0x5c>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f0106881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106884:	8b 50 0c             	mov    0xc(%eax),%edx
f0106887:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010688a:	8b 40 10             	mov    0x10(%eax),%eax
f010688d:	83 ec 08             	sub    $0x8,%esp
f0106890:	52                   	push   %edx
f0106891:	50                   	push   %eax
f0106892:	e8 17 e6 ff ff       	call   f0104eae <pt_clear_page_table_entry>
f0106897:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			bufferlist_remove_page(&modified_frame_list, ptr_fi);
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	ff 75 f4             	pushl  -0xc(%ebp)
f01068a0:	68 a0 16 55 f0       	push   $0xf05516a0
f01068a5:	e8 f2 e2 ff ff       	call   f0104b9c <bufferlist_remove_page>
f01068aa:	83 c4 10             	add    $0x10,%esp

			free_frame(ptr_fi);
f01068ad:	83 ec 0c             	sub    $0xc,%esp
f01068b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01068b3:	e8 d0 d1 ff ff       	call   f0103a88 <free_frame>
f01068b8:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f01068bb:	a1 a8 16 55 f0       	mov    0xf05516a8,%eax
f01068c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01068c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01068c7:	74 07                	je     f01068d0 <cleanup_buffers+0x71>
f01068c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068cc:	8b 00                	mov    (%eax),%eax
f01068ce:	eb 05                	jmp    f01068d5 <cleanup_buffers+0x76>
f01068d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01068d5:	a3 a8 16 55 f0       	mov    %eax,0xf05516a8
f01068da:	a1 a8 16 55 f0       	mov    0xf05516a8,%eax
f01068df:	85 c0                	test   %eax,%eax
f01068e1:	75 93                	jne    f0106876 <cleanup_buffers+0x17>
f01068e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01068e7:	75 8d                	jne    f0106876 <cleanup_buffers+0x17>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f01068e9:	90                   	nop
f01068ea:	c9                   	leave  
f01068eb:	c3                   	ret    

f01068ec <env_run_cmd_prmpt>:


/*2015*///obsolete! use env_exit() instead! it add the exited env to the EXIT list, then reinvoke the scheduler
void env_run_cmd_prmpt()
{
f01068ec:	55                   	push   %ebp
f01068ed:	89 e5                	mov    %esp,%ebp
f01068ef:	83 ec 08             	sub    $0x8,%esp
	panic("env_run_cmd_prmpt() is obsoleted since 2015! use env_exit() instead");
f01068f2:	83 ec 04             	sub    $0x4,%esp
f01068f5:	68 ec a6 11 f0       	push   $0xf011a6ec
f01068fa:	68 d0 03 00 00       	push   $0x3d0
f01068ff:	68 2f a5 11 f0       	push   $0xf011a52f
f0106904:	e8 6d 98 ff ff       	call   f0100176 <_panic>

f0106909 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0106909:	55                   	push   %ebp
f010690a:	89 e5                	mov    %esp,%ebp
f010690c:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010690f:	8b 65 08             	mov    0x8(%ebp),%esp
f0106912:	61                   	popa   
f0106913:	07                   	pop    %es
f0106914:	1f                   	pop    %ds
f0106915:	83 c4 08             	add    $0x8,%esp
f0106918:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0106919:	83 ec 04             	sub    $0x4,%esp
f010691c:	68 30 a7 11 f0       	push   $0xf011a730
f0106921:	68 e2 03 00 00       	push   $0x3e2
f0106926:	68 2f a5 11 f0       	push   $0xf011a52f
f010692b:	e8 46 98 ff ff       	call   f0100176 <_panic>

f0106930 <mc146818_read>:

#include <inc/assert.h>

unsigned
mc146818_read(unsigned reg)
{
f0106930:	55                   	push   %ebp
f0106931:	89 e5                	mov    %esp,%ebp
f0106933:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106936:	8b 45 08             	mov    0x8(%ebp),%eax
f0106939:	0f b6 c0             	movzbl %al,%eax
f010693c:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106943:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106946:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106949:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010694c:	ee                   	out    %al,(%dx)
f010694d:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106954:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106957:	89 c2                	mov    %eax,%edx
f0106959:	ec                   	in     (%dx),%al
f010695a:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010695d:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0106960:	0f b6 c0             	movzbl %al,%eax
}
f0106963:	c9                   	leave  
f0106964:	c3                   	ret    

f0106965 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0106965:	55                   	push   %ebp
f0106966:	89 e5                	mov    %esp,%ebp
f0106968:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010696b:	8b 45 08             	mov    0x8(%ebp),%eax
f010696e:	0f b6 c0             	movzbl %al,%eax
f0106971:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106978:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010697b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010697e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106981:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0106982:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106985:	0f b6 c0             	movzbl %al,%eax
f0106988:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010698f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106992:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106995:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106998:	ee                   	out    %al,(%dx)
}
f0106999:	90                   	nop
f010699a:	c9                   	leave  
f010699b:	c3                   	ret    

f010699c <kclock_start>:


void
kclock_start(uint8 quantum)
{
f010699c:	55                   	push   %ebp
f010699d:	89 e5                	mov    %esp,%ebp
f010699f:	83 ec 28             	sub    $0x28,%esp
f01069a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a5:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01069a8:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01069af:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01069b3:	8a 45 f3             	mov    -0xd(%ebp),%al
f01069b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01069b9:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	kclock_set_quantum(quantum);
f01069ba:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01069be:	83 ec 0c             	sub    $0xc,%esp
f01069c1:	50                   	push   %eax
f01069c2:	e8 20 00 00 00       	call   f01069e7 <kclock_set_quantum>
f01069c7:	83 c4 10             	add    $0x10,%esp

	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("Timer Started: Counter0 Value = %d\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01069ca:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f01069d0:	0f b7 c0             	movzwl %ax,%eax
f01069d3:	25 fe ff 00 00       	and    $0xfffe,%eax
f01069d8:	83 ec 0c             	sub    $0xc,%esp
f01069db:	50                   	push   %eax
f01069dc:	e8 16 03 00 00       	call   f0106cf7 <irq_setmask_8259A>
f01069e1:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01069e4:	90                   	nop
f01069e5:	c9                   	leave  
f01069e6:	c3                   	ret    

f01069e7 <kclock_set_quantum>:
//==============

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01069e7:	55                   	push   %ebp
f01069e8:	89 e5                	mov    %esp,%ebp
f01069ea:	53                   	push   %ebx
f01069eb:	83 ec 14             	sub    $0x14,%esp
f01069ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f1:	88 45 f4             	mov    %al,-0xc(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
	{
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f01069f4:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f01069f8:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01069fd:	99                   	cltd   
f01069fe:	f7 fb                	idiv   %ebx
f0106a00:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106a06:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f0106a0a:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106a0f:	99                   	cltd   
f0106a10:	f7 fb                	idiv   %ebx
f0106a12:	89 c3                	mov    %eax,%ebx
f0106a14:	89 c8                	mov    %ecx,%eax
f0106a16:	99                   	cltd   
f0106a17:	f7 fb                	idiv   %ebx
f0106a19:	0f b7 c0             	movzwl %ax,%eax
f0106a1c:	83 ec 0c             	sub    $0xc,%esp
f0106a1f:	50                   	push   %eax
f0106a20:	e8 8f 00 00 00       	call   f0106ab4 <kclock_write_cnt0_LSB_first>
f0106a25:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0106a28:	90                   	nop
f0106a29:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106a2c:	c9                   	leave  
f0106a2d:	c3                   	ret    

f0106a2e <kclock_resume>:
//==============

void
kclock_resume(void)
{
f0106a2e:	55                   	push   %ebp
f0106a2f:	89 e5                	mov    %esp,%ebp
f0106a31:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0106a34:	e8 bd 00 00 00       	call   f0106af6 <kclock_read_cnt0>
f0106a39:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0106a3d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106a44:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106a48:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106a4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106a4e:	ee                   	out    %al,(%dx)
	//cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 10)
f0106a4f:	66 83 7d f6 09       	cmpw   $0x9,-0xa(%ebp)
f0106a54:	77 06                	ja     f0106a5c <kclock_resume+0x2e>
	{
		cnt0 = 10;
f0106a56:	66 c7 45 f6 0a 00    	movw   $0xa,-0xa(%ebp)
	}
	//================
//	outb(TIMER_CNTR0, (uint8)(cnt0 & 0x00FF));
//	outb(TIMER_CNTR0, (uint8)((cnt0>>8) & 0x00FF));
	kclock_write_cnt0_LSB_first(cnt0) ;
f0106a5c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a60:	83 ec 0c             	sub    $0xc,%esp
f0106a63:	50                   	push   %eax
f0106a64:	e8 4b 00 00 00       	call   f0106ab4 <kclock_write_cnt0_LSB_first>
f0106a69:	83 c4 10             	add    $0x10,%esp

//	cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106a6c:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106a72:	0f b7 c0             	movzwl %ax,%eax
f0106a75:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106a7a:	83 ec 0c             	sub    $0xc,%esp
f0106a7d:	50                   	push   %eax
f0106a7e:	e8 74 02 00 00       	call   f0106cf7 <irq_setmask_8259A>
f0106a83:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0106a86:	90                   	nop
f0106a87:	c9                   	leave  
f0106a88:	c3                   	ret    

f0106a89 <kclock_stop>:

void
kclock_stop(void)
{
f0106a89:	55                   	push   %ebp
f0106a8a:	89 e5                	mov    %esp,%ebp
f0106a8c:	83 ec 18             	sub    $0x18,%esp
f0106a8f:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106a96:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106a9a:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106a9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106aa0:	ee                   	out    %al,(%dx)
//		}
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Before Lag = %x, After lag = %x\n", cnt0_before, cnt0_after );


	irq_setmask_8259A(0xFFFF);
f0106aa1:	83 ec 0c             	sub    $0xc,%esp
f0106aa4:	68 ff ff 00 00       	push   $0xffff
f0106aa9:	e8 49 02 00 00       	call   f0106cf7 <irq_setmask_8259A>
f0106aae:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0106ab1:	90                   	nop
f0106ab2:	c9                   	leave  
f0106ab3:	c3                   	ret    

f0106ab4 <kclock_write_cnt0_LSB_first>:

//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0106ab4:	55                   	push   %ebp
f0106ab5:	89 e5                	mov    %esp,%ebp
f0106ab7:	83 ec 14             	sub    $0x14,%esp
f0106aba:	8b 45 08             	mov    0x8(%ebp),%eax
f0106abd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0106ac1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac4:	0f b6 c0             	movzbl %al,%eax
f0106ac7:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0106ace:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106ad1:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106ad4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106ad7:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0106ad8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106adb:	66 c1 e8 08          	shr    $0x8,%ax
f0106adf:	0f b6 c0             	movzbl %al,%eax
f0106ae2:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0106ae9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106aec:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106aef:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106af2:	ee                   	out    %al,(%dx)
}
f0106af3:	90                   	nop
f0106af4:	c9                   	leave  
f0106af5:	c3                   	ret    

f0106af6 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0106af6:	55                   	push   %ebp
f0106af7:	89 e5                	mov    %esp,%ebp
f0106af9:	83 ec 20             	sub    $0x20,%esp
f0106afc:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b03:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b06:	89 c2                	mov    %eax,%edx
f0106b08:	ec                   	in     (%dx),%al
f0106b09:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106b0c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106b0f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b12:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b1c:	89 c2                	mov    %eax,%edx
f0106b1e:	ec                   	in     (%dx),%al
f0106b1f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0106b22:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106b25:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106b28:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0106b2c:	c1 e0 08             	shl    $0x8,%eax
f0106b2f:	89 c2                	mov    %eax,%edx
f0106b31:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106b35:	09 d0                	or     %edx,%eax
f0106b37:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0106b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b3e:	c9                   	leave  
f0106b3f:	c3                   	ret    

f0106b40 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0106b40:	55                   	push   %ebp
f0106b41:	89 e5                	mov    %esp,%ebp
f0106b43:	83 ec 30             	sub    $0x30,%esp
f0106b46:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b50:	89 c2                	mov    %eax,%edx
f0106b52:	ec                   	in     (%dx),%al
f0106b53:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0106b56:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0106b59:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b5c:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106b63:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106b67:	8a 45 dc             	mov    -0x24(%ebp),%al
f0106b6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106b6d:	ee                   	out    %al,(%dx)
f0106b6e:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b78:	89 c2                	mov    %eax,%edx
f0106b7a:	ec                   	in     (%dx),%al
f0106b7b:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0106b7e:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106b81:	88 45 f3             	mov    %al,-0xd(%ebp)
f0106b84:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b8e:	89 c2                	mov    %eax,%edx
f0106b90:	ec                   	in     (%dx),%al
f0106b91:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0106b94:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106b97:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106b9a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0106b9e:	c1 e0 08             	shl    $0x8,%eax
f0106ba1:	89 c2                	mov    %eax,%edx
f0106ba3:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0106ba7:	09 d0                	or     %edx,%eax
f0106ba9:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0106bad:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106bb1:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0106bb8:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106bbb:	8a 45 df             	mov    -0x21(%ebp),%al
f0106bbe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106bc1:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0106bc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0106bc5:	c9                   	leave  
f0106bc6:	c3                   	ret    

f0106bc7 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106bc7:	55                   	push   %ebp
f0106bc8:	89 e5                	mov    %esp,%ebp
f0106bca:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106bcd:	c7 05 64 29 53 f0 01 	movl   $0x1,0xf0532964
f0106bd4:	00 00 00 
f0106bd7:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106bde:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f0106be2:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106be5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106be8:	ee                   	out    %al,(%dx)
f0106be9:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106bf0:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106bf4:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106bf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106bfa:	ee                   	out    %al,(%dx)
f0106bfb:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106c02:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106c06:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106c09:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106c0c:	ee                   	out    %al,(%dx)
f0106c0d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106c14:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106c18:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106c1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106c1e:	ee                   	out    %al,(%dx)
f0106c1f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106c26:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106c2a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106c2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106c30:	ee                   	out    %al,(%dx)
f0106c31:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106c38:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106c3c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106c3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106c42:	ee                   	out    %al,(%dx)
f0106c43:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106c4a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106c4e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106c51:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106c54:	ee                   	out    %al,(%dx)
f0106c55:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106c5c:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106c60:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106c63:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106c66:	ee                   	out    %al,(%dx)
f0106c67:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106c6e:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106c72:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106c75:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106c78:	ee                   	out    %al,(%dx)
f0106c79:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106c80:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106c84:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106c87:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106c8a:	ee                   	out    %al,(%dx)
f0106c8b:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106c92:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106c96:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106c99:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106c9c:	ee                   	out    %al,(%dx)
f0106c9d:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ca4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ca8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106cab:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106cae:	ee                   	out    %al,(%dx)
f0106caf:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106cb6:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106cba:	8a 45 be             	mov    -0x42(%ebp),%al
f0106cbd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106cc0:	ee                   	out    %al,(%dx)
f0106cc1:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106cc8:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ccc:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106ccf:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106cd2:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0106cd3:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106cd9:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106cdd:	74 15                	je     f0106cf4 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106cdf:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106ce5:	0f b7 c0             	movzwl %ax,%eax
f0106ce8:	83 ec 0c             	sub    $0xc,%esp
f0106ceb:	50                   	push   %eax
f0106cec:	e8 06 00 00 00       	call   f0106cf7 <irq_setmask_8259A>
f0106cf1:	83 c4 10             	add    $0x10,%esp
}
f0106cf4:	90                   	nop
f0106cf5:	c9                   	leave  
f0106cf6:	c3                   	ret    

f0106cf7 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106cf7:	55                   	push   %ebp
f0106cf8:	89 e5                	mov    %esp,%ebp
f0106cfa:	83 ec 14             	sub    $0x14,%esp
f0106cfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d00:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0106d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d07:	66 a3 1c ea 14 f0    	mov    %ax,0xf014ea1c
	if (!didinit)
f0106d0d:	a1 64 29 53 f0       	mov    0xf0532964,%eax
f0106d12:	85 c0                	test   %eax,%eax
f0106d14:	74 34                	je     f0106d4a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0106d16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d19:	0f b6 c0             	movzbl %al,%eax
f0106d1c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106d23:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106d26:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106d29:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106d2c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106d2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d30:	66 c1 e8 08          	shr    $0x8,%ax
f0106d34:	0f b6 c0             	movzbl %al,%eax
f0106d37:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106d3e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106d41:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106d44:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106d47:	ee                   	out    %al,(%dx)
f0106d48:	eb 01                	jmp    f0106d4b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106d4a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106d4b:	c9                   	leave  
f0106d4c:	c3                   	ret    

f0106d4d <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0106d4d:	55                   	push   %ebp
f0106d4e:	89 e5                	mov    %esp,%ebp
f0106d50:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0106d53:	83 ec 0c             	sub    $0xc,%esp
f0106d56:	ff 75 08             	pushl  0x8(%ebp)
f0106d59:	e8 90 9f ff ff       	call   f0100cee <cputchar>
f0106d5e:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0106d61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d64:	83 c0 04             	add    $0x4,%eax
f0106d67:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0106d6a:	90                   	nop
f0106d6b:	c9                   	leave  
f0106d6c:	c3                   	ret    

f0106d6d <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0106d6d:	55                   	push   %ebp
f0106d6e:	89 e5                	mov    %esp,%ebp
f0106d70:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0106d73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0106d7a:	ff 75 0c             	pushl  0xc(%ebp)
f0106d7d:	ff 75 08             	pushl  0x8(%ebp)
f0106d80:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106d83:	50                   	push   %eax
f0106d84:	68 4d 6d 10 f0       	push   $0xf0106d4d
f0106d89:	e8 cd ff 00 00       	call   f0116d5b <vprintfmt>
f0106d8e:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0106d91:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106d94:	c9                   	leave  
f0106d95:	c3                   	ret    

f0106d96 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0106d96:	55                   	push   %ebp
f0106d97:	89 e5                	mov    %esp,%ebp
f0106d99:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0106d9c:	8d 45 0c             	lea    0xc(%ebp),%eax
f0106d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0106da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106da5:	83 ec 08             	sub    $0x8,%esp
f0106da8:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dab:	50                   	push   %eax
f0106dac:	e8 bc ff ff ff       	call   f0106d6d <vcprintf>
f0106db1:	83 c4 10             	add    $0x10,%esp
f0106db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0106db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0106dba:	c9                   	leave  
f0106dbb:	c3                   	ret    

f0106dbc <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f0106dbc:	55                   	push   %ebp
f0106dbd:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f0106dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dc2:	83 f8 13             	cmp    $0x13,%eax
f0106dc5:	77 0c                	ja     f0106dd3 <trapname+0x17>
		return excnames[trapno];
f0106dc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dca:	8b 04 85 40 ab 11 f0 	mov    -0xfee54c0(,%eax,4),%eax
f0106dd1:	eb 12                	jmp    f0106de5 <trapname+0x29>
	if (trapno == T_SYSCALL)
f0106dd3:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0106dd7:	75 07                	jne    f0106de0 <trapname+0x24>
		return "System call";
f0106dd9:	b8 40 a7 11 f0       	mov    $0xf011a740,%eax
f0106dde:	eb 05                	jmp    f0106de5 <trapname+0x29>
	return "(unknown trap)";
f0106de0:	b8 4c a7 11 f0       	mov    $0xf011a74c,%eax
}
f0106de5:	5d                   	pop    %ebp
f0106de6:	c3                   	ret    

f0106de7 <idt_init>:


void
idt_init(void)
{
f0106de7:	55                   	push   %ebp
f0106de8:	89 e5                	mov    %esp,%ebp
f0106dea:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f0106ded:	b8 7a 87 10 f0       	mov    $0xf010877a,%eax
f0106df2:	66 a3 10 2a 53 f0    	mov    %ax,0xf0532a10
f0106df8:	66 c7 05 12 2a 53 f0 	movw   $0x8,0xf0532a12
f0106dff:	08 00 
f0106e01:	a0 14 2a 53 f0       	mov    0xf0532a14,%al
f0106e06:	83 e0 e0             	and    $0xffffffe0,%eax
f0106e09:	a2 14 2a 53 f0       	mov    %al,0xf0532a14
f0106e0e:	a0 14 2a 53 f0       	mov    0xf0532a14,%al
f0106e13:	83 e0 1f             	and    $0x1f,%eax
f0106e16:	a2 14 2a 53 f0       	mov    %al,0xf0532a14
f0106e1b:	a0 15 2a 53 f0       	mov    0xf0532a15,%al
f0106e20:	83 e0 f0             	and    $0xfffffff0,%eax
f0106e23:	83 c8 0e             	or     $0xe,%eax
f0106e26:	a2 15 2a 53 f0       	mov    %al,0xf0532a15
f0106e2b:	a0 15 2a 53 f0       	mov    0xf0532a15,%al
f0106e30:	83 e0 ef             	and    $0xffffffef,%eax
f0106e33:	a2 15 2a 53 f0       	mov    %al,0xf0532a15
f0106e38:	a0 15 2a 53 f0       	mov    0xf0532a15,%al
f0106e3d:	83 e0 9f             	and    $0xffffff9f,%eax
f0106e40:	a2 15 2a 53 f0       	mov    %al,0xf0532a15
f0106e45:	a0 15 2a 53 f0       	mov    0xf0532a15,%al
f0106e4a:	83 c8 80             	or     $0xffffff80,%eax
f0106e4d:	a2 15 2a 53 f0       	mov    %al,0xf0532a15
f0106e52:	b8 7a 87 10 f0       	mov    $0xf010877a,%eax
f0106e57:	c1 e8 10             	shr    $0x10,%eax
f0106e5a:	66 a3 16 2a 53 f0    	mov    %ax,0xf0532a16
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f0106e60:	b8 82 87 10 f0       	mov    $0xf0108782,%eax
f0106e65:	66 a3 20 2b 53 f0    	mov    %ax,0xf0532b20
f0106e6b:	66 c7 05 22 2b 53 f0 	movw   $0x8,0xf0532b22
f0106e72:	08 00 
f0106e74:	a0 24 2b 53 f0       	mov    0xf0532b24,%al
f0106e79:	83 e0 e0             	and    $0xffffffe0,%eax
f0106e7c:	a2 24 2b 53 f0       	mov    %al,0xf0532b24
f0106e81:	a0 24 2b 53 f0       	mov    0xf0532b24,%al
f0106e86:	83 e0 1f             	and    $0x1f,%eax
f0106e89:	a2 24 2b 53 f0       	mov    %al,0xf0532b24
f0106e8e:	a0 25 2b 53 f0       	mov    0xf0532b25,%al
f0106e93:	83 e0 f0             	and    $0xfffffff0,%eax
f0106e96:	83 c8 0e             	or     $0xe,%eax
f0106e99:	a2 25 2b 53 f0       	mov    %al,0xf0532b25
f0106e9e:	a0 25 2b 53 f0       	mov    0xf0532b25,%al
f0106ea3:	83 e0 ef             	and    $0xffffffef,%eax
f0106ea6:	a2 25 2b 53 f0       	mov    %al,0xf0532b25
f0106eab:	a0 25 2b 53 f0       	mov    0xf0532b25,%al
f0106eb0:	83 c8 60             	or     $0x60,%eax
f0106eb3:	a2 25 2b 53 f0       	mov    %al,0xf0532b25
f0106eb8:	a0 25 2b 53 f0       	mov    0xf0532b25,%al
f0106ebd:	83 c8 80             	or     $0xffffff80,%eax
f0106ec0:	a2 25 2b 53 f0       	mov    %al,0xf0532b25
f0106ec5:	b8 82 87 10 f0       	mov    $0xf0108782,%eax
f0106eca:	c1 e8 10             	shr    $0x10,%eax
f0106ecd:	66 a3 26 2b 53 f0    	mov    %ax,0xf0532b26
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0106ed3:	b8 8c 87 10 f0       	mov    $0xf010878c,%eax
f0106ed8:	66 a3 e0 29 53 f0    	mov    %ax,0xf05329e0
f0106ede:	66 c7 05 e2 29 53 f0 	movw   $0x8,0xf05329e2
f0106ee5:	08 00 
f0106ee7:	a0 e4 29 53 f0       	mov    0xf05329e4,%al
f0106eec:	83 e0 e0             	and    $0xffffffe0,%eax
f0106eef:	a2 e4 29 53 f0       	mov    %al,0xf05329e4
f0106ef4:	a0 e4 29 53 f0       	mov    0xf05329e4,%al
f0106ef9:	83 e0 1f             	and    $0x1f,%eax
f0106efc:	a2 e4 29 53 f0       	mov    %al,0xf05329e4
f0106f01:	a0 e5 29 53 f0       	mov    0xf05329e5,%al
f0106f06:	83 e0 f0             	and    $0xfffffff0,%eax
f0106f09:	83 c8 0e             	or     $0xe,%eax
f0106f0c:	a2 e5 29 53 f0       	mov    %al,0xf05329e5
f0106f11:	a0 e5 29 53 f0       	mov    0xf05329e5,%al
f0106f16:	83 e0 ef             	and    $0xffffffef,%eax
f0106f19:	a2 e5 29 53 f0       	mov    %al,0xf05329e5
f0106f1e:	a0 e5 29 53 f0       	mov    0xf05329e5,%al
f0106f23:	83 e0 9f             	and    $0xffffff9f,%eax
f0106f26:	a2 e5 29 53 f0       	mov    %al,0xf05329e5
f0106f2b:	a0 e5 29 53 f0       	mov    0xf05329e5,%al
f0106f30:	83 c8 80             	or     $0xffffff80,%eax
f0106f33:	a2 e5 29 53 f0       	mov    %al,0xf05329e5
f0106f38:	b8 8c 87 10 f0       	mov    $0xf010878c,%eax
f0106f3d:	c1 e8 10             	shr    $0x10,%eax
f0106f40:	66 a3 e6 29 53 f0    	mov    %ax,0xf05329e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f0106f46:	b8 94 87 10 f0       	mov    $0xf0108794,%eax
f0106f4b:	66 a3 a0 29 53 f0    	mov    %ax,0xf05329a0
f0106f51:	66 c7 05 a2 29 53 f0 	movw   $0x8,0xf05329a2
f0106f58:	08 00 
f0106f5a:	a0 a4 29 53 f0       	mov    0xf05329a4,%al
f0106f5f:	83 e0 e0             	and    $0xffffffe0,%eax
f0106f62:	a2 a4 29 53 f0       	mov    %al,0xf05329a4
f0106f67:	a0 a4 29 53 f0       	mov    0xf05329a4,%al
f0106f6c:	83 e0 1f             	and    $0x1f,%eax
f0106f6f:	a2 a4 29 53 f0       	mov    %al,0xf05329a4
f0106f74:	a0 a5 29 53 f0       	mov    0xf05329a5,%al
f0106f79:	83 e0 f0             	and    $0xfffffff0,%eax
f0106f7c:	83 c8 0e             	or     $0xe,%eax
f0106f7f:	a2 a5 29 53 f0       	mov    %al,0xf05329a5
f0106f84:	a0 a5 29 53 f0       	mov    0xf05329a5,%al
f0106f89:	83 e0 ef             	and    $0xffffffef,%eax
f0106f8c:	a2 a5 29 53 f0       	mov    %al,0xf05329a5
f0106f91:	a0 a5 29 53 f0       	mov    0xf05329a5,%al
f0106f96:	83 c8 60             	or     $0x60,%eax
f0106f99:	a2 a5 29 53 f0       	mov    %al,0xf05329a5
f0106f9e:	a0 a5 29 53 f0       	mov    0xf05329a5,%al
f0106fa3:	83 c8 80             	or     $0xffffff80,%eax
f0106fa6:	a2 a5 29 53 f0       	mov    %al,0xf05329a5
f0106fab:	b8 94 87 10 f0       	mov    $0xf0108794,%eax
f0106fb0:	c1 e8 10             	shr    $0x10,%eax
f0106fb3:	66 a3 a6 29 53 f0    	mov    %ax,0xf05329a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0106fb9:	b8 9e 87 10 f0       	mov    $0xf010879e,%eax
f0106fbe:	66 a3 a8 29 53 f0    	mov    %ax,0xf05329a8
f0106fc4:	66 c7 05 aa 29 53 f0 	movw   $0x8,0xf05329aa
f0106fcb:	08 00 
f0106fcd:	a0 ac 29 53 f0       	mov    0xf05329ac,%al
f0106fd2:	83 e0 e0             	and    $0xffffffe0,%eax
f0106fd5:	a2 ac 29 53 f0       	mov    %al,0xf05329ac
f0106fda:	a0 ac 29 53 f0       	mov    0xf05329ac,%al
f0106fdf:	83 e0 1f             	and    $0x1f,%eax
f0106fe2:	a2 ac 29 53 f0       	mov    %al,0xf05329ac
f0106fe7:	a0 ad 29 53 f0       	mov    0xf05329ad,%al
f0106fec:	83 c8 0f             	or     $0xf,%eax
f0106fef:	a2 ad 29 53 f0       	mov    %al,0xf05329ad
f0106ff4:	a0 ad 29 53 f0       	mov    0xf05329ad,%al
f0106ff9:	83 e0 ef             	and    $0xffffffef,%eax
f0106ffc:	a2 ad 29 53 f0       	mov    %al,0xf05329ad
f0107001:	a0 ad 29 53 f0       	mov    0xf05329ad,%al
f0107006:	83 c8 60             	or     $0x60,%eax
f0107009:	a2 ad 29 53 f0       	mov    %al,0xf05329ad
f010700e:	a0 ad 29 53 f0       	mov    0xf05329ad,%al
f0107013:	83 c8 80             	or     $0xffffff80,%eax
f0107016:	a2 ad 29 53 f0       	mov    %al,0xf05329ad
f010701b:	b8 9e 87 10 f0       	mov    $0xf010879e,%eax
f0107020:	c1 e8 10             	shr    $0x10,%eax
f0107023:	66 a3 ae 29 53 f0    	mov    %ax,0xf05329ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0107029:	b8 a8 87 10 f0       	mov    $0xf01087a8,%eax
f010702e:	66 a3 b0 29 53 f0    	mov    %ax,0xf05329b0
f0107034:	66 c7 05 b2 29 53 f0 	movw   $0x8,0xf05329b2
f010703b:	08 00 
f010703d:	a0 b4 29 53 f0       	mov    0xf05329b4,%al
f0107042:	83 e0 e0             	and    $0xffffffe0,%eax
f0107045:	a2 b4 29 53 f0       	mov    %al,0xf05329b4
f010704a:	a0 b4 29 53 f0       	mov    0xf05329b4,%al
f010704f:	83 e0 1f             	and    $0x1f,%eax
f0107052:	a2 b4 29 53 f0       	mov    %al,0xf05329b4
f0107057:	a0 b5 29 53 f0       	mov    0xf05329b5,%al
f010705c:	83 e0 f0             	and    $0xfffffff0,%eax
f010705f:	83 c8 0e             	or     $0xe,%eax
f0107062:	a2 b5 29 53 f0       	mov    %al,0xf05329b5
f0107067:	a0 b5 29 53 f0       	mov    0xf05329b5,%al
f010706c:	83 e0 ef             	and    $0xffffffef,%eax
f010706f:	a2 b5 29 53 f0       	mov    %al,0xf05329b5
f0107074:	a0 b5 29 53 f0       	mov    0xf05329b5,%al
f0107079:	83 c8 60             	or     $0x60,%eax
f010707c:	a2 b5 29 53 f0       	mov    %al,0xf05329b5
f0107081:	a0 b5 29 53 f0       	mov    0xf05329b5,%al
f0107086:	83 c8 80             	or     $0xffffff80,%eax
f0107089:	a2 b5 29 53 f0       	mov    %al,0xf05329b5
f010708e:	b8 a8 87 10 f0       	mov    $0xf01087a8,%eax
f0107093:	c1 e8 10             	shr    $0x10,%eax
f0107096:	66 a3 b6 29 53 f0    	mov    %ax,0xf05329b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010709c:	b8 b2 87 10 f0       	mov    $0xf01087b2,%eax
f01070a1:	66 a3 b8 29 53 f0    	mov    %ax,0xf05329b8
f01070a7:	66 c7 05 ba 29 53 f0 	movw   $0x8,0xf05329ba
f01070ae:	08 00 
f01070b0:	a0 bc 29 53 f0       	mov    0xf05329bc,%al
f01070b5:	83 e0 e0             	and    $0xffffffe0,%eax
f01070b8:	a2 bc 29 53 f0       	mov    %al,0xf05329bc
f01070bd:	a0 bc 29 53 f0       	mov    0xf05329bc,%al
f01070c2:	83 e0 1f             	and    $0x1f,%eax
f01070c5:	a2 bc 29 53 f0       	mov    %al,0xf05329bc
f01070ca:	a0 bd 29 53 f0       	mov    0xf05329bd,%al
f01070cf:	83 c8 0f             	or     $0xf,%eax
f01070d2:	a2 bd 29 53 f0       	mov    %al,0xf05329bd
f01070d7:	a0 bd 29 53 f0       	mov    0xf05329bd,%al
f01070dc:	83 e0 ef             	and    $0xffffffef,%eax
f01070df:	a2 bd 29 53 f0       	mov    %al,0xf05329bd
f01070e4:	a0 bd 29 53 f0       	mov    0xf05329bd,%al
f01070e9:	83 c8 60             	or     $0x60,%eax
f01070ec:	a2 bd 29 53 f0       	mov    %al,0xf05329bd
f01070f1:	a0 bd 29 53 f0       	mov    0xf05329bd,%al
f01070f6:	83 c8 80             	or     $0xffffff80,%eax
f01070f9:	a2 bd 29 53 f0       	mov    %al,0xf05329bd
f01070fe:	b8 b2 87 10 f0       	mov    $0xf01087b2,%eax
f0107103:	c1 e8 10             	shr    $0x10,%eax
f0107106:	66 a3 be 29 53 f0    	mov    %ax,0xf05329be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010710c:	b8 bc 87 10 f0       	mov    $0xf01087bc,%eax
f0107111:	66 a3 c0 29 53 f0    	mov    %ax,0xf05329c0
f0107117:	66 c7 05 c2 29 53 f0 	movw   $0x8,0xf05329c2
f010711e:	08 00 
f0107120:	a0 c4 29 53 f0       	mov    0xf05329c4,%al
f0107125:	83 e0 e0             	and    $0xffffffe0,%eax
f0107128:	a2 c4 29 53 f0       	mov    %al,0xf05329c4
f010712d:	a0 c4 29 53 f0       	mov    0xf05329c4,%al
f0107132:	83 e0 1f             	and    $0x1f,%eax
f0107135:	a2 c4 29 53 f0       	mov    %al,0xf05329c4
f010713a:	a0 c5 29 53 f0       	mov    0xf05329c5,%al
f010713f:	83 c8 0f             	or     $0xf,%eax
f0107142:	a2 c5 29 53 f0       	mov    %al,0xf05329c5
f0107147:	a0 c5 29 53 f0       	mov    0xf05329c5,%al
f010714c:	83 e0 ef             	and    $0xffffffef,%eax
f010714f:	a2 c5 29 53 f0       	mov    %al,0xf05329c5
f0107154:	a0 c5 29 53 f0       	mov    0xf05329c5,%al
f0107159:	83 c8 60             	or     $0x60,%eax
f010715c:	a2 c5 29 53 f0       	mov    %al,0xf05329c5
f0107161:	a0 c5 29 53 f0       	mov    0xf05329c5,%al
f0107166:	83 c8 80             	or     $0xffffff80,%eax
f0107169:	a2 c5 29 53 f0       	mov    %al,0xf05329c5
f010716e:	b8 bc 87 10 f0       	mov    $0xf01087bc,%eax
f0107173:	c1 e8 10             	shr    $0x10,%eax
f0107176:	66 a3 c6 29 53 f0    	mov    %ax,0xf05329c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010717c:	b8 c6 87 10 f0       	mov    $0xf01087c6,%eax
f0107181:	66 a3 c8 29 53 f0    	mov    %ax,0xf05329c8
f0107187:	66 c7 05 ca 29 53 f0 	movw   $0x8,0xf05329ca
f010718e:	08 00 
f0107190:	a0 cc 29 53 f0       	mov    0xf05329cc,%al
f0107195:	83 e0 e0             	and    $0xffffffe0,%eax
f0107198:	a2 cc 29 53 f0       	mov    %al,0xf05329cc
f010719d:	a0 cc 29 53 f0       	mov    0xf05329cc,%al
f01071a2:	83 e0 1f             	and    $0x1f,%eax
f01071a5:	a2 cc 29 53 f0       	mov    %al,0xf05329cc
f01071aa:	a0 cd 29 53 f0       	mov    0xf05329cd,%al
f01071af:	83 e0 f0             	and    $0xfffffff0,%eax
f01071b2:	83 c8 0e             	or     $0xe,%eax
f01071b5:	a2 cd 29 53 f0       	mov    %al,0xf05329cd
f01071ba:	a0 cd 29 53 f0       	mov    0xf05329cd,%al
f01071bf:	83 e0 ef             	and    $0xffffffef,%eax
f01071c2:	a2 cd 29 53 f0       	mov    %al,0xf05329cd
f01071c7:	a0 cd 29 53 f0       	mov    0xf05329cd,%al
f01071cc:	83 c8 60             	or     $0x60,%eax
f01071cf:	a2 cd 29 53 f0       	mov    %al,0xf05329cd
f01071d4:	a0 cd 29 53 f0       	mov    0xf05329cd,%al
f01071d9:	83 c8 80             	or     $0xffffff80,%eax
f01071dc:	a2 cd 29 53 f0       	mov    %al,0xf05329cd
f01071e1:	b8 c6 87 10 f0       	mov    $0xf01087c6,%eax
f01071e6:	c1 e8 10             	shr    $0x10,%eax
f01071e9:	66 a3 ce 29 53 f0    	mov    %ax,0xf05329ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f01071ef:	b8 d0 87 10 f0       	mov    $0xf01087d0,%eax
f01071f4:	66 a3 d0 29 53 f0    	mov    %ax,0xf05329d0
f01071fa:	66 c7 05 d2 29 53 f0 	movw   $0x8,0xf05329d2
f0107201:	08 00 
f0107203:	a0 d4 29 53 f0       	mov    0xf05329d4,%al
f0107208:	83 e0 e0             	and    $0xffffffe0,%eax
f010720b:	a2 d4 29 53 f0       	mov    %al,0xf05329d4
f0107210:	a0 d4 29 53 f0       	mov    0xf05329d4,%al
f0107215:	83 e0 1f             	and    $0x1f,%eax
f0107218:	a2 d4 29 53 f0       	mov    %al,0xf05329d4
f010721d:	a0 d5 29 53 f0       	mov    0xf05329d5,%al
f0107222:	83 e0 f0             	and    $0xfffffff0,%eax
f0107225:	83 c8 0e             	or     $0xe,%eax
f0107228:	a2 d5 29 53 f0       	mov    %al,0xf05329d5
f010722d:	a0 d5 29 53 f0       	mov    0xf05329d5,%al
f0107232:	83 e0 ef             	and    $0xffffffef,%eax
f0107235:	a2 d5 29 53 f0       	mov    %al,0xf05329d5
f010723a:	a0 d5 29 53 f0       	mov    0xf05329d5,%al
f010723f:	83 c8 60             	or     $0x60,%eax
f0107242:	a2 d5 29 53 f0       	mov    %al,0xf05329d5
f0107247:	a0 d5 29 53 f0       	mov    0xf05329d5,%al
f010724c:	83 c8 80             	or     $0xffffff80,%eax
f010724f:	a2 d5 29 53 f0       	mov    %al,0xf05329d5
f0107254:	b8 d0 87 10 f0       	mov    $0xf01087d0,%eax
f0107259:	c1 e8 10             	shr    $0x10,%eax
f010725c:	66 a3 d6 29 53 f0    	mov    %ax,0xf05329d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f0107262:	b8 da 87 10 f0       	mov    $0xf01087da,%eax
f0107267:	66 a3 d8 29 53 f0    	mov    %ax,0xf05329d8
f010726d:	66 c7 05 da 29 53 f0 	movw   $0x8,0xf05329da
f0107274:	08 00 
f0107276:	a0 dc 29 53 f0       	mov    0xf05329dc,%al
f010727b:	83 e0 e0             	and    $0xffffffe0,%eax
f010727e:	a2 dc 29 53 f0       	mov    %al,0xf05329dc
f0107283:	a0 dc 29 53 f0       	mov    0xf05329dc,%al
f0107288:	83 e0 1f             	and    $0x1f,%eax
f010728b:	a2 dc 29 53 f0       	mov    %al,0xf05329dc
f0107290:	a0 dd 29 53 f0       	mov    0xf05329dd,%al
f0107295:	83 e0 f0             	and    $0xfffffff0,%eax
f0107298:	83 c8 0e             	or     $0xe,%eax
f010729b:	a2 dd 29 53 f0       	mov    %al,0xf05329dd
f01072a0:	a0 dd 29 53 f0       	mov    0xf05329dd,%al
f01072a5:	83 e0 ef             	and    $0xffffffef,%eax
f01072a8:	a2 dd 29 53 f0       	mov    %al,0xf05329dd
f01072ad:	a0 dd 29 53 f0       	mov    0xf05329dd,%al
f01072b2:	83 c8 60             	or     $0x60,%eax
f01072b5:	a2 dd 29 53 f0       	mov    %al,0xf05329dd
f01072ba:	a0 dd 29 53 f0       	mov    0xf05329dd,%al
f01072bf:	83 c8 80             	or     $0xffffff80,%eax
f01072c2:	a2 dd 29 53 f0       	mov    %al,0xf05329dd
f01072c7:	b8 da 87 10 f0       	mov    $0xf01087da,%eax
f01072cc:	c1 e8 10             	shr    $0x10,%eax
f01072cf:	66 a3 de 29 53 f0    	mov    %ax,0xf05329de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f01072d5:	b8 e4 87 10 f0       	mov    $0xf01087e4,%eax
f01072da:	66 a3 f0 29 53 f0    	mov    %ax,0xf05329f0
f01072e0:	66 c7 05 f2 29 53 f0 	movw   $0x8,0xf05329f2
f01072e7:	08 00 
f01072e9:	a0 f4 29 53 f0       	mov    0xf05329f4,%al
f01072ee:	83 e0 e0             	and    $0xffffffe0,%eax
f01072f1:	a2 f4 29 53 f0       	mov    %al,0xf05329f4
f01072f6:	a0 f4 29 53 f0       	mov    0xf05329f4,%al
f01072fb:	83 e0 1f             	and    $0x1f,%eax
f01072fe:	a2 f4 29 53 f0       	mov    %al,0xf05329f4
f0107303:	a0 f5 29 53 f0       	mov    0xf05329f5,%al
f0107308:	83 e0 f0             	and    $0xfffffff0,%eax
f010730b:	83 c8 0e             	or     $0xe,%eax
f010730e:	a2 f5 29 53 f0       	mov    %al,0xf05329f5
f0107313:	a0 f5 29 53 f0       	mov    0xf05329f5,%al
f0107318:	83 e0 ef             	and    $0xffffffef,%eax
f010731b:	a2 f5 29 53 f0       	mov    %al,0xf05329f5
f0107320:	a0 f5 29 53 f0       	mov    0xf05329f5,%al
f0107325:	83 c8 60             	or     $0x60,%eax
f0107328:	a2 f5 29 53 f0       	mov    %al,0xf05329f5
f010732d:	a0 f5 29 53 f0       	mov    0xf05329f5,%al
f0107332:	83 c8 80             	or     $0xffffff80,%eax
f0107335:	a2 f5 29 53 f0       	mov    %al,0xf05329f5
f010733a:	b8 e4 87 10 f0       	mov    $0xf01087e4,%eax
f010733f:	c1 e8 10             	shr    $0x10,%eax
f0107342:	66 a3 f6 29 53 f0    	mov    %ax,0xf05329f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f0107348:	b8 ec 87 10 f0       	mov    $0xf01087ec,%eax
f010734d:	66 a3 f8 29 53 f0    	mov    %ax,0xf05329f8
f0107353:	66 c7 05 fa 29 53 f0 	movw   $0x8,0xf05329fa
f010735a:	08 00 
f010735c:	a0 fc 29 53 f0       	mov    0xf05329fc,%al
f0107361:	83 e0 e0             	and    $0xffffffe0,%eax
f0107364:	a2 fc 29 53 f0       	mov    %al,0xf05329fc
f0107369:	a0 fc 29 53 f0       	mov    0xf05329fc,%al
f010736e:	83 e0 1f             	and    $0x1f,%eax
f0107371:	a2 fc 29 53 f0       	mov    %al,0xf05329fc
f0107376:	a0 fd 29 53 f0       	mov    0xf05329fd,%al
f010737b:	83 e0 f0             	and    $0xfffffff0,%eax
f010737e:	83 c8 0e             	or     $0xe,%eax
f0107381:	a2 fd 29 53 f0       	mov    %al,0xf05329fd
f0107386:	a0 fd 29 53 f0       	mov    0xf05329fd,%al
f010738b:	83 e0 ef             	and    $0xffffffef,%eax
f010738e:	a2 fd 29 53 f0       	mov    %al,0xf05329fd
f0107393:	a0 fd 29 53 f0       	mov    0xf05329fd,%al
f0107398:	83 c8 60             	or     $0x60,%eax
f010739b:	a2 fd 29 53 f0       	mov    %al,0xf05329fd
f01073a0:	a0 fd 29 53 f0       	mov    0xf05329fd,%al
f01073a5:	83 c8 80             	or     $0xffffff80,%eax
f01073a8:	a2 fd 29 53 f0       	mov    %al,0xf05329fd
f01073ad:	b8 ec 87 10 f0       	mov    $0xf01087ec,%eax
f01073b2:	c1 e8 10             	shr    $0x10,%eax
f01073b5:	66 a3 fe 29 53 f0    	mov    %ax,0xf05329fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f01073bb:	b8 f0 87 10 f0       	mov    $0xf01087f0,%eax
f01073c0:	66 a3 00 2a 53 f0    	mov    %ax,0xf0532a00
f01073c6:	66 c7 05 02 2a 53 f0 	movw   $0x8,0xf0532a02
f01073cd:	08 00 
f01073cf:	a0 04 2a 53 f0       	mov    0xf0532a04,%al
f01073d4:	83 e0 e0             	and    $0xffffffe0,%eax
f01073d7:	a2 04 2a 53 f0       	mov    %al,0xf0532a04
f01073dc:	a0 04 2a 53 f0       	mov    0xf0532a04,%al
f01073e1:	83 e0 1f             	and    $0x1f,%eax
f01073e4:	a2 04 2a 53 f0       	mov    %al,0xf0532a04
f01073e9:	a0 05 2a 53 f0       	mov    0xf0532a05,%al
f01073ee:	83 e0 f0             	and    $0xfffffff0,%eax
f01073f1:	83 c8 0e             	or     $0xe,%eax
f01073f4:	a2 05 2a 53 f0       	mov    %al,0xf0532a05
f01073f9:	a0 05 2a 53 f0       	mov    0xf0532a05,%al
f01073fe:	83 e0 ef             	and    $0xffffffef,%eax
f0107401:	a2 05 2a 53 f0       	mov    %al,0xf0532a05
f0107406:	a0 05 2a 53 f0       	mov    0xf0532a05,%al
f010740b:	83 c8 60             	or     $0x60,%eax
f010740e:	a2 05 2a 53 f0       	mov    %al,0xf0532a05
f0107413:	a0 05 2a 53 f0       	mov    0xf0532a05,%al
f0107418:	83 c8 80             	or     $0xffffff80,%eax
f010741b:	a2 05 2a 53 f0       	mov    %al,0xf0532a05
f0107420:	b8 f0 87 10 f0       	mov    $0xf01087f0,%eax
f0107425:	c1 e8 10             	shr    $0x10,%eax
f0107428:	66 a3 06 2a 53 f0    	mov    %ax,0xf0532a06
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010742e:	b8 f4 87 10 f0       	mov    $0xf01087f4,%eax
f0107433:	66 a3 08 2a 53 f0    	mov    %ax,0xf0532a08
f0107439:	66 c7 05 0a 2a 53 f0 	movw   $0x8,0xf0532a0a
f0107440:	08 00 
f0107442:	a0 0c 2a 53 f0       	mov    0xf0532a0c,%al
f0107447:	83 e0 e0             	and    $0xffffffe0,%eax
f010744a:	a2 0c 2a 53 f0       	mov    %al,0xf0532a0c
f010744f:	a0 0c 2a 53 f0       	mov    0xf0532a0c,%al
f0107454:	83 e0 1f             	and    $0x1f,%eax
f0107457:	a2 0c 2a 53 f0       	mov    %al,0xf0532a0c
f010745c:	a0 0d 2a 53 f0       	mov    0xf0532a0d,%al
f0107461:	83 e0 f0             	and    $0xfffffff0,%eax
f0107464:	83 c8 0e             	or     $0xe,%eax
f0107467:	a2 0d 2a 53 f0       	mov    %al,0xf0532a0d
f010746c:	a0 0d 2a 53 f0       	mov    0xf0532a0d,%al
f0107471:	83 e0 ef             	and    $0xffffffef,%eax
f0107474:	a2 0d 2a 53 f0       	mov    %al,0xf0532a0d
f0107479:	a0 0d 2a 53 f0       	mov    0xf0532a0d,%al
f010747e:	83 c8 60             	or     $0x60,%eax
f0107481:	a2 0d 2a 53 f0       	mov    %al,0xf0532a0d
f0107486:	a0 0d 2a 53 f0       	mov    0xf0532a0d,%al
f010748b:	83 c8 80             	or     $0xffffff80,%eax
f010748e:	a2 0d 2a 53 f0       	mov    %al,0xf0532a0d
f0107493:	b8 f4 87 10 f0       	mov    $0xf01087f4,%eax
f0107498:	c1 e8 10             	shr    $0x10,%eax
f010749b:	66 a3 0e 2a 53 f0    	mov    %ax,0xf0532a0e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f01074a1:	b8 f8 87 10 f0       	mov    $0xf01087f8,%eax
f01074a6:	66 a3 20 2a 53 f0    	mov    %ax,0xf0532a20
f01074ac:	66 c7 05 22 2a 53 f0 	movw   $0x8,0xf0532a22
f01074b3:	08 00 
f01074b5:	a0 24 2a 53 f0       	mov    0xf0532a24,%al
f01074ba:	83 e0 e0             	and    $0xffffffe0,%eax
f01074bd:	a2 24 2a 53 f0       	mov    %al,0xf0532a24
f01074c2:	a0 24 2a 53 f0       	mov    0xf0532a24,%al
f01074c7:	83 e0 1f             	and    $0x1f,%eax
f01074ca:	a2 24 2a 53 f0       	mov    %al,0xf0532a24
f01074cf:	a0 25 2a 53 f0       	mov    0xf0532a25,%al
f01074d4:	83 e0 f0             	and    $0xfffffff0,%eax
f01074d7:	83 c8 0e             	or     $0xe,%eax
f01074da:	a2 25 2a 53 f0       	mov    %al,0xf0532a25
f01074df:	a0 25 2a 53 f0       	mov    0xf0532a25,%al
f01074e4:	83 e0 ef             	and    $0xffffffef,%eax
f01074e7:	a2 25 2a 53 f0       	mov    %al,0xf0532a25
f01074ec:	a0 25 2a 53 f0       	mov    0xf0532a25,%al
f01074f1:	83 c8 60             	or     $0x60,%eax
f01074f4:	a2 25 2a 53 f0       	mov    %al,0xf0532a25
f01074f9:	a0 25 2a 53 f0       	mov    0xf0532a25,%al
f01074fe:	83 c8 80             	or     $0xffffff80,%eax
f0107501:	a2 25 2a 53 f0       	mov    %al,0xf0532a25
f0107506:	b8 f8 87 10 f0       	mov    $0xf01087f8,%eax
f010750b:	c1 e8 10             	shr    $0x10,%eax
f010750e:	66 a3 26 2a 53 f0    	mov    %ax,0xf0532a26
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f0107514:	b8 fe 87 10 f0       	mov    $0xf01087fe,%eax
f0107519:	66 a3 28 2a 53 f0    	mov    %ax,0xf0532a28
f010751f:	66 c7 05 2a 2a 53 f0 	movw   $0x8,0xf0532a2a
f0107526:	08 00 
f0107528:	a0 2c 2a 53 f0       	mov    0xf0532a2c,%al
f010752d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107530:	a2 2c 2a 53 f0       	mov    %al,0xf0532a2c
f0107535:	a0 2c 2a 53 f0       	mov    0xf0532a2c,%al
f010753a:	83 e0 1f             	and    $0x1f,%eax
f010753d:	a2 2c 2a 53 f0       	mov    %al,0xf0532a2c
f0107542:	a0 2d 2a 53 f0       	mov    0xf0532a2d,%al
f0107547:	83 e0 f0             	and    $0xfffffff0,%eax
f010754a:	83 c8 0e             	or     $0xe,%eax
f010754d:	a2 2d 2a 53 f0       	mov    %al,0xf0532a2d
f0107552:	a0 2d 2a 53 f0       	mov    0xf0532a2d,%al
f0107557:	83 e0 ef             	and    $0xffffffef,%eax
f010755a:	a2 2d 2a 53 f0       	mov    %al,0xf0532a2d
f010755f:	a0 2d 2a 53 f0       	mov    0xf0532a2d,%al
f0107564:	83 c8 60             	or     $0x60,%eax
f0107567:	a2 2d 2a 53 f0       	mov    %al,0xf0532a2d
f010756c:	a0 2d 2a 53 f0       	mov    0xf0532a2d,%al
f0107571:	83 c8 80             	or     $0xffffff80,%eax
f0107574:	a2 2d 2a 53 f0       	mov    %al,0xf0532a2d
f0107579:	b8 fe 87 10 f0       	mov    $0xf01087fe,%eax
f010757e:	c1 e8 10             	shr    $0x10,%eax
f0107581:	66 a3 2e 2a 53 f0    	mov    %ax,0xf0532a2e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f0107587:	b8 02 88 10 f0       	mov    $0xf0108802,%eax
f010758c:	66 a3 30 2a 53 f0    	mov    %ax,0xf0532a30
f0107592:	66 c7 05 32 2a 53 f0 	movw   $0x8,0xf0532a32
f0107599:	08 00 
f010759b:	a0 34 2a 53 f0       	mov    0xf0532a34,%al
f01075a0:	83 e0 e0             	and    $0xffffffe0,%eax
f01075a3:	a2 34 2a 53 f0       	mov    %al,0xf0532a34
f01075a8:	a0 34 2a 53 f0       	mov    0xf0532a34,%al
f01075ad:	83 e0 1f             	and    $0x1f,%eax
f01075b0:	a2 34 2a 53 f0       	mov    %al,0xf0532a34
f01075b5:	a0 35 2a 53 f0       	mov    0xf0532a35,%al
f01075ba:	83 e0 f0             	and    $0xfffffff0,%eax
f01075bd:	83 c8 0e             	or     $0xe,%eax
f01075c0:	a2 35 2a 53 f0       	mov    %al,0xf0532a35
f01075c5:	a0 35 2a 53 f0       	mov    0xf0532a35,%al
f01075ca:	83 e0 ef             	and    $0xffffffef,%eax
f01075cd:	a2 35 2a 53 f0       	mov    %al,0xf0532a35
f01075d2:	a0 35 2a 53 f0       	mov    0xf0532a35,%al
f01075d7:	83 c8 60             	or     $0x60,%eax
f01075da:	a2 35 2a 53 f0       	mov    %al,0xf0532a35
f01075df:	a0 35 2a 53 f0       	mov    0xf0532a35,%al
f01075e4:	83 c8 80             	or     $0xffffff80,%eax
f01075e7:	a2 35 2a 53 f0       	mov    %al,0xf0532a35
f01075ec:	b8 02 88 10 f0       	mov    $0xf0108802,%eax
f01075f1:	c1 e8 10             	shr    $0x10,%eax
f01075f4:	66 a3 36 2a 53 f0    	mov    %ax,0xf0532a36
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f01075fa:	b8 08 88 10 f0       	mov    $0xf0108808,%eax
f01075ff:	66 a3 38 2a 53 f0    	mov    %ax,0xf0532a38
f0107605:	66 c7 05 3a 2a 53 f0 	movw   $0x8,0xf0532a3a
f010760c:	08 00 
f010760e:	a0 3c 2a 53 f0       	mov    0xf0532a3c,%al
f0107613:	83 e0 e0             	and    $0xffffffe0,%eax
f0107616:	a2 3c 2a 53 f0       	mov    %al,0xf0532a3c
f010761b:	a0 3c 2a 53 f0       	mov    0xf0532a3c,%al
f0107620:	83 e0 1f             	and    $0x1f,%eax
f0107623:	a2 3c 2a 53 f0       	mov    %al,0xf0532a3c
f0107628:	a0 3d 2a 53 f0       	mov    0xf0532a3d,%al
f010762d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107630:	83 c8 0e             	or     $0xe,%eax
f0107633:	a2 3d 2a 53 f0       	mov    %al,0xf0532a3d
f0107638:	a0 3d 2a 53 f0       	mov    0xf0532a3d,%al
f010763d:	83 e0 ef             	and    $0xffffffef,%eax
f0107640:	a2 3d 2a 53 f0       	mov    %al,0xf0532a3d
f0107645:	a0 3d 2a 53 f0       	mov    0xf0532a3d,%al
f010764a:	83 c8 60             	or     $0x60,%eax
f010764d:	a2 3d 2a 53 f0       	mov    %al,0xf0532a3d
f0107652:	a0 3d 2a 53 f0       	mov    0xf0532a3d,%al
f0107657:	83 c8 80             	or     $0xffffff80,%eax
f010765a:	a2 3d 2a 53 f0       	mov    %al,0xf0532a3d
f010765f:	b8 08 88 10 f0       	mov    $0xf0108808,%eax
f0107664:	c1 e8 10             	shr    $0x10,%eax
f0107667:	66 a3 3e 2a 53 f0    	mov    %ax,0xf0532a3e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010766d:	b8 0e 88 10 f0       	mov    $0xf010880e,%eax
f0107672:	66 a3 a0 2a 53 f0    	mov    %ax,0xf0532aa0
f0107678:	66 c7 05 a2 2a 53 f0 	movw   $0x8,0xf0532aa2
f010767f:	08 00 
f0107681:	a0 a4 2a 53 f0       	mov    0xf0532aa4,%al
f0107686:	83 e0 e0             	and    $0xffffffe0,%eax
f0107689:	a2 a4 2a 53 f0       	mov    %al,0xf0532aa4
f010768e:	a0 a4 2a 53 f0       	mov    0xf0532aa4,%al
f0107693:	83 e0 1f             	and    $0x1f,%eax
f0107696:	a2 a4 2a 53 f0       	mov    %al,0xf0532aa4
f010769b:	a0 a5 2a 53 f0       	mov    0xf0532aa5,%al
f01076a0:	83 e0 f0             	and    $0xfffffff0,%eax
f01076a3:	83 c8 0e             	or     $0xe,%eax
f01076a6:	a2 a5 2a 53 f0       	mov    %al,0xf0532aa5
f01076ab:	a0 a5 2a 53 f0       	mov    0xf0532aa5,%al
f01076b0:	83 e0 ef             	and    $0xffffffef,%eax
f01076b3:	a2 a5 2a 53 f0       	mov    %al,0xf0532aa5
f01076b8:	a0 a5 2a 53 f0       	mov    0xf0532aa5,%al
f01076bd:	83 c8 60             	or     $0x60,%eax
f01076c0:	a2 a5 2a 53 f0       	mov    %al,0xf0532aa5
f01076c5:	a0 a5 2a 53 f0       	mov    0xf0532aa5,%al
f01076ca:	83 c8 80             	or     $0xffffff80,%eax
f01076cd:	a2 a5 2a 53 f0       	mov    %al,0xf0532aa5
f01076d2:	b8 0e 88 10 f0       	mov    $0xf010880e,%eax
f01076d7:	c1 e8 10             	shr    $0x10,%eax
f01076da:	66 a3 a6 2a 53 f0    	mov    %ax,0xf0532aa6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f01076e0:	b8 14 88 10 f0       	mov    $0xf0108814,%eax
f01076e5:	66 a3 a8 2a 53 f0    	mov    %ax,0xf0532aa8
f01076eb:	66 c7 05 aa 2a 53 f0 	movw   $0x8,0xf0532aaa
f01076f2:	08 00 
f01076f4:	a0 ac 2a 53 f0       	mov    0xf0532aac,%al
f01076f9:	83 e0 e0             	and    $0xffffffe0,%eax
f01076fc:	a2 ac 2a 53 f0       	mov    %al,0xf0532aac
f0107701:	a0 ac 2a 53 f0       	mov    0xf0532aac,%al
f0107706:	83 e0 1f             	and    $0x1f,%eax
f0107709:	a2 ac 2a 53 f0       	mov    %al,0xf0532aac
f010770e:	a0 ad 2a 53 f0       	mov    0xf0532aad,%al
f0107713:	83 e0 f0             	and    $0xfffffff0,%eax
f0107716:	83 c8 0e             	or     $0xe,%eax
f0107719:	a2 ad 2a 53 f0       	mov    %al,0xf0532aad
f010771e:	a0 ad 2a 53 f0       	mov    0xf0532aad,%al
f0107723:	83 e0 ef             	and    $0xffffffef,%eax
f0107726:	a2 ad 2a 53 f0       	mov    %al,0xf0532aad
f010772b:	a0 ad 2a 53 f0       	mov    0xf0532aad,%al
f0107730:	83 c8 60             	or     $0x60,%eax
f0107733:	a2 ad 2a 53 f0       	mov    %al,0xf0532aad
f0107738:	a0 ad 2a 53 f0       	mov    0xf0532aad,%al
f010773d:	83 c8 80             	or     $0xffffff80,%eax
f0107740:	a2 ad 2a 53 f0       	mov    %al,0xf0532aad
f0107745:	b8 14 88 10 f0       	mov    $0xf0108814,%eax
f010774a:	c1 e8 10             	shr    $0x10,%eax
f010774d:	66 a3 ae 2a 53 f0    	mov    %ax,0xf0532aae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f0107753:	b8 1a 88 10 f0       	mov    $0xf010881a,%eax
f0107758:	66 a3 b0 2a 53 f0    	mov    %ax,0xf0532ab0
f010775e:	66 c7 05 b2 2a 53 f0 	movw   $0x8,0xf0532ab2
f0107765:	08 00 
f0107767:	a0 b4 2a 53 f0       	mov    0xf0532ab4,%al
f010776c:	83 e0 e0             	and    $0xffffffe0,%eax
f010776f:	a2 b4 2a 53 f0       	mov    %al,0xf0532ab4
f0107774:	a0 b4 2a 53 f0       	mov    0xf0532ab4,%al
f0107779:	83 e0 1f             	and    $0x1f,%eax
f010777c:	a2 b4 2a 53 f0       	mov    %al,0xf0532ab4
f0107781:	a0 b5 2a 53 f0       	mov    0xf0532ab5,%al
f0107786:	83 e0 f0             	and    $0xfffffff0,%eax
f0107789:	83 c8 0e             	or     $0xe,%eax
f010778c:	a2 b5 2a 53 f0       	mov    %al,0xf0532ab5
f0107791:	a0 b5 2a 53 f0       	mov    0xf0532ab5,%al
f0107796:	83 e0 ef             	and    $0xffffffef,%eax
f0107799:	a2 b5 2a 53 f0       	mov    %al,0xf0532ab5
f010779e:	a0 b5 2a 53 f0       	mov    0xf0532ab5,%al
f01077a3:	83 c8 60             	or     $0x60,%eax
f01077a6:	a2 b5 2a 53 f0       	mov    %al,0xf0532ab5
f01077ab:	a0 b5 2a 53 f0       	mov    0xf0532ab5,%al
f01077b0:	83 c8 80             	or     $0xffffff80,%eax
f01077b3:	a2 b5 2a 53 f0       	mov    %al,0xf0532ab5
f01077b8:	b8 1a 88 10 f0       	mov    $0xf010881a,%eax
f01077bd:	c1 e8 10             	shr    $0x10,%eax
f01077c0:	66 a3 b6 2a 53 f0    	mov    %ax,0xf0532ab6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f01077c6:	b8 20 88 10 f0       	mov    $0xf0108820,%eax
f01077cb:	66 a3 b8 2a 53 f0    	mov    %ax,0xf0532ab8
f01077d1:	66 c7 05 ba 2a 53 f0 	movw   $0x8,0xf0532aba
f01077d8:	08 00 
f01077da:	a0 bc 2a 53 f0       	mov    0xf0532abc,%al
f01077df:	83 e0 e0             	and    $0xffffffe0,%eax
f01077e2:	a2 bc 2a 53 f0       	mov    %al,0xf0532abc
f01077e7:	a0 bc 2a 53 f0       	mov    0xf0532abc,%al
f01077ec:	83 e0 1f             	and    $0x1f,%eax
f01077ef:	a2 bc 2a 53 f0       	mov    %al,0xf0532abc
f01077f4:	a0 bd 2a 53 f0       	mov    0xf0532abd,%al
f01077f9:	83 e0 f0             	and    $0xfffffff0,%eax
f01077fc:	83 c8 0e             	or     $0xe,%eax
f01077ff:	a2 bd 2a 53 f0       	mov    %al,0xf0532abd
f0107804:	a0 bd 2a 53 f0       	mov    0xf0532abd,%al
f0107809:	83 e0 ef             	and    $0xffffffef,%eax
f010780c:	a2 bd 2a 53 f0       	mov    %al,0xf0532abd
f0107811:	a0 bd 2a 53 f0       	mov    0xf0532abd,%al
f0107816:	83 c8 60             	or     $0x60,%eax
f0107819:	a2 bd 2a 53 f0       	mov    %al,0xf0532abd
f010781e:	a0 bd 2a 53 f0       	mov    0xf0532abd,%al
f0107823:	83 c8 80             	or     $0xffffff80,%eax
f0107826:	a2 bd 2a 53 f0       	mov    %al,0xf0532abd
f010782b:	b8 20 88 10 f0       	mov    $0xf0108820,%eax
f0107830:	c1 e8 10             	shr    $0x10,%eax
f0107833:	66 a3 be 2a 53 f0    	mov    %ax,0xf0532abe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0107839:	b8 26 88 10 f0       	mov    $0xf0108826,%eax
f010783e:	66 a3 c0 2a 53 f0    	mov    %ax,0xf0532ac0
f0107844:	66 c7 05 c2 2a 53 f0 	movw   $0x8,0xf0532ac2
f010784b:	08 00 
f010784d:	a0 c4 2a 53 f0       	mov    0xf0532ac4,%al
f0107852:	83 e0 e0             	and    $0xffffffe0,%eax
f0107855:	a2 c4 2a 53 f0       	mov    %al,0xf0532ac4
f010785a:	a0 c4 2a 53 f0       	mov    0xf0532ac4,%al
f010785f:	83 e0 1f             	and    $0x1f,%eax
f0107862:	a2 c4 2a 53 f0       	mov    %al,0xf0532ac4
f0107867:	a0 c5 2a 53 f0       	mov    0xf0532ac5,%al
f010786c:	83 e0 f0             	and    $0xfffffff0,%eax
f010786f:	83 c8 0e             	or     $0xe,%eax
f0107872:	a2 c5 2a 53 f0       	mov    %al,0xf0532ac5
f0107877:	a0 c5 2a 53 f0       	mov    0xf0532ac5,%al
f010787c:	83 e0 ef             	and    $0xffffffef,%eax
f010787f:	a2 c5 2a 53 f0       	mov    %al,0xf0532ac5
f0107884:	a0 c5 2a 53 f0       	mov    0xf0532ac5,%al
f0107889:	83 c8 60             	or     $0x60,%eax
f010788c:	a2 c5 2a 53 f0       	mov    %al,0xf0532ac5
f0107891:	a0 c5 2a 53 f0       	mov    0xf0532ac5,%al
f0107896:	83 c8 80             	or     $0xffffff80,%eax
f0107899:	a2 c5 2a 53 f0       	mov    %al,0xf0532ac5
f010789e:	b8 26 88 10 f0       	mov    $0xf0108826,%eax
f01078a3:	c1 e8 10             	shr    $0x10,%eax
f01078a6:	66 a3 c6 2a 53 f0    	mov    %ax,0xf0532ac6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f01078ac:	b8 2c 88 10 f0       	mov    $0xf010882c,%eax
f01078b1:	66 a3 c8 2a 53 f0    	mov    %ax,0xf0532ac8
f01078b7:	66 c7 05 ca 2a 53 f0 	movw   $0x8,0xf0532aca
f01078be:	08 00 
f01078c0:	a0 cc 2a 53 f0       	mov    0xf0532acc,%al
f01078c5:	83 e0 e0             	and    $0xffffffe0,%eax
f01078c8:	a2 cc 2a 53 f0       	mov    %al,0xf0532acc
f01078cd:	a0 cc 2a 53 f0       	mov    0xf0532acc,%al
f01078d2:	83 e0 1f             	and    $0x1f,%eax
f01078d5:	a2 cc 2a 53 f0       	mov    %al,0xf0532acc
f01078da:	a0 cd 2a 53 f0       	mov    0xf0532acd,%al
f01078df:	83 e0 f0             	and    $0xfffffff0,%eax
f01078e2:	83 c8 0e             	or     $0xe,%eax
f01078e5:	a2 cd 2a 53 f0       	mov    %al,0xf0532acd
f01078ea:	a0 cd 2a 53 f0       	mov    0xf0532acd,%al
f01078ef:	83 e0 ef             	and    $0xffffffef,%eax
f01078f2:	a2 cd 2a 53 f0       	mov    %al,0xf0532acd
f01078f7:	a0 cd 2a 53 f0       	mov    0xf0532acd,%al
f01078fc:	83 c8 60             	or     $0x60,%eax
f01078ff:	a2 cd 2a 53 f0       	mov    %al,0xf0532acd
f0107904:	a0 cd 2a 53 f0       	mov    0xf0532acd,%al
f0107909:	83 c8 80             	or     $0xffffff80,%eax
f010790c:	a2 cd 2a 53 f0       	mov    %al,0xf0532acd
f0107911:	b8 2c 88 10 f0       	mov    $0xf010882c,%eax
f0107916:	c1 e8 10             	shr    $0x10,%eax
f0107919:	66 a3 ce 2a 53 f0    	mov    %ax,0xf0532ace
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010791f:	b8 32 88 10 f0       	mov    $0xf0108832,%eax
f0107924:	66 a3 d0 2a 53 f0    	mov    %ax,0xf0532ad0
f010792a:	66 c7 05 d2 2a 53 f0 	movw   $0x8,0xf0532ad2
f0107931:	08 00 
f0107933:	a0 d4 2a 53 f0       	mov    0xf0532ad4,%al
f0107938:	83 e0 e0             	and    $0xffffffe0,%eax
f010793b:	a2 d4 2a 53 f0       	mov    %al,0xf0532ad4
f0107940:	a0 d4 2a 53 f0       	mov    0xf0532ad4,%al
f0107945:	83 e0 1f             	and    $0x1f,%eax
f0107948:	a2 d4 2a 53 f0       	mov    %al,0xf0532ad4
f010794d:	a0 d5 2a 53 f0       	mov    0xf0532ad5,%al
f0107952:	83 e0 f0             	and    $0xfffffff0,%eax
f0107955:	83 c8 0e             	or     $0xe,%eax
f0107958:	a2 d5 2a 53 f0       	mov    %al,0xf0532ad5
f010795d:	a0 d5 2a 53 f0       	mov    0xf0532ad5,%al
f0107962:	83 e0 ef             	and    $0xffffffef,%eax
f0107965:	a2 d5 2a 53 f0       	mov    %al,0xf0532ad5
f010796a:	a0 d5 2a 53 f0       	mov    0xf0532ad5,%al
f010796f:	83 c8 60             	or     $0x60,%eax
f0107972:	a2 d5 2a 53 f0       	mov    %al,0xf0532ad5
f0107977:	a0 d5 2a 53 f0       	mov    0xf0532ad5,%al
f010797c:	83 c8 80             	or     $0xffffff80,%eax
f010797f:	a2 d5 2a 53 f0       	mov    %al,0xf0532ad5
f0107984:	b8 32 88 10 f0       	mov    $0xf0108832,%eax
f0107989:	c1 e8 10             	shr    $0x10,%eax
f010798c:	66 a3 d6 2a 53 f0    	mov    %ax,0xf0532ad6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f0107992:	b8 38 88 10 f0       	mov    $0xf0108838,%eax
f0107997:	66 a3 d8 2a 53 f0    	mov    %ax,0xf0532ad8
f010799d:	66 c7 05 da 2a 53 f0 	movw   $0x8,0xf0532ada
f01079a4:	08 00 
f01079a6:	a0 dc 2a 53 f0       	mov    0xf0532adc,%al
f01079ab:	83 e0 e0             	and    $0xffffffe0,%eax
f01079ae:	a2 dc 2a 53 f0       	mov    %al,0xf0532adc
f01079b3:	a0 dc 2a 53 f0       	mov    0xf0532adc,%al
f01079b8:	83 e0 1f             	and    $0x1f,%eax
f01079bb:	a2 dc 2a 53 f0       	mov    %al,0xf0532adc
f01079c0:	a0 dd 2a 53 f0       	mov    0xf0532add,%al
f01079c5:	83 e0 f0             	and    $0xfffffff0,%eax
f01079c8:	83 c8 0e             	or     $0xe,%eax
f01079cb:	a2 dd 2a 53 f0       	mov    %al,0xf0532add
f01079d0:	a0 dd 2a 53 f0       	mov    0xf0532add,%al
f01079d5:	83 e0 ef             	and    $0xffffffef,%eax
f01079d8:	a2 dd 2a 53 f0       	mov    %al,0xf0532add
f01079dd:	a0 dd 2a 53 f0       	mov    0xf0532add,%al
f01079e2:	83 c8 60             	or     $0x60,%eax
f01079e5:	a2 dd 2a 53 f0       	mov    %al,0xf0532add
f01079ea:	a0 dd 2a 53 f0       	mov    0xf0532add,%al
f01079ef:	83 c8 80             	or     $0xffffff80,%eax
f01079f2:	a2 dd 2a 53 f0       	mov    %al,0xf0532add
f01079f7:	b8 38 88 10 f0       	mov    $0xf0108838,%eax
f01079fc:	c1 e8 10             	shr    $0x10,%eax
f01079ff:	66 a3 de 2a 53 f0    	mov    %ax,0xf0532ade
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f0107a05:	b8 3e 88 10 f0       	mov    $0xf010883e,%eax
f0107a0a:	66 a3 e0 2a 53 f0    	mov    %ax,0xf0532ae0
f0107a10:	66 c7 05 e2 2a 53 f0 	movw   $0x8,0xf0532ae2
f0107a17:	08 00 
f0107a19:	a0 e4 2a 53 f0       	mov    0xf0532ae4,%al
f0107a1e:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a21:	a2 e4 2a 53 f0       	mov    %al,0xf0532ae4
f0107a26:	a0 e4 2a 53 f0       	mov    0xf0532ae4,%al
f0107a2b:	83 e0 1f             	and    $0x1f,%eax
f0107a2e:	a2 e4 2a 53 f0       	mov    %al,0xf0532ae4
f0107a33:	a0 e5 2a 53 f0       	mov    0xf0532ae5,%al
f0107a38:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a3b:	83 c8 0e             	or     $0xe,%eax
f0107a3e:	a2 e5 2a 53 f0       	mov    %al,0xf0532ae5
f0107a43:	a0 e5 2a 53 f0       	mov    0xf0532ae5,%al
f0107a48:	83 e0 ef             	and    $0xffffffef,%eax
f0107a4b:	a2 e5 2a 53 f0       	mov    %al,0xf0532ae5
f0107a50:	a0 e5 2a 53 f0       	mov    0xf0532ae5,%al
f0107a55:	83 c8 60             	or     $0x60,%eax
f0107a58:	a2 e5 2a 53 f0       	mov    %al,0xf0532ae5
f0107a5d:	a0 e5 2a 53 f0       	mov    0xf0532ae5,%al
f0107a62:	83 c8 80             	or     $0xffffff80,%eax
f0107a65:	a2 e5 2a 53 f0       	mov    %al,0xf0532ae5
f0107a6a:	b8 3e 88 10 f0       	mov    $0xf010883e,%eax
f0107a6f:	c1 e8 10             	shr    $0x10,%eax
f0107a72:	66 a3 e6 2a 53 f0    	mov    %ax,0xf0532ae6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0107a78:	b8 44 88 10 f0       	mov    $0xf0108844,%eax
f0107a7d:	66 a3 e8 2a 53 f0    	mov    %ax,0xf0532ae8
f0107a83:	66 c7 05 ea 2a 53 f0 	movw   $0x8,0xf0532aea
f0107a8a:	08 00 
f0107a8c:	a0 ec 2a 53 f0       	mov    0xf0532aec,%al
f0107a91:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a94:	a2 ec 2a 53 f0       	mov    %al,0xf0532aec
f0107a99:	a0 ec 2a 53 f0       	mov    0xf0532aec,%al
f0107a9e:	83 e0 1f             	and    $0x1f,%eax
f0107aa1:	a2 ec 2a 53 f0       	mov    %al,0xf0532aec
f0107aa6:	a0 ed 2a 53 f0       	mov    0xf0532aed,%al
f0107aab:	83 e0 f0             	and    $0xfffffff0,%eax
f0107aae:	83 c8 0e             	or     $0xe,%eax
f0107ab1:	a2 ed 2a 53 f0       	mov    %al,0xf0532aed
f0107ab6:	a0 ed 2a 53 f0       	mov    0xf0532aed,%al
f0107abb:	83 e0 ef             	and    $0xffffffef,%eax
f0107abe:	a2 ed 2a 53 f0       	mov    %al,0xf0532aed
f0107ac3:	a0 ed 2a 53 f0       	mov    0xf0532aed,%al
f0107ac8:	83 c8 60             	or     $0x60,%eax
f0107acb:	a2 ed 2a 53 f0       	mov    %al,0xf0532aed
f0107ad0:	a0 ed 2a 53 f0       	mov    0xf0532aed,%al
f0107ad5:	83 c8 80             	or     $0xffffff80,%eax
f0107ad8:	a2 ed 2a 53 f0       	mov    %al,0xf0532aed
f0107add:	b8 44 88 10 f0       	mov    $0xf0108844,%eax
f0107ae2:	c1 e8 10             	shr    $0x10,%eax
f0107ae5:	66 a3 ee 2a 53 f0    	mov    %ax,0xf0532aee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f0107aeb:	b8 4a 88 10 f0       	mov    $0xf010884a,%eax
f0107af0:	66 a3 f0 2a 53 f0    	mov    %ax,0xf0532af0
f0107af6:	66 c7 05 f2 2a 53 f0 	movw   $0x8,0xf0532af2
f0107afd:	08 00 
f0107aff:	a0 f4 2a 53 f0       	mov    0xf0532af4,%al
f0107b04:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b07:	a2 f4 2a 53 f0       	mov    %al,0xf0532af4
f0107b0c:	a0 f4 2a 53 f0       	mov    0xf0532af4,%al
f0107b11:	83 e0 1f             	and    $0x1f,%eax
f0107b14:	a2 f4 2a 53 f0       	mov    %al,0xf0532af4
f0107b19:	a0 f5 2a 53 f0       	mov    0xf0532af5,%al
f0107b1e:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b21:	83 c8 0e             	or     $0xe,%eax
f0107b24:	a2 f5 2a 53 f0       	mov    %al,0xf0532af5
f0107b29:	a0 f5 2a 53 f0       	mov    0xf0532af5,%al
f0107b2e:	83 e0 ef             	and    $0xffffffef,%eax
f0107b31:	a2 f5 2a 53 f0       	mov    %al,0xf0532af5
f0107b36:	a0 f5 2a 53 f0       	mov    0xf0532af5,%al
f0107b3b:	83 c8 60             	or     $0x60,%eax
f0107b3e:	a2 f5 2a 53 f0       	mov    %al,0xf0532af5
f0107b43:	a0 f5 2a 53 f0       	mov    0xf0532af5,%al
f0107b48:	83 c8 80             	or     $0xffffff80,%eax
f0107b4b:	a2 f5 2a 53 f0       	mov    %al,0xf0532af5
f0107b50:	b8 4a 88 10 f0       	mov    $0xf010884a,%eax
f0107b55:	c1 e8 10             	shr    $0x10,%eax
f0107b58:	66 a3 f6 2a 53 f0    	mov    %ax,0xf0532af6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f0107b5e:	b8 50 88 10 f0       	mov    $0xf0108850,%eax
f0107b63:	66 a3 f8 2a 53 f0    	mov    %ax,0xf0532af8
f0107b69:	66 c7 05 fa 2a 53 f0 	movw   $0x8,0xf0532afa
f0107b70:	08 00 
f0107b72:	a0 fc 2a 53 f0       	mov    0xf0532afc,%al
f0107b77:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b7a:	a2 fc 2a 53 f0       	mov    %al,0xf0532afc
f0107b7f:	a0 fc 2a 53 f0       	mov    0xf0532afc,%al
f0107b84:	83 e0 1f             	and    $0x1f,%eax
f0107b87:	a2 fc 2a 53 f0       	mov    %al,0xf0532afc
f0107b8c:	a0 fd 2a 53 f0       	mov    0xf0532afd,%al
f0107b91:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b94:	83 c8 0e             	or     $0xe,%eax
f0107b97:	a2 fd 2a 53 f0       	mov    %al,0xf0532afd
f0107b9c:	a0 fd 2a 53 f0       	mov    0xf0532afd,%al
f0107ba1:	83 e0 ef             	and    $0xffffffef,%eax
f0107ba4:	a2 fd 2a 53 f0       	mov    %al,0xf0532afd
f0107ba9:	a0 fd 2a 53 f0       	mov    0xf0532afd,%al
f0107bae:	83 c8 60             	or     $0x60,%eax
f0107bb1:	a2 fd 2a 53 f0       	mov    %al,0xf0532afd
f0107bb6:	a0 fd 2a 53 f0       	mov    0xf0532afd,%al
f0107bbb:	83 c8 80             	or     $0xffffff80,%eax
f0107bbe:	a2 fd 2a 53 f0       	mov    %al,0xf0532afd
f0107bc3:	b8 50 88 10 f0       	mov    $0xf0108850,%eax
f0107bc8:	c1 e8 10             	shr    $0x10,%eax
f0107bcb:	66 a3 fe 2a 53 f0    	mov    %ax,0xf0532afe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f0107bd1:	b8 56 88 10 f0       	mov    $0xf0108856,%eax
f0107bd6:	66 a3 00 2b 53 f0    	mov    %ax,0xf0532b00
f0107bdc:	66 c7 05 02 2b 53 f0 	movw   $0x8,0xf0532b02
f0107be3:	08 00 
f0107be5:	a0 04 2b 53 f0       	mov    0xf0532b04,%al
f0107bea:	83 e0 e0             	and    $0xffffffe0,%eax
f0107bed:	a2 04 2b 53 f0       	mov    %al,0xf0532b04
f0107bf2:	a0 04 2b 53 f0       	mov    0xf0532b04,%al
f0107bf7:	83 e0 1f             	and    $0x1f,%eax
f0107bfa:	a2 04 2b 53 f0       	mov    %al,0xf0532b04
f0107bff:	a0 05 2b 53 f0       	mov    0xf0532b05,%al
f0107c04:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c07:	83 c8 0e             	or     $0xe,%eax
f0107c0a:	a2 05 2b 53 f0       	mov    %al,0xf0532b05
f0107c0f:	a0 05 2b 53 f0       	mov    0xf0532b05,%al
f0107c14:	83 e0 ef             	and    $0xffffffef,%eax
f0107c17:	a2 05 2b 53 f0       	mov    %al,0xf0532b05
f0107c1c:	a0 05 2b 53 f0       	mov    0xf0532b05,%al
f0107c21:	83 c8 60             	or     $0x60,%eax
f0107c24:	a2 05 2b 53 f0       	mov    %al,0xf0532b05
f0107c29:	a0 05 2b 53 f0       	mov    0xf0532b05,%al
f0107c2e:	83 c8 80             	or     $0xffffff80,%eax
f0107c31:	a2 05 2b 53 f0       	mov    %al,0xf0532b05
f0107c36:	b8 56 88 10 f0       	mov    $0xf0108856,%eax
f0107c3b:	c1 e8 10             	shr    $0x10,%eax
f0107c3e:	66 a3 06 2b 53 f0    	mov    %ax,0xf0532b06
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f0107c44:	b8 5c 88 10 f0       	mov    $0xf010885c,%eax
f0107c49:	66 a3 08 2b 53 f0    	mov    %ax,0xf0532b08
f0107c4f:	66 c7 05 0a 2b 53 f0 	movw   $0x8,0xf0532b0a
f0107c56:	08 00 
f0107c58:	a0 0c 2b 53 f0       	mov    0xf0532b0c,%al
f0107c5d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c60:	a2 0c 2b 53 f0       	mov    %al,0xf0532b0c
f0107c65:	a0 0c 2b 53 f0       	mov    0xf0532b0c,%al
f0107c6a:	83 e0 1f             	and    $0x1f,%eax
f0107c6d:	a2 0c 2b 53 f0       	mov    %al,0xf0532b0c
f0107c72:	a0 0d 2b 53 f0       	mov    0xf0532b0d,%al
f0107c77:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c7a:	83 c8 0e             	or     $0xe,%eax
f0107c7d:	a2 0d 2b 53 f0       	mov    %al,0xf0532b0d
f0107c82:	a0 0d 2b 53 f0       	mov    0xf0532b0d,%al
f0107c87:	83 e0 ef             	and    $0xffffffef,%eax
f0107c8a:	a2 0d 2b 53 f0       	mov    %al,0xf0532b0d
f0107c8f:	a0 0d 2b 53 f0       	mov    0xf0532b0d,%al
f0107c94:	83 c8 60             	or     $0x60,%eax
f0107c97:	a2 0d 2b 53 f0       	mov    %al,0xf0532b0d
f0107c9c:	a0 0d 2b 53 f0       	mov    0xf0532b0d,%al
f0107ca1:	83 c8 80             	or     $0xffffff80,%eax
f0107ca4:	a2 0d 2b 53 f0       	mov    %al,0xf0532b0d
f0107ca9:	b8 5c 88 10 f0       	mov    $0xf010885c,%eax
f0107cae:	c1 e8 10             	shr    $0x10,%eax
f0107cb1:	66 a3 0e 2b 53 f0    	mov    %ax,0xf0532b0e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f0107cb7:	b8 62 88 10 f0       	mov    $0xf0108862,%eax
f0107cbc:	66 a3 10 2b 53 f0    	mov    %ax,0xf0532b10
f0107cc2:	66 c7 05 12 2b 53 f0 	movw   $0x8,0xf0532b12
f0107cc9:	08 00 
f0107ccb:	a0 14 2b 53 f0       	mov    0xf0532b14,%al
f0107cd0:	83 e0 e0             	and    $0xffffffe0,%eax
f0107cd3:	a2 14 2b 53 f0       	mov    %al,0xf0532b14
f0107cd8:	a0 14 2b 53 f0       	mov    0xf0532b14,%al
f0107cdd:	83 e0 1f             	and    $0x1f,%eax
f0107ce0:	a2 14 2b 53 f0       	mov    %al,0xf0532b14
f0107ce5:	a0 15 2b 53 f0       	mov    0xf0532b15,%al
f0107cea:	83 e0 f0             	and    $0xfffffff0,%eax
f0107ced:	83 c8 0e             	or     $0xe,%eax
f0107cf0:	a2 15 2b 53 f0       	mov    %al,0xf0532b15
f0107cf5:	a0 15 2b 53 f0       	mov    0xf0532b15,%al
f0107cfa:	83 e0 ef             	and    $0xffffffef,%eax
f0107cfd:	a2 15 2b 53 f0       	mov    %al,0xf0532b15
f0107d02:	a0 15 2b 53 f0       	mov    0xf0532b15,%al
f0107d07:	83 c8 60             	or     $0x60,%eax
f0107d0a:	a2 15 2b 53 f0       	mov    %al,0xf0532b15
f0107d0f:	a0 15 2b 53 f0       	mov    0xf0532b15,%al
f0107d14:	83 c8 80             	or     $0xffffff80,%eax
f0107d17:	a2 15 2b 53 f0       	mov    %al,0xf0532b15
f0107d1c:	b8 62 88 10 f0       	mov    $0xf0108862,%eax
f0107d21:	c1 e8 10             	shr    $0x10,%eax
f0107d24:	66 a3 16 2b 53 f0    	mov    %ax,0xf0532b16
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f0107d2a:	b8 68 88 10 f0       	mov    $0xf0108868,%eax
f0107d2f:	66 a3 18 2b 53 f0    	mov    %ax,0xf0532b18
f0107d35:	66 c7 05 1a 2b 53 f0 	movw   $0x8,0xf0532b1a
f0107d3c:	08 00 
f0107d3e:	a0 1c 2b 53 f0       	mov    0xf0532b1c,%al
f0107d43:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d46:	a2 1c 2b 53 f0       	mov    %al,0xf0532b1c
f0107d4b:	a0 1c 2b 53 f0       	mov    0xf0532b1c,%al
f0107d50:	83 e0 1f             	and    $0x1f,%eax
f0107d53:	a2 1c 2b 53 f0       	mov    %al,0xf0532b1c
f0107d58:	a0 1d 2b 53 f0       	mov    0xf0532b1d,%al
f0107d5d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d60:	83 c8 0e             	or     $0xe,%eax
f0107d63:	a2 1d 2b 53 f0       	mov    %al,0xf0532b1d
f0107d68:	a0 1d 2b 53 f0       	mov    0xf0532b1d,%al
f0107d6d:	83 e0 ef             	and    $0xffffffef,%eax
f0107d70:	a2 1d 2b 53 f0       	mov    %al,0xf0532b1d
f0107d75:	a0 1d 2b 53 f0       	mov    0xf0532b1d,%al
f0107d7a:	83 c8 60             	or     $0x60,%eax
f0107d7d:	a2 1d 2b 53 f0       	mov    %al,0xf0532b1d
f0107d82:	a0 1d 2b 53 f0       	mov    0xf0532b1d,%al
f0107d87:	83 c8 80             	or     $0xffffff80,%eax
f0107d8a:	a2 1d 2b 53 f0       	mov    %al,0xf0532b1d
f0107d8f:	b8 68 88 10 f0       	mov    $0xf0108868,%eax
f0107d94:	c1 e8 10             	shr    $0x10,%eax
f0107d97:	66 a3 1e 2b 53 f0    	mov    %ax,0xf0532b1e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f0107d9d:	c7 05 a4 31 53 f0 00 	movl   $0xefc00000,0xf05331a4
f0107da4:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f0107da7:	66 c7 05 a8 31 53 f0 	movw   $0x10,0xf05331a8
f0107dae:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f0107db0:	66 c7 05 c8 e7 14 f0 	movw   $0x68,0xf014e7c8
f0107db7:	68 00 
f0107db9:	b8 a0 31 53 f0       	mov    $0xf05331a0,%eax
f0107dbe:	66 a3 ca e7 14 f0    	mov    %ax,0xf014e7ca
f0107dc4:	b8 a0 31 53 f0       	mov    $0xf05331a0,%eax
f0107dc9:	c1 e8 10             	shr    $0x10,%eax
f0107dcc:	a2 cc e7 14 f0       	mov    %al,0xf014e7cc
f0107dd1:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107dd6:	83 e0 f0             	and    $0xfffffff0,%eax
f0107dd9:	83 c8 09             	or     $0x9,%eax
f0107ddc:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107de1:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107de6:	83 c8 10             	or     $0x10,%eax
f0107de9:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107dee:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107df3:	83 e0 9f             	and    $0xffffff9f,%eax
f0107df6:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107dfb:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e00:	83 c8 80             	or     $0xffffff80,%eax
f0107e03:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e08:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e0d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e10:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e15:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e1a:	83 e0 ef             	and    $0xffffffef,%eax
f0107e1d:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e22:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e27:	83 e0 df             	and    $0xffffffdf,%eax
f0107e2a:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e2f:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e34:	83 c8 40             	or     $0x40,%eax
f0107e37:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e3c:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e41:	83 e0 7f             	and    $0x7f,%eax
f0107e44:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e49:	b8 a0 31 53 f0       	mov    $0xf05331a0,%eax
f0107e4e:	c1 e8 18             	shr    $0x18,%eax
f0107e51:	a2 cf e7 14 f0       	mov    %al,0xf014e7cf
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f0107e56:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e5b:	83 e0 ef             	and    $0xffffffef,%eax
f0107e5e:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e63:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f0107e69:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f0107e6d:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f0107e70:	0f 01 1d 20 ea 14 f0 	lidtl  0xf014ea20
}
f0107e77:	90                   	nop
f0107e78:	c9                   	leave  
f0107e79:	c3                   	ret    

f0107e7a <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f0107e7a:	55                   	push   %ebp
f0107e7b:	89 e5                	mov    %esp,%ebp
f0107e7d:	53                   	push   %ebx
f0107e7e:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f0107e81:	83 ec 08             	sub    $0x8,%esp
f0107e84:	ff 75 08             	pushl  0x8(%ebp)
f0107e87:	68 5b a7 11 f0       	push   $0xf011a75b
f0107e8c:	e8 05 ef ff ff       	call   f0106d96 <cprintf>
f0107e91:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f0107e94:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e97:	83 ec 0c             	sub    $0xc,%esp
f0107e9a:	50                   	push   %eax
f0107e9b:	e8 fd 00 00 00       	call   f0107f9d <print_regs>
f0107ea0:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0107ea3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea6:	8b 40 20             	mov    0x20(%eax),%eax
f0107ea9:	0f b7 c0             	movzwl %ax,%eax
f0107eac:	83 ec 08             	sub    $0x8,%esp
f0107eaf:	50                   	push   %eax
f0107eb0:	68 6d a7 11 f0       	push   $0xf011a76d
f0107eb5:	e8 dc ee ff ff       	call   f0106d96 <cprintf>
f0107eba:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f0107ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec0:	8b 40 24             	mov    0x24(%eax),%eax
f0107ec3:	0f b7 c0             	movzwl %ax,%eax
f0107ec6:	83 ec 08             	sub    $0x8,%esp
f0107ec9:	50                   	push   %eax
f0107eca:	68 80 a7 11 f0       	push   $0xf011a780
f0107ecf:	e8 c2 ee ff ff       	call   f0106d96 <cprintf>
f0107ed4:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f0107ed7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eda:	8b 58 28             	mov    0x28(%eax),%ebx
f0107edd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee0:	8b 40 28             	mov    0x28(%eax),%eax
f0107ee3:	83 ec 0c             	sub    $0xc,%esp
f0107ee6:	50                   	push   %eax
f0107ee7:	e8 d0 ee ff ff       	call   f0106dbc <trapname>
f0107eec:	83 c4 10             	add    $0x10,%esp
f0107eef:	89 c2                	mov    %eax,%edx
f0107ef1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ef4:	8b 40 28             	mov    0x28(%eax),%eax
f0107ef7:	53                   	push   %ebx
f0107ef8:	52                   	push   %edx
f0107ef9:	50                   	push   %eax
f0107efa:	68 93 a7 11 f0       	push   $0xf011a793
f0107eff:	e8 92 ee ff ff       	call   f0106d96 <cprintf>
f0107f04:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f0107f07:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f0a:	8b 40 2c             	mov    0x2c(%eax),%eax
f0107f0d:	83 ec 08             	sub    $0x8,%esp
f0107f10:	50                   	push   %eax
f0107f11:	68 aa a7 11 f0       	push   $0xf011a7aa
f0107f16:	e8 7b ee ff ff       	call   f0106d96 <cprintf>
f0107f1b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f0107f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f21:	8b 40 30             	mov    0x30(%eax),%eax
f0107f24:	83 ec 08             	sub    $0x8,%esp
f0107f27:	50                   	push   %eax
f0107f28:	68 b9 a7 11 f0       	push   $0xf011a7b9
f0107f2d:	e8 64 ee ff ff       	call   f0106d96 <cprintf>
f0107f32:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f0107f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f38:	8b 40 34             	mov    0x34(%eax),%eax
f0107f3b:	0f b7 c0             	movzwl %ax,%eax
f0107f3e:	83 ec 08             	sub    $0x8,%esp
f0107f41:	50                   	push   %eax
f0107f42:	68 c8 a7 11 f0       	push   $0xf011a7c8
f0107f47:	e8 4a ee ff ff       	call   f0106d96 <cprintf>
f0107f4c:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f0107f4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f52:	8b 40 38             	mov    0x38(%eax),%eax
f0107f55:	83 ec 08             	sub    $0x8,%esp
f0107f58:	50                   	push   %eax
f0107f59:	68 db a7 11 f0       	push   $0xf011a7db
f0107f5e:	e8 33 ee ff ff       	call   f0106d96 <cprintf>
f0107f63:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f0107f66:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f69:	8b 40 3c             	mov    0x3c(%eax),%eax
f0107f6c:	83 ec 08             	sub    $0x8,%esp
f0107f6f:	50                   	push   %eax
f0107f70:	68 ea a7 11 f0       	push   $0xf011a7ea
f0107f75:	e8 1c ee ff ff       	call   f0106d96 <cprintf>
f0107f7a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f0107f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f80:	8b 40 40             	mov    0x40(%eax),%eax
f0107f83:	0f b7 c0             	movzwl %ax,%eax
f0107f86:	83 ec 08             	sub    $0x8,%esp
f0107f89:	50                   	push   %eax
f0107f8a:	68 f9 a7 11 f0       	push   $0xf011a7f9
f0107f8f:	e8 02 ee ff ff       	call   f0106d96 <cprintf>
f0107f94:	83 c4 10             	add    $0x10,%esp
}
f0107f97:	90                   	nop
f0107f98:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107f9b:	c9                   	leave  
f0107f9c:	c3                   	ret    

f0107f9d <print_regs>:

void print_regs(struct PushRegs *regs)
{
f0107f9d:	55                   	push   %ebp
f0107f9e:	89 e5                	mov    %esp,%ebp
f0107fa0:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f0107fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa6:	8b 00                	mov    (%eax),%eax
f0107fa8:	83 ec 08             	sub    $0x8,%esp
f0107fab:	50                   	push   %eax
f0107fac:	68 0c a8 11 f0       	push   $0xf011a80c
f0107fb1:	e8 e0 ed ff ff       	call   f0106d96 <cprintf>
f0107fb6:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f0107fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fbc:	8b 40 04             	mov    0x4(%eax),%eax
f0107fbf:	83 ec 08             	sub    $0x8,%esp
f0107fc2:	50                   	push   %eax
f0107fc3:	68 1b a8 11 f0       	push   $0xf011a81b
f0107fc8:	e8 c9 ed ff ff       	call   f0106d96 <cprintf>
f0107fcd:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f0107fd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fd3:	8b 40 08             	mov    0x8(%eax),%eax
f0107fd6:	83 ec 08             	sub    $0x8,%esp
f0107fd9:	50                   	push   %eax
f0107fda:	68 2a a8 11 f0       	push   $0xf011a82a
f0107fdf:	e8 b2 ed ff ff       	call   f0106d96 <cprintf>
f0107fe4:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f0107fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fea:	8b 40 0c             	mov    0xc(%eax),%eax
f0107fed:	83 ec 08             	sub    $0x8,%esp
f0107ff0:	50                   	push   %eax
f0107ff1:	68 39 a8 11 f0       	push   $0xf011a839
f0107ff6:	e8 9b ed ff ff       	call   f0106d96 <cprintf>
f0107ffb:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f0107ffe:	8b 45 08             	mov    0x8(%ebp),%eax
f0108001:	8b 40 10             	mov    0x10(%eax),%eax
f0108004:	83 ec 08             	sub    $0x8,%esp
f0108007:	50                   	push   %eax
f0108008:	68 48 a8 11 f0       	push   $0xf011a848
f010800d:	e8 84 ed ff ff       	call   f0106d96 <cprintf>
f0108012:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f0108015:	8b 45 08             	mov    0x8(%ebp),%eax
f0108018:	8b 40 14             	mov    0x14(%eax),%eax
f010801b:	83 ec 08             	sub    $0x8,%esp
f010801e:	50                   	push   %eax
f010801f:	68 57 a8 11 f0       	push   $0xf011a857
f0108024:	e8 6d ed ff ff       	call   f0106d96 <cprintf>
f0108029:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010802c:	8b 45 08             	mov    0x8(%ebp),%eax
f010802f:	8b 40 18             	mov    0x18(%eax),%eax
f0108032:	83 ec 08             	sub    $0x8,%esp
f0108035:	50                   	push   %eax
f0108036:	68 66 a8 11 f0       	push   $0xf011a866
f010803b:	e8 56 ed ff ff       	call   f0106d96 <cprintf>
f0108040:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f0108043:	8b 45 08             	mov    0x8(%ebp),%eax
f0108046:	8b 40 1c             	mov    0x1c(%eax),%eax
f0108049:	83 ec 08             	sub    $0x8,%esp
f010804c:	50                   	push   %eax
f010804d:	68 75 a8 11 f0       	push   $0xf011a875
f0108052:	e8 3f ed ff ff       	call   f0106d96 <cprintf>
f0108057:	83 c4 10             	add    $0x10,%esp
}
f010805a:	90                   	nop
f010805b:	c9                   	leave  
f010805c:	c3                   	ret    

f010805d <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010805d:	55                   	push   %ebp
f010805e:	89 e5                	mov    %esp,%ebp
f0108060:	57                   	push   %edi
f0108061:	56                   	push   %esi
f0108062:	53                   	push   %ebx
f0108063:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f0108066:	8b 45 08             	mov    0x8(%ebp),%eax
f0108069:	8b 40 28             	mov    0x28(%eax),%eax
f010806c:	83 f8 0e             	cmp    $0xe,%eax
f010806f:	75 21                	jne    f0108092 <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU())
f0108071:	e8 8f 02 00 00       	call   f0108305 <isPageReplacmentAlgorithmLRU>
f0108076:	85 c0                	test   %eax,%eax
f0108078:	74 05                	je     f010807f <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010807a:	e8 1f 1e 00 00       	call   f0109e9e <update_WS_time_stamps>
		}
		fault_handler(tf);
f010807f:	83 ec 0c             	sub    $0xc,%esp
f0108082:	ff 75 08             	pushl  0x8(%ebp)
f0108085:	e8 bb 03 00 00       	call   f0108445 <fault_handler>
f010808a:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010808d:	e9 a5 00 00 00       	jmp    f0108137 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f0108092:	8b 45 08             	mov    0x8(%ebp),%eax
f0108095:	8b 40 28             	mov    0x28(%eax),%eax
f0108098:	83 f8 30             	cmp    $0x30,%eax
f010809b:	75 42                	jne    f01080df <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010809d:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a0:	8b 78 04             	mov    0x4(%eax),%edi
f01080a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a6:	8b 30                	mov    (%eax),%esi
f01080a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ab:	8b 58 10             	mov    0x10(%eax),%ebx
f01080ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01080b1:	8b 48 18             	mov    0x18(%eax),%ecx
f01080b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01080b7:	8b 50 14             	mov    0x14(%eax),%edx
f01080ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01080bd:	8b 40 1c             	mov    0x1c(%eax),%eax
f01080c0:	83 ec 08             	sub    $0x8,%esp
f01080c3:	57                   	push   %edi
f01080c4:	56                   	push   %esi
f01080c5:	53                   	push   %ebx
f01080c6:	51                   	push   %ecx
f01080c7:	52                   	push   %edx
f01080c8:	50                   	push   %eax
f01080c9:	e8 73 26 00 00       	call   f010a741 <syscall>
f01080ce:	83 c4 20             	add    $0x20,%esp
f01080d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f01080d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01080da:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01080dd:	eb 58                	jmp    f0108137 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f01080df:	8b 45 08             	mov    0x8(%ebp),%eax
f01080e2:	8b 40 28             	mov    0x28(%eax),%eax
f01080e5:	83 f8 08             	cmp    $0x8,%eax
f01080e8:	75 17                	jne    f0108101 <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f01080ea:	83 ec 04             	sub    $0x4,%esp
f01080ed:	68 84 a8 11 f0       	push   $0xf011a884
f01080f2:	68 f3 00 00 00       	push   $0xf3
f01080f7:	68 93 a8 11 f0       	push   $0xf011a893
f01080fc:	e8 75 80 ff ff       	call   f0100176 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f0108101:	8b 45 08             	mov    0x8(%ebp),%eax
f0108104:	8b 40 28             	mov    0x28(%eax),%eax
f0108107:	83 f8 20             	cmp    $0x20,%eax
f010810a:	75 07                	jne    f0108113 <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f010810c:	e8 74 1d 00 00       	call   f0109e85 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f0108111:	eb 24                	jmp    f0108137 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f0108113:	8b 45 08             	mov    0x8(%ebp),%eax
f0108116:	8b 40 34             	mov    0x34(%eax),%eax
f0108119:	66 83 f8 08          	cmp    $0x8,%ax
f010811d:	75 17                	jne    f0108136 <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f010811f:	83 ec 04             	sub    $0x4,%esp
f0108122:	68 9f a8 11 f0       	push   $0xf011a89f
f0108127:	68 00 01 00 00       	push   $0x100
f010812c:	68 93 a8 11 f0       	push   $0xf011a893
f0108131:	e8 40 80 ff ff       	call   f0100176 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f0108136:	90                   	nop
		}
	}
	return;
}
f0108137:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010813a:	5b                   	pop    %ebx
f010813b:	5e                   	pop    %esi
f010813c:	5f                   	pop    %edi
f010813d:	5d                   	pop    %ebp
f010813e:	c3                   	ret    

f010813f <trap>:

void trap(struct Trapframe *tf)
{
f010813f:	55                   	push   %ebp
f0108140:	89 e5                	mov    %esp,%ebp
f0108142:	57                   	push   %edi
f0108143:	56                   	push   %esi
f0108144:	53                   	push   %ebx
f0108145:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f0108148:	e8 3c e9 ff ff       	call   f0106a89 <kclock_stop>

	int userTrap = 0;
f010814d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108154:	8b 45 08             	mov    0x8(%ebp),%eax
f0108157:	8b 40 34             	mov    0x34(%eax),%eax
f010815a:	0f b7 c0             	movzwl %ax,%eax
f010815d:	83 e0 03             	and    $0x3,%eax
f0108160:	83 f8 03             	cmp    $0x3,%eax
f0108163:	75 49                	jne    f01081ae <trap+0x6f>
		assert(curenv);
f0108165:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010816a:	85 c0                	test   %eax,%eax
f010816c:	75 19                	jne    f0108187 <trap+0x48>
f010816e:	68 b8 a8 11 f0       	push   $0xf011a8b8
f0108173:	68 bf a8 11 f0       	push   $0xf011a8bf
f0108178:	68 10 01 00 00       	push   $0x110
f010817d:	68 93 a8 11 f0       	push   $0xf011a893
f0108182:	e8 ef 7f ff ff       	call   f0100176 <_panic>
		curenv->env_tf = *tf;
f0108187:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	89 c3                	mov    %eax,%ebx
f0108192:	b8 11 00 00 00       	mov    $0x11,%eax
f0108197:	89 d7                	mov    %edx,%edi
f0108199:	89 de                	mov    %ebx,%esi
f010819b:	89 c1                	mov    %eax,%ecx
f010819d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010819f:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01081a4:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f01081a7:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f01081ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b1:	8b 40 28             	mov    0x28(%eax),%eax
f01081b4:	83 f8 20             	cmp    $0x20,%eax
f01081b7:	75 40                	jne    f01081f9 <trap+0xba>
	{
//		uint16 cnt0 = kclock_read_cnt0() ;
//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f01081b9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01081bd:	0f 84 a6 00 00 00    	je     f0108269 <trap+0x12a>
		{
			assert(curenv);
f01081c3:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01081c8:	85 c0                	test   %eax,%eax
f01081ca:	75 19                	jne    f01081e5 <trap+0xa6>
f01081cc:	68 b8 a8 11 f0       	push   $0xf011a8b8
f01081d1:	68 bf a8 11 f0       	push   $0xf011a8bf
f01081d6:	68 1c 01 00 00       	push   $0x11c
f01081db:	68 93 a8 11 f0       	push   $0xf011a893
f01081e0:	e8 91 7f ff ff       	call   f0100176 <_panic>
			curenv->nClocks++ ;
f01081e5:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01081ea:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f01081f0:	42                   	inc    %edx
f01081f1:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
f01081f7:	eb 70                	jmp    f0108269 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f01081f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01081fc:	8b 40 28             	mov    0x28(%eax),%eax
f01081ff:	83 f8 0e             	cmp    $0xe,%eax
f0108202:	75 65                	jne    f0108269 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f0108204:	a0 80 29 53 f0       	mov    0xf0532980,%al
f0108209:	84 c0                	test   %al,%al
f010820b:	74 5c                	je     f0108269 <trap+0x12a>
			if (userTrap){
f010820d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108211:	74 2c                	je     f010823f <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f0108213:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108218:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f010821e:	8b 52 30             	mov    0x30(%edx),%edx
f0108221:	89 d1                	mov    %edx,%ecx
f0108223:	8a 15 80 29 53 f0    	mov    0xf0532980,%dl
f0108229:	0f b6 d2             	movzbl %dl,%edx
f010822c:	01 ca                	add    %ecx,%edx
f010822e:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f0108231:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108236:	83 ec 0c             	sub    $0xc,%esp
f0108239:	50                   	push   %eax
f010823a:	e8 77 de ff ff       	call   f01060b6 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010823f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108242:	8b 40 30             	mov    0x30(%eax),%eax
f0108245:	89 c2                	mov    %eax,%edx
f0108247:	a0 80 29 53 f0       	mov    0xf0532980,%al
f010824c:	0f b6 c0             	movzbl %al,%eax
f010824f:	01 d0                	add    %edx,%eax
f0108251:	89 c2                	mov    %eax,%edx
f0108253:	8b 45 08             	mov    0x8(%ebp),%eax
f0108256:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f0108259:	e8 d0 e7 ff ff       	call   f0106a2e <kclock_resume>
				env_pop_tf(tf);
f010825e:	83 ec 0c             	sub    $0xc,%esp
f0108261:	ff 75 08             	pushl  0x8(%ebp)
f0108264:	e8 a0 e6 ff ff       	call   f0106909 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f0108269:	83 ec 0c             	sub    $0xc,%esp
f010826c:	ff 75 08             	pushl  0x8(%ebp)
f010826f:	e8 e9 fd ff ff       	call   f010805d <trap_dispatch>
f0108274:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f0108277:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010827b:	74 3d                	je     f01082ba <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010827d:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108282:	85 c0                	test   %eax,%eax
f0108284:	74 0d                	je     f0108293 <trap+0x154>
f0108286:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010828b:	8b 40 54             	mov    0x54(%eax),%eax
f010828e:	83 f8 02             	cmp    $0x2,%eax
f0108291:	74 19                	je     f01082ac <trap+0x16d>
f0108293:	68 d4 a8 11 f0       	push   $0xf011a8d4
f0108298:	68 bf a8 11 f0       	push   $0xf011a8bf
f010829d:	68 31 01 00 00       	push   $0x131
f01082a2:	68 93 a8 11 f0       	push   $0xf011a893
f01082a7:	e8 ca 7e ff ff       	call   f0100176 <_panic>
		env_run(curenv);
f01082ac:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01082b1:	83 ec 0c             	sub    $0xc,%esp
f01082b4:	50                   	push   %eax
f01082b5:	e8 fc dd ff ff       	call   f01060b6 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f01082ba:	83 ec 0c             	sub    $0xc,%esp
f01082bd:	ff 75 08             	pushl  0x8(%ebp)
f01082c0:	e8 44 e6 ff ff       	call   f0106909 <env_pop_tf>

f01082c5 <setPageReplacmentAlgorithmLRU>:
	}
}

void setPageReplacmentAlgorithmLRU(){_PageRepAlgoType = PG_REP_LRU;}
f01082c5:	55                   	push   %ebp
f01082c6:	89 e5                	mov    %esp,%ebp
f01082c8:	c7 05 68 32 53 f0 01 	movl   $0x1,0xf0533268
f01082cf:	00 00 00 
f01082d2:	90                   	nop
f01082d3:	5d                   	pop    %ebp
f01082d4:	c3                   	ret    

f01082d5 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f01082d5:	55                   	push   %ebp
f01082d6:	89 e5                	mov    %esp,%ebp
f01082d8:	c7 05 68 32 53 f0 02 	movl   $0x2,0xf0533268
f01082df:	00 00 00 
f01082e2:	90                   	nop
f01082e3:	5d                   	pop    %ebp
f01082e4:	c3                   	ret    

f01082e5 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f01082e5:	55                   	push   %ebp
f01082e6:	89 e5                	mov    %esp,%ebp
f01082e8:	c7 05 68 32 53 f0 03 	movl   $0x3,0xf0533268
f01082ef:	00 00 00 
f01082f2:	90                   	nop
f01082f3:	5d                   	pop    %ebp
f01082f4:	c3                   	ret    

f01082f5 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f01082f5:	55                   	push   %ebp
f01082f6:	89 e5                	mov    %esp,%ebp
f01082f8:	c7 05 68 32 53 f0 04 	movl   $0x4,0xf0533268
f01082ff:	00 00 00 
f0108302:	90                   	nop
f0108303:	5d                   	pop    %ebp
f0108304:	c3                   	ret    

f0108305 <isPageReplacmentAlgorithmLRU>:

uint32 isPageReplacmentAlgorithmLRU(){if(_PageRepAlgoType == PG_REP_LRU) return 1; return 0;}
f0108305:	55                   	push   %ebp
f0108306:	89 e5                	mov    %esp,%ebp
f0108308:	a1 68 32 53 f0       	mov    0xf0533268,%eax
f010830d:	83 f8 01             	cmp    $0x1,%eax
f0108310:	75 07                	jne    f0108319 <isPageReplacmentAlgorithmLRU+0x14>
f0108312:	b8 01 00 00 00       	mov    $0x1,%eax
f0108317:	eb 05                	jmp    f010831e <isPageReplacmentAlgorithmLRU+0x19>
f0108319:	b8 00 00 00 00       	mov    $0x0,%eax
f010831e:	5d                   	pop    %ebp
f010831f:	c3                   	ret    

f0108320 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f0108320:	55                   	push   %ebp
f0108321:	89 e5                	mov    %esp,%ebp
f0108323:	a1 68 32 53 f0       	mov    0xf0533268,%eax
f0108328:	83 f8 02             	cmp    $0x2,%eax
f010832b:	75 07                	jne    f0108334 <isPageReplacmentAlgorithmCLOCK+0x14>
f010832d:	b8 01 00 00 00       	mov    $0x1,%eax
f0108332:	eb 05                	jmp    f0108339 <isPageReplacmentAlgorithmCLOCK+0x19>
f0108334:	b8 00 00 00 00       	mov    $0x0,%eax
f0108339:	5d                   	pop    %ebp
f010833a:	c3                   	ret    

f010833b <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010833b:	55                   	push   %ebp
f010833c:	89 e5                	mov    %esp,%ebp
f010833e:	a1 68 32 53 f0       	mov    0xf0533268,%eax
f0108343:	83 f8 03             	cmp    $0x3,%eax
f0108346:	75 07                	jne    f010834f <isPageReplacmentAlgorithmFIFO+0x14>
f0108348:	b8 01 00 00 00       	mov    $0x1,%eax
f010834d:	eb 05                	jmp    f0108354 <isPageReplacmentAlgorithmFIFO+0x19>
f010834f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108354:	5d                   	pop    %ebp
f0108355:	c3                   	ret    

f0108356 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f0108356:	55                   	push   %ebp
f0108357:	89 e5                	mov    %esp,%ebp
f0108359:	a1 68 32 53 f0       	mov    0xf0533268,%eax
f010835e:	83 f8 04             	cmp    $0x4,%eax
f0108361:	75 07                	jne    f010836a <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f0108363:	b8 01 00 00 00       	mov    $0x1,%eax
f0108368:	eb 05                	jmp    f010836f <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010836a:	b8 00 00 00 00       	mov    $0x0,%eax
f010836f:	5d                   	pop    %ebp
f0108370:	c3                   	ret    

f0108371 <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f0108371:	55                   	push   %ebp
f0108372:	89 e5                	mov    %esp,%ebp
f0108374:	8b 45 08             	mov    0x8(%ebp),%eax
f0108377:	a3 58 32 53 f0       	mov    %eax,0xf0533258
f010837c:	90                   	nop
f010837d:	5d                   	pop    %ebp
f010837e:	c3                   	ret    

f010837f <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010837f:	55                   	push   %ebp
f0108380:	89 e5                	mov    %esp,%ebp
f0108382:	a1 58 32 53 f0       	mov    0xf0533258,%eax
f0108387:	5d                   	pop    %ebp
f0108388:	c3                   	ret    

f0108389 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f0108389:	55                   	push   %ebp
f010838a:	89 e5                	mov    %esp,%ebp
f010838c:	8b 45 08             	mov    0x8(%ebp),%eax
f010838f:	a3 6c 32 53 f0       	mov    %eax,0xf053326c
f0108394:	90                   	nop
f0108395:	5d                   	pop    %ebp
f0108396:	c3                   	ret    

f0108397 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f0108397:	55                   	push   %ebp
f0108398:	89 e5                	mov    %esp,%ebp
f010839a:	a1 6c 32 53 f0       	mov    0xf053326c,%eax
f010839f:	5d                   	pop    %ebp
f01083a0:	c3                   	ret    

f01083a1 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f01083a1:	55                   	push   %ebp
f01083a2:	89 e5                	mov    %esp,%ebp
f01083a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a7:	a3 78 32 53 f0       	mov    %eax,0xf0533278
f01083ac:	90                   	nop
f01083ad:	5d                   	pop    %ebp
f01083ae:	c3                   	ret    

f01083af <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f01083af:	55                   	push   %ebp
f01083b0:	89 e5                	mov    %esp,%ebp
f01083b2:	a1 78 32 53 f0       	mov    0xf0533278,%eax
f01083b7:	5d                   	pop    %ebp
f01083b8:	c3                   	ret    

f01083b9 <detect_modified_loop>:


void detect_modified_loop()
{
f01083b9:	55                   	push   %ebp
f01083ba:	89 e5                	mov    %esp,%ebp
f01083bc:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f01083bf:	a1 a0 16 55 f0       	mov    0xf05516a0,%eax
f01083c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f01083c7:	a1 a0 16 55 f0       	mov    0xf05516a0,%eax
f01083cc:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01083cf:	eb 52                	jmp    f0108423 <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01083d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083d4:	8b 00                	mov    (%eax),%eax
f01083d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01083d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083df:	75 12                	jne    f01083f3 <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01083e1:	83 ec 0c             	sub    $0xc,%esp
f01083e4:	68 01 a9 11 f0       	push   $0xf011a901
f01083e9:	e8 a8 e9 ff ff       	call   f0106d96 <cprintf>
f01083ee:	83 c4 10             	add    $0x10,%esp
			break;
f01083f1:	eb 3f                	jmp    f0108432 <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f01083f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01083f7:	74 38                	je     f0108431 <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01083f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083fc:	8b 00                	mov    (%eax),%eax
f01083fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0108401:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108404:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108407:	75 12                	jne    f010841b <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108409:	83 ec 0c             	sub    $0xc,%esp
f010840c:	68 01 a9 11 f0       	push   $0xf011a901
f0108411:	e8 80 e9 ff ff       	call   f0106d96 <cprintf>
f0108416:	83 c4 10             	add    $0x10,%esp
			break;
f0108419:	eb 17                	jmp    f0108432 <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f010841b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010841e:	8b 00                	mov    (%eax),%eax
f0108420:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f0108423:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108427:	74 09                	je     f0108432 <detect_modified_loop+0x79>
f0108429:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010842d:	75 a2                	jne    f01083d1 <detect_modified_loop+0x18>
f010842f:	eb 01                	jmp    f0108432 <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0108431:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f0108432:	83 ec 0c             	sub    $0xc,%esp
f0108435:	68 1d a9 11 f0       	push   $0xf011a91d
f010843a:	e8 57 e9 ff ff       	call   f0106d96 <cprintf>
f010843f:	83 c4 10             	add    $0x10,%esp
}
f0108442:	90                   	nop
f0108443:	c9                   	leave  
f0108444:	c3                   	ret    

f0108445 <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f0108445:	55                   	push   %ebp
f0108446:	89 e5                	mov    %esp,%ebp
f0108448:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010844b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108452:	8b 45 08             	mov    0x8(%ebp),%eax
f0108455:	8b 40 34             	mov    0x34(%eax),%eax
f0108458:	0f b7 c0             	movzwl %ax,%eax
f010845b:	83 e0 03             	and    $0x3,%eax
f010845e:	83 f8 03             	cmp    $0x3,%eax
f0108461:	75 07                	jne    f010846a <fault_handler+0x25>
		userTrap = 1;
f0108463:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010846a:	0f 20 d0             	mov    %cr2,%eax
f010846d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f0108470:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f0108473:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f0108476:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010847a:	75 29                	jne    f01084a5 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010847c:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f0108483:	77 40                	ja     f01084c5 <fault_handler+0x80>
f0108485:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010848c:	76 37                	jbe    f01084c5 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010848e:	83 ec 04             	sub    $0x4,%esp
f0108491:	68 3c a9 11 f0       	push   $0xf011a93c
f0108496:	68 7e 01 00 00       	push   $0x17e
f010849b:	68 93 a8 11 f0       	push   $0xf011a893
f01084a0:	e8 d1 7c ff ff       	call   f0100176 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f01084a5:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f01084ac:	76 17                	jbe    f01084c5 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f01084ae:	83 ec 04             	sub    $0x4,%esp
f01084b1:	68 60 a9 11 f0       	push   $0xf011a960
f01084b6:	68 84 01 00 00       	push   $0x184
f01084bb:	68 93 a8 11 f0       	push   $0xf011a893
f01084c0:	e8 b1 7c ff ff       	call   f0100176 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f01084c5:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01084ca:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f01084cd:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01084d2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01084d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084d8:	c1 ea 16             	shr    $0x16,%edx
f01084db:	c1 e2 02             	shl    $0x2,%edx
f01084de:	01 d0                	add    %edx,%eax
f01084e0:	8b 00                	mov    (%eax),%eax
f01084e2:	83 e0 01             	and    $0x1,%eax
f01084e5:	85 c0                	test   %eax,%eax
f01084e7:	75 28                	jne    f0108511 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f01084e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084ec:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
f01084f2:	8d 50 01             	lea    0x1(%eax),%edx
f01084f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f8:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)

		table_fault_handler(faulted_env, fault_va);
f01084fe:	83 ec 08             	sub    $0x8,%esp
f0108501:	ff 75 ec             	pushl  -0x14(%ebp)
f0108504:	ff 75 e8             	pushl  -0x18(%ebp)
f0108507:	e8 56 00 00 00       	call   f0108562 <table_fault_handler>
f010850c:	83 c4 10             	add    $0x10,%esp
f010850f:	eb 42                	jmp    f0108553 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f0108511:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108514:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f010851a:	8d 50 01             	lea    0x1(%eax),%edx
f010851d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108520:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)

//				cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
//				cprintf("\nPage working set BEFORE fault handler...\n");
//				env_page_ws_print(curenv);

		if(isBufferingEnabled())
f0108526:	e8 6c fe ff ff       	call   f0108397 <isBufferingEnabled>
f010852b:	85 c0                	test   %eax,%eax
f010852d:	74 13                	je     f0108542 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010852f:	83 ec 08             	sub    $0x8,%esp
f0108532:	ff 75 ec             	pushl  -0x14(%ebp)
f0108535:	ff 75 e8             	pushl  -0x18(%ebp)
f0108538:	e8 20 02 00 00       	call   f010875d <__page_fault_handler_with_buffering>
f010853d:	83 c4 10             	add    $0x10,%esp
f0108540:	eb 11                	jmp    f0108553 <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f0108542:	83 ec 08             	sub    $0x8,%esp
f0108545:	ff 75 ec             	pushl  -0x14(%ebp)
f0108548:	ff 75 e8             	pushl  -0x18(%ebp)
f010854b:	e8 42 01 00 00       	call   f0108692 <page_fault_handler>
f0108550:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108553:	0f 20 d8             	mov    %cr3,%eax
f0108556:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108559:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010855c:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010855f:	90                   	nop
f0108560:	c9                   	leave  
f0108561:	c3                   	ret    

f0108562 <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0108562:	55                   	push   %ebp
f0108563:	89 e5                	mov    %esp,%ebp
f0108565:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
	if(USE_KHEAP)
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f0108568:	8b 45 08             	mov    0x8(%ebp),%eax
f010856b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010856e:	83 ec 08             	sub    $0x8,%esp
f0108571:	ff 75 0c             	pushl  0xc(%ebp)
f0108574:	50                   	push   %eax
f0108575:	e8 f3 b6 ff ff       	call   f0103c6d <create_page_table>
f010857a:	83 c4 10             	add    $0x10,%esp
f010857d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}

}
f0108580:	90                   	nop
f0108581:	c9                   	leave  
f0108582:	c3                   	ret    

f0108583 <placement>:

void placement(struct Env * curenv, uint32 fault_va) {
f0108583:	55                   	push   %ebp
f0108584:	89 e5                	mov    %esp,%ebp
f0108586:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* framePTR;
	allocate_frame(&framePTR);
f0108589:	83 ec 0c             	sub    $0xc,%esp
f010858c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010858f:	50                   	push   %eax
f0108590:	e8 01 b4 ff ff       	call   f0103996 <allocate_frame>
f0108595:	83 c4 10             	add    $0x10,%esp
	map_frame(curenv->env_page_directory, framePTR, (void*)fault_va, PERM_USER|PERM_WRITEABLE);
f0108598:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010859b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010859e:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085a4:	6a 06                	push   $0x6
f01085a6:	51                   	push   %ecx
f01085a7:	52                   	push   %edx
f01085a8:	50                   	push   %eax
f01085a9:	e8 5c b7 ff ff       	call   f0103d0a <map_frame>
f01085ae:	83 c4 10             	add    $0x10,%esp

	if(pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f01085b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085b4:	83 ec 08             	sub    $0x8,%esp
f01085b7:	50                   	push   %eax
f01085b8:	ff 75 08             	pushl  0x8(%ebp)
f01085bb:	e8 4c 2f 00 00       	call   f010b50c <pf_read_env_page>
f01085c0:	83 c4 10             	add    $0x10,%esp
f01085c3:	83 f8 f7             	cmp    $0xfffffff7,%eax
f01085c6:	75 4f                	jne    f0108617 <placement+0x94>
		fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
f01085c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01085d6:	89 45 0c             	mov    %eax,0xc(%ebp)
		if((fault_va >= USER_HEAP_MAX) && fault_va<USTACKTOP)
f01085d9:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f01085e0:	76 1e                	jbe    f0108600 <placement+0x7d>
f01085e2:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f01085e9:	77 15                	ja     f0108600 <placement+0x7d>
			pf_add_empty_env_page(curenv, fault_va, 1);
f01085eb:	83 ec 04             	sub    $0x4,%esp
f01085ee:	6a 01                	push   $0x1
f01085f0:	ff 75 0c             	pushl  0xc(%ebp)
f01085f3:	ff 75 08             	pushl  0x8(%ebp)
f01085f6:	e8 75 2c 00 00       	call   f010b270 <pf_add_empty_env_page>
f01085fb:	83 c4 10             	add    $0x10,%esp
f01085fe:	eb 17                	jmp    f0108617 <placement+0x94>
		else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
f0108600:	83 ec 04             	sub    $0x4,%esp
f0108603:	68 84 a9 11 f0       	push   $0xf011a984
f0108608:	68 cc 01 00 00       	push   $0x1cc
f010860d:	68 93 a8 11 f0       	push   $0xf011a893
f0108612:	e8 5f 7b ff ff       	call   f0100176 <_panic>
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f0108617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010861e:	eb 5f                	jmp    f010867f <placement+0xfc>
		if(env_page_ws_is_entry_empty(curenv, i)) {
f0108620:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108623:	83 ec 08             	sub    $0x8,%esp
f0108626:	50                   	push   %eax
f0108627:	ff 75 08             	pushl  0x8(%ebp)
f010862a:	e8 1a bf ff ff       	call   f0104549 <env_page_ws_is_entry_empty>
f010862f:	83 c4 10             	add    $0x10,%esp
f0108632:	85 c0                	test   %eax,%eax
f0108634:	74 46                	je     f010867c <placement+0xf9>
			env_page_ws_set_entry(curenv, i, fault_va);
f0108636:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108639:	83 ec 04             	sub    $0x4,%esp
f010863c:	ff 75 0c             	pushl  0xc(%ebp)
f010863f:	50                   	push   %eax
f0108640:	ff 75 08             	pushl  0x8(%ebp)
f0108643:	e8 50 bd ff ff       	call   f0104398 <env_page_ws_set_entry>
f0108648:	83 c4 10             	add    $0x10,%esp
			curenv->page_last_WS_index = i+1;
f010864b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010864e:	40                   	inc    %eax
f010864f:	89 c2                	mov    %eax,%edx
f0108651:	8b 45 08             	mov    0x8(%ebp),%eax
f0108654:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010865a:	8b 45 08             	mov    0x8(%ebp),%eax
f010865d:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0108663:	8b 45 08             	mov    0x8(%ebp),%eax
f0108666:	8b 40 74             	mov    0x74(%eax),%eax
f0108669:	39 c2                	cmp    %eax,%edx
f010866b:	75 21                	jne    f010868e <placement+0x10b>
				curenv->page_last_WS_index = 0;
f010866d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108670:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108677:	00 00 00 
			break;
f010867a:	eb 12                	jmp    f010868e <placement+0x10b>
		if((fault_va >= USER_HEAP_MAX) && fault_va<USTACKTOP)
			pf_add_empty_env_page(curenv, fault_va, 1);
		else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f010867c:	ff 45 f4             	incl   -0xc(%ebp)
f010867f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108682:	8b 50 74             	mov    0x74(%eax),%edx
f0108685:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108688:	39 c2                	cmp    %eax,%edx
f010868a:	77 94                	ja     f0108620 <placement+0x9d>
			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
				curenv->page_last_WS_index = 0;
			break;
		}
	}
}
f010868c:	eb 01                	jmp    f010868f <placement+0x10c>
			env_page_ws_set_entry(curenv, i, fault_va);
			curenv->page_last_WS_index = i+1;

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
				curenv->page_last_WS_index = 0;
			break;
f010868e:	90                   	nop
		}
	}
}
f010868f:	90                   	nop
f0108690:	c9                   	leave  
f0108691:	c3                   	ret    

f0108692 <page_fault_handler>:

//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va) {
f0108692:	55                   	push   %ebp
f0108693:	89 e5                	mov    %esp,%ebp
f0108695:	83 ec 18             	sub    $0x18,%esp
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	//refer to the project presentation and documentation for details

	if (env_page_ws_get_size(curenv) >= curenv->page_WS_max_size) {
f0108698:	83 ec 0c             	sub    $0xc,%esp
f010869b:	ff 75 08             	pushl  0x8(%ebp)
f010869e:	e8 41 bc ff ff       	call   f01042e4 <env_page_ws_get_size>
f01086a3:	83 c4 10             	add    $0x10,%esp
f01086a6:	89 c2                	mov    %eax,%edx
f01086a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01086ab:	8b 40 74             	mov    0x74(%eax),%eax
f01086ae:	39 c2                	cmp    %eax,%edx
f01086b0:	0f 82 93 00 00 00    	jb     f0108749 <page_fault_handler+0xb7>
		uint32 virAdd = env_page_ws_get_virtual_address(curenv, curenv->page_last_WS_index);
f01086b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01086b9:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01086bf:	83 ec 08             	sub    $0x8,%esp
f01086c2:	50                   	push   %eax
f01086c3:	ff 75 08             	pushl  0x8(%ebp)
f01086c6:	e8 ee bd ff ff       	call   f01044b9 <env_page_ws_get_virtual_address>
f01086cb:	83 c4 10             	add    $0x10,%esp
f01086ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

		if(pt_get_page_permissions(curenv, virAdd) & PERM_MODIFIED) {
f01086d1:	83 ec 08             	sub    $0x8,%esp
f01086d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01086d7:	ff 75 08             	pushl  0x8(%ebp)
f01086da:	e8 2d c9 ff ff       	call   f010500c <pt_get_page_permissions>
f01086df:	83 c4 10             	add    $0x10,%esp
f01086e2:	83 e0 40             	and    $0x40,%eax
f01086e5:	85 c0                	test   %eax,%eax
f01086e7:	74 32                	je     f010871b <page_fault_handler+0x89>
			uint32* ptr;
			struct Frame_Info* framePTR = get_frame_info(curenv->env_page_directory, (void*)virAdd, &ptr);
f01086e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01086ef:	8b 40 5c             	mov    0x5c(%eax),%eax
f01086f2:	83 ec 04             	sub    $0x4,%esp
f01086f5:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f01086f8:	51                   	push   %ecx
f01086f9:	52                   	push   %edx
f01086fa:	50                   	push   %eax
f01086fb:	e8 c9 b6 ff ff       	call   f0103dc9 <get_frame_info>
f0108700:	83 c4 10             	add    $0x10,%esp
f0108703:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pf_update_env_page(curenv, (void*)virAdd, framePTR);
f0108706:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108709:	83 ec 04             	sub    $0x4,%esp
f010870c:	ff 75 f0             	pushl  -0x10(%ebp)
f010870f:	50                   	push   %eax
f0108710:	ff 75 08             	pushl  0x8(%ebp)
f0108713:	e8 f5 2c 00 00       	call   f010b40d <pf_update_env_page>
f0108718:	83 c4 10             	add    $0x10,%esp
		}

		unmap_frame(curenv->env_page_directory, (void*)virAdd);
f010871b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010871e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108721:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108724:	83 ec 08             	sub    $0x8,%esp
f0108727:	52                   	push   %edx
f0108728:	50                   	push   %eax
f0108729:	e8 0b b7 ff ff       	call   f0103e39 <unmap_frame>
f010872e:	83 c4 10             	add    $0x10,%esp
		env_page_ws_clear_entry(curenv, curenv->page_last_WS_index);
f0108731:	8b 45 08             	mov    0x8(%ebp),%eax
f0108734:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010873a:	83 ec 08             	sub    $0x8,%esp
f010873d:	50                   	push   %eax
f010873e:	ff 75 08             	pushl  0x8(%ebp)
f0108741:	e8 f9 bc ff ff       	call   f010443f <env_page_ws_clear_entry>
f0108746:	83 c4 10             	add    $0x10,%esp
	}

	placement(curenv, fault_va);
f0108749:	83 ec 08             	sub    $0x8,%esp
f010874c:	ff 75 0c             	pushl  0xc(%ebp)
f010874f:	ff 75 08             	pushl  0x8(%ebp)
f0108752:	e8 2c fe ff ff       	call   f0108583 <placement>
f0108757:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f010875a:	90                   	nop
f010875b:	c9                   	leave  
f010875c:	c3                   	ret    

f010875d <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010875d:	55                   	push   %ebp
f010875e:	89 e5                	mov    %esp,%ebp
f0108760:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("this function is not required...!!");
f0108763:	83 ec 04             	sub    $0x4,%esp
f0108766:	68 bc a9 11 f0       	push   $0xf011a9bc
f010876b:	68 f8 01 00 00       	push   $0x1f8
f0108770:	68 93 a8 11 f0       	push   $0xf011a893
f0108775:	e8 fc 79 ff ff       	call   f0100176 <_panic>

f010877a <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010877a:	6a 0e                	push   $0xe
f010877c:	e9 ed 00 00 00       	jmp    f010886e <_alltraps>
f0108781:	90                   	nop

f0108782 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f0108782:	6a 00                	push   $0x0
f0108784:	6a 30                	push   $0x30
f0108786:	e9 e3 00 00 00       	jmp    f010886e <_alltraps>
f010878b:	90                   	nop

f010878c <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010878c:	6a 08                	push   $0x8
f010878e:	e9 db 00 00 00       	jmp    f010886e <_alltraps>
f0108793:	90                   	nop

f0108794 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f0108794:	6a 00                	push   $0x0
f0108796:	6a 00                	push   $0x0
f0108798:	e9 d1 00 00 00       	jmp    f010886e <_alltraps>
f010879d:	90                   	nop

f010879e <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010879e:	6a 00                	push   $0x0
f01087a0:	6a 01                	push   $0x1
f01087a2:	e9 c7 00 00 00       	jmp    f010886e <_alltraps>
f01087a7:	90                   	nop

f01087a8 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f01087a8:	6a 00                	push   $0x0
f01087aa:	6a 02                	push   $0x2
f01087ac:	e9 bd 00 00 00       	jmp    f010886e <_alltraps>
f01087b1:	90                   	nop

f01087b2 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f01087b2:	6a 00                	push   $0x0
f01087b4:	6a 03                	push   $0x3
f01087b6:	e9 b3 00 00 00       	jmp    f010886e <_alltraps>
f01087bb:	90                   	nop

f01087bc <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f01087bc:	6a 00                	push   $0x0
f01087be:	6a 04                	push   $0x4
f01087c0:	e9 a9 00 00 00       	jmp    f010886e <_alltraps>
f01087c5:	90                   	nop

f01087c6 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f01087c6:	6a 00                	push   $0x0
f01087c8:	6a 05                	push   $0x5
f01087ca:	e9 9f 00 00 00       	jmp    f010886e <_alltraps>
f01087cf:	90                   	nop

f01087d0 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f01087d0:	6a 00                	push   $0x0
f01087d2:	6a 06                	push   $0x6
f01087d4:	e9 95 00 00 00       	jmp    f010886e <_alltraps>
f01087d9:	90                   	nop

f01087da <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f01087da:	6a 00                	push   $0x0
f01087dc:	6a 07                	push   $0x7
f01087de:	e9 8b 00 00 00       	jmp    f010886e <_alltraps>
f01087e3:	90                   	nop

f01087e4 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f01087e4:	6a 0a                	push   $0xa
f01087e6:	e9 83 00 00 00       	jmp    f010886e <_alltraps>
f01087eb:	90                   	nop

f01087ec <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f01087ec:	6a 0b                	push   $0xb
f01087ee:	eb 7e                	jmp    f010886e <_alltraps>

f01087f0 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f01087f0:	6a 0c                	push   $0xc
f01087f2:	eb 7a                	jmp    f010886e <_alltraps>

f01087f4 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f01087f4:	6a 0d                	push   $0xd
f01087f6:	eb 76                	jmp    f010886e <_alltraps>

f01087f8 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f01087f8:	6a 00                	push   $0x0
f01087fa:	6a 10                	push   $0x10
f01087fc:	eb 70                	jmp    f010886e <_alltraps>

f01087fe <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f01087fe:	6a 11                	push   $0x11
f0108800:	eb 6c                	jmp    f010886e <_alltraps>

f0108802 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f0108802:	6a 00                	push   $0x0
f0108804:	6a 12                	push   $0x12
f0108806:	eb 66                	jmp    f010886e <_alltraps>

f0108808 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f0108808:	6a 00                	push   $0x0
f010880a:	6a 13                	push   $0x13
f010880c:	eb 60                	jmp    f010886e <_alltraps>

f010880e <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010880e:	6a 00                	push   $0x0
f0108810:	6a 20                	push   $0x20
f0108812:	eb 5a                	jmp    f010886e <_alltraps>

f0108814 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f0108814:	6a 00                	push   $0x0
f0108816:	6a 21                	push   $0x21
f0108818:	eb 54                	jmp    f010886e <_alltraps>

f010881a <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010881a:	6a 00                	push   $0x0
f010881c:	6a 22                	push   $0x22
f010881e:	eb 4e                	jmp    f010886e <_alltraps>

f0108820 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f0108820:	6a 00                	push   $0x0
f0108822:	6a 23                	push   $0x23
f0108824:	eb 48                	jmp    f010886e <_alltraps>

f0108826 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f0108826:	6a 00                	push   $0x0
f0108828:	6a 24                	push   $0x24
f010882a:	eb 42                	jmp    f010886e <_alltraps>

f010882c <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010882c:	6a 00                	push   $0x0
f010882e:	6a 25                	push   $0x25
f0108830:	eb 3c                	jmp    f010886e <_alltraps>

f0108832 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f0108832:	6a 00                	push   $0x0
f0108834:	6a 26                	push   $0x26
f0108836:	eb 36                	jmp    f010886e <_alltraps>

f0108838 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f0108838:	6a 00                	push   $0x0
f010883a:	6a 27                	push   $0x27
f010883c:	eb 30                	jmp    f010886e <_alltraps>

f010883e <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010883e:	6a 00                	push   $0x0
f0108840:	6a 28                	push   $0x28
f0108842:	eb 2a                	jmp    f010886e <_alltraps>

f0108844 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f0108844:	6a 00                	push   $0x0
f0108846:	6a 29                	push   $0x29
f0108848:	eb 24                	jmp    f010886e <_alltraps>

f010884a <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010884a:	6a 00                	push   $0x0
f010884c:	6a 2a                	push   $0x2a
f010884e:	eb 1e                	jmp    f010886e <_alltraps>

f0108850 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f0108850:	6a 00                	push   $0x0
f0108852:	6a 2b                	push   $0x2b
f0108854:	eb 18                	jmp    f010886e <_alltraps>

f0108856 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f0108856:	6a 00                	push   $0x0
f0108858:	6a 2c                	push   $0x2c
f010885a:	eb 12                	jmp    f010886e <_alltraps>

f010885c <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010885c:	6a 00                	push   $0x0
f010885e:	6a 2d                	push   $0x2d
f0108860:	eb 0c                	jmp    f010886e <_alltraps>

f0108862 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f0108862:	6a 00                	push   $0x0
f0108864:	6a 2e                	push   $0x2e
f0108866:	eb 06                	jmp    f010886e <_alltraps>

f0108868 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f0108868:	6a 00                	push   $0x0
f010886a:	6a 2f                	push   $0x2f
f010886c:	eb 00                	jmp    f010886e <_alltraps>

f010886e <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds 
f010886e:	1e                   	push   %ds
push %es 
f010886f:	06                   	push   %es
pushal 	
f0108870:	60                   	pusha  

mov $(GD_KD), %ax 
f0108871:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f0108875:	8e d8                	mov    %eax,%ds
mov %ax,%es
f0108877:	8e c0                	mov    %eax,%es

push %esp
f0108879:	54                   	push   %esp

call trap
f010887a:	e8 c0 f8 ff ff       	call   f010813f <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at 
f010887f:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal 	
f0108880:	61                   	popa   
pop %es 
f0108881:	07                   	pop    %es
pop %ds    
f0108882:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f0108883:	83 c4 08             	add    $0x8,%esp

iret
f0108886:	cf                   	iret   

f0108887 <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0108887:	55                   	push   %ebp
f0108888:	89 e5                	mov    %esp,%ebp
f010888a:	a1 54 32 53 f0       	mov    0xf0533254,%eax
f010888f:	85 c0                	test   %eax,%eax
f0108891:	75 07                	jne    f010889a <isSchedMethodRR+0x13>
f0108893:	b8 01 00 00 00       	mov    $0x1,%eax
f0108898:	eb 05                	jmp    f010889f <isSchedMethodRR+0x18>
f010889a:	b8 00 00 00 00       	mov    $0x0,%eax
f010889f:	5d                   	pop    %ebp
f01088a0:	c3                   	ret    

f01088a1 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01088a1:	55                   	push   %ebp
f01088a2:	89 e5                	mov    %esp,%ebp
f01088a4:	a1 54 32 53 f0       	mov    0xf0533254,%eax
f01088a9:	83 f8 01             	cmp    $0x1,%eax
f01088ac:	75 07                	jne    f01088b5 <isSchedMethodMLFQ+0x14>
f01088ae:	b8 01 00 00 00       	mov    $0x1,%eax
f01088b3:	eb 05                	jmp    f01088ba <isSchedMethodMLFQ+0x19>
f01088b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01088ba:	5d                   	pop    %ebp
f01088bb:	c3                   	ret    

f01088bc <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01088bc:	55                   	push   %ebp
f01088bd:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01088bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01088c3:	74 1d                	je     f01088e2 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01088c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01088c8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01088ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01088d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01088d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01088db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01088e2:	90                   	nop
f01088e3:	5d                   	pop    %ebp
f01088e4:	c3                   	ret    

f01088e5 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01088e5:	55                   	push   %ebp
f01088e6:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01088e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01088ec:	74 08                	je     f01088f6 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01088ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01088f1:	8b 40 0c             	mov    0xc(%eax),%eax
f01088f4:	eb 05                	jmp    f01088fb <queue_size+0x16>
	}
	else
	{
		return 0;
f01088f6:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01088fb:	5d                   	pop    %ebp
f01088fc:	c3                   	ret    

f01088fd <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01088fd:	55                   	push   %ebp
f01088fe:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108900:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108904:	74 4c                	je     f0108952 <enqueue+0x55>
	{
		LIST_INSERT_HEAD(queue, env);
f0108906:	8b 45 08             	mov    0x8(%ebp),%eax
f0108909:	8b 10                	mov    (%eax),%edx
f010890b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010890e:	89 50 44             	mov    %edx,0x44(%eax)
f0108911:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108914:	8b 40 44             	mov    0x44(%eax),%eax
f0108917:	85 c0                	test   %eax,%eax
f0108919:	74 0d                	je     f0108928 <enqueue+0x2b>
f010891b:	8b 45 08             	mov    0x8(%ebp),%eax
f010891e:	8b 00                	mov    (%eax),%eax
f0108920:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108923:	89 50 48             	mov    %edx,0x48(%eax)
f0108926:	eb 09                	jmp    f0108931 <enqueue+0x34>
f0108928:	8b 45 08             	mov    0x8(%ebp),%eax
f010892b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010892e:	89 50 04             	mov    %edx,0x4(%eax)
f0108931:	8b 45 08             	mov    0x8(%ebp),%eax
f0108934:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108937:	89 10                	mov    %edx,(%eax)
f0108939:	8b 45 0c             	mov    0xc(%ebp),%eax
f010893c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108943:	8b 45 08             	mov    0x8(%ebp),%eax
f0108946:	8b 40 0c             	mov    0xc(%eax),%eax
f0108949:	8d 50 01             	lea    0x1(%eax),%edx
f010894c:	8b 45 08             	mov    0x8(%ebp),%eax
f010894f:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0108952:	90                   	nop
f0108953:	5d                   	pop    %ebp
f0108954:	c3                   	ret    

f0108955 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0108955:	55                   	push   %ebp
f0108956:	89 e5                	mov    %esp,%ebp
f0108958:	83 ec 10             	sub    $0x10,%esp
	struct Env* envItem = LIST_LAST(queue);
f010895b:	8b 45 08             	mov    0x8(%ebp),%eax
f010895e:	8b 40 04             	mov    0x4(%eax),%eax
f0108961:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (envItem != NULL)
f0108964:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108968:	74 70                	je     f01089da <dequeue+0x85>
	{
		LIST_REMOVE(queue, envItem);
f010896a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010896d:	8b 40 44             	mov    0x44(%eax),%eax
f0108970:	85 c0                	test   %eax,%eax
f0108972:	74 11                	je     f0108985 <dequeue+0x30>
f0108974:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108977:	8b 40 44             	mov    0x44(%eax),%eax
f010897a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010897d:	8b 52 48             	mov    0x48(%edx),%edx
f0108980:	89 50 48             	mov    %edx,0x48(%eax)
f0108983:	eb 0c                	jmp    f0108991 <dequeue+0x3c>
f0108985:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108988:	8b 50 48             	mov    0x48(%eax),%edx
f010898b:	8b 45 08             	mov    0x8(%ebp),%eax
f010898e:	89 50 04             	mov    %edx,0x4(%eax)
f0108991:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108994:	8b 40 48             	mov    0x48(%eax),%eax
f0108997:	85 c0                	test   %eax,%eax
f0108999:	74 11                	je     f01089ac <dequeue+0x57>
f010899b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010899e:	8b 40 48             	mov    0x48(%eax),%eax
f01089a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01089a4:	8b 52 44             	mov    0x44(%edx),%edx
f01089a7:	89 50 44             	mov    %edx,0x44(%eax)
f01089aa:	eb 0b                	jmp    f01089b7 <dequeue+0x62>
f01089ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089af:	8b 50 44             	mov    0x44(%eax),%edx
f01089b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01089b5:	89 10                	mov    %edx,(%eax)
f01089b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089ba:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01089c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089c4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01089cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01089ce:	8b 40 0c             	mov    0xc(%eax),%eax
f01089d1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01089d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01089d7:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01089da:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01089dd:	c9                   	leave  
f01089de:	c3                   	ret    

f01089df <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01089df:	55                   	push   %ebp
f01089e0:	89 e5                	mov    %esp,%ebp
	if (e != NULL)
f01089e2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01089e6:	74 70                	je     f0108a58 <remove_from_queue+0x79>
	{
		LIST_REMOVE(queue, e);
f01089e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089eb:	8b 40 44             	mov    0x44(%eax),%eax
f01089ee:	85 c0                	test   %eax,%eax
f01089f0:	74 11                	je     f0108a03 <remove_from_queue+0x24>
f01089f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089f5:	8b 40 44             	mov    0x44(%eax),%eax
f01089f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089fb:	8b 52 48             	mov    0x48(%edx),%edx
f01089fe:	89 50 48             	mov    %edx,0x48(%eax)
f0108a01:	eb 0c                	jmp    f0108a0f <remove_from_queue+0x30>
f0108a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a06:	8b 50 48             	mov    0x48(%eax),%edx
f0108a09:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a0c:	89 50 04             	mov    %edx,0x4(%eax)
f0108a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a12:	8b 40 48             	mov    0x48(%eax),%eax
f0108a15:	85 c0                	test   %eax,%eax
f0108a17:	74 11                	je     f0108a2a <remove_from_queue+0x4b>
f0108a19:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0108a1f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a22:	8b 52 44             	mov    0x44(%edx),%edx
f0108a25:	89 50 44             	mov    %edx,0x44(%eax)
f0108a28:	eb 0b                	jmp    f0108a35 <remove_from_queue+0x56>
f0108a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a2d:	8b 50 44             	mov    0x44(%eax),%edx
f0108a30:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a33:	89 10                	mov    %edx,(%eax)
f0108a35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a38:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108a3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a42:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a4c:	8b 40 0c             	mov    0xc(%eax),%eax
f0108a4f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a55:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0108a58:	90                   	nop
f0108a59:	5d                   	pop    %ebp
f0108a5a:	c3                   	ret    

f0108a5b <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0108a5b:	55                   	push   %ebp
f0108a5c:	89 e5                	mov    %esp,%ebp
f0108a5e:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0108a61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0108a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a6b:	8b 00                	mov    (%eax),%eax
f0108a6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0108a70:	eb 19                	jmp    f0108a8b <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0108a72:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108a75:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108a78:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108a7b:	75 05                	jne    f0108a82 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0108a7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108a80:	eb 37                	jmp    f0108ab9 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0108a82:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a85:	8b 40 08             	mov    0x8(%eax),%eax
f0108a88:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0108a8b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108a8f:	74 08                	je     f0108a99 <find_env_in_queue+0x3e>
f0108a91:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108a94:	8b 40 44             	mov    0x44(%eax),%eax
f0108a97:	eb 05                	jmp    f0108a9e <find_env_in_queue+0x43>
f0108a99:	b8 00 00 00 00       	mov    $0x0,%eax
f0108a9e:	8b 55 08             	mov    0x8(%ebp),%edx
f0108aa1:	89 42 08             	mov    %eax,0x8(%edx)
f0108aa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108aa7:	8b 40 08             	mov    0x8(%eax),%eax
f0108aaa:	85 c0                	test   %eax,%eax
f0108aac:	75 c4                	jne    f0108a72 <find_env_in_queue+0x17>
f0108aae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108ab2:	75 be                	jne    f0108a72 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0108ab4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108ab9:	c9                   	leave  
f0108aba:	c3                   	ret    

f0108abb <sched_init_MLFQ>:

uint32 ret;
uint8 val;
struct Env* next;

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel) {
f0108abb:	55                   	push   %ebp
f0108abc:	89 e5                	mov    %esp,%ebp
f0108abe:	53                   	push   %ebx
f0108abf:	83 ec 34             	sub    $0x34,%esp
f0108ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ac5:	88 45 d4             	mov    %al,-0x2c(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0108ac8:	e8 b1 03 00 00       	call   f0108e7e <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0108acd:	c7 05 5c 32 53 f0 00 	movl   $0x0,0xf053325c
f0108ad4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f0108ad7:	c7 05 54 32 53 f0 01 	movl   $0x1,0xf0533254
f0108ade:	00 00 00 

	//TODO: [PROJECT 2022 [7] CPU Scheduling MLFQ] Initialize MLFQ
	// Write your code here, remove the panic and write your code
	//panic("sched_init_MLFQ() is not implemented yet...!!");

	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*numOfLevels);
f0108ae1:	0f b6 45 d4          	movzbl -0x2c(%ebp),%eax
f0108ae5:	c1 e0 04             	shl    $0x4,%eax
f0108ae8:	83 ec 0c             	sub    $0xc,%esp
f0108aeb:	50                   	push   %eax
f0108aec:	e8 35 33 00 00       	call   f010be26 <kmalloc>
f0108af1:	83 c4 10             	add    $0x10,%esp
f0108af4:	a3 18 32 53 f0       	mov    %eax,0xf0533218
	num_of_ready_queues = numOfLevels;
f0108af9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0108afc:	a2 64 32 53 f0       	mov    %al,0xf0533264

	//[1] Create the ready queues and initialize them using init_queue()
	quantums = quantumOfEachLevel;
f0108b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b04:	a3 34 32 53 f0       	mov    %eax,0xf0533234
	for(int i=0;i<num_of_ready_queues;i++)
f0108b09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108b10:	eb 1c                	jmp    f0108b2e <sched_init_MLFQ+0x73>
		init_queue(&(env_ready_queues[i]));
f0108b12:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108b17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108b1a:	c1 e2 04             	shl    $0x4,%edx
f0108b1d:	01 d0                	add    %edx,%eax
f0108b1f:	83 ec 0c             	sub    $0xc,%esp
f0108b22:	50                   	push   %eax
f0108b23:	e8 94 fd ff ff       	call   f01088bc <init_queue>
f0108b28:	83 c4 10             	add    $0x10,%esp
	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*numOfLevels);
	num_of_ready_queues = numOfLevels;

	//[1] Create the ready queues and initialize them using init_queue()
	quantums = quantumOfEachLevel;
	for(int i=0;i<num_of_ready_queues;i++)
f0108b2b:	ff 45 f4             	incl   -0xc(%ebp)
f0108b2e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0108b33:	0f b6 c0             	movzbl %al,%eax
f0108b36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108b39:	7f d7                	jg     f0108b12 <sched_init_MLFQ+0x57>
		init_queue(&(env_ready_queues[i]));

	uint8* quantams = kmalloc(sizeof(*(quantumOfEachLevel))*numOfLevels);
f0108b3b:	0f b6 45 d4          	movzbl -0x2c(%ebp),%eax
f0108b3f:	83 ec 0c             	sub    $0xc,%esp
f0108b42:	50                   	push   %eax
f0108b43:	e8 de 32 00 00       	call   f010be26 <kmalloc>
f0108b48:	83 c4 10             	add    $0x10,%esp
f0108b4b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	uint8 quantums[*(quantumOfEachLevel)];
f0108b4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b51:	8a 00                	mov    (%eax),%al
f0108b53:	89 e2                	mov    %esp,%edx
f0108b55:	89 d3                	mov    %edx,%ebx
f0108b57:	0f b6 d0             	movzbl %al,%edx
f0108b5a:	4a                   	dec    %edx
f0108b5b:	89 55 e8             	mov    %edx,-0x18(%ebp)
f0108b5e:	0f b6 c0             	movzbl %al,%eax
f0108b61:	ba 10 00 00 00       	mov    $0x10,%edx
f0108b66:	4a                   	dec    %edx
f0108b67:	01 d0                	add    %edx,%eax
f0108b69:	b9 10 00 00 00       	mov    $0x10,%ecx
f0108b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b73:	f7 f1                	div    %ecx
f0108b75:	6b c0 10             	imul   $0x10,%eax,%eax
f0108b78:	29 c4                	sub    %eax,%esp
f0108b7a:	89 e0                	mov    %esp,%eax
f0108b7c:	83 c0 00             	add    $0x0,%eax
f0108b7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(int i=0; i<quantums[*(quantumOfEachLevel)]; i++)
f0108b82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0108b89:	eb 12                	jmp    f0108b9d <sched_init_MLFQ+0xe2>
		quantums[i] = i;
f0108b8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b8e:	88 c2                	mov    %al,%dl
f0108b90:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0108b93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b96:	01 c8                	add    %ecx,%eax
f0108b98:	88 10                	mov    %dl,(%eax)

	uint8* quantams = kmalloc(sizeof(*(quantumOfEachLevel))*numOfLevels);

	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	uint8 quantums[*(quantumOfEachLevel)];
	for(int i=0; i<quantums[*(quantumOfEachLevel)]; i++)
f0108b9a:	ff 45 f0             	incl   -0x10(%ebp)
f0108b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ba0:	8a 00                	mov    (%eax),%al
f0108ba2:	0f b6 c0             	movzbl %al,%eax
f0108ba5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108ba8:	8a 04 02             	mov    (%edx,%eax,1),%al
f0108bab:	0f b6 c0             	movzbl %al,%eax
f0108bae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108bb1:	7f d8                	jg     f0108b8b <sched_init_MLFQ+0xd0>
		quantums[i] = i;

	//[3] Set the CPU2 quantum by the first level one
	kclock_set_quantum (quantums[0]);
f0108bb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108bb6:	8a 00                	mov    (%eax),%al
f0108bb8:	0f b6 c0             	movzbl %al,%eax
f0108bbb:	83 ec 0c             	sub    $0xc,%esp
f0108bbe:	50                   	push   %eax
f0108bbf:	e8 23 de ff ff       	call   f01069e7 <kclock_set_quantum>
f0108bc4:	83 c4 10             	add    $0x10,%esp
f0108bc7:	89 dc                	mov    %ebx,%esp
}
f0108bc9:	90                   	nop
f0108bca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108bcd:	c9                   	leave  
f0108bce:	c3                   	ret    

f0108bcf <fos_scheduler_MLFQ>:

struct Env* fos_scheduler_MLFQ() {
f0108bcf:	55                   	push   %ebp
f0108bd0:	89 e5                	mov    %esp,%ebp
f0108bd2:	53                   	push   %ebx
f0108bd3:	83 ec 14             	sub    $0x14,%esp
f0108bd6:	89 e0                	mov    %esp,%eax
f0108bd8:	89 c3                	mov    %eax,%ebx
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue

	uint8 m;
	uint8 Ready;
	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*num_of_ready_queues);
f0108bda:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0108bdf:	0f b6 c0             	movzbl %al,%eax
f0108be2:	c1 e0 04             	shl    $0x4,%eax
f0108be5:	83 ec 0c             	sub    $0xc,%esp
f0108be8:	50                   	push   %eax
f0108be9:	e8 38 32 00 00       	call   f010be26 <kmalloc>
f0108bee:	83 c4 10             	add    $0x10,%esp
f0108bf1:	a3 18 32 53 f0       	mov    %eax,0xf0533218
	uint8 quantums[*(quantums)];
f0108bf6:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108bfb:	8a 00                	mov    (%eax),%al
f0108bfd:	0f b6 d0             	movzbl %al,%edx
f0108c00:	4a                   	dec    %edx
f0108c01:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0108c04:	0f b6 c0             	movzbl %al,%eax
f0108c07:	ba 10 00 00 00       	mov    $0x10,%edx
f0108c0c:	4a                   	dec    %edx
f0108c0d:	01 d0                	add    %edx,%eax
f0108c0f:	b9 10 00 00 00       	mov    $0x10,%ecx
f0108c14:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c19:	f7 f1                	div    %ecx
f0108c1b:	6b c0 10             	imul   $0x10,%eax,%eax
f0108c1e:	29 c4                	sub    %eax,%esp
f0108c20:	89 e0                	mov    %esp,%eax
f0108c22:	83 c0 00             	add    $0x0,%eax
f0108c25:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//[2] Search for the next env in the queues according to their priorities (first is highest)
	//[3] If next env is found: Set the CPU quantum by the quantum of the selected level
	//							,remove the selected env from its queue and return it
	//	  Else, return NULL

	if(curenv == NULL) {
f0108c28:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108c2d:	85 c0                	test   %eax,%eax
f0108c2f:	0f 85 86 00 00 00    	jne    f0108cbb <fos_scheduler_MLFQ+0xec>
		for(uint8 i = 0; i<num_of_ready_queues;i++) {
f0108c35:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
f0108c39:	eb 76                	jmp    f0108cb1 <fos_scheduler_MLFQ+0xe2>
			ret = queue_size(&env_ready_queues[i]);
f0108c3b:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108c40:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
f0108c44:	c1 e2 04             	shl    $0x4,%edx
f0108c47:	01 d0                	add    %edx,%eax
f0108c49:	83 ec 0c             	sub    $0xc,%esp
f0108c4c:	50                   	push   %eax
f0108c4d:	e8 93 fc ff ff       	call   f01088e5 <queue_size>
f0108c52:	83 c4 10             	add    $0x10,%esp
f0108c55:	a3 e4 16 55 f0       	mov    %eax,0xf05516e4
			if(ret > 0) {
f0108c5a:	a1 e4 16 55 f0       	mov    0xf05516e4,%eax
f0108c5f:	85 c0                	test   %eax,%eax
f0108c61:	74 37                	je     f0108c9a <fos_scheduler_MLFQ+0xcb>
				next = dequeue(&(env_ready_queues[i]));
f0108c63:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108c68:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
f0108c6c:	c1 e2 04             	shl    $0x4,%edx
f0108c6f:	01 d0                	add    %edx,%eax
f0108c71:	83 ec 0c             	sub    $0xc,%esp
f0108c74:	50                   	push   %eax
f0108c75:	e8 db fc ff ff       	call   f0108955 <dequeue>
f0108c7a:	83 c4 10             	add    $0x10,%esp
f0108c7d:	a3 e0 16 55 f0       	mov    %eax,0xf05516e0
				val = i;
f0108c82:	8a 45 f7             	mov    -0x9(%ebp),%al
f0108c85:	a2 dc 16 55 f0       	mov    %al,0xf05516dc

				if(next != NULL) {
f0108c8a:	a1 e0 16 55 f0       	mov    0xf05516e0,%eax
f0108c8f:	85 c0                	test   %eax,%eax
f0108c91:	74 17                	je     f0108caa <fos_scheduler_MLFQ+0xdb>
					return next;
f0108c93:	a1 e0 16 55 f0       	mov    0xf05516e0,%eax
f0108c98:	eb 26                	jmp    f0108cc0 <fos_scheduler_MLFQ+0xf1>
					kclock_set_quantum (quantums[i]);
				}
			}
			else if(ret == 0) i++;
f0108c9a:	a1 e4 16 55 f0       	mov    0xf05516e4,%eax
f0108c9f:	85 c0                	test   %eax,%eax
f0108ca1:	75 07                	jne    f0108caa <fos_scheduler_MLFQ+0xdb>
f0108ca3:	8a 45 f7             	mov    -0x9(%ebp),%al
f0108ca6:	40                   	inc    %eax
f0108ca7:	88 45 f7             	mov    %al,-0x9(%ebp)
	//[3] If next env is found: Set the CPU quantum by the quantum of the selected level
	//							,remove the selected env from its queue and return it
	//	  Else, return NULL

	if(curenv == NULL) {
		for(uint8 i = 0; i<num_of_ready_queues;i++) {
f0108caa:	8a 45 f7             	mov    -0x9(%ebp),%al
f0108cad:	40                   	inc    %eax
f0108cae:	88 45 f7             	mov    %al,-0x9(%ebp)
f0108cb1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0108cb6:	38 45 f7             	cmp    %al,-0x9(%ebp)
f0108cb9:	72 80                	jb     f0108c3b <fos_scheduler_MLFQ+0x6c>
				}
			}
			else if(ret == 0) i++;
		}
	}
	return NULL;
f0108cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cc0:	89 dc                	mov    %ebx,%esp
}
f0108cc2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108cc5:	c9                   	leave  
f0108cc6:	c3                   	ret    

f0108cc7 <fos_scheduler>:
//==================================================================================//



void fos_scheduler(void)
{
f0108cc7:	55                   	push   %ebp
f0108cc8:	89 e5                	mov    %esp,%ebp
f0108cca:	83 ec 18             	sub    $0x18,%esp

	chk1();
f0108ccd:	e8 a9 c8 00 00       	call   f011557b <chk1>
	scheduler_status = SCH_STARTED;
f0108cd2:	c7 05 5c 32 53 f0 01 	movl   $0x1,0xf053325c
f0108cd9:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0108cdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0108ce3:	a1 54 32 53 f0       	mov    0xf0533254,%eax
f0108ce8:	85 c0                	test   %eax,%eax
f0108cea:	75 4d                	jne    f0108d39 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0108cec:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108cf1:	85 c0                	test   %eax,%eax
f0108cf3:	74 18                	je     f0108d0d <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0108cf5:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f0108cfb:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108d00:	83 ec 08             	sub    $0x8,%esp
f0108d03:	52                   	push   %edx
f0108d04:	50                   	push   %eax
f0108d05:	e8 f3 fb ff ff       	call   f01088fd <enqueue>
f0108d0a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0108d0d:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108d12:	83 ec 0c             	sub    $0xc,%esp
f0108d15:	50                   	push   %eax
f0108d16:	e8 3a fc ff ff       	call   f0108955 <dequeue>
f0108d1b:	83 c4 10             	add    $0x10,%esp
f0108d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0108d21:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108d26:	8a 00                	mov    (%eax),%al
f0108d28:	0f b6 c0             	movzbl %al,%eax
f0108d2b:	83 ec 0c             	sub    $0xc,%esp
f0108d2e:	50                   	push   %eax
f0108d2f:	e8 b3 dc ff ff       	call   f01069e7 <kclock_set_quantum>
f0108d34:	83 c4 10             	add    $0x10,%esp
f0108d37:	eb 12                	jmp    f0108d4b <fos_scheduler+0x84>

	}
	else if (scheduler_method == SCH_MLFQ)
f0108d39:	a1 54 32 53 f0       	mov    0xf0533254,%eax
f0108d3e:	83 f8 01             	cmp    $0x1,%eax
f0108d41:	75 08                	jne    f0108d4b <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0108d43:	e8 87 fe ff ff       	call   f0108bcf <fos_scheduler_MLFQ>
f0108d48:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0108d4b:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0108d50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0108d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d56:	a3 50 29 53 f0       	mov    %eax,0xf0532950
	chk2(next_env);
f0108d5b:	83 ec 0c             	sub    $0xc,%esp
f0108d5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d61:	e8 52 c8 00 00       	call   f01155b8 <chk2>
f0108d66:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0108d69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d6c:	a3 50 29 53 f0       	mov    %eax,0xf0532950

	//cprintf("Scheduler select program '%s'\n", next_env->prog_name);
	if(next_env != NULL)
f0108d71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108d75:	74 0b                	je     f0108d82 <fos_scheduler+0xbb>
	{
		env_run(next_env);
f0108d77:	83 ec 0c             	sub    $0xc,%esp
f0108d7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d7d:	e8 34 d3 ff ff       	call   f01060b6 <env_run>
	}
	else
	{
		curenv = NULL;
f0108d82:	c7 05 50 29 53 f0 00 	movl   $0x0,0xf0532950
f0108d89:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0108d8c:	a1 d8 16 55 f0       	mov    0xf05516d8,%eax
f0108d91:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108d94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d97:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0108d9a:	c7 05 5c 32 53 f0 00 	movl   $0x0,0xf053325c
f0108da1:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0108da4:	83 ec 0c             	sub    $0xc,%esp
f0108da7:	6a 00                	push   $0x0
f0108da9:	e8 46 8a ff ff       	call   f01017f4 <run_command_prompt>
f0108dae:	83 c4 10             	add    $0x10,%esp
f0108db1:	eb f1                	jmp    f0108da4 <fos_scheduler+0xdd>

f0108db3 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0108db3:	55                   	push   %ebp
f0108db4:	89 e5                	mov    %esp,%ebp
f0108db6:	83 ec 18             	sub    $0x18,%esp
f0108db9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dbc:	88 45 f4             	mov    %al,-0xc(%ebp)
	sched_delete_ready_queues();
f0108dbf:	e8 ba 00 00 00       	call   f0108e7e <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0108dc4:	c7 05 5c 32 53 f0 00 	movl   $0x0,0xf053325c
f0108dcb:	00 00 00 
	scheduler_method = SCH_RR;
f0108dce:	c7 05 54 32 53 f0 00 	movl   $0x0,0xf0533254
f0108dd5:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0108dd8:	c6 05 64 32 53 f0 01 	movb   $0x1,0xf0533264
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0108ddf:	83 ec 0c             	sub    $0xc,%esp
f0108de2:	6a 10                	push   $0x10
f0108de4:	e8 3d 30 00 00       	call   f010be26 <kmalloc>
f0108de9:	83 c4 10             	add    $0x10,%esp
f0108dec:	a3 18 32 53 f0       	mov    %eax,0xf0533218
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0108df1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0108df6:	0f b6 c0             	movzbl %al,%eax
f0108df9:	83 ec 0c             	sub    $0xc,%esp
f0108dfc:	50                   	push   %eax
f0108dfd:	e8 24 30 00 00       	call   f010be26 <kmalloc>
f0108e02:	83 c4 10             	add    $0x10,%esp
f0108e05:	a3 34 32 53 f0       	mov    %eax,0xf0533234
	quantums[0] = quantum;
f0108e0a:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108e0f:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0108e12:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0108e14:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108e19:	8a 00                	mov    (%eax),%al
f0108e1b:	0f b6 c0             	movzbl %al,%eax
f0108e1e:	83 ec 0c             	sub    $0xc,%esp
f0108e21:	50                   	push   %eax
f0108e22:	e8 c0 db ff ff       	call   f01069e7 <kclock_set_quantum>
f0108e27:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0108e2a:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108e2f:	83 ec 0c             	sub    $0xc,%esp
f0108e32:	50                   	push   %eax
f0108e33:	e8 84 fa ff ff       	call   f01088bc <init_queue>
f0108e38:	83 c4 10             	add    $0x10,%esp
}
f0108e3b:	90                   	nop
f0108e3c:	c9                   	leave  
f0108e3d:	c3                   	ret    

f0108e3e <sched_init>:



void sched_init()
{
f0108e3e:	55                   	push   %ebp
f0108e3f:	89 e5                	mov    %esp,%ebp
f0108e41:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0108e44:	c7 05 2c 32 53 f0 00 	movl   $0x0,0xf053322c
f0108e4b:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0108e4e:	83 ec 0c             	sub    $0xc,%esp
f0108e51:	6a 0a                	push   $0xa
f0108e53:	e8 5b ff ff ff       	call   f0108db3 <sched_init_RR>
f0108e58:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0108e5b:	83 ec 0c             	sub    $0xc,%esp
f0108e5e:	68 44 32 53 f0       	push   $0xf0533244
f0108e63:	e8 54 fa ff ff       	call   f01088bc <init_queue>
f0108e68:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0108e6b:	83 ec 0c             	sub    $0xc,%esp
f0108e6e:	68 1c 32 53 f0       	push   $0xf053321c
f0108e73:	e8 44 fa ff ff       	call   f01088bc <init_queue>
f0108e78:	83 c4 10             	add    $0x10,%esp
}
f0108e7b:	90                   	nop
f0108e7c:	c9                   	leave  
f0108e7d:	c3                   	ret    

f0108e7e <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0108e7e:	55                   	push   %ebp
f0108e7f:	89 e5                	mov    %esp,%ebp
f0108e81:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f0108e84:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108e89:	85 c0                	test   %eax,%eax
f0108e8b:	74 11                	je     f0108e9e <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0108e8d:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108e92:	83 ec 0c             	sub    $0xc,%esp
f0108e95:	50                   	push   %eax
f0108e96:	e8 1c 30 00 00       	call   f010beb7 <kfree>
f0108e9b:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0108e9e:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108ea3:	85 c0                	test   %eax,%eax
f0108ea5:	74 11                	je     f0108eb8 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0108ea7:	a1 34 32 53 f0       	mov    0xf0533234,%eax
f0108eac:	83 ec 0c             	sub    $0xc,%esp
f0108eaf:	50                   	push   %eax
f0108eb0:	e8 02 30 00 00       	call   f010beb7 <kfree>
f0108eb5:	83 c4 10             	add    $0x10,%esp
}
f0108eb8:	90                   	nop
f0108eb9:	c9                   	leave  
f0108eba:	c3                   	ret    

f0108ebb <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0108ebb:	55                   	push   %ebp
f0108ebc:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108ebe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108ec2:	74 1b                	je     f0108edf <sched_insert_ready+0x24>
	{
		env->env_status = ENV_READY ;
f0108ec4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ec7:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0108ece:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108ed3:	ff 75 08             	pushl  0x8(%ebp)
f0108ed6:	50                   	push   %eax
f0108ed7:	e8 21 fa ff ff       	call   f01088fd <enqueue>
f0108edc:	83 c4 08             	add    $0x8,%esp
	}
}
f0108edf:	90                   	nop
f0108ee0:	c9                   	leave  
f0108ee1:	c3                   	ret    

f0108ee2 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0108ee2:	55                   	push   %ebp
f0108ee3:	89 e5                	mov    %esp,%ebp
f0108ee5:	83 ec 10             	sub    $0x10,%esp
	if(env != NULL)
f0108ee8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108eec:	0f 84 e1 00 00 00    	je     f0108fd3 <sched_remove_ready+0xf1>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0108ef2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108ef9:	e9 c4 00 00 00       	jmp    f0108fc2 <sched_remove_ready+0xe0>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0108efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f01:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108f04:	89 c2                	mov    %eax,%edx
f0108f06:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108f0b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0108f0e:	c1 e1 04             	shl    $0x4,%ecx
f0108f11:	01 c8                	add    %ecx,%eax
f0108f13:	52                   	push   %edx
f0108f14:	50                   	push   %eax
f0108f15:	e8 41 fb ff ff       	call   f0108a5b <find_env_in_queue>
f0108f1a:	83 c4 08             	add    $0x8,%esp
f0108f1d:	89 45 f8             	mov    %eax,-0x8(%ebp)
			if (ptr_env != NULL)
f0108f20:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0108f24:	0f 84 95 00 00 00    	je     f0108fbf <sched_remove_ready+0xdd>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0108f2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f2d:	8b 40 44             	mov    0x44(%eax),%eax
f0108f30:	85 c0                	test   %eax,%eax
f0108f32:	74 11                	je     f0108f45 <sched_remove_ready+0x63>
f0108f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f37:	8b 40 44             	mov    0x44(%eax),%eax
f0108f3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0108f3d:	8b 52 48             	mov    0x48(%edx),%edx
f0108f40:	89 50 48             	mov    %edx,0x48(%eax)
f0108f43:	eb 16                	jmp    f0108f5b <sched_remove_ready+0x79>
f0108f45:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108f4a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108f4d:	c1 e2 04             	shl    $0x4,%edx
f0108f50:	01 c2                	add    %eax,%edx
f0108f52:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f55:	8b 40 48             	mov    0x48(%eax),%eax
f0108f58:	89 42 04             	mov    %eax,0x4(%edx)
f0108f5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f5e:	8b 40 48             	mov    0x48(%eax),%eax
f0108f61:	85 c0                	test   %eax,%eax
f0108f63:	74 11                	je     f0108f76 <sched_remove_ready+0x94>
f0108f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f68:	8b 40 48             	mov    0x48(%eax),%eax
f0108f6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0108f6e:	8b 52 44             	mov    0x44(%edx),%edx
f0108f71:	89 50 44             	mov    %edx,0x44(%eax)
f0108f74:	eb 15                	jmp    f0108f8b <sched_remove_ready+0xa9>
f0108f76:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108f7b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108f7e:	c1 e2 04             	shl    $0x4,%edx
f0108f81:	01 c2                	add    %eax,%edx
f0108f83:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f86:	8b 40 44             	mov    0x44(%eax),%eax
f0108f89:	89 02                	mov    %eax,(%edx)
f0108f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f8e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f98:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108f9f:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0108fa4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108fa7:	c1 e2 04             	shl    $0x4,%edx
f0108faa:	01 d0                	add    %edx,%eax
f0108fac:	8b 50 0c             	mov    0xc(%eax),%edx
f0108faf:	4a                   	dec    %edx
f0108fb0:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0108fb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fb6:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0108fbd:	eb 14                	jmp    f0108fd3 <sched_remove_ready+0xf1>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0108fbf:	ff 45 fc             	incl   -0x4(%ebp)
f0108fc2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0108fc7:	0f b6 c0             	movzbl %al,%eax
f0108fca:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0108fcd:	0f 8f 2b ff ff ff    	jg     f0108efe <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0108fd3:	c9                   	leave  
f0108fd4:	c3                   	ret    

f0108fd5 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0108fd5:	55                   	push   %ebp
f0108fd6:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108fd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108fdc:	74 1a                	je     f0108ff8 <sched_insert_new+0x23>
	{
		env->env_status = ENV_NEW ;
f0108fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fe1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0108fe8:	ff 75 08             	pushl  0x8(%ebp)
f0108feb:	68 44 32 53 f0       	push   $0xf0533244
f0108ff0:	e8 08 f9 ff ff       	call   f01088fd <enqueue>
f0108ff5:	83 c4 08             	add    $0x8,%esp
	}
}
f0108ff8:	90                   	nop
f0108ff9:	c9                   	leave  
f0108ffa:	c3                   	ret    

f0108ffb <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0108ffb:	55                   	push   %ebp
f0108ffc:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108ffe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109002:	74 75                	je     f0109079 <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0109004:	8b 45 08             	mov    0x8(%ebp),%eax
f0109007:	8b 40 44             	mov    0x44(%eax),%eax
f010900a:	85 c0                	test   %eax,%eax
f010900c:	74 11                	je     f010901f <sched_remove_new+0x24>
f010900e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109011:	8b 40 44             	mov    0x44(%eax),%eax
f0109014:	8b 55 08             	mov    0x8(%ebp),%edx
f0109017:	8b 52 48             	mov    0x48(%edx),%edx
f010901a:	89 50 48             	mov    %edx,0x48(%eax)
f010901d:	eb 0b                	jmp    f010902a <sched_remove_new+0x2f>
f010901f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109022:	8b 40 48             	mov    0x48(%eax),%eax
f0109025:	a3 48 32 53 f0       	mov    %eax,0xf0533248
f010902a:	8b 45 08             	mov    0x8(%ebp),%eax
f010902d:	8b 40 48             	mov    0x48(%eax),%eax
f0109030:	85 c0                	test   %eax,%eax
f0109032:	74 11                	je     f0109045 <sched_remove_new+0x4a>
f0109034:	8b 45 08             	mov    0x8(%ebp),%eax
f0109037:	8b 40 48             	mov    0x48(%eax),%eax
f010903a:	8b 55 08             	mov    0x8(%ebp),%edx
f010903d:	8b 52 44             	mov    0x44(%edx),%edx
f0109040:	89 50 44             	mov    %edx,0x44(%eax)
f0109043:	eb 0b                	jmp    f0109050 <sched_remove_new+0x55>
f0109045:	8b 45 08             	mov    0x8(%ebp),%eax
f0109048:	8b 40 44             	mov    0x44(%eax),%eax
f010904b:	a3 44 32 53 f0       	mov    %eax,0xf0533244
f0109050:	8b 45 08             	mov    0x8(%ebp),%eax
f0109053:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010905a:	8b 45 08             	mov    0x8(%ebp),%eax
f010905d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109064:	a1 50 32 53 f0       	mov    0xf0533250,%eax
f0109069:	48                   	dec    %eax
f010906a:	a3 50 32 53 f0       	mov    %eax,0xf0533250
		env->env_status = ENV_UNKNOWN;
f010906f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109072:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0109079:	90                   	nop
f010907a:	5d                   	pop    %ebp
f010907b:	c3                   	ret    

f010907c <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f010907c:	55                   	push   %ebp
f010907d:	89 e5                	mov    %esp,%ebp
f010907f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0109082:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109086:	74 34                	je     f01090bc <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0109088:	e8 0a f3 ff ff       	call   f0108397 <isBufferingEnabled>
f010908d:	85 c0                	test   %eax,%eax
f010908f:	74 0e                	je     f010909f <sched_insert_exit+0x23>
f0109091:	83 ec 0c             	sub    $0xc,%esp
f0109094:	ff 75 08             	pushl  0x8(%ebp)
f0109097:	e8 c3 d7 ff ff       	call   f010685f <cleanup_buffers>
f010909c:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010909f:	8b 45 08             	mov    0x8(%ebp),%eax
f01090a2:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01090a9:	83 ec 08             	sub    $0x8,%esp
f01090ac:	ff 75 08             	pushl  0x8(%ebp)
f01090af:	68 1c 32 53 f0       	push   $0xf053321c
f01090b4:	e8 44 f8 ff ff       	call   f01088fd <enqueue>
f01090b9:	83 c4 10             	add    $0x10,%esp
	}
}
f01090bc:	90                   	nop
f01090bd:	c9                   	leave  
f01090be:	c3                   	ret    

f01090bf <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f01090bf:	55                   	push   %ebp
f01090c0:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01090c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01090c6:	74 75                	je     f010913d <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f01090c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01090cb:	8b 40 44             	mov    0x44(%eax),%eax
f01090ce:	85 c0                	test   %eax,%eax
f01090d0:	74 11                	je     f01090e3 <sched_remove_exit+0x24>
f01090d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090d5:	8b 40 44             	mov    0x44(%eax),%eax
f01090d8:	8b 55 08             	mov    0x8(%ebp),%edx
f01090db:	8b 52 48             	mov    0x48(%edx),%edx
f01090de:	89 50 48             	mov    %edx,0x48(%eax)
f01090e1:	eb 0b                	jmp    f01090ee <sched_remove_exit+0x2f>
f01090e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e6:	8b 40 48             	mov    0x48(%eax),%eax
f01090e9:	a3 20 32 53 f0       	mov    %eax,0xf0533220
f01090ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01090f1:	8b 40 48             	mov    0x48(%eax),%eax
f01090f4:	85 c0                	test   %eax,%eax
f01090f6:	74 11                	je     f0109109 <sched_remove_exit+0x4a>
f01090f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01090fb:	8b 40 48             	mov    0x48(%eax),%eax
f01090fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0109101:	8b 52 44             	mov    0x44(%edx),%edx
f0109104:	89 50 44             	mov    %edx,0x44(%eax)
f0109107:	eb 0b                	jmp    f0109114 <sched_remove_exit+0x55>
f0109109:	8b 45 08             	mov    0x8(%ebp),%eax
f010910c:	8b 40 44             	mov    0x44(%eax),%eax
f010910f:	a3 1c 32 53 f0       	mov    %eax,0xf053321c
f0109114:	8b 45 08             	mov    0x8(%ebp),%eax
f0109117:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010911e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109121:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109128:	a1 28 32 53 f0       	mov    0xf0533228,%eax
f010912d:	48                   	dec    %eax
f010912e:	a3 28 32 53 f0       	mov    %eax,0xf0533228
		env->env_status = ENV_UNKNOWN;
f0109133:	8b 45 08             	mov    0x8(%ebp),%eax
f0109136:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010913d:	90                   	nop
f010913e:	5d                   	pop    %ebp
f010913f:	c3                   	ret    

f0109140 <sched_print_all>:

void sched_print_all()
{
f0109140:	55                   	push   %ebp
f0109141:	89 e5                	mov    %esp,%ebp
f0109143:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0109146:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f010914b:	85 c0                	test   %eax,%eax
f010914d:	74 6c                	je     f01091bb <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010914f:	83 ec 0c             	sub    $0xc,%esp
f0109152:	68 90 ab 11 f0       	push   $0xf011ab90
f0109157:	e8 3a dc ff ff       	call   f0106d96 <cprintf>
f010915c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010915f:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f0109164:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109167:	eb 29                	jmp    f0109192 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109169:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010916c:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109175:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109178:	83 ec 04             	sub    $0x4,%esp
f010917b:	52                   	push   %edx
f010917c:	50                   	push   %eax
f010917d:	68 b2 ab 11 f0       	push   $0xf011abb2
f0109182:	e8 0f dc ff ff       	call   f0106d96 <cprintf>
f0109187:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010918a:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f010918f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109192:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109196:	74 08                	je     f01091a0 <sched_print_all+0x60>
f0109198:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010919b:	8b 40 44             	mov    0x44(%eax),%eax
f010919e:	eb 05                	jmp    f01091a5 <sched_print_all+0x65>
f01091a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01091a5:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f01091aa:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f01091af:	85 c0                	test   %eax,%eax
f01091b1:	75 b6                	jne    f0109169 <sched_print_all+0x29>
f01091b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01091b7:	75 b0                	jne    f0109169 <sched_print_all+0x29>
f01091b9:	eb 10                	jmp    f01091cb <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f01091bb:	83 ec 0c             	sub    $0xc,%esp
f01091be:	68 bc ab 11 f0       	push   $0xf011abbc
f01091c3:	e8 ce db ff ff       	call   f0106d96 <cprintf>
f01091c8:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01091cb:	83 ec 0c             	sub    $0xc,%esp
f01091ce:	68 d8 ab 11 f0       	push   $0xf011abd8
f01091d3:	e8 be db ff ff       	call   f0106d96 <cprintf>
f01091d8:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01091db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01091e2:	e9 ca 00 00 00       	jmp    f01092b1 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01091e7:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01091ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01091ef:	c1 e2 04             	shl    $0x4,%edx
f01091f2:	01 d0                	add    %edx,%eax
f01091f4:	8b 00                	mov    (%eax),%eax
f01091f6:	85 c0                	test   %eax,%eax
f01091f8:	0f 84 8d 00 00 00    	je     f010928b <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f01091fe:	83 ec 08             	sub    $0x8,%esp
f0109201:	ff 75 f0             	pushl  -0x10(%ebp)
f0109204:	68 0c ac 11 f0       	push   $0xf011ac0c
f0109209:	e8 88 db ff ff       	call   f0106d96 <cprintf>
f010920e:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109211:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109216:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109219:	c1 e2 04             	shl    $0x4,%edx
f010921c:	01 d0                	add    %edx,%eax
f010921e:	8b 00                	mov    (%eax),%eax
f0109220:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109223:	eb 34                	jmp    f0109259 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109225:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109228:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010922e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109231:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109234:	83 ec 04             	sub    $0x4,%esp
f0109237:	52                   	push   %edx
f0109238:	50                   	push   %eax
f0109239:	68 b2 ab 11 f0       	push   $0xf011abb2
f010923e:	e8 53 db ff ff       	call   f0106d96 <cprintf>
f0109243:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109246:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010924b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010924e:	c1 e2 04             	shl    $0x4,%edx
f0109251:	01 d0                	add    %edx,%eax
f0109253:	8b 40 08             	mov    0x8(%eax),%eax
f0109256:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109259:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010925e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109261:	c1 e2 04             	shl    $0x4,%edx
f0109264:	01 d0                	add    %edx,%eax
f0109266:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010926a:	74 08                	je     f0109274 <sched_print_all+0x134>
f010926c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010926f:	8b 52 44             	mov    0x44(%edx),%edx
f0109272:	eb 05                	jmp    f0109279 <sched_print_all+0x139>
f0109274:	ba 00 00 00 00       	mov    $0x0,%edx
f0109279:	89 50 08             	mov    %edx,0x8(%eax)
f010927c:	8b 40 08             	mov    0x8(%eax),%eax
f010927f:	85 c0                	test   %eax,%eax
f0109281:	75 a2                	jne    f0109225 <sched_print_all+0xe5>
f0109283:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109287:	75 9c                	jne    f0109225 <sched_print_all+0xe5>
f0109289:	eb 13                	jmp    f010929e <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f010928b:	83 ec 08             	sub    $0x8,%esp
f010928e:	ff 75 f0             	pushl  -0x10(%ebp)
f0109291:	68 34 ac 11 f0       	push   $0xf011ac34
f0109296:	e8 fb da ff ff       	call   f0106d96 <cprintf>
f010929b:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010929e:	83 ec 0c             	sub    $0xc,%esp
f01092a1:	68 d8 ab 11 f0       	push   $0xf011abd8
f01092a6:	e8 eb da ff ff       	call   f0106d96 <cprintf>
f01092ab:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01092ae:	ff 45 f0             	incl   -0x10(%ebp)
f01092b1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01092b6:	0f b6 c0             	movzbl %al,%eax
f01092b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01092bc:	0f 8f 25 ff ff ff    	jg     f01091e7 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f01092c2:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f01092c7:	85 c0                	test   %eax,%eax
f01092c9:	74 6c                	je     f0109337 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f01092cb:	83 ec 0c             	sub    $0xc,%esp
f01092ce:	68 58 ac 11 f0       	push   $0xf011ac58
f01092d3:	e8 be da ff ff       	call   f0106d96 <cprintf>
f01092d8:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01092db:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f01092e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01092e3:	eb 29                	jmp    f010930e <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01092e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092e8:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f01092ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092f1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01092f4:	83 ec 04             	sub    $0x4,%esp
f01092f7:	52                   	push   %edx
f01092f8:	50                   	push   %eax
f01092f9:	68 b2 ab 11 f0       	push   $0xf011abb2
f01092fe:	e8 93 da ff ff       	call   f0106d96 <cprintf>
f0109303:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109306:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f010930b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010930e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109312:	74 08                	je     f010931c <sched_print_all+0x1dc>
f0109314:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109317:	8b 40 44             	mov    0x44(%eax),%eax
f010931a:	eb 05                	jmp    f0109321 <sched_print_all+0x1e1>
f010931c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109321:	a3 24 32 53 f0       	mov    %eax,0xf0533224
f0109326:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f010932b:	85 c0                	test   %eax,%eax
f010932d:	75 b6                	jne    f01092e5 <sched_print_all+0x1a5>
f010932f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109333:	75 b0                	jne    f01092e5 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0109335:	eb 10                	jmp    f0109347 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109337:	83 ec 0c             	sub    $0xc,%esp
f010933a:	68 7a ac 11 f0       	push   $0xf011ac7a
f010933f:	e8 52 da ff ff       	call   f0106d96 <cprintf>
f0109344:	83 c4 10             	add    $0x10,%esp
	}
}
f0109347:	90                   	nop
f0109348:	c9                   	leave  
f0109349:	c3                   	ret    

f010934a <sched_run_all>:

void sched_run_all()
{
f010934a:	55                   	push   %ebp
f010934b:	89 e5                	mov    %esp,%ebp
f010934d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109350:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109357:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f010935c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010935f:	eb 1e                	jmp    f010937f <sched_run_all+0x35>
	{
		sched_remove_new(ptr_env);
f0109361:	ff 75 f4             	pushl  -0xc(%ebp)
f0109364:	e8 92 fc ff ff       	call   f0108ffb <sched_remove_new>
f0109369:	83 c4 04             	add    $0x4,%esp
		sched_insert_ready(ptr_env);
f010936c:	ff 75 f4             	pushl  -0xc(%ebp)
f010936f:	e8 47 fb ff ff       	call   f0108ebb <sched_insert_ready>
f0109374:	83 c4 04             	add    $0x4,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109377:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f010937c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010937f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109383:	74 08                	je     f010938d <sched_run_all+0x43>
f0109385:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109388:	8b 40 44             	mov    0x44(%eax),%eax
f010938b:	eb 05                	jmp    f0109392 <sched_run_all+0x48>
f010938d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109392:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f0109397:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f010939c:	85 c0                	test   %eax,%eax
f010939e:	75 c1                	jne    f0109361 <sched_run_all+0x17>
f01093a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01093a4:	75 bb                	jne    f0109361 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f01093a6:	a1 5c 32 53 f0       	mov    0xf053325c,%eax
f01093ab:	85 c0                	test   %eax,%eax
f01093ad:	75 05                	jne    f01093b4 <sched_run_all+0x6a>
		fos_scheduler();
f01093af:	e8 13 f9 ff ff       	call   f0108cc7 <fos_scheduler>
}
f01093b4:	90                   	nop
f01093b5:	c9                   	leave  
f01093b6:	c3                   	ret    

f01093b7 <sched_kill_all>:

void sched_kill_all()
{
f01093b7:	55                   	push   %ebp
f01093b8:	89 e5                	mov    %esp,%ebp
f01093ba:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01093bd:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f01093c2:	85 c0                	test   %eax,%eax
f01093c4:	0f 84 98 00 00 00    	je     f0109462 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f01093ca:	83 ec 0c             	sub    $0xc,%esp
f01093cd:	68 98 ac 11 f0       	push   $0xf011ac98
f01093d2:	e8 bf d9 ff ff       	call   f0106d96 <cprintf>
f01093d7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01093da:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f01093df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01093e2:	eb 55                	jmp    f0109439 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01093e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093e7:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f01093ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01093f3:	83 ec 04             	sub    $0x4,%esp
f01093f6:	52                   	push   %edx
f01093f7:	50                   	push   %eax
f01093f8:	68 c4 ac 11 f0       	push   $0xf011acc4
f01093fd:	e8 94 d9 ff ff       	call   f0106d96 <cprintf>
f0109402:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0109405:	83 ec 0c             	sub    $0xc,%esp
f0109408:	ff 75 f4             	pushl  -0xc(%ebp)
f010940b:	e8 eb fb ff ff       	call   f0108ffb <sched_remove_new>
f0109410:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109413:	83 ec 0c             	sub    $0xc,%esp
f0109416:	ff 75 f4             	pushl  -0xc(%ebp)
f0109419:	e8 09 cd ff ff       	call   f0106127 <start_env_free>
f010941e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109421:	83 ec 0c             	sub    $0xc,%esp
f0109424:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109429:	e8 68 d9 ff ff       	call   f0106d96 <cprintf>
f010942e:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109431:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109436:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109439:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010943d:	74 08                	je     f0109447 <sched_kill_all+0x90>
f010943f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109442:	8b 40 44             	mov    0x44(%eax),%eax
f0109445:	eb 05                	jmp    f010944c <sched_kill_all+0x95>
f0109447:	b8 00 00 00 00       	mov    $0x0,%eax
f010944c:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f0109451:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109456:	85 c0                	test   %eax,%eax
f0109458:	75 8a                	jne    f01093e4 <sched_kill_all+0x2d>
f010945a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010945e:	75 84                	jne    f01093e4 <sched_kill_all+0x2d>
f0109460:	eb 10                	jmp    f0109472 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0109462:	83 ec 0c             	sub    $0xc,%esp
f0109465:	68 dd ac 11 f0       	push   $0xf011acdd
f010946a:	e8 27 d9 ff ff       	call   f0106d96 <cprintf>
f010946f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0109472:	83 ec 0c             	sub    $0xc,%esp
f0109475:	68 d8 ab 11 f0       	push   $0xf011abd8
f010947a:	e8 17 d9 ff ff       	call   f0106d96 <cprintf>
f010947f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109482:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109489:	e9 7c 01 00 00       	jmp    f010960a <sched_kill_all+0x253>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010948e:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109493:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109496:	c1 e2 04             	shl    $0x4,%edx
f0109499:	01 d0                	add    %edx,%eax
f010949b:	8b 00                	mov    (%eax),%eax
f010949d:	85 c0                	test   %eax,%eax
f010949f:	0f 84 3f 01 00 00    	je     f01095e4 <sched_kill_all+0x22d>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01094a5:	83 ec 08             	sub    $0x8,%esp
f01094a8:	ff 75 f0             	pushl  -0x10(%ebp)
f01094ab:	68 f8 ac 11 f0       	push   $0xf011acf8
f01094b0:	e8 e1 d8 ff ff       	call   f0106d96 <cprintf>
f01094b5:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01094b8:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01094bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01094c0:	c1 e2 04             	shl    $0x4,%edx
f01094c3:	01 d0                	add    %edx,%eax
f01094c5:	8b 00                	mov    (%eax),%eax
f01094c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01094ca:	e9 db 00 00 00       	jmp    f01095aa <sched_kill_all+0x1f3>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01094cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094d2:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f01094d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094db:	8b 40 4c             	mov    0x4c(%eax),%eax
f01094de:	83 ec 04             	sub    $0x4,%esp
f01094e1:	52                   	push   %edx
f01094e2:	50                   	push   %eax
f01094e3:	68 c4 ac 11 f0       	push   $0xf011acc4
f01094e8:	e8 a9 d8 ff ff       	call   f0106d96 <cprintf>
f01094ed:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01094f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094f3:	8b 40 44             	mov    0x44(%eax),%eax
f01094f6:	85 c0                	test   %eax,%eax
f01094f8:	74 11                	je     f010950b <sched_kill_all+0x154>
f01094fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094fd:	8b 40 44             	mov    0x44(%eax),%eax
f0109500:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109503:	8b 52 48             	mov    0x48(%edx),%edx
f0109506:	89 50 48             	mov    %edx,0x48(%eax)
f0109509:	eb 16                	jmp    f0109521 <sched_kill_all+0x16a>
f010950b:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109510:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109513:	c1 e2 04             	shl    $0x4,%edx
f0109516:	01 c2                	add    %eax,%edx
f0109518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010951b:	8b 40 48             	mov    0x48(%eax),%eax
f010951e:	89 42 04             	mov    %eax,0x4(%edx)
f0109521:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109524:	8b 40 48             	mov    0x48(%eax),%eax
f0109527:	85 c0                	test   %eax,%eax
f0109529:	74 11                	je     f010953c <sched_kill_all+0x185>
f010952b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010952e:	8b 40 48             	mov    0x48(%eax),%eax
f0109531:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109534:	8b 52 44             	mov    0x44(%edx),%edx
f0109537:	89 50 44             	mov    %edx,0x44(%eax)
f010953a:	eb 15                	jmp    f0109551 <sched_kill_all+0x19a>
f010953c:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109541:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109544:	c1 e2 04             	shl    $0x4,%edx
f0109547:	01 c2                	add    %eax,%edx
f0109549:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010954c:	8b 40 44             	mov    0x44(%eax),%eax
f010954f:	89 02                	mov    %eax,(%edx)
f0109551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109554:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010955b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010955e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109565:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010956a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010956d:	c1 e2 04             	shl    $0x4,%edx
f0109570:	01 d0                	add    %edx,%eax
f0109572:	8b 50 0c             	mov    0xc(%eax),%edx
f0109575:	4a                   	dec    %edx
f0109576:	89 50 0c             	mov    %edx,0xc(%eax)
				start_env_free(ptr_env);
f0109579:	83 ec 0c             	sub    $0xc,%esp
f010957c:	ff 75 f4             	pushl  -0xc(%ebp)
f010957f:	e8 a3 cb ff ff       	call   f0106127 <start_env_free>
f0109584:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109587:	83 ec 0c             	sub    $0xc,%esp
f010958a:	68 d7 ac 11 f0       	push   $0xf011acd7
f010958f:	e8 02 d8 ff ff       	call   f0106d96 <cprintf>
f0109594:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109597:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010959c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010959f:	c1 e2 04             	shl    $0x4,%edx
f01095a2:	01 d0                	add    %edx,%eax
f01095a4:	8b 40 08             	mov    0x8(%eax),%eax
f01095a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01095aa:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01095af:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01095b2:	c1 e2 04             	shl    $0x4,%edx
f01095b5:	01 d0                	add    %edx,%eax
f01095b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01095bb:	74 08                	je     f01095c5 <sched_kill_all+0x20e>
f01095bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01095c0:	8b 52 44             	mov    0x44(%edx),%edx
f01095c3:	eb 05                	jmp    f01095ca <sched_kill_all+0x213>
f01095c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01095ca:	89 50 08             	mov    %edx,0x8(%eax)
f01095cd:	8b 40 08             	mov    0x8(%eax),%eax
f01095d0:	85 c0                	test   %eax,%eax
f01095d2:	0f 85 f7 fe ff ff    	jne    f01094cf <sched_kill_all+0x118>
f01095d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01095dc:	0f 85 ed fe ff ff    	jne    f01094cf <sched_kill_all+0x118>
f01095e2:	eb 13                	jmp    f01095f7 <sched_kill_all+0x240>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f01095e4:	83 ec 08             	sub    $0x8,%esp
f01095e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01095ea:	68 34 ac 11 f0       	push   $0xf011ac34
f01095ef:	e8 a2 d7 ff ff       	call   f0106d96 <cprintf>
f01095f4:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f01095f7:	83 ec 0c             	sub    $0xc,%esp
f01095fa:	68 d8 ab 11 f0       	push   $0xf011abd8
f01095ff:	e8 92 d7 ff ff       	call   f0106d96 <cprintf>
f0109604:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109607:	ff 45 f0             	incl   -0x10(%ebp)
f010960a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010960f:	0f b6 c0             	movzbl %al,%eax
f0109612:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109615:	0f 8f 73 fe ff ff    	jg     f010948e <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010961b:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f0109620:	85 c0                	test   %eax,%eax
f0109622:	0f 84 98 00 00 00    	je     f01096c0 <sched_kill_all+0x309>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0109628:	83 ec 0c             	sub    $0xc,%esp
f010962b:	68 2c ad 11 f0       	push   $0xf011ad2c
f0109630:	e8 61 d7 ff ff       	call   f0106d96 <cprintf>
f0109635:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109638:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f010963d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109640:	eb 55                	jmp    f0109697 <sched_kill_all+0x2e0>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109642:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109645:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010964b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010964e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109651:	83 ec 04             	sub    $0x4,%esp
f0109654:	52                   	push   %edx
f0109655:	50                   	push   %eax
f0109656:	68 c4 ac 11 f0       	push   $0xf011acc4
f010965b:	e8 36 d7 ff ff       	call   f0106d96 <cprintf>
f0109660:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0109663:	83 ec 0c             	sub    $0xc,%esp
f0109666:	ff 75 f4             	pushl  -0xc(%ebp)
f0109669:	e8 51 fa ff ff       	call   f01090bf <sched_remove_exit>
f010966e:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109671:	83 ec 0c             	sub    $0xc,%esp
f0109674:	ff 75 f4             	pushl  -0xc(%ebp)
f0109677:	e8 ab ca ff ff       	call   f0106127 <start_env_free>
f010967c:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010967f:	83 ec 0c             	sub    $0xc,%esp
f0109682:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109687:	e8 0a d7 ff ff       	call   f0106d96 <cprintf>
f010968c:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010968f:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f0109694:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109697:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010969b:	74 08                	je     f01096a5 <sched_kill_all+0x2ee>
f010969d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096a0:	8b 40 44             	mov    0x44(%eax),%eax
f01096a3:	eb 05                	jmp    f01096aa <sched_kill_all+0x2f3>
f01096a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01096aa:	a3 24 32 53 f0       	mov    %eax,0xf0533224
f01096af:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f01096b4:	85 c0                	test   %eax,%eax
f01096b6:	75 8a                	jne    f0109642 <sched_kill_all+0x28b>
f01096b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01096bc:	75 84                	jne    f0109642 <sched_kill_all+0x28b>
f01096be:	eb 10                	jmp    f01096d0 <sched_kill_all+0x319>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01096c0:	83 ec 0c             	sub    $0xc,%esp
f01096c3:	68 7a ac 11 f0       	push   $0xf011ac7a
f01096c8:	e8 c9 d6 ff ff       	call   f0106d96 <cprintf>
f01096cd:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01096d0:	c7 05 50 29 53 f0 00 	movl   $0x0,0xf0532950
f01096d7:	00 00 00 
	fos_scheduler();
f01096da:	e8 e8 f5 ff ff       	call   f0108cc7 <fos_scheduler>

f01096df <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f01096df:	55                   	push   %ebp
f01096e0:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f01096e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01096e6:	74 0b                	je     f01096f3 <sched_new_env+0x14>
	{
		sched_insert_new(e);
f01096e8:	ff 75 08             	pushl  0x8(%ebp)
f01096eb:	e8 e5 f8 ff ff       	call   f0108fd5 <sched_insert_new>
f01096f0:	83 c4 04             	add    $0x4,%esp
	}
}
f01096f3:	90                   	nop
f01096f4:	c9                   	leave  
f01096f5:	c3                   	ret    

f01096f6 <sched_run_env>:

void sched_run_env(uint32 envId)
{
f01096f6:	55                   	push   %ebp
f01096f7:	89 e5                	mov    %esp,%ebp
f01096f9:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01096fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109703:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f0109708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010970b:	eb 37                	jmp    f0109744 <sched_run_env+0x4e>
	{
		if(ptr_env->env_id == envId)
f010970d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109710:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109713:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109716:	75 24                	jne    f010973c <sched_run_env+0x46>
		{
			sched_remove_new(ptr_env);
f0109718:	ff 75 f4             	pushl  -0xc(%ebp)
f010971b:	e8 db f8 ff ff       	call   f0108ffb <sched_remove_new>
f0109720:	83 c4 04             	add    $0x4,%esp
			sched_insert_ready(ptr_env);
f0109723:	ff 75 f4             	pushl  -0xc(%ebp)
f0109726:	e8 90 f7 ff ff       	call   f0108ebb <sched_insert_ready>
f010972b:	83 c4 04             	add    $0x4,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010972e:	a1 5c 32 53 f0       	mov    0xf053325c,%eax
f0109733:	85 c0                	test   %eax,%eax
f0109735:	75 36                	jne    f010976d <sched_run_env+0x77>
			{
				fos_scheduler();
f0109737:	e8 8b f5 ff ff       	call   f0108cc7 <fos_scheduler>
}

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010973c:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109741:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109744:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109748:	74 08                	je     f0109752 <sched_run_env+0x5c>
f010974a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010974d:	8b 40 44             	mov    0x44(%eax),%eax
f0109750:	eb 05                	jmp    f0109757 <sched_run_env+0x61>
f0109752:	b8 00 00 00 00       	mov    $0x0,%eax
f0109757:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f010975c:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109761:	85 c0                	test   %eax,%eax
f0109763:	75 a8                	jne    f010970d <sched_run_env+0x17>
f0109765:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109769:	75 a2                	jne    f010970d <sched_run_env+0x17>
			}
			break;
		}
	}

}
f010976b:	eb 01                	jmp    f010976e <sched_run_env+0x78>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010976d:	90                   	nop
		}
	}

}
f010976e:	90                   	nop
f010976f:	c9                   	leave  
f0109770:	c3                   	ret    

f0109771 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0109771:	55                   	push   %ebp
f0109772:	89 e5                	mov    %esp,%ebp
f0109774:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109777:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010977e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109785:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109789:	75 56                	jne    f01097e1 <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010978b:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f0109790:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109793:	eb 25                	jmp    f01097ba <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f0109795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109798:	8b 40 4c             	mov    0x4c(%eax),%eax
f010979b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010979e:	75 12                	jne    f01097b2 <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f01097a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01097a3:	e8 53 f8 ff ff       	call   f0108ffb <sched_remove_new>
f01097a8:	83 c4 04             	add    $0x4,%esp
				found = 1;
f01097ab:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01097b2:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f01097b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01097ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01097be:	74 08                	je     f01097c8 <sched_exit_env+0x57>
f01097c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097c3:	8b 40 44             	mov    0x44(%eax),%eax
f01097c6:	eb 05                	jmp    f01097cd <sched_exit_env+0x5c>
f01097c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01097cd:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f01097d2:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f01097d7:	85 c0                	test   %eax,%eax
f01097d9:	75 ba                	jne    f0109795 <sched_exit_env+0x24>
f01097db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01097df:	75 b4                	jne    f0109795 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f01097e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01097e5:	0f 85 4a 01 00 00    	jne    f0109935 <sched_exit_env+0x1c4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01097eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01097f2:	e9 2a 01 00 00       	jmp    f0109921 <sched_exit_env+0x1b0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01097f7:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01097fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01097ff:	c1 e2 04             	shl    $0x4,%edx
f0109802:	01 d0                	add    %edx,%eax
f0109804:	8b 00                	mov    (%eax),%eax
f0109806:	85 c0                	test   %eax,%eax
f0109808:	0f 84 0a 01 00 00    	je     f0109918 <sched_exit_env+0x1a7>
			{
				ptr_env=NULL;
f010980e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109815:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010981a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010981d:	c1 e2 04             	shl    $0x4,%edx
f0109820:	01 d0                	add    %edx,%eax
f0109822:	8b 00                	mov    (%eax),%eax
f0109824:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109827:	e9 b4 00 00 00       	jmp    f01098e0 <sched_exit_env+0x16f>
				{
					if(ptr_env->env_id == envId)
f010982c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010982f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109832:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109835:	0f 85 92 00 00 00    	jne    f01098cd <sched_exit_env+0x15c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010983b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010983e:	8b 40 44             	mov    0x44(%eax),%eax
f0109841:	85 c0                	test   %eax,%eax
f0109843:	74 11                	je     f0109856 <sched_exit_env+0xe5>
f0109845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109848:	8b 40 44             	mov    0x44(%eax),%eax
f010984b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010984e:	8b 52 48             	mov    0x48(%edx),%edx
f0109851:	89 50 48             	mov    %edx,0x48(%eax)
f0109854:	eb 16                	jmp    f010986c <sched_exit_env+0xfb>
f0109856:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010985b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010985e:	c1 e2 04             	shl    $0x4,%edx
f0109861:	01 c2                	add    %eax,%edx
f0109863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109866:	8b 40 48             	mov    0x48(%eax),%eax
f0109869:	89 42 04             	mov    %eax,0x4(%edx)
f010986c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010986f:	8b 40 48             	mov    0x48(%eax),%eax
f0109872:	85 c0                	test   %eax,%eax
f0109874:	74 11                	je     f0109887 <sched_exit_env+0x116>
f0109876:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109879:	8b 40 48             	mov    0x48(%eax),%eax
f010987c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987f:	8b 52 44             	mov    0x44(%edx),%edx
f0109882:	89 50 44             	mov    %edx,0x44(%eax)
f0109885:	eb 15                	jmp    f010989c <sched_exit_env+0x12b>
f0109887:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f010988c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010988f:	c1 e2 04             	shl    $0x4,%edx
f0109892:	01 c2                	add    %eax,%edx
f0109894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109897:	8b 40 44             	mov    0x44(%eax),%eax
f010989a:	89 02                	mov    %eax,(%edx)
f010989c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010989f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01098a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098a9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098b0:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01098b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01098b8:	c1 e2 04             	shl    $0x4,%edx
f01098bb:	01 d0                	add    %edx,%eax
f01098bd:	8b 50 0c             	mov    0xc(%eax),%edx
f01098c0:	4a                   	dec    %edx
f01098c1:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f01098c4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01098cb:	eb 4b                	jmp    f0109918 <sched_exit_env+0x1a7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01098cd:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01098d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01098d5:	c1 e2 04             	shl    $0x4,%edx
f01098d8:	01 d0                	add    %edx,%eax
f01098da:	8b 40 08             	mov    0x8(%eax),%eax
f01098dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098e0:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01098e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01098e8:	c1 e2 04             	shl    $0x4,%edx
f01098eb:	01 d0                	add    %edx,%eax
f01098ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098f1:	74 08                	je     f01098fb <sched_exit_env+0x18a>
f01098f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098f6:	8b 52 44             	mov    0x44(%edx),%edx
f01098f9:	eb 05                	jmp    f0109900 <sched_exit_env+0x18f>
f01098fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0109900:	89 50 08             	mov    %edx,0x8(%eax)
f0109903:	8b 40 08             	mov    0x8(%eax),%eax
f0109906:	85 c0                	test   %eax,%eax
f0109908:	0f 85 1e ff ff ff    	jne    f010982c <sched_exit_env+0xbb>
f010990e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109912:	0f 85 14 ff ff ff    	jne    f010982c <sched_exit_env+0xbb>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0109918:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010991c:	75 16                	jne    f0109934 <sched_exit_env+0x1c3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010991e:	ff 45 ec             	incl   -0x14(%ebp)
f0109921:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0109926:	0f b6 c0             	movzbl %al,%eax
f0109929:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010992c:	0f 8f c5 fe ff ff    	jg     f01097f7 <sched_exit_env+0x86>
f0109932:	eb 01                	jmp    f0109935 <sched_exit_env+0x1c4>
						break;
					}
				}
			}
			if (found)
				break;
f0109934:	90                   	nop
		}
	}
	if (!found)
f0109935:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109939:	75 1c                	jne    f0109957 <sched_exit_env+0x1e6>
	{
		if (curenv->env_id == envId)
f010993b:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109940:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109943:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109946:	75 0f                	jne    f0109957 <sched_exit_env+0x1e6>
		{
			ptr_env = curenv;
f0109948:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010994d:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0109950:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0109957:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010995b:	74 2a                	je     f0109987 <sched_exit_env+0x216>
	{
		sched_insert_exit(ptr_env);
f010995d:	83 ec 0c             	sub    $0xc,%esp
f0109960:	ff 75 f4             	pushl  -0xc(%ebp)
f0109963:	e8 14 f7 ff ff       	call   f010907c <sched_insert_exit>
f0109968:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010996b:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109970:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109973:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109976:	75 0f                	jne    f0109987 <sched_exit_env+0x216>
		{
			curenv = NULL;
f0109978:	c7 05 50 29 53 f0 00 	movl   $0x0,0xf0532950
f010997f:	00 00 00 
			fos_scheduler();
f0109982:	e8 40 f3 ff ff       	call   f0108cc7 <fos_scheduler>
		}
	}
}
f0109987:	90                   	nop
f0109988:	c9                   	leave  
f0109989:	c3                   	ret    

f010998a <sched_exit_all_ready_envs>:

void sched_exit_all_ready_envs()
{
f010998a:	55                   	push   %ebp
f010998b:	89 e5                	mov    %esp,%ebp
f010998d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109990:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109997:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010999e:	e9 1a 01 00 00       	jmp    f0109abd <sched_exit_all_ready_envs+0x133>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01099a3:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01099a8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01099ab:	c1 e2 04             	shl    $0x4,%edx
f01099ae:	01 d0                	add    %edx,%eax
f01099b0:	8b 00                	mov    (%eax),%eax
f01099b2:	85 c0                	test   %eax,%eax
f01099b4:	0f 84 00 01 00 00    	je     f0109aba <sched_exit_all_ready_envs+0x130>
		{
			ptr_env=NULL;
f01099ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01099c1:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01099c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01099c9:	c1 e2 04             	shl    $0x4,%edx
f01099cc:	01 d0                	add    %edx,%eax
f01099ce:	8b 00                	mov    (%eax),%eax
f01099d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099d3:	e9 aa 00 00 00       	jmp    f0109a82 <sched_exit_all_ready_envs+0xf8>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01099d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099db:	8b 40 44             	mov    0x44(%eax),%eax
f01099de:	85 c0                	test   %eax,%eax
f01099e0:	74 11                	je     f01099f3 <sched_exit_all_ready_envs+0x69>
f01099e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099e5:	8b 40 44             	mov    0x44(%eax),%eax
f01099e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099eb:	8b 52 48             	mov    0x48(%edx),%edx
f01099ee:	89 50 48             	mov    %edx,0x48(%eax)
f01099f1:	eb 16                	jmp    f0109a09 <sched_exit_all_ready_envs+0x7f>
f01099f3:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01099f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01099fb:	c1 e2 04             	shl    $0x4,%edx
f01099fe:	01 c2                	add    %eax,%edx
f0109a00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a03:	8b 40 48             	mov    0x48(%eax),%eax
f0109a06:	89 42 04             	mov    %eax,0x4(%edx)
f0109a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a0c:	8b 40 48             	mov    0x48(%eax),%eax
f0109a0f:	85 c0                	test   %eax,%eax
f0109a11:	74 11                	je     f0109a24 <sched_exit_all_ready_envs+0x9a>
f0109a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a16:	8b 40 48             	mov    0x48(%eax),%eax
f0109a19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a1c:	8b 52 44             	mov    0x44(%edx),%edx
f0109a1f:	89 50 44             	mov    %edx,0x44(%eax)
f0109a22:	eb 15                	jmp    f0109a39 <sched_exit_all_ready_envs+0xaf>
f0109a24:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109a29:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a2c:	c1 e2 04             	shl    $0x4,%edx
f0109a2f:	01 c2                	add    %eax,%edx
f0109a31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a34:	8b 40 44             	mov    0x44(%eax),%eax
f0109a37:	89 02                	mov    %eax,(%edx)
f0109a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a3c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a46:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109a4d:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109a52:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a55:	c1 e2 04             	shl    $0x4,%edx
f0109a58:	01 d0                	add    %edx,%eax
f0109a5a:	8b 50 0c             	mov    0xc(%eax),%edx
f0109a5d:	4a                   	dec    %edx
f0109a5e:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f0109a61:	83 ec 0c             	sub    $0xc,%esp
f0109a64:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a67:	e8 10 f6 ff ff       	call   f010907c <sched_insert_exit>
f0109a6c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109a6f:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109a74:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a77:	c1 e2 04             	shl    $0x4,%edx
f0109a7a:	01 d0                	add    %edx,%eax
f0109a7c:	8b 40 08             	mov    0x8(%eax),%eax
f0109a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a82:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109a87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a8a:	c1 e2 04             	shl    $0x4,%edx
f0109a8d:	01 d0                	add    %edx,%eax
f0109a8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a93:	74 08                	je     f0109a9d <sched_exit_all_ready_envs+0x113>
f0109a95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a98:	8b 52 44             	mov    0x44(%edx),%edx
f0109a9b:	eb 05                	jmp    f0109aa2 <sched_exit_all_ready_envs+0x118>
f0109a9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109aa2:	89 50 08             	mov    %edx,0x8(%eax)
f0109aa5:	8b 40 08             	mov    0x8(%eax),%eax
f0109aa8:	85 c0                	test   %eax,%eax
f0109aaa:	0f 85 28 ff ff ff    	jne    f01099d8 <sched_exit_all_ready_envs+0x4e>
f0109ab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ab4:	0f 85 1e ff ff ff    	jne    f01099d8 <sched_exit_all_ready_envs+0x4e>
}

void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109aba:	ff 45 f0             	incl   -0x10(%ebp)
f0109abd:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0109ac2:	0f b6 c0             	movzbl %al,%eax
f0109ac5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109ac8:	0f 8f d5 fe ff ff    	jg     f01099a3 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0109ace:	90                   	nop
f0109acf:	c9                   	leave  
f0109ad0:	c3                   	ret    

f0109ad1 <sched_kill_env>:

void sched_kill_env(uint32 envId)
{
f0109ad1:	55                   	push   %ebp
f0109ad2:	89 e5                	mov    %esp,%ebp
f0109ad4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109ad7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0109ade:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109ae9:	0f 85 a0 00 00 00    	jne    f0109b8f <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109aef:	a1 44 32 53 f0       	mov    0xf0533244,%eax
f0109af4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109af7:	eb 67                	jmp    f0109b60 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0109af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109afc:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109aff:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b02:	75 54                	jne    f0109b58 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0109b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b07:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b10:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b13:	83 ec 04             	sub    $0x4,%esp
f0109b16:	52                   	push   %edx
f0109b17:	50                   	push   %eax
f0109b18:	68 58 ad 11 f0       	push   $0xf011ad58
f0109b1d:	e8 74 d2 ff ff       	call   f0106d96 <cprintf>
f0109b22:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0109b25:	83 ec 0c             	sub    $0xc,%esp
f0109b28:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b2b:	e8 cb f4 ff ff       	call   f0108ffb <sched_remove_new>
f0109b30:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f0109b33:	83 ec 0c             	sub    $0xc,%esp
f0109b36:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b39:	e8 e9 c5 ff ff       	call   f0106127 <start_env_free>
f0109b3e:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109b41:	83 ec 0c             	sub    $0xc,%esp
f0109b44:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109b49:	e8 48 d2 ff ff       	call   f0106d96 <cprintf>
f0109b4e:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0109b51:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109b58:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109b5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109b60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b64:	74 08                	je     f0109b6e <sched_kill_env+0x9d>
f0109b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b69:	8b 40 44             	mov    0x44(%eax),%eax
f0109b6c:	eb 05                	jmp    f0109b73 <sched_kill_env+0xa2>
f0109b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b73:	a3 4c 32 53 f0       	mov    %eax,0xf053324c
f0109b78:	a1 4c 32 53 f0       	mov    0xf053324c,%eax
f0109b7d:	85 c0                	test   %eax,%eax
f0109b7f:	0f 85 74 ff ff ff    	jne    f0109af9 <sched_kill_env+0x28>
f0109b85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b89:	0f 85 6a ff ff ff    	jne    f0109af9 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0109b8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109b93:	0f 85 89 01 00 00    	jne    f0109d22 <sched_kill_env+0x251>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109b99:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109ba0:	e9 69 01 00 00       	jmp    f0109d0e <sched_kill_env+0x23d>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109ba5:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109baa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109bad:	c1 e2 04             	shl    $0x4,%edx
f0109bb0:	01 d0                	add    %edx,%eax
f0109bb2:	8b 00                	mov    (%eax),%eax
f0109bb4:	85 c0                	test   %eax,%eax
f0109bb6:	0f 84 49 01 00 00    	je     f0109d05 <sched_kill_env+0x234>
			{
				ptr_env=NULL;
f0109bbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109bc3:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109bc8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109bcb:	c1 e2 04             	shl    $0x4,%edx
f0109bce:	01 d0                	add    %edx,%eax
f0109bd0:	8b 00                	mov    (%eax),%eax
f0109bd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109bd5:	e9 f3 00 00 00       	jmp    f0109ccd <sched_kill_env+0x1fc>
				{
					if(ptr_env->env_id == envId)
f0109bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bdd:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109be0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109be3:	0f 85 d1 00 00 00    	jne    f0109cba <sched_kill_env+0x1e9>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0109be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bec:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bf5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109bf8:	ff 75 ec             	pushl  -0x14(%ebp)
f0109bfb:	52                   	push   %edx
f0109bfc:	50                   	push   %eax
f0109bfd:	68 80 ad 11 f0       	push   $0xf011ad80
f0109c02:	e8 8f d1 ff ff       	call   f0106d96 <cprintf>
f0109c07:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c0d:	8b 40 44             	mov    0x44(%eax),%eax
f0109c10:	85 c0                	test   %eax,%eax
f0109c12:	74 11                	je     f0109c25 <sched_kill_env+0x154>
f0109c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c17:	8b 40 44             	mov    0x44(%eax),%eax
f0109c1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c1d:	8b 52 48             	mov    0x48(%edx),%edx
f0109c20:	89 50 48             	mov    %edx,0x48(%eax)
f0109c23:	eb 16                	jmp    f0109c3b <sched_kill_env+0x16a>
f0109c25:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109c2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109c2d:	c1 e2 04             	shl    $0x4,%edx
f0109c30:	01 c2                	add    %eax,%edx
f0109c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c35:	8b 40 48             	mov    0x48(%eax),%eax
f0109c38:	89 42 04             	mov    %eax,0x4(%edx)
f0109c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c3e:	8b 40 48             	mov    0x48(%eax),%eax
f0109c41:	85 c0                	test   %eax,%eax
f0109c43:	74 11                	je     f0109c56 <sched_kill_env+0x185>
f0109c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c48:	8b 40 48             	mov    0x48(%eax),%eax
f0109c4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c4e:	8b 52 44             	mov    0x44(%edx),%edx
f0109c51:	89 50 44             	mov    %edx,0x44(%eax)
f0109c54:	eb 15                	jmp    f0109c6b <sched_kill_env+0x19a>
f0109c56:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109c5b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109c5e:	c1 e2 04             	shl    $0x4,%edx
f0109c61:	01 c2                	add    %eax,%edx
f0109c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c66:	8b 40 44             	mov    0x44(%eax),%eax
f0109c69:	89 02                	mov    %eax,(%edx)
f0109c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c6e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c78:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c7f:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109c84:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109c87:	c1 e2 04             	shl    $0x4,%edx
f0109c8a:	01 d0                	add    %edx,%eax
f0109c8c:	8b 50 0c             	mov    0xc(%eax),%edx
f0109c8f:	4a                   	dec    %edx
f0109c90:	89 50 0c             	mov    %edx,0xc(%eax)
						start_env_free(ptr_env);
f0109c93:	83 ec 0c             	sub    $0xc,%esp
f0109c96:	ff 75 f4             	pushl  -0xc(%ebp)
f0109c99:	e8 89 c4 ff ff       	call   f0106127 <start_env_free>
f0109c9e:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0109ca1:	83 ec 0c             	sub    $0xc,%esp
f0109ca4:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109ca9:	e8 e8 d0 ff ff       	call   f0106d96 <cprintf>
f0109cae:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0109cb1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109cb8:	eb 4b                	jmp    f0109d05 <sched_kill_env+0x234>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109cba:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109cbf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109cc2:	c1 e2 04             	shl    $0x4,%edx
f0109cc5:	01 d0                	add    %edx,%eax
f0109cc7:	8b 40 08             	mov    0x8(%eax),%eax
f0109cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109ccd:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0109cd2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109cd5:	c1 e2 04             	shl    $0x4,%edx
f0109cd8:	01 d0                	add    %edx,%eax
f0109cda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cde:	74 08                	je     f0109ce8 <sched_kill_env+0x217>
f0109ce0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ce3:	8b 52 44             	mov    0x44(%edx),%edx
f0109ce6:	eb 05                	jmp    f0109ced <sched_kill_env+0x21c>
f0109ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0109ced:	89 50 08             	mov    %edx,0x8(%eax)
f0109cf0:	8b 40 08             	mov    0x8(%eax),%eax
f0109cf3:	85 c0                	test   %eax,%eax
f0109cf5:	0f 85 df fe ff ff    	jne    f0109bda <sched_kill_env+0x109>
f0109cfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cff:	0f 85 d5 fe ff ff    	jne    f0109bda <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0109d05:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109d09:	75 16                	jne    f0109d21 <sched_kill_env+0x250>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109d0b:	ff 45 ec             	incl   -0x14(%ebp)
f0109d0e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0109d13:	0f b6 c0             	movzbl %al,%eax
f0109d16:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109d19:	0f 8f 86 fe ff ff    	jg     f0109ba5 <sched_kill_env+0xd4>
f0109d1f:	eb 01                	jmp    f0109d22 <sched_kill_env+0x251>
						//return;
					}
				}
			}
			if (found)
				break;
f0109d21:	90                   	nop
		}
	}
	if (!found)
f0109d22:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109d26:	0f 85 a7 00 00 00    	jne    f0109dd3 <sched_kill_env+0x302>
	{
		ptr_env=NULL;
f0109d2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109d33:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f0109d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d3b:	eb 67                	jmp    f0109da4 <sched_kill_env+0x2d3>
		{
			if(ptr_env->env_id == envId)
f0109d3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d40:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d43:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d46:	75 54                	jne    f0109d9c <sched_kill_env+0x2cb>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0109d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d4b:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d54:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d57:	83 ec 04             	sub    $0x4,%esp
f0109d5a:	52                   	push   %edx
f0109d5b:	50                   	push   %eax
f0109d5c:	68 ac ad 11 f0       	push   $0xf011adac
f0109d61:	e8 30 d0 ff ff       	call   f0106d96 <cprintf>
f0109d66:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0109d69:	83 ec 0c             	sub    $0xc,%esp
f0109d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d6f:	e8 4b f3 ff ff       	call   f01090bf <sched_remove_exit>
f0109d74:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f0109d77:	83 ec 0c             	sub    $0xc,%esp
f0109d7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d7d:	e8 a5 c3 ff ff       	call   f0106127 <start_env_free>
f0109d82:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109d85:	83 ec 0c             	sub    $0xc,%esp
f0109d88:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109d8d:	e8 04 d0 ff ff       	call   f0106d96 <cprintf>
f0109d92:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0109d95:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109d9c:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f0109da1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109da4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109da8:	74 08                	je     f0109db2 <sched_kill_env+0x2e1>
f0109daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109dad:	8b 40 44             	mov    0x44(%eax),%eax
f0109db0:	eb 05                	jmp    f0109db7 <sched_kill_env+0x2e6>
f0109db2:	b8 00 00 00 00       	mov    $0x0,%eax
f0109db7:	a3 24 32 53 f0       	mov    %eax,0xf0533224
f0109dbc:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f0109dc1:	85 c0                	test   %eax,%eax
f0109dc3:	0f 85 74 ff ff ff    	jne    f0109d3d <sched_kill_env+0x26c>
f0109dc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109dcd:	0f 85 6a ff ff ff    	jne    f0109d3d <sched_kill_env+0x26c>
				//return;
			}
		}
	}

	if (!found)
f0109dd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109dd7:	75 7f                	jne    f0109e58 <sched_kill_env+0x387>
	{
		if (curenv->env_id == envId)
f0109dd9:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109dde:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109de1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109de4:	75 72                	jne    f0109e58 <sched_kill_env+0x387>
		{
			ptr_env = curenv;
f0109de6:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0109dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109df1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109df4:	83 f8 02             	cmp    $0x2,%eax
f0109df7:	74 19                	je     f0109e12 <sched_kill_env+0x341>
f0109df9:	68 d4 ad 11 f0       	push   $0xf011add4
f0109dfe:	68 f4 ad 11 f0       	push   $0xf011adf4
f0109e03:	68 72 02 00 00       	push   $0x272
f0109e08:	68 09 ae 11 f0       	push   $0xf011ae09
f0109e0d:	e8 64 63 ff ff       	call   f0100176 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e15:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e1e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e21:	83 ec 04             	sub    $0x4,%esp
f0109e24:	52                   	push   %edx
f0109e25:	50                   	push   %eax
f0109e26:	68 18 ae 11 f0       	push   $0xf011ae18
f0109e2b:	e8 66 cf ff ff       	call   f0106d96 <cprintf>
f0109e30:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109e33:	83 ec 0c             	sub    $0xc,%esp
f0109e36:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e39:	e8 e9 c2 ff ff       	call   f0106127 <start_env_free>
f0109e3e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109e41:	83 ec 0c             	sub    $0xc,%esp
f0109e44:	68 d7 ac 11 f0       	push   $0xf011acd7
f0109e49:	e8 48 cf ff ff       	call   f0106d96 <cprintf>
f0109e4e:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0109e51:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	//If it's the curenv, then reset it and reinvoke the scheduler
	//as there's no meaning to return back to a killed env
	if (curenv->env_id == envId)
f0109e58:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109e5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e60:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e63:	75 1d                	jne    f0109e82 <sched_kill_env+0x3b1>
	{
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0109e65:	a1 d8 16 55 f0       	mov    0xf05516d8,%eax
f0109e6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0109e6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109e70:	0f 22 d8             	mov    %eax,%cr3
		curenv = NULL;
f0109e73:	c7 05 50 29 53 f0 00 	movl   $0x0,0xf0532950
f0109e7a:	00 00 00 
		fos_scheduler();
f0109e7d:	e8 45 ee ff ff       	call   f0108cc7 <fos_scheduler>
	}

}
f0109e82:	90                   	nop
f0109e83:	c9                   	leave  
f0109e84:	c3                   	ret    

f0109e85 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0109e85:	55                   	push   %ebp
f0109e86:	89 e5                	mov    %esp,%ebp
f0109e88:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU())
f0109e8b:	e8 75 e4 ff ff       	call   f0108305 <isPageReplacmentAlgorithmLRU>
f0109e90:	85 c0                	test   %eax,%eax
f0109e92:	74 05                	je     f0109e99 <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f0109e94:	e8 05 00 00 00       	call   f0109e9e <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0109e99:	e8 29 ee ff ff       	call   f0108cc7 <fos_scheduler>

f0109e9e <update_WS_time_stamps>:
}
void update_WS_time_stamps()
{
f0109e9e:	55                   	push   %ebp
f0109e9f:	89 e5                	mov    %esp,%ebp
f0109ea1:	53                   	push   %ebx
f0109ea2:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0109ea5:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0109eaa:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0109ead:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0109eb1:	0f 84 bc 01 00 00    	je     f010a073 <update_WS_time_stamps+0x1d5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0109eb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109ebe:	e9 c7 00 00 00       	jmp    f0109f8a <update_WS_time_stamps+0xec>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0109ec3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109ec6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ec9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ecc:	89 d0                	mov    %edx,%eax
f0109ece:	01 c0                	add    %eax,%eax
f0109ed0:	01 d0                	add    %edx,%eax
f0109ed2:	c1 e0 02             	shl    $0x2,%eax
f0109ed5:	01 c8                	add    %ecx,%eax
f0109ed7:	8a 40 04             	mov    0x4(%eax),%al
f0109eda:	3c 01                	cmp    $0x1,%al
f0109edc:	0f 84 a5 00 00 00    	je     f0109f87 <update_WS_time_stamps+0xe9>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0109ee2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109ee5:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ee8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109eeb:	89 d0                	mov    %edx,%eax
f0109eed:	01 c0                	add    %eax,%eax
f0109eef:	01 d0                	add    %edx,%eax
f0109ef1:	c1 e0 02             	shl    $0x2,%eax
f0109ef4:	01 c8                	add    %ecx,%eax
f0109ef6:	8b 00                	mov    (%eax),%eax
f0109ef8:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
f0109efb:	83 ec 08             	sub    $0x8,%esp
f0109efe:	ff 75 e8             	pushl  -0x18(%ebp)
f0109f01:	ff 75 ec             	pushl  -0x14(%ebp)
f0109f04:	e8 03 b1 ff ff       	call   f010500c <pt_get_page_permissions>
f0109f09:	83 c4 10             	add    $0x10,%esp
f0109f0c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0109f0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109f12:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f18:	89 d0                	mov    %edx,%eax
f0109f1a:	01 c0                	add    %eax,%eax
f0109f1c:	01 d0                	add    %edx,%eax
f0109f1e:	c1 e0 02             	shl    $0x2,%eax
f0109f21:	01 c8                	add    %ecx,%eax
f0109f23:	8b 40 08             	mov    0x8(%eax),%eax
f0109f26:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0109f29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f2c:	83 e0 20             	and    $0x20,%eax
f0109f2f:	85 c0                	test   %eax,%eax
f0109f31:	74 37                	je     f0109f6a <update_WS_time_stamps+0xcc>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0109f33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109f36:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f3c:	89 d0                	mov    %edx,%eax
f0109f3e:	01 c0                	add    %eax,%eax
f0109f40:	01 d0                	add    %edx,%eax
f0109f42:	c1 e0 02             	shl    $0x2,%eax
f0109f45:	01 c8                	add    %ecx,%eax
f0109f47:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109f4a:	c1 ea 02             	shr    $0x2,%edx
f0109f4d:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0109f53:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
f0109f56:	6a 20                	push   $0x20
f0109f58:	6a 00                	push   $0x0
f0109f5a:	ff 75 e8             	pushl  -0x18(%ebp)
f0109f5d:	ff 75 ec             	pushl  -0x14(%ebp)
f0109f60:	e8 43 ad ff ff       	call   f0104ca8 <pt_set_page_permissions>
f0109f65:	83 c4 10             	add    $0x10,%esp
f0109f68:	eb 1d                	jmp    f0109f87 <update_WS_time_stamps+0xe9>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0109f6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109f6d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f73:	89 d0                	mov    %edx,%eax
f0109f75:	01 c0                	add    %eax,%eax
f0109f77:	01 d0                	add    %edx,%eax
f0109f79:	c1 e0 02             	shl    $0x2,%eax
f0109f7c:	01 c8                	add    %ecx,%eax
f0109f7e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109f81:	c1 ea 02             	shr    $0x2,%edx
f0109f84:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0109f87:	ff 45 f4             	incl   -0xc(%ebp)
f0109f8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109f8d:	8b 50 74             	mov    0x74(%eax),%edx
f0109f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f93:	39 c2                	cmp    %eax,%edx
f0109f95:	0f 87 28 ff ff ff    	ja     f0109ec3 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0109f9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109fa2:	e9 c2 00 00 00       	jmp    f010a069 <update_WS_time_stamps+0x1cb>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0109fa7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109faa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fad:	89 d0                	mov    %edx,%eax
f0109faf:	01 c0                	add    %eax,%eax
f0109fb1:	01 d0                	add    %edx,%eax
f0109fb3:	c1 e0 02             	shl    $0x2,%eax
f0109fb6:	01 c8                	add    %ecx,%eax
f0109fb8:	83 e8 80             	sub    $0xffffff80,%eax
f0109fbb:	8a 00                	mov    (%eax),%al
f0109fbd:	3c 01                	cmp    $0x1,%al
f0109fbf:	0f 84 a1 00 00 00    	je     f010a066 <update_WS_time_stamps+0x1c8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0109fc5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109fc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fcb:	89 d0                	mov    %edx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 d0                	add    %edx,%eax
f0109fd1:	c1 e0 02             	shl    $0x2,%eax
f0109fd4:	01 c8                	add    %ecx,%eax
f0109fd6:	83 c0 7c             	add    $0x7c,%eax
f0109fd9:	8b 00                	mov    (%eax),%eax
f0109fdb:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0109fde:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109fe1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fe4:	89 d0                	mov    %edx,%eax
f0109fe6:	01 c0                	add    %eax,%eax
f0109fe8:	01 d0                	add    %edx,%eax
f0109fea:	c1 e0 02             	shl    $0x2,%eax
f0109fed:	01 c8                	add    %ecx,%eax
f0109fef:	05 84 00 00 00       	add    $0x84,%eax
f0109ff4:	8b 00                	mov    (%eax),%eax
f0109ff6:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f0109ff9:	83 ec 08             	sub    $0x8,%esp
f0109ffc:	ff 75 dc             	pushl  -0x24(%ebp)
f0109fff:	ff 75 ec             	pushl  -0x14(%ebp)
f010a002:	e8 05 ac ff ff       	call   f0104c0c <pd_is_table_used>
f010a007:	83 c4 10             	add    $0x10,%esp
f010a00a:	85 c0                	test   %eax,%eax
f010a00c:	74 38                	je     f010a046 <update_WS_time_stamps+0x1a8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a00e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a011:	c1 e8 02             	shr    $0x2,%eax
f010a014:	0d 00 00 00 80       	or     $0x80000000,%eax
f010a019:	89 c1                	mov    %eax,%ecx
f010a01b:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a01e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a021:	89 d0                	mov    %edx,%eax
f010a023:	01 c0                	add    %eax,%eax
f010a025:	01 d0                	add    %edx,%eax
f010a027:	c1 e0 02             	shl    $0x2,%eax
f010a02a:	01 d8                	add    %ebx,%eax
f010a02c:	05 84 00 00 00       	add    $0x84,%eax
f010a031:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f010a033:	83 ec 08             	sub    $0x8,%esp
f010a036:	ff 75 dc             	pushl  -0x24(%ebp)
f010a039:	ff 75 ec             	pushl  -0x14(%ebp)
f010a03c:	e8 ee ab ff ff       	call   f0104c2f <pd_set_table_unused>
f010a041:	83 c4 10             	add    $0x10,%esp
f010a044:	eb 20                	jmp    f010a066 <update_WS_time_stamps+0x1c8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010a046:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a049:	c1 e8 02             	shr    $0x2,%eax
f010a04c:	89 c1                	mov    %eax,%ecx
f010a04e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a051:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a054:	89 d0                	mov    %edx,%eax
f010a056:	01 c0                	add    %eax,%eax
f010a058:	01 d0                	add    %edx,%eax
f010a05a:	c1 e0 02             	shl    $0x2,%eax
f010a05d:	01 d8                	add    %ebx,%eax
f010a05f:	05 84 00 00 00       	add    $0x84,%eax
f010a064:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a066:	ff 45 f0             	incl   -0x10(%ebp)
f010a069:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f010a06d:	0f 8e 34 ff ff ff    	jle    f0109fa7 <update_WS_time_stamps+0x109>
					}
				}
			}
		}
	}
}
f010a073:	90                   	nop
f010a074:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a077:	c9                   	leave  
f010a078:	c3                   	ret    

f010a079 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010a079:	55                   	push   %ebp
f010a07a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010a07c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07f:	8b 15 c4 16 55 f0    	mov    0xf05516c4,%edx
f010a085:	29 d0                	sub    %edx,%eax
f010a087:	c1 f8 03             	sar    $0x3,%eax
f010a08a:	89 c2                	mov    %eax,%edx
f010a08c:	89 d0                	mov    %edx,%eax
f010a08e:	c1 e0 02             	shl    $0x2,%eax
f010a091:	01 d0                	add    %edx,%eax
f010a093:	c1 e0 02             	shl    $0x2,%eax
f010a096:	01 d0                	add    %edx,%eax
f010a098:	c1 e0 02             	shl    $0x2,%eax
f010a09b:	01 d0                	add    %edx,%eax
f010a09d:	89 c1                	mov    %eax,%ecx
f010a09f:	c1 e1 08             	shl    $0x8,%ecx
f010a0a2:	01 c8                	add    %ecx,%eax
f010a0a4:	89 c1                	mov    %eax,%ecx
f010a0a6:	c1 e1 10             	shl    $0x10,%ecx
f010a0a9:	01 c8                	add    %ecx,%eax
f010a0ab:	01 c0                	add    %eax,%eax
f010a0ad:	01 d0                	add    %edx,%eax
}
f010a0af:	5d                   	pop    %ebp
f010a0b0:	c3                   	ret    

f010a0b1 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010a0b1:	55                   	push   %ebp
f010a0b2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010a0b4:	ff 75 08             	pushl  0x8(%ebp)
f010a0b7:	e8 bd ff ff ff       	call   f010a079 <to_frame_number>
f010a0bc:	83 c4 04             	add    $0x4,%esp
f010a0bf:	c1 e0 0c             	shl    $0xc,%eax
}
f010a0c2:	c9                   	leave  
f010a0c3:	c3                   	ret    

f010a0c4 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010a0c4:	55                   	push   %ebp
f010a0c5:	89 e5                	mov    %esp,%ebp
f010a0c7:	83 ec 18             	sub    $0x18,%esp
f010a0ca:	8b 45 10             	mov    0x10(%ebp),%eax
f010a0cd:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010a0d0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010a0d4:	74 26                	je     f010a0fc <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010a0d6:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a0db:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a0de:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f010a0e4:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f010a0ea:	83 ec 04             	sub    $0x4,%esp
f010a0ed:	50                   	push   %eax
f010a0ee:	52                   	push   %edx
f010a0ef:	68 44 ae 11 f0       	push   $0xf011ae44
f010a0f4:	e8 9d cc ff ff       	call   f0106d96 <cprintf>
f010a0f9:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010a0fc:	83 ec 04             	sub    $0x4,%esp
f010a0ff:	ff 75 08             	pushl  0x8(%ebp)
f010a102:	ff 75 0c             	pushl  0xc(%ebp)
f010a105:	68 4d ae 11 f0       	push   $0xf011ae4d
f010a10a:	e8 87 cc ff ff       	call   f0106d96 <cprintf>
f010a10f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010a112:	90                   	nop
f010a113:	c9                   	leave  
f010a114:	c3                   	ret    

f010a115 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010a115:	55                   	push   %ebp
f010a116:	89 e5                	mov    %esp,%ebp
f010a118:	83 ec 18             	sub    $0x18,%esp
f010a11b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010a121:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010a125:	83 ec 08             	sub    $0x8,%esp
f010a128:	50                   	push   %eax
f010a129:	68 52 ae 11 f0       	push   $0xf011ae52
f010a12e:	e8 63 cc ff ff       	call   f0106d96 <cprintf>
f010a133:	83 c4 10             	add    $0x10,%esp
}
f010a136:	90                   	nop
f010a137:	c9                   	leave  
f010a138:	c3                   	ret    

f010a139 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010a139:	55                   	push   %ebp
f010a13a:	89 e5                	mov    %esp,%ebp
f010a13c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010a13f:	e8 67 6a ff ff       	call   f0100bab <cons_getc2>
f010a144:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010a147:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a14a:	c9                   	leave  
f010a14b:	c3                   	ret    

f010a14c <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f010a14c:	55                   	push   %ebp
f010a14d:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010a14f:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a154:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a157:	5d                   	pop    %ebp
f010a158:	c3                   	ret    

f010a159 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010a159:	55                   	push   %ebp
f010a15a:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010a15c:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a161:	89 c2                	mov    %eax,%edx
f010a163:	a1 4c 29 53 f0       	mov    0xf053294c,%eax
f010a168:	29 c2                	sub    %eax,%edx
f010a16a:	89 d0                	mov    %edx,%eax
f010a16c:	c1 f8 02             	sar    $0x2,%eax
f010a16f:	89 c2                	mov    %eax,%edx
f010a171:	89 d0                	mov    %edx,%eax
f010a173:	01 c0                	add    %eax,%eax
f010a175:	01 d0                	add    %edx,%eax
f010a177:	c1 e0 09             	shl    $0x9,%eax
f010a17a:	29 d0                	sub    %edx,%eax
f010a17c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a183:	01 c8                	add    %ecx,%eax
f010a185:	c1 e0 03             	shl    $0x3,%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	89 c1                	mov    %eax,%ecx
f010a18c:	c1 e1 05             	shl    $0x5,%ecx
f010a18f:	01 c8                	add    %ecx,%eax
f010a191:	01 c0                	add    %eax,%eax
f010a193:	01 d0                	add    %edx,%eax
f010a195:	01 c0                	add    %eax,%eax
f010a197:	01 d0                	add    %edx,%eax
f010a199:	c1 e0 02             	shl    $0x2,%eax
f010a19c:	01 d0                	add    %edx,%eax
f010a19e:	c1 e0 04             	shl    $0x4,%eax
f010a1a1:	01 d0                	add    %edx,%eax
f010a1a3:	f7 d8                	neg    %eax
}
f010a1a5:	5d                   	pop    %ebp
f010a1a6:	c3                   	ret    

f010a1a7 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010a1a7:	55                   	push   %ebp
f010a1a8:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010a1aa:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a1af:	8b 40 50             	mov    0x50(%eax),%eax
}
f010a1b2:	5d                   	pop    %ebp
f010a1b3:	c3                   	ret    

f010a1b4 <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010a1b4:	55                   	push   %ebp
f010a1b5:	89 e5                	mov    %esp,%ebp
f010a1b7:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010a1ba:	83 ec 04             	sub    $0x4,%esp
f010a1bd:	6a 00                	push   $0x0
f010a1bf:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010a1c2:	50                   	push   %eax
f010a1c3:	ff 75 08             	pushl  0x8(%ebp)
f010a1c6:	e8 e7 8e ff ff       	call   f01030b2 <envid2env>
f010a1cb:	83 c4 10             	add    $0x10,%esp
f010a1ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a1d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1d5:	79 05                	jns    f010a1dc <sys_env_destroy+0x28>
		return r;
f010a1d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1da:	eb 5e                	jmp    f010a23a <sys_env_destroy+0x86>

	if (e == curenv)
f010a1dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a1df:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a1e4:	39 c2                	cmp    %eax,%edx
f010a1e6:	75 1b                	jne    f010a203 <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010a1e8:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a1ed:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a1f0:	83 ec 08             	sub    $0x8,%esp
f010a1f3:	50                   	push   %eax
f010a1f4:	68 55 ae 11 f0       	push   $0xf011ae55
f010a1f9:	e8 98 cb ff ff       	call   f0106d96 <cprintf>
f010a1fe:	83 c4 10             	add    $0x10,%esp
f010a201:	eb 20                	jmp    f010a223 <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010a203:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a206:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a209:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a20e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a211:	83 ec 04             	sub    $0x4,%esp
f010a214:	52                   	push   %edx
f010a215:	50                   	push   %eax
f010a216:	68 70 ae 11 f0       	push   $0xf011ae70
f010a21b:	e8 76 cb ff ff       	call   f0106d96 <cprintf>
f010a220:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010a223:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a226:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a229:	83 ec 0c             	sub    $0xc,%esp
f010a22c:	50                   	push   %eax
f010a22d:	e8 9f f8 ff ff       	call   f0109ad1 <sched_kill_env>
f010a232:	83 c4 10             	add    $0x10,%esp

	return 0;
f010a235:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a23a:	c9                   	leave  
f010a23b:	c3                   	ret    

f010a23c <sys_env_exit>:

static void sys_env_exit()
{
f010a23c:	55                   	push   %ebp
f010a23d:	89 e5                	mov    %esp,%ebp
f010a23f:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010a242:	e8 dc c5 ff ff       	call   f0106823 <env_exit>
	//env_run_cmd_prmpt();
}
f010a247:	90                   	nop
f010a248:	c9                   	leave  
f010a249:	c3                   	ret    

f010a24a <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010a24a:	55                   	push   %ebp
f010a24b:	89 e5                	mov    %esp,%ebp
f010a24d:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010a250:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a255:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010a258:	83 ec 0c             	sub    $0xc,%esp
f010a25b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a25e:	50                   	push   %eax
f010a25f:	e8 32 97 ff ff       	call   f0103996 <allocate_frame>
f010a264:	83 c4 10             	add    $0x10,%esp
f010a267:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a26a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a26e:	75 08                	jne    f010a278 <__sys_allocate_page+0x2e>
		return r ;
f010a270:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a273:	e9 e8 00 00 00       	jmp    f010a360 <__sys_allocate_page+0x116>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010a278:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27b:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010a280:	77 0c                	ja     f010a28e <__sys_allocate_page+0x44>
f010a282:	8b 45 08             	mov    0x8(%ebp),%eax
f010a285:	25 ff 0f 00 00       	and    $0xfff,%eax
f010a28a:	85 c0                	test   %eax,%eax
f010a28c:	74 0a                	je     f010a298 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010a28e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a293:	e9 c8 00 00 00       	jmp    f010a360 <__sys_allocate_page+0x116>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010a298:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a29b:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010a2a0:	83 f8 04             	cmp    $0x4,%eax
f010a2a3:	74 0a                	je     f010a2af <__sys_allocate_page+0x65>
		return E_INVAL;
f010a2a5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a2aa:	e9 b1 00 00 00       	jmp    f010a360 <__sys_allocate_page+0x116>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010a2af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a2b2:	83 ec 0c             	sub    $0xc,%esp
f010a2b5:	50                   	push   %eax
f010a2b6:	e8 f6 fd ff ff       	call   f010a0b1 <to_physical_address>
f010a2bb:	83 c4 10             	add    $0x10,%esp
f010a2be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, (void*)USER_LIMIT, PERM_WRITEABLE);
f010a2c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a2c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a2ca:	6a 02                	push   $0x2
f010a2cc:	68 00 00 80 ef       	push   $0xef800000
f010a2d1:	52                   	push   %edx
f010a2d2:	50                   	push   %eax
f010a2d3:	e8 32 9a ff ff       	call   f0103d0a <map_frame>
f010a2d8:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010a2db:	83 ec 04             	sub    $0x4,%esp
f010a2de:	68 00 10 00 00       	push   $0x1000
f010a2e3:	6a 00                	push   $0x0
f010a2e5:	68 00 00 80 ef       	push   $0xef800000
f010a2ea:	e8 08 d3 00 00       	call   f01175f7 <memset>
f010a2ef:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010a2f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a2f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a2f8:	8b 40 08             	mov    0x8(%eax),%eax
f010a2fb:	40                   	inc    %eax
f010a2fc:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, (void*)USER_LIMIT);
f010a300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a303:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a306:	83 ec 08             	sub    $0x8,%esp
f010a309:	68 00 00 80 ef       	push   $0xef800000
f010a30e:	50                   	push   %eax
f010a30f:	e8 25 9b ff ff       	call   f0103e39 <unmap_frame>
f010a314:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010a317:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a31a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a31d:	8b 40 08             	mov    0x8(%eax),%eax
f010a320:	48                   	dec    %eax
f010a321:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}

	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010a325:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a328:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a32b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a32e:	ff 75 0c             	pushl  0xc(%ebp)
f010a331:	ff 75 08             	pushl  0x8(%ebp)
f010a334:	52                   	push   %edx
f010a335:	50                   	push   %eax
f010a336:	e8 cf 99 ff ff       	call   f0103d0a <map_frame>
f010a33b:	83 c4 10             	add    $0x10,%esp
f010a33e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a341:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a345:	75 14                	jne    f010a35b <__sys_allocate_page+0x111>
	{
		decrement_references(ptr_frame_info);
f010a347:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a34a:	83 ec 0c             	sub    $0xc,%esp
f010a34d:	50                   	push   %eax
f010a34e:	e8 92 97 ff ff       	call   f0103ae5 <decrement_references>
f010a353:	83 c4 10             	add    $0x10,%esp
		return r;
f010a356:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a359:	eb 05                	jmp    f010a360 <__sys_allocate_page+0x116>
	}
	return 0 ;
f010a35b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a360:	c9                   	leave  
f010a361:	c3                   	ret    

f010a362 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010a362:	55                   	push   %ebp
f010a363:	89 e5                	mov    %esp,%ebp
f010a365:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010a368:	83 ec 04             	sub    $0x4,%esp
f010a36b:	68 88 ae 11 f0       	push   $0xf011ae88
f010a370:	68 e3 00 00 00       	push   $0xe3
f010a375:	68 a6 ae 11 f0       	push   $0xf011aea6
f010a37a:	e8 f7 5d ff ff       	call   f0100176 <_panic>

f010a37f <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010a37f:	55                   	push   %ebp
f010a380:	89 e5                	mov    %esp,%ebp
f010a382:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010a385:	83 ec 04             	sub    $0x4,%esp
f010a388:	68 b8 ae 11 f0       	push   $0xf011aeb8
f010a38d:	68 f2 00 00 00       	push   $0xf2
f010a392:	68 a6 ae 11 f0       	push   $0xf011aea6
f010a397:	e8 da 5d ff ff       	call   f0100176 <_panic>

f010a39c <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010a39c:	55                   	push   %ebp
f010a39d:	89 e5                	mov    %esp,%ebp
f010a39f:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010a3a2:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a3a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a3aa:	83 ec 04             	sub    $0x4,%esp
f010a3ad:	ff 75 0c             	pushl  0xc(%ebp)
f010a3b0:	ff 75 08             	pushl  0x8(%ebp)
f010a3b3:	50                   	push   %eax
f010a3b4:	e8 9a 9d ff ff       	call   f0104153 <calculate_required_frames>
f010a3b9:	83 c4 10             	add    $0x10,%esp
}
f010a3bc:	c9                   	leave  
f010a3bd:	c3                   	ret    

f010a3be <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010a3be:	55                   	push   %ebp
f010a3bf:	89 e5                	mov    %esp,%ebp
f010a3c1:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a3c4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a3c7:	83 ec 0c             	sub    $0xc,%esp
f010a3ca:	50                   	push   %eax
f010a3cb:	e8 33 9e ff ff       	call   f0104203 <calculate_available_frames>
f010a3d0:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010a3d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a3d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a3d9:	01 d0                	add    %edx,%eax
}
f010a3db:	c9                   	leave  
f010a3dc:	c3                   	ret    

f010a3dd <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010a3dd:	55                   	push   %ebp
f010a3de:	89 e5                	mov    %esp,%ebp
f010a3e0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a3e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a3e6:	83 ec 0c             	sub    $0xc,%esp
f010a3e9:	50                   	push   %eax
f010a3ea:	e8 14 9e ff ff       	call   f0104203 <calculate_available_frames>
f010a3ef:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010a3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a3f5:	c9                   	leave  
f010a3f6:	c3                   	ret    

f010a3f7 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010a3f7:	55                   	push   %ebp
f010a3f8:	89 e5                	mov    %esp,%ebp
f010a3fa:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a3fd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a400:	83 ec 0c             	sub    $0xc,%esp
f010a403:	50                   	push   %eax
f010a404:	e8 fa 9d ff ff       	call   f0104203 <calculate_available_frames>
f010a409:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010a40c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010a40f:	c9                   	leave  
f010a410:	c3                   	ret    

f010a411 <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010a411:	55                   	push   %ebp
f010a412:	89 e5                	mov    %esp,%ebp
f010a414:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010a417:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a41c:	83 ec 0c             	sub    $0xc,%esp
f010a41f:	50                   	push   %eax
f010a420:	e8 bc 13 00 00       	call   f010b7e1 <pf_calculate_allocated_pages>
f010a425:	83 c4 10             	add    $0x10,%esp
}
f010a428:	c9                   	leave  
f010a429:	c3                   	ret    

f010a42a <sys_freeMem>:


void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010a42a:	55                   	push   %ebp
f010a42b:	89 e5                	mov    %esp,%ebp
f010a42d:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010a430:	e8 62 df ff ff       	call   f0108397 <isBufferingEnabled>
f010a435:	85 c0                	test   %eax,%eax
f010a437:	74 19                	je     f010a452 <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010a439:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a43e:	83 ec 04             	sub    $0x4,%esp
f010a441:	ff 75 0c             	pushl  0xc(%ebp)
f010a444:	ff 75 08             	pushl  0x8(%ebp)
f010a447:	50                   	push   %eax
f010a448:	e8 e3 9c ff ff       	call   f0104130 <__freeMem_with_buffering>
f010a44d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010a450:	eb 18                	jmp    f010a46a <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010a452:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a457:	83 ec 04             	sub    $0x4,%esp
f010a45a:	ff 75 0c             	pushl  0xc(%ebp)
f010a45d:	ff 75 08             	pushl  0x8(%ebp)
f010a460:	50                   	push   %eax
f010a461:	e8 98 9b ff ff       	call   f0103ffe <freeMem>
f010a466:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010a469:	90                   	nop
}
f010a46a:	c9                   	leave  
f010a46b:	c3                   	ret    

f010a46c <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010a46c:	55                   	push   %ebp
f010a46d:	89 e5                	mov    %esp,%ebp
f010a46f:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010a472:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a477:	83 ec 04             	sub    $0x4,%esp
f010a47a:	ff 75 0c             	pushl  0xc(%ebp)
f010a47d:	ff 75 08             	pushl  0x8(%ebp)
f010a480:	50                   	push   %eax
f010a481:	e8 17 9b ff ff       	call   f0103f9d <allocateMem>
f010a486:	83 c4 10             	add    $0x10,%esp
	return;
f010a489:	90                   	nop
}
f010a48a:	c9                   	leave  
f010a48b:	c3                   	ret    

f010a48c <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010a48c:	55                   	push   %ebp
f010a48d:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010a48f:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a494:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f010a49a:	8b 52 38             	mov    0x38(%edx),%edx
f010a49d:	80 e6 fd             	and    $0xfd,%dh
f010a4a0:	89 50 38             	mov    %edx,0x38(%eax)
}
f010a4a3:	90                   	nop
f010a4a4:	5d                   	pop    %ebp
f010a4a5:	c3                   	ret    

f010a4a6 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010a4a6:	55                   	push   %ebp
f010a4a7:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010a4a9:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a4ae:	8b 15 50 29 53 f0    	mov    0xf0532950,%edx
f010a4b4:	8b 52 38             	mov    0x38(%edx),%edx
f010a4b7:	80 ce 02             	or     $0x2,%dh
f010a4ba:	89 50 38             	mov    %edx,0x38(%eax)
}
f010a4bd:	90                   	nop
f010a4be:	5d                   	pop    %ebp
f010a4bf:	c3                   	ret    

f010a4c0 <sys_clearFFL>:

void sys_clearFFL()
{
f010a4c0:	55                   	push   %ebp
f010a4c1:	89 e5                	mov    %esp,%ebp
f010a4c3:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010a4c6:	a1 c0 16 55 f0       	mov    0xf05516c0,%eax
f010a4cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010a4ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010a4d5:	eb 12                	jmp    f010a4e9 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010a4d7:	83 ec 0c             	sub    $0xc,%esp
f010a4da:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a4dd:	50                   	push   %eax
f010a4de:	e8 b3 94 ff ff       	call   f0103996 <allocate_frame>
f010a4e3:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010a4e6:	ff 45 f4             	incl   -0xc(%ebp)
f010a4e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a4ef:	7c e6                	jl     f010a4d7 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010a4f1:	90                   	nop
f010a4f2:	c9                   	leave  
f010a4f3:	c3                   	ret    

f010a4f4 <sys_create_env>:

int sys_create_env(char* programName, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f010a4f4:	55                   	push   %ebp
f010a4f5:	89 e5                	mov    %esp,%ebp
f010a4f7:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, percent_WS_pages_to_remove);
f010a4fa:	83 ec 04             	sub    $0x4,%esp
f010a4fd:	ff 75 10             	pushl  0x10(%ebp)
f010a500:	ff 75 0c             	pushl  0xc(%ebp)
f010a503:	ff 75 08             	pushl  0x8(%ebp)
f010a506:	e8 12 b5 ff ff       	call   f0105a1d <env_create>
f010a50b:	83 c4 10             	add    $0x10,%esp
f010a50e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010a511:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a515:	75 07                	jne    f010a51e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010a517:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010a51c:	eb 14                	jmp    f010a532 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010a51e:	83 ec 0c             	sub    $0xc,%esp
f010a521:	ff 75 f4             	pushl  -0xc(%ebp)
f010a524:	e8 b6 f1 ff ff       	call   f01096df <sched_new_env>
f010a529:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010a52c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a52f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a532:	c9                   	leave  
f010a533:	c3                   	ret    

f010a534 <sys_run_env>:

void sys_run_env(int32 envId)
{
f010a534:	55                   	push   %ebp
f010a535:	89 e5                	mov    %esp,%ebp
f010a537:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010a53a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53d:	83 ec 0c             	sub    $0xc,%esp
f010a540:	50                   	push   %eax
f010a541:	e8 b0 f1 ff ff       	call   f01096f6 <sched_run_env>
f010a546:	83 c4 10             	add    $0x10,%esp
}
f010a549:	90                   	nop
f010a54a:	c9                   	leave  
f010a54b:	c3                   	ret    

f010a54c <sys_free_env>:

void sys_free_env(int32 envId)
{
f010a54c:	55                   	push   %ebp
f010a54d:	89 e5                	mov    %esp,%ebp
f010a54f:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010a552:	8b 45 08             	mov    0x8(%ebp),%eax
f010a555:	83 ec 0c             	sub    $0xc,%esp
f010a558:	50                   	push   %eax
f010a559:	e8 73 f5 ff ff       	call   f0109ad1 <sched_kill_env>
f010a55e:	83 c4 10             	add    $0x10,%esp
}
f010a561:	90                   	nop
f010a562:	c9                   	leave  
f010a563:	c3                   	ret    

f010a564 <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010a564:	55                   	push   %ebp
f010a565:	89 e5                	mov    %esp,%ebp
f010a567:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010a56a:	0f 31                	rdtsc  
f010a56c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010a56f:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010a572:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a575:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a578:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010a57b:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010a57e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a581:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010a584:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010a587:	89 01                	mov    %eax,(%ecx)
f010a589:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010a58c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58f:	c9                   	leave  
f010a590:	c2 04 00             	ret    $0x4

f010a593 <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010a593:	55                   	push   %ebp
f010a594:	89 e5                	mov    %esp,%ebp
f010a596:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010a599:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010a59e:	ff 75 10             	pushl  0x10(%ebp)
f010a5a1:	ff 75 0c             	pushl  0xc(%ebp)
f010a5a4:	ff 75 08             	pushl  0x8(%ebp)
f010a5a7:	50                   	push   %eax
f010a5a8:	e8 89 9b ff ff       	call   f0104136 <moveMem>
f010a5ad:	83 c4 10             	add    $0x10,%esp
	return;
f010a5b0:	90                   	nop
}
f010a5b1:	c9                   	leave  
f010a5b2:	c3                   	ret    

f010a5b3 <sys_rcr2>:
uint32 sys_rcr2()
{
f010a5b3:	55                   	push   %ebp
f010a5b4:	89 e5                	mov    %esp,%ebp
f010a5b6:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010a5b9:	0f 20 d0             	mov    %cr2,%eax
f010a5bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010a5bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010a5c2:	90                   	nop
}
f010a5c3:	c9                   	leave  
f010a5c4:	c3                   	ret    

f010a5c5 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010a5c5:	55                   	push   %ebp
f010a5c6:	89 e5                	mov    %esp,%ebp
f010a5c8:	83 ec 04             	sub    $0x4,%esp
f010a5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ce:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010a5d1:	8a 45 fc             	mov    -0x4(%ebp),%al
f010a5d4:	a2 80 29 53 f0       	mov    %al,0xf0532980
}
f010a5d9:	90                   	nop
f010a5da:	c9                   	leave  
f010a5db:	c3                   	ret    

f010a5dc <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010a5dc:	55                   	push   %ebp
f010a5dd:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010a5df:	c7 05 e8 16 55 f0 00 	movl   $0x0,0xf05516e8
f010a5e6:	00 00 00 
}
f010a5e9:	90                   	nop
f010a5ea:	5d                   	pop    %ebp
f010a5eb:	c3                   	ret    

f010a5ec <inctst>:
void inctst()
{
f010a5ec:	55                   	push   %ebp
f010a5ed:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010a5ef:	a1 e8 16 55 f0       	mov    0xf05516e8,%eax
f010a5f4:	40                   	inc    %eax
f010a5f5:	a3 e8 16 55 f0       	mov    %eax,0xf05516e8
}
f010a5fa:	90                   	nop
f010a5fb:	5d                   	pop    %ebp
f010a5fc:	c3                   	ret    

f010a5fd <gettst>:
uint32 gettst()
{
f010a5fd:	55                   	push   %ebp
f010a5fe:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010a600:	a1 e8 16 55 f0       	mov    0xf05516e8,%eax
}
f010a605:	5d                   	pop    %ebp
f010a606:	c3                   	ret    

f010a607 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010a607:	55                   	push   %ebp
f010a608:	89 e5                	mov    %esp,%ebp
f010a60a:	83 ec 28             	sub    $0x28,%esp
f010a60d:	8b 45 14             	mov    0x14(%ebp),%eax
f010a610:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010a613:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010a61a:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010a61e:	83 f8 65             	cmp    $0x65,%eax
f010a621:	74 5d                	je     f010a680 <tst+0x79>
f010a623:	83 f8 65             	cmp    $0x65,%eax
f010a626:	7f 0a                	jg     f010a632 <tst+0x2b>
f010a628:	83 f8 62             	cmp    $0x62,%eax
f010a62b:	74 73                	je     f010a6a0 <tst+0x99>
f010a62d:	e9 91 00 00 00       	jmp    f010a6c3 <tst+0xbc>
f010a632:	83 f8 67             	cmp    $0x67,%eax
f010a635:	74 29                	je     f010a660 <tst+0x59>
f010a637:	83 f8 6c             	cmp    $0x6c,%eax
f010a63a:	0f 85 83 00 00 00    	jne    f010a6c3 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010a640:	8b 45 08             	mov    0x8(%ebp),%eax
f010a643:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a646:	73 09                	jae    f010a651 <tst+0x4a>
			chk = 1;
f010a648:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a64f:	eb 68                	jmp    f010a6b9 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010a651:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a655:	74 62                	je     f010a6b9 <tst+0xb2>
			chk = 1;
f010a657:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a65e:	eb 59                	jmp    f010a6b9 <tst+0xb2>
	case 'g':
		if (n > v1)
f010a660:	8b 45 08             	mov    0x8(%ebp),%eax
f010a663:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a666:	76 09                	jbe    f010a671 <tst+0x6a>
			chk = 1;
f010a668:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a66f:	eb 4b                	jmp    f010a6bc <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010a671:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a675:	74 45                	je     f010a6bc <tst+0xb5>
			chk = 1;
f010a677:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a67e:	eb 3c                	jmp    f010a6bc <tst+0xb5>
	case 'e':
		if (n == v1)
f010a680:	8b 45 08             	mov    0x8(%ebp),%eax
f010a683:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a686:	75 09                	jne    f010a691 <tst+0x8a>
			chk = 1;
f010a688:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a68f:	eb 2e                	jmp    f010a6bf <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010a691:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a695:	74 28                	je     f010a6bf <tst+0xb8>
			chk = 1;
f010a697:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a69e:	eb 1f                	jmp    f010a6bf <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010a6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a6a6:	72 1a                	jb     f010a6c2 <tst+0xbb>
f010a6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a6ae:	77 12                	ja     f010a6c2 <tst+0xbb>
			chk = 1;
f010a6b0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a6b7:	eb 09                	jmp    f010a6c2 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a6b9:	90                   	nop
f010a6ba:	eb 07                	jmp    f010a6c3 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a6bc:	90                   	nop
f010a6bd:	eb 04                	jmp    f010a6c3 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a6bf:	90                   	nop
f010a6c0:	eb 01                	jmp    f010a6c3 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010a6c2:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010a6c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a6c7:	75 17                	jne    f010a6e0 <tst+0xd9>
f010a6c9:	83 ec 04             	sub    $0x4,%esp
f010a6cc:	68 d7 ae 11 f0       	push   $0xf011aed7
f010a6d1:	68 95 01 00 00       	push   $0x195
f010a6d6:	68 a6 ae 11 f0       	push   $0xf011aea6
f010a6db:	e8 96 5a ff ff       	call   f0100176 <_panic>
	tstcnt++ ;
f010a6e0:	a1 e8 16 55 f0       	mov    0xf05516e8,%eax
f010a6e5:	40                   	inc    %eax
f010a6e6:	a3 e8 16 55 f0       	mov    %eax,0xf05516e8
	return;
f010a6eb:	90                   	nop
}
f010a6ec:	c9                   	leave  
f010a6ed:	c3                   	ret    

f010a6ee <chktst>:

void chktst(uint32 n)
{
f010a6ee:	55                   	push   %ebp
f010a6ef:	89 e5                	mov    %esp,%ebp
f010a6f1:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010a6f4:	a1 e8 16 55 f0       	mov    0xf05516e8,%eax
f010a6f9:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a6fc:	75 12                	jne    f010a710 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010a6fe:	83 ec 0c             	sub    $0xc,%esp
f010a701:	68 ec ae 11 f0       	push   $0xf011aeec
f010a706:	e8 8b c6 ff ff       	call   f0106d96 <cprintf>
f010a70b:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010a70e:	eb 17                	jmp    f010a727 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010a710:	83 ec 04             	sub    $0x4,%esp
f010a713:	68 18 af 11 f0       	push   $0xf011af18
f010a718:	68 9f 01 00 00       	push   $0x19f
f010a71d:	68 a6 ae 11 f0       	push   $0xf011aea6
f010a722:	e8 4f 5a ff ff       	call   f0100176 <_panic>
}
f010a727:	c9                   	leave  
f010a728:	c3                   	ret    

f010a729 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010a729:	55                   	push   %ebp
f010a72a:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010a72c:	a1 38 32 53 f0       	mov    0xf0533238,%eax
}
f010a731:	5d                   	pop    %ebp
f010a732:	c3                   	ret    

f010a733 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010a733:	55                   	push   %ebp
f010a734:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010a736:	8b 45 08             	mov    0x8(%ebp),%eax
f010a739:	a3 38 32 53 f0       	mov    %eax,0xf0533238
}
f010a73e:	90                   	nop
f010a73f:	5d                   	pop    %ebp
f010a740:	c3                   	ret    

f010a741 <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010a741:	55                   	push   %ebp
f010a742:	89 e5                	mov    %esp,%ebp
f010a744:	56                   	push   %esi
f010a745:	53                   	push   %ebx
f010a746:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010a749:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010a74d:	0f 87 ec 02 00 00    	ja     f010aa3f <syscall+0x2fe>
f010a753:	8b 45 08             	mov    0x8(%ebp),%eax
f010a756:	c1 e0 02             	shl    $0x2,%eax
f010a759:	05 34 af 11 f0       	add    $0xf011af34,%eax
f010a75e:	8b 00                	mov    (%eax),%eax
f010a760:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010a762:	8b 45 14             	mov    0x14(%ebp),%eax
f010a765:	0f b6 d0             	movzbl %al,%edx
f010a768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a76b:	83 ec 04             	sub    $0x4,%esp
f010a76e:	52                   	push   %edx
f010a76f:	ff 75 10             	pushl  0x10(%ebp)
f010a772:	50                   	push   %eax
f010a773:	e8 4c f9 ff ff       	call   f010a0c4 <sys_cputs>
f010a778:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a77b:	b8 00 00 00 00       	mov    $0x0,%eax
f010a780:	e9 bf 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010a785:	e8 af f9 ff ff       	call   f010a139 <sys_cgetc>
f010a78a:	e9 b5 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010a78f:	e8 c5 f9 ff ff       	call   f010a159 <sys_getenvindex>
f010a794:	e9 ab 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010a799:	e8 ae f9 ff ff       	call   f010a14c <sys_getenvid>
f010a79e:	e9 a1 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010a7a3:	e8 ff f9 ff ff       	call   f010a1a7 <sys_getparentenvid>
f010a7a8:	e9 97 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010a7ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7b0:	83 ec 0c             	sub    $0xc,%esp
f010a7b3:	50                   	push   %eax
f010a7b4:	e8 fb f9 ff ff       	call   f010a1b4 <sys_env_destroy>
f010a7b9:	83 c4 10             	add    $0x10,%esp
f010a7bc:	e9 83 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010a7c1:	e8 76 fa ff ff       	call   f010a23c <sys_env_exit>
		return 0;
f010a7c6:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7cb:	e9 74 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010a7d0:	83 ec 08             	sub    $0x8,%esp
f010a7d3:	ff 75 10             	pushl  0x10(%ebp)
f010a7d6:	ff 75 0c             	pushl  0xc(%ebp)
f010a7d9:	e8 be fb ff ff       	call   f010a39c <sys_calculate_required_frames>
f010a7de:	83 c4 10             	add    $0x10,%esp
f010a7e1:	e9 5e 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010a7e6:	e8 d3 fb ff ff       	call   f010a3be <sys_calculate_free_frames>
f010a7eb:	e9 54 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010a7f0:	e8 e8 fb ff ff       	call   f010a3dd <sys_calculate_modified_frames>
f010a7f5:	e9 4a 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010a7fa:	e8 f8 fb ff ff       	call   f010a3f7 <sys_calculate_notmod_frames>
f010a7ff:	e9 40 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010a804:	e8 08 fc ff ff       	call   f010a411 <sys_pf_calculate_allocated_pages>
f010a809:	e9 36 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010a80e:	83 ec 08             	sub    $0x8,%esp
f010a811:	ff 75 10             	pushl  0x10(%ebp)
f010a814:	ff 75 0c             	pushl  0xc(%ebp)
f010a817:	e8 0e fc ff ff       	call   f010a42a <sys_freeMem>
f010a81c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a81f:	b8 00 00 00 00       	mov    $0x0,%eax
f010a824:	e9 1b 02 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010a829:	8b 55 10             	mov    0x10(%ebp),%edx
f010a82c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a82f:	83 ec 08             	sub    $0x8,%esp
f010a832:	52                   	push   %edx
f010a833:	50                   	push   %eax
f010a834:	e8 11 fa ff ff       	call   f010a24a <__sys_allocate_page>
f010a839:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a83c:	b8 00 00 00 00       	mov    $0x0,%eax
f010a841:	e9 fe 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010a846:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010a849:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010a84c:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010a84f:	8b 55 10             	mov    0x10(%ebp),%edx
f010a852:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a855:	83 ec 0c             	sub    $0xc,%esp
f010a858:	56                   	push   %esi
f010a859:	53                   	push   %ebx
f010a85a:	51                   	push   %ecx
f010a85b:	52                   	push   %edx
f010a85c:	50                   	push   %eax
f010a85d:	e8 00 fb ff ff       	call   f010a362 <__sys_map_frame>
f010a862:	83 c4 20             	add    $0x20,%esp
		return 0;
f010a865:	b8 00 00 00 00       	mov    $0x0,%eax
f010a86a:	e9 d5 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010a86f:	8b 55 10             	mov    0x10(%ebp),%edx
f010a872:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a875:	83 ec 08             	sub    $0x8,%esp
f010a878:	52                   	push   %edx
f010a879:	50                   	push   %eax
f010a87a:	e8 00 fb ff ff       	call   f010a37f <__sys_unmap_frame>
f010a87f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a882:	b8 00 00 00 00       	mov    $0x0,%eax
f010a887:	e9 b8 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010a88c:	83 ec 08             	sub    $0x8,%esp
f010a88f:	ff 75 10             	pushl  0x10(%ebp)
f010a892:	ff 75 0c             	pushl  0xc(%ebp)
f010a895:	e8 d2 fb ff ff       	call   f010a46c <sys_allocateMem>
f010a89a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a89d:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8a2:	e9 9d 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010a8a7:	e8 e0 fb ff ff       	call   f010a48c <sys_disable_interrupt>
		return 0;
f010a8ac:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8b1:	e9 8e 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010a8b6:	e8 eb fb ff ff       	call   f010a4a6 <sys_enable_interrupt>
		return 0;
f010a8bb:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8c0:	e9 7f 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010a8c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8c8:	0f be c0             	movsbl %al,%eax
f010a8cb:	83 ec 0c             	sub    $0xc,%esp
f010a8ce:	50                   	push   %eax
f010a8cf:	e8 41 f8 ff ff       	call   f010a115 <sys_cputc>
f010a8d4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a8d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8dc:	e9 63 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010a8e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8e4:	0f be c0             	movsbl %al,%eax
f010a8e7:	83 ec 0c             	sub    $0xc,%esp
f010a8ea:	50                   	push   %eax
f010a8eb:	e8 d0 fb ff ff       	call   f010a4c0 <sys_clearFFL>
f010a8f0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a8f3:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8f8:	e9 47 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;


	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3);
f010a8fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a900:	83 ec 04             	sub    $0x4,%esp
f010a903:	ff 75 14             	pushl  0x14(%ebp)
f010a906:	ff 75 10             	pushl  0x10(%ebp)
f010a909:	50                   	push   %eax
f010a90a:	e8 e5 fb ff ff       	call   f010a4f4 <sys_create_env>
f010a90f:	83 c4 10             	add    $0x10,%esp
f010a912:	e9 2d 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010a917:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a91a:	83 ec 0c             	sub    $0xc,%esp
f010a91d:	50                   	push   %eax
f010a91e:	e8 29 fc ff ff       	call   f010a54c <sys_free_env>
f010a923:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a926:	b8 00 00 00 00       	mov    $0x0,%eax
f010a92b:	e9 14 01 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010a930:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a933:	83 ec 0c             	sub    $0xc,%esp
f010a936:	50                   	push   %eax
f010a937:	e8 f8 fb ff ff       	call   f010a534 <sys_run_env>
f010a93c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a93f:	b8 00 00 00 00       	mov    $0x0,%eax
f010a944:	e9 fb 00 00 00       	jmp    f010aa44 <syscall+0x303>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010a949:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a94c:	83 ec 0c             	sub    $0xc,%esp
f010a94f:	50                   	push   %eax
f010a950:	e8 0f fc ff ff       	call   f010a564 <sys_get_virtual_time>
f010a955:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010a958:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a95b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010a95e:	8b 45 10             	mov    0x10(%ebp),%eax
f010a961:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010a964:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a967:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a96a:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010a96c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a96f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a972:	89 10                	mov    %edx,(%eax)
		return 0;
f010a974:	b8 00 00 00 00       	mov    $0x0,%eax
f010a979:	e9 c6 00 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010a97e:	83 ec 04             	sub    $0x4,%esp
f010a981:	ff 75 14             	pushl  0x14(%ebp)
f010a984:	ff 75 10             	pushl  0x10(%ebp)
f010a987:	ff 75 0c             	pushl  0xc(%ebp)
f010a98a:	e8 04 fc ff ff       	call   f010a593 <sys_moveMem>
f010a98f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a992:	b8 00 00 00 00       	mov    $0x0,%eax
f010a997:	e9 a8 00 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010a99c:	e8 12 fc ff ff       	call   f010a5b3 <sys_rcr2>
f010a9a1:	e9 9e 00 00 00       	jmp    f010aa44 <syscall+0x303>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010a9a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9a9:	0f b6 c0             	movzbl %al,%eax
f010a9ac:	83 ec 0c             	sub    $0xc,%esp
f010a9af:	50                   	push   %eax
f010a9b0:	e8 10 fc ff ff       	call   f010a5c5 <sys_bypassPageFault>
f010a9b5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a9b8:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9bd:	e9 82 00 00 00       	jmp    f010aa44 <syscall+0x303>

	case SYS_rsttst:
		rsttst();
f010a9c2:	e8 15 fc ff ff       	call   f010a5dc <rsttst>
		return 0;
f010a9c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9cc:	eb 76                	jmp    f010aa44 <syscall+0x303>
	case SYS_inctst:
		inctst();
f010a9ce:	e8 19 fc ff ff       	call   f010a5ec <inctst>
		return 0;
f010a9d3:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9d8:	eb 6a                	jmp    f010aa44 <syscall+0x303>
	case SYS_chktst:
		chktst(a1);
f010a9da:	83 ec 0c             	sub    $0xc,%esp
f010a9dd:	ff 75 0c             	pushl  0xc(%ebp)
f010a9e0:	e8 09 fd ff ff       	call   f010a6ee <chktst>
f010a9e5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a9e8:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9ed:	eb 55                	jmp    f010aa44 <syscall+0x303>
	case SYS_gettst:
		return gettst();
f010a9ef:	e8 09 fc ff ff       	call   f010a5fd <gettst>
f010a9f4:	eb 4e                	jmp    f010aa44 <syscall+0x303>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010a9f6:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010a9f9:	8b 45 18             	mov    0x18(%ebp),%eax
f010a9fc:	0f be c0             	movsbl %al,%eax
f010a9ff:	83 ec 0c             	sub    $0xc,%esp
f010aa02:	52                   	push   %edx
f010aa03:	50                   	push   %eax
f010aa04:	ff 75 14             	pushl  0x14(%ebp)
f010aa07:	ff 75 10             	pushl  0x10(%ebp)
f010aa0a:	ff 75 0c             	pushl  0xc(%ebp)
f010aa0d:	e8 f5 fb ff ff       	call   f010a607 <tst>
f010aa12:	83 c4 20             	add    $0x20,%esp
		return 0;
f010aa15:	b8 00 00 00 00       	mov    $0x0,%eax
f010aa1a:	eb 28                	jmp    f010aa44 <syscall+0x303>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010aa1c:	e8 08 fd ff ff       	call   f010a729 <sys_get_heap_strategy>
f010aa21:	eb 21                	jmp    f010aa44 <syscall+0x303>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010aa23:	83 ec 0c             	sub    $0xc,%esp
f010aa26:	ff 75 0c             	pushl  0xc(%ebp)
f010aa29:	e8 05 fd ff ff       	call   f010a733 <sys_set_uheap_strategy>
f010aa2e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aa31:	b8 00 00 00 00       	mov    $0x0,%eax
f010aa36:	eb 0c                	jmp    f010aa44 <syscall+0x303>

	case NSYSCALLS:
		return 	-E_INVAL;
f010aa38:	b8 03 00 00 00       	mov    $0x3,%eax
f010aa3d:	eb 05                	jmp    f010aa44 <syscall+0x303>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010aa3f:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010aa44:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010aa47:	5b                   	pop    %ebx
f010aa48:	5e                   	pop    %esi
f010aa49:	5d                   	pop    %ebp
f010aa4a:	c3                   	ret    

f010aa4b <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010aa4b:	55                   	push   %ebp
f010aa4c:	89 e5                	mov    %esp,%ebp
f010aa4e:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010aa51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa54:	8b 00                	mov    (%eax),%eax
f010aa56:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010aa59:	8b 45 10             	mov    0x10(%ebp),%eax
f010aa5c:	8b 00                	mov    (%eax),%eax
f010aa5e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010aa61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010aa68:	e9 ca 00 00 00       	jmp    f010ab37 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010aa6d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010aa70:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010aa73:	01 d0                	add    %edx,%eax
f010aa75:	89 c2                	mov    %eax,%edx
f010aa77:	c1 ea 1f             	shr    $0x1f,%edx
f010aa7a:	01 d0                	add    %edx,%eax
f010aa7c:	d1 f8                	sar    %eax
f010aa7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010aa81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aa84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010aa87:	eb 03                	jmp    f010aa8c <stab_binsearch+0x41>
			m--;
f010aa89:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010aa8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa8f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010aa92:	7c 1e                	jl     f010aab2 <stab_binsearch+0x67>
f010aa94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa97:	89 d0                	mov    %edx,%eax
f010aa99:	01 c0                	add    %eax,%eax
f010aa9b:	01 d0                	add    %edx,%eax
f010aa9d:	c1 e0 02             	shl    $0x2,%eax
f010aaa0:	89 c2                	mov    %eax,%edx
f010aaa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa5:	01 d0                	add    %edx,%eax
f010aaa7:	8a 40 04             	mov    0x4(%eax),%al
f010aaaa:	0f b6 c0             	movzbl %al,%eax
f010aaad:	3b 45 14             	cmp    0x14(%ebp),%eax
f010aab0:	75 d7                	jne    f010aa89 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010aab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aab5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010aab8:	7d 09                	jge    f010aac3 <stab_binsearch+0x78>
			l = true_m + 1;
f010aaba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aabd:	40                   	inc    %eax
f010aabe:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010aac1:	eb 74                	jmp    f010ab37 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010aac3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010aaca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aacd:	89 d0                	mov    %edx,%eax
f010aacf:	01 c0                	add    %eax,%eax
f010aad1:	01 d0                	add    %edx,%eax
f010aad3:	c1 e0 02             	shl    $0x2,%eax
f010aad6:	89 c2                	mov    %eax,%edx
f010aad8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadb:	01 d0                	add    %edx,%eax
f010aadd:	8b 40 08             	mov    0x8(%eax),%eax
f010aae0:	3b 45 18             	cmp    0x18(%ebp),%eax
f010aae3:	73 11                	jae    f010aaf6 <stab_binsearch+0xab>
			*region_left = m;
f010aae5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aae8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aaeb:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010aaed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aaf0:	40                   	inc    %eax
f010aaf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010aaf4:	eb 41                	jmp    f010ab37 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010aaf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aaf9:	89 d0                	mov    %edx,%eax
f010aafb:	01 c0                	add    %eax,%eax
f010aafd:	01 d0                	add    %edx,%eax
f010aaff:	c1 e0 02             	shl    $0x2,%eax
f010ab02:	89 c2                	mov    %eax,%edx
f010ab04:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab07:	01 d0                	add    %edx,%eax
f010ab09:	8b 40 08             	mov    0x8(%eax),%eax
f010ab0c:	3b 45 18             	cmp    0x18(%ebp),%eax
f010ab0f:	76 14                	jbe    f010ab25 <stab_binsearch+0xda>
			*region_right = m - 1;
f010ab11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab14:	8d 50 ff             	lea    -0x1(%eax),%edx
f010ab17:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab1a:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010ab1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab1f:	48                   	dec    %eax
f010ab20:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ab23:	eb 12                	jmp    f010ab37 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010ab25:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab28:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab2b:	89 10                	mov    %edx,(%eax)
			l = m;
f010ab2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab30:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010ab33:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010ab37:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ab3a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010ab3d:	0f 8e 2a ff ff ff    	jle    f010aa6d <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010ab43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ab47:	75 0f                	jne    f010ab58 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010ab49:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab4c:	8b 00                	mov    (%eax),%eax
f010ab4e:	8d 50 ff             	lea    -0x1(%eax),%edx
f010ab51:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab54:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010ab56:	eb 3d                	jmp    f010ab95 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010ab58:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab5b:	8b 00                	mov    (%eax),%eax
f010ab5d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ab60:	eb 03                	jmp    f010ab65 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010ab62:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010ab65:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab68:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010ab6a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ab6d:	7d 1e                	jge    f010ab8d <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010ab6f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ab72:	89 d0                	mov    %edx,%eax
f010ab74:	01 c0                	add    %eax,%eax
f010ab76:	01 d0                	add    %edx,%eax
f010ab78:	c1 e0 02             	shl    $0x2,%eax
f010ab7b:	89 c2                	mov    %eax,%edx
f010ab7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab80:	01 d0                	add    %edx,%eax
f010ab82:	8a 40 04             	mov    0x4(%eax),%al
f010ab85:	0f b6 c0             	movzbl %al,%eax
f010ab88:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ab8b:	75 d5                	jne    f010ab62 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010ab8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab90:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ab93:	89 10                	mov    %edx,(%eax)
	}
}
f010ab95:	90                   	nop
f010ab96:	c9                   	leave  
f010ab97:	c3                   	ret    

f010ab98 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010ab98:	55                   	push   %ebp
f010ab99:	89 e5                	mov    %esp,%ebp
f010ab9b:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010ab9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aba1:	c7 00 f0 af 11 f0    	movl   $0xf011aff0,(%eax)
	info->eip_line = 0;
f010aba7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abaa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010abb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abb4:	c7 40 08 f0 af 11 f0 	movl   $0xf011aff0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010abbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abbe:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010abc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abc8:	8b 55 08             	mov    0x8(%ebp),%edx
f010abcb:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010abce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abd1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010abd8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdb:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010abe0:	76 1e                	jbe    f010ac00 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010abe2:	c7 45 f4 b0 c7 11 f0 	movl   $0xf011c7b0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010abe9:	c7 45 f0 74 ce 13 f0 	movl   $0xf013ce74,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010abf0:	c7 45 ec 75 ce 13 f0 	movl   $0xf013ce75,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010abf7:	c7 45 e8 09 50 14 f0 	movl   $0xf0145009,-0x18(%ebp)
f010abfe:	eb 2a                	jmp    f010ac2a <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010ac00:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010ac07:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac0a:	8b 00                	mov    (%eax),%eax
f010ac0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010ac0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac12:	8b 40 04             	mov    0x4(%eax),%eax
f010ac15:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010ac18:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac1b:	8b 40 08             	mov    0x8(%eax),%eax
f010ac1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010ac21:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac24:	8b 40 0c             	mov    0xc(%eax),%eax
f010ac27:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010ac2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ac30:	76 0a                	jbe    f010ac3c <debuginfo_eip+0xa4>
f010ac32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac35:	48                   	dec    %eax
f010ac36:	8a 00                	mov    (%eax),%al
f010ac38:	84 c0                	test   %al,%al
f010ac3a:	74 0a                	je     f010ac46 <debuginfo_eip+0xae>
		return -1;
f010ac3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010ac41:	e9 01 02 00 00       	jmp    f010ae47 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010ac46:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ac4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ac50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac53:	29 c2                	sub    %eax,%edx
f010ac55:	89 d0                	mov    %edx,%eax
f010ac57:	c1 f8 02             	sar    $0x2,%eax
f010ac5a:	89 c2                	mov    %eax,%edx
f010ac5c:	89 d0                	mov    %edx,%eax
f010ac5e:	c1 e0 02             	shl    $0x2,%eax
f010ac61:	01 d0                	add    %edx,%eax
f010ac63:	c1 e0 02             	shl    $0x2,%eax
f010ac66:	01 d0                	add    %edx,%eax
f010ac68:	c1 e0 02             	shl    $0x2,%eax
f010ac6b:	01 d0                	add    %edx,%eax
f010ac6d:	89 c1                	mov    %eax,%ecx
f010ac6f:	c1 e1 08             	shl    $0x8,%ecx
f010ac72:	01 c8                	add    %ecx,%eax
f010ac74:	89 c1                	mov    %eax,%ecx
f010ac76:	c1 e1 10             	shl    $0x10,%ecx
f010ac79:	01 c8                	add    %ecx,%eax
f010ac7b:	01 c0                	add    %eax,%eax
f010ac7d:	01 d0                	add    %edx,%eax
f010ac7f:	48                   	dec    %eax
f010ac80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010ac83:	ff 75 08             	pushl  0x8(%ebp)
f010ac86:	6a 64                	push   $0x64
f010ac88:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010ac8b:	50                   	push   %eax
f010ac8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ac8f:	50                   	push   %eax
f010ac90:	ff 75 f4             	pushl  -0xc(%ebp)
f010ac93:	e8 b3 fd ff ff       	call   f010aa4b <stab_binsearch>
f010ac98:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010ac9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac9e:	85 c0                	test   %eax,%eax
f010aca0:	75 0a                	jne    f010acac <debuginfo_eip+0x114>
		return -1;
f010aca2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010aca7:	e9 9b 01 00 00       	jmp    f010ae47 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010acac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acaf:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010acb2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010acb5:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010acb8:	ff 75 08             	pushl  0x8(%ebp)
f010acbb:	6a 24                	push   $0x24
f010acbd:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010acc0:	50                   	push   %eax
f010acc1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010acc4:	50                   	push   %eax
f010acc5:	ff 75 f4             	pushl  -0xc(%ebp)
f010acc8:	e8 7e fd ff ff       	call   f010aa4b <stab_binsearch>
f010accd:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010acd0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010acd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010acd6:	39 c2                	cmp    %eax,%edx
f010acd8:	0f 8f 86 00 00 00    	jg     f010ad64 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010acde:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ace1:	89 c2                	mov    %eax,%edx
f010ace3:	89 d0                	mov    %edx,%eax
f010ace5:	01 c0                	add    %eax,%eax
f010ace7:	01 d0                	add    %edx,%eax
f010ace9:	c1 e0 02             	shl    $0x2,%eax
f010acec:	89 c2                	mov    %eax,%edx
f010acee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acf1:	01 d0                	add    %edx,%eax
f010acf3:	8b 00                	mov    (%eax),%eax
f010acf5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010acf8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010acfb:	29 d1                	sub    %edx,%ecx
f010acfd:	89 ca                	mov    %ecx,%edx
f010acff:	39 d0                	cmp    %edx,%eax
f010ad01:	73 22                	jae    f010ad25 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010ad03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ad06:	89 c2                	mov    %eax,%edx
f010ad08:	89 d0                	mov    %edx,%eax
f010ad0a:	01 c0                	add    %eax,%eax
f010ad0c:	01 d0                	add    %edx,%eax
f010ad0e:	c1 e0 02             	shl    $0x2,%eax
f010ad11:	89 c2                	mov    %eax,%edx
f010ad13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad16:	01 d0                	add    %edx,%eax
f010ad18:	8b 10                	mov    (%eax),%edx
f010ad1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad1d:	01 c2                	add    %eax,%edx
f010ad1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad22:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010ad25:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ad28:	89 c2                	mov    %eax,%edx
f010ad2a:	89 d0                	mov    %edx,%eax
f010ad2c:	01 c0                	add    %eax,%eax
f010ad2e:	01 d0                	add    %edx,%eax
f010ad30:	c1 e0 02             	shl    $0x2,%eax
f010ad33:	89 c2                	mov    %eax,%edx
f010ad35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad38:	01 d0                	add    %edx,%eax
f010ad3a:	8b 50 08             	mov    0x8(%eax),%edx
f010ad3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad40:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010ad43:	8b 55 08             	mov    0x8(%ebp),%edx
f010ad46:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad49:	8b 40 10             	mov    0x10(%eax),%eax
f010ad4c:	29 c2                	sub    %eax,%edx
f010ad4e:	89 d0                	mov    %edx,%eax
f010ad50:	c1 f8 02             	sar    $0x2,%eax
f010ad53:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010ad56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ad59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010ad5c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ad5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010ad62:	eb 15                	jmp    f010ad79 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010ad64:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad67:	8b 55 08             	mov    0x8(%ebp),%edx
f010ad6a:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010ad6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad70:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010ad73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ad76:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010ad79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad7c:	8b 40 08             	mov    0x8(%eax),%eax
f010ad7f:	83 ec 08             	sub    $0x8,%esp
f010ad82:	6a 3a                	push   $0x3a
f010ad84:	50                   	push   %eax
f010ad85:	e8 41 c8 00 00       	call   f01175cb <strfind>
f010ad8a:	83 c4 10             	add    $0x10,%esp
f010ad8d:	89 c2                	mov    %eax,%edx
f010ad8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad92:	8b 40 08             	mov    0x8(%eax),%eax
f010ad95:	29 c2                	sub    %eax,%edx
f010ad97:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad9a:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ad9d:	eb 03                	jmp    f010ada2 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010ad9f:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ada2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ada5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ada8:	7c 4e                	jl     f010adf8 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010adaa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010adad:	89 d0                	mov    %edx,%eax
f010adaf:	01 c0                	add    %eax,%eax
f010adb1:	01 d0                	add    %edx,%eax
f010adb3:	c1 e0 02             	shl    $0x2,%eax
f010adb6:	89 c2                	mov    %eax,%edx
f010adb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adbb:	01 d0                	add    %edx,%eax
f010adbd:	8a 40 04             	mov    0x4(%eax),%al
f010adc0:	3c 84                	cmp    $0x84,%al
f010adc2:	74 34                	je     f010adf8 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010adc4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010adc7:	89 d0                	mov    %edx,%eax
f010adc9:	01 c0                	add    %eax,%eax
f010adcb:	01 d0                	add    %edx,%eax
f010adcd:	c1 e0 02             	shl    $0x2,%eax
f010add0:	89 c2                	mov    %eax,%edx
f010add2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010add5:	01 d0                	add    %edx,%eax
f010add7:	8a 40 04             	mov    0x4(%eax),%al
f010adda:	3c 64                	cmp    $0x64,%al
f010addc:	75 c1                	jne    f010ad9f <debuginfo_eip+0x207>
f010adde:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ade1:	89 d0                	mov    %edx,%eax
f010ade3:	01 c0                	add    %eax,%eax
f010ade5:	01 d0                	add    %edx,%eax
f010ade7:	c1 e0 02             	shl    $0x2,%eax
f010adea:	89 c2                	mov    %eax,%edx
f010adec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adef:	01 d0                	add    %edx,%eax
f010adf1:	8b 40 08             	mov    0x8(%eax),%eax
f010adf4:	85 c0                	test   %eax,%eax
f010adf6:	74 a7                	je     f010ad9f <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010adf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010adfb:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010adfe:	7c 42                	jl     f010ae42 <debuginfo_eip+0x2aa>
f010ae00:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ae03:	89 d0                	mov    %edx,%eax
f010ae05:	01 c0                	add    %eax,%eax
f010ae07:	01 d0                	add    %edx,%eax
f010ae09:	c1 e0 02             	shl    $0x2,%eax
f010ae0c:	89 c2                	mov    %eax,%edx
f010ae0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae11:	01 d0                	add    %edx,%eax
f010ae13:	8b 00                	mov    (%eax),%eax
f010ae15:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010ae18:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ae1b:	29 d1                	sub    %edx,%ecx
f010ae1d:	89 ca                	mov    %ecx,%edx
f010ae1f:	39 d0                	cmp    %edx,%eax
f010ae21:	73 1f                	jae    f010ae42 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010ae23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ae26:	89 d0                	mov    %edx,%eax
f010ae28:	01 c0                	add    %eax,%eax
f010ae2a:	01 d0                	add    %edx,%eax
f010ae2c:	c1 e0 02             	shl    $0x2,%eax
f010ae2f:	89 c2                	mov    %eax,%edx
f010ae31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae34:	01 d0                	add    %edx,%eax
f010ae36:	8b 10                	mov    (%eax),%edx
f010ae38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ae3b:	01 c2                	add    %eax,%edx
f010ae3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae40:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010ae42:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ae47:	c9                   	leave  
f010ae48:	c3                   	ret    

f010ae49 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010ae49:	55                   	push   %ebp
f010ae4a:	89 e5                	mov    %esp,%ebp
f010ae4c:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010ae4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae52:	05 00 14 00 00       	add    $0x1400,%eax
f010ae57:	c1 e0 03             	shl    $0x3,%eax
f010ae5a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010ae5d:	83 ec 04             	sub    $0x4,%esp
f010ae60:	6a 08                	push   $0x8
f010ae62:	ff 75 0c             	pushl  0xc(%ebp)
f010ae65:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae68:	e8 ef cc 00 00       	call   f0117b5c <ide_read>
f010ae6d:	83 c4 10             	add    $0x10,%esp
f010ae70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010ae73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010ae76:	c9                   	leave  
f010ae77:	c3                   	ret    

f010ae78 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010ae78:	55                   	push   %ebp
f010ae79:	89 e5                	mov    %esp,%ebp
f010ae7b:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010ae7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae81:	05 00 14 00 00       	add    $0x1400,%eax
f010ae86:	c1 e0 03             	shl    $0x3,%eax
f010ae89:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010ae8c:	83 ec 04             	sub    $0x4,%esp
f010ae8f:	6a 08                	push   $0x8
f010ae91:	ff 75 0c             	pushl  0xc(%ebp)
f010ae94:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae97:	e8 00 ce 00 00       	call   f0117c9c <ide_write>
f010ae9c:	83 c4 10             	add    $0x10,%esp
f010ae9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010aea2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010aea6:	74 14                	je     f010aebc <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010aea8:	83 ec 04             	sub    $0x4,%esp
f010aeab:	68 fc af 11 f0       	push   $0xf011affc
f010aeb0:	6a 37                	push   $0x37
f010aeb2:	68 13 b0 11 f0       	push   $0xf011b013
f010aeb7:	e8 ba 52 ff ff       	call   f0100176 <_panic>
	return success;
f010aebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010aebf:	c9                   	leave  
f010aec0:	c3                   	ret    

f010aec1 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010aec1:	55                   	push   %ebp
f010aec2:	89 e5                	mov    %esp,%ebp
f010aec4:	53                   	push   %ebx
f010aec5:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010aec8:	c7 05 f0 16 55 f0 00 	movl   $0x0,0xf05516f0
f010aecf:	00 00 00 
f010aed2:	c7 05 f4 16 55 f0 00 	movl   $0x0,0xf05516f4
f010aed9:	00 00 00 
f010aedc:	c7 05 fc 16 55 f0 00 	movl   $0x0,0xf05516fc
f010aee3:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010aee6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010aeed:	e9 bc 00 00 00       	jmp    f010afae <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010aef2:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010aef8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aefb:	89 d0                	mov    %edx,%eax
f010aefd:	01 c0                	add    %eax,%eax
f010aeff:	01 d0                	add    %edx,%eax
f010af01:	c1 e0 03             	shl    $0x3,%eax
f010af04:	01 c8                	add    %ecx,%eax
f010af06:	83 ec 0c             	sub    $0xc,%esp
f010af09:	50                   	push   %eax
f010af0a:	e8 6c 8a ff ff       	call   f010397b <initialize_frame_info>
f010af0f:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010af12:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010af18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af1b:	89 d0                	mov    %edx,%eax
f010af1d:	01 c0                	add    %eax,%eax
f010af1f:	01 d0                	add    %edx,%eax
f010af21:	c1 e0 03             	shl    $0x3,%eax
f010af24:	01 c8                	add    %ecx,%eax
f010af26:	8b 15 f0 16 55 f0    	mov    0xf05516f0,%edx
f010af2c:	89 10                	mov    %edx,(%eax)
f010af2e:	8b 00                	mov    (%eax),%eax
f010af30:	85 c0                	test   %eax,%eax
f010af32:	74 1f                	je     f010af53 <initialize_disk_page_file+0x92>
f010af34:	8b 15 f0 16 55 f0    	mov    0xf05516f0,%edx
f010af3a:	8b 1d b0 16 55 f0    	mov    0xf05516b0,%ebx
f010af40:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010af43:	89 c8                	mov    %ecx,%eax
f010af45:	01 c0                	add    %eax,%eax
f010af47:	01 c8                	add    %ecx,%eax
f010af49:	c1 e0 03             	shl    $0x3,%eax
f010af4c:	01 d8                	add    %ebx,%eax
f010af4e:	89 42 04             	mov    %eax,0x4(%edx)
f010af51:	eb 19                	jmp    f010af6c <initialize_disk_page_file+0xab>
f010af53:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010af59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af5c:	89 d0                	mov    %edx,%eax
f010af5e:	01 c0                	add    %eax,%eax
f010af60:	01 d0                	add    %edx,%eax
f010af62:	c1 e0 03             	shl    $0x3,%eax
f010af65:	01 c8                	add    %ecx,%eax
f010af67:	a3 f4 16 55 f0       	mov    %eax,0xf05516f4
f010af6c:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010af72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af75:	89 d0                	mov    %edx,%eax
f010af77:	01 c0                	add    %eax,%eax
f010af79:	01 d0                	add    %edx,%eax
f010af7b:	c1 e0 03             	shl    $0x3,%eax
f010af7e:	01 c8                	add    %ecx,%eax
f010af80:	a3 f0 16 55 f0       	mov    %eax,0xf05516f0
f010af85:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010af8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af8e:	89 d0                	mov    %edx,%eax
f010af90:	01 c0                	add    %eax,%eax
f010af92:	01 d0                	add    %edx,%eax
f010af94:	c1 e0 03             	shl    $0x3,%eax
f010af97:	01 c8                	add    %ecx,%eax
f010af99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010afa0:	a1 fc 16 55 f0       	mov    0xf05516fc,%eax
f010afa5:	40                   	inc    %eax
f010afa6:	a3 fc 16 55 f0       	mov    %eax,0xf05516fc
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010afab:	ff 45 f4             	incl   -0xc(%ebp)
f010afae:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010afb5:	0f 8e 37 ff ff ff    	jle    f010aef2 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010afbb:	90                   	nop
f010afbc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010afbf:	c9                   	leave  
f010afc0:	c3                   	ret    

f010afc1 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010afc1:	55                   	push   %ebp
f010afc2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010afc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc7:	8b 15 b0 16 55 f0    	mov    0xf05516b0,%edx
f010afcd:	29 d0                	sub    %edx,%eax
f010afcf:	c1 f8 03             	sar    $0x3,%eax
f010afd2:	89 c2                	mov    %eax,%edx
f010afd4:	89 d0                	mov    %edx,%eax
f010afd6:	c1 e0 02             	shl    $0x2,%eax
f010afd9:	01 d0                	add    %edx,%eax
f010afdb:	c1 e0 02             	shl    $0x2,%eax
f010afde:	01 d0                	add    %edx,%eax
f010afe0:	c1 e0 02             	shl    $0x2,%eax
f010afe3:	01 d0                	add    %edx,%eax
f010afe5:	89 c1                	mov    %eax,%ecx
f010afe7:	c1 e1 08             	shl    $0x8,%ecx
f010afea:	01 c8                	add    %ecx,%eax
f010afec:	89 c1                	mov    %eax,%ecx
f010afee:	c1 e1 10             	shl    $0x10,%ecx
f010aff1:	01 c8                	add    %ecx,%eax
f010aff3:	01 c0                	add    %eax,%eax
f010aff5:	01 d0                	add    %edx,%eax
}
f010aff7:	5d                   	pop    %ebp
f010aff8:	c3                   	ret    

f010aff9 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010aff9:	55                   	push   %ebp
f010affa:	89 e5                	mov    %esp,%ebp
f010affc:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010afff:	a1 f0 16 55 f0       	mov    0xf05516f0,%eax
f010b004:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010b007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b00b:	75 0a                	jne    f010b017 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010b00d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b012:	e9 8d 00 00 00       	jmp    f010b0a4 <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010b017:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b01a:	8b 00                	mov    (%eax),%eax
f010b01c:	85 c0                	test   %eax,%eax
f010b01e:	74 10                	je     f010b030 <allocate_disk_frame+0x37>
f010b020:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b023:	8b 00                	mov    (%eax),%eax
f010b025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b028:	8b 52 04             	mov    0x4(%edx),%edx
f010b02b:	89 50 04             	mov    %edx,0x4(%eax)
f010b02e:	eb 0b                	jmp    f010b03b <allocate_disk_frame+0x42>
f010b030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b033:	8b 40 04             	mov    0x4(%eax),%eax
f010b036:	a3 f4 16 55 f0       	mov    %eax,0xf05516f4
f010b03b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b03e:	8b 40 04             	mov    0x4(%eax),%eax
f010b041:	85 c0                	test   %eax,%eax
f010b043:	74 0f                	je     f010b054 <allocate_disk_frame+0x5b>
f010b045:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b048:	8b 40 04             	mov    0x4(%eax),%eax
f010b04b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b04e:	8b 12                	mov    (%edx),%edx
f010b050:	89 10                	mov    %edx,(%eax)
f010b052:	eb 0a                	jmp    f010b05e <allocate_disk_frame+0x65>
f010b054:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b057:	8b 00                	mov    (%eax),%eax
f010b059:	a3 f0 16 55 f0       	mov    %eax,0xf05516f0
f010b05e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b061:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b06a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b071:	a1 fc 16 55 f0       	mov    0xf05516fc,%eax
f010b076:	48                   	dec    %eax
f010b077:	a3 fc 16 55 f0       	mov    %eax,0xf05516fc
	initialize_frame_info(ptr_frame_info);
f010b07c:	83 ec 0c             	sub    $0xc,%esp
f010b07f:	ff 75 f4             	pushl  -0xc(%ebp)
f010b082:	e8 f4 88 ff ff       	call   f010397b <initialize_frame_info>
f010b087:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010b08a:	83 ec 0c             	sub    $0xc,%esp
f010b08d:	ff 75 f4             	pushl  -0xc(%ebp)
f010b090:	e8 2c ff ff ff       	call   f010afc1 <to_disk_frame_number>
f010b095:	83 c4 10             	add    $0x10,%esp
f010b098:	89 c2                	mov    %eax,%edx
f010b09a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b09d:	89 10                	mov    %edx,(%eax)
	return 0;
f010b09f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b0a4:	c9                   	leave  
f010b0a5:	c3                   	ret    

f010b0a6 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010b0a6:	55                   	push   %ebp
f010b0a7:	89 e5                	mov    %esp,%ebp
f010b0a9:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010b0aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b0ae:	0f 84 9b 00 00 00    	je     f010b14f <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010b0b4:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010b0ba:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 03             	shl    $0x3,%eax
f010b0c6:	01 c8                	add    %ecx,%eax
f010b0c8:	8b 15 f0 16 55 f0    	mov    0xf05516f0,%edx
f010b0ce:	89 10                	mov    %edx,(%eax)
f010b0d0:	8b 00                	mov    (%eax),%eax
f010b0d2:	85 c0                	test   %eax,%eax
f010b0d4:	74 1f                	je     f010b0f5 <free_disk_frame+0x4f>
f010b0d6:	8b 15 f0 16 55 f0    	mov    0xf05516f0,%edx
f010b0dc:	8b 1d b0 16 55 f0    	mov    0xf05516b0,%ebx
f010b0e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b0e5:	89 c8                	mov    %ecx,%eax
f010b0e7:	01 c0                	add    %eax,%eax
f010b0e9:	01 c8                	add    %ecx,%eax
f010b0eb:	c1 e0 03             	shl    $0x3,%eax
f010b0ee:	01 d8                	add    %ebx,%eax
f010b0f0:	89 42 04             	mov    %eax,0x4(%edx)
f010b0f3:	eb 19                	jmp    f010b10e <free_disk_frame+0x68>
f010b0f5:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010b0fb:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0fe:	89 d0                	mov    %edx,%eax
f010b100:	01 c0                	add    %eax,%eax
f010b102:	01 d0                	add    %edx,%eax
f010b104:	c1 e0 03             	shl    $0x3,%eax
f010b107:	01 c8                	add    %ecx,%eax
f010b109:	a3 f4 16 55 f0       	mov    %eax,0xf05516f4
f010b10e:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010b114:	8b 55 08             	mov    0x8(%ebp),%edx
f010b117:	89 d0                	mov    %edx,%eax
f010b119:	01 c0                	add    %eax,%eax
f010b11b:	01 d0                	add    %edx,%eax
f010b11d:	c1 e0 03             	shl    $0x3,%eax
f010b120:	01 c8                	add    %ecx,%eax
f010b122:	a3 f0 16 55 f0       	mov    %eax,0xf05516f0
f010b127:	8b 0d b0 16 55 f0    	mov    0xf05516b0,%ecx
f010b12d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b130:	89 d0                	mov    %edx,%eax
f010b132:	01 c0                	add    %eax,%eax
f010b134:	01 d0                	add    %edx,%eax
f010b136:	c1 e0 03             	shl    $0x3,%eax
f010b139:	01 c8                	add    %ecx,%eax
f010b13b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b142:	a1 fc 16 55 f0       	mov    0xf05516fc,%eax
f010b147:	40                   	inc    %eax
f010b148:	a3 fc 16 55 f0       	mov    %eax,0xf05516fc
f010b14d:	eb 01                	jmp    f010b150 <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010b14f:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010b150:	5b                   	pop    %ebx
f010b151:	5d                   	pop    %ebp
f010b152:	c3                   	ret    

f010b153 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010b153:	55                   	push   %ebp
f010b154:	89 e5                	mov    %esp,%ebp
f010b156:	53                   	push   %ebx
f010b157:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010b15a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b15d:	c1 e8 16             	shr    $0x16,%eax
f010b160:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b167:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16a:	01 d0                	add    %edx,%eax
f010b16c:	8b 00                	mov    (%eax),%eax
f010b16e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010b171:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b174:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010b179:	77 1d                	ja     f010b198 <get_disk_page_table+0x45>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010b17b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b17e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b183:	83 ec 0c             	sub    $0xc,%esp
f010b186:	50                   	push   %eax
f010b187:	e8 a9 0f 00 00       	call   f010c135 <kheap_virtual_address>
f010b18c:	83 c4 10             	add    $0x10,%esp
f010b18f:	89 c2                	mov    %eax,%edx
f010b191:	8b 45 14             	mov    0x14(%ebp),%eax
f010b194:	89 10                	mov    %edx,(%eax)
f010b196:	eb 44                	jmp    f010b1dc <get_disk_page_table+0x89>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010b198:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b19b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b1a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010b1a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1a6:	c1 e8 0c             	shr    $0xc,%eax
f010b1a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b1ac:	a1 30 32 53 f0       	mov    0xf0533230,%eax
f010b1b1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010b1b4:	72 17                	jb     f010b1cd <get_disk_page_table+0x7a>
f010b1b6:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1b9:	68 28 b0 11 f0       	push   $0xf011b028
f010b1be:	68 9b 00 00 00       	push   $0x9b
f010b1c3:	68 13 b0 11 f0       	push   $0xf011b013
f010b1c8:	e8 a9 4f ff ff       	call   f0100176 <_panic>
f010b1cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1d0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010b1d5:	89 c2                	mov    %eax,%edx
f010b1d7:	8b 45 14             	mov    0x14(%ebp),%eax
f010b1da:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010b1dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b1e0:	0f 85 80 00 00 00    	jne    f010b266 <get_disk_page_table+0x113>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010b1e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010b1ea:	74 6a                	je     f010b256 <get_disk_page_table+0x103>
		{

			if(USE_KHEAP)
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010b1ec:	83 ec 0c             	sub    $0xc,%esp
f010b1ef:	68 00 10 00 00       	push   $0x1000
f010b1f4:	e8 2d 0c 00 00       	call   f010be26 <kmalloc>
f010b1f9:	83 c4 10             	add    $0x10,%esp
f010b1fc:	89 c2                	mov    %eax,%edx
f010b1fe:	8b 45 14             	mov    0x14(%ebp),%eax
f010b201:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f010b203:	8b 45 14             	mov    0x14(%ebp),%eax
f010b206:	8b 00                	mov    (%eax),%eax
f010b208:	85 c0                	test   %eax,%eax
f010b20a:	75 07                	jne    f010b213 <get_disk_page_table+0xc0>
				{
					return E_NO_VM;
f010b20c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b211:	eb 58                	jmp    f010b26b <get_disk_page_table+0x118>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f010b213:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b216:	c1 e8 16             	shr    $0x16,%eax
f010b219:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b220:	8b 45 08             	mov    0x8(%ebp),%eax
f010b223:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010b226:	8b 45 14             	mov    0x14(%ebp),%eax
f010b229:	8b 00                	mov    (%eax),%eax
f010b22b:	83 ec 0c             	sub    $0xc,%esp
f010b22e:	50                   	push   %eax
f010b22f:	e8 22 0f 00 00       	call   f010c156 <kheap_physical_address>
f010b234:	83 c4 10             	add    $0x10,%esp
f010b237:	83 c8 01             	or     $0x1,%eax
f010b23a:	89 03                	mov    %eax,(%ebx)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010b23c:	8b 45 14             	mov    0x14(%ebp),%eax
f010b23f:	8b 00                	mov    (%eax),%eax
f010b241:	83 ec 04             	sub    $0x4,%esp
f010b244:	68 00 10 00 00       	push   $0x1000
f010b249:	6a 00                	push   $0x0
f010b24b:	50                   	push   %eax
f010b24c:	e8 a6 c3 00 00       	call   f01175f7 <memset>
f010b251:	83 c4 10             	add    $0x10,%esp
f010b254:	eb 10                	jmp    f010b266 <get_disk_page_table+0x113>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010b256:	8b 45 14             	mov    0x14(%ebp),%eax
f010b259:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010b25f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b264:	eb 05                	jmp    f010b26b <get_disk_page_table+0x118>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010b266:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b26b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b26e:	c9                   	leave  
f010b26f:	c3                   	ret    

f010b270 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010b270:	55                   	push   %ebp
f010b271:	89 e5                	mov    %esp,%ebp
f010b273:	83 ec 28             	sub    $0x28,%esp
f010b276:	8b 45 10             	mov    0x10(%ebp),%eax
f010b279:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010b27c:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010b280:	74 1c                	je     f010b29e <pf_add_empty_env_page+0x2e>
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010b282:	a1 c8 16 55 f0       	mov    0xf05516c8,%eax
f010b287:	83 ec 04             	sub    $0x4,%esp
f010b28a:	50                   	push   %eax
f010b28b:	ff 75 0c             	pushl  0xc(%ebp)
f010b28e:	ff 75 08             	pushl  0x8(%ebp)
f010b291:	e8 b3 00 00 00       	call   f010b349 <pf_add_env_page>
f010b296:	83 c4 10             	add    $0x10,%esp
f010b299:	e9 a9 00 00 00       	jmp    f010b347 <pf_add_empty_env_page+0xd7>

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b29e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b2a5:	76 19                	jbe    f010b2c0 <pf_add_empty_env_page+0x50>
f010b2a7:	68 58 b0 11 f0       	push   $0xf011b058
f010b2ac:	68 7e b0 11 f0       	push   $0xf011b07e
f010b2b1:	68 d3 00 00 00       	push   $0xd3
f010b2b6:	68 13 b0 11 f0       	push   $0xf011b013
f010b2bb:	e8 b6 4e ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2c3:	83 c0 64             	add    $0x64,%eax
f010b2c6:	83 ec 08             	sub    $0x8,%esp
f010b2c9:	50                   	push   %eax
f010b2ca:	ff 75 08             	pushl  0x8(%ebp)
f010b2cd:	e8 96 04 00 00       	call   f010b768 <get_disk_page_directory>
f010b2d2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b2d5:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b2d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2db:	8b 40 64             	mov    0x64(%eax),%eax
f010b2de:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010b2e1:	51                   	push   %ecx
f010b2e2:	6a 01                	push   $0x1
f010b2e4:	52                   	push   %edx
f010b2e5:	50                   	push   %eax
f010b2e6:	e8 68 fe ff ff       	call   f010b153 <get_disk_page_table>
f010b2eb:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b2ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2f1:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b2f4:	c1 ea 0c             	shr    $0xc,%edx
f010b2f7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b2fd:	c1 e2 02             	shl    $0x2,%edx
f010b300:	01 d0                	add    %edx,%eax
f010b302:	8b 00                	mov    (%eax),%eax
f010b304:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010b307:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b30a:	85 c0                	test   %eax,%eax
f010b30c:	75 34                	jne    f010b342 <pf_add_empty_env_page+0xd2>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b30e:	83 ec 0c             	sub    $0xc,%esp
f010b311:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b314:	50                   	push   %eax
f010b315:	e8 df fc ff ff       	call   f010aff9 <allocate_disk_frame>
f010b31a:	83 c4 10             	add    $0x10,%esp
f010b31d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b320:	75 07                	jne    f010b329 <pf_add_empty_env_page+0xb9>
f010b322:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b327:	eb 1e                	jmp    f010b347 <pf_add_empty_env_page+0xd7>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b329:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b32c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b32f:	c1 ea 0c             	shr    $0xc,%edx
f010b332:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b338:	c1 e2 02             	shl    $0x2,%edx
f010b33b:	01 c2                	add    %eax,%edx
f010b33d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b340:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010b342:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010b347:	c9                   	leave  
f010b348:	c3                   	ret    

f010b349 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010b349:	55                   	push   %ebp
f010b34a:	89 e5                	mov    %esp,%ebp
f010b34c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b34f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b356:	76 19                	jbe    f010b371 <pf_add_env_page+0x28>
f010b358:	68 58 b0 11 f0       	push   $0xf011b058
f010b35d:	68 7e b0 11 f0       	push   $0xf011b07e
f010b362:	68 e8 00 00 00       	push   $0xe8
f010b367:	68 13 b0 11 f0       	push   $0xf011b013
f010b36c:	e8 05 4e ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b371:	8b 45 08             	mov    0x8(%ebp),%eax
f010b374:	83 c0 64             	add    $0x64,%eax
f010b377:	83 ec 08             	sub    $0x8,%esp
f010b37a:	50                   	push   %eax
f010b37b:	ff 75 08             	pushl  0x8(%ebp)
f010b37e:	e8 e5 03 00 00       	call   f010b768 <get_disk_page_directory>
f010b383:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b386:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b389:	8b 45 08             	mov    0x8(%ebp),%eax
f010b38c:	8b 40 64             	mov    0x64(%eax),%eax
f010b38f:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010b392:	51                   	push   %ecx
f010b393:	6a 01                	push   $0x1
f010b395:	52                   	push   %edx
f010b396:	50                   	push   %eax
f010b397:	e8 b7 fd ff ff       	call   f010b153 <get_disk_page_table>
f010b39c:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b39f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b3a2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b3a5:	c1 ea 0c             	shr    $0xc,%edx
f010b3a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b3ae:	c1 e2 02             	shl    $0x2,%edx
f010b3b1:	01 d0                	add    %edx,%eax
f010b3b3:	8b 00                	mov    (%eax),%eax
f010b3b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010b3b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3bb:	85 c0                	test   %eax,%eax
f010b3bd:	75 34                	jne    f010b3f3 <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b3bf:	83 ec 0c             	sub    $0xc,%esp
f010b3c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b3c5:	50                   	push   %eax
f010b3c6:	e8 2e fc ff ff       	call   f010aff9 <allocate_disk_frame>
f010b3cb:	83 c4 10             	add    $0x10,%esp
f010b3ce:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b3d1:	75 07                	jne    f010b3da <pf_add_env_page+0x91>
f010b3d3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b3d8:	eb 31                	jmp    f010b40b <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b3da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b3dd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b3e0:	c1 ea 0c             	shr    $0xc,%edx
f010b3e3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b3e9:	c1 e2 02             	shl    $0x2,%edx
f010b3ec:	01 c2                	add    %eax,%edx
f010b3ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3f1:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010b3f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3f6:	83 ec 08             	sub    $0x8,%esp
f010b3f9:	ff 75 10             	pushl  0x10(%ebp)
f010b3fc:	50                   	push   %eax
f010b3fd:	e8 76 fa ff ff       	call   f010ae78 <write_disk_page>
f010b402:	83 c4 10             	add    $0x10,%esp
f010b405:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010b408:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b40b:	c9                   	leave  
f010b40c:	c3                   	ret    

f010b40d <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010b40d:	55                   	push   %ebp
f010b40e:	89 e5                	mov    %esp,%ebp
f010b410:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010b413:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b416:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010b41b:	76 19                	jbe    f010b436 <pf_update_env_page+0x29>
f010b41d:	68 58 b0 11 f0       	push   $0xf011b058
f010b422:	68 7e b0 11 f0       	push   $0xf011b07e
f010b427:	68 09 01 00 00       	push   $0x109
f010b42c:	68 13 b0 11 f0       	push   $0xf011b013
f010b431:	e8 40 4d ff ff       	call   f0100176 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b436:	8b 45 08             	mov    0x8(%ebp),%eax
f010b439:	83 c0 64             	add    $0x64,%eax
f010b43c:	83 ec 08             	sub    $0x8,%esp
f010b43f:	50                   	push   %eax
f010b440:	ff 75 08             	pushl  0x8(%ebp)
f010b443:	e8 20 03 00 00       	call   f010b768 <get_disk_page_directory>
f010b448:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010b44b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b44e:	8b 40 64             	mov    0x64(%eax),%eax
f010b451:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010b454:	52                   	push   %edx
f010b455:	6a 00                	push   $0x0
f010b457:	ff 75 0c             	pushl  0xc(%ebp)
f010b45a:	50                   	push   %eax
f010b45b:	e8 f3 fc ff ff       	call   f010b153 <get_disk_page_table>
f010b460:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b463:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b466:	85 c0                	test   %eax,%eax
f010b468:	75 0a                	jne    f010b474 <pf_update_env_page+0x67>
f010b46a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b46f:	e9 96 00 00 00       	jmp    f010b50a <pf_update_env_page+0xfd>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b477:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b47a:	c1 ea 0c             	shr    $0xc,%edx
f010b47d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b483:	c1 e2 02             	shl    $0x2,%edx
f010b486:	01 d0                	add    %edx,%eax
f010b488:	8b 00                	mov    (%eax),%eax
f010b48a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b48d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b491:	75 07                	jne    f010b49a <pf_update_env_page+0x8d>
f010b493:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b498:	eb 70                	jmp    f010b50a <pf_update_env_page+0xfd>
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
			//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
			//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, (void*)USER_LIMIT, 0);
f010b49a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b49d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b4a0:	6a 00                	push   $0x0
f010b4a2:	68 00 00 80 ef       	push   $0xef800000
f010b4a7:	ff 75 10             	pushl  0x10(%ebp)
f010b4aa:	50                   	push   %eax
f010b4ab:	e8 5a 88 ff ff       	call   f0103d0a <map_frame>
f010b4b0:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f010b4b3:	c7 45 f0 00 00 80 ef 	movl   $0xef800000,-0x10(%ebp)
f010b4ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b4bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b4c2:	83 ec 08             	sub    $0x8,%esp
f010b4c5:	50                   	push   %eax
f010b4c6:	ff 75 f4             	pushl  -0xc(%ebp)
f010b4c9:	e8 aa f9 ff ff       	call   f010ae78 <write_disk_page>
f010b4ce:	83 c4 10             	add    $0x10,%esp
f010b4d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f010b4d4:	8b 45 10             	mov    0x10(%ebp),%eax
f010b4d7:	8b 40 08             	mov    0x8(%eax),%eax
f010b4da:	40                   	inc    %eax
f010b4db:	8b 55 10             	mov    0x10(%ebp),%edx
f010b4de:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, (void*)USER_LIMIT);
f010b4e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4e5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b4e8:	83 ec 08             	sub    $0x8,%esp
f010b4eb:	68 00 00 80 ef       	push   $0xef800000
f010b4f0:	50                   	push   %eax
f010b4f1:	e8 43 89 ff ff       	call   f0103e39 <unmap_frame>
f010b4f6:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f010b4f9:	8b 45 10             	mov    0x10(%ebp),%eax
f010b4fc:	8b 40 08             	mov    0x8(%eax),%eax
f010b4ff:	48                   	dec    %eax
f010b500:	8b 55 10             	mov    0x10(%ebp),%edx
f010b503:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
	return ret;
f010b507:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010b50a:	c9                   	leave  
f010b50b:	c3                   	ret    

f010b50c <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010b50c:	55                   	push   %ebp
f010b50d:	89 e5                	mov    %esp,%ebp
f010b50f:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010b512:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b515:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b51b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b520:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b523:	8b 45 08             	mov    0x8(%ebp),%eax
f010b526:	8b 40 64             	mov    0x64(%eax),%eax
f010b529:	85 c0                	test   %eax,%eax
f010b52b:	75 07                	jne    f010b534 <pf_read_env_page+0x28>
f010b52d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b532:	eb 79                	jmp    f010b5ad <pf_read_env_page+0xa1>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010b534:	8b 45 08             	mov    0x8(%ebp),%eax
f010b537:	8b 40 64             	mov    0x64(%eax),%eax
f010b53a:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010b53d:	52                   	push   %edx
f010b53e:	6a 00                	push   $0x0
f010b540:	ff 75 0c             	pushl  0xc(%ebp)
f010b543:	50                   	push   %eax
f010b544:	e8 0a fc ff ff       	call   f010b153 <get_disk_page_table>
f010b549:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b54c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b54f:	85 c0                	test   %eax,%eax
f010b551:	75 07                	jne    f010b55a <pf_read_env_page+0x4e>
f010b553:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b558:	eb 53                	jmp    f010b5ad <pf_read_env_page+0xa1>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b55a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b55d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b560:	c1 ea 0c             	shr    $0xc,%edx
f010b563:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b569:	c1 e2 02             	shl    $0x2,%edx
f010b56c:	01 d0                	add    %edx,%eax
f010b56e:	8b 00                	mov    (%eax),%eax
f010b570:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b573:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b577:	75 07                	jne    f010b580 <pf_read_env_page+0x74>
f010b579:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b57e:	eb 2d                	jmp    f010b5ad <pf_read_env_page+0xa1>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010b580:	83 ec 08             	sub    $0x8,%esp
f010b583:	ff 75 0c             	pushl  0xc(%ebp)
f010b586:	ff 75 f0             	pushl  -0x10(%ebp)
f010b589:	e8 bb f8 ff ff       	call   f010ae49 <read_disk_page>
f010b58e:	83 c4 10             	add    $0x10,%esp
f010b591:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
f010b594:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b597:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f010b59c:	6a 40                	push   $0x40
f010b59e:	6a 00                	push   $0x0
f010b5a0:	52                   	push   %edx
f010b5a1:	50                   	push   %eax
f010b5a2:	e8 01 97 ff ff       	call   f0104ca8 <pt_set_page_permissions>
f010b5a7:	83 c4 10             	add    $0x10,%esp

	return disk_read_error;
f010b5aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010b5ad:	c9                   	leave  
f010b5ae:	c3                   	ret    

f010b5af <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010b5af:	55                   	push   %ebp
f010b5b0:	89 e5                	mov    %esp,%ebp
f010b5b2:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010b5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5b8:	8b 40 64             	mov    0x64(%eax),%eax
f010b5bb:	85 c0                	test   %eax,%eax
f010b5bd:	74 63                	je     f010b622 <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010b5bf:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b5c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5c5:	8b 40 64             	mov    0x64(%eax),%eax
f010b5c8:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010b5cb:	51                   	push   %ecx
f010b5cc:	6a 00                	push   $0x0
f010b5ce:	52                   	push   %edx
f010b5cf:	50                   	push   %eax
f010b5d0:	e8 7e fb ff ff       	call   f010b153 <get_disk_page_table>
f010b5d5:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010b5d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b5db:	85 c0                	test   %eax,%eax
f010b5dd:	74 46                	je     f010b625 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b5df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b5e2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b5e5:	c1 ea 0c             	shr    $0xc,%edx
f010b5e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b5ee:	c1 e2 02             	shl    $0x2,%edx
f010b5f1:	01 d0                	add    %edx,%eax
f010b5f3:	8b 00                	mov    (%eax),%eax
f010b5f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010b5f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b5fb:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b5fe:	c1 ea 0c             	shr    $0xc,%edx
f010b601:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b607:	c1 e2 02             	shl    $0x2,%edx
f010b60a:	01 d0                	add    %edx,%eax
f010b60c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010b612:	83 ec 0c             	sub    $0xc,%esp
f010b615:	ff 75 f4             	pushl  -0xc(%ebp)
f010b618:	e8 89 fa ff ff       	call   f010b0a6 <free_disk_frame>
f010b61d:	83 c4 10             	add    $0x10,%esp
f010b620:	eb 04                	jmp    f010b626 <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010b622:	90                   	nop
f010b623:	eb 01                	jmp    f010b626 <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010b625:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010b626:	c9                   	leave  
f010b627:	c3                   	ret    

f010b628 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010b628:	55                   	push   %ebp
f010b629:	89 e5                	mov    %esp,%ebp
f010b62b:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b62e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b635:	e9 b8 00 00 00       	jmp    f010b6f2 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010b63a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b63d:	8b 40 64             	mov    0x64(%eax),%eax
f010b640:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b643:	c1 e2 02             	shl    $0x2,%edx
f010b646:	01 d0                	add    %edx,%eax
f010b648:	8b 00                	mov    (%eax),%eax
f010b64a:	83 e0 01             	and    $0x1,%eax
f010b64d:	85 c0                	test   %eax,%eax
f010b64f:	0f 84 99 00 00 00    	je     f010b6ee <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010b655:	8b 45 08             	mov    0x8(%ebp),%eax
f010b658:	8b 40 64             	mov    0x64(%eax),%eax
f010b65b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b65e:	c1 e2 02             	shl    $0x2,%edx
f010b661:	01 d0                	add    %edx,%eax
f010b663:	8b 00                	mov    (%eax),%eax
f010b665:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b66a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010b66d:	83 ec 0c             	sub    $0xc,%esp
f010b670:	ff 75 ec             	pushl  -0x14(%ebp)
f010b673:	e8 bd 0a 00 00       	call   f010c135 <kheap_virtual_address>
f010b678:	83 c4 10             	add    $0x10,%esp
f010b67b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010b67e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b685:	eb 3a                	jmp    f010b6c1 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010b687:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b68a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b691:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b694:	01 d0                	add    %edx,%eax
f010b696:	8b 00                	mov    (%eax),%eax
f010b698:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f010b69b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b69e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b6a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b6a8:	01 d0                	add    %edx,%eax
f010b6aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010b6b0:	83 ec 0c             	sub    $0xc,%esp
f010b6b3:	ff 75 e4             	pushl  -0x1c(%ebp)
f010b6b6:	e8 eb f9 ff ff       	call   f010b0a6 <free_disk_frame>
f010b6bb:	83 c4 10             	add    $0x10,%esp
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010b6be:	ff 45 f0             	incl   -0x10(%ebp)
f010b6c1:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010b6c8:	76 bd                	jbe    f010b687 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010b6ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6cd:	8b 40 64             	mov    0x64(%eax),%eax
f010b6d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6d3:	c1 e2 02             	shl    $0x2,%edx
f010b6d6:	01 d0                	add    %edx,%eax
f010b6d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(USE_KHEAP)
		{
			kfree(pt);
f010b6de:	83 ec 0c             	sub    $0xc,%esp
f010b6e1:	ff 75 e8             	pushl  -0x18(%ebp)
f010b6e4:	e8 ce 07 00 00       	call   f010beb7 <kfree>
f010b6e9:	83 c4 10             	add    $0x10,%esp
f010b6ec:	eb 01                	jmp    f010b6ef <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010b6ee:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b6ef:	ff 45 f4             	incl   -0xc(%ebp)
f010b6f2:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010b6f9:	0f 86 3b ff ff ff    	jbe    f010b63a <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_pgdir);
f010b6ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010b702:	8b 40 64             	mov    0x64(%eax),%eax
f010b705:	83 ec 0c             	sub    $0xc,%esp
f010b708:	50                   	push   %eax
f010b709:	e8 a9 07 00 00       	call   f010beb7 <kfree>
f010b70e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
	ptr_env->disk_env_pgdir = 0;
f010b711:	8b 45 08             	mov    0x8(%ebp),%eax
f010b714:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010b71b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b71e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010b725:	8b 45 08             	mov    0x8(%ebp),%eax
f010b728:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b72b:	85 c0                	test   %eax,%eax
f010b72d:	74 36                	je     f010b765 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010b72f:	83 ec 0c             	sub    $0xc,%esp
f010b732:	ff 75 08             	pushl  0x8(%ebp)
f010b735:	e8 05 03 00 00       	call   f010ba3f <__pf_remove_env_all_tables>
f010b73a:	83 c4 10             	add    $0x10,%esp


	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_tabledir);
f010b73d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b740:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b743:	83 ec 0c             	sub    $0xc,%esp
f010b746:	50                   	push   %eax
f010b747:	e8 6b 07 00 00       	call   f010beb7 <kfree>
f010b74c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
f010b74f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b752:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010b759:	8b 45 08             	mov    0x8(%ebp),%eax
f010b75c:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010b763:	eb 01                	jmp    f010b766 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010b765:	90                   	nop
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010b766:	c9                   	leave  
f010b767:	c3                   	ret    

f010b768 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010b768:	55                   	push   %ebp
f010b769:	89 e5                	mov    %esp,%ebp
f010b76b:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010b76e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b771:	8b 50 64             	mov    0x64(%eax),%edx
f010b774:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b777:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010b779:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b77c:	8b 00                	mov    (%eax),%eax
f010b77e:	85 c0                	test   %eax,%eax
f010b780:	75 58                	jne    f010b7da <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f010b782:	83 ec 0c             	sub    $0xc,%esp
f010b785:	68 00 10 00 00       	push   $0x1000
f010b78a:	e8 97 06 00 00       	call   f010be26 <kmalloc>
f010b78f:	83 c4 10             	add    $0x10,%esp
f010b792:	89 c2                	mov    %eax,%edx
f010b794:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b797:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f010b799:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b79c:	8b 00                	mov    (%eax),%eax
f010b79e:	85 c0                	test   %eax,%eax
f010b7a0:	75 07                	jne    f010b7a9 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f010b7a2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b7a7:	eb 36                	jmp    f010b7df <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f010b7a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b7ac:	8b 00                	mov    (%eax),%eax
f010b7ae:	83 ec 0c             	sub    $0xc,%esp
f010b7b1:	50                   	push   %eax
f010b7b2:	e8 9f 09 00 00       	call   f010c156 <kheap_physical_address>
f010b7b7:	83 c4 10             	add    $0x10,%esp
f010b7ba:	89 c2                	mov    %eax,%edx
f010b7bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7bf:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010b7c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b7c5:	8b 00                	mov    (%eax),%eax
f010b7c7:	83 ec 04             	sub    $0x4,%esp
f010b7ca:	68 00 10 00 00       	push   $0x1000
f010b7cf:	6a 00                	push   $0x0
f010b7d1:	50                   	push   %eax
f010b7d2:	e8 20 be 00 00       	call   f01175f7 <memset>
f010b7d7:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010b7da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b7df:	c9                   	leave  
f010b7e0:	c3                   	ret    

f010b7e1 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010b7e1:	55                   	push   %ebp
f010b7e2:	89 e5                	mov    %esp,%ebp
f010b7e4:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010b7e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010b7ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b7f5:	eb 78                	jmp    f010b86f <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010b7f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7fa:	8b 40 64             	mov    0x64(%eax),%eax
f010b7fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b800:	c1 e2 02             	shl    $0x2,%edx
f010b803:	01 d0                	add    %edx,%eax
f010b805:	8b 00                	mov    (%eax),%eax
f010b807:	83 e0 01             	and    $0x1,%eax
f010b80a:	85 c0                	test   %eax,%eax
f010b80c:	74 5d                	je     f010b86b <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010b80e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b811:	8b 40 64             	mov    0x64(%eax),%eax
f010b814:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b817:	c1 e2 02             	shl    $0x2,%edx
f010b81a:	01 d0                	add    %edx,%eax
f010b81c:	8b 00                	mov    (%eax),%eax
f010b81e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b823:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010b826:	83 ec 0c             	sub    $0xc,%esp
f010b829:	ff 75 e8             	pushl  -0x18(%ebp)
f010b82c:	e8 04 09 00 00       	call   f010c135 <kheap_virtual_address>
f010b831:	83 c4 10             	add    $0x10,%esp
f010b834:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010b837:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010b83e:	eb 20                	jmp    f010b860 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010b840:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b843:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b84a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b84d:	01 d0                	add    %edx,%eax
f010b84f:	8b 00                	mov    (%eax),%eax
f010b851:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f010b854:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010b858:	74 03                	je     f010b85d <pf_calculate_allocated_pages+0x7c>
				counter ++;
f010b85a:	ff 45 f0             	incl   -0x10(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010b85d:	ff 45 ec             	incl   -0x14(%ebp)
f010b860:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010b867:	76 d7                	jbe    f010b840 <pf_calculate_allocated_pages+0x5f>
f010b869:	eb 01                	jmp    f010b86c <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010b86b:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010b86c:	ff 45 f4             	incl   -0xc(%ebp)
f010b86f:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010b876:	0f 86 7b ff ff ff    	jbe    f010b7f7 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010b87c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b87f:	c9                   	leave  
f010b880:	c3                   	ret    

f010b881 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010b881:	55                   	push   %ebp
f010b882:	89 e5                	mov    %esp,%ebp
f010b884:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010b887:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010b88e:	a1 f0 16 55 f0       	mov    0xf05516f0,%eax
f010b893:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b896:	eb 0b                	jmp    f010b8a3 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010b898:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010b89b:	a1 f8 16 55 f0       	mov    0xf05516f8,%eax
f010b8a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b8a3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b8a7:	74 07                	je     f010b8b0 <pf_calculate_free_frames+0x2f>
f010b8a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b8ac:	8b 00                	mov    (%eax),%eax
f010b8ae:	eb 05                	jmp    f010b8b5 <pf_calculate_free_frames+0x34>
f010b8b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010b8b5:	a3 f8 16 55 f0       	mov    %eax,0xf05516f8
f010b8ba:	a1 f8 16 55 f0       	mov    0xf05516f8,%eax
f010b8bf:	85 c0                	test   %eax,%eax
f010b8c1:	75 d5                	jne    f010b898 <pf_calculate_free_frames+0x17>
f010b8c3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b8c7:	75 cf                	jne    f010b898 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010b8c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010b8cc:	c9                   	leave  
f010b8cd:	c3                   	ret    

f010b8ce <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010b8ce:	55                   	push   %ebp
f010b8cf:	89 e5                	mov    %esp,%ebp
f010b8d1:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010b8d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8d7:	8b 50 6c             	mov    0x6c(%eax),%edx
f010b8da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b8dd:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010b8df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b8e2:	8b 00                	mov    (%eax),%eax
f010b8e4:	85 c0                	test   %eax,%eax
f010b8e6:	75 58                	jne    f010b940 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f010b8e8:	83 ec 0c             	sub    $0xc,%esp
f010b8eb:	68 00 10 00 00       	push   $0x1000
f010b8f0:	e8 31 05 00 00       	call   f010be26 <kmalloc>
f010b8f5:	83 c4 10             	add    $0x10,%esp
f010b8f8:	89 c2                	mov    %eax,%edx
f010b8fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b8fd:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f010b8ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b902:	8b 00                	mov    (%eax),%eax
f010b904:	85 c0                	test   %eax,%eax
f010b906:	75 07                	jne    f010b90f <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f010b908:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b90d:	eb 36                	jmp    f010b945 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f010b90f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b912:	8b 00                	mov    (%eax),%eax
f010b914:	83 ec 0c             	sub    $0xc,%esp
f010b917:	50                   	push   %eax
f010b918:	e8 39 08 00 00       	call   f010c156 <kheap_physical_address>
f010b91d:	83 c4 10             	add    $0x10,%esp
f010b920:	89 c2                	mov    %eax,%edx
f010b922:	8b 45 08             	mov    0x8(%ebp),%eax
f010b925:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010b928:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b92b:	8b 00                	mov    (%eax),%eax
f010b92d:	83 ec 04             	sub    $0x4,%esp
f010b930:	68 00 10 00 00       	push   $0x1000
f010b935:	6a 00                	push   $0x0
f010b937:	50                   	push   %eax
f010b938:	e8 ba bc 00 00       	call   f01175f7 <memset>
f010b93d:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010b940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b945:	c9                   	leave  
f010b946:	c3                   	ret    

f010b947 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010b947:	55                   	push   %ebp
f010b948:	89 e5                	mov    %esp,%ebp
f010b94a:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010b94d:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b954:	76 19                	jbe    f010b96f <__pf_write_env_table+0x28>
f010b956:	68 58 b0 11 f0       	push   $0xf011b058
f010b95b:	68 7e b0 11 f0       	push   $0xf011b07e
f010b960:	68 3d 02 00 00       	push   $0x23d
f010b965:	68 13 b0 11 f0       	push   $0xf011b013
f010b96a:	e8 07 48 ff ff       	call   f0100176 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010b96f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b972:	83 c0 6c             	add    $0x6c,%eax
f010b975:	83 ec 08             	sub    $0x8,%esp
f010b978:	50                   	push   %eax
f010b979:	ff 75 08             	pushl  0x8(%ebp)
f010b97c:	e8 4d ff ff ff       	call   f010b8ce <get_disk_table_directory>
f010b981:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010b984:	8b 45 08             	mov    0x8(%ebp),%eax
f010b987:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b98a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b98d:	c1 ea 16             	shr    $0x16,%edx
f010b990:	c1 e2 02             	shl    $0x2,%edx
f010b993:	01 d0                	add    %edx,%eax
f010b995:	8b 00                	mov    (%eax),%eax
f010b997:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010b99a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b99d:	85 c0                	test   %eax,%eax
f010b99f:	75 31                	jne    f010b9d2 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b9a1:	83 ec 0c             	sub    $0xc,%esp
f010b9a4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b9a7:	50                   	push   %eax
f010b9a8:	e8 4c f6 ff ff       	call   f010aff9 <allocate_disk_frame>
f010b9ad:	83 c4 10             	add    $0x10,%esp
f010b9b0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b9b3:	75 07                	jne    f010b9bc <__pf_write_env_table+0x75>
f010b9b5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b9ba:	eb 2e                	jmp    f010b9ea <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010b9bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9bf:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b9c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b9c5:	c1 ea 16             	shr    $0x16,%edx
f010b9c8:	c1 e2 02             	shl    $0x2,%edx
f010b9cb:	01 c2                	add    %eax,%edx
f010b9cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b9d0:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010b9d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b9d5:	83 ec 08             	sub    $0x8,%esp
f010b9d8:	ff 75 10             	pushl  0x10(%ebp)
f010b9db:	50                   	push   %eax
f010b9dc:	e8 97 f4 ff ff       	call   f010ae78 <write_disk_page>
f010b9e1:	83 c4 10             	add    $0x10,%esp
f010b9e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010b9e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b9ea:	c9                   	leave  
f010b9eb:	c3                   	ret    

f010b9ec <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010b9ec:	55                   	push   %ebp
f010b9ed:	89 e5                	mov    %esp,%ebp
f010b9ef:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010b9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9f5:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b9f8:	85 c0                	test   %eax,%eax
f010b9fa:	75 07                	jne    f010ba03 <__pf_read_env_table+0x17>
f010b9fc:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010ba01:	eb 3a                	jmp    f010ba3d <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010ba03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba06:	8b 40 6c             	mov    0x6c(%eax),%eax
f010ba09:	8b 55 0c             	mov    0xc(%ebp),%edx
f010ba0c:	c1 ea 16             	shr    $0x16,%edx
f010ba0f:	c1 e2 02             	shl    $0x2,%edx
f010ba12:	01 d0                	add    %edx,%eax
f010ba14:	8b 00                	mov    (%eax),%eax
f010ba16:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010ba19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ba1d:	75 07                	jne    f010ba26 <__pf_read_env_table+0x3a>
f010ba1f:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010ba24:	eb 17                	jmp    f010ba3d <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010ba26:	83 ec 08             	sub    $0x8,%esp
f010ba29:	ff 75 10             	pushl  0x10(%ebp)
f010ba2c:	ff 75 f4             	pushl  -0xc(%ebp)
f010ba2f:	e8 15 f4 ff ff       	call   f010ae49 <read_disk_page>
f010ba34:	83 c4 10             	add    $0x10,%esp
f010ba37:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010ba3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010ba3d:	c9                   	leave  
f010ba3e:	c3                   	ret    

f010ba3f <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010ba3f:	55                   	push   %ebp
f010ba40:	89 e5                	mov    %esp,%ebp
f010ba42:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010ba45:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba48:	8b 40 6c             	mov    0x6c(%eax),%eax
f010ba4b:	85 c0                	test   %eax,%eax
f010ba4d:	74 49                	je     f010ba98 <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010ba4f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010ba56:	eb 35                	jmp    f010ba8d <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010ba58:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5b:	8b 40 6c             	mov    0x6c(%eax),%eax
f010ba5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ba61:	c1 e2 02             	shl    $0x2,%edx
f010ba64:	01 d0                	add    %edx,%eax
f010ba66:	8b 00                	mov    (%eax),%eax
f010ba68:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010ba6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba6e:	8b 40 6c             	mov    0x6c(%eax),%eax
f010ba71:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ba74:	c1 e2 02             	shl    $0x2,%edx
f010ba77:	01 d0                	add    %edx,%eax
f010ba79:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010ba7f:	ff 75 f8             	pushl  -0x8(%ebp)
f010ba82:	e8 1f f6 ff ff       	call   f010b0a6 <free_disk_frame>
f010ba87:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010ba8a:	ff 45 fc             	incl   -0x4(%ebp)
f010ba8d:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010ba94:	76 c2                	jbe    f010ba58 <__pf_remove_env_all_tables+0x19>
f010ba96:	eb 01                	jmp    f010ba99 <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010ba98:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010ba99:	c9                   	leave  
f010ba9a:	c3                   	ret    

f010ba9b <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010ba9b:	55                   	push   %ebp
f010ba9c:	89 e5                	mov    %esp,%ebp
f010ba9e:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010baa1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010baa5:	75 10                	jne    f010bab7 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010baa7:	83 ec 0c             	sub    $0xc,%esp
f010baaa:	68 94 b0 11 f0       	push   $0xf011b094
f010baaf:	e8 e2 b2 ff ff       	call   f0106d96 <cprintf>
f010bab4:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010bab7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baba:	8b 40 6c             	mov    0x6c(%eax),%eax
f010babd:	85 c0                	test   %eax,%eax
f010babf:	74 3d                	je     f010bafe <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010bac1:	8b 45 08             	mov    0x8(%ebp),%eax
f010bac4:	8b 40 6c             	mov    0x6c(%eax),%eax
f010bac7:	8b 55 0c             	mov    0xc(%ebp),%edx
f010baca:	c1 ea 16             	shr    $0x16,%edx
f010bacd:	c1 e2 02             	shl    $0x2,%edx
f010bad0:	01 d0                	add    %edx,%eax
f010bad2:	8b 00                	mov    (%eax),%eax
f010bad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010bad7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bada:	8b 40 6c             	mov    0x6c(%eax),%eax
f010badd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bae0:	c1 ea 16             	shr    $0x16,%edx
f010bae3:	c1 e2 02             	shl    $0x2,%edx
f010bae6:	01 d0                	add    %edx,%eax
f010bae8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010baee:	83 ec 0c             	sub    $0xc,%esp
f010baf1:	ff 75 f4             	pushl  -0xc(%ebp)
f010baf4:	e8 ad f5 ff ff       	call   f010b0a6 <free_disk_frame>
f010baf9:	83 c4 10             	add    $0x10,%esp
f010bafc:	eb 01                	jmp    f010baff <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010bafe:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010baff:	c9                   	leave  
f010bb00:	c3                   	ret    

f010bb01 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010bb01:	55                   	push   %ebp
f010bb02:	89 e5                	mov    %esp,%ebp
f010bb04:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010bb07:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010bb0e:	eb 1f                	jmp    f010bb2f <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010bb10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb13:	83 ec 04             	sub    $0x4,%esp
f010bb16:	6a 08                	push   $0x8
f010bb18:	ff 75 08             	pushl  0x8(%ebp)
f010bb1b:	50                   	push   %eax
f010bb1c:	e8 7b c1 00 00       	call   f0117c9c <ide_write>
f010bb21:	83 c4 10             	add    $0x10,%esp
f010bb24:	85 c0                	test   %eax,%eax
f010bb26:	75 12                	jne    f010bb3a <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010bb28:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010bb2f:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010bb36:	7e d8                	jle    f010bb10 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010bb38:	eb 01                	jmp    f010bb3b <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010bb3a:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010bb3b:	90                   	nop
f010bb3c:	c9                   	leave  
f010bb3d:	c3                   	ret    

f010bb3e <nextFitAlgo>:

int x=-1, y=-1;
int fIDX=0, looping=0;
int IDX=1, kmallocBEGIN=1, freeBEGIN=1;

uint32 *nextFitAlgo(unsigned int Size) {
f010bb3e:	55                   	push   %ebp
f010bb3f:	89 e5                	mov    %esp,%ebp
f010bb41:	83 ec 18             	sub    $0x18,%esp
	while(kHeapArr[fIDX].allocated || (kHeapArr[fIDX].pages < Size)) {
f010bb44:	eb 58                	jmp    f010bb9e <nextFitAlgo+0x60>
		fIDX = kHeapArr[fIDX].last;
f010bb46:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bb4c:	89 d0                	mov    %edx,%eax
f010bb4e:	c1 e0 02             	shl    $0x2,%eax
f010bb51:	01 d0                	add    %edx,%eax
f010bb53:	c1 e0 02             	shl    $0x2,%eax
f010bb56:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bb5b:	8b 00                	mov    (%eax),%eax
f010bb5d:	a3 08 32 53 f0       	mov    %eax,0xf0533208
		if(fIDX == -1) {
f010bb62:	a1 08 32 53 f0       	mov    0xf0533208,%eax
f010bb67:	83 f8 ff             	cmp    $0xffffffff,%eax
f010bb6a:	75 32                	jne    f010bb9e <nextFitAlgo+0x60>
			if(isKHeapPlacementStrategyNEXTFIT() && !looping) {
f010bb6c:	e8 40 98 ff ff       	call   f01053b1 <isKHeapPlacementStrategyNEXTFIT>
f010bb71:	85 c0                	test   %eax,%eax
f010bb73:	74 1f                	je     f010bb94 <nextFitAlgo+0x56>
f010bb75:	a1 0c 32 53 f0       	mov    0xf053320c,%eax
f010bb7a:	85 c0                	test   %eax,%eax
f010bb7c:	75 16                	jne    f010bb94 <nextFitAlgo+0x56>
				looping = 1;
f010bb7e:	c7 05 0c 32 53 f0 01 	movl   $0x1,0xf053320c
f010bb85:	00 00 00 
				fIDX = 0;
f010bb88:	c7 05 08 32 53 f0 00 	movl   $0x0,0xf0533208
f010bb8f:	00 00 00 
f010bb92:	eb 0a                	jmp    f010bb9e <nextFitAlgo+0x60>
			}
			else return NULL;
f010bb94:	b8 00 00 00 00       	mov    $0x0,%eax
f010bb99:	e9 86 02 00 00       	jmp    f010be24 <nextFitAlgo+0x2e6>
int x=-1, y=-1;
int fIDX=0, looping=0;
int IDX=1, kmallocBEGIN=1, freeBEGIN=1;

uint32 *nextFitAlgo(unsigned int Size) {
	while(kHeapArr[fIDX].allocated || (kHeapArr[fIDX].pages < Size)) {
f010bb9e:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bba4:	89 d0                	mov    %edx,%eax
f010bba6:	c1 e0 02             	shl    $0x2,%eax
f010bba9:	01 d0                	add    %edx,%eax
f010bbab:	c1 e0 02             	shl    $0x2,%eax
f010bbae:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010bbb3:	8a 00                	mov    (%eax),%al
f010bbb5:	84 c0                	test   %al,%al
f010bbb7:	75 8d                	jne    f010bb46 <nextFitAlgo+0x8>
f010bbb9:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bbbf:	89 d0                	mov    %edx,%eax
f010bbc1:	c1 e0 02             	shl    $0x2,%eax
f010bbc4:	01 d0                	add    %edx,%eax
f010bbc6:	c1 e0 02             	shl    $0x2,%eax
f010bbc9:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bbce:	8b 00                	mov    (%eax),%eax
f010bbd0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bbd3:	0f 82 6d ff ff ff    	jb     f010bb46 <nextFitAlgo+0x8>
			}
			else return NULL;
		}
	}

	if(kHeapArr[fIDX].pages != Size) {
f010bbd9:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bbdf:	89 d0                	mov    %edx,%eax
f010bbe1:	c1 e0 02             	shl    $0x2,%eax
f010bbe4:	01 d0                	add    %edx,%eax
f010bbe6:	c1 e0 02             	shl    $0x2,%eax
f010bbe9:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bbee:	8b 00                	mov    (%eax),%eax
f010bbf0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bbf3:	0f 84 85 01 00 00    	je     f010bd7e <nextFitAlgo+0x240>
		int lIDX;
		if(x != -1) {
f010bbf9:	a1 28 ea 14 f0       	mov    0xf014ea28,%eax
f010bbfe:	83 f8 ff             	cmp    $0xffffffff,%eax
f010bc01:	74 14                	je     f010bc17 <nextFitAlgo+0xd9>
			lIDX = x;
f010bc03:	a1 28 ea 14 f0       	mov    0xf014ea28,%eax
f010bc08:	89 45 f4             	mov    %eax,-0xc(%ebp)
			x = -1;
f010bc0b:	c7 05 28 ea 14 f0 ff 	movl   $0xffffffff,0xf014ea28
f010bc12:	ff ff ff 
f010bc15:	eb 31                	jmp    f010bc48 <nextFitAlgo+0x10a>
		} else if(y != -1) {
f010bc17:	a1 2c ea 14 f0       	mov    0xf014ea2c,%eax
f010bc1c:	83 f8 ff             	cmp    $0xffffffff,%eax
f010bc1f:	74 14                	je     f010bc35 <nextFitAlgo+0xf7>
			lIDX = y;
f010bc21:	a1 2c ea 14 f0       	mov    0xf014ea2c,%eax
f010bc26:	89 45 f4             	mov    %eax,-0xc(%ebp)
			y = -1;
f010bc29:	c7 05 2c ea 14 f0 ff 	movl   $0xffffffff,0xf014ea2c
f010bc30:	ff ff ff 
f010bc33:	eb 13                	jmp    f010bc48 <nextFitAlgo+0x10a>
		} else {
			lIDX = IDX;
f010bc35:	a1 30 ea 14 f0       	mov    0xf014ea30,%eax
f010bc3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
			IDX++;
f010bc3d:	a1 30 ea 14 f0       	mov    0xf014ea30,%eax
f010bc42:	40                   	inc    %eax
f010bc43:	a3 30 ea 14 f0       	mov    %eax,0xf014ea30
		}

		kHeapArr[lIDX].last = kHeapArr[fIDX].last;
f010bc48:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bc4e:	89 d0                	mov    %edx,%eax
f010bc50:	c1 e0 02             	shl    $0x2,%eax
f010bc53:	01 d0                	add    %edx,%eax
f010bc55:	c1 e0 02             	shl    $0x2,%eax
f010bc58:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bc5d:	8b 10                	mov    (%eax),%edx
f010bc5f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010bc62:	89 c8                	mov    %ecx,%eax
f010bc64:	c1 e0 02             	shl    $0x2,%eax
f010bc67:	01 c8                	add    %ecx,%eax
f010bc69:	c1 e0 02             	shl    $0x2,%eax
f010bc6c:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bc71:	89 10                	mov    %edx,(%eax)

		if(kHeapArr[lIDX].last != -1)
f010bc73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc76:	89 d0                	mov    %edx,%eax
f010bc78:	c1 e0 02             	shl    $0x2,%eax
f010bc7b:	01 d0                	add    %edx,%eax
f010bc7d:	c1 e0 02             	shl    $0x2,%eax
f010bc80:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bc85:	8b 00                	mov    (%eax),%eax
f010bc87:	83 f8 ff             	cmp    $0xffffffff,%eax
f010bc8a:	74 29                	je     f010bcb5 <nextFitAlgo+0x177>
			kHeapArr[kHeapArr[lIDX].last].first = lIDX;
f010bc8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc8f:	89 d0                	mov    %edx,%eax
f010bc91:	c1 e0 02             	shl    $0x2,%eax
f010bc94:	01 d0                	add    %edx,%eax
f010bc96:	c1 e0 02             	shl    $0x2,%eax
f010bc99:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bc9e:	8b 10                	mov    (%eax),%edx
f010bca0:	89 d0                	mov    %edx,%eax
f010bca2:	c1 e0 02             	shl    $0x2,%eax
f010bca5:	01 d0                	add    %edx,%eax
f010bca7:	c1 e0 02             	shl    $0x2,%eax
f010bcaa:	8d 90 08 17 55 f0    	lea    -0xfaae8f8(%eax),%edx
f010bcb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bcb3:	89 02                	mov    %eax,(%edx)

		kHeapArr[lIDX].first = fIDX;
f010bcb5:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bcbb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010bcbe:	89 c8                	mov    %ecx,%eax
f010bcc0:	c1 e0 02             	shl    $0x2,%eax
f010bcc3:	01 c8                	add    %ecx,%eax
f010bcc5:	c1 e0 02             	shl    $0x2,%eax
f010bcc8:	05 08 17 55 f0       	add    $0xf0551708,%eax
f010bccd:	89 10                	mov    %edx,(%eax)
		kHeapArr[fIDX].last = lIDX;
f010bccf:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bcd5:	89 d0                	mov    %edx,%eax
f010bcd7:	c1 e0 02             	shl    $0x2,%eax
f010bcda:	01 d0                	add    %edx,%eax
f010bcdc:	c1 e0 02             	shl    $0x2,%eax
f010bcdf:	8d 90 0c 17 55 f0    	lea    -0xfaae8f4(%eax),%edx
f010bce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bce8:	89 02                	mov    %eax,(%edx)

		kHeapArr[lIDX].allocated = 0;
f010bcea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bced:	89 d0                	mov    %edx,%eax
f010bcef:	c1 e0 02             	shl    $0x2,%eax
f010bcf2:	01 d0                	add    %edx,%eax
f010bcf4:	c1 e0 02             	shl    $0x2,%eax
f010bcf7:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010bcfc:	c6 00 00             	movb   $0x0,(%eax)
		kHeapArr[lIDX].pages = kHeapArr[fIDX].pages - Size;
f010bcff:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bd05:	89 d0                	mov    %edx,%eax
f010bd07:	c1 e0 02             	shl    $0x2,%eax
f010bd0a:	01 d0                	add    %edx,%eax
f010bd0c:	c1 e0 02             	shl    $0x2,%eax
f010bd0f:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bd14:	8b 00                	mov    (%eax),%eax
f010bd16:	2b 45 08             	sub    0x8(%ebp),%eax
f010bd19:	89 c2                	mov    %eax,%edx
f010bd1b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010bd1e:	89 c8                	mov    %ecx,%eax
f010bd20:	c1 e0 02             	shl    $0x2,%eax
f010bd23:	01 c8                	add    %ecx,%eax
f010bd25:	c1 e0 02             	shl    $0x2,%eax
f010bd28:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bd2d:	89 10                	mov    %edx,(%eax)
		kHeapArr[lIDX].starter = kHeapArr[fIDX].starter + (Size*PAGE_SIZE);
f010bd2f:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bd35:	89 d0                	mov    %edx,%eax
f010bd37:	c1 e0 02             	shl    $0x2,%eax
f010bd3a:	01 d0                	add    %edx,%eax
f010bd3c:	c1 e0 02             	shl    $0x2,%eax
f010bd3f:	05 00 17 55 f0       	add    $0xf0551700,%eax
f010bd44:	8b 00                	mov    (%eax),%eax
f010bd46:	8b 55 08             	mov    0x8(%ebp),%edx
f010bd49:	c1 e2 0c             	shl    $0xc,%edx
f010bd4c:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
f010bd4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bd52:	89 d0                	mov    %edx,%eax
f010bd54:	c1 e0 02             	shl    $0x2,%eax
f010bd57:	01 d0                	add    %edx,%eax
f010bd59:	c1 e0 02             	shl    $0x2,%eax
f010bd5c:	05 00 17 55 f0       	add    $0xf0551700,%eax
f010bd61:	89 08                	mov    %ecx,(%eax)

		kHeapArr[fIDX].pages = Size;
f010bd63:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bd69:	89 d0                	mov    %edx,%eax
f010bd6b:	c1 e0 02             	shl    $0x2,%eax
f010bd6e:	01 d0                	add    %edx,%eax
f010bd70:	c1 e0 02             	shl    $0x2,%eax
f010bd73:	8d 90 04 17 55 f0    	lea    -0xfaae8fc(%eax),%edx
f010bd79:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd7c:	89 02                	mov    %eax,(%edx)
	}

	kHeapArr[fIDX].allocated = 1;
f010bd7e:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bd84:	89 d0                	mov    %edx,%eax
f010bd86:	c1 e0 02             	shl    $0x2,%eax
f010bd89:	01 d0                	add    %edx,%eax
f010bd8b:	c1 e0 02             	shl    $0x2,%eax
f010bd8e:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010bd93:	c6 00 01             	movb   $0x1,(%eax)
	uint32 ptrVA = kHeapArr[fIDX].starter;
f010bd96:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010bd9c:	89 d0                	mov    %edx,%eax
f010bd9e:	c1 e0 02             	shl    $0x2,%eax
f010bda1:	01 d0                	add    %edx,%eax
f010bda3:	c1 e0 02             	shl    $0x2,%eax
f010bda6:	05 00 17 55 f0       	add    $0xf0551700,%eax
f010bdab:	8b 00                	mov    (%eax),%eax
f010bdad:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(int i=0; i<Size; i++) {
f010bdb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010bdb7:	eb 42                	jmp    f010bdfb <nextFitAlgo+0x2bd>
		struct Frame_Info* framePTR;
		if(allocate_frame(&framePTR) != E_NO_MEM) {
f010bdb9:	83 ec 0c             	sub    $0xc,%esp
f010bdbc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010bdbf:	50                   	push   %eax
f010bdc0:	e8 d1 7b ff ff       	call   f0103996 <allocate_frame>
f010bdc5:	83 c4 10             	add    $0x10,%esp
f010bdc8:	83 f8 fc             	cmp    $0xfffffffc,%eax
f010bdcb:	74 24                	je     f010bdf1 <nextFitAlgo+0x2b3>
			map_frame(ptr_page_directory, framePTR, (void*)ptrVA, PERM_WRITEABLE|PERM_AVAILABLE);
f010bdcd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010bdd0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bdd3:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010bdd8:	68 02 0e 00 00       	push   $0xe02
f010bddd:	51                   	push   %ecx
f010bdde:	52                   	push   %edx
f010bddf:	50                   	push   %eax
f010bde0:	e8 25 7f ff ff       	call   f0103d0a <map_frame>
f010bde5:	83 c4 10             	add    $0x10,%esp
			framePTR->va = ptrVA;
f010bde8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bdeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010bdee:	89 50 0c             	mov    %edx,0xc(%eax)
		}
		ptrVA += PAGE_SIZE;
f010bdf1:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	}

	kHeapArr[fIDX].allocated = 1;
	uint32 ptrVA = kHeapArr[fIDX].starter;

	for(int i=0; i<Size; i++) {
f010bdf8:	ff 45 ec             	incl   -0x14(%ebp)
f010bdfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bdfe:	3b 45 08             	cmp    0x8(%ebp),%eax
f010be01:	72 b6                	jb     f010bdb9 <nextFitAlgo+0x27b>
			map_frame(ptr_page_directory, framePTR, (void*)ptrVA, PERM_WRITEABLE|PERM_AVAILABLE);
			framePTR->va = ptrVA;
		}
		ptrVA += PAGE_SIZE;
	}
	looping = 0;
f010be03:	c7 05 0c 32 53 f0 00 	movl   $0x0,0xf053320c
f010be0a:	00 00 00 

	return (void*)kHeapArr[fIDX].starter;
f010be0d:	8b 15 08 32 53 f0    	mov    0xf0533208,%edx
f010be13:	89 d0                	mov    %edx,%eax
f010be15:	c1 e0 02             	shl    $0x2,%eax
f010be18:	01 d0                	add    %edx,%eax
f010be1a:	c1 e0 02             	shl    $0x2,%eax
f010be1d:	05 00 17 55 f0       	add    $0xf0551700,%eax
f010be22:	8b 00                	mov    (%eax),%eax
}
f010be24:	c9                   	leave  
f010be25:	c3                   	ret    

f010be26 <kmalloc>:

void* kmalloc(unsigned int size) {
f010be26:	55                   	push   %ebp
f010be27:	89 e5                	mov    %esp,%ebp
f010be29:	83 ec 18             	sub    $0x18,%esp
	// use "isKHeapPlacementStrategyBESTFIT() ..."
	// and "isKHeapPlacementStrategyNEXTFIT() ..."
	//functions to check the current strategy
	//change this "return" according to your answer

	if(kmallocBEGIN) {
f010be2c:	a1 34 ea 14 f0       	mov    0xf014ea34,%eax
f010be31:	85 c0                	test   %eax,%eax
f010be33:	74 39                	je     f010be6e <kmalloc+0x48>
		kHeapArr[0].starter = KERNEL_HEAP_START;
f010be35:	c7 05 00 17 55 f0 00 	movl   $0xf6000000,0xf0551700
f010be3c:	00 00 f6 
		kHeapArr[0].pages = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f010be3f:	c7 05 04 17 55 f0 ff 	movl   $0x9fff,0xf0551704
f010be46:	9f 00 00 
		kHeapArr[0].first = kHeapArr[0].last = -1;
f010be49:	c7 05 0c 17 55 f0 ff 	movl   $0xffffffff,0xf055170c
f010be50:	ff ff ff 
f010be53:	a1 0c 17 55 f0       	mov    0xf055170c,%eax
f010be58:	a3 08 17 55 f0       	mov    %eax,0xf0551708
		kHeapArr[0].allocated = 0;
f010be5d:	c6 05 10 17 55 f0 00 	movb   $0x0,0xf0551710
		kmallocBEGIN = 0;
f010be64:	c7 05 34 ea 14 f0 00 	movl   $0x0,0xf014ea34
f010be6b:	00 00 00 
	}

	if(isKHeapPlacementStrategyNEXTFIT()) {
f010be6e:	e8 3e 95 ff ff       	call   f01053b1 <isKHeapPlacementStrategyNEXTFIT>
f010be73:	85 c0                	test   %eax,%eax
f010be75:	74 34                	je     f010beab <kmalloc+0x85>
		return nextFitAlgo(ROUNDUP(size, PAGE_SIZE)/PAGE_SIZE);
f010be77:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010be7e:	8b 55 08             	mov    0x8(%ebp),%edx
f010be81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be84:	01 d0                	add    %edx,%eax
f010be86:	48                   	dec    %eax
f010be87:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010be8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010be8d:	ba 00 00 00 00       	mov    $0x0,%edx
f010be92:	f7 75 f4             	divl   -0xc(%ebp)
f010be95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010be98:	29 d0                	sub    %edx,%eax
f010be9a:	c1 e8 0c             	shr    $0xc,%eax
f010be9d:	83 ec 0c             	sub    $0xc,%esp
f010bea0:	50                   	push   %eax
f010bea1:	e8 98 fc ff ff       	call   f010bb3e <nextFitAlgo>
f010bea6:	83 c4 10             	add    $0x10,%esp
f010bea9:	eb 0a                	jmp    f010beb5 <kmalloc+0x8f>
	}

	if(isKHeapPlacementStrategyBESTFIT()) {
f010beab:	e8 e6 94 ff ff       	call   f0105396 <isKHeapPlacementStrategyBESTFIT>
		// --->>> BONUS -->> BEST FIT -> HERE
	}

	return NULL;
f010beb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010beb5:	c9                   	leave  
f010beb6:	c3                   	ret    

f010beb7 <kfree>:

void kfree(void* virtual_address) {
f010beb7:	55                   	push   %ebp
f010beb8:	89 e5                	mov    %esp,%ebp
f010beba:	83 ec 28             	sub    $0x28,%esp
	//panic("kfree() is not implemented yet...!!");

	//you need to get the size of the given allocation using its address
	//refer to the project presentation and documentation for details

	if(freeBEGIN) {
f010bebd:	a1 38 ea 14 f0       	mov    0xf014ea38,%eax
f010bec2:	85 c0                	test   %eax,%eax
f010bec4:	74 14                	je     f010beda <kfree+0x23>
		fIDX = 0;
f010bec6:	c7 05 08 32 53 f0 00 	movl   $0x0,0xf0533208
f010becd:	00 00 00 
		freeBEGIN = 0;
f010bed0:	c7 05 38 ea 14 f0 00 	movl   $0x0,0xf014ea38
f010bed7:	00 00 00 
	}

	int idx = 0;
f010beda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	while(idx != -1) {
f010bee1:	eb 3c                	jmp    f010bf1f <kfree+0x68>
		if(kHeapArr[idx].starter == (uint32) virtual_address) break;
f010bee3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bee6:	89 d0                	mov    %edx,%eax
f010bee8:	c1 e0 02             	shl    $0x2,%eax
f010beeb:	01 d0                	add    %edx,%eax
f010beed:	c1 e0 02             	shl    $0x2,%eax
f010bef0:	05 00 17 55 f0       	add    $0xf0551700,%eax
f010bef5:	8b 10                	mov    (%eax),%edx
f010bef7:	8b 45 08             	mov    0x8(%ebp),%eax
f010befa:	39 c2                	cmp    %eax,%edx
f010befc:	74 29                	je     f010bf27 <kfree+0x70>
		idx = kHeapArr[idx].last;
f010befe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf01:	89 d0                	mov    %edx,%eax
f010bf03:	c1 e0 02             	shl    $0x2,%eax
f010bf06:	01 d0                	add    %edx,%eax
f010bf08:	c1 e0 02             	shl    $0x2,%eax
f010bf0b:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bf10:	8b 00                	mov    (%eax),%eax
f010bf12:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(idx == -1) return;
f010bf15:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010bf19:	0f 84 13 02 00 00    	je     f010c132 <kfree+0x27b>
		fIDX = 0;
		freeBEGIN = 0;
	}

	int idx = 0;
	while(idx != -1) {
f010bf1f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010bf23:	75 be                	jne    f010bee3 <kfree+0x2c>
f010bf25:	eb 01                	jmp    f010bf28 <kfree+0x71>
		if(kHeapArr[idx].starter == (uint32) virtual_address) break;
f010bf27:	90                   	nop
		idx = kHeapArr[idx].last;
		if(idx == -1) return;
	}

	kHeapArr[idx].allocated = 0;
f010bf28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf2b:	89 d0                	mov    %edx,%eax
f010bf2d:	c1 e0 02             	shl    $0x2,%eax
f010bf30:	01 d0                	add    %edx,%eax
f010bf32:	c1 e0 02             	shl    $0x2,%eax
f010bf35:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010bf3a:	c6 00 00             	movb   $0x0,(%eax)
	uint32 pages = kHeapArr[idx].pages;
f010bf3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf40:	89 d0                	mov    %edx,%eax
f010bf42:	c1 e0 02             	shl    $0x2,%eax
f010bf45:	01 d0                	add    %edx,%eax
f010bf47:	c1 e0 02             	shl    $0x2,%eax
f010bf4a:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bf4f:	8b 00                	mov    (%eax),%eax
f010bf51:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(!isKHeapPlacementStrategyCONTALLOC()) {
f010bf54:	e8 08 94 ff ff       	call   f0105361 <isKHeapPlacementStrategyCONTALLOC>
f010bf59:	85 c0                	test   %eax,%eax
f010bf5b:	0f 85 a0 01 00 00    	jne    f010c101 <kfree+0x24a>
		int first = kHeapArr[idx].first;
f010bf61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf64:	89 d0                	mov    %edx,%eax
f010bf66:	c1 e0 02             	shl    $0x2,%eax
f010bf69:	01 d0                	add    %edx,%eax
f010bf6b:	c1 e0 02             	shl    $0x2,%eax
f010bf6e:	05 08 17 55 f0       	add    $0xf0551708,%eax
f010bf73:	8b 00                	mov    (%eax),%eax
f010bf75:	89 45 e8             	mov    %eax,-0x18(%ebp)
		int last = kHeapArr[idx].last;
f010bf78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf7b:	89 d0                	mov    %edx,%eax
f010bf7d:	c1 e0 02             	shl    $0x2,%eax
f010bf80:	01 d0                	add    %edx,%eax
f010bf82:	c1 e0 02             	shl    $0x2,%eax
f010bf85:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010bf8a:	8b 00                	mov    (%eax),%eax
f010bf8c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if(last != -1 && !kHeapArr[last].allocated) {
f010bf8f:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
f010bf93:	0f 84 a2 00 00 00    	je     f010c03b <kfree+0x184>
f010bf99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bf9c:	89 d0                	mov    %edx,%eax
f010bf9e:	c1 e0 02             	shl    $0x2,%eax
f010bfa1:	01 d0                	add    %edx,%eax
f010bfa3:	c1 e0 02             	shl    $0x2,%eax
f010bfa6:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010bfab:	8a 00                	mov    (%eax),%al
f010bfad:	84 c0                	test   %al,%al
f010bfaf:	0f 85 86 00 00 00    	jne    f010c03b <kfree+0x184>
			kHeapArr[idx].pages += kHeapArr[last].pages;
f010bfb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfb8:	89 d0                	mov    %edx,%eax
f010bfba:	c1 e0 02             	shl    $0x2,%eax
f010bfbd:	01 d0                	add    %edx,%eax
f010bfbf:	c1 e0 02             	shl    $0x2,%eax
f010bfc2:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bfc7:	8b 08                	mov    (%eax),%ecx
f010bfc9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bfcc:	89 d0                	mov    %edx,%eax
f010bfce:	c1 e0 02             	shl    $0x2,%eax
f010bfd1:	01 d0                	add    %edx,%eax
f010bfd3:	c1 e0 02             	shl    $0x2,%eax
f010bfd6:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bfdb:	8b 00                	mov    (%eax),%eax
f010bfdd:	01 c1                	add    %eax,%ecx
f010bfdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe2:	89 d0                	mov    %edx,%eax
f010bfe4:	c1 e0 02             	shl    $0x2,%eax
f010bfe7:	01 d0                	add    %edx,%eax
f010bfe9:	c1 e0 02             	shl    $0x2,%eax
f010bfec:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010bff1:	89 08                	mov    %ecx,(%eax)
			kHeapArr[last].first = idx;
f010bff3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bff6:	89 d0                	mov    %edx,%eax
f010bff8:	c1 e0 02             	shl    $0x2,%eax
f010bffb:	01 d0                	add    %edx,%eax
f010bffd:	c1 e0 02             	shl    $0x2,%eax
f010c000:	8d 90 08 17 55 f0    	lea    -0xfaae8f8(%eax),%edx
f010c006:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c009:	89 02                	mov    %eax,(%edx)
			kHeapArr[idx].last = kHeapArr[last].last;
f010c00b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c00e:	89 d0                	mov    %edx,%eax
f010c010:	c1 e0 02             	shl    $0x2,%eax
f010c013:	01 d0                	add    %edx,%eax
f010c015:	c1 e0 02             	shl    $0x2,%eax
f010c018:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010c01d:	8b 10                	mov    (%eax),%edx
f010c01f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010c022:	89 c8                	mov    %ecx,%eax
f010c024:	c1 e0 02             	shl    $0x2,%eax
f010c027:	01 c8                	add    %ecx,%eax
f010c029:	c1 e0 02             	shl    $0x2,%eax
f010c02c:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010c031:	89 10                	mov    %edx,(%eax)
			x = last;
f010c033:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c036:	a3 28 ea 14 f0       	mov    %eax,0xf014ea28
		}

		first = kHeapArr[idx].first;
f010c03b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c03e:	89 d0                	mov    %edx,%eax
f010c040:	c1 e0 02             	shl    $0x2,%eax
f010c043:	01 d0                	add    %edx,%eax
f010c045:	c1 e0 02             	shl    $0x2,%eax
f010c048:	05 08 17 55 f0       	add    $0xf0551708,%eax
f010c04d:	8b 00                	mov    (%eax),%eax
f010c04f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		last = kHeapArr[idx].last;
f010c052:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c055:	89 d0                	mov    %edx,%eax
f010c057:	c1 e0 02             	shl    $0x2,%eax
f010c05a:	01 d0                	add    %edx,%eax
f010c05c:	c1 e0 02             	shl    $0x2,%eax
f010c05f:	05 0c 17 55 f0       	add    $0xf055170c,%eax
f010c064:	8b 00                	mov    (%eax),%eax
f010c066:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if(first != -1 && !kHeapArr[first].allocated) {
f010c069:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
f010c06d:	0f 84 8e 00 00 00    	je     f010c101 <kfree+0x24a>
f010c073:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c076:	89 d0                	mov    %edx,%eax
f010c078:	c1 e0 02             	shl    $0x2,%eax
f010c07b:	01 d0                	add    %edx,%eax
f010c07d:	c1 e0 02             	shl    $0x2,%eax
f010c080:	05 10 17 55 f0       	add    $0xf0551710,%eax
f010c085:	8a 00                	mov    (%eax),%al
f010c087:	84 c0                	test   %al,%al
f010c089:	75 76                	jne    f010c101 <kfree+0x24a>
			kHeapArr[first].pages += kHeapArr[idx].pages;
f010c08b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c08e:	89 d0                	mov    %edx,%eax
f010c090:	c1 e0 02             	shl    $0x2,%eax
f010c093:	01 d0                	add    %edx,%eax
f010c095:	c1 e0 02             	shl    $0x2,%eax
f010c098:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010c09d:	8b 08                	mov    (%eax),%ecx
f010c09f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0a2:	89 d0                	mov    %edx,%eax
f010c0a4:	c1 e0 02             	shl    $0x2,%eax
f010c0a7:	01 d0                	add    %edx,%eax
f010c0a9:	c1 e0 02             	shl    $0x2,%eax
f010c0ac:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010c0b1:	8b 00                	mov    (%eax),%eax
f010c0b3:	01 c1                	add    %eax,%ecx
f010c0b5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c0b8:	89 d0                	mov    %edx,%eax
f010c0ba:	c1 e0 02             	shl    $0x2,%eax
f010c0bd:	01 d0                	add    %edx,%eax
f010c0bf:	c1 e0 02             	shl    $0x2,%eax
f010c0c2:	05 04 17 55 f0       	add    $0xf0551704,%eax
f010c0c7:	89 08                	mov    %ecx,(%eax)
			kHeapArr[last].first = first;
f010c0c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c0cc:	89 d0                	mov    %edx,%eax
f010c0ce:	c1 e0 02             	shl    $0x2,%eax
f010c0d1:	01 d0                	add    %edx,%eax
f010c0d3:	c1 e0 02             	shl    $0x2,%eax
f010c0d6:	8d 90 08 17 55 f0    	lea    -0xfaae8f8(%eax),%edx
f010c0dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c0df:	89 02                	mov    %eax,(%edx)
			kHeapArr[first].last = last;
f010c0e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c0e4:	89 d0                	mov    %edx,%eax
f010c0e6:	c1 e0 02             	shl    $0x2,%eax
f010c0e9:	01 d0                	add    %edx,%eax
f010c0eb:	c1 e0 02             	shl    $0x2,%eax
f010c0ee:	8d 90 0c 17 55 f0    	lea    -0xfaae8f4(%eax),%edx
f010c0f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c0f7:	89 02                	mov    %eax,(%edx)
			y = idx;
f010c0f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0fc:	a3 2c ea 14 f0       	mov    %eax,0xf014ea2c
		}
	}

	for(int i=0; i<pages; i++, virtual_address+=PAGE_SIZE)
f010c101:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c108:	eb 1e                	jmp    f010c128 <kfree+0x271>
		unmap_frame(ptr_page_directory,virtual_address);
f010c10a:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010c10f:	83 ec 08             	sub    $0x8,%esp
f010c112:	ff 75 08             	pushl  0x8(%ebp)
f010c115:	50                   	push   %eax
f010c116:	e8 1e 7d ff ff       	call   f0103e39 <unmap_frame>
f010c11b:	83 c4 10             	add    $0x10,%esp
			kHeapArr[first].last = last;
			y = idx;
		}
	}

	for(int i=0; i<pages; i++, virtual_address+=PAGE_SIZE)
f010c11e:	ff 45 f0             	incl   -0x10(%ebp)
f010c121:	81 45 08 00 10 00 00 	addl   $0x1000,0x8(%ebp)
f010c128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c12b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c12e:	72 da                	jb     f010c10a <kfree+0x253>
f010c130:	eb 01                	jmp    f010c133 <kfree+0x27c>

	int idx = 0;
	while(idx != -1) {
		if(kHeapArr[idx].starter == (uint32) virtual_address) break;
		idx = kHeapArr[idx].last;
		if(idx == -1) return;
f010c132:	90                   	nop
		}
	}

	for(int i=0; i<pages; i++, virtual_address+=PAGE_SIZE)
		unmap_frame(ptr_page_directory,virtual_address);
}
f010c133:	c9                   	leave  
f010c134:	c3                   	ret    

f010c135 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address) {
f010c135:	55                   	push   %ebp
f010c136:	89 e5                	mov    %esp,%ebp
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	return frames_info[physical_address>>12].va;
f010c138:	8b 15 c4 16 55 f0    	mov    0xf05516c4,%edx
f010c13e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c141:	c1 e8 0c             	shr    $0xc,%eax
f010c144:	89 c1                	mov    %eax,%ecx
f010c146:	89 c8                	mov    %ecx,%eax
f010c148:	01 c0                	add    %eax,%eax
f010c14a:	01 c8                	add    %ecx,%eax
f010c14c:	c1 e0 03             	shl    $0x3,%eax
f010c14f:	01 d0                	add    %edx,%eax
f010c151:	8b 40 0c             	mov    0xc(%eax),%eax
}
f010c154:	5d                   	pop    %ebp
f010c155:	c3                   	ret    

f010c156 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address) {
f010c156:	55                   	push   %ebp
f010c157:	89 e5                	mov    %esp,%ebp
f010c159:	83 ec 18             	sub    $0x18,%esp
	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	uint32 *ptPTR = NULL;
f010c15c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(ptr_page_directory,(uint32*)virtual_address, &ptPTR);
f010c163:	8b 55 08             	mov    0x8(%ebp),%edx
f010c166:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010c16b:	83 ec 04             	sub    $0x4,%esp
f010c16e:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010c171:	51                   	push   %ecx
f010c172:	52                   	push   %edx
f010c173:	50                   	push   %eax
f010c174:	e8 9c 79 ff ff       	call   f0103b15 <get_page_table>
f010c179:	83 c4 10             	add    $0x10,%esp
	if(ptPTR != NULL) return (ptPTR[PTX(virtual_address)] & 0xFFFFF000);
f010c17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c17f:	85 c0                	test   %eax,%eax
f010c181:	74 1d                	je     f010c1a0 <kheap_physical_address+0x4a>
f010c183:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c186:	8b 55 08             	mov    0x8(%ebp),%edx
f010c189:	c1 ea 0c             	shr    $0xc,%edx
f010c18c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c192:	c1 e2 02             	shl    $0x2,%edx
f010c195:	01 d0                	add    %edx,%eax
f010c197:	8b 00                	mov    (%eax),%eax
f010c199:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c19e:	eb 05                	jmp    f010c1a5 <kheap_physical_address+0x4f>
	return 0;
f010c1a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c1a5:	c9                   	leave  
f010c1a6:	c3                   	ret    

f010c1a7 <test_kmalloc>:
	char a;
	short b;
	int c;
};
int test_kmalloc()
{
f010c1a7:	55                   	push   %ebp
f010c1a8:	89 e5                	mov    %esp,%ebp
f010c1aa:	57                   	push   %edi
f010c1ab:	53                   	push   %ebx
f010c1ac:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010c1b2:	83 ec 0c             	sub    $0xc,%esp
f010c1b5:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010c1ba:	e8 d7 ab ff ff       	call   f0106d96 <cprintf>
f010c1bf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010c1c2:	83 ec 0c             	sub    $0xc,%esp
f010c1c5:	68 e8 b0 11 f0       	push   $0xf011b0e8
f010c1ca:	e8 c7 ab ff ff       	call   f0106d96 <cprintf>
f010c1cf:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010c1d2:	83 ec 0c             	sub    $0xc,%esp
f010c1d5:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010c1da:	e8 b7 ab ff ff       	call   f0106d96 <cprintf>
f010c1df:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010c1e2:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010c1e6:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010c1ea:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010c1f0:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010c1f6:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010c1fd:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010c204:	e8 b5 e1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c209:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010c20c:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010c212:	b9 14 00 00 00       	mov    $0x14,%ecx
f010c217:	b8 00 00 00 00       	mov    $0x0,%eax
f010c21c:	89 d7                	mov    %edx,%edi
f010c21e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010c220:	e8 99 e1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c225:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010c228:	e8 54 f6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c22d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010c230:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010c237:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c23c:	0f b6 d0             	movzbl %al,%edx
f010c23f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010c242:	01 d0                	add    %edx,%eax
f010c244:	48                   	dec    %eax
f010c245:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010c248:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c24b:	ba 00 00 00 00       	mov    $0x0,%edx
f010c250:	f7 75 d4             	divl   -0x2c(%ebp)
f010c253:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c256:	29 d0                	sub    %edx,%eax
f010c258:	89 c1                	mov    %eax,%ecx
f010c25a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010c261:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c266:	0f b6 c0             	movzbl %al,%eax
f010c269:	c1 e0 04             	shl    $0x4,%eax
f010c26c:	89 c2                	mov    %eax,%edx
f010c26e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010c271:	01 d0                	add    %edx,%eax
f010c273:	48                   	dec    %eax
f010c274:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010c277:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010c27a:	ba 00 00 00 00       	mov    $0x0,%edx
f010c27f:	f7 75 cc             	divl   -0x34(%ebp)
f010c282:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010c285:	29 d0                	sub    %edx,%eax
f010c287:	01 c8                	add    %ecx,%eax
f010c289:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010c28e:	29 c2                	sub    %eax,%edx
f010c290:	89 d0                	mov    %edx,%eax
f010c292:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010c295:	83 ec 0c             	sub    $0xc,%esp
f010c298:	ff 75 c4             	pushl  -0x3c(%ebp)
f010c29b:	e8 86 fb ff ff       	call   f010be26 <kmalloc>
f010c2a0:	83 c4 10             	add    $0x10,%esp
f010c2a3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010c2a9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010c2af:	85 c0                	test   %eax,%eax
f010c2b1:	74 14                	je     f010c2c7 <test_kmalloc+0x120>
f010c2b3:	83 ec 04             	sub    $0x4,%esp
f010c2b6:	68 44 b1 11 f0       	push   $0xf011b144
f010c2bb:	6a 37                	push   $0x37
f010c2bd:	68 76 b1 11 f0       	push   $0xf011b176
f010c2c2:	e8 af 3e ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c2c7:	e8 b5 f5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c2cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c2cf:	74 14                	je     f010c2e5 <test_kmalloc+0x13e>
f010c2d1:	83 ec 04             	sub    $0x4,%esp
f010c2d4:	68 88 b1 11 f0       	push   $0xf011b188
f010c2d9:	6a 38                	push   $0x38
f010c2db:	68 76 b1 11 f0       	push   $0xf011b176
f010c2e0:	e8 91 3e ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c2e5:	e8 d4 e0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c2ea:	89 c2                	mov    %eax,%edx
f010c2ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c2ef:	39 c2                	cmp    %eax,%edx
f010c2f1:	74 14                	je     f010c307 <test_kmalloc+0x160>
f010c2f3:	83 ec 04             	sub    $0x4,%esp
f010c2f6:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c2fb:	6a 39                	push   $0x39
f010c2fd:	68 76 b1 11 f0       	push   $0xf011b176
f010c302:	e8 6f 3e ff ff       	call   f0100176 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010c307:	83 ec 0c             	sub    $0xc,%esp
f010c30a:	68 30 b2 11 f0       	push   $0xf011b230
f010c30f:	e8 82 aa ff ff       	call   f0106d96 <cprintf>
f010c314:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010c317:	e8 a2 e0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c31c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c31f:	e8 5d f5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c324:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010c327:	83 ec 0c             	sub    $0xc,%esp
f010c32a:	68 00 fc 1f 00       	push   $0x1ffc00
f010c32f:	e8 f2 fa ff ff       	call   f010be26 <kmalloc>
f010c334:	83 c4 10             	add    $0x10,%esp
f010c337:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c33d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010c343:	89 c1                	mov    %eax,%ecx
f010c345:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010c34c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c351:	0f b6 d0             	movzbl %al,%edx
f010c354:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010c357:	01 d0                	add    %edx,%eax
f010c359:	48                   	dec    %eax
f010c35a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010c35d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010c360:	ba 00 00 00 00       	mov    $0x0,%edx
f010c365:	f7 75 c0             	divl   -0x40(%ebp)
f010c368:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010c36b:	29 d0                	sub    %edx,%eax
f010c36d:	89 c3                	mov    %eax,%ebx
f010c36f:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010c376:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c37b:	0f b6 c0             	movzbl %al,%eax
f010c37e:	c1 e0 04             	shl    $0x4,%eax
f010c381:	89 c2                	mov    %eax,%edx
f010c383:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010c386:	01 d0                	add    %edx,%eax
f010c388:	48                   	dec    %eax
f010c389:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010c38c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010c38f:	ba 00 00 00 00       	mov    $0x0,%edx
f010c394:	f7 75 b8             	divl   -0x48(%ebp)
f010c397:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010c39a:	29 d0                	sub    %edx,%eax
f010c39c:	01 d8                	add    %ebx,%eax
f010c39e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010c3a3:	39 c1                	cmp    %eax,%ecx
f010c3a5:	74 14                	je     f010c3bb <test_kmalloc+0x214>
f010c3a7:	83 ec 04             	sub    $0x4,%esp
f010c3aa:	68 54 b2 11 f0       	push   $0xf011b254
f010c3af:	6a 40                	push   $0x40
f010c3b1:	68 76 b1 11 f0       	push   $0xf011b176
f010c3b6:	e8 bb 3d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c3bb:	e8 c1 f4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c3c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c3c3:	74 14                	je     f010c3d9 <test_kmalloc+0x232>
f010c3c5:	83 ec 04             	sub    $0x4,%esp
f010c3c8:	68 88 b1 11 f0       	push   $0xf011b188
f010c3cd:	6a 41                	push   $0x41
f010c3cf:	68 76 b1 11 f0       	push   $0xf011b176
f010c3d4:	e8 9d 3d ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c3d9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c3dc:	e8 dd df ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c3e1:	29 c3                	sub    %eax,%ebx
f010c3e3:	89 d8                	mov    %ebx,%eax
f010c3e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f010c3ea:	74 14                	je     f010c400 <test_kmalloc+0x259>
f010c3ec:	83 ec 04             	sub    $0x4,%esp
f010c3ef:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c3f4:	6a 42                	push   $0x42
f010c3f6:	68 76 b1 11 f0       	push   $0xf011b176
f010c3fb:	e8 76 3d ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010c400:	e8 b9 df ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c405:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c408:	e8 74 f4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c40d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010c410:	83 ec 0c             	sub    $0xc,%esp
f010c413:	68 00 fc 1f 00       	push   $0x1ffc00
f010c418:	e8 09 fa ff ff       	call   f010be26 <kmalloc>
f010c41d:	83 c4 10             	add    $0x10,%esp
f010c420:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c426:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010c42c:	89 c1                	mov    %eax,%ecx
f010c42e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010c435:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c43a:	0f b6 d0             	movzbl %al,%edx
f010c43d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010c440:	01 d0                	add    %edx,%eax
f010c442:	48                   	dec    %eax
f010c443:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010c446:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010c449:	ba 00 00 00 00       	mov    $0x0,%edx
f010c44e:	f7 75 b0             	divl   -0x50(%ebp)
f010c451:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010c454:	29 d0                	sub    %edx,%eax
f010c456:	89 c3                	mov    %eax,%ebx
f010c458:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010c45f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c464:	0f b6 c0             	movzbl %al,%eax
f010c467:	c1 e0 04             	shl    $0x4,%eax
f010c46a:	89 c2                	mov    %eax,%edx
f010c46c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010c46f:	01 d0                	add    %edx,%eax
f010c471:	48                   	dec    %eax
f010c472:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010c475:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010c478:	ba 00 00 00 00       	mov    $0x0,%edx
f010c47d:	f7 75 a8             	divl   -0x58(%ebp)
f010c480:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010c483:	29 d0                	sub    %edx,%eax
f010c485:	01 d8                	add    %ebx,%eax
f010c487:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010c48c:	39 c1                	cmp    %eax,%ecx
f010c48e:	74 14                	je     f010c4a4 <test_kmalloc+0x2fd>
f010c490:	83 ec 04             	sub    $0x4,%esp
f010c493:	68 54 b2 11 f0       	push   $0xf011b254
f010c498:	6a 48                	push   $0x48
f010c49a:	68 76 b1 11 f0       	push   $0xf011b176
f010c49f:	e8 d2 3c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c4a4:	e8 d8 f3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c4a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c4ac:	74 14                	je     f010c4c2 <test_kmalloc+0x31b>
f010c4ae:	83 ec 04             	sub    $0x4,%esp
f010c4b1:	68 88 b1 11 f0       	push   $0xf011b188
f010c4b6:	6a 49                	push   $0x49
f010c4b8:	68 76 b1 11 f0       	push   $0xf011b176
f010c4bd:	e8 b4 3c ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c4c2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c4c5:	e8 f4 de ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c4ca:	29 c3                	sub    %eax,%ebx
f010c4cc:	89 d8                	mov    %ebx,%eax
f010c4ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f010c4d3:	74 14                	je     f010c4e9 <test_kmalloc+0x342>
f010c4d5:	83 ec 04             	sub    $0x4,%esp
f010c4d8:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c4dd:	6a 4a                	push   $0x4a
f010c4df:	68 76 b1 11 f0       	push   $0xf011b176
f010c4e4:	e8 8d 3c ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010c4e9:	e8 d0 de ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c4ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c4f1:	e8 8b f3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c4f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010c4f9:	83 ec 0c             	sub    $0xc,%esp
f010c4fc:	68 00 08 00 00       	push   $0x800
f010c501:	e8 20 f9 ff ff       	call   f010be26 <kmalloc>
f010c506:	83 c4 10             	add    $0x10,%esp
f010c509:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c50f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010c515:	89 c1                	mov    %eax,%ecx
f010c517:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010c51e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c523:	0f b6 d0             	movzbl %al,%edx
f010c526:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010c529:	01 d0                	add    %edx,%eax
f010c52b:	48                   	dec    %eax
f010c52c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010c52f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010c532:	ba 00 00 00 00       	mov    $0x0,%edx
f010c537:	f7 75 a0             	divl   -0x60(%ebp)
f010c53a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010c53d:	29 d0                	sub    %edx,%eax
f010c53f:	89 c3                	mov    %eax,%ebx
f010c541:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010c548:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c54d:	0f b6 c0             	movzbl %al,%eax
f010c550:	c1 e0 04             	shl    $0x4,%eax
f010c553:	89 c2                	mov    %eax,%edx
f010c555:	8b 45 98             	mov    -0x68(%ebp),%eax
f010c558:	01 d0                	add    %edx,%eax
f010c55a:	48                   	dec    %eax
f010c55b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010c55e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c561:	ba 00 00 00 00       	mov    $0x0,%edx
f010c566:	f7 75 98             	divl   -0x68(%ebp)
f010c569:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c56c:	29 d0                	sub    %edx,%eax
f010c56e:	01 d8                	add    %ebx,%eax
f010c570:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010c575:	39 c1                	cmp    %eax,%ecx
f010c577:	74 14                	je     f010c58d <test_kmalloc+0x3e6>
f010c579:	83 ec 04             	sub    $0x4,%esp
f010c57c:	68 54 b2 11 f0       	push   $0xf011b254
f010c581:	6a 50                	push   $0x50
f010c583:	68 76 b1 11 f0       	push   $0xf011b176
f010c588:	e8 e9 3b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c58d:	e8 ef f2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c592:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c595:	74 14                	je     f010c5ab <test_kmalloc+0x404>
f010c597:	83 ec 04             	sub    $0x4,%esp
f010c59a:	68 88 b1 11 f0       	push   $0xf011b188
f010c59f:	6a 51                	push   $0x51
f010c5a1:	68 76 b1 11 f0       	push   $0xf011b176
f010c5a6:	e8 cb 3b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c5ab:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c5ae:	e8 0b de ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c5b3:	29 c3                	sub    %eax,%ebx
f010c5b5:	89 d8                	mov    %ebx,%eax
f010c5b7:	83 f8 01             	cmp    $0x1,%eax
f010c5ba:	74 14                	je     f010c5d0 <test_kmalloc+0x429>
f010c5bc:	83 ec 04             	sub    $0x4,%esp
f010c5bf:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c5c4:	6a 52                	push   $0x52
f010c5c6:	68 76 b1 11 f0       	push   $0xf011b176
f010c5cb:	e8 a6 3b ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010c5d0:	e8 e9 dd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c5d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c5d8:	e8 a4 f2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c5dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010c5e0:	83 ec 0c             	sub    $0xc,%esp
f010c5e3:	68 00 08 00 00       	push   $0x800
f010c5e8:	e8 39 f8 ff ff       	call   f010be26 <kmalloc>
f010c5ed:	83 c4 10             	add    $0x10,%esp
f010c5f0:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c5f6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010c5fc:	89 c1                	mov    %eax,%ecx
f010c5fe:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010c605:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c60a:	0f b6 d0             	movzbl %al,%edx
f010c60d:	8b 45 90             	mov    -0x70(%ebp),%eax
f010c610:	01 d0                	add    %edx,%eax
f010c612:	48                   	dec    %eax
f010c613:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010c616:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c619:	ba 00 00 00 00       	mov    $0x0,%edx
f010c61e:	f7 75 90             	divl   -0x70(%ebp)
f010c621:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c624:	29 d0                	sub    %edx,%eax
f010c626:	89 c3                	mov    %eax,%ebx
f010c628:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010c62f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c634:	0f b6 c0             	movzbl %al,%eax
f010c637:	c1 e0 04             	shl    $0x4,%eax
f010c63a:	89 c2                	mov    %eax,%edx
f010c63c:	8b 45 88             	mov    -0x78(%ebp),%eax
f010c63f:	01 d0                	add    %edx,%eax
f010c641:	48                   	dec    %eax
f010c642:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010c645:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010c648:	ba 00 00 00 00       	mov    $0x0,%edx
f010c64d:	f7 75 88             	divl   -0x78(%ebp)
f010c650:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010c653:	29 d0                	sub    %edx,%eax
f010c655:	01 d8                	add    %ebx,%eax
f010c657:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010c65c:	39 c1                	cmp    %eax,%ecx
f010c65e:	74 14                	je     f010c674 <test_kmalloc+0x4cd>
f010c660:	83 ec 04             	sub    $0x4,%esp
f010c663:	68 54 b2 11 f0       	push   $0xf011b254
f010c668:	6a 58                	push   $0x58
f010c66a:	68 76 b1 11 f0       	push   $0xf011b176
f010c66f:	e8 02 3b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c674:	e8 08 f2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c679:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c67c:	74 14                	je     f010c692 <test_kmalloc+0x4eb>
f010c67e:	83 ec 04             	sub    $0x4,%esp
f010c681:	68 88 b1 11 f0       	push   $0xf011b188
f010c686:	6a 59                	push   $0x59
f010c688:	68 76 b1 11 f0       	push   $0xf011b176
f010c68d:	e8 e4 3a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c692:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c695:	e8 24 dd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c69a:	29 c3                	sub    %eax,%ebx
f010c69c:	89 d8                	mov    %ebx,%eax
f010c69e:	83 f8 01             	cmp    $0x1,%eax
f010c6a1:	74 14                	je     f010c6b7 <test_kmalloc+0x510>
f010c6a3:	83 ec 04             	sub    $0x4,%esp
f010c6a6:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c6ab:	6a 5a                	push   $0x5a
f010c6ad:	68 76 b1 11 f0       	push   $0xf011b176
f010c6b2:	e8 bf 3a ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010c6b7:	e8 02 dd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c6bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c6bf:	e8 bd f1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c6c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010c6c7:	83 ec 0c             	sub    $0xc,%esp
f010c6ca:	68 00 1c 00 00       	push   $0x1c00
f010c6cf:	e8 52 f7 ff ff       	call   f010be26 <kmalloc>
f010c6d4:	83 c4 10             	add    $0x10,%esp
f010c6d7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c6dd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010c6e3:	89 c1                	mov    %eax,%ecx
f010c6e5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010c6ec:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c6f1:	0f b6 d0             	movzbl %al,%edx
f010c6f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f010c6f7:	01 d0                	add    %edx,%eax
f010c6f9:	48                   	dec    %eax
f010c6fa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010c700:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010c706:	ba 00 00 00 00       	mov    $0x0,%edx
f010c70b:	f7 75 80             	divl   -0x80(%ebp)
f010c70e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010c714:	29 d0                	sub    %edx,%eax
f010c716:	89 c3                	mov    %eax,%ebx
f010c718:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010c71f:	10 00 00 
f010c722:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c727:	0f b6 c0             	movzbl %al,%eax
f010c72a:	c1 e0 04             	shl    $0x4,%eax
f010c72d:	89 c2                	mov    %eax,%edx
f010c72f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010c735:	01 d0                	add    %edx,%eax
f010c737:	48                   	dec    %eax
f010c738:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010c73e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010c744:	ba 00 00 00 00       	mov    $0x0,%edx
f010c749:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010c74f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010c755:	29 d0                	sub    %edx,%eax
f010c757:	01 d8                	add    %ebx,%eax
f010c759:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010c75e:	39 c1                	cmp    %eax,%ecx
f010c760:	74 14                	je     f010c776 <test_kmalloc+0x5cf>
f010c762:	83 ec 04             	sub    $0x4,%esp
f010c765:	68 54 b2 11 f0       	push   $0xf011b254
f010c76a:	6a 60                	push   $0x60
f010c76c:	68 76 b1 11 f0       	push   $0xf011b176
f010c771:	e8 00 3a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c776:	e8 06 f1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c77b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c77e:	74 14                	je     f010c794 <test_kmalloc+0x5ed>
f010c780:	83 ec 04             	sub    $0x4,%esp
f010c783:	68 88 b1 11 f0       	push   $0xf011b188
f010c788:	6a 61                	push   $0x61
f010c78a:	68 76 b1 11 f0       	push   $0xf011b176
f010c78f:	e8 e2 39 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c794:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c797:	e8 22 dc ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c79c:	29 c3                	sub    %eax,%ebx
f010c79e:	89 d8                	mov    %ebx,%eax
f010c7a0:	83 f8 02             	cmp    $0x2,%eax
f010c7a3:	74 14                	je     f010c7b9 <test_kmalloc+0x612>
f010c7a5:	83 ec 04             	sub    $0x4,%esp
f010c7a8:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c7ad:	6a 62                	push   $0x62
f010c7af:	68 76 b1 11 f0       	push   $0xf011b176
f010c7b4:	e8 bd 39 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010c7b9:	e8 00 dc ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c7be:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c7c1:	e8 bb f0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c7c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010c7c9:	83 ec 0c             	sub    $0xc,%esp
f010c7cc:	68 00 fc 2f 00       	push   $0x2ffc00
f010c7d1:	e8 50 f6 ff ff       	call   f010be26 <kmalloc>
f010c7d6:	83 c4 10             	add    $0x10,%esp
f010c7d9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c7df:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010c7e5:	89 c1                	mov    %eax,%ecx
f010c7e7:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010c7ee:	10 00 00 
f010c7f1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c7f6:	0f b6 d0             	movzbl %al,%edx
f010c7f9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010c7ff:	01 d0                	add    %edx,%eax
f010c801:	48                   	dec    %eax
f010c802:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010c808:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010c80e:	ba 00 00 00 00       	mov    $0x0,%edx
f010c813:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010c819:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010c81f:	29 d0                	sub    %edx,%eax
f010c821:	89 c3                	mov    %eax,%ebx
f010c823:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010c82a:	10 00 00 
f010c82d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c832:	0f b6 c0             	movzbl %al,%eax
f010c835:	c1 e0 04             	shl    $0x4,%eax
f010c838:	89 c2                	mov    %eax,%edx
f010c83a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010c840:	01 d0                	add    %edx,%eax
f010c842:	48                   	dec    %eax
f010c843:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010c849:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010c84f:	ba 00 00 00 00       	mov    $0x0,%edx
f010c854:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010c85a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010c860:	29 d0                	sub    %edx,%eax
f010c862:	01 d8                	add    %ebx,%eax
f010c864:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010c869:	39 c1                	cmp    %eax,%ecx
f010c86b:	74 14                	je     f010c881 <test_kmalloc+0x6da>
f010c86d:	83 ec 04             	sub    $0x4,%esp
f010c870:	68 54 b2 11 f0       	push   $0xf011b254
f010c875:	6a 68                	push   $0x68
f010c877:	68 76 b1 11 f0       	push   $0xf011b176
f010c87c:	e8 f5 38 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c881:	e8 fb ef ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c886:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c889:	74 14                	je     f010c89f <test_kmalloc+0x6f8>
f010c88b:	83 ec 04             	sub    $0x4,%esp
f010c88e:	68 88 b1 11 f0       	push   $0xf011b188
f010c893:	6a 69                	push   $0x69
f010c895:	68 76 b1 11 f0       	push   $0xf011b176
f010c89a:	e8 d7 38 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c89f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c8a2:	e8 17 db ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c8a7:	29 c3                	sub    %eax,%ebx
f010c8a9:	89 d8                	mov    %ebx,%eax
f010c8ab:	3d 00 03 00 00       	cmp    $0x300,%eax
f010c8b0:	74 14                	je     f010c8c6 <test_kmalloc+0x71f>
f010c8b2:	83 ec 04             	sub    $0x4,%esp
f010c8b5:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c8ba:	6a 6a                	push   $0x6a
f010c8bc:	68 76 b1 11 f0       	push   $0xf011b176
f010c8c1:	e8 b0 38 ff ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010c8c6:	e8 f3 da ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c8cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c8ce:	e8 ae ef ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c8d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010c8d6:	83 ec 0c             	sub    $0xc,%esp
f010c8d9:	68 00 fc 5f 00       	push   $0x5ffc00
f010c8de:	e8 43 f5 ff ff       	call   f010be26 <kmalloc>
f010c8e3:	83 c4 10             	add    $0x10,%esp
f010c8e6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c8ec:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010c8f2:	89 c1                	mov    %eax,%ecx
f010c8f4:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010c8fb:	10 00 00 
f010c8fe:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c903:	0f b6 d0             	movzbl %al,%edx
f010c906:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010c90c:	01 d0                	add    %edx,%eax
f010c90e:	48                   	dec    %eax
f010c90f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010c915:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010c91b:	ba 00 00 00 00       	mov    $0x0,%edx
f010c920:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010c926:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010c92c:	29 d0                	sub    %edx,%eax
f010c92e:	89 c3                	mov    %eax,%ebx
f010c930:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010c937:	10 00 00 
f010c93a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010c93f:	0f b6 c0             	movzbl %al,%eax
f010c942:	c1 e0 04             	shl    $0x4,%eax
f010c945:	89 c2                	mov    %eax,%edx
f010c947:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010c94d:	01 d0                	add    %edx,%eax
f010c94f:	48                   	dec    %eax
f010c950:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010c956:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010c95c:	ba 00 00 00 00       	mov    $0x0,%edx
f010c961:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010c967:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010c96d:	29 d0                	sub    %edx,%eax
f010c96f:	01 d8                	add    %ebx,%eax
f010c971:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010c976:	39 c1                	cmp    %eax,%ecx
f010c978:	74 14                	je     f010c98e <test_kmalloc+0x7e7>
f010c97a:	83 ec 04             	sub    $0x4,%esp
f010c97d:	68 54 b2 11 f0       	push   $0xf011b254
f010c982:	6a 70                	push   $0x70
f010c984:	68 76 b1 11 f0       	push   $0xf011b176
f010c989:	e8 e8 37 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c98e:	e8 ee ee ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c993:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c996:	74 14                	je     f010c9ac <test_kmalloc+0x805>
f010c998:	83 ec 04             	sub    $0x4,%esp
f010c99b:	68 88 b1 11 f0       	push   $0xf011b188
f010c9a0:	6a 71                	push   $0x71
f010c9a2:	68 76 b1 11 f0       	push   $0xf011b176
f010c9a7:	e8 ca 37 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c9ac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c9af:	e8 0a da ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c9b4:	29 c3                	sub    %eax,%ebx
f010c9b6:	89 d8                	mov    %ebx,%eax
f010c9b8:	3d 00 06 00 00       	cmp    $0x600,%eax
f010c9bd:	74 14                	je     f010c9d3 <test_kmalloc+0x82c>
f010c9bf:	83 ec 04             	sub    $0x4,%esp
f010c9c2:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010c9c7:	6a 72                	push   $0x72
f010c9c9:	68 76 b1 11 f0       	push   $0xf011b176
f010c9ce:	e8 a3 37 ff ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010c9d3:	e8 e6 d9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010c9d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c9db:	e8 a1 ee ff ff       	call   f010b881 <pf_calculate_free_frames>
f010c9e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010c9e3:	83 ec 0c             	sub    $0xc,%esp
f010c9e6:	68 00 38 00 00       	push   $0x3800
f010c9eb:	e8 36 f4 ff ff       	call   f010be26 <kmalloc>
f010c9f0:	83 c4 10             	add    $0x10,%esp
f010c9f3:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c9f9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010c9ff:	89 c1                	mov    %eax,%ecx
f010ca01:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010ca08:	10 00 00 
f010ca0b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ca10:	0f b6 d0             	movzbl %al,%edx
f010ca13:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010ca19:	01 d0                	add    %edx,%eax
f010ca1b:	48                   	dec    %eax
f010ca1c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010ca22:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010ca28:	ba 00 00 00 00       	mov    $0x0,%edx
f010ca2d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010ca33:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010ca39:	29 d0                	sub    %edx,%eax
f010ca3b:	89 c3                	mov    %eax,%ebx
f010ca3d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010ca44:	10 00 00 
f010ca47:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ca4c:	0f b6 c0             	movzbl %al,%eax
f010ca4f:	c1 e0 04             	shl    $0x4,%eax
f010ca52:	89 c2                	mov    %eax,%edx
f010ca54:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ca5a:	01 d0                	add    %edx,%eax
f010ca5c:	48                   	dec    %eax
f010ca5d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010ca63:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ca69:	ba 00 00 00 00       	mov    $0x0,%edx
f010ca6e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010ca74:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ca7a:	29 d0                	sub    %edx,%eax
f010ca7c:	01 d8                	add    %ebx,%eax
f010ca7e:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f010ca83:	39 c1                	cmp    %eax,%ecx
f010ca85:	74 14                	je     f010ca9b <test_kmalloc+0x8f4>
f010ca87:	83 ec 04             	sub    $0x4,%esp
f010ca8a:	68 54 b2 11 f0       	push   $0xf011b254
f010ca8f:	6a 78                	push   $0x78
f010ca91:	68 76 b1 11 f0       	push   $0xf011b176
f010ca96:	e8 db 36 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ca9b:	e8 e1 ed ff ff       	call   f010b881 <pf_calculate_free_frames>
f010caa0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010caa3:	74 14                	je     f010cab9 <test_kmalloc+0x912>
f010caa5:	83 ec 04             	sub    $0x4,%esp
f010caa8:	68 88 b1 11 f0       	push   $0xf011b188
f010caad:	6a 79                	push   $0x79
f010caaf:	68 76 b1 11 f0       	push   $0xf011b176
f010cab4:	e8 bd 36 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cab9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010cabc:	e8 fd d8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010cac1:	29 c3                	sub    %eax,%ebx
f010cac3:	89 d8                	mov    %ebx,%eax
f010cac5:	83 f8 04             	cmp    $0x4,%eax
f010cac8:	74 14                	je     f010cade <test_kmalloc+0x937>
f010caca:	83 ec 04             	sub    $0x4,%esp
f010cacd:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010cad2:	6a 7a                	push   $0x7a
f010cad4:	68 76 b1 11 f0       	push   $0xf011b176
f010cad9:	e8 98 36 ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b50%");
f010cade:	83 ec 0c             	sub    $0xc,%esp
f010cae1:	68 ba b2 11 f0       	push   $0xf011b2ba
f010cae6:	e8 ab a2 ff ff       	call   f0106d96 <cprintf>
f010caeb:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010caee:	e8 cb d8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010caf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010caf6:	e8 86 ed ff ff       	call   f010b881 <pf_calculate_free_frames>
f010cafb:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010cafe:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010cb05:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010cb08:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010cb0e:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010cb14:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010cb1a:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010cb1d:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010cb1f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010cb25:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010cb2b:	01 c2                	add    %eax,%edx
f010cb2d:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cb30:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010cb32:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010cb38:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010cb3e:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010cb45:	fd 0f 00 
			shortArr[0] = minShort;
f010cb48:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010cb4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb51:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010cb54:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010cb5a:	01 c0                	add    %eax,%eax
f010cb5c:	89 c2                	mov    %eax,%edx
f010cb5e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010cb64:	01 c2                	add    %eax,%edx
f010cb66:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010cb6a:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010cb6d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010cb73:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010cb79:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010cb80:	01 00 00 
			intArr[0] = minInt;
f010cb83:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cb89:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb8c:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010cb8e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010cb94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cb9b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cba1:	01 c2                	add    %eax,%edx
f010cba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cba6:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010cba8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010cbae:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010cbb4:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010cbbb:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010cbbe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cbc4:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010cbc7:	88 10                	mov    %dl,(%eax)
f010cbc9:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010cbcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbd2:	66 89 42 02          	mov    %ax,0x2(%edx)
f010cbd6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cbdc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cbdf:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010cbe2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cbe8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cbef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cbf5:	01 c2                	add    %eax,%edx
f010cbf7:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cbfa:	88 02                	mov    %al,(%edx)
f010cbfc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cc02:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cc09:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cc0f:	01 c2                	add    %eax,%edx
f010cc11:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010cc15:	66 89 42 02          	mov    %ax,0x2(%edx)
f010cc19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cc1f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cc26:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cc2c:	01 c2                	add    %eax,%edx
f010cc2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cc31:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010cc34:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010cc3b:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010cc3e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010cc44:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010cc4a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010cc50:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010cc53:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010cc55:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010cc5b:	89 c2                	mov    %eax,%edx
f010cc5d:	c1 ea 1f             	shr    $0x1f,%edx
f010cc60:	01 d0                	add    %edx,%eax
f010cc62:	d1 f8                	sar    %eax
f010cc64:	89 c2                	mov    %eax,%edx
f010cc66:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010cc6c:	01 c2                	add    %eax,%edx
f010cc6e:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cc71:	88 c1                	mov    %al,%cl
f010cc73:	c0 e9 07             	shr    $0x7,%cl
f010cc76:	01 c8                	add    %ecx,%eax
f010cc78:	d0 f8                	sar    %al
f010cc7a:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010cc7c:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010cc82:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010cc88:	01 c2                	add    %eax,%edx
f010cc8a:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cc8d:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010cc8f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010cc95:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010cc9b:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010cca2:	1b 00 00 
			shortArr2[0] = minShort;
f010cca5:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010ccab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ccae:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010ccb1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010ccb7:	01 c0                	add    %eax,%eax
f010ccb9:	89 c2                	mov    %eax,%edx
f010ccbb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010ccc1:	01 c2                	add    %eax,%edx
f010ccc3:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010ccc7:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010ccca:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010ccd0:	8a 00                	mov    (%eax),%al
f010ccd2:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010ccd5:	75 15                	jne    f010ccec <test_kmalloc+0xb45>
f010ccd7:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010ccdd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010cce3:	01 d0                	add    %edx,%eax
f010cce5:	8a 00                	mov    (%eax),%al
f010cce7:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010ccea:	74 17                	je     f010cd03 <test_kmalloc+0xb5c>
f010ccec:	83 ec 04             	sub    $0x4,%esp
f010ccef:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010ccf4:	68 a9 00 00 00       	push   $0xa9
f010ccf9:	68 76 b1 11 f0       	push   $0xf011b176
f010ccfe:	e8 73 34 ff ff       	call   f0100176 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010cd03:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010cd09:	66 8b 00             	mov    (%eax),%ax
f010cd0c:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010cd10:	75 1b                	jne    f010cd2d <test_kmalloc+0xb86>
f010cd12:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010cd18:	01 c0                	add    %eax,%eax
f010cd1a:	89 c2                	mov    %eax,%edx
f010cd1c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010cd22:	01 d0                	add    %edx,%eax
f010cd24:	66 8b 00             	mov    (%eax),%ax
f010cd27:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010cd2b:	74 17                	je     f010cd44 <test_kmalloc+0xb9d>
f010cd2d:	83 ec 04             	sub    $0x4,%esp
f010cd30:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cd35:	68 aa 00 00 00       	push   $0xaa
f010cd3a:	68 76 b1 11 f0       	push   $0xf011b176
f010cd3f:	e8 32 34 ff ff       	call   f0100176 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010cd44:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cd4a:	8b 00                	mov    (%eax),%eax
f010cd4c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010cd4f:	75 1c                	jne    f010cd6d <test_kmalloc+0xbc6>
f010cd51:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010cd57:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cd5e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cd64:	01 d0                	add    %edx,%eax
f010cd66:	8b 00                	mov    (%eax),%eax
f010cd68:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010cd6b:	74 17                	je     f010cd84 <test_kmalloc+0xbdd>
f010cd6d:	83 ec 04             	sub    $0x4,%esp
f010cd70:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cd75:	68 ab 00 00 00       	push   $0xab
f010cd7a:	68 76 b1 11 f0       	push   $0xf011b176
f010cd7f:	e8 f2 33 ff ff       	call   f0100176 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010cd84:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cd8a:	8a 00                	mov    (%eax),%al
f010cd8c:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010cd8f:	75 1c                	jne    f010cdad <test_kmalloc+0xc06>
f010cd91:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cd97:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cd9e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cda4:	01 d0                	add    %edx,%eax
f010cda6:	8a 00                	mov    (%eax),%al
f010cda8:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010cdab:	74 17                	je     f010cdc4 <test_kmalloc+0xc1d>
f010cdad:	83 ec 04             	sub    $0x4,%esp
f010cdb0:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cdb5:	68 ad 00 00 00       	push   $0xad
f010cdba:	68 76 b1 11 f0       	push   $0xf011b176
f010cdbf:	e8 b2 33 ff ff       	call   f0100176 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010cdc4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cdca:	66 8b 40 02          	mov    0x2(%eax),%ax
f010cdce:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010cdd2:	75 1f                	jne    f010cdf3 <test_kmalloc+0xc4c>
f010cdd4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cdda:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cde1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cde7:	01 d0                	add    %edx,%eax
f010cde9:	66 8b 40 02          	mov    0x2(%eax),%ax
f010cded:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010cdf1:	74 17                	je     f010ce0a <test_kmalloc+0xc63>
f010cdf3:	83 ec 04             	sub    $0x4,%esp
f010cdf6:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cdfb:	68 ae 00 00 00       	push   $0xae
f010ce00:	68 76 b1 11 f0       	push   $0xf011b176
f010ce05:	e8 6c 33 ff ff       	call   f0100176 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010ce0a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ce10:	8b 40 04             	mov    0x4(%eax),%eax
f010ce13:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010ce16:	75 1d                	jne    f010ce35 <test_kmalloc+0xc8e>
f010ce18:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010ce1e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ce25:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ce2b:	01 d0                	add    %edx,%eax
f010ce2d:	8b 40 04             	mov    0x4(%eax),%eax
f010ce30:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010ce33:	74 17                	je     f010ce4c <test_kmalloc+0xca5>
f010ce35:	83 ec 04             	sub    $0x4,%esp
f010ce38:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010ce3d:	68 af 00 00 00       	push   $0xaf
f010ce42:	68 76 b1 11 f0       	push   $0xf011b176
f010ce47:	e8 2a 33 ff ff       	call   f0100176 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010ce4c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010ce52:	8a 00                	mov    (%eax),%al
f010ce54:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010ce57:	75 40                	jne    f010ce99 <test_kmalloc+0xcf2>
f010ce59:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010ce5f:	89 c2                	mov    %eax,%edx
f010ce61:	c1 ea 1f             	shr    $0x1f,%edx
f010ce64:	01 d0                	add    %edx,%eax
f010ce66:	d1 f8                	sar    %eax
f010ce68:	89 c2                	mov    %eax,%edx
f010ce6a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010ce70:	01 d0                	add    %edx,%eax
f010ce72:	8a 10                	mov    (%eax),%dl
f010ce74:	8a 45 f2             	mov    -0xe(%ebp),%al
f010ce77:	88 c1                	mov    %al,%cl
f010ce79:	c0 e9 07             	shr    $0x7,%cl
f010ce7c:	01 c8                	add    %ecx,%eax
f010ce7e:	d0 f8                	sar    %al
f010ce80:	38 c2                	cmp    %al,%dl
f010ce82:	75 15                	jne    f010ce99 <test_kmalloc+0xcf2>
f010ce84:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010ce8a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010ce90:	01 d0                	add    %edx,%eax
f010ce92:	8a 00                	mov    (%eax),%al
f010ce94:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010ce97:	74 17                	je     f010ceb0 <test_kmalloc+0xd09>
f010ce99:	83 ec 04             	sub    $0x4,%esp
f010ce9c:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cea1:	68 b1 00 00 00       	push   $0xb1
f010cea6:	68 76 b1 11 f0       	push   $0xf011b176
f010ceab:	e8 c6 32 ff ff       	call   f0100176 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010ceb0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010ceb6:	66 8b 00             	mov    (%eax),%ax
f010ceb9:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010cebd:	75 1b                	jne    f010ceda <test_kmalloc+0xd33>
f010cebf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010cec5:	01 c0                	add    %eax,%eax
f010cec7:	89 c2                	mov    %eax,%edx
f010cec9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010cecf:	01 d0                	add    %edx,%eax
f010ced1:	66 8b 00             	mov    (%eax),%ax
f010ced4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010ced8:	74 17                	je     f010cef1 <test_kmalloc+0xd4a>
f010ceda:	83 ec 04             	sub    $0x4,%esp
f010cedd:	68 c4 b2 11 f0       	push   $0xf011b2c4
f010cee2:	68 b2 00 00 00       	push   $0xb2
f010cee7:	68 76 b1 11 f0       	push   $0xf011b176
f010ceec:	e8 85 32 ff ff       	call   f0100176 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cef1:	e8 c8 d4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010cef6:	89 c2                	mov    %eax,%edx
f010cef8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cefb:	39 c2                	cmp    %eax,%edx
f010cefd:	74 17                	je     f010cf16 <test_kmalloc+0xd6f>
f010ceff:	83 ec 04             	sub    $0x4,%esp
f010cf02:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010cf07:	68 b4 00 00 00       	push   $0xb4
f010cf0c:	68 76 b1 11 f0       	push   $0xf011b176
f010cf11:	e8 60 32 ff ff       	call   f0100176 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010cf16:	e8 66 e9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010cf1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010cf1e:	74 17                	je     f010cf37 <test_kmalloc+0xd90>
f010cf20:	83 ec 04             	sub    $0x4,%esp
f010cf23:	68 88 b1 11 f0       	push   $0xf011b188
f010cf28:	68 b5 00 00 00       	push   $0xb5
f010cf2d:	68 76 b1 11 f0       	push   $0xf011b176
f010cf32:	e8 3f 32 ff ff       	call   f0100176 <_panic>
		}

		cprintf("\b\b\b80%");
f010cf37:	83 ec 0c             	sub    $0xc,%esp
f010cf3a:	68 f9 b2 11 f0       	push   $0xf011b2f9
f010cf3f:	e8 52 9e ff ff       	call   f0106d96 <cprintf>
f010cf44:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010cf47:	e8 72 d4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010cf4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010cf4f:	e8 2d e9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010cf54:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010cf57:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010cf5e:	10 00 00 
f010cf61:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010cf66:	0f b6 d0             	movzbl %al,%edx
f010cf69:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010cf6f:	01 d0                	add    %edx,%eax
f010cf71:	48                   	dec    %eax
f010cf72:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010cf78:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010cf7e:	ba 00 00 00 00       	mov    $0x0,%edx
f010cf83:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010cf89:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010cf8f:	29 d0                	sub    %edx,%eax
f010cf91:	89 c1                	mov    %eax,%ecx
f010cf93:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010cf9a:	10 00 00 
f010cf9d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010cfa2:	0f b6 c0             	movzbl %al,%eax
f010cfa5:	c1 e0 04             	shl    $0x4,%eax
f010cfa8:	89 c2                	mov    %eax,%edx
f010cfaa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010cfb0:	01 d0                	add    %edx,%eax
f010cfb2:	48                   	dec    %eax
f010cfb3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010cfb9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010cfbf:	ba 00 00 00 00       	mov    $0x0,%edx
f010cfc4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010cfca:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010cfd0:	29 d0                	sub    %edx,%eax
f010cfd2:	01 c8                	add    %ecx,%eax
f010cfd4:	ba 00 90 2f 09       	mov    $0x92f9000,%edx
f010cfd9:	29 c2                	sub    %eax,%edx
f010cfdb:	89 d0                	mov    %edx,%eax
f010cfdd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010cfe3:	83 ec 0c             	sub    $0xc,%esp
f010cfe6:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010cfec:	e8 35 ee ff ff       	call   f010be26 <kmalloc>
f010cff1:	83 c4 10             	add    $0x10,%esp
f010cff4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010cffa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010d000:	85 c0                	test   %eax,%eax
f010d002:	74 17                	je     f010d01b <test_kmalloc+0xe74>
f010d004:	83 ec 04             	sub    $0x4,%esp
f010d007:	68 44 b1 11 f0       	push   $0xf011b144
f010d00c:	68 bf 00 00 00       	push   $0xbf
f010d011:	68 76 b1 11 f0       	push   $0xf011b176
f010d016:	e8 5b 31 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d01b:	e8 61 e8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d020:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d023:	74 17                	je     f010d03c <test_kmalloc+0xe95>
f010d025:	83 ec 04             	sub    $0x4,%esp
f010d028:	68 88 b1 11 f0       	push   $0xf011b188
f010d02d:	68 c0 00 00 00       	push   $0xc0
f010d032:	68 76 b1 11 f0       	push   $0xf011b176
f010d037:	e8 3a 31 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d03c:	e8 7d d3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d041:	89 c2                	mov    %eax,%edx
f010d043:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d046:	39 c2                	cmp    %eax,%edx
f010d048:	74 17                	je     f010d061 <test_kmalloc+0xeba>
f010d04a:	83 ec 04             	sub    $0x4,%esp
f010d04d:	68 f0 b1 11 f0       	push   $0xf011b1f0
f010d052:	68 c1 00 00 00       	push   $0xc1
f010d057:	68 76 b1 11 f0       	push   $0xf011b176
f010d05c:	e8 15 31 ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b90%");
f010d061:	83 ec 0c             	sub    $0xc,%esp
f010d064:	68 00 b3 11 f0       	push   $0xf011b300
f010d069:	e8 28 9d ff ff       	call   f0106d96 <cprintf>
f010d06e:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010d071:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010d077:	05 00 40 00 00       	add    $0x4000,%eax
f010d07c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010d082:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010d089:	10 00 00 
f010d08c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d091:	0f b6 d0             	movzbl %al,%edx
f010d094:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010d09a:	01 d0                	add    %edx,%eax
f010d09c:	48                   	dec    %eax
f010d09d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010d0a3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010d0a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010d0ae:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010d0b4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010d0ba:	29 d0                	sub    %edx,%eax
f010d0bc:	89 c1                	mov    %eax,%ecx
f010d0be:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010d0c5:	10 00 00 
f010d0c8:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d0cd:	0f b6 c0             	movzbl %al,%eax
f010d0d0:	c1 e0 04             	shl    $0x4,%eax
f010d0d3:	89 c2                	mov    %eax,%edx
f010d0d5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010d0db:	01 d0                	add    %edx,%eax
f010d0dd:	48                   	dec    %eax
f010d0de:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010d0e4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010d0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f010d0ef:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010d0f5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010d0fb:	29 d0                	sub    %edx,%eax
f010d0fd:	01 c8                	add    %ecx,%eax
f010d0ff:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010d104:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d107:	eb 6b                	jmp    f010d174 <test_kmalloc+0xfcd>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010d109:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d10c:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f010d111:	83 ec 04             	sub    $0x4,%esp
f010d114:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010d11a:	51                   	push   %ecx
f010d11b:	52                   	push   %edx
f010d11c:	50                   	push   %eax
f010d11d:	e8 f3 69 ff ff       	call   f0103b15 <get_page_table>
f010d122:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010d125:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010d12b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d12e:	c1 ea 0c             	shr    $0xc,%edx
f010d131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010d137:	c1 e2 02             	shl    $0x2,%edx
f010d13a:	01 d0                	add    %edx,%eax
f010d13c:	8b 00                	mov    (%eax),%eax
f010d13e:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d143:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010d149:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010d14f:	83 e0 04             	and    $0x4,%eax
f010d152:	85 c0                	test   %eax,%eax
f010d154:	74 17                	je     f010d16d <test_kmalloc+0xfc6>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010d156:	83 ec 04             	sub    $0x4,%esp
f010d159:	68 08 b3 11 f0       	push   $0xf011b308
f010d15e:	68 ce 00 00 00       	push   $0xce
f010d163:	68 76 b1 11 f0       	push   $0xf011b176
f010d168:	e8 09 30 ff ff       	call   f0100176 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010d16d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010d174:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d177:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010d17d:	72 8a                	jb     f010d109 <test_kmalloc+0xf62>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010d17f:	83 ec 0c             	sub    $0xc,%esp
f010d182:	68 52 b3 11 f0       	push   $0xf011b352
f010d187:	e8 0a 9c ff ff       	call   f0106d96 <cprintf>
f010d18c:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010d18f:	83 ec 0c             	sub    $0xc,%esp
f010d192:	68 5c b3 11 f0       	push   $0xf011b35c
f010d197:	e8 fa 9b ff ff       	call   f0106d96 <cprintf>
f010d19c:	83 c4 10             	add    $0x10,%esp

	return 1;
f010d19f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010d1a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d1a7:	5b                   	pop    %ebx
f010d1a8:	5f                   	pop    %edi
f010d1a9:	5d                   	pop    %ebp
f010d1aa:	c3                   	ret    

f010d1ab <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010d1ab:	55                   	push   %ebp
f010d1ac:	89 e5                	mov    %esp,%ebp
f010d1ae:	57                   	push   %edi
f010d1af:	53                   	push   %ebx
f010d1b0:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010d1b6:	83 ec 0c             	sub    $0xc,%esp
f010d1b9:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010d1be:	e8 d3 9b ff ff       	call   f0106d96 <cprintf>
f010d1c3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010d1c6:	83 ec 0c             	sub    $0xc,%esp
f010d1c9:	68 e8 b0 11 f0       	push   $0xf011b0e8
f010d1ce:	e8 c3 9b ff ff       	call   f0106d96 <cprintf>
f010d1d3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010d1d6:	83 ec 0c             	sub    $0xc,%esp
f010d1d9:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010d1de:	e8 b3 9b ff ff       	call   f0106d96 <cprintf>
f010d1e3:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010d1e6:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010d1ec:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010d1f1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1f6:	89 d7                	mov    %edx,%edi
f010d1f8:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010d1fa:	83 ec 0c             	sub    $0xc,%esp
f010d1fd:	68 98 b3 11 f0       	push   $0xf011b398
f010d202:	e8 8f 9b ff ff       	call   f0106d96 <cprintf>
f010d207:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010d20a:	e8 af d1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d20f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010d212:	e8 6a e6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d217:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010d21a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d221:	eb 1f                	jmp    f010d242 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010d223:	83 ec 0c             	sub    $0xc,%esp
f010d226:	68 00 00 20 00       	push   $0x200000
f010d22b:	e8 f6 eb ff ff       	call   f010be26 <kmalloc>
f010d230:	83 c4 10             	add    $0x10,%esp
f010d233:	89 c2                	mov    %eax,%edx
f010d235:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d238:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010d23f:	ff 45 f4             	incl   -0xc(%ebp)
f010d242:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010d246:	7e db                	jle    f010d223 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f010d248:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010d24f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d254:	0f b6 d0             	movzbl %al,%edx
f010d257:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d25a:	01 d0                	add    %edx,%eax
f010d25c:	48                   	dec    %eax
f010d25d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d263:	ba 00 00 00 00       	mov    $0x0,%edx
f010d268:	f7 75 e8             	divl   -0x18(%ebp)
f010d26b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d26e:	29 d0                	sub    %edx,%eax
f010d270:	89 c1                	mov    %eax,%ecx
f010d272:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010d279:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d27e:	0f b6 c0             	movzbl %al,%eax
f010d281:	c1 e0 04             	shl    $0x4,%eax
f010d284:	89 c2                	mov    %eax,%edx
f010d286:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d289:	01 d0                	add    %edx,%eax
f010d28b:	48                   	dec    %eax
f010d28c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d28f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d292:	ba 00 00 00 00       	mov    $0x0,%edx
f010d297:	f7 75 e0             	divl   -0x20(%ebp)
f010d29a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d29d:	29 d0                	sub    %edx,%eax
f010d29f:	01 c8                	add    %ecx,%eax
f010d2a1:	ba 00 f0 1f 00       	mov    $0x1ff000,%edx
f010d2a6:	29 c2                	sub    %eax,%edx
f010d2a8:	89 d0                	mov    %edx,%eax
f010d2aa:	83 ec 0c             	sub    $0xc,%esp
f010d2ad:	50                   	push   %eax
f010d2ae:	e8 73 eb ff ff       	call   f010be26 <kmalloc>
f010d2b3:	83 c4 10             	add    $0x10,%esp
f010d2b6:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010d2bc:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010d2c2:	89 c1                	mov    %eax,%ecx
f010d2c4:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010d2cb:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d2d0:	0f b6 d0             	movzbl %al,%edx
f010d2d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2d6:	01 d0                	add    %edx,%eax
f010d2d8:	48                   	dec    %eax
f010d2d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010d2dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d2df:	ba 00 00 00 00       	mov    $0x0,%edx
f010d2e4:	f7 75 d8             	divl   -0x28(%ebp)
f010d2e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d2ea:	29 d0                	sub    %edx,%eax
f010d2ec:	89 c3                	mov    %eax,%ebx
f010d2ee:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010d2f5:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d2fa:	0f b6 c0             	movzbl %al,%eax
f010d2fd:	c1 e0 04             	shl    $0x4,%eax
f010d300:	89 c2                	mov    %eax,%edx
f010d302:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d305:	01 d0                	add    %edx,%eax
f010d307:	48                   	dec    %eax
f010d308:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010d30b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d30e:	ba 00 00 00 00       	mov    $0x0,%edx
f010d313:	f7 75 d0             	divl   -0x30(%ebp)
f010d316:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d319:	29 d0                	sub    %edx,%eax
f010d31b:	01 d8                	add    %ebx,%eax
f010d31d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010d322:	39 c1                	cmp    %eax,%ecx
f010d324:	0f 85 4f 03 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010d32a:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010d330:	89 c1                	mov    %eax,%ecx
f010d332:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010d339:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d33e:	0f b6 d0             	movzbl %al,%edx
f010d341:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d344:	01 d0                	add    %edx,%eax
f010d346:	48                   	dec    %eax
f010d347:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010d34a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d34d:	ba 00 00 00 00       	mov    $0x0,%edx
f010d352:	f7 75 c8             	divl   -0x38(%ebp)
f010d355:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d358:	29 d0                	sub    %edx,%eax
f010d35a:	89 c3                	mov    %eax,%ebx
f010d35c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010d363:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d368:	0f b6 c0             	movzbl %al,%eax
f010d36b:	c1 e0 04             	shl    $0x4,%eax
f010d36e:	89 c2                	mov    %eax,%edx
f010d370:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d373:	01 d0                	add    %edx,%eax
f010d375:	48                   	dec    %eax
f010d376:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010d379:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d37c:	ba 00 00 00 00       	mov    $0x0,%edx
f010d381:	f7 75 c0             	divl   -0x40(%ebp)
f010d384:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d387:	29 d0                	sub    %edx,%eax
f010d389:	01 d8                	add    %ebx,%eax
f010d38b:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010d390:	39 c1                	cmp    %eax,%ecx
f010d392:	0f 85 e1 02 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010d398:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010d39e:	89 c1                	mov    %eax,%ecx
f010d3a0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010d3a7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d3ac:	0f b6 d0             	movzbl %al,%edx
f010d3af:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010d3b2:	01 d0                	add    %edx,%eax
f010d3b4:	48                   	dec    %eax
f010d3b5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010d3b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f010d3c0:	f7 75 b8             	divl   -0x48(%ebp)
f010d3c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d3c6:	29 d0                	sub    %edx,%eax
f010d3c8:	89 c3                	mov    %eax,%ebx
f010d3ca:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010d3d1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d3d6:	0f b6 c0             	movzbl %al,%eax
f010d3d9:	c1 e0 04             	shl    $0x4,%eax
f010d3dc:	89 c2                	mov    %eax,%edx
f010d3de:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010d3e1:	01 d0                	add    %edx,%eax
f010d3e3:	48                   	dec    %eax
f010d3e4:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010d3e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d3ea:	ba 00 00 00 00       	mov    $0x0,%edx
f010d3ef:	f7 75 b0             	divl   -0x50(%ebp)
f010d3f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d3f5:	29 d0                	sub    %edx,%eax
f010d3f7:	01 d8                	add    %ebx,%eax
f010d3f9:	2d 00 00 00 09       	sub    $0x9000000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010d3fe:	39 c1                	cmp    %eax,%ecx
f010d400:	0f 85 73 02 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010d406:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010d40c:	89 c1                	mov    %eax,%ecx
f010d40e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010d415:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d41a:	0f b6 d0             	movzbl %al,%edx
f010d41d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010d420:	01 d0                	add    %edx,%eax
f010d422:	48                   	dec    %eax
f010d423:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010d426:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d429:	ba 00 00 00 00       	mov    $0x0,%edx
f010d42e:	f7 75 a8             	divl   -0x58(%ebp)
f010d431:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d434:	29 d0                	sub    %edx,%eax
f010d436:	89 c3                	mov    %eax,%ebx
f010d438:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010d43f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d444:	0f b6 c0             	movzbl %al,%eax
f010d447:	c1 e0 04             	shl    $0x4,%eax
f010d44a:	89 c2                	mov    %eax,%edx
f010d44c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010d44f:	01 d0                	add    %edx,%eax
f010d451:	48                   	dec    %eax
f010d452:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010d455:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d458:	ba 00 00 00 00       	mov    $0x0,%edx
f010d45d:	f7 75 a0             	divl   -0x60(%ebp)
f010d460:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d463:	29 d0                	sub    %edx,%eax
f010d465:	01 d8                	add    %ebx,%eax
f010d467:	2d 00 00 c0 08       	sub    $0x8c00000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010d46c:	39 c1                	cmp    %eax,%ecx
f010d46e:	0f 85 05 02 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010d474:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010d47a:	89 c1                	mov    %eax,%ecx
f010d47c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010d483:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d488:	0f b6 d0             	movzbl %al,%edx
f010d48b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010d48e:	01 d0                	add    %edx,%eax
f010d490:	48                   	dec    %eax
f010d491:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010d494:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d497:	ba 00 00 00 00       	mov    $0x0,%edx
f010d49c:	f7 75 98             	divl   -0x68(%ebp)
f010d49f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d4a2:	29 d0                	sub    %edx,%eax
f010d4a4:	89 c3                	mov    %eax,%ebx
f010d4a6:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010d4ad:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d4b2:	0f b6 c0             	movzbl %al,%eax
f010d4b5:	c1 e0 04             	shl    $0x4,%eax
f010d4b8:	89 c2                	mov    %eax,%edx
f010d4ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f010d4bd:	01 d0                	add    %edx,%eax
f010d4bf:	48                   	dec    %eax
f010d4c0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010d4c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d4c6:	ba 00 00 00 00       	mov    $0x0,%edx
f010d4cb:	f7 75 90             	divl   -0x70(%ebp)
f010d4ce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d4d1:	29 d0                	sub    %edx,%eax
f010d4d3:	01 d8                	add    %ebx,%eax
f010d4d5:	2d 00 00 20 08       	sub    $0x8200000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010d4da:	39 c1                	cmp    %eax,%ecx
f010d4dc:	0f 85 97 01 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010d4e2:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010d4e8:	89 c1                	mov    %eax,%ecx
f010d4ea:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010d4f1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d4f6:	0f b6 d0             	movzbl %al,%edx
f010d4f9:	8b 45 88             	mov    -0x78(%ebp),%eax
f010d4fc:	01 d0                	add    %edx,%eax
f010d4fe:	48                   	dec    %eax
f010d4ff:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010d502:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d505:	ba 00 00 00 00       	mov    $0x0,%edx
f010d50a:	f7 75 88             	divl   -0x78(%ebp)
f010d50d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d510:	29 d0                	sub    %edx,%eax
f010d512:	89 c3                	mov    %eax,%ebx
f010d514:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010d51b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d520:	0f b6 c0             	movzbl %al,%eax
f010d523:	c1 e0 04             	shl    $0x4,%eax
f010d526:	89 c2                	mov    %eax,%edx
f010d528:	8b 45 80             	mov    -0x80(%ebp),%eax
f010d52b:	01 d0                	add    %edx,%eax
f010d52d:	48                   	dec    %eax
f010d52e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010d534:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d53a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d53f:	f7 75 80             	divl   -0x80(%ebp)
f010d542:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d548:	29 d0                	sub    %edx,%eax
f010d54a:	01 d8                	add    %ebx,%eax
f010d54c:	2d 00 00 80 07       	sub    $0x7800000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010d551:	39 c1                	cmp    %eax,%ecx
f010d553:	0f 85 20 01 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010d559:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010d55f:	89 c1                	mov    %eax,%ecx
f010d561:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010d568:	10 00 00 
f010d56b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d570:	0f b6 d0             	movzbl %al,%edx
f010d573:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010d579:	01 d0                	add    %edx,%eax
f010d57b:	48                   	dec    %eax
f010d57c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010d582:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d588:	ba 00 00 00 00       	mov    $0x0,%edx
f010d58d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010d593:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d599:	29 d0                	sub    %edx,%eax
f010d59b:	89 c3                	mov    %eax,%ebx
f010d59d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010d5a4:	10 00 00 
f010d5a7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d5ac:	0f b6 c0             	movzbl %al,%eax
f010d5af:	c1 e0 04             	shl    $0x4,%eax
f010d5b2:	89 c2                	mov    %eax,%edx
f010d5b4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010d5ba:	01 d0                	add    %edx,%eax
f010d5bc:	48                   	dec    %eax
f010d5bd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010d5c3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d5c9:	ba 00 00 00 00       	mov    $0x0,%edx
f010d5ce:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010d5d4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d5da:	29 d0                	sub    %edx,%eax
f010d5dc:	01 d8                	add    %ebx,%eax
f010d5de:	2d 00 00 e0 06       	sub    $0x6e00000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010d5e3:	39 c1                	cmp    %eax,%ecx
f010d5e5:	0f 85 8e 00 00 00    	jne    f010d679 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010d5eb:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010d5f1:	89 c1                	mov    %eax,%ecx
f010d5f3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010d5fa:	10 00 00 
f010d5fd:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d602:	0f b6 d0             	movzbl %al,%edx
f010d605:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010d60b:	01 d0                	add    %edx,%eax
f010d60d:	48                   	dec    %eax
f010d60e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010d614:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d61a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d61f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010d625:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d62b:	29 d0                	sub    %edx,%eax
f010d62d:	89 c3                	mov    %eax,%ebx
f010d62f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010d636:	10 00 00 
f010d639:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d63e:	0f b6 c0             	movzbl %al,%eax
f010d641:	c1 e0 04             	shl    $0x4,%eax
f010d644:	89 c2                	mov    %eax,%edx
f010d646:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010d64c:	01 d0                	add    %edx,%eax
f010d64e:	48                   	dec    %eax
f010d64f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010d655:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d65b:	ba 00 00 00 00       	mov    $0x0,%edx
f010d660:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010d666:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d66c:	29 d0                	sub    %edx,%eax
f010d66e:	01 d8                	add    %ebx,%eax
f010d670:	2d 00 00 20 00       	sub    $0x200000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010d675:	39 c1                	cmp    %eax,%ecx
f010d677:	74 17                	je     f010d690 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010d679:	83 ec 04             	sub    $0x4,%esp
f010d67c:	68 e8 b3 11 f0       	push   $0xf011b3e8
f010d681:	68 fa 00 00 00       	push   $0xfa
f010d686:	68 76 b1 11 f0       	push   $0xf011b176
f010d68b:	e8 e6 2a ff ff       	call   f0100176 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d690:	e8 ec e1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d695:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d698:	74 17                	je     f010d6b1 <test_kmalloc_nextfit+0x506>
f010d69a:	83 ec 04             	sub    $0x4,%esp
f010d69d:	68 88 b1 11 f0       	push   $0xf011b188
f010d6a2:	68 fc 00 00 00       	push   $0xfc
f010d6a7:	68 76 b1 11 f0       	push   $0xf011b176
f010d6ac:	e8 c5 2a ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010d6b1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d6b4:	e8 05 cd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d6b9:	29 c3                	sub    %eax,%ebx
f010d6bb:	89 d9                	mov    %ebx,%ecx
f010d6bd:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010d6c4:	10 00 00 
f010d6c7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d6cc:	0f b6 d0             	movzbl %al,%edx
f010d6cf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010d6d5:	01 d0                	add    %edx,%eax
f010d6d7:	48                   	dec    %eax
f010d6d8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010d6de:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d6e4:	ba 00 00 00 00       	mov    $0x0,%edx
f010d6e9:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010d6ef:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d6f5:	29 d0                	sub    %edx,%eax
f010d6f7:	89 c3                	mov    %eax,%ebx
f010d6f9:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010d700:	10 00 00 
f010d703:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d708:	0f b6 c0             	movzbl %al,%eax
f010d70b:	c1 e0 04             	shl    $0x4,%eax
f010d70e:	89 c2                	mov    %eax,%edx
f010d710:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010d716:	01 d0                	add    %edx,%eax
f010d718:	48                   	dec    %eax
f010d719:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010d71f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d725:	ba 00 00 00 00       	mov    $0x0,%edx
f010d72a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010d730:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d736:	29 d0                	sub    %edx,%eax
f010d738:	01 d8                	add    %ebx,%eax
f010d73a:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f010d73f:	29 c2                	sub    %eax,%edx
f010d741:	89 d0                	mov    %edx,%eax
f010d743:	c1 e8 0c             	shr    $0xc,%eax
f010d746:	39 c1                	cmp    %eax,%ecx
f010d748:	74 17                	je     f010d761 <test_kmalloc_nextfit+0x5b6>
f010d74a:	83 ec 04             	sub    $0x4,%esp
f010d74d:	68 2b b4 11 f0       	push   $0xf011b42b
f010d752:	68 fd 00 00 00       	push   $0xfd
f010d757:	68 76 b1 11 f0       	push   $0xf011b176
f010d75c:	e8 15 2a ff ff       	call   f0100176 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f010d761:	e8 1b e1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d766:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d769:	e8 50 cc ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d76e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f010d771:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010d777:	83 ec 0c             	sub    $0xc,%esp
f010d77a:	50                   	push   %eax
f010d77b:	e8 37 e7 ff ff       	call   f010beb7 <kfree>
f010d780:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f010d783:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010d789:	83 ec 0c             	sub    $0xc,%esp
f010d78c:	50                   	push   %eax
f010d78d:	e8 25 e7 ff ff       	call   f010beb7 <kfree>
f010d792:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f010d795:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f010d79b:	83 ec 0c             	sub    $0xc,%esp
f010d79e:	50                   	push   %eax
f010d79f:	e8 13 e7 ff ff       	call   f010beb7 <kfree>
f010d7a4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f010d7a7:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f010d7ad:	83 ec 0c             	sub    $0xc,%esp
f010d7b0:	50                   	push   %eax
f010d7b1:	e8 01 e7 ff ff       	call   f010beb7 <kfree>
f010d7b6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f010d7b9:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010d7bf:	83 ec 0c             	sub    $0xc,%esp
f010d7c2:	50                   	push   %eax
f010d7c3:	e8 ef e6 ff ff       	call   f010beb7 <kfree>
f010d7c8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f010d7cb:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f010d7d1:	83 ec 0c             	sub    $0xc,%esp
f010d7d4:	50                   	push   %eax
f010d7d5:	e8 dd e6 ff ff       	call   f010beb7 <kfree>
f010d7da:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f010d7dd:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f010d7e3:	83 ec 0c             	sub    $0xc,%esp
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 cb e6 ff ff       	call   f010beb7 <kfree>
f010d7ec:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f010d7ef:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010d7f5:	83 ec 0c             	sub    $0xc,%esp
f010d7f8:	50                   	push   %eax
f010d7f9:	e8 b9 e6 ff ff       	call   f010beb7 <kfree>
f010d7fe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f010d801:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010d807:	83 ec 0c             	sub    $0xc,%esp
f010d80a:	50                   	push   %eax
f010d80b:	e8 a7 e6 ff ff       	call   f010beb7 <kfree>
f010d810:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f010d813:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010d819:	83 ec 0c             	sub    $0xc,%esp
f010d81c:	50                   	push   %eax
f010d81d:	e8 95 e6 ff ff       	call   f010beb7 <kfree>
f010d822:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d825:	e8 57 e0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d82a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d82d:	74 17                	je     f010d846 <test_kmalloc_nextfit+0x69b>
f010d82f:	83 ec 04             	sub    $0x4,%esp
f010d832:	68 88 b1 11 f0       	push   $0xf011b188
f010d837:	68 0e 01 00 00       	push   $0x10e
f010d83c:	68 76 b1 11 f0       	push   $0xf011b176
f010d841:	e8 30 29 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010d846:	e8 73 cb ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d84b:	89 c2                	mov    %eax,%edx
f010d84d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d850:	89 d1                	mov    %edx,%ecx
f010d852:	29 c1                	sub    %eax,%ecx
f010d854:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010d85b:	10 00 00 
f010d85e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d863:	0f b6 d0             	movzbl %al,%edx
f010d866:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010d86c:	01 d0                	add    %edx,%eax
f010d86e:	48                   	dec    %eax
f010d86f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010d875:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d87b:	ba 00 00 00 00       	mov    $0x0,%edx
f010d880:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010d886:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d88c:	29 d0                	sub    %edx,%eax
f010d88e:	89 c3                	mov    %eax,%ebx
f010d890:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f010d897:	10 00 00 
f010d89a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d89f:	0f b6 c0             	movzbl %al,%eax
f010d8a2:	c1 e0 04             	shl    $0x4,%eax
f010d8a5:	89 c2                	mov    %eax,%edx
f010d8a7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010d8ad:	01 d0                	add    %edx,%eax
f010d8af:	48                   	dec    %eax
f010d8b0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f010d8b6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d8bc:	ba 00 00 00 00       	mov    $0x0,%edx
f010d8c1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f010d8c7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d8cd:	29 d0                	sub    %edx,%eax
f010d8cf:	01 d8                	add    %ebx,%eax
f010d8d1:	ba 00 f0 3f 01       	mov    $0x13ff000,%edx
f010d8d6:	29 c2                	sub    %eax,%edx
f010d8d8:	89 d0                	mov    %edx,%eax
f010d8da:	c1 e8 0c             	shr    $0xc,%eax
f010d8dd:	39 c1                	cmp    %eax,%ecx
f010d8df:	74 17                	je     f010d8f8 <test_kmalloc_nextfit+0x74d>
f010d8e1:	83 ec 04             	sub    $0x4,%esp
f010d8e4:	68 3c b4 11 f0       	push   $0xf011b43c
f010d8e9:	68 0f 01 00 00       	push   $0x10f
f010d8ee:	68 76 b1 11 f0       	push   $0xf011b176
f010d8f3:	e8 7e 28 ff ff       	call   f0100176 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f010d8f8:	e8 84 df ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d8fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d900:	e8 b9 ca ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d905:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f010d908:	83 ec 0c             	sub    $0xc,%esp
f010d90b:	68 00 fc 0f 00       	push   $0xffc00
f010d910:	e8 11 e5 ff ff       	call   f010be26 <kmalloc>
f010d915:	83 c4 10             	add    $0x10,%esp
f010d918:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f010d91e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010d925:	10 00 00 
f010d928:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d92d:	0f b6 d0             	movzbl %al,%edx
f010d930:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010d936:	01 d0                	add    %edx,%eax
f010d938:	48                   	dec    %eax
f010d939:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010d93f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d945:	ba 00 00 00 00       	mov    $0x0,%edx
f010d94a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010d950:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d956:	29 d0                	sub    %edx,%eax
f010d958:	89 c1                	mov    %eax,%ecx
f010d95a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010d961:	10 00 00 
f010d964:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010d969:	0f b6 c0             	movzbl %al,%eax
f010d96c:	c1 e0 04             	shl    $0x4,%eax
f010d96f:	89 c2                	mov    %eax,%edx
f010d971:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010d977:	01 d0                	add    %edx,%eax
f010d979:	48                   	dec    %eax
f010d97a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010d980:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d986:	ba 00 00 00 00       	mov    $0x0,%edx
f010d98b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010d991:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d997:	29 d0                	sub    %edx,%eax
f010d999:	01 c8                	add    %ecx,%eax
f010d99b:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010d9a1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d9a7:	39 c2                	cmp    %eax,%edx
f010d9a9:	74 17                	je     f010d9c2 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f010d9ab:	83 ec 04             	sub    $0x4,%esp
f010d9ae:	68 7c b4 11 f0       	push   $0xf011b47c
f010d9b3:	68 16 01 00 00       	push   $0x116
f010d9b8:	68 76 b1 11 f0       	push   $0xf011b176
f010d9bd:	e8 b4 27 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d9c2:	e8 ba de ff ff       	call   f010b881 <pf_calculate_free_frames>
f010d9c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d9ca:	74 17                	je     f010d9e3 <test_kmalloc_nextfit+0x838>
f010d9cc:	83 ec 04             	sub    $0x4,%esp
f010d9cf:	68 88 b1 11 f0       	push   $0xf011b188
f010d9d4:	68 17 01 00 00       	push   $0x117
f010d9d9:	68 76 b1 11 f0       	push   $0xf011b176
f010d9de:	e8 93 27 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010d9e3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d9e6:	e8 d3 c9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010d9eb:	29 c3                	sub    %eax,%ebx
f010d9ed:	89 d8                	mov    %ebx,%eax
f010d9ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f010d9f4:	74 17                	je     f010da0d <test_kmalloc_nextfit+0x862>
f010d9f6:	83 ec 04             	sub    $0x4,%esp
f010d9f9:	68 2b b4 11 f0       	push   $0xf011b42b
f010d9fe:	68 18 01 00 00       	push   $0x118
f010da03:	68 76 b1 11 f0       	push   $0xf011b176
f010da08:	e8 69 27 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010da0d:	e8 6f de ff ff       	call   f010b881 <pf_calculate_free_frames>
f010da12:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010da15:	e8 a4 c9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010da1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f010da1d:	83 ec 0c             	sub    $0xc,%esp
f010da20:	68 00 04 00 00       	push   $0x400
f010da25:	e8 fc e3 ff ff       	call   f010be26 <kmalloc>
f010da2a:	83 c4 10             	add    $0x10,%esp
f010da2d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f010da33:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010da3a:	10 00 00 
f010da3d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010da42:	0f b6 d0             	movzbl %al,%edx
f010da45:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010da4b:	01 d0                	add    %edx,%eax
f010da4d:	48                   	dec    %eax
f010da4e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010da54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010da5a:	ba 00 00 00 00       	mov    $0x0,%edx
f010da5f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010da65:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010da6b:	29 d0                	sub    %edx,%eax
f010da6d:	89 c1                	mov    %eax,%ecx
f010da6f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010da76:	10 00 00 
f010da79:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010da7e:	0f b6 c0             	movzbl %al,%eax
f010da81:	c1 e0 04             	shl    $0x4,%eax
f010da84:	89 c2                	mov    %eax,%edx
f010da86:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010da8c:	01 d0                	add    %edx,%eax
f010da8e:	48                   	dec    %eax
f010da8f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010da95:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010da9b:	ba 00 00 00 00       	mov    $0x0,%edx
f010daa0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010daa6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010daac:	29 d0                	sub    %edx,%eax
f010daae:	01 c8                	add    %ecx,%eax
f010dab0:	8d 90 00 00 10 f6    	lea    -0x9f00000(%eax),%edx
f010dab6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dabc:	39 c2                	cmp    %eax,%edx
f010dabe:	74 17                	je     f010dad7 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f010dac0:	83 ec 04             	sub    $0x4,%esp
f010dac3:	68 7c b4 11 f0       	push   $0xf011b47c
f010dac8:	68 1e 01 00 00       	push   $0x11e
f010dacd:	68 76 b1 11 f0       	push   $0xf011b176
f010dad2:	e8 9f 26 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dad7:	e8 a5 dd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dadc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dadf:	74 17                	je     f010daf8 <test_kmalloc_nextfit+0x94d>
f010dae1:	83 ec 04             	sub    $0x4,%esp
f010dae4:	68 88 b1 11 f0       	push   $0xf011b188
f010dae9:	68 1f 01 00 00       	push   $0x11f
f010daee:	68 76 b1 11 f0       	push   $0xf011b176
f010daf3:	e8 7e 26 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010daf8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dafb:	e8 be c8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010db00:	29 c3                	sub    %eax,%ebx
f010db02:	89 d8                	mov    %ebx,%eax
f010db04:	83 f8 01             	cmp    $0x1,%eax
f010db07:	74 17                	je     f010db20 <test_kmalloc_nextfit+0x975>
f010db09:	83 ec 04             	sub    $0x4,%esp
f010db0c:	68 2b b4 11 f0       	push   $0xf011b42b
f010db11:	68 20 01 00 00       	push   $0x120
f010db16:	68 76 b1 11 f0       	push   $0xf011b176
f010db1b:	e8 56 26 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010db20:	e8 5c dd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010db25:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010db28:	e8 91 c8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010db2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f010db30:	83 ec 0c             	sub    $0xc,%esp
f010db33:	68 00 00 50 00       	push   $0x500000
f010db38:	e8 e9 e2 ff ff       	call   f010be26 <kmalloc>
f010db3d:	83 c4 10             	add    $0x10,%esp
f010db40:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f010db46:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010db4d:	10 00 00 
f010db50:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010db55:	0f b6 d0             	movzbl %al,%edx
f010db58:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010db5e:	01 d0                	add    %edx,%eax
f010db60:	48                   	dec    %eax
f010db61:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010db67:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010db6d:	ba 00 00 00 00       	mov    $0x0,%edx
f010db72:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010db78:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010db7e:	29 d0                	sub    %edx,%eax
f010db80:	89 c1                	mov    %eax,%ecx
f010db82:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f010db89:	10 00 00 
f010db8c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010db91:	0f b6 c0             	movzbl %al,%eax
f010db94:	c1 e0 04             	shl    $0x4,%eax
f010db97:	89 c2                	mov    %eax,%edx
f010db99:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010db9f:	01 d0                	add    %edx,%eax
f010dba1:	48                   	dec    %eax
f010dba2:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f010dba8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010dbae:	ba 00 00 00 00       	mov    $0x0,%edx
f010dbb3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f010dbb9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010dbbf:	29 d0                	sub    %edx,%eax
f010dbc1:	01 c8                	add    %ecx,%eax
f010dbc3:	8d 90 00 00 40 f7    	lea    -0x8c00000(%eax),%edx
f010dbc9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dbcf:	39 c2                	cmp    %eax,%edx
f010dbd1:	74 17                	je     f010dbea <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f010dbd3:	83 ec 04             	sub    $0x4,%esp
f010dbd6:	68 7c b4 11 f0       	push   $0xf011b47c
f010dbdb:	68 26 01 00 00       	push   $0x126
f010dbe0:	68 76 b1 11 f0       	push   $0xf011b176
f010dbe5:	e8 8c 25 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dbea:	e8 92 dc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dbef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dbf2:	74 17                	je     f010dc0b <test_kmalloc_nextfit+0xa60>
f010dbf4:	83 ec 04             	sub    $0x4,%esp
f010dbf7:	68 88 b1 11 f0       	push   $0xf011b188
f010dbfc:	68 27 01 00 00       	push   $0x127
f010dc01:	68 76 b1 11 f0       	push   $0xf011b176
f010dc06:	e8 6b 25 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010dc0b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dc0e:	e8 ab c7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dc13:	29 c3                	sub    %eax,%ebx
f010dc15:	89 d8                	mov    %ebx,%eax
f010dc17:	3d 00 05 00 00       	cmp    $0x500,%eax
f010dc1c:	74 17                	je     f010dc35 <test_kmalloc_nextfit+0xa8a>
f010dc1e:	83 ec 04             	sub    $0x4,%esp
f010dc21:	68 2b b4 11 f0       	push   $0xf011b42b
f010dc26:	68 28 01 00 00       	push   $0x128
f010dc2b:	68 76 b1 11 f0       	push   $0xf011b176
f010dc30:	e8 41 25 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dc35:	e8 47 dc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dc3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dc3d:	e8 7c c7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dc42:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f010dc45:	83 ec 0c             	sub    $0xc,%esp
f010dc48:	68 00 00 10 00       	push   $0x100000
f010dc4d:	e8 d4 e1 ff ff       	call   f010be26 <kmalloc>
f010dc52:	83 c4 10             	add    $0x10,%esp
f010dc55:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f010dc5b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f010dc62:	10 00 00 
f010dc65:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010dc6a:	0f b6 d0             	movzbl %al,%edx
f010dc6d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010dc73:	01 d0                	add    %edx,%eax
f010dc75:	48                   	dec    %eax
f010dc76:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f010dc7c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010dc82:	ba 00 00 00 00       	mov    $0x0,%edx
f010dc87:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f010dc8d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010dc93:	29 d0                	sub    %edx,%eax
f010dc95:	89 c1                	mov    %eax,%ecx
f010dc97:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f010dc9e:	10 00 00 
f010dca1:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010dca6:	0f b6 c0             	movzbl %al,%eax
f010dca9:	c1 e0 04             	shl    $0x4,%eax
f010dcac:	89 c2                	mov    %eax,%edx
f010dcae:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010dcb4:	01 d0                	add    %edx,%eax
f010dcb6:	48                   	dec    %eax
f010dcb7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f010dcbd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010dcc3:	ba 00 00 00 00       	mov    $0x0,%edx
f010dcc8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f010dcce:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010dcd4:	29 d0                	sub    %edx,%eax
f010dcd6:	01 c8                	add    %ecx,%eax
f010dcd8:	8d 90 00 00 90 f7    	lea    -0x8700000(%eax),%edx
f010dcde:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dce4:	39 c2                	cmp    %eax,%edx
f010dce6:	74 17                	je     f010dcff <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f010dce8:	83 ec 04             	sub    $0x4,%esp
f010dceb:	68 7c b4 11 f0       	push   $0xf011b47c
f010dcf0:	68 2e 01 00 00       	push   $0x12e
f010dcf5:	68 76 b1 11 f0       	push   $0xf011b176
f010dcfa:	e8 77 24 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dcff:	e8 7d db ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dd04:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dd07:	74 17                	je     f010dd20 <test_kmalloc_nextfit+0xb75>
f010dd09:	83 ec 04             	sub    $0x4,%esp
f010dd0c:	68 88 b1 11 f0       	push   $0xf011b188
f010dd11:	68 2f 01 00 00       	push   $0x12f
f010dd16:	68 76 b1 11 f0       	push   $0xf011b176
f010dd1b:	e8 56 24 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010dd20:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dd23:	e8 96 c6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dd28:	29 c3                	sub    %eax,%ebx
f010dd2a:	89 d8                	mov    %ebx,%eax
f010dd2c:	3d 00 01 00 00       	cmp    $0x100,%eax
f010dd31:	74 17                	je     f010dd4a <test_kmalloc_nextfit+0xb9f>
f010dd33:	83 ec 04             	sub    $0x4,%esp
f010dd36:	68 2b b4 11 f0       	push   $0xf011b42b
f010dd3b:	68 30 01 00 00       	push   $0x130
f010dd40:	68 76 b1 11 f0       	push   $0xf011b176
f010dd45:	e8 2c 24 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dd4a:	e8 32 db ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dd4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dd52:	e8 67 c6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dd57:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f010dd5a:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010dd60:	83 ec 0c             	sub    $0xc,%esp
f010dd63:	50                   	push   %eax
f010dd64:	e8 4e e1 ff ff       	call   f010beb7 <kfree>
f010dd69:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dd6c:	e8 10 db ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dd71:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dd74:	74 17                	je     f010dd8d <test_kmalloc_nextfit+0xbe2>
f010dd76:	83 ec 04             	sub    $0x4,%esp
f010dd79:	68 88 b1 11 f0       	push   $0xf011b188
f010dd7e:	68 35 01 00 00       	push   $0x135
f010dd83:	68 76 b1 11 f0       	push   $0xf011b176
f010dd88:	e8 e9 23 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010dd8d:	e8 2c c6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dd92:	89 c2                	mov    %eax,%edx
f010dd94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd97:	29 c2                	sub    %eax,%edx
f010dd99:	89 d0                	mov    %edx,%eax
f010dd9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f010dda0:	74 17                	je     f010ddb9 <test_kmalloc_nextfit+0xc0e>
f010dda2:	83 ec 04             	sub    $0x4,%esp
f010dda5:	68 3c b4 11 f0       	push   $0xf011b43c
f010ddaa:	68 36 01 00 00       	push   $0x136
f010ddaf:	68 76 b1 11 f0       	push   $0xf011b176
f010ddb4:	e8 bd 23 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ddb9:	e8 c3 da ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ddbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ddc1:	e8 f8 c5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ddc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f010ddc9:	83 ec 0c             	sub    $0xc,%esp
f010ddcc:	68 00 04 00 00       	push   $0x400
f010ddd1:	e8 50 e0 ff ff       	call   f010be26 <kmalloc>
f010ddd6:	83 c4 10             	add    $0x10,%esp
f010ddd9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f010dddf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f010dde6:	10 00 00 
f010dde9:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ddee:	0f b6 d0             	movzbl %al,%edx
f010ddf1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010ddf7:	01 d0                	add    %edx,%eax
f010ddf9:	48                   	dec    %eax
f010ddfa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f010de00:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010de06:	ba 00 00 00 00       	mov    $0x0,%edx
f010de0b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f010de11:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010de17:	29 d0                	sub    %edx,%eax
f010de19:	89 c1                	mov    %eax,%ecx
f010de1b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f010de22:	10 00 00 
f010de25:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010de2a:	0f b6 c0             	movzbl %al,%eax
f010de2d:	c1 e0 04             	shl    $0x4,%eax
f010de30:	89 c2                	mov    %eax,%edx
f010de32:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010de38:	01 d0                	add    %edx,%eax
f010de3a:	48                   	dec    %eax
f010de3b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f010de41:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010de47:	ba 00 00 00 00       	mov    $0x0,%edx
f010de4c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f010de52:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010de58:	29 d0                	sub    %edx,%eax
f010de5a:	01 c8                	add    %ecx,%eax
f010de5c:	8d 90 00 00 e0 f7    	lea    -0x8200000(%eax),%edx
f010de62:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010de68:	39 c2                	cmp    %eax,%edx
f010de6a:	74 17                	je     f010de83 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f010de6c:	83 ec 04             	sub    $0x4,%esp
f010de6f:	68 7c b4 11 f0       	push   $0xf011b47c
f010de74:	68 3c 01 00 00       	push   $0x13c
f010de79:	68 76 b1 11 f0       	push   $0xf011b176
f010de7e:	e8 f3 22 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010de83:	e8 f9 d9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010de88:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010de8b:	74 17                	je     f010dea4 <test_kmalloc_nextfit+0xcf9>
f010de8d:	83 ec 04             	sub    $0x4,%esp
f010de90:	68 88 b1 11 f0       	push   $0xf011b188
f010de95:	68 3d 01 00 00       	push   $0x13d
f010de9a:	68 76 b1 11 f0       	push   $0xf011b176
f010de9f:	e8 d2 22 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010dea4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dea7:	e8 12 c5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010deac:	29 c3                	sub    %eax,%ebx
f010deae:	89 d8                	mov    %ebx,%eax
f010deb0:	83 f8 01             	cmp    $0x1,%eax
f010deb3:	74 17                	je     f010decc <test_kmalloc_nextfit+0xd21>
f010deb5:	83 ec 04             	sub    $0x4,%esp
f010deb8:	68 2b b4 11 f0       	push   $0xf011b42b
f010debd:	68 3e 01 00 00       	push   $0x13e
f010dec2:	68 76 b1 11 f0       	push   $0xf011b176
f010dec7:	e8 aa 22 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010decc:	e8 b0 d9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ded1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ded4:	e8 e5 c4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ded9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f010dedc:	83 ec 0c             	sub    $0xc,%esp
f010dedf:	68 00 e0 1f 00       	push   $0x1fe000
f010dee4:	e8 3d df ff ff       	call   f010be26 <kmalloc>
f010dee9:	83 c4 10             	add    $0x10,%esp
f010deec:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f010def2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f010def9:	10 00 00 
f010defc:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010df01:	0f b6 d0             	movzbl %al,%edx
f010df04:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010df0a:	01 d0                	add    %edx,%eax
f010df0c:	48                   	dec    %eax
f010df0d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f010df13:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010df19:	ba 00 00 00 00       	mov    $0x0,%edx
f010df1e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f010df24:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010df2a:	29 d0                	sub    %edx,%eax
f010df2c:	89 c1                	mov    %eax,%ecx
f010df2e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f010df35:	10 00 00 
f010df38:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010df3d:	0f b6 c0             	movzbl %al,%eax
f010df40:	c1 e0 04             	shl    $0x4,%eax
f010df43:	89 c2                	mov    %eax,%edx
f010df45:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010df4b:	01 d0                	add    %edx,%eax
f010df4d:	48                   	dec    %eax
f010df4e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f010df54:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010df5a:	ba 00 00 00 00       	mov    $0x0,%edx
f010df5f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f010df65:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010df6b:	29 d0                	sub    %edx,%eax
f010df6d:	01 c8                	add    %ecx,%eax
f010df6f:	8d 90 00 10 e0 f7    	lea    -0x81ff000(%eax),%edx
f010df75:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010df7b:	39 c2                	cmp    %eax,%edx
f010df7d:	74 17                	je     f010df96 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f010df7f:	83 ec 04             	sub    $0x4,%esp
f010df82:	68 7c b4 11 f0       	push   $0xf011b47c
f010df87:	68 44 01 00 00       	push   $0x144
f010df8c:	68 76 b1 11 f0       	push   $0xf011b176
f010df91:	e8 e0 21 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010df96:	e8 e6 d8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010df9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010df9e:	74 17                	je     f010dfb7 <test_kmalloc_nextfit+0xe0c>
f010dfa0:	83 ec 04             	sub    $0x4,%esp
f010dfa3:	68 88 b1 11 f0       	push   $0xf011b188
f010dfa8:	68 45 01 00 00       	push   $0x145
f010dfad:	68 76 b1 11 f0       	push   $0xf011b176
f010dfb2:	e8 bf 21 ff ff       	call   f0100176 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010dfb7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dfba:	e8 ff c3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dfbf:	29 c3                	sub    %eax,%ebx
f010dfc1:	89 d8                	mov    %ebx,%eax
f010dfc3:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f010dfc8:	74 17                	je     f010dfe1 <test_kmalloc_nextfit+0xe36>
f010dfca:	83 ec 04             	sub    $0x4,%esp
f010dfcd:	68 2b b4 11 f0       	push   $0xf011b42b
f010dfd2:	68 47 01 00 00       	push   $0x147
f010dfd7:	68 76 b1 11 f0       	push   $0xf011b176
f010dfdc:	e8 95 21 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dfe1:	e8 9b d8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010dfe6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dfe9:	e8 d0 c3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010dfee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f010dff1:	83 ec 0c             	sub    $0xc,%esp
f010dff4:	68 00 00 08 00       	push   $0x80000
f010dff9:	e8 28 de ff ff       	call   f010be26 <kmalloc>
f010dffe:	83 c4 10             	add    $0x10,%esp
f010e001:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f010e007:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f010e00e:	10 00 00 
f010e011:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e016:	0f b6 d0             	movzbl %al,%edx
f010e019:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e01f:	01 d0                	add    %edx,%eax
f010e021:	48                   	dec    %eax
f010e022:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f010e028:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e02e:	ba 00 00 00 00       	mov    $0x0,%edx
f010e033:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f010e039:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e03f:	29 d0                	sub    %edx,%eax
f010e041:	89 c1                	mov    %eax,%ecx
f010e043:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f010e04a:	10 00 00 
f010e04d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e052:	0f b6 c0             	movzbl %al,%eax
f010e055:	c1 e0 04             	shl    $0x4,%eax
f010e058:	89 c2                	mov    %eax,%edx
f010e05a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010e060:	01 d0                	add    %edx,%eax
f010e062:	48                   	dec    %eax
f010e063:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f010e069:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010e06f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e074:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f010e07a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010e080:	29 d0                	sub    %edx,%eax
f010e082:	01 c8                	add    %ecx,%eax
f010e084:	8d 90 00 00 80 f8    	lea    -0x7800000(%eax),%edx
f010e08a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e090:	39 c2                	cmp    %eax,%edx
f010e092:	74 17                	je     f010e0ab <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f010e094:	83 ec 04             	sub    $0x4,%esp
f010e097:	68 7c b4 11 f0       	push   $0xf011b47c
f010e09c:	68 4d 01 00 00       	push   $0x14d
f010e0a1:	68 76 b1 11 f0       	push   $0xf011b176
f010e0a6:	e8 cb 20 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e0ab:	e8 d1 d7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e0b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e0b3:	74 17                	je     f010e0cc <test_kmalloc_nextfit+0xf21>
f010e0b5:	83 ec 04             	sub    $0x4,%esp
f010e0b8:	68 88 b1 11 f0       	push   $0xf011b188
f010e0bd:	68 4e 01 00 00       	push   $0x14e
f010e0c2:	68 76 b1 11 f0       	push   $0xf011b176
f010e0c7:	e8 aa 20 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010e0cc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e0cf:	e8 ea c2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e0d4:	29 c3                	sub    %eax,%ebx
f010e0d6:	89 d8                	mov    %ebx,%eax
f010e0d8:	3d 80 00 00 00       	cmp    $0x80,%eax
f010e0dd:	74 17                	je     f010e0f6 <test_kmalloc_nextfit+0xf4b>
f010e0df:	83 ec 04             	sub    $0x4,%esp
f010e0e2:	68 2b b4 11 f0       	push   $0xf011b42b
f010e0e7:	68 4f 01 00 00       	push   $0x14f
f010e0ec:	68 76 b1 11 f0       	push   $0xf011b176
f010e0f1:	e8 80 20 ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE1: (next fit without looping back) succeeded...\n") ;
f010e0f6:	83 ec 0c             	sub    $0xc,%esp
f010e0f9:	68 9c b4 11 f0       	push   $0xf011b49c
f010e0fe:	e8 93 8c ff ff       	call   f0106d96 <cprintf>
f010e103:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f010e106:	e8 76 d7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e10b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e10e:	e8 ab c2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e113:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f010e116:	83 ec 0c             	sub    $0xc,%esp
f010e119:	68 00 00 38 00       	push   $0x380000
f010e11e:	e8 03 dd ff ff       	call   f010be26 <kmalloc>
f010e123:	83 c4 10             	add    $0x10,%esp
f010e126:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f010e12c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f010e133:	10 00 00 
f010e136:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e13b:	0f b6 d0             	movzbl %al,%edx
f010e13e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010e144:	01 d0                	add    %edx,%eax
f010e146:	48                   	dec    %eax
f010e147:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f010e14d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010e153:	ba 00 00 00 00       	mov    $0x0,%edx
f010e158:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f010e15e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010e164:	29 d0                	sub    %edx,%eax
f010e166:	89 c1                	mov    %eax,%ecx
f010e168:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f010e16f:	10 00 00 
f010e172:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e177:	0f b6 c0             	movzbl %al,%eax
f010e17a:	c1 e0 04             	shl    $0x4,%eax
f010e17d:	89 c2                	mov    %eax,%edx
f010e17f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f010e185:	01 d0                	add    %edx,%eax
f010e187:	48                   	dec    %eax
f010e188:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f010e18e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010e194:	ba 00 00 00 00       	mov    $0x0,%edx
f010e199:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f010e19f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010e1a5:	29 d0                	sub    %edx,%eax
f010e1a7:	01 c8                	add    %ecx,%eax
f010e1a9:	8d 90 00 00 40 f6    	lea    -0x9c00000(%eax),%edx
f010e1af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e1b5:	39 c2                	cmp    %eax,%edx
f010e1b7:	74 17                	je     f010e1d0 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f010e1b9:	83 ec 04             	sub    $0x4,%esp
f010e1bc:	68 7c b4 11 f0       	push   $0xf011b47c
f010e1c1:	68 59 01 00 00       	push   $0x159
f010e1c6:	68 76 b1 11 f0       	push   $0xf011b176
f010e1cb:	e8 a6 1f ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e1d0:	e8 ac d6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e1d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e1d8:	74 17                	je     f010e1f1 <test_kmalloc_nextfit+0x1046>
f010e1da:	83 ec 04             	sub    $0x4,%esp
f010e1dd:	68 88 b1 11 f0       	push   $0xf011b188
f010e1e2:	68 5a 01 00 00       	push   $0x15a
f010e1e7:	68 76 b1 11 f0       	push   $0xf011b176
f010e1ec:	e8 85 1f ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010e1f1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e1f4:	e8 c5 c1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e1f9:	29 c3                	sub    %eax,%ebx
f010e1fb:	89 d8                	mov    %ebx,%eax
f010e1fd:	3d 80 03 00 00       	cmp    $0x380,%eax
f010e202:	74 17                	je     f010e21b <test_kmalloc_nextfit+0x1070>
f010e204:	83 ec 04             	sub    $0x4,%esp
f010e207:	68 2b b4 11 f0       	push   $0xf011b42b
f010e20c:	68 5b 01 00 00       	push   $0x15b
f010e211:	68 76 b1 11 f0       	push   $0xf011b176
f010e216:	e8 5b 1f ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e21b:	e8 61 d6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e220:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e223:	e8 96 c1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e228:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f010e22b:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f010e231:	83 ec 0c             	sub    $0xc,%esp
f010e234:	50                   	push   %eax
f010e235:	e8 7d dc ff ff       	call   f010beb7 <kfree>
f010e23a:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e23d:	e8 3f d6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e242:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e245:	74 17                	je     f010e25e <test_kmalloc_nextfit+0x10b3>
f010e247:	83 ec 04             	sub    $0x4,%esp
f010e24a:	68 88 b1 11 f0       	push   $0xf011b188
f010e24f:	68 60 01 00 00       	push   $0x160
f010e254:	68 76 b1 11 f0       	push   $0xf011b176
f010e259:	e8 18 1f ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010e25e:	e8 5b c1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e263:	89 c2                	mov    %eax,%edx
f010e265:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e268:	29 c2                	sub    %eax,%edx
f010e26a:	89 d0                	mov    %edx,%eax
f010e26c:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e271:	74 17                	je     f010e28a <test_kmalloc_nextfit+0x10df>
f010e273:	83 ec 04             	sub    $0x4,%esp
f010e276:	68 3c b4 11 f0       	push   $0xf011b43c
f010e27b:	68 61 01 00 00       	push   $0x161
f010e280:	68 76 b1 11 f0       	push   $0xf011b176
f010e285:	e8 ec 1e ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e28a:	e8 f2 d5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e28f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e292:	e8 27 c1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e297:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f010e29a:	83 ec 0c             	sub    $0xc,%esp
f010e29d:	68 00 fc 3f 00       	push   $0x3ffc00
f010e2a2:	e8 7f db ff ff       	call   f010be26 <kmalloc>
f010e2a7:	83 c4 10             	add    $0x10,%esp
f010e2aa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f010e2b0:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f010e2b7:	10 00 00 
f010e2ba:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e2bf:	0f b6 d0             	movzbl %al,%edx
f010e2c2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010e2c8:	01 d0                	add    %edx,%eax
f010e2ca:	48                   	dec    %eax
f010e2cb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f010e2d1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010e2d7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2dc:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f010e2e2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010e2e8:	29 d0                	sub    %edx,%eax
f010e2ea:	89 c1                	mov    %eax,%ecx
f010e2ec:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f010e2f3:	10 00 00 
f010e2f6:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e2fb:	0f b6 c0             	movzbl %al,%eax
f010e2fe:	c1 e0 04             	shl    $0x4,%eax
f010e301:	89 c2                	mov    %eax,%edx
f010e303:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010e309:	01 d0                	add    %edx,%eax
f010e30b:	48                   	dec    %eax
f010e30c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f010e312:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010e318:	ba 00 00 00 00       	mov    $0x0,%edx
f010e31d:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f010e323:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010e329:	29 d0                	sub    %edx,%eax
f010e32b:	01 c8                	add    %ecx,%eax
f010e32d:	8d 90 00 00 00 f9    	lea    -0x7000000(%eax),%edx
f010e333:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e339:	39 c2                	cmp    %eax,%edx
f010e33b:	74 17                	je     f010e354 <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f010e33d:	83 ec 04             	sub    $0x4,%esp
f010e340:	68 7c b4 11 f0       	push   $0xf011b47c
f010e345:	68 67 01 00 00       	push   $0x167
f010e34a:	68 76 b1 11 f0       	push   $0xf011b176
f010e34f:	e8 22 1e ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e354:	e8 28 d5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e359:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e35c:	74 17                	je     f010e375 <test_kmalloc_nextfit+0x11ca>
f010e35e:	83 ec 04             	sub    $0x4,%esp
f010e361:	68 88 b1 11 f0       	push   $0xf011b188
f010e366:	68 68 01 00 00       	push   $0x168
f010e36b:	68 76 b1 11 f0       	push   $0xf011b176
f010e370:	e8 01 1e ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010e375:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e378:	e8 41 c0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e37d:	29 c3                	sub    %eax,%ebx
f010e37f:	89 d8                	mov    %ebx,%eax
f010e381:	3d 00 04 00 00       	cmp    $0x400,%eax
f010e386:	74 17                	je     f010e39f <test_kmalloc_nextfit+0x11f4>
f010e388:	83 ec 04             	sub    $0x4,%esp
f010e38b:	68 2b b4 11 f0       	push   $0xf011b42b
f010e390:	68 69 01 00 00       	push   $0x169
f010e395:	68 76 b1 11 f0       	push   $0xf011b176
f010e39a:	e8 d7 1d ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) succeeded...\n") ;
f010e39f:	83 ec 0c             	sub    $0xc,%esp
f010e3a2:	68 d4 b4 11 f0       	push   $0xf011b4d4
f010e3a7:	e8 ea 89 ff ff       	call   f0106d96 <cprintf>
f010e3ac:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f010e3af:	e8 cd d4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e3b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e3b7:	e8 02 c0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e3bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f010e3bf:	83 ec 0c             	sub    $0xc,%esp
f010e3c2:	68 00 00 60 00       	push   $0x600000
f010e3c7:	e8 5a da ff ff       	call   f010be26 <kmalloc>
f010e3cc:	83 c4 10             	add    $0x10,%esp
f010e3cf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f010e3d5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e3db:	85 c0                	test   %eax,%eax
f010e3dd:	74 17                	je     f010e3f6 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f010e3df:	83 ec 04             	sub    $0x4,%esp
f010e3e2:	68 7c b4 11 f0       	push   $0xf011b47c
f010e3e7:	68 73 01 00 00       	push   $0x173
f010e3ec:	68 76 b1 11 f0       	push   $0xf011b176
f010e3f1:	e8 80 1d ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e3f6:	e8 86 d4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e3fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e3fe:	74 17                	je     f010e417 <test_kmalloc_nextfit+0x126c>
f010e400:	83 ec 04             	sub    $0x4,%esp
f010e403:	68 88 b1 11 f0       	push   $0xf011b188
f010e408:	68 74 01 00 00       	push   $0x174
f010e40d:	68 76 b1 11 f0       	push   $0xf011b176
f010e412:	e8 5f 1d ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f010e417:	e8 a2 bf ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e41c:	89 c2                	mov    %eax,%edx
f010e41e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e421:	39 c2                	cmp    %eax,%edx
f010e423:	74 17                	je     f010e43c <test_kmalloc_nextfit+0x1291>
f010e425:	83 ec 04             	sub    $0x4,%esp
f010e428:	68 2b b4 11 f0       	push   $0xf011b42b
f010e42d:	68 75 01 00 00       	push   $0x175
f010e432:	68 76 b1 11 f0       	push   $0xf011b176
f010e437:	e8 3a 1d ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) succeeded...\n") ;
f010e43c:	83 ec 0c             	sub    $0xc,%esp
f010e43f:	68 08 b5 11 f0       	push   $0xf011b508
f010e444:	e8 4d 89 ff ff       	call   f0106d96 <cprintf>
f010e449:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f010e44c:	83 ec 0c             	sub    $0xc,%esp
f010e44f:	68 44 b5 11 f0       	push   $0xf011b544
f010e454:	e8 3d 89 ff ff       	call   f0106d96 <cprintf>
f010e459:	83 c4 10             	add    $0x10,%esp
	return 1;
f010e45c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010e461:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e464:	5b                   	pop    %ebx
f010e465:	5f                   	pop    %edi
f010e466:	5d                   	pop    %ebp
f010e467:	c3                   	ret    

f010e468 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f010e468:	55                   	push   %ebp
f010e469:	89 e5                	mov    %esp,%ebp
f010e46b:	57                   	push   %edi
f010e46c:	53                   	push   %ebx
f010e46d:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f010e473:	83 ec 0c             	sub    $0xc,%esp
f010e476:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010e47b:	e8 16 89 ff ff       	call   f0106d96 <cprintf>
f010e480:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010e483:	83 ec 0c             	sub    $0xc,%esp
f010e486:	68 e8 b0 11 f0       	push   $0xf011b0e8
f010e48b:	e8 06 89 ff ff       	call   f0106d96 <cprintf>
f010e490:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010e493:	83 ec 0c             	sub    $0xc,%esp
f010e496:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010e49b:	e8 f6 88 ff ff       	call   f0106d96 <cprintf>
f010e4a0:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010e4a3:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010e4a9:	b9 14 00 00 00       	mov    $0x14,%ecx
f010e4ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4b3:	89 d7                	mov    %edx,%edi
f010e4b5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010e4b7:	e8 02 bf ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e4bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e4bf:	e8 bd d3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e4c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f010e4c7:	83 ec 0c             	sub    $0xc,%esp
f010e4ca:	68 00 fc 2f 00       	push   $0x2ffc00
f010e4cf:	e8 52 d9 ff ff       	call   f010be26 <kmalloc>
f010e4d4:	83 c4 10             	add    $0x10,%esp
f010e4d7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010e4dd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e4e3:	89 c1                	mov    %eax,%ecx
f010e4e5:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010e4ec:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e4f1:	0f b6 d0             	movzbl %al,%edx
f010e4f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e4f7:	01 d0                	add    %edx,%eax
f010e4f9:	48                   	dec    %eax
f010e4fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010e4fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e500:	ba 00 00 00 00       	mov    $0x0,%edx
f010e505:	f7 75 ec             	divl   -0x14(%ebp)
f010e508:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e50b:	29 d0                	sub    %edx,%eax
f010e50d:	89 c3                	mov    %eax,%ebx
f010e50f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010e516:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e51b:	0f b6 c0             	movzbl %al,%eax
f010e51e:	c1 e0 04             	shl    $0x4,%eax
f010e521:	89 c2                	mov    %eax,%edx
f010e523:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e526:	01 d0                	add    %edx,%eax
f010e528:	48                   	dec    %eax
f010e529:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e52c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e52f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e534:	f7 75 e4             	divl   -0x1c(%ebp)
f010e537:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e53a:	29 d0                	sub    %edx,%eax
f010e53c:	01 d8                	add    %ebx,%eax
f010e53e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010e543:	39 c1                	cmp    %eax,%ecx
f010e545:	74 17                	je     f010e55e <test_kmalloc_bestfit1+0xf6>
f010e547:	83 ec 04             	sub    $0x4,%esp
f010e54a:	68 80 b5 11 f0       	push   $0xf011b580
f010e54f:	68 8f 01 00 00       	push   $0x18f
f010e554:	68 76 b1 11 f0       	push   $0xf011b176
f010e559:	e8 18 1c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e55e:	e8 1e d3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e563:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e566:	74 17                	je     f010e57f <test_kmalloc_bestfit1+0x117>
f010e568:	83 ec 04             	sub    $0x4,%esp
f010e56b:	68 88 b1 11 f0       	push   $0xf011b188
f010e570:	68 90 01 00 00       	push   $0x190
f010e575:	68 76 b1 11 f0       	push   $0xf011b176
f010e57a:	e8 f7 1b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e57f:	e8 3a be ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e584:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e587:	29 c2                	sub    %eax,%edx
f010e589:	89 d0                	mov    %edx,%eax
f010e58b:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e590:	74 17                	je     f010e5a9 <test_kmalloc_bestfit1+0x141>
f010e592:	83 ec 04             	sub    $0x4,%esp
f010e595:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010e59a:	68 91 01 00 00       	push   $0x191
f010e59f:	68 76 b1 11 f0       	push   $0xf011b176
f010e5a4:	e8 cd 1b ff ff       	call   f0100176 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010e5a9:	e8 10 be ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e5ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e5b1:	e8 cb d2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e5b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f010e5b9:	83 ec 0c             	sub    $0xc,%esp
f010e5bc:	68 00 fc 2f 00       	push   $0x2ffc00
f010e5c1:	e8 60 d8 ff ff       	call   f010be26 <kmalloc>
f010e5c6:	83 c4 10             	add    $0x10,%esp
f010e5c9:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f010e5cf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e5d5:	89 c1                	mov    %eax,%ecx
f010e5d7:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e5de:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e5e3:	0f b6 d0             	movzbl %al,%edx
f010e5e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e5e9:	01 d0                	add    %edx,%eax
f010e5eb:	48                   	dec    %eax
f010e5ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e5ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5f2:	ba 00 00 00 00       	mov    $0x0,%edx
f010e5f7:	f7 75 dc             	divl   -0x24(%ebp)
f010e5fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5fd:	29 d0                	sub    %edx,%eax
f010e5ff:	89 c3                	mov    %eax,%ebx
f010e601:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010e608:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e60d:	0f b6 c0             	movzbl %al,%eax
f010e610:	c1 e0 04             	shl    $0x4,%eax
f010e613:	89 c2                	mov    %eax,%edx
f010e615:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e618:	01 d0                	add    %edx,%eax
f010e61a:	48                   	dec    %eax
f010e61b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010e61e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e621:	ba 00 00 00 00       	mov    $0x0,%edx
f010e626:	f7 75 d4             	divl   -0x2c(%ebp)
f010e629:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e62c:	29 d0                	sub    %edx,%eax
f010e62e:	01 d8                	add    %ebx,%eax
f010e630:	2d 00 00 d0 09       	sub    $0x9d00000,%eax
f010e635:	39 c1                	cmp    %eax,%ecx
f010e637:	74 17                	je     f010e650 <test_kmalloc_bestfit1+0x1e8>
f010e639:	83 ec 04             	sub    $0x4,%esp
f010e63c:	68 80 b5 11 f0       	push   $0xf011b580
f010e641:	68 97 01 00 00       	push   $0x197
f010e646:	68 76 b1 11 f0       	push   $0xf011b176
f010e64b:	e8 26 1b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e650:	e8 2c d2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e655:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e658:	74 17                	je     f010e671 <test_kmalloc_bestfit1+0x209>
f010e65a:	83 ec 04             	sub    $0x4,%esp
f010e65d:	68 88 b1 11 f0       	push   $0xf011b188
f010e662:	68 98 01 00 00       	push   $0x198
f010e667:	68 76 b1 11 f0       	push   $0xf011b176
f010e66c:	e8 05 1b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e671:	e8 48 bd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e676:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e679:	29 c2                	sub    %eax,%edx
f010e67b:	89 d0                	mov    %edx,%eax
f010e67d:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e682:	74 17                	je     f010e69b <test_kmalloc_bestfit1+0x233>
f010e684:	83 ec 04             	sub    $0x4,%esp
f010e687:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010e68c:	68 99 01 00 00       	push   $0x199
f010e691:	68 76 b1 11 f0       	push   $0xf011b176
f010e696:	e8 db 1a ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010e69b:	e8 1e bd ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e6a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e6a3:	e8 d9 d1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e6a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f010e6ab:	83 ec 0c             	sub    $0xc,%esp
f010e6ae:	68 00 fc 1f 00       	push   $0x1ffc00
f010e6b3:	e8 6e d7 ff ff       	call   f010be26 <kmalloc>
f010e6b8:	83 c4 10             	add    $0x10,%esp
f010e6bb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f010e6c1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010e6c7:	89 c1                	mov    %eax,%ecx
f010e6c9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010e6d0:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e6d5:	0f b6 d0             	movzbl %al,%edx
f010e6d8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e6db:	01 d0                	add    %edx,%eax
f010e6dd:	48                   	dec    %eax
f010e6de:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010e6e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e6e4:	ba 00 00 00 00       	mov    $0x0,%edx
f010e6e9:	f7 75 cc             	divl   -0x34(%ebp)
f010e6ec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e6ef:	29 d0                	sub    %edx,%eax
f010e6f1:	89 c3                	mov    %eax,%ebx
f010e6f3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010e6fa:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e6ff:	0f b6 c0             	movzbl %al,%eax
f010e702:	c1 e0 04             	shl    $0x4,%eax
f010e705:	89 c2                	mov    %eax,%edx
f010e707:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e70a:	01 d0                	add    %edx,%eax
f010e70c:	48                   	dec    %eax
f010e70d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010e710:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e713:	ba 00 00 00 00       	mov    $0x0,%edx
f010e718:	f7 75 c4             	divl   -0x3c(%ebp)
f010e71b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e71e:	29 d0                	sub    %edx,%eax
f010e720:	01 d8                	add    %ebx,%eax
f010e722:	2d 00 00 a0 09       	sub    $0x9a00000,%eax
f010e727:	39 c1                	cmp    %eax,%ecx
f010e729:	74 17                	je     f010e742 <test_kmalloc_bestfit1+0x2da>
f010e72b:	83 ec 04             	sub    $0x4,%esp
f010e72e:	68 80 b5 11 f0       	push   $0xf011b580
f010e733:	68 9f 01 00 00       	push   $0x19f
f010e738:	68 76 b1 11 f0       	push   $0xf011b176
f010e73d:	e8 34 1a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e742:	e8 3a d1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e747:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e74a:	74 17                	je     f010e763 <test_kmalloc_bestfit1+0x2fb>
f010e74c:	83 ec 04             	sub    $0x4,%esp
f010e74f:	68 88 b1 11 f0       	push   $0xf011b188
f010e754:	68 a0 01 00 00       	push   $0x1a0
f010e759:	68 76 b1 11 f0       	push   $0xf011b176
f010e75e:	e8 13 1a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e763:	e8 56 bc ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e768:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e76b:	29 c2                	sub    %eax,%edx
f010e76d:	89 d0                	mov    %edx,%eax
f010e76f:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e774:	74 17                	je     f010e78d <test_kmalloc_bestfit1+0x325>
f010e776:	83 ec 04             	sub    $0x4,%esp
f010e779:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010e77e:	68 a1 01 00 00       	push   $0x1a1
f010e783:	68 76 b1 11 f0       	push   $0xf011b176
f010e788:	e8 e9 19 ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010e78d:	e8 2c bc ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e792:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e795:	e8 e7 d0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e79a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f010e79d:	83 ec 0c             	sub    $0xc,%esp
f010e7a0:	68 00 fc 1f 00       	push   $0x1ffc00
f010e7a5:	e8 7c d6 ff ff       	call   f010be26 <kmalloc>
f010e7aa:	83 c4 10             	add    $0x10,%esp
f010e7ad:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010e7b3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010e7b9:	89 c1                	mov    %eax,%ecx
f010e7bb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010e7c2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e7c7:	0f b6 d0             	movzbl %al,%edx
f010e7ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e7cd:	01 d0                	add    %edx,%eax
f010e7cf:	48                   	dec    %eax
f010e7d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010e7d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e7d6:	ba 00 00 00 00       	mov    $0x0,%edx
f010e7db:	f7 75 bc             	divl   -0x44(%ebp)
f010e7de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e7e1:	29 d0                	sub    %edx,%eax
f010e7e3:	89 c3                	mov    %eax,%ebx
f010e7e5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010e7ec:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e7f1:	0f b6 c0             	movzbl %al,%eax
f010e7f4:	c1 e0 04             	shl    $0x4,%eax
f010e7f7:	89 c2                	mov    %eax,%edx
f010e7f9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e7fc:	01 d0                	add    %edx,%eax
f010e7fe:	48                   	dec    %eax
f010e7ff:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010e802:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e805:	ba 00 00 00 00       	mov    $0x0,%edx
f010e80a:	f7 75 b4             	divl   -0x4c(%ebp)
f010e80d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e810:	29 d0                	sub    %edx,%eax
f010e812:	01 d8                	add    %ebx,%eax
f010e814:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010e819:	39 c1                	cmp    %eax,%ecx
f010e81b:	74 17                	je     f010e834 <test_kmalloc_bestfit1+0x3cc>
f010e81d:	83 ec 04             	sub    $0x4,%esp
f010e820:	68 80 b5 11 f0       	push   $0xf011b580
f010e825:	68 a7 01 00 00       	push   $0x1a7
f010e82a:	68 76 b1 11 f0       	push   $0xf011b176
f010e82f:	e8 42 19 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e834:	e8 48 d0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e839:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e83c:	74 17                	je     f010e855 <test_kmalloc_bestfit1+0x3ed>
f010e83e:	83 ec 04             	sub    $0x4,%esp
f010e841:	68 88 b1 11 f0       	push   $0xf011b188
f010e846:	68 a8 01 00 00       	push   $0x1a8
f010e84b:	68 76 b1 11 f0       	push   $0xf011b176
f010e850:	e8 21 19 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e855:	e8 64 bb ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e85a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e85d:	29 c2                	sub    %eax,%edx
f010e85f:	89 d0                	mov    %edx,%eax
f010e861:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e866:	74 17                	je     f010e87f <test_kmalloc_bestfit1+0x417>
f010e868:	83 ec 04             	sub    $0x4,%esp
f010e86b:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010e870:	68 a9 01 00 00       	push   $0x1a9
f010e875:	68 76 b1 11 f0       	push   $0xf011b176
f010e87a:	e8 f7 18 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e87f:	e8 3a bb ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e884:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e887:	e8 f5 cf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e88c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f010e88f:	83 ec 0c             	sub    $0xc,%esp
f010e892:	68 00 fc 0f 00       	push   $0xffc00
f010e897:	e8 8a d5 ff ff       	call   f010be26 <kmalloc>
f010e89c:	83 c4 10             	add    $0x10,%esp
f010e89f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f010e8a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010e8ab:	89 c1                	mov    %eax,%ecx
f010e8ad:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010e8b4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e8b9:	0f b6 d0             	movzbl %al,%edx
f010e8bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e8bf:	01 d0                	add    %edx,%eax
f010e8c1:	48                   	dec    %eax
f010e8c2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010e8c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8cd:	f7 75 ac             	divl   -0x54(%ebp)
f010e8d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e8d3:	29 d0                	sub    %edx,%eax
f010e8d5:	89 c3                	mov    %eax,%ebx
f010e8d7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010e8de:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e8e3:	0f b6 c0             	movzbl %al,%eax
f010e8e6:	c1 e0 04             	shl    $0x4,%eax
f010e8e9:	89 c2                	mov    %eax,%edx
f010e8eb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e8ee:	01 d0                	add    %edx,%eax
f010e8f0:	48                   	dec    %eax
f010e8f1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010e8f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e8f7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8fc:	f7 75 a4             	divl   -0x5c(%ebp)
f010e8ff:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e902:	29 d0                	sub    %edx,%eax
f010e904:	01 d8                	add    %ebx,%eax
f010e906:	2d 00 00 60 09       	sub    $0x9600000,%eax
f010e90b:	39 c1                	cmp    %eax,%ecx
f010e90d:	74 17                	je     f010e926 <test_kmalloc_bestfit1+0x4be>
f010e90f:	83 ec 04             	sub    $0x4,%esp
f010e912:	68 80 b5 11 f0       	push   $0xf011b580
f010e917:	68 af 01 00 00       	push   $0x1af
f010e91c:	68 76 b1 11 f0       	push   $0xf011b176
f010e921:	e8 50 18 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e926:	e8 56 cf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e92b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e92e:	74 17                	je     f010e947 <test_kmalloc_bestfit1+0x4df>
f010e930:	83 ec 04             	sub    $0x4,%esp
f010e933:	68 88 b1 11 f0       	push   $0xf011b188
f010e938:	68 b0 01 00 00       	push   $0x1b0
f010e93d:	68 76 b1 11 f0       	push   $0xf011b176
f010e942:	e8 2f 18 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010e947:	e8 72 ba ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e94c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e94f:	29 c2                	sub    %eax,%edx
f010e951:	89 d0                	mov    %edx,%eax
f010e953:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e958:	74 17                	je     f010e971 <test_kmalloc_bestfit1+0x509>
f010e95a:	83 ec 04             	sub    $0x4,%esp
f010e95d:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010e962:	68 b1 01 00 00       	push   $0x1b1
f010e967:	68 76 b1 11 f0       	push   $0xf011b176
f010e96c:	e8 05 18 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e971:	e8 48 ba ff ff       	call   f010a3be <sys_calculate_free_frames>
f010e976:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e979:	e8 03 cf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010e97e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f010e981:	83 ec 0c             	sub    $0xc,%esp
f010e984:	68 00 fc 0f 00       	push   $0xffc00
f010e989:	e8 98 d4 ff ff       	call   f010be26 <kmalloc>
f010e98e:	83 c4 10             	add    $0x10,%esp
f010e991:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010e997:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010e99d:	89 c1                	mov    %eax,%ecx
f010e99f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010e9a6:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e9ab:	0f b6 d0             	movzbl %al,%edx
f010e9ae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e9b1:	01 d0                	add    %edx,%eax
f010e9b3:	48                   	dec    %eax
f010e9b4:	89 45 98             	mov    %eax,-0x68(%ebp)
f010e9b7:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9bf:	f7 75 9c             	divl   -0x64(%ebp)
f010e9c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e9c5:	29 d0                	sub    %edx,%eax
f010e9c7:	89 c3                	mov    %eax,%ebx
f010e9c9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010e9d0:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010e9d5:	0f b6 c0             	movzbl %al,%eax
f010e9d8:	c1 e0 04             	shl    $0x4,%eax
f010e9db:	89 c2                	mov    %eax,%edx
f010e9dd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e9e0:	01 d0                	add    %edx,%eax
f010e9e2:	48                   	dec    %eax
f010e9e3:	89 45 90             	mov    %eax,-0x70(%ebp)
f010e9e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9ee:	f7 75 94             	divl   -0x6c(%ebp)
f010e9f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e9f4:	29 d0                	sub    %edx,%eax
f010e9f6:	01 d8                	add    %ebx,%eax
f010e9f8:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010e9fd:	39 c1                	cmp    %eax,%ecx
f010e9ff:	74 17                	je     f010ea18 <test_kmalloc_bestfit1+0x5b0>
f010ea01:	83 ec 04             	sub    $0x4,%esp
f010ea04:	68 80 b5 11 f0       	push   $0xf011b580
f010ea09:	68 b7 01 00 00       	push   $0x1b7
f010ea0e:	68 76 b1 11 f0       	push   $0xf011b176
f010ea13:	e8 5e 17 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ea18:	e8 64 ce ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ea1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea20:	74 17                	je     f010ea39 <test_kmalloc_bestfit1+0x5d1>
f010ea22:	83 ec 04             	sub    $0x4,%esp
f010ea25:	68 88 b1 11 f0       	push   $0xf011b188
f010ea2a:	68 b8 01 00 00       	push   $0x1b8
f010ea2f:	68 76 b1 11 f0       	push   $0xf011b176
f010ea34:	e8 3d 17 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010ea39:	e8 80 b9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ea3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea41:	29 c2                	sub    %eax,%edx
f010ea43:	89 d0                	mov    %edx,%eax
f010ea45:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ea4a:	74 17                	je     f010ea63 <test_kmalloc_bestfit1+0x5fb>
f010ea4c:	83 ec 04             	sub    $0x4,%esp
f010ea4f:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010ea54:	68 b9 01 00 00       	push   $0x1b9
f010ea59:	68 76 b1 11 f0       	push   $0xf011b176
f010ea5e:	e8 13 17 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010ea63:	e8 56 b9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ea68:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ea6b:	e8 11 ce ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ea70:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f010ea73:	83 ec 0c             	sub    $0xc,%esp
f010ea76:	68 00 fc 0f 00       	push   $0xffc00
f010ea7b:	e8 a6 d3 ff ff       	call   f010be26 <kmalloc>
f010ea80:	83 c4 10             	add    $0x10,%esp
f010ea83:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f010ea89:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ea8f:	89 c1                	mov    %eax,%ecx
f010ea91:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010ea98:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ea9d:	0f b6 d0             	movzbl %al,%edx
f010eaa0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010eaa3:	01 d0                	add    %edx,%eax
f010eaa5:	48                   	dec    %eax
f010eaa6:	89 45 88             	mov    %eax,-0x78(%ebp)
f010eaa9:	8b 45 88             	mov    -0x78(%ebp),%eax
f010eaac:	ba 00 00 00 00       	mov    $0x0,%edx
f010eab1:	f7 75 8c             	divl   -0x74(%ebp)
f010eab4:	8b 45 88             	mov    -0x78(%ebp),%eax
f010eab7:	29 d0                	sub    %edx,%eax
f010eab9:	89 c3                	mov    %eax,%ebx
f010eabb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010eac2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010eac7:	0f b6 c0             	movzbl %al,%eax
f010eaca:	c1 e0 04             	shl    $0x4,%eax
f010eacd:	89 c2                	mov    %eax,%edx
f010eacf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010ead2:	01 d0                	add    %edx,%eax
f010ead4:	48                   	dec    %eax
f010ead5:	89 45 80             	mov    %eax,-0x80(%ebp)
f010ead8:	8b 45 80             	mov    -0x80(%ebp),%eax
f010eadb:	ba 00 00 00 00       	mov    $0x0,%edx
f010eae0:	f7 75 84             	divl   -0x7c(%ebp)
f010eae3:	8b 45 80             	mov    -0x80(%ebp),%eax
f010eae6:	29 d0                	sub    %edx,%eax
f010eae8:	01 d8                	add    %ebx,%eax
f010eaea:	2d 00 00 40 09       	sub    $0x9400000,%eax
f010eaef:	39 c1                	cmp    %eax,%ecx
f010eaf1:	74 17                	je     f010eb0a <test_kmalloc_bestfit1+0x6a2>
f010eaf3:	83 ec 04             	sub    $0x4,%esp
f010eaf6:	68 80 b5 11 f0       	push   $0xf011b580
f010eafb:	68 bf 01 00 00       	push   $0x1bf
f010eb00:	68 76 b1 11 f0       	push   $0xf011b176
f010eb05:	e8 6c 16 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eb0a:	e8 72 cd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010eb0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb12:	74 17                	je     f010eb2b <test_kmalloc_bestfit1+0x6c3>
f010eb14:	83 ec 04             	sub    $0x4,%esp
f010eb17:	68 88 b1 11 f0       	push   $0xf011b188
f010eb1c:	68 c0 01 00 00       	push   $0x1c0
f010eb21:	68 76 b1 11 f0       	push   $0xf011b176
f010eb26:	e8 4b 16 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010eb2b:	e8 8e b8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010eb30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb33:	29 c2                	sub    %eax,%edx
f010eb35:	89 d0                	mov    %edx,%eax
f010eb37:	3d 00 01 00 00       	cmp    $0x100,%eax
f010eb3c:	74 17                	je     f010eb55 <test_kmalloc_bestfit1+0x6ed>
f010eb3e:	83 ec 04             	sub    $0x4,%esp
f010eb41:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010eb46:	68 c1 01 00 00       	push   $0x1c1
f010eb4b:	68 76 b1 11 f0       	push   $0xf011b176
f010eb50:	e8 21 16 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010eb55:	e8 64 b8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010eb5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eb5d:	e8 1f cd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010eb62:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f010eb65:	83 ec 0c             	sub    $0xc,%esp
f010eb68:	68 00 fc 0f 00       	push   $0xffc00
f010eb6d:	e8 b4 d2 ff ff       	call   f010be26 <kmalloc>
f010eb72:	83 c4 10             	add    $0x10,%esp
f010eb75:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f010eb7b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010eb81:	89 c1                	mov    %eax,%ecx
f010eb83:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010eb8a:	10 00 00 
f010eb8d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010eb92:	0f b6 d0             	movzbl %al,%edx
f010eb95:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010eb9b:	01 d0                	add    %edx,%eax
f010eb9d:	48                   	dec    %eax
f010eb9e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010eba4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ebaa:	ba 00 00 00 00       	mov    $0x0,%edx
f010ebaf:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010ebb5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ebbb:	29 d0                	sub    %edx,%eax
f010ebbd:	89 c3                	mov    %eax,%ebx
f010ebbf:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010ebc6:	10 00 00 
f010ebc9:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ebce:	0f b6 c0             	movzbl %al,%eax
f010ebd1:	c1 e0 04             	shl    $0x4,%eax
f010ebd4:	89 c2                	mov    %eax,%edx
f010ebd6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010ebdc:	01 d0                	add    %edx,%eax
f010ebde:	48                   	dec    %eax
f010ebdf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010ebe5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ebeb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ebf0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010ebf6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ebfc:	29 d0                	sub    %edx,%eax
f010ebfe:	01 d8                	add    %ebx,%eax
f010ec00:	2d 00 00 30 09       	sub    $0x9300000,%eax
f010ec05:	39 c1                	cmp    %eax,%ecx
f010ec07:	74 17                	je     f010ec20 <test_kmalloc_bestfit1+0x7b8>
f010ec09:	83 ec 04             	sub    $0x4,%esp
f010ec0c:	68 80 b5 11 f0       	push   $0xf011b580
f010ec11:	68 c7 01 00 00       	push   $0x1c7
f010ec16:	68 76 b1 11 f0       	push   $0xf011b176
f010ec1b:	e8 56 15 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ec20:	e8 5c cc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ec25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec28:	74 17                	je     f010ec41 <test_kmalloc_bestfit1+0x7d9>
f010ec2a:	83 ec 04             	sub    $0x4,%esp
f010ec2d:	68 88 b1 11 f0       	push   $0xf011b188
f010ec32:	68 c8 01 00 00       	push   $0x1c8
f010ec37:	68 76 b1 11 f0       	push   $0xf011b176
f010ec3c:	e8 35 15 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010ec41:	e8 78 b7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ec46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec49:	29 c2                	sub    %eax,%edx
f010ec4b:	89 d0                	mov    %edx,%eax
f010ec4d:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ec52:	74 17                	je     f010ec6b <test_kmalloc_bestfit1+0x803>
f010ec54:	83 ec 04             	sub    $0x4,%esp
f010ec57:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010ec5c:	68 c9 01 00 00       	push   $0x1c9
f010ec61:	68 76 b1 11 f0       	push   $0xf011b176
f010ec66:	e8 0b 15 ff ff       	call   f0100176 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010ec6b:	e8 4e b7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ec70:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ec73:	e8 09 cc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ec78:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f010ec7b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010ec81:	83 ec 0c             	sub    $0xc,%esp
f010ec84:	50                   	push   %eax
f010ec85:	e8 2d d2 ff ff       	call   f010beb7 <kfree>
f010ec8a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ec8d:	e8 ef cb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ec92:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec95:	74 17                	je     f010ecae <test_kmalloc_bestfit1+0x846>
f010ec97:	83 ec 04             	sub    $0x4,%esp
f010ec9a:	68 88 b1 11 f0       	push   $0xf011b188
f010ec9f:	68 d2 01 00 00       	push   $0x1d2
f010eca4:	68 76 b1 11 f0       	push   $0xf011b176
f010eca9:	e8 c8 14 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010ecae:	e8 0b b7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ecb3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010ecb6:	3d 00 03 00 00       	cmp    $0x300,%eax
f010ecbb:	74 17                	je     f010ecd4 <test_kmalloc_bestfit1+0x86c>
f010ecbd:	83 ec 04             	sub    $0x4,%esp
f010ecc0:	68 c3 b5 11 f0       	push   $0xf011b5c3
f010ecc5:	68 d3 01 00 00       	push   $0x1d3
f010ecca:	68 76 b1 11 f0       	push   $0xf011b176
f010eccf:	e8 a2 14 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010ecd4:	e8 e5 b6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ecd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ecdc:	e8 a0 cb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ece1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f010ece4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010ecea:	83 ec 0c             	sub    $0xc,%esp
f010eced:	50                   	push   %eax
f010ecee:	e8 c4 d1 ff ff       	call   f010beb7 <kfree>
f010ecf3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ecf6:	e8 86 cb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ecfb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecfe:	74 17                	je     f010ed17 <test_kmalloc_bestfit1+0x8af>
f010ed00:	83 ec 04             	sub    $0x4,%esp
f010ed03:	68 88 b1 11 f0       	push   $0xf011b188
f010ed08:	68 d9 01 00 00       	push   $0x1d9
f010ed0d:	68 76 b1 11 f0       	push   $0xf011b176
f010ed12:	e8 5f 14 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010ed17:	e8 a2 b6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ed1c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010ed1f:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ed24:	74 17                	je     f010ed3d <test_kmalloc_bestfit1+0x8d5>
f010ed26:	83 ec 04             	sub    $0x4,%esp
f010ed29:	68 c3 b5 11 f0       	push   $0xf011b5c3
f010ed2e:	68 da 01 00 00       	push   $0x1da
f010ed33:	68 76 b1 11 f0       	push   $0xf011b176
f010ed38:	e8 39 14 ff ff       	call   f0100176 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010ed3d:	e8 7c b6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ed42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ed45:	e8 37 cb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ed4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f010ed4d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010ed53:	83 ec 0c             	sub    $0xc,%esp
f010ed56:	50                   	push   %eax
f010ed57:	e8 5b d1 ff ff       	call   f010beb7 <kfree>
f010ed5c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ed5f:	e8 1d cb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ed64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed67:	74 17                	je     f010ed80 <test_kmalloc_bestfit1+0x918>
f010ed69:	83 ec 04             	sub    $0x4,%esp
f010ed6c:	68 88 b1 11 f0       	push   $0xf011b188
f010ed71:	68 e0 01 00 00       	push   $0x1e0
f010ed76:	68 76 b1 11 f0       	push   $0xf011b176
f010ed7b:	e8 f6 13 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010ed80:	e8 39 b6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ed85:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010ed88:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ed8d:	74 17                	je     f010eda6 <test_kmalloc_bestfit1+0x93e>
f010ed8f:	83 ec 04             	sub    $0x4,%esp
f010ed92:	68 c3 b5 11 f0       	push   $0xf011b5c3
f010ed97:	68 e1 01 00 00       	push   $0x1e1
f010ed9c:	68 76 b1 11 f0       	push   $0xf011b176
f010eda1:	e8 d0 13 ff ff       	call   f0100176 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010eda6:	e8 13 b6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010edab:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010edae:	e8 ce ca ff ff       	call   f010b881 <pf_calculate_free_frames>
f010edb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f010edb6:	83 ec 0c             	sub    $0xc,%esp
f010edb9:	68 00 00 08 00       	push   $0x80000
f010edbe:	e8 63 d0 ff ff       	call   f010be26 <kmalloc>
f010edc3:	83 c4 10             	add    $0x10,%esp
f010edc6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010edcc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010edd2:	89 c1                	mov    %eax,%ecx
f010edd4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010eddb:	10 00 00 
f010edde:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ede3:	0f b6 d0             	movzbl %al,%edx
f010ede6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010edec:	01 d0                	add    %edx,%eax
f010edee:	48                   	dec    %eax
f010edef:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010edf5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010edfb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee00:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010ee06:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010ee0c:	29 d0                	sub    %edx,%eax
f010ee0e:	89 c3                	mov    %eax,%ebx
f010ee10:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010ee17:	10 00 00 
f010ee1a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ee1f:	0f b6 c0             	movzbl %al,%eax
f010ee22:	c1 e0 04             	shl    $0x4,%eax
f010ee25:	89 c2                	mov    %eax,%edx
f010ee27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010ee2d:	01 d0                	add    %edx,%eax
f010ee2f:	48                   	dec    %eax
f010ee30:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010ee36:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010ee3c:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee41:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010ee47:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010ee4d:	29 d0                	sub    %edx,%eax
f010ee4f:	01 d8                	add    %ebx,%eax
f010ee51:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010ee56:	39 c1                	cmp    %eax,%ecx
f010ee58:	74 17                	je     f010ee71 <test_kmalloc_bestfit1+0xa09>
f010ee5a:	83 ec 04             	sub    $0x4,%esp
f010ee5d:	68 80 b5 11 f0       	push   $0xf011b580
f010ee62:	68 ea 01 00 00       	push   $0x1ea
f010ee67:	68 76 b1 11 f0       	push   $0xf011b176
f010ee6c:	e8 05 13 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ee71:	e8 0b ca ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ee76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee79:	74 17                	je     f010ee92 <test_kmalloc_bestfit1+0xa2a>
f010ee7b:	83 ec 04             	sub    $0x4,%esp
f010ee7e:	68 88 b1 11 f0       	push   $0xf011b188
f010ee83:	68 eb 01 00 00       	push   $0x1eb
f010ee88:	68 76 b1 11 f0       	push   $0xf011b176
f010ee8d:	e8 e4 12 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f010ee92:	e8 27 b5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ee97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ee9a:	29 c2                	sub    %eax,%edx
f010ee9c:	89 d0                	mov    %edx,%eax
f010ee9e:	3d 80 00 00 00       	cmp    $0x80,%eax
f010eea3:	74 17                	je     f010eebc <test_kmalloc_bestfit1+0xa54>
f010eea5:	83 ec 04             	sub    $0x4,%esp
f010eea8:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010eead:	68 ec 01 00 00       	push   $0x1ec
f010eeb2:	68 76 b1 11 f0       	push   $0xf011b176
f010eeb7:	e8 ba 12 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f010eebc:	e8 fd b4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010eec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eec4:	e8 b8 c9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010eec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f010eecc:	83 ec 0c             	sub    $0xc,%esp
f010eecf:	68 00 fc 0f 00       	push   $0xffc00
f010eed4:	e8 4d cf ff ff       	call   f010be26 <kmalloc>
f010eed9:	83 c4 10             	add    $0x10,%esp
f010eedc:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010eee2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010eee8:	89 c1                	mov    %eax,%ecx
f010eeea:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010eef1:	10 00 00 
f010eef4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010eef9:	0f b6 d0             	movzbl %al,%edx
f010eefc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010ef02:	01 d0                	add    %edx,%eax
f010ef04:	48                   	dec    %eax
f010ef05:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010ef0b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010ef11:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef16:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010ef1c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010ef22:	29 d0                	sub    %edx,%eax
f010ef24:	89 c3                	mov    %eax,%ebx
f010ef26:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010ef2d:	10 00 00 
f010ef30:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ef35:	0f b6 c0             	movzbl %al,%eax
f010ef38:	c1 e0 04             	shl    $0x4,%eax
f010ef3b:	89 c2                	mov    %eax,%edx
f010ef3d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010ef43:	01 d0                	add    %edx,%eax
f010ef45:	48                   	dec    %eax
f010ef46:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010ef4c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010ef52:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef57:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010ef5d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010ef63:	29 d0                	sub    %edx,%eax
f010ef65:	01 d8                	add    %ebx,%eax
f010ef67:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010ef6c:	39 c1                	cmp    %eax,%ecx
f010ef6e:	74 17                	je     f010ef87 <test_kmalloc_bestfit1+0xb1f>
f010ef70:	83 ec 04             	sub    $0x4,%esp
f010ef73:	68 80 b5 11 f0       	push   $0xf011b580
f010ef78:	68 f2 01 00 00       	push   $0x1f2
f010ef7d:	68 76 b1 11 f0       	push   $0xf011b176
f010ef82:	e8 ef 11 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ef87:	e8 f5 c8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ef8c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef8f:	74 17                	je     f010efa8 <test_kmalloc_bestfit1+0xb40>
f010ef91:	83 ec 04             	sub    $0x4,%esp
f010ef94:	68 88 b1 11 f0       	push   $0xf011b188
f010ef99:	68 f3 01 00 00       	push   $0x1f3
f010ef9e:	68 76 b1 11 f0       	push   $0xf011b176
f010efa3:	e8 ce 11 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010efa8:	e8 11 b4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010efad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010efb0:	29 c2                	sub    %eax,%edx
f010efb2:	89 d0                	mov    %edx,%eax
f010efb4:	3d 00 01 00 00       	cmp    $0x100,%eax
f010efb9:	74 17                	je     f010efd2 <test_kmalloc_bestfit1+0xb6a>
f010efbb:	83 ec 04             	sub    $0x4,%esp
f010efbe:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010efc3:	68 f4 01 00 00       	push   $0x1f4
f010efc8:	68 76 b1 11 f0       	push   $0xf011b176
f010efcd:	e8 a4 11 ff ff       	call   f0100176 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010efd2:	e8 e7 b3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010efd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010efda:	e8 a2 c8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010efdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f010efe2:	83 ec 0c             	sub    $0xc,%esp
f010efe5:	68 00 fc 03 00       	push   $0x3fc00
f010efea:	e8 37 ce ff ff       	call   f010be26 <kmalloc>
f010efef:	83 c4 10             	add    $0x10,%esp
f010eff2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f010eff8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010effe:	89 c1                	mov    %eax,%ecx
f010f000:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010f007:	10 00 00 
f010f00a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f00f:	0f b6 d0             	movzbl %al,%edx
f010f012:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010f018:	01 d0                	add    %edx,%eax
f010f01a:	48                   	dec    %eax
f010f01b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010f021:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010f027:	ba 00 00 00 00       	mov    $0x0,%edx
f010f02c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010f032:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010f038:	29 d0                	sub    %edx,%eax
f010f03a:	89 c3                	mov    %eax,%ebx
f010f03c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010f043:	10 00 00 
f010f046:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f04b:	0f b6 c0             	movzbl %al,%eax
f010f04e:	c1 e0 04             	shl    $0x4,%eax
f010f051:	89 c2                	mov    %eax,%edx
f010f053:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010f059:	01 d0                	add    %edx,%eax
f010f05b:	48                   	dec    %eax
f010f05c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010f062:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010f068:	ba 00 00 00 00       	mov    $0x0,%edx
f010f06d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010f073:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010f079:	29 d0                	sub    %edx,%eax
f010f07b:	01 d8                	add    %ebx,%eax
f010f07d:	2d 00 00 48 09       	sub    $0x9480000,%eax
f010f082:	39 c1                	cmp    %eax,%ecx
f010f084:	74 17                	je     f010f09d <test_kmalloc_bestfit1+0xc35>
f010f086:	83 ec 04             	sub    $0x4,%esp
f010f089:	68 80 b5 11 f0       	push   $0xf011b580
f010f08e:	68 fa 01 00 00       	push   $0x1fa
f010f093:	68 76 b1 11 f0       	push   $0xf011b176
f010f098:	e8 d9 10 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f09d:	e8 df c7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f0a2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0a5:	74 17                	je     f010f0be <test_kmalloc_bestfit1+0xc56>
f010f0a7:	83 ec 04             	sub    $0x4,%esp
f010f0aa:	68 88 b1 11 f0       	push   $0xf011b188
f010f0af:	68 fb 01 00 00       	push   $0x1fb
f010f0b4:	68 76 b1 11 f0       	push   $0xf011b176
f010f0b9:	e8 b8 10 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f010f0be:	e8 fb b2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f0c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f0c6:	29 c2                	sub    %eax,%edx
f010f0c8:	89 d0                	mov    %edx,%eax
f010f0ca:	83 f8 40             	cmp    $0x40,%eax
f010f0cd:	74 17                	je     f010f0e6 <test_kmalloc_bestfit1+0xc7e>
f010f0cf:	83 ec 04             	sub    $0x4,%esp
f010f0d2:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f0d7:	68 fc 01 00 00       	push   $0x1fc
f010f0dc:	68 76 b1 11 f0       	push   $0xf011b176
f010f0e1:	e8 90 10 ff ff       	call   f0100176 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f010f0e6:	e8 d3 b2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f0eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f0ee:	e8 8e c7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f0f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f010f0f6:	83 ec 0c             	sub    $0xc,%esp
f010f0f9:	68 00 fc 3f 00       	push   $0x3ffc00
f010f0fe:	e8 23 cd ff ff       	call   f010be26 <kmalloc>
f010f103:	83 c4 10             	add    $0x10,%esp
f010f106:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f010f10c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010f112:	89 c1                	mov    %eax,%ecx
f010f114:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f010f11b:	10 00 00 
f010f11e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f123:	0f b6 d0             	movzbl %al,%edx
f010f126:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f12c:	01 d0                	add    %edx,%eax
f010f12e:	48                   	dec    %eax
f010f12f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f010f135:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f13b:	ba 00 00 00 00       	mov    $0x0,%edx
f010f140:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f010f146:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f14c:	29 d0                	sub    %edx,%eax
f010f14e:	89 c3                	mov    %eax,%ebx
f010f150:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010f157:	10 00 00 
f010f15a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f15f:	0f b6 c0             	movzbl %al,%eax
f010f162:	c1 e0 04             	shl    $0x4,%eax
f010f165:	89 c2                	mov    %eax,%edx
f010f167:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010f16d:	01 d0                	add    %edx,%eax
f010f16f:	48                   	dec    %eax
f010f170:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010f176:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f17c:	ba 00 00 00 00       	mov    $0x0,%edx
f010f181:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010f187:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f18d:	29 d0                	sub    %edx,%eax
f010f18f:	01 d8                	add    %ebx,%eax
f010f191:	2d 00 00 20 09       	sub    $0x9200000,%eax
f010f196:	39 c1                	cmp    %eax,%ecx
f010f198:	74 17                	je     f010f1b1 <test_kmalloc_bestfit1+0xd49>
f010f19a:	83 ec 04             	sub    $0x4,%esp
f010f19d:	68 80 b5 11 f0       	push   $0xf011b580
f010f1a2:	68 02 02 00 00       	push   $0x202
f010f1a7:	68 76 b1 11 f0       	push   $0xf011b176
f010f1ac:	e8 c5 0f ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f1b1:	e8 cb c6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f1b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1b9:	74 17                	je     f010f1d2 <test_kmalloc_bestfit1+0xd6a>
f010f1bb:	83 ec 04             	sub    $0x4,%esp
f010f1be:	68 88 b1 11 f0       	push   $0xf011b188
f010f1c3:	68 03 02 00 00       	push   $0x203
f010f1c8:	68 76 b1 11 f0       	push   $0xf011b176
f010f1cd:	e8 a4 0f ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f010f1d2:	e8 e7 b1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f1d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f1da:	29 c2                	sub    %eax,%edx
f010f1dc:	89 d0                	mov    %edx,%eax
f010f1de:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f1e3:	74 17                	je     f010f1fc <test_kmalloc_bestfit1+0xd94>
f010f1e5:	83 ec 04             	sub    $0x4,%esp
f010f1e8:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f1ed:	68 04 02 00 00       	push   $0x204
f010f1f2:	68 76 b1 11 f0       	push   $0xf011b176
f010f1f7:	e8 7a 0f ff ff       	call   f0100176 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f010f1fc:	e8 bd b1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f201:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f204:	e8 78 c6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f209:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f010f20c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010f212:	83 ec 0c             	sub    $0xc,%esp
f010f215:	50                   	push   %eax
f010f216:	e8 9c cc ff ff       	call   f010beb7 <kfree>
f010f21b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f21e:	e8 5e c6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f223:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f226:	74 17                	je     f010f23f <test_kmalloc_bestfit1+0xdd7>
f010f228:	83 ec 04             	sub    $0x4,%esp
f010f22b:	68 88 b1 11 f0       	push   $0xf011b188
f010f230:	68 0d 02 00 00       	push   $0x20d
f010f235:	68 76 b1 11 f0       	push   $0xf011b176
f010f23a:	e8 37 0f ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010f23f:	e8 7a b1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f244:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f247:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f24c:	74 17                	je     f010f265 <test_kmalloc_bestfit1+0xdfd>
f010f24e:	83 ec 04             	sub    $0x4,%esp
f010f251:	68 c3 b5 11 f0       	push   $0xf011b5c3
f010f256:	68 0e 02 00 00       	push   $0x20e
f010f25b:	68 76 b1 11 f0       	push   $0xf011b176
f010f260:	e8 11 0f ff ff       	call   f0100176 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f010f265:	e8 54 b1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f26a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f26d:	e8 0f c6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f272:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f010f275:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010f27b:	83 ec 0c             	sub    $0xc,%esp
f010f27e:	50                   	push   %eax
f010f27f:	e8 33 cc ff ff       	call   f010beb7 <kfree>
f010f284:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f287:	e8 f5 c5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f28c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f28f:	74 17                	je     f010f2a8 <test_kmalloc_bestfit1+0xe40>
f010f291:	83 ec 04             	sub    $0x4,%esp
f010f294:	68 88 b1 11 f0       	push   $0xf011b188
f010f299:	68 14 02 00 00       	push   $0x214
f010f29e:	68 76 b1 11 f0       	push   $0xf011b176
f010f2a3:	e8 ce 0e ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f010f2a8:	e8 11 b1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f2ad:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f2b0:	3d 80 00 00 00       	cmp    $0x80,%eax
f010f2b5:	74 17                	je     f010f2ce <test_kmalloc_bestfit1+0xe66>
f010f2b7:	83 ec 04             	sub    $0x4,%esp
f010f2ba:	68 c3 b5 11 f0       	push   $0xf011b5c3
f010f2bf:	68 15 02 00 00       	push   $0x215
f010f2c4:	68 76 b1 11 f0       	push   $0xf011b176
f010f2c9:	e8 a8 0e ff ff       	call   f0100176 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f010f2ce:	e8 eb b0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f2d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f2d6:	e8 a6 c5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f2db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f010f2de:	83 ec 0c             	sub    $0xc,%esp
f010f2e1:	68 00 fc 1f 00       	push   $0x1ffc00
f010f2e6:	e8 3b cb ff ff       	call   f010be26 <kmalloc>
f010f2eb:	83 c4 10             	add    $0x10,%esp
f010f2ee:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f010f2f4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010f2fa:	89 c1                	mov    %eax,%ecx
f010f2fc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010f303:	10 00 00 
f010f306:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f30b:	0f b6 d0             	movzbl %al,%edx
f010f30e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010f314:	01 d0                	add    %edx,%eax
f010f316:	48                   	dec    %eax
f010f317:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010f31d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f323:	ba 00 00 00 00       	mov    $0x0,%edx
f010f328:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010f32e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f334:	29 d0                	sub    %edx,%eax
f010f336:	89 c3                	mov    %eax,%ebx
f010f338:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010f33f:	10 00 00 
f010f342:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f347:	0f b6 c0             	movzbl %al,%eax
f010f34a:	c1 e0 04             	shl    $0x4,%eax
f010f34d:	89 c2                	mov    %eax,%edx
f010f34f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f355:	01 d0                	add    %edx,%eax
f010f357:	48                   	dec    %eax
f010f358:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010f35e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f364:	ba 00 00 00 00       	mov    $0x0,%edx
f010f369:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010f36f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f375:	29 d0                	sub    %edx,%eax
f010f377:	01 d8                	add    %ebx,%eax
f010f379:	2d 00 00 70 09       	sub    $0x9700000,%eax
f010f37e:	39 c1                	cmp    %eax,%ecx
f010f380:	74 17                	je     f010f399 <test_kmalloc_bestfit1+0xf31>
f010f382:	83 ec 04             	sub    $0x4,%esp
f010f385:	68 80 b5 11 f0       	push   $0xf011b580
f010f38a:	68 1e 02 00 00       	push   $0x21e
f010f38f:	68 76 b1 11 f0       	push   $0xf011b176
f010f394:	e8 dd 0d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f399:	e8 e3 c4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f39e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f3a1:	74 17                	je     f010f3ba <test_kmalloc_bestfit1+0xf52>
f010f3a3:	83 ec 04             	sub    $0x4,%esp
f010f3a6:	68 88 b1 11 f0       	push   $0xf011b188
f010f3ab:	68 1f 02 00 00       	push   $0x21f
f010f3b0:	68 76 b1 11 f0       	push   $0xf011b176
f010f3b5:	e8 bc 0d ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f010f3ba:	e8 ff af ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f3bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f3c2:	29 c2                	sub    %eax,%edx
f010f3c4:	89 d0                	mov    %edx,%eax
f010f3c6:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f3cb:	74 17                	je     f010f3e4 <test_kmalloc_bestfit1+0xf7c>
f010f3cd:	83 ec 04             	sub    $0x4,%esp
f010f3d0:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f3d5:	68 20 02 00 00       	push   $0x220
f010f3da:	68 76 b1 11 f0       	push   $0xf011b176
f010f3df:	e8 92 0d ff ff       	call   f0100176 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f010f3e4:	83 ec 0c             	sub    $0xc,%esp
f010f3e7:	68 d0 b5 11 f0       	push   $0xf011b5d0
f010f3ec:	e8 a5 79 ff ff       	call   f0106d96 <cprintf>
f010f3f1:	83 c4 10             	add    $0x10,%esp

	return 1;
f010f3f4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010f3f9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010f3fc:	5b                   	pop    %ebx
f010f3fd:	5f                   	pop    %edi
f010f3fe:	5d                   	pop    %ebp
f010f3ff:	c3                   	ret    

f010f400 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f010f400:	55                   	push   %ebp
f010f401:	89 e5                	mov    %esp,%ebp
f010f403:	57                   	push   %edi
f010f404:	53                   	push   %ebx
f010f405:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f010f40b:	83 ec 0c             	sub    $0xc,%esp
f010f40e:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010f413:	e8 7e 79 ff ff       	call   f0106d96 <cprintf>
f010f418:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010f41b:	83 ec 0c             	sub    $0xc,%esp
f010f41e:	68 e8 b0 11 f0       	push   $0xf011b0e8
f010f423:	e8 6e 79 ff ff       	call   f0106d96 <cprintf>
f010f428:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010f42b:	83 ec 0c             	sub    $0xc,%esp
f010f42e:	68 b8 b0 11 f0       	push   $0xf011b0b8
f010f433:	e8 5e 79 ff ff       	call   f0106d96 <cprintf>
f010f438:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010f43b:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f010f441:	b9 14 00 00 00       	mov    $0x14,%ecx
f010f446:	b8 00 00 00 00       	mov    $0x0,%eax
f010f44b:	89 d7                	mov    %edx,%edi
f010f44d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f010f44f:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010f456:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f45b:	0f b6 d0             	movzbl %al,%edx
f010f45e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f461:	01 d0                	add    %edx,%eax
f010f463:	48                   	dec    %eax
f010f464:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f467:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f46a:	ba 00 00 00 00       	mov    $0x0,%edx
f010f46f:	f7 75 f4             	divl   -0xc(%ebp)
f010f472:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f475:	29 d0                	sub    %edx,%eax
f010f477:	89 c1                	mov    %eax,%ecx
f010f479:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010f480:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f485:	0f b6 c0             	movzbl %al,%eax
f010f488:	c1 e0 04             	shl    $0x4,%eax
f010f48b:	89 c2                	mov    %eax,%edx
f010f48d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f490:	01 d0                	add    %edx,%eax
f010f492:	48                   	dec    %eax
f010f493:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010f496:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f499:	ba 00 00 00 00       	mov    $0x0,%edx
f010f49e:	f7 75 ec             	divl   -0x14(%ebp)
f010f4a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f4a4:	29 d0                	sub    %edx,%eax
f010f4a6:	01 c8                	add    %ecx,%eax
f010f4a8:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010f4ad:	29 c2                	sub    %eax,%edx
f010f4af:	89 d0                	mov    %edx,%eax
f010f4b1:	83 ec 0c             	sub    $0xc,%esp
f010f4b4:	50                   	push   %eax
f010f4b5:	e8 6c c9 ff ff       	call   f010be26 <kmalloc>
f010f4ba:	83 c4 10             	add    $0x10,%esp
f010f4bd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f010f4c3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f4c9:	85 c0                	test   %eax,%eax
f010f4cb:	74 17                	je     f010f4e4 <test_kmalloc_bestfit2+0xe4>
f010f4cd:	83 ec 04             	sub    $0x4,%esp
f010f4d0:	68 18 b6 11 f0       	push   $0xf011b618
f010f4d5:	68 36 02 00 00       	push   $0x236
f010f4da:	68 76 b1 11 f0       	push   $0xf011b176
f010f4df:	e8 92 0c ff ff       	call   f0100176 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f4e4:	e8 d5 ae ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f4e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f4ec:	e8 90 c3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f4f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010f4f4:	83 ec 0c             	sub    $0xc,%esp
f010f4f7:	68 00 fc 1f 00       	push   $0x1ffc00
f010f4fc:	e8 25 c9 ff ff       	call   f010be26 <kmalloc>
f010f501:	83 c4 10             	add    $0x10,%esp
f010f504:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010f50a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f510:	89 c1                	mov    %eax,%ecx
f010f512:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010f519:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f51e:	0f b6 d0             	movzbl %al,%edx
f010f521:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f524:	01 d0                	add    %edx,%eax
f010f526:	48                   	dec    %eax
f010f527:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010f52a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f52d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f532:	f7 75 dc             	divl   -0x24(%ebp)
f010f535:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f538:	29 d0                	sub    %edx,%eax
f010f53a:	89 c3                	mov    %eax,%ebx
f010f53c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010f543:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f548:	0f b6 c0             	movzbl %al,%eax
f010f54b:	c1 e0 04             	shl    $0x4,%eax
f010f54e:	89 c2                	mov    %eax,%edx
f010f550:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f553:	01 d0                	add    %edx,%eax
f010f555:	48                   	dec    %eax
f010f556:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f559:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f55c:	ba 00 00 00 00       	mov    $0x0,%edx
f010f561:	f7 75 d4             	divl   -0x2c(%ebp)
f010f564:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f567:	29 d0                	sub    %edx,%eax
f010f569:	01 d8                	add    %ebx,%eax
f010f56b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010f570:	39 c1                	cmp    %eax,%ecx
f010f572:	74 17                	je     f010f58b <test_kmalloc_bestfit2+0x18b>
f010f574:	83 ec 04             	sub    $0x4,%esp
f010f577:	68 80 b5 11 f0       	push   $0xf011b580
f010f57c:	68 40 02 00 00       	push   $0x240
f010f581:	68 76 b1 11 f0       	push   $0xf011b176
f010f586:	e8 eb 0b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f58b:	e8 f1 c2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f590:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f593:	74 17                	je     f010f5ac <test_kmalloc_bestfit2+0x1ac>
f010f595:	83 ec 04             	sub    $0x4,%esp
f010f598:	68 88 b1 11 f0       	push   $0xf011b188
f010f59d:	68 41 02 00 00       	push   $0x241
f010f5a2:	68 76 b1 11 f0       	push   $0xf011b176
f010f5a7:	e8 ca 0b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010f5ac:	e8 0d ae ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f5b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f5b4:	29 c2                	sub    %eax,%edx
f010f5b6:	89 d0                	mov    %edx,%eax
f010f5b8:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f5bd:	74 17                	je     f010f5d6 <test_kmalloc_bestfit2+0x1d6>
f010f5bf:	83 ec 04             	sub    $0x4,%esp
f010f5c2:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f5c7:	68 42 02 00 00       	push   $0x242
f010f5cc:	68 76 b1 11 f0       	push   $0xf011b176
f010f5d1:	e8 a0 0b ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f5d6:	e8 e3 ad ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f5db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f5de:	e8 9e c2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f5e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010f5e6:	83 ec 0c             	sub    $0xc,%esp
f010f5e9:	68 00 fc 1f 00       	push   $0x1ffc00
f010f5ee:	e8 33 c8 ff ff       	call   f010be26 <kmalloc>
f010f5f3:	83 c4 10             	add    $0x10,%esp
f010f5f6:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f010f5fc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010f602:	89 c1                	mov    %eax,%ecx
f010f604:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010f60b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f610:	0f b6 d0             	movzbl %al,%edx
f010f613:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f616:	01 d0                	add    %edx,%eax
f010f618:	48                   	dec    %eax
f010f619:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f61c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f61f:	ba 00 00 00 00       	mov    $0x0,%edx
f010f624:	f7 75 cc             	divl   -0x34(%ebp)
f010f627:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f62a:	29 d0                	sub    %edx,%eax
f010f62c:	89 c3                	mov    %eax,%ebx
f010f62e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010f635:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f63a:	0f b6 c0             	movzbl %al,%eax
f010f63d:	c1 e0 04             	shl    $0x4,%eax
f010f640:	89 c2                	mov    %eax,%edx
f010f642:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f645:	01 d0                	add    %edx,%eax
f010f647:	48                   	dec    %eax
f010f648:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f64b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f64e:	ba 00 00 00 00       	mov    $0x0,%edx
f010f653:	f7 75 c4             	divl   -0x3c(%ebp)
f010f656:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f659:	29 d0                	sub    %edx,%eax
f010f65b:	01 d8                	add    %ebx,%eax
f010f65d:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010f662:	39 c1                	cmp    %eax,%ecx
f010f664:	74 17                	je     f010f67d <test_kmalloc_bestfit2+0x27d>
f010f666:	83 ec 04             	sub    $0x4,%esp
f010f669:	68 80 b5 11 f0       	push   $0xf011b580
f010f66e:	68 48 02 00 00       	push   $0x248
f010f673:	68 76 b1 11 f0       	push   $0xf011b176
f010f678:	e8 f9 0a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f67d:	e8 ff c1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f682:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f685:	74 17                	je     f010f69e <test_kmalloc_bestfit2+0x29e>
f010f687:	83 ec 04             	sub    $0x4,%esp
f010f68a:	68 88 b1 11 f0       	push   $0xf011b188
f010f68f:	68 49 02 00 00       	push   $0x249
f010f694:	68 76 b1 11 f0       	push   $0xf011b176
f010f699:	e8 d8 0a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010f69e:	e8 1b ad ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f6a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f6a6:	29 c2                	sub    %eax,%edx
f010f6a8:	89 d0                	mov    %edx,%eax
f010f6aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f6af:	74 17                	je     f010f6c8 <test_kmalloc_bestfit2+0x2c8>
f010f6b1:	83 ec 04             	sub    $0x4,%esp
f010f6b4:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f6b9:	68 4a 02 00 00       	push   $0x24a
f010f6be:	68 76 b1 11 f0       	push   $0xf011b176
f010f6c3:	e8 ae 0a ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010f6c8:	e8 f1 ac ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f6cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f6d0:	e8 ac c1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f6d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010f6d8:	83 ec 0c             	sub    $0xc,%esp
f010f6db:	68 00 08 00 00       	push   $0x800
f010f6e0:	e8 41 c7 ff ff       	call   f010be26 <kmalloc>
f010f6e5:	83 c4 10             	add    $0x10,%esp
f010f6e8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f010f6ee:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010f6f4:	89 c1                	mov    %eax,%ecx
f010f6f6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010f6fd:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f702:	0f b6 d0             	movzbl %al,%edx
f010f705:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f708:	01 d0                	add    %edx,%eax
f010f70a:	48                   	dec    %eax
f010f70b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010f70e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f711:	ba 00 00 00 00       	mov    $0x0,%edx
f010f716:	f7 75 bc             	divl   -0x44(%ebp)
f010f719:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f71c:	29 d0                	sub    %edx,%eax
f010f71e:	89 c3                	mov    %eax,%ebx
f010f720:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010f727:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f72c:	0f b6 c0             	movzbl %al,%eax
f010f72f:	c1 e0 04             	shl    $0x4,%eax
f010f732:	89 c2                	mov    %eax,%edx
f010f734:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010f737:	01 d0                	add    %edx,%eax
f010f739:	48                   	dec    %eax
f010f73a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010f73d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f740:	ba 00 00 00 00       	mov    $0x0,%edx
f010f745:	f7 75 b4             	divl   -0x4c(%ebp)
f010f748:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f74b:	29 d0                	sub    %edx,%eax
f010f74d:	01 d8                	add    %ebx,%eax
f010f74f:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010f754:	39 c1                	cmp    %eax,%ecx
f010f756:	74 17                	je     f010f76f <test_kmalloc_bestfit2+0x36f>
f010f758:	83 ec 04             	sub    $0x4,%esp
f010f75b:	68 80 b5 11 f0       	push   $0xf011b580
f010f760:	68 50 02 00 00       	push   $0x250
f010f765:	68 76 b1 11 f0       	push   $0xf011b176
f010f76a:	e8 07 0a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f76f:	e8 0d c1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f774:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f777:	74 17                	je     f010f790 <test_kmalloc_bestfit2+0x390>
f010f779:	83 ec 04             	sub    $0x4,%esp
f010f77c:	68 88 b1 11 f0       	push   $0xf011b188
f010f781:	68 51 02 00 00       	push   $0x251
f010f786:	68 76 b1 11 f0       	push   $0xf011b176
f010f78b:	e8 e6 09 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010f790:	e8 29 ac ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f795:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f798:	29 c2                	sub    %eax,%edx
f010f79a:	89 d0                	mov    %edx,%eax
f010f79c:	83 f8 01             	cmp    $0x1,%eax
f010f79f:	74 17                	je     f010f7b8 <test_kmalloc_bestfit2+0x3b8>
f010f7a1:	83 ec 04             	sub    $0x4,%esp
f010f7a4:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f7a9:	68 52 02 00 00       	push   $0x252
f010f7ae:	68 76 b1 11 f0       	push   $0xf011b176
f010f7b3:	e8 be 09 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010f7b8:	e8 01 ac ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f7bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f7c0:	e8 bc c0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f7c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010f7c8:	83 ec 0c             	sub    $0xc,%esp
f010f7cb:	68 00 08 00 00       	push   $0x800
f010f7d0:	e8 51 c6 ff ff       	call   f010be26 <kmalloc>
f010f7d5:	83 c4 10             	add    $0x10,%esp
f010f7d8:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f010f7de:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010f7e4:	89 c1                	mov    %eax,%ecx
f010f7e6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010f7ed:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f7f2:	0f b6 d0             	movzbl %al,%edx
f010f7f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7f8:	01 d0                	add    %edx,%eax
f010f7fa:	48                   	dec    %eax
f010f7fb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010f7fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f801:	ba 00 00 00 00       	mov    $0x0,%edx
f010f806:	f7 75 ac             	divl   -0x54(%ebp)
f010f809:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f80c:	29 d0                	sub    %edx,%eax
f010f80e:	89 c3                	mov    %eax,%ebx
f010f810:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010f817:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f81c:	0f b6 c0             	movzbl %al,%eax
f010f81f:	c1 e0 04             	shl    $0x4,%eax
f010f822:	89 c2                	mov    %eax,%edx
f010f824:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f827:	01 d0                	add    %edx,%eax
f010f829:	48                   	dec    %eax
f010f82a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010f82d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f830:	ba 00 00 00 00       	mov    $0x0,%edx
f010f835:	f7 75 a4             	divl   -0x5c(%ebp)
f010f838:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f83b:	29 d0                	sub    %edx,%eax
f010f83d:	01 d8                	add    %ebx,%eax
f010f83f:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010f844:	39 c1                	cmp    %eax,%ecx
f010f846:	74 17                	je     f010f85f <test_kmalloc_bestfit2+0x45f>
f010f848:	83 ec 04             	sub    $0x4,%esp
f010f84b:	68 80 b5 11 f0       	push   $0xf011b580
f010f850:	68 58 02 00 00       	push   $0x258
f010f855:	68 76 b1 11 f0       	push   $0xf011b176
f010f85a:	e8 17 09 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f85f:	e8 1d c0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f864:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f867:	74 17                	je     f010f880 <test_kmalloc_bestfit2+0x480>
f010f869:	83 ec 04             	sub    $0x4,%esp
f010f86c:	68 88 b1 11 f0       	push   $0xf011b188
f010f871:	68 59 02 00 00       	push   $0x259
f010f876:	68 76 b1 11 f0       	push   $0xf011b176
f010f87b:	e8 f6 08 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010f880:	e8 39 ab ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f885:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f888:	29 c2                	sub    %eax,%edx
f010f88a:	89 d0                	mov    %edx,%eax
f010f88c:	83 f8 01             	cmp    $0x1,%eax
f010f88f:	74 17                	je     f010f8a8 <test_kmalloc_bestfit2+0x4a8>
f010f891:	83 ec 04             	sub    $0x4,%esp
f010f894:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f899:	68 5a 02 00 00       	push   $0x25a
f010f89e:	68 76 b1 11 f0       	push   $0xf011b176
f010f8a3:	e8 ce 08 ff ff       	call   f0100176 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f8a8:	e8 11 ab ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f8ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f8b0:	e8 cc bf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f8b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f010f8b8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010f8be:	83 ec 0c             	sub    $0xc,%esp
f010f8c1:	50                   	push   %eax
f010f8c2:	e8 f0 c5 ff ff       	call   f010beb7 <kfree>
f010f8c7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f8ca:	e8 b2 bf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f8cf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f8d2:	74 17                	je     f010f8eb <test_kmalloc_bestfit2+0x4eb>
f010f8d4:	83 ec 04             	sub    $0x4,%esp
f010f8d7:	68 88 b1 11 f0       	push   $0xf011b188
f010f8dc:	68 60 02 00 00       	push   $0x260
f010f8e1:	68 76 b1 11 f0       	push   $0xf011b176
f010f8e6:	e8 8b 08 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f010f8eb:	e8 ce aa ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f8f0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010f8f3:	83 f8 01             	cmp    $0x1,%eax
f010f8f6:	74 17                	je     f010f90f <test_kmalloc_bestfit2+0x50f>
f010f8f8:	83 ec 04             	sub    $0x4,%esp
f010f8fb:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f900:	68 61 02 00 00       	push   $0x261
f010f905:	68 76 b1 11 f0       	push   $0xf011b176
f010f90a:	e8 67 08 ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010f90f:	e8 aa aa ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f914:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f917:	e8 65 bf ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f91c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010f91f:	83 ec 0c             	sub    $0xc,%esp
f010f922:	68 00 1c 00 00       	push   $0x1c00
f010f927:	e8 fa c4 ff ff       	call   f010be26 <kmalloc>
f010f92c:	83 c4 10             	add    $0x10,%esp
f010f92f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f010f935:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010f93b:	89 c1                	mov    %eax,%ecx
f010f93d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010f944:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f949:	0f b6 d0             	movzbl %al,%edx
f010f94c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010f94f:	01 d0                	add    %edx,%eax
f010f951:	48                   	dec    %eax
f010f952:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f955:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f958:	ba 00 00 00 00       	mov    $0x0,%edx
f010f95d:	f7 75 9c             	divl   -0x64(%ebp)
f010f960:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f963:	29 d0                	sub    %edx,%eax
f010f965:	89 c3                	mov    %eax,%ebx
f010f967:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010f96e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010f973:	0f b6 c0             	movzbl %al,%eax
f010f976:	c1 e0 04             	shl    $0x4,%eax
f010f979:	89 c2                	mov    %eax,%edx
f010f97b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f97e:	01 d0                	add    %edx,%eax
f010f980:	48                   	dec    %eax
f010f981:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f984:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f987:	ba 00 00 00 00       	mov    $0x0,%edx
f010f98c:	f7 75 94             	divl   -0x6c(%ebp)
f010f98f:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f992:	29 d0                	sub    %edx,%eax
f010f994:	01 d8                	add    %ebx,%eax
f010f996:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010f99b:	39 c1                	cmp    %eax,%ecx
f010f99d:	74 17                	je     f010f9b6 <test_kmalloc_bestfit2+0x5b6>
f010f99f:	83 ec 04             	sub    $0x4,%esp
f010f9a2:	68 80 b5 11 f0       	push   $0xf011b580
f010f9a7:	68 67 02 00 00       	push   $0x267
f010f9ac:	68 76 b1 11 f0       	push   $0xf011b176
f010f9b1:	e8 c0 07 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f9b6:	e8 c6 be ff ff       	call   f010b881 <pf_calculate_free_frames>
f010f9bb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f9be:	74 17                	je     f010f9d7 <test_kmalloc_bestfit2+0x5d7>
f010f9c0:	83 ec 04             	sub    $0x4,%esp
f010f9c3:	68 88 b1 11 f0       	push   $0xf011b188
f010f9c8:	68 68 02 00 00       	push   $0x268
f010f9cd:	68 76 b1 11 f0       	push   $0xf011b176
f010f9d2:	e8 9f 07 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f010f9d7:	e8 e2 a9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010f9dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f9df:	29 c2                	sub    %eax,%edx
f010f9e1:	89 d0                	mov    %edx,%eax
f010f9e3:	83 f8 02             	cmp    $0x2,%eax
f010f9e6:	74 17                	je     f010f9ff <test_kmalloc_bestfit2+0x5ff>
f010f9e8:	83 ec 04             	sub    $0x4,%esp
f010f9eb:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010f9f0:	68 69 02 00 00       	push   $0x269
f010f9f5:	68 76 b1 11 f0       	push   $0xf011b176
f010f9fa:	e8 77 07 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f9ff:	e8 ba a9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fa04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fa07:	e8 75 be ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fa0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f010fa0f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010fa15:	83 ec 0c             	sub    $0xc,%esp
f010fa18:	50                   	push   %eax
f010fa19:	e8 99 c4 ff ff       	call   f010beb7 <kfree>
f010fa1e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fa21:	e8 5b be ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fa26:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fa29:	74 17                	je     f010fa42 <test_kmalloc_bestfit2+0x642>
f010fa2b:	83 ec 04             	sub    $0x4,%esp
f010fa2e:	68 88 b1 11 f0       	push   $0xf011b188
f010fa33:	68 6f 02 00 00       	push   $0x26f
f010fa38:	68 76 b1 11 f0       	push   $0xf011b176
f010fa3d:	e8 34 07 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f010fa42:	e8 77 a9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fa47:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fa4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fa4f:	74 17                	je     f010fa68 <test_kmalloc_bestfit2+0x668>
f010fa51:	83 ec 04             	sub    $0x4,%esp
f010fa54:	68 3c b4 11 f0       	push   $0xf011b43c
f010fa59:	68 70 02 00 00       	push   $0x270
f010fa5e:	68 76 b1 11 f0       	push   $0xf011b176
f010fa63:	e8 0e 07 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010fa68:	e8 51 a9 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fa6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fa70:	e8 0c be ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fa75:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010fa78:	83 ec 0c             	sub    $0xc,%esp
f010fa7b:	68 00 fc 2f 00       	push   $0x2ffc00
f010fa80:	e8 a1 c3 ff ff       	call   f010be26 <kmalloc>
f010fa85:	83 c4 10             	add    $0x10,%esp
f010fa88:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fa8e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010fa94:	89 c1                	mov    %eax,%ecx
f010fa96:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010fa9d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010faa2:	0f b6 d0             	movzbl %al,%edx
f010faa5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010faa8:	01 d0                	add    %edx,%eax
f010faaa:	48                   	dec    %eax
f010faab:	89 45 88             	mov    %eax,-0x78(%ebp)
f010faae:	8b 45 88             	mov    -0x78(%ebp),%eax
f010fab1:	ba 00 00 00 00       	mov    $0x0,%edx
f010fab6:	f7 75 8c             	divl   -0x74(%ebp)
f010fab9:	8b 45 88             	mov    -0x78(%ebp),%eax
f010fabc:	29 d0                	sub    %edx,%eax
f010fabe:	89 c3                	mov    %eax,%ebx
f010fac0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010fac7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010facc:	0f b6 c0             	movzbl %al,%eax
f010facf:	c1 e0 04             	shl    $0x4,%eax
f010fad2:	89 c2                	mov    %eax,%edx
f010fad4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010fad7:	01 d0                	add    %edx,%eax
f010fad9:	48                   	dec    %eax
f010fada:	89 45 80             	mov    %eax,-0x80(%ebp)
f010fadd:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fae0:	ba 00 00 00 00       	mov    $0x0,%edx
f010fae5:	f7 75 84             	divl   -0x7c(%ebp)
f010fae8:	8b 45 80             	mov    -0x80(%ebp),%eax
f010faeb:	29 d0                	sub    %edx,%eax
f010faed:	01 d8                	add    %ebx,%eax
f010faef:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010faf4:	39 c1                	cmp    %eax,%ecx
f010faf6:	74 17                	je     f010fb0f <test_kmalloc_bestfit2+0x70f>
f010faf8:	83 ec 04             	sub    $0x4,%esp
f010fafb:	68 80 b5 11 f0       	push   $0xf011b580
f010fb00:	68 76 02 00 00       	push   $0x276
f010fb05:	68 76 b1 11 f0       	push   $0xf011b176
f010fb0a:	e8 67 06 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb0f:	e8 6d bd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fb14:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fb17:	74 17                	je     f010fb30 <test_kmalloc_bestfit2+0x730>
f010fb19:	83 ec 04             	sub    $0x4,%esp
f010fb1c:	68 88 b1 11 f0       	push   $0xf011b188
f010fb21:	68 77 02 00 00       	push   $0x277
f010fb26:	68 76 b1 11 f0       	push   $0xf011b176
f010fb2b:	e8 46 06 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f010fb30:	e8 89 a8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fb35:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb38:	29 c2                	sub    %eax,%edx
f010fb3a:	89 d0                	mov    %edx,%eax
f010fb3c:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fb41:	74 17                	je     f010fb5a <test_kmalloc_bestfit2+0x75a>
f010fb43:	83 ec 04             	sub    $0x4,%esp
f010fb46:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010fb4b:	68 78 02 00 00       	push   $0x278
f010fb50:	68 76 b1 11 f0       	push   $0xf011b176
f010fb55:	e8 1c 06 ff ff       	call   f0100176 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f010fb5a:	e8 5f a8 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fb5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fb62:	e8 1a bd ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fb67:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f010fb6a:	83 ec 0c             	sub    $0xc,%esp
f010fb6d:	68 00 18 20 00       	push   $0x201800
f010fb72:	e8 af c2 ff ff       	call   f010be26 <kmalloc>
f010fb77:	83 c4 10             	add    $0x10,%esp
f010fb7a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fb80:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010fb86:	89 c1                	mov    %eax,%ecx
f010fb88:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010fb8f:	10 00 00 
f010fb92:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fb97:	0f b6 d0             	movzbl %al,%edx
f010fb9a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010fba0:	01 d0                	add    %edx,%eax
f010fba2:	48                   	dec    %eax
f010fba3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010fba9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fbaf:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbb4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010fbba:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fbc0:	29 d0                	sub    %edx,%eax
f010fbc2:	89 c3                	mov    %eax,%ebx
f010fbc4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010fbcb:	10 00 00 
f010fbce:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fbd3:	0f b6 c0             	movzbl %al,%eax
f010fbd6:	c1 e0 04             	shl    $0x4,%eax
f010fbd9:	89 c2                	mov    %eax,%edx
f010fbdb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010fbe1:	01 d0                	add    %edx,%eax
f010fbe3:	48                   	dec    %eax
f010fbe4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010fbea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fbf0:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbf5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010fbfb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fc01:	29 d0                	sub    %edx,%eax
f010fc03:	01 d8                	add    %ebx,%eax
f010fc05:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010fc0a:	39 c1                	cmp    %eax,%ecx
f010fc0c:	74 17                	je     f010fc25 <test_kmalloc_bestfit2+0x825>
f010fc0e:	83 ec 04             	sub    $0x4,%esp
f010fc11:	68 80 b5 11 f0       	push   $0xf011b580
f010fc16:	68 7e 02 00 00       	push   $0x27e
f010fc1b:	68 76 b1 11 f0       	push   $0xf011b176
f010fc20:	e8 51 05 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc25:	e8 57 bc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fc2a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc2d:	74 17                	je     f010fc46 <test_kmalloc_bestfit2+0x846>
f010fc2f:	83 ec 04             	sub    $0x4,%esp
f010fc32:	68 88 b1 11 f0       	push   $0xf011b188
f010fc37:	68 7f 02 00 00       	push   $0x27f
f010fc3c:	68 76 b1 11 f0       	push   $0xf011b176
f010fc41:	e8 30 05 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f010fc46:	e8 73 a7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fc4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc4e:	29 c2                	sub    %eax,%edx
f010fc50:	89 d0                	mov    %edx,%eax
f010fc52:	3d 02 02 00 00       	cmp    $0x202,%eax
f010fc57:	74 17                	je     f010fc70 <test_kmalloc_bestfit2+0x870>
f010fc59:	83 ec 04             	sub    $0x4,%esp
f010fc5c:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010fc61:	68 80 02 00 00       	push   $0x280
f010fc66:	68 76 b1 11 f0       	push   $0xf011b176
f010fc6b:	e8 06 05 ff ff       	call   f0100176 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f010fc70:	e8 49 a7 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fc75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fc78:	e8 04 bc ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fc7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f010fc80:	83 ec 0c             	sub    $0xc,%esp
f010fc83:	68 00 fc 4f 00       	push   $0x4ffc00
f010fc88:	e8 99 c1 ff ff       	call   f010be26 <kmalloc>
f010fc8d:	83 c4 10             	add    $0x10,%esp
f010fc90:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f010fc96:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010fc9c:	89 c1                	mov    %eax,%ecx
f010fc9e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010fca5:	10 00 00 
f010fca8:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fcad:	0f b6 d0             	movzbl %al,%edx
f010fcb0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010fcb6:	01 d0                	add    %edx,%eax
f010fcb8:	48                   	dec    %eax
f010fcb9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010fcbf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fcc5:	ba 00 00 00 00       	mov    $0x0,%edx
f010fcca:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010fcd0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fcd6:	29 d0                	sub    %edx,%eax
f010fcd8:	89 c3                	mov    %eax,%ebx
f010fcda:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010fce1:	10 00 00 
f010fce4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fce9:	0f b6 c0             	movzbl %al,%eax
f010fcec:	c1 e0 04             	shl    $0x4,%eax
f010fcef:	89 c2                	mov    %eax,%edx
f010fcf1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010fcf7:	01 d0                	add    %edx,%eax
f010fcf9:	48                   	dec    %eax
f010fcfa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010fd00:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fd06:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd0b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010fd11:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fd17:	29 d0                	sub    %edx,%eax
f010fd19:	01 d8                	add    %ebx,%eax
f010fd1b:	2d 00 a0 6f 09       	sub    $0x96fa000,%eax
f010fd20:	39 c1                	cmp    %eax,%ecx
f010fd22:	74 17                	je     f010fd3b <test_kmalloc_bestfit2+0x93b>
f010fd24:	83 ec 04             	sub    $0x4,%esp
f010fd27:	68 80 b5 11 f0       	push   $0xf011b580
f010fd2c:	68 86 02 00 00       	push   $0x286
f010fd31:	68 76 b1 11 f0       	push   $0xf011b176
f010fd36:	e8 3b 04 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fd3b:	e8 41 bb ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fd40:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd43:	74 17                	je     f010fd5c <test_kmalloc_bestfit2+0x95c>
f010fd45:	83 ec 04             	sub    $0x4,%esp
f010fd48:	68 88 b1 11 f0       	push   $0xf011b188
f010fd4d:	68 87 02 00 00       	push   $0x287
f010fd52:	68 76 b1 11 f0       	push   $0xf011b176
f010fd57:	e8 1a 04 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010fd5c:	e8 5d a6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fd61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd64:	29 c2                	sub    %eax,%edx
f010fd66:	89 d0                	mov    %edx,%eax
f010fd68:	3d 00 05 00 00       	cmp    $0x500,%eax
f010fd6d:	74 17                	je     f010fd86 <test_kmalloc_bestfit2+0x986>
f010fd6f:	83 ec 04             	sub    $0x4,%esp
f010fd72:	68 b0 b5 11 f0       	push   $0xf011b5b0
f010fd77:	68 88 02 00 00       	push   $0x288
f010fd7c:	68 76 b1 11 f0       	push   $0xf011b176
f010fd81:	e8 f0 03 ff ff       	call   f0100176 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fd86:	e8 33 a6 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fd8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fd8e:	e8 ee ba ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fd93:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f010fd96:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010fd9c:	83 ec 0c             	sub    $0xc,%esp
f010fd9f:	50                   	push   %eax
f010fda0:	e8 12 c1 ff ff       	call   f010beb7 <kfree>
f010fda5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fda8:	e8 d4 ba ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fdad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fdb0:	74 17                	je     f010fdc9 <test_kmalloc_bestfit2+0x9c9>
f010fdb2:	83 ec 04             	sub    $0x4,%esp
f010fdb5:	68 88 b1 11 f0       	push   $0xf011b188
f010fdba:	68 8e 02 00 00       	push   $0x28e
f010fdbf:	68 76 b1 11 f0       	push   $0xf011b176
f010fdc4:	e8 ad 03 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f010fdc9:	e8 f0 a5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fdce:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fdd1:	3d 02 02 00 00       	cmp    $0x202,%eax
f010fdd6:	74 17                	je     f010fdef <test_kmalloc_bestfit2+0x9ef>
f010fdd8:	83 ec 04             	sub    $0x4,%esp
f010fddb:	68 3c b4 11 f0       	push   $0xf011b43c
f010fde0:	68 8f 02 00 00       	push   $0x28f
f010fde5:	68 76 b1 11 f0       	push   $0xf011b176
f010fdea:	e8 87 03 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fdef:	e8 ca a5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fdf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fdf7:	e8 85 ba ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fdfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f010fdff:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010fe05:	83 ec 0c             	sub    $0xc,%esp
f010fe08:	50                   	push   %eax
f010fe09:	e8 a9 c0 ff ff       	call   f010beb7 <kfree>
f010fe0e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fe11:	e8 6b ba ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fe16:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fe19:	74 17                	je     f010fe32 <test_kmalloc_bestfit2+0xa32>
f010fe1b:	83 ec 04             	sub    $0x4,%esp
f010fe1e:	68 88 b1 11 f0       	push   $0xf011b188
f010fe23:	68 95 02 00 00       	push   $0x295
f010fe28:	68 76 b1 11 f0       	push   $0xf011b176
f010fe2d:	e8 44 03 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f010fe32:	e8 87 a5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fe37:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fe3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fe3f:	74 17                	je     f010fe58 <test_kmalloc_bestfit2+0xa58>
f010fe41:	83 ec 04             	sub    $0x4,%esp
f010fe44:	68 60 b6 11 f0       	push   $0xf011b660
f010fe49:	68 96 02 00 00       	push   $0x296
f010fe4e:	68 76 b1 11 f0       	push   $0xf011b176
f010fe53:	e8 1e 03 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010fe58:	e8 61 a5 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010fe5d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fe60:	e8 1c ba ff ff       	call   f010b881 <pf_calculate_free_frames>
f010fe65:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f010fe68:	83 ec 0c             	sub    $0xc,%esp
f010fe6b:	68 00 fc 1f 00       	push   $0x1ffc00
f010fe70:	e8 b1 bf ff ff       	call   f010be26 <kmalloc>
f010fe75:	83 c4 10             	add    $0x10,%esp
f010fe78:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fe7e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010fe84:	89 c1                	mov    %eax,%ecx
f010fe86:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010fe8d:	10 00 00 
f010fe90:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fe95:	0f b6 d0             	movzbl %al,%edx
f010fe98:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010fe9e:	01 d0                	add    %edx,%eax
f010fea0:	48                   	dec    %eax
f010fea1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010fea7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010fead:	ba 00 00 00 00       	mov    $0x0,%edx
f010feb2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010feb8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010febe:	29 d0                	sub    %edx,%eax
f010fec0:	89 c3                	mov    %eax,%ebx
f010fec2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010fec9:	10 00 00 
f010fecc:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010fed1:	0f b6 c0             	movzbl %al,%eax
f010fed4:	c1 e0 04             	shl    $0x4,%eax
f010fed7:	89 c2                	mov    %eax,%edx
f010fed9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010fedf:	01 d0                	add    %edx,%eax
f010fee1:	48                   	dec    %eax
f010fee2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010fee8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010feee:	ba 00 00 00 00       	mov    $0x0,%edx
f010fef3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010fef9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010feff:	29 d0                	sub    %edx,%eax
f010ff01:	01 d8                	add    %ebx,%eax
f010ff03:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010ff08:	39 c1                	cmp    %eax,%ecx
f010ff0a:	74 17                	je     f010ff23 <test_kmalloc_bestfit2+0xb23>
f010ff0c:	83 ec 04             	sub    $0x4,%esp
f010ff0f:	68 80 b5 11 f0       	push   $0xf011b580
f010ff14:	68 9c 02 00 00       	push   $0x29c
f010ff19:	68 76 b1 11 f0       	push   $0xf011b176
f010ff1e:	e8 53 02 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ff23:	e8 59 b9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ff28:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ff2b:	74 17                	je     f010ff44 <test_kmalloc_bestfit2+0xb44>
f010ff2d:	83 ec 04             	sub    $0x4,%esp
f010ff30:	68 88 b1 11 f0       	push   $0xf011b188
f010ff35:	68 9d 02 00 00       	push   $0x29d
f010ff3a:	68 76 b1 11 f0       	push   $0xf011b176
f010ff3f:	e8 32 02 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f010ff44:	e8 75 a4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ff49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff4c:	29 c2                	sub    %eax,%edx
f010ff4e:	89 d0                	mov    %edx,%eax
f010ff50:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ff55:	74 17                	je     f010ff6e <test_kmalloc_bestfit2+0xb6e>
f010ff57:	83 ec 04             	sub    $0x4,%esp
f010ff5a:	68 9e b6 11 f0       	push   $0xf011b69e
f010ff5f:	68 9e 02 00 00       	push   $0x29e
f010ff64:	68 76 b1 11 f0       	push   $0xf011b176
f010ff69:	e8 08 02 ff ff       	call   f0100176 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f010ff6e:	e8 4b a4 ff ff       	call   f010a3be <sys_calculate_free_frames>
f010ff73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010ff76:	e8 06 b9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f010ff7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f010ff7e:	83 ec 0c             	sub    $0xc,%esp
f010ff81:	68 00 18 00 00       	push   $0x1800
f010ff86:	e8 9b be ff ff       	call   f010be26 <kmalloc>
f010ff8b:	83 c4 10             	add    $0x10,%esp
f010ff8e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010ff94:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010ff9a:	89 c1                	mov    %eax,%ecx
f010ff9c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010ffa3:	10 00 00 
f010ffa6:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ffab:	0f b6 d0             	movzbl %al,%edx
f010ffae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010ffb4:	01 d0                	add    %edx,%eax
f010ffb6:	48                   	dec    %eax
f010ffb7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010ffbd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ffc3:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffc8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010ffce:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ffd4:	29 d0                	sub    %edx,%eax
f010ffd6:	89 c3                	mov    %eax,%ebx
f010ffd8:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010ffdf:	10 00 00 
f010ffe2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f010ffe7:	0f b6 c0             	movzbl %al,%eax
f010ffea:	c1 e0 04             	shl    $0x4,%eax
f010ffed:	89 c2                	mov    %eax,%edx
f010ffef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010fff5:	01 d0                	add    %edx,%eax
f010fff7:	48                   	dec    %eax
f010fff8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010fffe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110004:	ba 00 00 00 00       	mov    $0x0,%edx
f0110009:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011000f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110015:	29 d0                	sub    %edx,%eax
f0110017:	01 d8                	add    %ebx,%eax
f0110019:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011001e:	39 c1                	cmp    %eax,%ecx
f0110020:	74 17                	je     f0110039 <test_kmalloc_bestfit2+0xc39>
f0110022:	83 ec 04             	sub    $0x4,%esp
f0110025:	68 80 b5 11 f0       	push   $0xf011b580
f011002a:	68 a4 02 00 00       	push   $0x2a4
f011002f:	68 76 b1 11 f0       	push   $0xf011b176
f0110034:	e8 3d 01 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110039:	e8 43 b8 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011003e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110041:	74 17                	je     f011005a <test_kmalloc_bestfit2+0xc5a>
f0110043:	83 ec 04             	sub    $0x4,%esp
f0110046:	68 88 b1 11 f0       	push   $0xf011b188
f011004b:	68 a5 02 00 00       	push   $0x2a5
f0110050:	68 76 b1 11 f0       	push   $0xf011b176
f0110055:	e8 1c 01 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011005a:	e8 5f a3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011005f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110062:	29 c2                	sub    %eax,%edx
f0110064:	89 d0                	mov    %edx,%eax
f0110066:	83 f8 02             	cmp    $0x2,%eax
f0110069:	74 17                	je     f0110082 <test_kmalloc_bestfit2+0xc82>
f011006b:	83 ec 04             	sub    $0x4,%esp
f011006e:	68 9e b6 11 f0       	push   $0xf011b69e
f0110073:	68 a6 02 00 00       	push   $0x2a6
f0110078:	68 76 b1 11 f0       	push   $0xf011b176
f011007d:	e8 f4 00 ff ff       	call   f0100176 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110082:	e8 37 a3 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110087:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011008a:	e8 f2 b7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011008f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0110092:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110098:	83 ec 0c             	sub    $0xc,%esp
f011009b:	50                   	push   %eax
f011009c:	e8 16 be ff ff       	call   f010beb7 <kfree>
f01100a1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01100a4:	e8 d8 b7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01100a9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01100ac:	74 17                	je     f01100c5 <test_kmalloc_bestfit2+0xcc5>
f01100ae:	83 ec 04             	sub    $0x4,%esp
f01100b1:	68 88 b1 11 f0       	push   $0xf011b188
f01100b6:	68 ac 02 00 00       	push   $0x2ac
f01100bb:	68 76 b1 11 f0       	push   $0xf011b176
f01100c0:	e8 b1 00 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f01100c5:	e8 f4 a2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01100ca:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01100cd:	3d 00 03 00 00       	cmp    $0x300,%eax
f01100d2:	74 17                	je     f01100eb <test_kmalloc_bestfit2+0xceb>
f01100d4:	83 ec 04             	sub    $0x4,%esp
f01100d7:	68 60 b6 11 f0       	push   $0xf011b660
f01100dc:	68 ad 02 00 00       	push   $0x2ad
f01100e1:	68 76 b1 11 f0       	push   $0xf011b176
f01100e6:	e8 8b 00 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01100eb:	e8 ce a2 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01100f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01100f3:	e8 89 b7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01100f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f01100fb:	83 ec 0c             	sub    $0xc,%esp
f01100fe:	68 00 fc 2f 00       	push   $0x2ffc00
f0110103:	e8 1e bd ff ff       	call   f010be26 <kmalloc>
f0110108:	83 c4 10             	add    $0x10,%esp
f011010b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110111:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0110117:	89 c1                	mov    %eax,%ecx
f0110119:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0110120:	10 00 00 
f0110123:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110128:	0f b6 d0             	movzbl %al,%edx
f011012b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0110131:	01 d0                	add    %edx,%eax
f0110133:	48                   	dec    %eax
f0110134:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011013a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110140:	ba 00 00 00 00       	mov    $0x0,%edx
f0110145:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011014b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110151:	29 d0                	sub    %edx,%eax
f0110153:	89 c3                	mov    %eax,%ebx
f0110155:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011015c:	10 00 00 
f011015f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110164:	0f b6 c0             	movzbl %al,%eax
f0110167:	c1 e0 04             	shl    $0x4,%eax
f011016a:	89 c2                	mov    %eax,%edx
f011016c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0110172:	01 d0                	add    %edx,%eax
f0110174:	48                   	dec    %eax
f0110175:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011017b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110181:	ba 00 00 00 00       	mov    $0x0,%edx
f0110186:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011018c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110192:	29 d0                	sub    %edx,%eax
f0110194:	01 d8                	add    %ebx,%eax
f0110196:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011019b:	39 c1                	cmp    %eax,%ecx
f011019d:	74 17                	je     f01101b6 <test_kmalloc_bestfit2+0xdb6>
f011019f:	83 ec 04             	sub    $0x4,%esp
f01101a2:	68 80 b5 11 f0       	push   $0xf011b580
f01101a7:	68 b3 02 00 00       	push   $0x2b3
f01101ac:	68 76 b1 11 f0       	push   $0xf011b176
f01101b1:	e8 c0 ff fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01101b6:	e8 c6 b6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01101bb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01101be:	74 17                	je     f01101d7 <test_kmalloc_bestfit2+0xdd7>
f01101c0:	83 ec 04             	sub    $0x4,%esp
f01101c3:	68 88 b1 11 f0       	push   $0xf011b188
f01101c8:	68 b4 02 00 00       	push   $0x2b4
f01101cd:	68 76 b1 11 f0       	push   $0xf011b176
f01101d2:	e8 9f ff fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f01101d7:	e8 e2 a1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01101dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01101df:	29 c2                	sub    %eax,%edx
f01101e1:	89 d0                	mov    %edx,%eax
f01101e3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01101e8:	74 17                	je     f0110201 <test_kmalloc_bestfit2+0xe01>
f01101ea:	83 ec 04             	sub    $0x4,%esp
f01101ed:	68 60 b6 11 f0       	push   $0xf011b660
f01101f2:	68 b5 02 00 00       	push   $0x2b5
f01101f7:	68 76 b1 11 f0       	push   $0xf011b176
f01101fc:	e8 75 ff fe ff       	call   f0100176 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0110201:	e8 b8 a1 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110206:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110209:	e8 73 b6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011020e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f0110211:	83 ec 0c             	sub    $0xc,%esp
f0110214:	68 00 fc 3f 00       	push   $0x3ffc00
f0110219:	e8 08 bc ff ff       	call   f010be26 <kmalloc>
f011021e:	83 c4 10             	add    $0x10,%esp
f0110221:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0110227:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011022d:	89 c1                	mov    %eax,%ecx
f011022f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0110236:	10 00 00 
f0110239:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011023e:	0f b6 d0             	movzbl %al,%edx
f0110241:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0110247:	01 d0                	add    %edx,%eax
f0110249:	48                   	dec    %eax
f011024a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0110250:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110256:	ba 00 00 00 00       	mov    $0x0,%edx
f011025b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0110261:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110267:	29 d0                	sub    %edx,%eax
f0110269:	89 c3                	mov    %eax,%ebx
f011026b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0110272:	10 00 00 
f0110275:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011027a:	0f b6 c0             	movzbl %al,%eax
f011027d:	c1 e0 04             	shl    $0x4,%eax
f0110280:	89 c2                	mov    %eax,%edx
f0110282:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0110288:	01 d0                	add    %edx,%eax
f011028a:	48                   	dec    %eax
f011028b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0110291:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110297:	ba 00 00 00 00       	mov    $0x0,%edx
f011029c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01102a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01102a8:	29 d0                	sub    %edx,%eax
f01102aa:	01 d8                	add    %ebx,%eax
f01102ac:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01102b1:	39 c1                	cmp    %eax,%ecx
f01102b3:	74 17                	je     f01102cc <test_kmalloc_bestfit2+0xecc>
f01102b5:	83 ec 04             	sub    $0x4,%esp
f01102b8:	68 80 b5 11 f0       	push   $0xf011b580
f01102bd:	68 bb 02 00 00       	push   $0x2bb
f01102c2:	68 76 b1 11 f0       	push   $0xf011b176
f01102c7:	e8 aa fe fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01102cc:	e8 b0 b5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01102d1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01102d4:	74 17                	je     f01102ed <test_kmalloc_bestfit2+0xeed>
f01102d6:	83 ec 04             	sub    $0x4,%esp
f01102d9:	68 88 b1 11 f0       	push   $0xf011b188
f01102de:	68 bc 02 00 00       	push   $0x2bc
f01102e3:	68 76 b1 11 f0       	push   $0xf011b176
f01102e8:	e8 89 fe fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f01102ed:	e8 cc a0 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01102f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102f5:	29 c2                	sub    %eax,%edx
f01102f7:	89 d0                	mov    %edx,%eax
f01102f9:	3d 00 04 00 00       	cmp    $0x400,%eax
f01102fe:	74 17                	je     f0110317 <test_kmalloc_bestfit2+0xf17>
f0110300:	83 ec 04             	sub    $0x4,%esp
f0110303:	68 60 b6 11 f0       	push   $0xf011b660
f0110308:	68 bd 02 00 00       	push   $0x2bd
f011030d:	68 76 b1 11 f0       	push   $0xf011b176
f0110312:	e8 5f fe fe ff       	call   f0100176 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f0110317:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011031e:	10 00 00 
f0110321:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110326:	0f b6 d0             	movzbl %al,%edx
f0110329:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011032f:	01 d0                	add    %edx,%eax
f0110331:	48                   	dec    %eax
f0110332:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0110338:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011033e:	ba 00 00 00 00       	mov    $0x0,%edx
f0110343:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0110349:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011034f:	29 d0                	sub    %edx,%eax
f0110351:	89 c1                	mov    %eax,%ecx
f0110353:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011035a:	10 00 00 
f011035d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110362:	0f b6 c0             	movzbl %al,%eax
f0110365:	c1 e0 04             	shl    $0x4,%eax
f0110368:	89 c2                	mov    %eax,%edx
f011036a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0110370:	01 d0                	add    %edx,%eax
f0110372:	48                   	dec    %eax
f0110373:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0110379:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011037f:	ba 00 00 00 00       	mov    $0x0,%edx
f0110384:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011038a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110390:	29 d0                	sub    %edx,%eax
f0110392:	01 c8                	add    %ecx,%eax
f0110394:	ba 00 f0 1f 09       	mov    $0x91ff000,%edx
f0110399:	29 c2                	sub    %eax,%edx
f011039b:	89 d0                	mov    %edx,%eax
f011039d:	83 ec 0c             	sub    $0xc,%esp
f01103a0:	50                   	push   %eax
f01103a1:	e8 80 ba ff ff       	call   f010be26 <kmalloc>
f01103a6:	83 c4 10             	add    $0x10,%esp
f01103a9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f01103af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01103b5:	85 c0                	test   %eax,%eax
f01103b7:	74 17                	je     f01103d0 <test_kmalloc_bestfit2+0xfd0>
f01103b9:	83 ec 04             	sub    $0x4,%esp
f01103bc:	68 b0 b6 11 f0       	push   $0xf011b6b0
f01103c1:	68 c5 02 00 00       	push   $0x2c5
f01103c6:	68 76 b1 11 f0       	push   $0xf011b176
f01103cb:	e8 a6 fd fe ff       	call   f0100176 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f01103d0:	83 ec 0c             	sub    $0xc,%esp
f01103d3:	68 14 b7 11 f0       	push   $0xf011b714
f01103d8:	e8 b9 69 ff ff       	call   f0106d96 <cprintf>
f01103dd:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f01103e0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01103e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01103e8:	5b                   	pop    %ebx
f01103e9:	5f                   	pop    %edi
f01103ea:	5d                   	pop    %ebp
f01103eb:	c3                   	ret    

f01103ec <test_kfree>:

int test_kfree()
{
f01103ec:	55                   	push   %ebp
f01103ed:	89 e5                	mov    %esp,%ebp
f01103ef:	57                   	push   %edi
f01103f0:	53                   	push   %ebx
f01103f1:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f01103f7:	83 ec 0c             	sub    $0xc,%esp
f01103fa:	68 b8 b0 11 f0       	push   $0xf011b0b8
f01103ff:	e8 92 69 ff ff       	call   f0106d96 <cprintf>
f0110404:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0110407:	83 ec 0c             	sub    $0xc,%esp
f011040a:	68 e8 b0 11 f0       	push   $0xf011b0e8
f011040f:	e8 82 69 ff ff       	call   f0106d96 <cprintf>
f0110414:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0110417:	83 ec 0c             	sub    $0xc,%esp
f011041a:	68 b8 b0 11 f0       	push   $0xf011b0b8
f011041f:	e8 72 69 ff ff       	call   f0106d96 <cprintf>
f0110424:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0110427:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011042b:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011042f:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0110435:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011043b:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0110442:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0110449:	e8 70 9f ff ff       	call   f010a3be <sys_calculate_free_frames>
f011044e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0110451:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0110457:	b9 14 00 00 00       	mov    $0x14,%ecx
f011045c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110461:	89 d7                	mov    %edx,%edi
f0110463:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0110465:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f011046b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110470:	b8 00 00 00 00       	mov    $0x0,%eax
f0110475:	89 d7                	mov    %edx,%edi
f0110477:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0110479:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f011047f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110484:	b8 00 00 00 00       	mov    $0x0,%eax
f0110489:	89 d7                	mov    %edx,%edi
f011048b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011048d:	e8 2c 9f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110492:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110495:	e8 e7 b3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011049a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011049d:	83 ec 0c             	sub    $0xc,%esp
f01104a0:	68 00 fc 1f 00       	push   $0x1ffc00
f01104a5:	e8 7c b9 ff ff       	call   f010be26 <kmalloc>
f01104aa:	83 c4 10             	add    $0x10,%esp
f01104ad:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01104b3:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01104b9:	89 c1                	mov    %eax,%ecx
f01104bb:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01104c2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01104c7:	0f b6 d0             	movzbl %al,%edx
f01104ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01104cd:	01 d0                	add    %edx,%eax
f01104cf:	48                   	dec    %eax
f01104d0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01104d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01104d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01104db:	f7 75 c8             	divl   -0x38(%ebp)
f01104de:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01104e1:	29 d0                	sub    %edx,%eax
f01104e3:	89 c3                	mov    %eax,%ebx
f01104e5:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01104ec:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01104f1:	0f b6 c0             	movzbl %al,%eax
f01104f4:	c1 e0 04             	shl    $0x4,%eax
f01104f7:	89 c2                	mov    %eax,%edx
f01104f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01104fc:	01 d0                	add    %edx,%eax
f01104fe:	48                   	dec    %eax
f01104ff:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0110502:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110505:	ba 00 00 00 00       	mov    $0x0,%edx
f011050a:	f7 75 c0             	divl   -0x40(%ebp)
f011050d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110510:	29 d0                	sub    %edx,%eax
f0110512:	01 d8                	add    %ebx,%eax
f0110514:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0110519:	39 c1                	cmp    %eax,%ecx
f011051b:	74 17                	je     f0110534 <test_kfree+0x148>
f011051d:	83 ec 04             	sub    $0x4,%esp
f0110520:	68 54 b2 11 f0       	push   $0xf011b254
f0110525:	68 ec 02 00 00       	push   $0x2ec
f011052a:	68 76 b1 11 f0       	push   $0xf011b176
f011052f:	e8 42 fc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110534:	e8 48 b3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110539:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011053c:	74 17                	je     f0110555 <test_kfree+0x169>
f011053e:	83 ec 04             	sub    $0x4,%esp
f0110541:	68 88 b1 11 f0       	push   $0xf011b188
f0110546:	68 ed 02 00 00       	push   $0x2ed
f011054b:	68 76 b1 11 f0       	push   $0xf011b176
f0110550:	e8 21 fc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110555:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110558:	e8 61 9e ff ff       	call   f010a3be <sys_calculate_free_frames>
f011055d:	29 c3                	sub    %eax,%ebx
f011055f:	89 d8                	mov    %ebx,%eax
f0110561:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110566:	74 17                	je     f011057f <test_kfree+0x193>
f0110568:	83 ec 04             	sub    $0x4,%esp
f011056b:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0110570:	68 ee 02 00 00       	push   $0x2ee
f0110575:	68 76 b1 11 f0       	push   $0xf011b176
f011057a:	e8 f7 fb fe ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011057f:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0110586:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110589:	e8 30 9e ff ff       	call   f010a3be <sys_calculate_free_frames>
f011058e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110591:	e8 eb b2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110596:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0110599:	83 ec 0c             	sub    $0xc,%esp
f011059c:	68 00 fc 1f 00       	push   $0x1ffc00
f01105a1:	e8 80 b8 ff ff       	call   f010be26 <kmalloc>
f01105a6:	83 c4 10             	add    $0x10,%esp
f01105a9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01105af:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01105b5:	89 c1                	mov    %eax,%ecx
f01105b7:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01105be:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01105c3:	0f b6 d0             	movzbl %al,%edx
f01105c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01105c9:	01 d0                	add    %edx,%eax
f01105cb:	48                   	dec    %eax
f01105cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01105cf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01105d7:	f7 75 b8             	divl   -0x48(%ebp)
f01105da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105dd:	29 d0                	sub    %edx,%eax
f01105df:	89 c3                	mov    %eax,%ebx
f01105e1:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01105e8:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01105ed:	0f b6 c0             	movzbl %al,%eax
f01105f0:	c1 e0 04             	shl    $0x4,%eax
f01105f3:	89 c2                	mov    %eax,%edx
f01105f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01105f8:	01 d0                	add    %edx,%eax
f01105fa:	48                   	dec    %eax
f01105fb:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01105fe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110601:	ba 00 00 00 00       	mov    $0x0,%edx
f0110606:	f7 75 b0             	divl   -0x50(%ebp)
f0110609:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011060c:	29 d0                	sub    %edx,%eax
f011060e:	01 d8                	add    %ebx,%eax
f0110610:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0110615:	39 c1                	cmp    %eax,%ecx
f0110617:	74 17                	je     f0110630 <test_kfree+0x244>
f0110619:	83 ec 04             	sub    $0x4,%esp
f011061c:	68 54 b2 11 f0       	push   $0xf011b254
f0110621:	68 f5 02 00 00       	push   $0x2f5
f0110626:	68 76 b1 11 f0       	push   $0xf011b176
f011062b:	e8 46 fb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110630:	e8 4c b2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110635:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110638:	74 17                	je     f0110651 <test_kfree+0x265>
f011063a:	83 ec 04             	sub    $0x4,%esp
f011063d:	68 88 b1 11 f0       	push   $0xf011b188
f0110642:	68 f6 02 00 00       	push   $0x2f6
f0110647:	68 76 b1 11 f0       	push   $0xf011b176
f011064c:	e8 25 fb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110651:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110654:	e8 65 9d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110659:	29 c3                	sub    %eax,%ebx
f011065b:	89 d8                	mov    %ebx,%eax
f011065d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110662:	74 17                	je     f011067b <test_kfree+0x28f>
f0110664:	83 ec 04             	sub    $0x4,%esp
f0110667:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011066c:	68 f7 02 00 00       	push   $0x2f7
f0110671:	68 76 b1 11 f0       	push   $0xf011b176
f0110676:	e8 fb fa fe ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011067b:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0110682:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110685:	e8 34 9d ff ff       	call   f010a3be <sys_calculate_free_frames>
f011068a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011068d:	e8 ef b1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110692:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0110695:	83 ec 0c             	sub    $0xc,%esp
f0110698:	68 00 08 00 00       	push   $0x800
f011069d:	e8 84 b7 ff ff       	call   f010be26 <kmalloc>
f01106a2:	83 c4 10             	add    $0x10,%esp
f01106a5:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01106ab:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01106b1:	89 c1                	mov    %eax,%ecx
f01106b3:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01106ba:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01106bf:	0f b6 d0             	movzbl %al,%edx
f01106c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01106c5:	01 d0                	add    %edx,%eax
f01106c7:	48                   	dec    %eax
f01106c8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01106cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01106ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01106d3:	f7 75 a8             	divl   -0x58(%ebp)
f01106d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01106d9:	29 d0                	sub    %edx,%eax
f01106db:	89 c3                	mov    %eax,%ebx
f01106dd:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01106e4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01106e9:	0f b6 c0             	movzbl %al,%eax
f01106ec:	c1 e0 04             	shl    $0x4,%eax
f01106ef:	89 c2                	mov    %eax,%edx
f01106f1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01106f4:	01 d0                	add    %edx,%eax
f01106f6:	48                   	dec    %eax
f01106f7:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01106fa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01106fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0110702:	f7 75 a0             	divl   -0x60(%ebp)
f0110705:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110708:	29 d0                	sub    %edx,%eax
f011070a:	01 d8                	add    %ebx,%eax
f011070c:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0110711:	39 c1                	cmp    %eax,%ecx
f0110713:	74 17                	je     f011072c <test_kfree+0x340>
f0110715:	83 ec 04             	sub    $0x4,%esp
f0110718:	68 54 b2 11 f0       	push   $0xf011b254
f011071d:	68 fe 02 00 00       	push   $0x2fe
f0110722:	68 76 b1 11 f0       	push   $0xf011b176
f0110727:	e8 4a fa fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011072c:	e8 50 b1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110731:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110734:	74 17                	je     f011074d <test_kfree+0x361>
f0110736:	83 ec 04             	sub    $0x4,%esp
f0110739:	68 88 b1 11 f0       	push   $0xf011b188
f011073e:	68 ff 02 00 00       	push   $0x2ff
f0110743:	68 76 b1 11 f0       	push   $0xf011b176
f0110748:	e8 29 fa fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011074d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110750:	e8 69 9c ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110755:	29 c3                	sub    %eax,%ebx
f0110757:	89 d8                	mov    %ebx,%eax
f0110759:	83 f8 01             	cmp    $0x1,%eax
f011075c:	74 17                	je     f0110775 <test_kfree+0x389>
f011075e:	83 ec 04             	sub    $0x4,%esp
f0110761:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0110766:	68 00 03 00 00       	push   $0x300
f011076b:	68 76 b1 11 f0       	push   $0xf011b176
f0110770:	e8 01 fa fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0110775:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f011077c:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011077f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110785:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0110788:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011078f:	eb 0e                	jmp    f011079f <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f0110791:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110794:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110797:	01 d0                	add    %edx,%eax
f0110799:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011079c:	ff 45 f4             	incl   -0xc(%ebp)
f011079f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01107a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01107a8:	7f e7                	jg     f0110791 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01107aa:	e8 0f 9c ff ff       	call   f010a3be <sys_calculate_free_frames>
f01107af:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01107b2:	e8 ca b0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01107b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01107ba:	83 ec 0c             	sub    $0xc,%esp
f01107bd:	68 00 08 00 00       	push   $0x800
f01107c2:	e8 5f b6 ff ff       	call   f010be26 <kmalloc>
f01107c7:	83 c4 10             	add    $0x10,%esp
f01107ca:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01107d0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01107d6:	89 c1                	mov    %eax,%ecx
f01107d8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01107df:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01107e4:	0f b6 d0             	movzbl %al,%edx
f01107e7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107ea:	01 d0                	add    %edx,%eax
f01107ec:	48                   	dec    %eax
f01107ed:	89 45 90             	mov    %eax,-0x70(%ebp)
f01107f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01107f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01107f8:	f7 75 94             	divl   -0x6c(%ebp)
f01107fb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01107fe:	29 d0                	sub    %edx,%eax
f0110800:	89 c3                	mov    %eax,%ebx
f0110802:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0110809:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011080e:	0f b6 c0             	movzbl %al,%eax
f0110811:	c1 e0 04             	shl    $0x4,%eax
f0110814:	89 c2                	mov    %eax,%edx
f0110816:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110819:	01 d0                	add    %edx,%eax
f011081b:	48                   	dec    %eax
f011081c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011081f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110822:	ba 00 00 00 00       	mov    $0x0,%edx
f0110827:	f7 75 8c             	divl   -0x74(%ebp)
f011082a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011082d:	29 d0                	sub    %edx,%eax
f011082f:	01 d8                	add    %ebx,%eax
f0110831:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0110836:	39 c1                	cmp    %eax,%ecx
f0110838:	74 17                	je     f0110851 <test_kfree+0x465>
f011083a:	83 ec 04             	sub    $0x4,%esp
f011083d:	68 54 b2 11 f0       	push   $0xf011b254
f0110842:	68 0c 03 00 00       	push   $0x30c
f0110847:	68 76 b1 11 f0       	push   $0xf011b176
f011084c:	e8 25 f9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110851:	e8 2b b0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110856:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110859:	74 17                	je     f0110872 <test_kfree+0x486>
f011085b:	83 ec 04             	sub    $0x4,%esp
f011085e:	68 88 b1 11 f0       	push   $0xf011b188
f0110863:	68 0d 03 00 00       	push   $0x30d
f0110868:	68 76 b1 11 f0       	push   $0xf011b176
f011086d:	e8 04 f9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110872:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110875:	e8 44 9b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011087a:	29 c3                	sub    %eax,%ebx
f011087c:	89 d8                	mov    %ebx,%eax
f011087e:	83 f8 01             	cmp    $0x1,%eax
f0110881:	74 17                	je     f011089a <test_kfree+0x4ae>
f0110883:	83 ec 04             	sub    $0x4,%esp
f0110886:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011088b:	68 0e 03 00 00       	push   $0x30e
f0110890:	68 76 b1 11 f0       	push   $0xf011b176
f0110895:	e8 dc f8 fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011089a:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f01108a1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01108a4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01108aa:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01108ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01108b4:	eb 0e                	jmp    f01108c4 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f01108b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01108b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01108bc:	01 d0                	add    %edx,%eax
f01108be:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01108c1:	ff 45 f4             	incl   -0xc(%ebp)
f01108c4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01108ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01108cd:	7f e7                	jg     f01108b6 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01108cf:	e8 ea 9a ff ff       	call   f010a3be <sys_calculate_free_frames>
f01108d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01108d7:	e8 a5 af ff ff       	call   f010b881 <pf_calculate_free_frames>
f01108dc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01108df:	83 ec 0c             	sub    $0xc,%esp
f01108e2:	68 00 1c 00 00       	push   $0x1c00
f01108e7:	e8 3a b5 ff ff       	call   f010be26 <kmalloc>
f01108ec:	83 c4 10             	add    $0x10,%esp
f01108ef:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01108f5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01108fb:	89 c1                	mov    %eax,%ecx
f01108fd:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0110904:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110909:	0f b6 d0             	movzbl %al,%edx
f011090c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011090f:	01 d0                	add    %edx,%eax
f0110911:	48                   	dec    %eax
f0110912:	89 45 80             	mov    %eax,-0x80(%ebp)
f0110915:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110918:	ba 00 00 00 00       	mov    $0x0,%edx
f011091d:	f7 75 84             	divl   -0x7c(%ebp)
f0110920:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110923:	29 d0                	sub    %edx,%eax
f0110925:	89 c3                	mov    %eax,%ebx
f0110927:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011092e:	10 00 00 
f0110931:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110936:	0f b6 c0             	movzbl %al,%eax
f0110939:	c1 e0 04             	shl    $0x4,%eax
f011093c:	89 c2                	mov    %eax,%edx
f011093e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110944:	01 d0                	add    %edx,%eax
f0110946:	48                   	dec    %eax
f0110947:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011094d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110953:	ba 00 00 00 00       	mov    $0x0,%edx
f0110958:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011095e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110964:	29 d0                	sub    %edx,%eax
f0110966:	01 d8                	add    %ebx,%eax
f0110968:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f011096d:	39 c1                	cmp    %eax,%ecx
f011096f:	74 17                	je     f0110988 <test_kfree+0x59c>
f0110971:	83 ec 04             	sub    $0x4,%esp
f0110974:	68 54 b2 11 f0       	push   $0xf011b254
f0110979:	68 1a 03 00 00       	push   $0x31a
f011097e:	68 76 b1 11 f0       	push   $0xf011b176
f0110983:	e8 ee f7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110988:	e8 f4 ae ff ff       	call   f010b881 <pf_calculate_free_frames>
f011098d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110990:	74 17                	je     f01109a9 <test_kfree+0x5bd>
f0110992:	83 ec 04             	sub    $0x4,%esp
f0110995:	68 88 b1 11 f0       	push   $0xf011b188
f011099a:	68 1b 03 00 00       	push   $0x31b
f011099f:	68 76 b1 11 f0       	push   $0xf011b176
f01109a4:	e8 cd f7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01109a9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01109ac:	e8 0d 9a ff ff       	call   f010a3be <sys_calculate_free_frames>
f01109b1:	29 c3                	sub    %eax,%ebx
f01109b3:	89 d8                	mov    %ebx,%eax
f01109b5:	83 f8 02             	cmp    $0x2,%eax
f01109b8:	74 17                	je     f01109d1 <test_kfree+0x5e5>
f01109ba:	83 ec 04             	sub    $0x4,%esp
f01109bd:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01109c2:	68 1c 03 00 00       	push   $0x31c
f01109c7:	68 76 b1 11 f0       	push   $0xf011b176
f01109cc:	e8 a5 f7 fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01109d1:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f01109d8:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01109db:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01109e1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01109e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01109eb:	eb 0e                	jmp    f01109fb <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f01109ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01109f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01109f3:	01 d0                	add    %edx,%eax
f01109f5:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01109f8:	ff 45 f4             	incl   -0xc(%ebp)
f01109fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110a01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110a04:	7f e7                	jg     f01109ed <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110a06:	e8 b3 99 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110a0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110a0e:	e8 6e ae ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110a13:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0110a16:	83 ec 0c             	sub    $0xc,%esp
f0110a19:	68 00 fc 2f 00       	push   $0x2ffc00
f0110a1e:	e8 03 b4 ff ff       	call   f010be26 <kmalloc>
f0110a23:	83 c4 10             	add    $0x10,%esp
f0110a26:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110a2c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110a32:	89 c1                	mov    %eax,%ecx
f0110a34:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0110a3b:	10 00 00 
f0110a3e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110a43:	0f b6 d0             	movzbl %al,%edx
f0110a46:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110a4c:	01 d0                	add    %edx,%eax
f0110a4e:	48                   	dec    %eax
f0110a4f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0110a55:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110a5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a60:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0110a66:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110a6c:	29 d0                	sub    %edx,%eax
f0110a6e:	89 c3                	mov    %eax,%ebx
f0110a70:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110a77:	10 00 00 
f0110a7a:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110a7f:	0f b6 c0             	movzbl %al,%eax
f0110a82:	c1 e0 04             	shl    $0x4,%eax
f0110a85:	89 c2                	mov    %eax,%edx
f0110a87:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110a8d:	01 d0                	add    %edx,%eax
f0110a8f:	48                   	dec    %eax
f0110a90:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110a96:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0110aa1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110aa7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110aad:	29 d0                	sub    %edx,%eax
f0110aaf:	01 d8                	add    %ebx,%eax
f0110ab1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0110ab6:	39 c1                	cmp    %eax,%ecx
f0110ab8:	74 17                	je     f0110ad1 <test_kfree+0x6e5>
f0110aba:	83 ec 04             	sub    $0x4,%esp
f0110abd:	68 54 b2 11 f0       	push   $0xf011b254
f0110ac2:	68 28 03 00 00       	push   $0x328
f0110ac7:	68 76 b1 11 f0       	push   $0xf011b176
f0110acc:	e8 a5 f6 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ad1:	e8 ab ad ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110ad6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110ad9:	74 17                	je     f0110af2 <test_kfree+0x706>
f0110adb:	83 ec 04             	sub    $0x4,%esp
f0110ade:	68 88 b1 11 f0       	push   $0xf011b188
f0110ae3:	68 29 03 00 00       	push   $0x329
f0110ae8:	68 76 b1 11 f0       	push   $0xf011b176
f0110aed:	e8 84 f6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110af2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110af5:	e8 c4 98 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110afa:	29 c3                	sub    %eax,%ebx
f0110afc:	89 d8                	mov    %ebx,%eax
f0110afe:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110b03:	74 17                	je     f0110b1c <test_kfree+0x730>
f0110b05:	83 ec 04             	sub    $0x4,%esp
f0110b08:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0110b0d:	68 2a 03 00 00       	push   $0x32a
f0110b12:	68 76 b1 11 f0       	push   $0xf011b176
f0110b17:	e8 5a f6 fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0110b1c:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0110b23:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0110b26:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110b2c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0110b2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110b36:	eb 0e                	jmp    f0110b46 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0110b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110b3b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110b3e:	01 d0                	add    %edx,%eax
f0110b40:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0110b43:	ff 45 f4             	incl   -0xc(%ebp)
f0110b46:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110b4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b4f:	7f e7                	jg     f0110b38 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0110b51:	e8 68 98 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110b59:	e8 23 ad ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110b5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0110b61:	83 ec 0c             	sub    $0xc,%esp
f0110b64:	68 00 fc 5f 00       	push   $0x5ffc00
f0110b69:	e8 b8 b2 ff ff       	call   f010be26 <kmalloc>
f0110b6e:	83 c4 10             	add    $0x10,%esp
f0110b71:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110b77:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110b7d:	89 c1                	mov    %eax,%ecx
f0110b7f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110b86:	10 00 00 
f0110b89:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110b8e:	0f b6 d0             	movzbl %al,%edx
f0110b91:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110b97:	01 d0                	add    %edx,%eax
f0110b99:	48                   	dec    %eax
f0110b9a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0110ba0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110ba6:	ba 00 00 00 00       	mov    $0x0,%edx
f0110bab:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0110bb1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110bb7:	29 d0                	sub    %edx,%eax
f0110bb9:	89 c3                	mov    %eax,%ebx
f0110bbb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0110bc2:	10 00 00 
f0110bc5:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110bca:	0f b6 c0             	movzbl %al,%eax
f0110bcd:	c1 e0 04             	shl    $0x4,%eax
f0110bd0:	89 c2                	mov    %eax,%edx
f0110bd2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0110bd8:	01 d0                	add    %edx,%eax
f0110bda:	48                   	dec    %eax
f0110bdb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0110be1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0110bec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0110bf2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110bf8:	29 d0                	sub    %edx,%eax
f0110bfa:	01 d8                	add    %ebx,%eax
f0110bfc:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f0110c01:	39 c1                	cmp    %eax,%ecx
f0110c03:	74 17                	je     f0110c1c <test_kfree+0x830>
f0110c05:	83 ec 04             	sub    $0x4,%esp
f0110c08:	68 54 b2 11 f0       	push   $0xf011b254
f0110c0d:	68 36 03 00 00       	push   $0x336
f0110c12:	68 76 b1 11 f0       	push   $0xf011b176
f0110c17:	e8 5a f5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110c1c:	e8 60 ac ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110c21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110c24:	74 17                	je     f0110c3d <test_kfree+0x851>
f0110c26:	83 ec 04             	sub    $0x4,%esp
f0110c29:	68 88 b1 11 f0       	push   $0xf011b188
f0110c2e:	68 37 03 00 00       	push   $0x337
f0110c33:	68 76 b1 11 f0       	push   $0xf011b176
f0110c38:	e8 39 f5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110c3d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110c40:	e8 79 97 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110c45:	29 c3                	sub    %eax,%ebx
f0110c47:	89 d8                	mov    %ebx,%eax
f0110c49:	3d 00 06 00 00       	cmp    $0x600,%eax
f0110c4e:	74 17                	je     f0110c67 <test_kfree+0x87b>
f0110c50:	83 ec 04             	sub    $0x4,%esp
f0110c53:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0110c58:	68 38 03 00 00       	push   $0x338
f0110c5d:	68 76 b1 11 f0       	push   $0xf011b176
f0110c62:	e8 0f f5 fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0110c67:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0110c6e:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0110c71:	e8 48 97 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110c76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110c79:	e8 03 ac ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110c7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0110c81:	83 ec 0c             	sub    $0xc,%esp
f0110c84:	68 00 38 00 00       	push   $0x3800
f0110c89:	e8 98 b1 ff ff       	call   f010be26 <kmalloc>
f0110c8e:	83 c4 10             	add    $0x10,%esp
f0110c91:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110c97:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110c9d:	89 c1                	mov    %eax,%ecx
f0110c9f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0110ca6:	10 00 00 
f0110ca9:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110cae:	0f b6 d0             	movzbl %al,%edx
f0110cb1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0110cb7:	01 d0                	add    %edx,%eax
f0110cb9:	48                   	dec    %eax
f0110cba:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0110cc0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110cc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0110ccb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0110cd1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110cd7:	29 d0                	sub    %edx,%eax
f0110cd9:	89 c3                	mov    %eax,%ebx
f0110cdb:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0110ce2:	10 00 00 
f0110ce5:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0110cea:	0f b6 c0             	movzbl %al,%eax
f0110ced:	c1 e0 04             	shl    $0x4,%eax
f0110cf0:	89 c2                	mov    %eax,%edx
f0110cf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0110cf8:	01 d0                	add    %edx,%eax
f0110cfa:	48                   	dec    %eax
f0110cfb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0110d01:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110d07:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d0c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0110d12:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110d18:	29 d0                	sub    %edx,%eax
f0110d1a:	01 d8                	add    %ebx,%eax
f0110d1c:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0110d21:	39 c1                	cmp    %eax,%ecx
f0110d23:	74 17                	je     f0110d3c <test_kfree+0x950>
f0110d25:	83 ec 04             	sub    $0x4,%esp
f0110d28:	68 54 b2 11 f0       	push   $0xf011b254
f0110d2d:	68 3f 03 00 00       	push   $0x33f
f0110d32:	68 76 b1 11 f0       	push   $0xf011b176
f0110d37:	e8 3a f4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110d3c:	e8 40 ab ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110d41:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110d44:	74 17                	je     f0110d5d <test_kfree+0x971>
f0110d46:	83 ec 04             	sub    $0x4,%esp
f0110d49:	68 88 b1 11 f0       	push   $0xf011b188
f0110d4e:	68 40 03 00 00       	push   $0x340
f0110d53:	68 76 b1 11 f0       	push   $0xf011b176
f0110d58:	e8 19 f4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110d5d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110d60:	e8 59 96 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110d65:	29 c3                	sub    %eax,%ebx
f0110d67:	89 d8                	mov    %ebx,%eax
f0110d69:	83 f8 04             	cmp    $0x4,%eax
f0110d6c:	74 17                	je     f0110d85 <test_kfree+0x999>
f0110d6e:	83 ec 04             	sub    $0x4,%esp
f0110d71:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0110d76:	68 41 03 00 00       	push   $0x341
f0110d7b:	68 76 b1 11 f0       	push   $0xf011b176
f0110d80:	e8 f1 f3 fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0110d85:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0110d8c:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0110d8f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110d95:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0110d98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110d9f:	eb 0e                	jmp    f0110daf <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f0110da1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110da4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110da7:	01 d0                	add    %edx,%eax
f0110da9:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0110dac:	ff 45 f4             	incl   -0xc(%ebp)
f0110daf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0110db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110db8:	7f e7                	jg     f0110da1 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0110dba:	e8 ff 95 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110dbf:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0110dc5:	e8 b7 aa ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110dca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0110dd0:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0110dd6:	83 ec 0c             	sub    $0xc,%esp
f0110dd9:	50                   	push   %eax
f0110dda:	e8 d8 b0 ff ff       	call   f010beb7 <kfree>
f0110ddf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110de2:	e8 9a aa ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110de7:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0110ded:	74 17                	je     f0110e06 <test_kfree+0xa1a>
f0110def:	83 ec 04             	sub    $0x4,%esp
f0110df2:	68 88 b1 11 f0       	push   $0xf011b188
f0110df7:	68 50 03 00 00       	push   $0x350
f0110dfc:	68 76 b1 11 f0       	push   $0xf011b176
f0110e01:	e8 70 f3 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0110e06:	e8 b3 95 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110e0b:	89 c2                	mov    %eax,%edx
f0110e0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110e13:	29 c2                	sub    %eax,%edx
f0110e15:	89 d0                	mov    %edx,%eax
f0110e17:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110e1c:	74 17                	je     f0110e35 <test_kfree+0xa49>
f0110e1e:	83 ec 04             	sub    $0x4,%esp
f0110e21:	68 5c b7 11 f0       	push   $0xf011b75c
f0110e26:	68 51 03 00 00       	push   $0x351
f0110e2b:	68 76 b1 11 f0       	push   $0xf011b176
f0110e30:	e8 41 f3 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110e35:	e8 84 95 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110e3a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110e40:	e8 3c aa ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110e45:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0110e4b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0110e51:	83 ec 0c             	sub    $0xc,%esp
f0110e54:	50                   	push   %eax
f0110e55:	e8 5d b0 ff ff       	call   f010beb7 <kfree>
f0110e5a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110e5d:	e8 1f aa ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110e62:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0110e68:	74 17                	je     f0110e81 <test_kfree+0xa95>
f0110e6a:	83 ec 04             	sub    $0x4,%esp
f0110e6d:	68 88 b1 11 f0       	push   $0xf011b188
f0110e72:	68 57 03 00 00       	push   $0x357
f0110e77:	68 76 b1 11 f0       	push   $0xf011b176
f0110e7c:	e8 f5 f2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0110e81:	e8 38 95 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110e86:	89 c2                	mov    %eax,%edx
f0110e88:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110e8e:	29 c2                	sub    %eax,%edx
f0110e90:	89 d0                	mov    %edx,%eax
f0110e92:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110e97:	74 17                	je     f0110eb0 <test_kfree+0xac4>
f0110e99:	83 ec 04             	sub    $0x4,%esp
f0110e9c:	68 5c b7 11 f0       	push   $0xf011b75c
f0110ea1:	68 58 03 00 00       	push   $0x358
f0110ea6:	68 76 b1 11 f0       	push   $0xf011b176
f0110eab:	e8 c6 f2 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0110eb0:	e8 09 95 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110eb5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110ebb:	e8 c1 a9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110ec0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0110ec6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110ecc:	83 ec 0c             	sub    $0xc,%esp
f0110ecf:	50                   	push   %eax
f0110ed0:	e8 e2 af ff ff       	call   f010beb7 <kfree>
f0110ed5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ed8:	e8 a4 a9 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0110edd:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0110ee3:	74 17                	je     f0110efc <test_kfree+0xb10>
f0110ee5:	83 ec 04             	sub    $0x4,%esp
f0110ee8:	68 88 b1 11 f0       	push   $0xf011b188
f0110eed:	68 5e 03 00 00       	push   $0x35e
f0110ef2:	68 76 b1 11 f0       	push   $0xf011b176
f0110ef7:	e8 7a f2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0110efc:	e8 bd 94 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0110f01:	89 c2                	mov    %eax,%edx
f0110f03:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110f09:	29 c2                	sub    %eax,%edx
f0110f0b:	89 d0                	mov    %edx,%eax
f0110f0d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0110f12:	74 17                	je     f0110f2b <test_kfree+0xb3f>
f0110f14:	83 ec 04             	sub    $0x4,%esp
f0110f17:	68 5c b7 11 f0       	push   $0xf011b75c
f0110f1c:	68 5f 03 00 00       	push   $0x35f
f0110f21:	68 76 b1 11 f0       	push   $0xf011b176
f0110f26:	e8 4b f2 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0110f2b:	83 ec 0c             	sub    $0xc,%esp
f0110f2e:	68 94 b7 11 f0       	push   $0xf011b794
f0110f33:	e8 5e 5e ff ff       	call   f0106d96 <cprintf>
f0110f38:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0110f3b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110f41:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0110f44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110f4b:	eb 1e                	jmp    f0110f6b <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f0110f4d:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0110f53:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110f56:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110f59:	01 c8                	add    %ecx,%eax
f0110f5b:	8a 00                	mov    (%eax),%al
f0110f5d:	0f be c0             	movsbl %al,%eax
f0110f60:	01 d0                	add    %edx,%eax
f0110f62:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0110f68:	ff 45 f4             	incl   -0xc(%ebp)
f0110f6b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110f71:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110f74:	7f d7                	jg     f0110f4d <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0110f76:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0110f7c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110f82:	01 c0                	add    %eax,%eax
f0110f84:	39 c2                	cmp    %eax,%edx
f0110f86:	74 17                	je     f0110f9f <test_kfree+0xbb3>
f0110f88:	83 ec 04             	sub    $0x4,%esp
f0110f8b:	68 b8 b7 11 f0       	push   $0xf011b7b8
f0110f90:	68 6c 03 00 00       	push   $0x36c
f0110f95:	68 76 b1 11 f0       	push   $0xf011b176
f0110f9a:	e8 d7 f1 fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0110f9f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0110fa5:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0110fa8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110faf:	eb 1e                	jmp    f0110fcf <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f0110fb1:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0110fb7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110fba:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110fbd:	01 c8                	add    %ecx,%eax
f0110fbf:	8a 00                	mov    (%eax),%al
f0110fc1:	0f be c0             	movsbl %al,%eax
f0110fc4:	01 d0                	add    %edx,%eax
f0110fc6:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0110fcc:	ff 45 f4             	incl   -0xc(%ebp)
f0110fcf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110fd5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110fd8:	7f d7                	jg     f0110fb1 <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0110fda:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0110fe0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110fe6:	89 c1                	mov    %eax,%ecx
f0110fe8:	01 c9                	add    %ecx,%ecx
f0110fea:	01 c8                	add    %ecx,%eax
f0110fec:	39 c2                	cmp    %eax,%edx
f0110fee:	74 17                	je     f0111007 <test_kfree+0xc1b>
f0110ff0:	83 ec 04             	sub    $0x4,%esp
f0110ff3:	68 b8 b7 11 f0       	push   $0xf011b7b8
f0110ff8:	68 74 03 00 00       	push   $0x374
f0110ffd:	68 76 b1 11 f0       	push   $0xf011b176
f0111002:	e8 6f f1 fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0111007:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011100d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0111010:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111017:	eb 1e                	jmp    f0111037 <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f0111019:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f011101f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0111022:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111025:	01 c8                	add    %ecx,%eax
f0111027:	8a 00                	mov    (%eax),%al
f0111029:	0f be c0             	movsbl %al,%eax
f011102c:	01 d0                	add    %edx,%eax
f011102e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0111034:	ff 45 f4             	incl   -0xc(%ebp)
f0111037:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011103d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111040:	7f d7                	jg     f0111019 <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0111042:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0111048:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f011104e:	c1 e2 02             	shl    $0x2,%edx
f0111051:	39 d0                	cmp    %edx,%eax
f0111053:	74 17                	je     f011106c <test_kfree+0xc80>
f0111055:	83 ec 04             	sub    $0x4,%esp
f0111058:	68 b8 b7 11 f0       	push   $0xf011b7b8
f011105d:	68 7c 03 00 00       	push   $0x37c
f0111062:	68 76 b1 11 f0       	push   $0xf011b176
f0111067:	e8 0a f1 fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011106c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111072:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0111075:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011107c:	eb 1e                	jmp    f011109c <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f011107e:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0111084:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0111087:	8b 45 98             	mov    -0x68(%ebp),%eax
f011108a:	01 c8                	add    %ecx,%eax
f011108c:	8a 00                	mov    (%eax),%al
f011108e:	0f be c0             	movsbl %al,%eax
f0111091:	01 d0                	add    %edx,%eax
f0111093:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0111099:	ff 45 f4             	incl   -0xc(%ebp)
f011109c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01110a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01110a5:	7f d7                	jg     f011107e <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01110a7:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f01110ad:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f01110b3:	89 d0                	mov    %edx,%eax
f01110b5:	c1 e0 02             	shl    $0x2,%eax
f01110b8:	01 d0                	add    %edx,%eax
f01110ba:	39 c1                	cmp    %eax,%ecx
f01110bc:	74 17                	je     f01110d5 <test_kfree+0xce9>
f01110be:	83 ec 04             	sub    $0x4,%esp
f01110c1:	68 b8 b7 11 f0       	push   $0xf011b7b8
f01110c6:	68 84 03 00 00       	push   $0x384
f01110cb:	68 76 b1 11 f0       	push   $0xf011b176
f01110d0:	e8 a1 f0 fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01110d5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01110db:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01110de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01110e5:	eb 1e                	jmp    f0111105 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f01110e7:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f01110ed:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01110f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01110f3:	01 c8                	add    %ecx,%eax
f01110f5:	8a 00                	mov    (%eax),%al
f01110f7:	0f be c0             	movsbl %al,%eax
f01110fa:	01 d0                	add    %edx,%eax
f01110fc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0111102:	ff 45 f4             	incl   -0xc(%ebp)
f0111105:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011110b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011110e:	7f d7                	jg     f01110e7 <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0111110:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0111116:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f011111c:	89 d0                	mov    %edx,%eax
f011111e:	01 c0                	add    %eax,%eax
f0111120:	01 d0                	add    %edx,%eax
f0111122:	01 c0                	add    %eax,%eax
f0111124:	01 d0                	add    %edx,%eax
f0111126:	39 c1                	cmp    %eax,%ecx
f0111128:	74 17                	je     f0111141 <test_kfree+0xd55>
f011112a:	83 ec 04             	sub    $0x4,%esp
f011112d:	68 b8 b7 11 f0       	push   $0xf011b7b8
f0111132:	68 8c 03 00 00       	push   $0x38c
f0111137:	68 76 b1 11 f0       	push   $0xf011b176
f011113c:	e8 35 f0 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f0111141:	83 ec 0c             	sub    $0xc,%esp
f0111144:	68 eb b7 11 f0       	push   $0xf011b7eb
f0111149:	e8 48 5c ff ff       	call   f0106d96 <cprintf>
f011114e:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0111151:	e8 68 92 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111156:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111159:	e8 23 a7 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011115e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0111161:	83 ec 0c             	sub    $0xc,%esp
f0111164:	68 00 50 00 00       	push   $0x5000
f0111169:	e8 b8 ac ff ff       	call   f010be26 <kmalloc>
f011116e:	83 c4 10             	add    $0x10,%esp
f0111171:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111177:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011117d:	89 c1                	mov    %eax,%ecx
f011117f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111186:	10 00 00 
f0111189:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011118e:	0f b6 d0             	movzbl %al,%edx
f0111191:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111197:	01 d0                	add    %edx,%eax
f0111199:	48                   	dec    %eax
f011119a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01111a0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01111a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01111ab:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01111b1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01111b7:	29 d0                	sub    %edx,%eax
f01111b9:	89 c3                	mov    %eax,%ebx
f01111bb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01111c2:	10 00 00 
f01111c5:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01111ca:	0f b6 c0             	movzbl %al,%eax
f01111cd:	c1 e0 04             	shl    $0x4,%eax
f01111d0:	89 c2                	mov    %eax,%edx
f01111d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01111d8:	01 d0                	add    %edx,%eax
f01111da:	48                   	dec    %eax
f01111db:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01111e1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01111e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01111ec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01111f2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01111f8:	29 d0                	sub    %edx,%eax
f01111fa:	01 d8                	add    %ebx,%eax
f01111fc:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0111201:	39 c1                	cmp    %eax,%ecx
f0111203:	74 17                	je     f011121c <test_kfree+0xe30>
f0111205:	83 ec 04             	sub    $0x4,%esp
f0111208:	68 54 b2 11 f0       	push   $0xf011b254
f011120d:	68 96 03 00 00       	push   $0x396
f0111212:	68 76 b1 11 f0       	push   $0xf011b176
f0111217:	e8 5a ef fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011121c:	e8 60 a6 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111221:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111224:	74 17                	je     f011123d <test_kfree+0xe51>
f0111226:	83 ec 04             	sub    $0x4,%esp
f0111229:	68 88 b1 11 f0       	push   $0xf011b188
f011122e:	68 97 03 00 00       	push   $0x397
f0111233:	68 76 b1 11 f0       	push   $0xf011b176
f0111238:	e8 39 ef fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011123d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111240:	e8 79 91 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111245:	29 c3                	sub    %eax,%ebx
f0111247:	89 d8                	mov    %ebx,%eax
f0111249:	83 f8 05             	cmp    $0x5,%eax
f011124c:	74 17                	je     f0111265 <test_kfree+0xe79>
f011124e:	83 ec 04             	sub    $0x4,%esp
f0111251:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0111256:	68 98 03 00 00       	push   $0x398
f011125b:	68 76 b1 11 f0       	push   $0xf011b176
f0111260:	e8 11 ef fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0111265:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f011126c:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011126f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0111275:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0111278:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011127f:	eb 0e                	jmp    f011128f <test_kfree+0xea3>
		{
			ptr[i] = 8 ;
f0111281:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111284:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111287:	01 d0                	add    %edx,%eax
f0111289:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011128c:	ff 45 f4             	incl   -0xc(%ebp)
f011128f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0111295:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111298:	7f e7                	jg     f0111281 <test_kfree+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011129a:	e8 1f 91 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011129f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01112a2:	e8 da a5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01112a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01112aa:	83 ec 0c             	sub    $0xc,%esp
f01112ad:	68 00 00 10 00       	push   $0x100000
f01112b2:	e8 6f ab ff ff       	call   f010be26 <kmalloc>
f01112b7:	83 c4 10             	add    $0x10,%esp
f01112ba:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01112c0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01112c6:	89 c1                	mov    %eax,%ecx
f01112c8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01112cf:	10 00 00 
f01112d2:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01112d7:	0f b6 d0             	movzbl %al,%edx
f01112da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01112e0:	01 d0                	add    %edx,%eax
f01112e2:	48                   	dec    %eax
f01112e3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01112e9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01112ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01112f4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01112fa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0111300:	29 d0                	sub    %edx,%eax
f0111302:	89 c3                	mov    %eax,%ebx
f0111304:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011130b:	10 00 00 
f011130e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111313:	0f b6 c0             	movzbl %al,%eax
f0111316:	c1 e0 04             	shl    $0x4,%eax
f0111319:	89 c2                	mov    %eax,%edx
f011131b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0111321:	01 d0                	add    %edx,%eax
f0111323:	48                   	dec    %eax
f0111324:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011132a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111330:	ba 00 00 00 00       	mov    $0x0,%edx
f0111335:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011133b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111341:	29 d0                	sub    %edx,%eax
f0111343:	01 d8                	add    %ebx,%eax
f0111345:	2d 00 30 2f 09       	sub    $0x92f3000,%eax
f011134a:	39 c1                	cmp    %eax,%ecx
f011134c:	74 17                	je     f0111365 <test_kfree+0xf79>
f011134e:	83 ec 04             	sub    $0x4,%esp
f0111351:	68 54 b2 11 f0       	push   $0xf011b254
f0111356:	68 a4 03 00 00       	push   $0x3a4
f011135b:	68 76 b1 11 f0       	push   $0xf011b176
f0111360:	e8 11 ee fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111365:	e8 17 a5 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011136a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011136d:	74 17                	je     f0111386 <test_kfree+0xf9a>
f011136f:	83 ec 04             	sub    $0x4,%esp
f0111372:	68 88 b1 11 f0       	push   $0xf011b188
f0111377:	68 a5 03 00 00       	push   $0x3a5
f011137c:	68 76 b1 11 f0       	push   $0xf011b176
f0111381:	e8 f0 ed fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111386:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111389:	e8 30 90 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011138e:	29 c3                	sub    %eax,%ebx
f0111390:	89 d8                	mov    %ebx,%eax
f0111392:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111397:	74 17                	je     f01113b0 <test_kfree+0xfc4>
f0111399:	83 ec 04             	sub    $0x4,%esp
f011139c:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01113a1:	68 a6 03 00 00       	push   $0x3a6
f01113a6:	68 76 b1 11 f0       	push   $0xf011b176
f01113ab:	e8 c6 ed fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01113b0:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f01113b7:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01113ba:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01113c0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01113c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01113ca:	eb 0e                	jmp    f01113da <test_kfree+0xfee>
		{
			ptr[i] = 9 ;
f01113cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01113cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01113d2:	01 d0                	add    %edx,%eax
f01113d4:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01113d7:	ff 45 f4             	incl   -0xc(%ebp)
f01113da:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01113e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01113e3:	7f e7                	jg     f01113cc <test_kfree+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f01113e5:	83 ec 0c             	sub    $0xc,%esp
f01113e8:	68 f2 b7 11 f0       	push   $0xf011b7f2
f01113ed:	e8 a4 59 ff ff       	call   f0106d96 <cprintf>
f01113f2:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01113f5:	e8 c4 8f ff ff       	call   f010a3be <sys_calculate_free_frames>
f01113fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01113fd:	e8 7f a4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111402:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0111405:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011140b:	83 ec 0c             	sub    $0xc,%esp
f011140e:	50                   	push   %eax
f011140f:	e8 a3 aa ff ff       	call   f010beb7 <kfree>
f0111414:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111417:	e8 65 a4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011141c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011141f:	74 17                	je     f0111438 <test_kfree+0x104c>
f0111421:	83 ec 04             	sub    $0x4,%esp
f0111424:	68 88 b1 11 f0       	push   $0xf011b188
f0111429:	68 b6 03 00 00       	push   $0x3b6
f011142e:	68 76 b1 11 f0       	push   $0xf011b176
f0111433:	e8 3e ed fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0111438:	e8 81 8f ff ff       	call   f010a3be <sys_calculate_free_frames>
f011143d:	89 c2                	mov    %eax,%edx
f011143f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111442:	29 c2                	sub    %eax,%edx
f0111444:	89 d0                	mov    %edx,%eax
f0111446:	83 f8 02             	cmp    $0x2,%eax
f0111449:	74 17                	je     f0111462 <test_kfree+0x1076>
f011144b:	83 ec 04             	sub    $0x4,%esp
f011144e:	68 5c b7 11 f0       	push   $0xf011b75c
f0111453:	68 b7 03 00 00       	push   $0x3b7
f0111458:	68 76 b1 11 f0       	push   $0xf011b176
f011145d:	e8 14 ed fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111462:	e8 57 8f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111467:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011146a:	e8 12 a4 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011146f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0111472:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111478:	83 ec 0c             	sub    $0xc,%esp
f011147b:	50                   	push   %eax
f011147c:	e8 36 aa ff ff       	call   f010beb7 <kfree>
f0111481:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111484:	e8 f8 a3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111489:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011148c:	74 17                	je     f01114a5 <test_kfree+0x10b9>
f011148e:	83 ec 04             	sub    $0x4,%esp
f0111491:	68 88 b1 11 f0       	push   $0xf011b188
f0111496:	68 bd 03 00 00       	push   $0x3bd
f011149b:	68 76 b1 11 f0       	push   $0xf011b176
f01114a0:	e8 d1 ec fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01114a5:	e8 14 8f ff ff       	call   f010a3be <sys_calculate_free_frames>
f01114aa:	89 c2                	mov    %eax,%edx
f01114ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01114af:	29 c2                	sub    %eax,%edx
f01114b1:	89 d0                	mov    %edx,%eax
f01114b3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01114b8:	74 17                	je     f01114d1 <test_kfree+0x10e5>
f01114ba:	83 ec 04             	sub    $0x4,%esp
f01114bd:	68 5c b7 11 f0       	push   $0xf011b75c
f01114c2:	68 be 03 00 00       	push   $0x3be
f01114c7:	68 76 b1 11 f0       	push   $0xf011b176
f01114cc:	e8 a5 ec fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01114d1:	e8 e8 8e ff ff       	call   f010a3be <sys_calculate_free_frames>
f01114d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01114d9:	e8 a3 a3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01114de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01114e1:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01114e7:	83 ec 0c             	sub    $0xc,%esp
f01114ea:	50                   	push   %eax
f01114eb:	e8 c7 a9 ff ff       	call   f010beb7 <kfree>
f01114f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01114f3:	e8 89 a3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01114f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01114fb:	74 17                	je     f0111514 <test_kfree+0x1128>
f01114fd:	83 ec 04             	sub    $0x4,%esp
f0111500:	68 88 b1 11 f0       	push   $0xf011b188
f0111505:	68 c4 03 00 00       	push   $0x3c4
f011150a:	68 76 b1 11 f0       	push   $0xf011b176
f011150f:	e8 62 ec fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0111514:	e8 a5 8e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111519:	89 c2                	mov    %eax,%edx
f011151b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011151e:	29 c2                	sub    %eax,%edx
f0111520:	89 d0                	mov    %edx,%eax
f0111522:	83 f8 01             	cmp    $0x1,%eax
f0111525:	74 17                	je     f011153e <test_kfree+0x1152>
f0111527:	83 ec 04             	sub    $0x4,%esp
f011152a:	68 5c b7 11 f0       	push   $0xf011b75c
f011152f:	68 c5 03 00 00       	push   $0x3c5
f0111534:	68 76 b1 11 f0       	push   $0xf011b176
f0111539:	e8 38 ec fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011153e:	e8 7b 8e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111543:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111546:	e8 36 a3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011154b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f011154e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111554:	83 ec 0c             	sub    $0xc,%esp
f0111557:	50                   	push   %eax
f0111558:	e8 5a a9 ff ff       	call   f010beb7 <kfree>
f011155d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111560:	e8 1c a3 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111565:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111568:	74 17                	je     f0111581 <test_kfree+0x1195>
f011156a:	83 ec 04             	sub    $0x4,%esp
f011156d:	68 88 b1 11 f0       	push   $0xf011b188
f0111572:	68 cb 03 00 00       	push   $0x3cb
f0111577:	68 76 b1 11 f0       	push   $0xf011b176
f011157c:	e8 f5 eb fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0111581:	e8 38 8e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111586:	89 c2                	mov    %eax,%edx
f0111588:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011158b:	29 c2                	sub    %eax,%edx
f011158d:	89 d0                	mov    %edx,%eax
f011158f:	83 f8 01             	cmp    $0x1,%eax
f0111592:	74 17                	je     f01115ab <test_kfree+0x11bf>
f0111594:	83 ec 04             	sub    $0x4,%esp
f0111597:	68 5c b7 11 f0       	push   $0xf011b75c
f011159c:	68 cc 03 00 00       	push   $0x3cc
f01115a1:	68 76 b1 11 f0       	push   $0xf011b176
f01115a6:	e8 cb eb fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01115ab:	e8 0e 8e ff ff       	call   f010a3be <sys_calculate_free_frames>
f01115b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01115b3:	e8 c9 a2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01115b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01115bb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01115c1:	83 ec 0c             	sub    $0xc,%esp
f01115c4:	50                   	push   %eax
f01115c5:	e8 ed a8 ff ff       	call   f010beb7 <kfree>
f01115ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01115cd:	e8 af a2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01115d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01115d5:	74 17                	je     f01115ee <test_kfree+0x1202>
f01115d7:	83 ec 04             	sub    $0x4,%esp
f01115da:	68 88 b1 11 f0       	push   $0xf011b188
f01115df:	68 d2 03 00 00       	push   $0x3d2
f01115e4:	68 76 b1 11 f0       	push   $0xf011b176
f01115e9:	e8 88 eb fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01115ee:	e8 cb 8d ff ff       	call   f010a3be <sys_calculate_free_frames>
f01115f3:	89 c2                	mov    %eax,%edx
f01115f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01115f8:	29 c2                	sub    %eax,%edx
f01115fa:	89 d0                	mov    %edx,%eax
f01115fc:	83 f8 04             	cmp    $0x4,%eax
f01115ff:	74 17                	je     f0111618 <test_kfree+0x122c>
f0111601:	83 ec 04             	sub    $0x4,%esp
f0111604:	68 5c b7 11 f0       	push   $0xf011b75c
f0111609:	68 d3 03 00 00       	push   $0x3d3
f011160e:	68 76 b1 11 f0       	push   $0xf011b176
f0111613:	e8 5e eb fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0111618:	e8 a1 8d ff ff       	call   f010a3be <sys_calculate_free_frames>
f011161d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111620:	e8 5c a2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111625:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0111628:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011162e:	83 ec 0c             	sub    $0xc,%esp
f0111631:	50                   	push   %eax
f0111632:	e8 80 a8 ff ff       	call   f010beb7 <kfree>
f0111637:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011163a:	e8 42 a2 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011163f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111642:	74 17                	je     f011165b <test_kfree+0x126f>
f0111644:	83 ec 04             	sub    $0x4,%esp
f0111647:	68 88 b1 11 f0       	push   $0xf011b188
f011164c:	68 d9 03 00 00       	push   $0x3d9
f0111651:	68 76 b1 11 f0       	push   $0xf011b176
f0111656:	e8 1b eb fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f011165b:	e8 5e 8d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111660:	89 c2                	mov    %eax,%edx
f0111662:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111665:	29 c2                	sub    %eax,%edx
f0111667:	89 d0                	mov    %edx,%eax
f0111669:	83 f8 05             	cmp    $0x5,%eax
f011166c:	74 17                	je     f0111685 <test_kfree+0x1299>
f011166e:	83 ec 04             	sub    $0x4,%esp
f0111671:	68 5c b7 11 f0       	push   $0xf011b75c
f0111676:	68 da 03 00 00       	push   $0x3da
f011167b:	68 76 b1 11 f0       	push   $0xf011b176
f0111680:	e8 f1 ea fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111685:	e8 34 8d ff ff       	call   f010a3be <sys_calculate_free_frames>
f011168a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011168d:	e8 ef a1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111692:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0111695:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011169b:	83 ec 0c             	sub    $0xc,%esp
f011169e:	50                   	push   %eax
f011169f:	e8 13 a8 ff ff       	call   f010beb7 <kfree>
f01116a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01116a7:	e8 d5 a1 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01116ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01116af:	74 17                	je     f01116c8 <test_kfree+0x12dc>
f01116b1:	83 ec 04             	sub    $0x4,%esp
f01116b4:	68 88 b1 11 f0       	push   $0xf011b188
f01116b9:	68 e0 03 00 00       	push   $0x3e0
f01116be:	68 76 b1 11 f0       	push   $0xf011b176
f01116c3:	e8 ae ea fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01116c8:	e8 f1 8c ff ff       	call   f010a3be <sys_calculate_free_frames>
f01116cd:	89 c2                	mov    %eax,%edx
f01116cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01116d2:	29 c2                	sub    %eax,%edx
f01116d4:	89 d0                	mov    %edx,%eax
f01116d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01116db:	74 17                	je     f01116f4 <test_kfree+0x1308>
f01116dd:	83 ec 04             	sub    $0x4,%esp
f01116e0:	68 5c b7 11 f0       	push   $0xf011b75c
f01116e5:	68 e1 03 00 00       	push   $0x3e1
f01116ea:	68 76 b1 11 f0       	push   $0xf011b176
f01116ef:	e8 82 ea fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01116f4:	e8 c5 8c ff ff       	call   f010a3be <sys_calculate_free_frames>
f01116f9:	89 c2                	mov    %eax,%edx
f01116fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01116fe:	39 c2                	cmp    %eax,%edx
f0111700:	74 17                	je     f0111719 <test_kfree+0x132d>
f0111702:	83 ec 04             	sub    $0x4,%esp
f0111705:	68 fc b7 11 f0       	push   $0xf011b7fc
f011170a:	68 e3 03 00 00       	push   $0x3e3
f011170f:	68 76 b1 11 f0       	push   $0xf011b176
f0111714:	e8 5d ea fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f0111719:	83 ec 0c             	sub    $0xc,%esp
f011171c:	68 30 b8 11 f0       	push   $0xf011b830
f0111721:	e8 70 56 ff ff       	call   f0106d96 <cprintf>
f0111726:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0111729:	83 ec 0c             	sub    $0xc,%esp
f011172c:	6a 03                	push   $0x3
f011172e:	e8 92 8e ff ff       	call   f010a5c5 <sys_bypassPageFault>
f0111733:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0111736:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011173d:	e9 82 00 00 00       	jmp    f01117c4 <test_kfree+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0111742:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111745:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f011174c:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f011174f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111752:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0111755:	e8 59 8e ff ff       	call   f010a5b3 <sys_rcr2>
f011175a:	89 c2                	mov    %eax,%edx
f011175c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011175f:	39 c2                	cmp    %eax,%edx
f0111761:	74 17                	je     f011177a <test_kfree+0x138e>
f0111763:	83 ec 04             	sub    $0x4,%esp
f0111766:	68 38 b8 11 f0       	push   $0xf011b838
f011176b:	68 f2 03 00 00       	push   $0x3f2
f0111770:	68 76 b1 11 f0       	push   $0xf011b176
f0111775:	e8 fc e9 fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f011177a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011177d:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0111784:	89 c2                	mov    %eax,%edx
f0111786:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111789:	01 d0                	add    %edx,%eax
f011178b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011178e:	e8 20 8e ff ff       	call   f010a5b3 <sys_rcr2>
f0111793:	89 c2                	mov    %eax,%edx
f0111795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111798:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011179f:	89 c1                	mov    %eax,%ecx
f01117a1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01117a4:	01 c8                	add    %ecx,%eax
f01117a6:	39 c2                	cmp    %eax,%edx
f01117a8:	74 17                	je     f01117c1 <test_kfree+0x13d5>
f01117aa:	83 ec 04             	sub    $0x4,%esp
f01117ad:	68 38 b8 11 f0       	push   $0xf011b838
f01117b2:	68 f4 03 00 00       	push   $0x3f4
f01117b7:	68 76 b1 11 f0       	push   $0xf011b176
f01117bc:	e8 b5 e9 fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01117c1:	ff 45 f4             	incl   -0xc(%ebp)
f01117c4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01117c8:	0f 8e 74 ff ff ff    	jle    f0111742 <test_kfree+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01117ce:	83 ec 0c             	sub    $0xc,%esp
f01117d1:	6a 00                	push   $0x0
f01117d3:	e8 ed 8d ff ff       	call   f010a5c5 <sys_bypassPageFault>
f01117d8:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01117db:	83 ec 0c             	sub    $0xc,%esp
f01117de:	68 7d b8 11 f0       	push   $0xf011b87d
f01117e3:	e8 ae 55 ff ff       	call   f0106d96 <cprintf>
f01117e8:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01117eb:	e8 ce 8b ff ff       	call   f010a3be <sys_calculate_free_frames>
f01117f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01117f3:	e8 89 a0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01117f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01117fb:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111801:	83 ec 0c             	sub    $0xc,%esp
f0111804:	50                   	push   %eax
f0111805:	e8 ad a6 ff ff       	call   f010beb7 <kfree>
f011180a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011180d:	e8 6f a0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111812:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111815:	74 17                	je     f011182e <test_kfree+0x1442>
f0111817:	83 ec 04             	sub    $0x4,%esp
f011181a:	68 88 b1 11 f0       	push   $0xf011b188
f011181f:	68 02 04 00 00       	push   $0x402
f0111824:	68 76 b1 11 f0       	push   $0xf011b176
f0111829:	e8 48 e9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011182e:	e8 8b 8b ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111833:	89 c2                	mov    %eax,%edx
f0111835:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111838:	39 c2                	cmp    %eax,%edx
f011183a:	74 17                	je     f0111853 <test_kfree+0x1467>
f011183c:	83 ec 04             	sub    $0x4,%esp
f011183f:	68 84 b8 11 f0       	push   $0xf011b884
f0111844:	68 03 04 00 00       	push   $0x403
f0111849:	68 76 b1 11 f0       	push   $0xf011b176
f011184e:	e8 23 e9 fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111853:	e8 66 8b ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111858:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011185b:	e8 21 a0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111860:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0111863:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111869:	83 ec 0c             	sub    $0xc,%esp
f011186c:	50                   	push   %eax
f011186d:	e8 45 a6 ff ff       	call   f010beb7 <kfree>
f0111872:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111875:	e8 07 a0 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011187a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011187d:	74 17                	je     f0111896 <test_kfree+0x14aa>
f011187f:	83 ec 04             	sub    $0x4,%esp
f0111882:	68 88 b1 11 f0       	push   $0xf011b188
f0111887:	68 09 04 00 00       	push   $0x409
f011188c:	68 76 b1 11 f0       	push   $0xf011b176
f0111891:	e8 e0 e8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111896:	e8 23 8b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011189b:	89 c2                	mov    %eax,%edx
f011189d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118a0:	39 c2                	cmp    %eax,%edx
f01118a2:	74 17                	je     f01118bb <test_kfree+0x14cf>
f01118a4:	83 ec 04             	sub    $0x4,%esp
f01118a7:	68 84 b8 11 f0       	push   $0xf011b884
f01118ac:	68 0a 04 00 00       	push   $0x40a
f01118b1:	68 76 b1 11 f0       	push   $0xf011b176
f01118b6:	e8 bb e8 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01118bb:	e8 fe 8a ff ff       	call   f010a3be <sys_calculate_free_frames>
f01118c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01118c3:	e8 b9 9f ff ff       	call   f010b881 <pf_calculate_free_frames>
f01118c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01118cb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01118d1:	83 ec 0c             	sub    $0xc,%esp
f01118d4:	50                   	push   %eax
f01118d5:	e8 dd a5 ff ff       	call   f010beb7 <kfree>
f01118da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01118dd:	e8 9f 9f ff ff       	call   f010b881 <pf_calculate_free_frames>
f01118e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01118e5:	74 17                	je     f01118fe <test_kfree+0x1512>
f01118e7:	83 ec 04             	sub    $0x4,%esp
f01118ea:	68 88 b1 11 f0       	push   $0xf011b188
f01118ef:	68 10 04 00 00       	push   $0x410
f01118f4:	68 76 b1 11 f0       	push   $0xf011b176
f01118f9:	e8 78 e8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01118fe:	e8 bb 8a ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111903:	89 c2                	mov    %eax,%edx
f0111905:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111908:	39 c2                	cmp    %eax,%edx
f011190a:	74 17                	je     f0111923 <test_kfree+0x1537>
f011190c:	83 ec 04             	sub    $0x4,%esp
f011190f:	68 84 b8 11 f0       	push   $0xf011b884
f0111914:	68 11 04 00 00       	push   $0x411
f0111919:	68 76 b1 11 f0       	push   $0xf011b176
f011191e:	e8 53 e8 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111923:	e8 96 8a ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111928:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011192b:	e8 51 9f ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111930:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0111933:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111939:	83 ec 0c             	sub    $0xc,%esp
f011193c:	50                   	push   %eax
f011193d:	e8 75 a5 ff ff       	call   f010beb7 <kfree>
f0111942:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111945:	e8 37 9f ff ff       	call   f010b881 <pf_calculate_free_frames>
f011194a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011194d:	74 17                	je     f0111966 <test_kfree+0x157a>
f011194f:	83 ec 04             	sub    $0x4,%esp
f0111952:	68 88 b1 11 f0       	push   $0xf011b188
f0111957:	68 17 04 00 00       	push   $0x417
f011195c:	68 76 b1 11 f0       	push   $0xf011b176
f0111961:	e8 10 e8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111966:	e8 53 8a ff ff       	call   f010a3be <sys_calculate_free_frames>
f011196b:	89 c2                	mov    %eax,%edx
f011196d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111970:	39 c2                	cmp    %eax,%edx
f0111972:	74 17                	je     f011198b <test_kfree+0x159f>
f0111974:	83 ec 04             	sub    $0x4,%esp
f0111977:	68 84 b8 11 f0       	push   $0xf011b884
f011197c:	68 18 04 00 00       	push   $0x418
f0111981:	68 76 b1 11 f0       	push   $0xf011b176
f0111986:	e8 eb e7 fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f011198b:	83 ec 0c             	sub    $0xc,%esp
f011198e:	68 cb b8 11 f0       	push   $0xf011b8cb
f0111993:	e8 fe 53 ff ff       	call   f0106d96 <cprintf>
f0111998:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011199b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01119a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01119a9:	eb 4a                	jmp    f01119f5 <test_kfree+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f01119ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119ae:	89 c1                	mov    %eax,%ecx
f01119b0:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f01119b5:	83 ec 04             	sub    $0x4,%esp
f01119b8:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f01119be:	52                   	push   %edx
f01119bf:	51                   	push   %ecx
f01119c0:	50                   	push   %eax
f01119c1:	e8 4f 21 ff ff       	call   f0103b15 <get_page_table>
f01119c6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01119c9:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01119cf:	85 c0                	test   %eax,%eax
f01119d1:	75 17                	jne    f01119ea <test_kfree+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01119d3:	83 ec 04             	sub    $0x4,%esp
f01119d6:	68 d4 b8 11 f0       	push   $0xf011b8d4
f01119db:	68 26 04 00 00       	push   $0x426
f01119e0:	68 76 b1 11 f0       	push   $0xf011b176
f01119e5:	e8 8c e7 fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01119ea:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01119f1:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01119f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01119f9:	78 b0                	js     f01119ab <test_kfree+0x15bf>
f01119fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01119ff:	7f 09                	jg     f0111a0a <test_kfree+0x161e>
f0111a01:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0111a08:	76 a1                	jbe    f01119ab <test_kfree+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0111a0a:	83 ec 0c             	sub    $0xc,%esp
f0111a0d:	68 52 b3 11 f0       	push   $0xf011b352
f0111a12:	e8 7f 53 ff ff       	call   f0106d96 <cprintf>
f0111a17:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0111a1a:	83 ec 0c             	sub    $0xc,%esp
f0111a1d:	68 3c b9 11 f0       	push   $0xf011b93c
f0111a22:	e8 6f 53 ff ff       	call   f0106d96 <cprintf>
f0111a27:	83 c4 10             	add    $0x10,%esp

	return 1;
f0111a2a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0111a2f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0111a32:	5b                   	pop    %ebx
f0111a33:	5f                   	pop    %edi
f0111a34:	5d                   	pop    %ebp
f0111a35:	c3                   	ret    

f0111a36 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f0111a36:	55                   	push   %ebp
f0111a37:	89 e5                	mov    %esp,%ebp
f0111a39:	57                   	push   %edi
f0111a3a:	53                   	push   %ebx
f0111a3b:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0111a41:	83 ec 0c             	sub    $0xc,%esp
f0111a44:	68 b8 b0 11 f0       	push   $0xf011b0b8
f0111a49:	e8 48 53 ff ff       	call   f0106d96 <cprintf>
f0111a4e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0111a51:	83 ec 0c             	sub    $0xc,%esp
f0111a54:	68 e8 b0 11 f0       	push   $0xf011b0e8
f0111a59:	e8 38 53 ff ff       	call   f0106d96 <cprintf>
f0111a5e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0111a61:	83 ec 0c             	sub    $0xc,%esp
f0111a64:	68 b8 b0 11 f0       	push   $0xf011b0b8
f0111a69:	e8 28 53 ff ff       	call   f0106d96 <cprintf>
f0111a6e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0111a71:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0111a75:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0111a79:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0111a7f:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0111a85:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0111a8c:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0111a93:	e8 26 89 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111a98:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0111a9b:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0111aa1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111aa6:	b8 00 00 00 00       	mov    $0x0,%eax
f0111aab:	89 d7                	mov    %edx,%edi
f0111aad:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0111aaf:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0111ab5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111aba:	b8 00 00 00 00       	mov    $0x0,%eax
f0111abf:	89 d7                	mov    %edx,%edi
f0111ac1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0111ac3:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0111ac9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111ace:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ad3:	89 d7                	mov    %edx,%edi
f0111ad5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111ad7:	e8 e2 88 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111adc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111adf:	e8 9d 9d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111ae4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0111ae7:	83 ec 0c             	sub    $0xc,%esp
f0111aea:	68 00 fc 1f 00       	push   $0x1ffc00
f0111aef:	e8 32 a3 ff ff       	call   f010be26 <kmalloc>
f0111af4:	83 c4 10             	add    $0x10,%esp
f0111af7:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111afd:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111b03:	89 c1                	mov    %eax,%ecx
f0111b05:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0111b0c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111b11:	0f b6 d0             	movzbl %al,%edx
f0111b14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111b17:	01 d0                	add    %edx,%eax
f0111b19:	48                   	dec    %eax
f0111b1a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0111b1d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111b20:	ba 00 00 00 00       	mov    $0x0,%edx
f0111b25:	f7 75 c8             	divl   -0x38(%ebp)
f0111b28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111b2b:	29 d0                	sub    %edx,%eax
f0111b2d:	89 c3                	mov    %eax,%ebx
f0111b2f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0111b36:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111b3b:	0f b6 c0             	movzbl %al,%eax
f0111b3e:	c1 e0 04             	shl    $0x4,%eax
f0111b41:	89 c2                	mov    %eax,%edx
f0111b43:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b46:	01 d0                	add    %edx,%eax
f0111b48:	48                   	dec    %eax
f0111b49:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0111b4c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111b4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111b54:	f7 75 c0             	divl   -0x40(%ebp)
f0111b57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111b5a:	29 d0                	sub    %edx,%eax
f0111b5c:	01 d8                	add    %ebx,%eax
f0111b5e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0111b63:	39 c1                	cmp    %eax,%ecx
f0111b65:	74 17                	je     f0111b7e <test_kfree_bestfit+0x148>
f0111b67:	83 ec 04             	sub    $0x4,%esp
f0111b6a:	68 54 b2 11 f0       	push   $0xf011b254
f0111b6f:	68 53 04 00 00       	push   $0x453
f0111b74:	68 76 b1 11 f0       	push   $0xf011b176
f0111b79:	e8 f8 e5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b7e:	e8 fe 9c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111b83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111b86:	74 17                	je     f0111b9f <test_kfree_bestfit+0x169>
f0111b88:	83 ec 04             	sub    $0x4,%esp
f0111b8b:	68 88 b1 11 f0       	push   $0xf011b188
f0111b90:	68 54 04 00 00       	push   $0x454
f0111b95:	68 76 b1 11 f0       	push   $0xf011b176
f0111b9a:	e8 d7 e5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111b9f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111ba2:	e8 17 88 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111ba7:	29 c3                	sub    %eax,%ebx
f0111ba9:	89 d8                	mov    %ebx,%eax
f0111bab:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111bb0:	74 17                	je     f0111bc9 <test_kfree_bestfit+0x193>
f0111bb2:	83 ec 04             	sub    $0x4,%esp
f0111bb5:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0111bba:	68 55 04 00 00       	push   $0x455
f0111bbf:	68 76 b1 11 f0       	push   $0xf011b176
f0111bc4:	e8 ad e5 fe ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0111bc9:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0111bd0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111bd3:	e8 e6 87 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111bd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111bdb:	e8 a1 9c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111be0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0111be3:	83 ec 0c             	sub    $0xc,%esp
f0111be6:	68 00 fc 1f 00       	push   $0x1ffc00
f0111beb:	e8 36 a2 ff ff       	call   f010be26 <kmalloc>
f0111bf0:	83 c4 10             	add    $0x10,%esp
f0111bf3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111bf9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0111bff:	89 c1                	mov    %eax,%ecx
f0111c01:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0111c08:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111c0d:	0f b6 d0             	movzbl %al,%edx
f0111c10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111c13:	01 d0                	add    %edx,%eax
f0111c15:	48                   	dec    %eax
f0111c16:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0111c19:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111c1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c21:	f7 75 b8             	divl   -0x48(%ebp)
f0111c24:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111c27:	29 d0                	sub    %edx,%eax
f0111c29:	89 c3                	mov    %eax,%ebx
f0111c2b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0111c32:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111c37:	0f b6 c0             	movzbl %al,%eax
f0111c3a:	c1 e0 04             	shl    $0x4,%eax
f0111c3d:	89 c2                	mov    %eax,%edx
f0111c3f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111c42:	01 d0                	add    %edx,%eax
f0111c44:	48                   	dec    %eax
f0111c45:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111c48:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c50:	f7 75 b0             	divl   -0x50(%ebp)
f0111c53:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c56:	29 d0                	sub    %edx,%eax
f0111c58:	01 d8                	add    %ebx,%eax
f0111c5a:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0111c5f:	39 c1                	cmp    %eax,%ecx
f0111c61:	74 17                	je     f0111c7a <test_kfree_bestfit+0x244>
f0111c63:	83 ec 04             	sub    $0x4,%esp
f0111c66:	68 54 b2 11 f0       	push   $0xf011b254
f0111c6b:	68 5c 04 00 00       	push   $0x45c
f0111c70:	68 76 b1 11 f0       	push   $0xf011b176
f0111c75:	e8 fc e4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c7a:	e8 02 9c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111c7f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111c82:	74 17                	je     f0111c9b <test_kfree_bestfit+0x265>
f0111c84:	83 ec 04             	sub    $0x4,%esp
f0111c87:	68 88 b1 11 f0       	push   $0xf011b188
f0111c8c:	68 5d 04 00 00       	push   $0x45d
f0111c91:	68 76 b1 11 f0       	push   $0xf011b176
f0111c96:	e8 db e4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111c9b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111c9e:	e8 1b 87 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111ca3:	29 c3                	sub    %eax,%ebx
f0111ca5:	89 d8                	mov    %ebx,%eax
f0111ca7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111cac:	74 17                	je     f0111cc5 <test_kfree_bestfit+0x28f>
f0111cae:	83 ec 04             	sub    $0x4,%esp
f0111cb1:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0111cb6:	68 5e 04 00 00       	push   $0x45e
f0111cbb:	68 76 b1 11 f0       	push   $0xf011b176
f0111cc0:	e8 b1 e4 fe ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0111cc5:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0111ccc:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111ccf:	e8 ea 86 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111cd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111cd7:	e8 a5 9b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111cdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0111cdf:	83 ec 0c             	sub    $0xc,%esp
f0111ce2:	68 00 08 00 00       	push   $0x800
f0111ce7:	e8 3a a1 ff ff       	call   f010be26 <kmalloc>
f0111cec:	83 c4 10             	add    $0x10,%esp
f0111cef:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111cf5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111cfb:	89 c1                	mov    %eax,%ecx
f0111cfd:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0111d04:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111d09:	0f b6 d0             	movzbl %al,%edx
f0111d0c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111d0f:	01 d0                	add    %edx,%eax
f0111d11:	48                   	dec    %eax
f0111d12:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0111d15:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111d18:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d1d:	f7 75 a8             	divl   -0x58(%ebp)
f0111d20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111d23:	29 d0                	sub    %edx,%eax
f0111d25:	89 c3                	mov    %eax,%ebx
f0111d27:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0111d2e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111d33:	0f b6 c0             	movzbl %al,%eax
f0111d36:	c1 e0 04             	shl    $0x4,%eax
f0111d39:	89 c2                	mov    %eax,%edx
f0111d3b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111d3e:	01 d0                	add    %edx,%eax
f0111d40:	48                   	dec    %eax
f0111d41:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0111d44:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111d47:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d4c:	f7 75 a0             	divl   -0x60(%ebp)
f0111d4f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111d52:	29 d0                	sub    %edx,%eax
f0111d54:	01 d8                	add    %ebx,%eax
f0111d56:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0111d5b:	39 c1                	cmp    %eax,%ecx
f0111d5d:	74 17                	je     f0111d76 <test_kfree_bestfit+0x340>
f0111d5f:	83 ec 04             	sub    $0x4,%esp
f0111d62:	68 54 b2 11 f0       	push   $0xf011b254
f0111d67:	68 65 04 00 00       	push   $0x465
f0111d6c:	68 76 b1 11 f0       	push   $0xf011b176
f0111d71:	e8 00 e4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111d76:	e8 06 9b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111d7b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111d7e:	74 17                	je     f0111d97 <test_kfree_bestfit+0x361>
f0111d80:	83 ec 04             	sub    $0x4,%esp
f0111d83:	68 88 b1 11 f0       	push   $0xf011b188
f0111d88:	68 66 04 00 00       	push   $0x466
f0111d8d:	68 76 b1 11 f0       	push   $0xf011b176
f0111d92:	e8 df e3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111d97:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111d9a:	e8 1f 86 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111d9f:	29 c3                	sub    %eax,%ebx
f0111da1:	89 d8                	mov    %ebx,%eax
f0111da3:	83 f8 01             	cmp    $0x1,%eax
f0111da6:	74 17                	je     f0111dbf <test_kfree_bestfit+0x389>
f0111da8:	83 ec 04             	sub    $0x4,%esp
f0111dab:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0111db0:	68 67 04 00 00       	push   $0x467
f0111db5:	68 76 b1 11 f0       	push   $0xf011b176
f0111dba:	e8 b7 e3 fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0111dbf:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0111dc6:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0111dc9:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111dcf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0111dd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111dd9:	eb 0e                	jmp    f0111de9 <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f0111ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111dde:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111de1:	01 d0                	add    %edx,%eax
f0111de3:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0111de6:	ff 45 f4             	incl   -0xc(%ebp)
f0111de9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111def:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111df2:	7f e7                	jg     f0111ddb <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111df4:	e8 c5 85 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111df9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111dfc:	e8 80 9a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111e01:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0111e04:	83 ec 0c             	sub    $0xc,%esp
f0111e07:	68 00 08 00 00       	push   $0x800
f0111e0c:	e8 15 a0 ff ff       	call   f010be26 <kmalloc>
f0111e11:	83 c4 10             	add    $0x10,%esp
f0111e14:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111e1a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111e20:	89 c1                	mov    %eax,%ecx
f0111e22:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0111e29:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111e2e:	0f b6 d0             	movzbl %al,%edx
f0111e31:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111e34:	01 d0                	add    %edx,%eax
f0111e36:	48                   	dec    %eax
f0111e37:	89 45 90             	mov    %eax,-0x70(%ebp)
f0111e3a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111e3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e42:	f7 75 94             	divl   -0x6c(%ebp)
f0111e45:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111e48:	29 d0                	sub    %edx,%eax
f0111e4a:	89 c3                	mov    %eax,%ebx
f0111e4c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0111e53:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111e58:	0f b6 c0             	movzbl %al,%eax
f0111e5b:	c1 e0 04             	shl    $0x4,%eax
f0111e5e:	89 c2                	mov    %eax,%edx
f0111e60:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111e63:	01 d0                	add    %edx,%eax
f0111e65:	48                   	dec    %eax
f0111e66:	89 45 88             	mov    %eax,-0x78(%ebp)
f0111e69:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e71:	f7 75 8c             	divl   -0x74(%ebp)
f0111e74:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111e77:	29 d0                	sub    %edx,%eax
f0111e79:	01 d8                	add    %ebx,%eax
f0111e7b:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0111e80:	39 c1                	cmp    %eax,%ecx
f0111e82:	74 17                	je     f0111e9b <test_kfree_bestfit+0x465>
f0111e84:	83 ec 04             	sub    $0x4,%esp
f0111e87:	68 54 b2 11 f0       	push   $0xf011b254
f0111e8c:	68 73 04 00 00       	push   $0x473
f0111e91:	68 76 b1 11 f0       	push   $0xf011b176
f0111e96:	e8 db e2 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111e9b:	e8 e1 99 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111ea0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111ea3:	74 17                	je     f0111ebc <test_kfree_bestfit+0x486>
f0111ea5:	83 ec 04             	sub    $0x4,%esp
f0111ea8:	68 88 b1 11 f0       	push   $0xf011b188
f0111ead:	68 74 04 00 00       	push   $0x474
f0111eb2:	68 76 b1 11 f0       	push   $0xf011b176
f0111eb7:	e8 ba e2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111ebc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111ebf:	e8 fa 84 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111ec4:	29 c3                	sub    %eax,%ebx
f0111ec6:	89 d8                	mov    %ebx,%eax
f0111ec8:	83 f8 01             	cmp    $0x1,%eax
f0111ecb:	74 17                	je     f0111ee4 <test_kfree_bestfit+0x4ae>
f0111ecd:	83 ec 04             	sub    $0x4,%esp
f0111ed0:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0111ed5:	68 75 04 00 00       	push   $0x475
f0111eda:	68 76 b1 11 f0       	push   $0xf011b176
f0111edf:	e8 92 e2 fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0111ee4:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0111eeb:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0111eee:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111ef4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0111ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111efe:	eb 0e                	jmp    f0111f0e <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f0111f00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111f03:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111f06:	01 d0                	add    %edx,%eax
f0111f08:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0111f0b:	ff 45 f4             	incl   -0xc(%ebp)
f0111f0e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111f14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111f17:	7f e7                	jg     f0111f00 <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0111f19:	e8 a0 84 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111f1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111f21:	e8 5b 99 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111f26:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0111f29:	83 ec 0c             	sub    $0xc,%esp
f0111f2c:	68 00 1c 00 00       	push   $0x1c00
f0111f31:	e8 f0 9e ff ff       	call   f010be26 <kmalloc>
f0111f36:	83 c4 10             	add    $0x10,%esp
f0111f39:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111f3f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0111f45:	89 c1                	mov    %eax,%ecx
f0111f47:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0111f4e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111f53:	0f b6 d0             	movzbl %al,%edx
f0111f56:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0111f59:	01 d0                	add    %edx,%eax
f0111f5b:	48                   	dec    %eax
f0111f5c:	89 45 80             	mov    %eax,-0x80(%ebp)
f0111f5f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111f62:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f67:	f7 75 84             	divl   -0x7c(%ebp)
f0111f6a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111f6d:	29 d0                	sub    %edx,%eax
f0111f6f:	89 c3                	mov    %eax,%ebx
f0111f71:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0111f78:	10 00 00 
f0111f7b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0111f80:	0f b6 c0             	movzbl %al,%eax
f0111f83:	c1 e0 04             	shl    $0x4,%eax
f0111f86:	89 c2                	mov    %eax,%edx
f0111f88:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0111f8e:	01 d0                	add    %edx,%eax
f0111f90:	48                   	dec    %eax
f0111f91:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0111f97:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111f9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111fa2:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0111fa8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111fae:	29 d0                	sub    %edx,%eax
f0111fb0:	01 d8                	add    %ebx,%eax
f0111fb2:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0111fb7:	39 c1                	cmp    %eax,%ecx
f0111fb9:	74 17                	je     f0111fd2 <test_kfree_bestfit+0x59c>
f0111fbb:	83 ec 04             	sub    $0x4,%esp
f0111fbe:	68 54 b2 11 f0       	push   $0xf011b254
f0111fc3:	68 81 04 00 00       	push   $0x481
f0111fc8:	68 76 b1 11 f0       	push   $0xf011b176
f0111fcd:	e8 a4 e1 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111fd2:	e8 aa 98 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0111fd7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111fda:	74 17                	je     f0111ff3 <test_kfree_bestfit+0x5bd>
f0111fdc:	83 ec 04             	sub    $0x4,%esp
f0111fdf:	68 88 b1 11 f0       	push   $0xf011b188
f0111fe4:	68 82 04 00 00       	push   $0x482
f0111fe9:	68 76 b1 11 f0       	push   $0xf011b176
f0111fee:	e8 83 e1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111ff3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111ff6:	e8 c3 83 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0111ffb:	29 c3                	sub    %eax,%ebx
f0111ffd:	89 d8                	mov    %ebx,%eax
f0111fff:	83 f8 02             	cmp    $0x2,%eax
f0112002:	74 17                	je     f011201b <test_kfree_bestfit+0x5e5>
f0112004:	83 ec 04             	sub    $0x4,%esp
f0112007:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011200c:	68 83 04 00 00       	push   $0x483
f0112011:	68 76 b1 11 f0       	push   $0xf011b176
f0112016:	e8 5b e1 fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011201b:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0112022:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0112025:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011202b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011202e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112035:	eb 0e                	jmp    f0112045 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f0112037:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011203a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011203d:	01 d0                	add    %edx,%eax
f011203f:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0112042:	ff 45 f4             	incl   -0xc(%ebp)
f0112045:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011204b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011204e:	7f e7                	jg     f0112037 <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112050:	e8 69 83 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112055:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112058:	e8 24 98 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011205d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0112060:	83 ec 0c             	sub    $0xc,%esp
f0112063:	68 00 fc 2f 00       	push   $0x2ffc00
f0112068:	e8 b9 9d ff ff       	call   f010be26 <kmalloc>
f011206d:	83 c4 10             	add    $0x10,%esp
f0112070:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112076:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011207c:	89 c1                	mov    %eax,%ecx
f011207e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0112085:	10 00 00 
f0112088:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011208d:	0f b6 d0             	movzbl %al,%edx
f0112090:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112096:	01 d0                	add    %edx,%eax
f0112098:	48                   	dec    %eax
f0112099:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011209f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01120a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01120aa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01120b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01120b6:	29 d0                	sub    %edx,%eax
f01120b8:	89 c3                	mov    %eax,%ebx
f01120ba:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01120c1:	10 00 00 
f01120c4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01120c9:	0f b6 c0             	movzbl %al,%eax
f01120cc:	c1 e0 04             	shl    $0x4,%eax
f01120cf:	89 c2                	mov    %eax,%edx
f01120d1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01120d7:	01 d0                	add    %edx,%eax
f01120d9:	48                   	dec    %eax
f01120da:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01120e0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01120e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01120eb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01120f1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01120f7:	29 d0                	sub    %edx,%eax
f01120f9:	01 d8                	add    %ebx,%eax
f01120fb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0112100:	39 c1                	cmp    %eax,%ecx
f0112102:	74 17                	je     f011211b <test_kfree_bestfit+0x6e5>
f0112104:	83 ec 04             	sub    $0x4,%esp
f0112107:	68 54 b2 11 f0       	push   $0xf011b254
f011210c:	68 8f 04 00 00       	push   $0x48f
f0112111:	68 76 b1 11 f0       	push   $0xf011b176
f0112116:	e8 5b e0 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011211b:	e8 61 97 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112120:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112123:	74 17                	je     f011213c <test_kfree_bestfit+0x706>
f0112125:	83 ec 04             	sub    $0x4,%esp
f0112128:	68 88 b1 11 f0       	push   $0xf011b188
f011212d:	68 90 04 00 00       	push   $0x490
f0112132:	68 76 b1 11 f0       	push   $0xf011b176
f0112137:	e8 3a e0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011213c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011213f:	e8 7a 82 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112144:	29 c3                	sub    %eax,%ebx
f0112146:	89 d8                	mov    %ebx,%eax
f0112148:	3d 00 03 00 00       	cmp    $0x300,%eax
f011214d:	74 17                	je     f0112166 <test_kfree_bestfit+0x730>
f011214f:	83 ec 04             	sub    $0x4,%esp
f0112152:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0112157:	68 91 04 00 00       	push   $0x491
f011215c:	68 76 b1 11 f0       	push   $0xf011b176
f0112161:	e8 10 e0 fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0112166:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f011216d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0112170:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112176:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0112179:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112180:	eb 0e                	jmp    f0112190 <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f0112182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112185:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112188:	01 d0                	add    %edx,%eax
f011218a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011218d:	ff 45 f4             	incl   -0xc(%ebp)
f0112190:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112196:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112199:	7f e7                	jg     f0112182 <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011219b:	e8 1e 82 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01121a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01121a3:	e8 d9 96 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01121a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01121ab:	83 ec 0c             	sub    $0xc,%esp
f01121ae:	68 00 fc 5f 00       	push   $0x5ffc00
f01121b3:	e8 6e 9c ff ff       	call   f010be26 <kmalloc>
f01121b8:	83 c4 10             	add    $0x10,%esp
f01121bb:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01121c1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01121c7:	89 c1                	mov    %eax,%ecx
f01121c9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01121d0:	10 00 00 
f01121d3:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01121d8:	0f b6 d0             	movzbl %al,%edx
f01121db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01121e1:	01 d0                	add    %edx,%eax
f01121e3:	48                   	dec    %eax
f01121e4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01121ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01121f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01121f5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01121fb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0112201:	29 d0                	sub    %edx,%eax
f0112203:	89 c3                	mov    %eax,%ebx
f0112205:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011220c:	10 00 00 
f011220f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0112214:	0f b6 c0             	movzbl %al,%eax
f0112217:	c1 e0 04             	shl    $0x4,%eax
f011221a:	89 c2                	mov    %eax,%edx
f011221c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0112222:	01 d0                	add    %edx,%eax
f0112224:	48                   	dec    %eax
f0112225:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011222b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112231:	ba 00 00 00 00       	mov    $0x0,%edx
f0112236:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011223c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112242:	29 d0                	sub    %edx,%eax
f0112244:	01 d8                	add    %ebx,%eax
f0112246:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f011224b:	39 c1                	cmp    %eax,%ecx
f011224d:	74 17                	je     f0112266 <test_kfree_bestfit+0x830>
f011224f:	83 ec 04             	sub    $0x4,%esp
f0112252:	68 54 b2 11 f0       	push   $0xf011b254
f0112257:	68 9d 04 00 00       	push   $0x49d
f011225c:	68 76 b1 11 f0       	push   $0xf011b176
f0112261:	e8 10 df fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112266:	e8 16 96 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011226b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011226e:	74 17                	je     f0112287 <test_kfree_bestfit+0x851>
f0112270:	83 ec 04             	sub    $0x4,%esp
f0112273:	68 88 b1 11 f0       	push   $0xf011b188
f0112278:	68 9e 04 00 00       	push   $0x49e
f011227d:	68 76 b1 11 f0       	push   $0xf011b176
f0112282:	e8 ef de fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112287:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011228a:	e8 2f 81 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011228f:	29 c3                	sub    %eax,%ebx
f0112291:	89 d8                	mov    %ebx,%eax
f0112293:	3d 00 06 00 00       	cmp    $0x600,%eax
f0112298:	74 17                	je     f01122b1 <test_kfree_bestfit+0x87b>
f011229a:	83 ec 04             	sub    $0x4,%esp
f011229d:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01122a2:	68 9f 04 00 00       	push   $0x49f
f01122a7:	68 76 b1 11 f0       	push   $0xf011b176
f01122ac:	e8 c5 de fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01122b1:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f01122b8:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01122bb:	e8 fe 80 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01122c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01122c3:	e8 b9 95 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01122c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01122cb:	83 ec 0c             	sub    $0xc,%esp
f01122ce:	68 00 38 00 00       	push   $0x3800
f01122d3:	e8 4e 9b ff ff       	call   f010be26 <kmalloc>
f01122d8:	83 c4 10             	add    $0x10,%esp
f01122db:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01122e1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01122e7:	89 c1                	mov    %eax,%ecx
f01122e9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01122f0:	10 00 00 
f01122f3:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01122f8:	0f b6 d0             	movzbl %al,%edx
f01122fb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0112301:	01 d0                	add    %edx,%eax
f0112303:	48                   	dec    %eax
f0112304:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011230a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112310:	ba 00 00 00 00       	mov    $0x0,%edx
f0112315:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011231b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112321:	29 d0                	sub    %edx,%eax
f0112323:	89 c3                	mov    %eax,%ebx
f0112325:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011232c:	10 00 00 
f011232f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0112334:	0f b6 c0             	movzbl %al,%eax
f0112337:	c1 e0 04             	shl    $0x4,%eax
f011233a:	89 c2                	mov    %eax,%edx
f011233c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0112342:	01 d0                	add    %edx,%eax
f0112344:	48                   	dec    %eax
f0112345:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011234b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112351:	ba 00 00 00 00       	mov    $0x0,%edx
f0112356:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011235c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112362:	29 d0                	sub    %edx,%eax
f0112364:	01 d8                	add    %ebx,%eax
f0112366:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011236b:	39 c1                	cmp    %eax,%ecx
f011236d:	74 17                	je     f0112386 <test_kfree_bestfit+0x950>
f011236f:	83 ec 04             	sub    $0x4,%esp
f0112372:	68 54 b2 11 f0       	push   $0xf011b254
f0112377:	68 a6 04 00 00       	push   $0x4a6
f011237c:	68 76 b1 11 f0       	push   $0xf011b176
f0112381:	e8 f0 dd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112386:	e8 f6 94 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011238b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011238e:	74 17                	je     f01123a7 <test_kfree_bestfit+0x971>
f0112390:	83 ec 04             	sub    $0x4,%esp
f0112393:	68 88 b1 11 f0       	push   $0xf011b188
f0112398:	68 a7 04 00 00       	push   $0x4a7
f011239d:	68 76 b1 11 f0       	push   $0xf011b176
f01123a2:	e8 cf dd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01123a7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01123aa:	e8 0f 80 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01123af:	29 c3                	sub    %eax,%ebx
f01123b1:	89 d8                	mov    %ebx,%eax
f01123b3:	83 f8 04             	cmp    $0x4,%eax
f01123b6:	74 17                	je     f01123cf <test_kfree_bestfit+0x999>
f01123b8:	83 ec 04             	sub    $0x4,%esp
f01123bb:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01123c0:	68 a8 04 00 00       	push   $0x4a8
f01123c5:	68 76 b1 11 f0       	push   $0xf011b176
f01123ca:	e8 a7 dd fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01123cf:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f01123d6:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01123d9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01123df:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01123e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01123e9:	eb 0e                	jmp    f01123f9 <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f01123eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01123ee:	8b 45 98             	mov    -0x68(%ebp),%eax
f01123f1:	01 d0                	add    %edx,%eax
f01123f3:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01123f6:	ff 45 f4             	incl   -0xc(%ebp)
f01123f9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01123ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112402:	7f e7                	jg     f01123eb <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0112404:	e8 b5 7f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112409:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011240f:	e8 6d 94 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112414:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011241a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0112420:	83 ec 0c             	sub    $0xc,%esp
f0112423:	50                   	push   %eax
f0112424:	e8 8e 9a ff ff       	call   f010beb7 <kfree>
f0112429:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011242c:	e8 50 94 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112431:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0112437:	74 17                	je     f0112450 <test_kfree_bestfit+0xa1a>
f0112439:	83 ec 04             	sub    $0x4,%esp
f011243c:	68 88 b1 11 f0       	push   $0xf011b188
f0112441:	68 b7 04 00 00       	push   $0x4b7
f0112446:	68 76 b1 11 f0       	push   $0xf011b176
f011244b:	e8 26 dd fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0112450:	e8 69 7f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112455:	89 c2                	mov    %eax,%edx
f0112457:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011245d:	29 c2                	sub    %eax,%edx
f011245f:	89 d0                	mov    %edx,%eax
f0112461:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112466:	74 17                	je     f011247f <test_kfree_bestfit+0xa49>
f0112468:	83 ec 04             	sub    $0x4,%esp
f011246b:	68 5c b7 11 f0       	push   $0xf011b75c
f0112470:	68 b8 04 00 00       	push   $0x4b8
f0112475:	68 76 b1 11 f0       	push   $0xf011b176
f011247a:	e8 f7 dc fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011247f:	e8 3a 7f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112484:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011248a:	e8 f2 93 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011248f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0112495:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011249b:	83 ec 0c             	sub    $0xc,%esp
f011249e:	50                   	push   %eax
f011249f:	e8 13 9a ff ff       	call   f010beb7 <kfree>
f01124a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01124a7:	e8 d5 93 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01124ac:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01124b2:	74 17                	je     f01124cb <test_kfree_bestfit+0xa95>
f01124b4:	83 ec 04             	sub    $0x4,%esp
f01124b7:	68 88 b1 11 f0       	push   $0xf011b188
f01124bc:	68 be 04 00 00       	push   $0x4be
f01124c1:	68 76 b1 11 f0       	push   $0xf011b176
f01124c6:	e8 ab dc fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01124cb:	e8 ee 7e ff ff       	call   f010a3be <sys_calculate_free_frames>
f01124d0:	89 c2                	mov    %eax,%edx
f01124d2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01124d8:	29 c2                	sub    %eax,%edx
f01124da:	89 d0                	mov    %edx,%eax
f01124dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01124e1:	74 17                	je     f01124fa <test_kfree_bestfit+0xac4>
f01124e3:	83 ec 04             	sub    $0x4,%esp
f01124e6:	68 5c b7 11 f0       	push   $0xf011b75c
f01124eb:	68 bf 04 00 00       	push   $0x4bf
f01124f0:	68 76 b1 11 f0       	push   $0xf011b176
f01124f5:	e8 7c dc fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01124fa:	e8 bf 7e ff ff       	call   f010a3be <sys_calculate_free_frames>
f01124ff:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112505:	e8 77 93 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011250a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0112510:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0112516:	83 ec 0c             	sub    $0xc,%esp
f0112519:	50                   	push   %eax
f011251a:	e8 98 99 ff ff       	call   f010beb7 <kfree>
f011251f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112522:	e8 5a 93 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112527:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011252d:	74 17                	je     f0112546 <test_kfree_bestfit+0xb10>
f011252f:	83 ec 04             	sub    $0x4,%esp
f0112532:	68 88 b1 11 f0       	push   $0xf011b188
f0112537:	68 c5 04 00 00       	push   $0x4c5
f011253c:	68 76 b1 11 f0       	push   $0xf011b176
f0112541:	e8 30 dc fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0112546:	e8 73 7e ff ff       	call   f010a3be <sys_calculate_free_frames>
f011254b:	89 c2                	mov    %eax,%edx
f011254d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0112553:	29 c2                	sub    %eax,%edx
f0112555:	89 d0                	mov    %edx,%eax
f0112557:	3d 00 06 00 00       	cmp    $0x600,%eax
f011255c:	74 17                	je     f0112575 <test_kfree_bestfit+0xb3f>
f011255e:	83 ec 04             	sub    $0x4,%esp
f0112561:	68 5c b7 11 f0       	push   $0xf011b75c
f0112566:	68 c6 04 00 00       	push   $0x4c6
f011256b:	68 76 b1 11 f0       	push   $0xf011b176
f0112570:	e8 01 dc fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0112575:	83 ec 0c             	sub    $0xc,%esp
f0112578:	68 94 b7 11 f0       	push   $0xf011b794
f011257d:	e8 14 48 ff ff       	call   f0106d96 <cprintf>
f0112582:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0112585:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011258b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011258e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112595:	eb 1e                	jmp    f01125b5 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0112597:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f011259d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01125a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01125a3:	01 c8                	add    %ecx,%eax
f01125a5:	8a 00                	mov    (%eax),%al
f01125a7:	0f be c0             	movsbl %al,%eax
f01125aa:	01 d0                	add    %edx,%eax
f01125ac:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01125b2:	ff 45 f4             	incl   -0xc(%ebp)
f01125b5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01125bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01125be:	7f d7                	jg     f0112597 <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01125c0:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01125c6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01125cc:	01 c0                	add    %eax,%eax
f01125ce:	39 c2                	cmp    %eax,%edx
f01125d0:	74 17                	je     f01125e9 <test_kfree_bestfit+0xbb3>
f01125d2:	83 ec 04             	sub    $0x4,%esp
f01125d5:	68 b8 b7 11 f0       	push   $0xf011b7b8
f01125da:	68 d3 04 00 00       	push   $0x4d3
f01125df:	68 76 b1 11 f0       	push   $0xf011b176
f01125e4:	e8 8d db fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01125e9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01125ef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01125f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01125f9:	eb 1e                	jmp    f0112619 <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f01125fb:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0112601:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112604:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112607:	01 c8                	add    %ecx,%eax
f0112609:	8a 00                	mov    (%eax),%al
f011260b:	0f be c0             	movsbl %al,%eax
f011260e:	01 d0                	add    %edx,%eax
f0112610:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0112616:	ff 45 f4             	incl   -0xc(%ebp)
f0112619:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011261f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112622:	7f d7                	jg     f01125fb <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0112624:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f011262a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0112630:	89 c1                	mov    %eax,%ecx
f0112632:	01 c9                	add    %ecx,%ecx
f0112634:	01 c8                	add    %ecx,%eax
f0112636:	39 c2                	cmp    %eax,%edx
f0112638:	74 17                	je     f0112651 <test_kfree_bestfit+0xc1b>
f011263a:	83 ec 04             	sub    $0x4,%esp
f011263d:	68 b8 b7 11 f0       	push   $0xf011b7b8
f0112642:	68 db 04 00 00       	push   $0x4db
f0112647:	68 76 b1 11 f0       	push   $0xf011b176
f011264c:	e8 25 db fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0112651:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112657:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011265a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112661:	eb 1e                	jmp    f0112681 <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f0112663:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0112669:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011266c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011266f:	01 c8                	add    %ecx,%eax
f0112671:	8a 00                	mov    (%eax),%al
f0112673:	0f be c0             	movsbl %al,%eax
f0112676:	01 d0                	add    %edx,%eax
f0112678:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011267e:	ff 45 f4             	incl   -0xc(%ebp)
f0112681:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112687:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011268a:	7f d7                	jg     f0112663 <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011268c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0112692:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0112698:	c1 e2 02             	shl    $0x2,%edx
f011269b:	39 d0                	cmp    %edx,%eax
f011269d:	74 17                	je     f01126b6 <test_kfree_bestfit+0xc80>
f011269f:	83 ec 04             	sub    $0x4,%esp
f01126a2:	68 b8 b7 11 f0       	push   $0xf011b7b8
f01126a7:	68 e3 04 00 00       	push   $0x4e3
f01126ac:	68 76 b1 11 f0       	push   $0xf011b176
f01126b1:	e8 c0 da fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01126b6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01126bc:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01126bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01126c6:	eb 1e                	jmp    f01126e6 <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f01126c8:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01126ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01126d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01126d4:	01 c8                	add    %ecx,%eax
f01126d6:	8a 00                	mov    (%eax),%al
f01126d8:	0f be c0             	movsbl %al,%eax
f01126db:	01 d0                	add    %edx,%eax
f01126dd:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01126e3:	ff 45 f4             	incl   -0xc(%ebp)
f01126e6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01126ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01126ef:	7f d7                	jg     f01126c8 <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01126f1:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f01126f7:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f01126fd:	89 d0                	mov    %edx,%eax
f01126ff:	c1 e0 02             	shl    $0x2,%eax
f0112702:	01 d0                	add    %edx,%eax
f0112704:	39 c1                	cmp    %eax,%ecx
f0112706:	74 17                	je     f011271f <test_kfree_bestfit+0xce9>
f0112708:	83 ec 04             	sub    $0x4,%esp
f011270b:	68 b8 b7 11 f0       	push   $0xf011b7b8
f0112710:	68 eb 04 00 00       	push   $0x4eb
f0112715:	68 76 b1 11 f0       	push   $0xf011b176
f011271a:	e8 57 da fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011271f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112725:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0112728:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011272f:	eb 1e                	jmp    f011274f <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f0112731:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0112737:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011273a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011273d:	01 c8                	add    %ecx,%eax
f011273f:	8a 00                	mov    (%eax),%al
f0112741:	0f be c0             	movsbl %al,%eax
f0112744:	01 d0                	add    %edx,%eax
f0112746:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011274c:	ff 45 f4             	incl   -0xc(%ebp)
f011274f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0112755:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112758:	7f d7                	jg     f0112731 <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011275a:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0112760:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0112766:	89 d0                	mov    %edx,%eax
f0112768:	01 c0                	add    %eax,%eax
f011276a:	01 d0                	add    %edx,%eax
f011276c:	01 c0                	add    %eax,%eax
f011276e:	01 d0                	add    %edx,%eax
f0112770:	39 c1                	cmp    %eax,%ecx
f0112772:	74 17                	je     f011278b <test_kfree_bestfit+0xd55>
f0112774:	83 ec 04             	sub    $0x4,%esp
f0112777:	68 b8 b7 11 f0       	push   $0xf011b7b8
f011277c:	68 f3 04 00 00       	push   $0x4f3
f0112781:	68 76 b1 11 f0       	push   $0xf011b176
f0112786:	e8 eb d9 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f011278b:	83 ec 0c             	sub    $0xc,%esp
f011278e:	68 eb b7 11 f0       	push   $0xf011b7eb
f0112793:	e8 fe 45 ff ff       	call   f0106d96 <cprintf>
f0112798:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011279b:	e8 1e 7c ff ff       	call   f010a3be <sys_calculate_free_frames>
f01127a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01127a3:	e8 d9 90 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01127a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01127ab:	83 ec 0c             	sub    $0xc,%esp
f01127ae:	68 00 50 00 00       	push   $0x5000
f01127b3:	e8 6e 96 ff ff       	call   f010be26 <kmalloc>
f01127b8:	83 c4 10             	add    $0x10,%esp
f01127bb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01127c1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01127c7:	89 c1                	mov    %eax,%ecx
f01127c9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01127d0:	10 00 00 
f01127d3:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01127d8:	0f b6 d0             	movzbl %al,%edx
f01127db:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01127e1:	01 d0                	add    %edx,%eax
f01127e3:	48                   	dec    %eax
f01127e4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01127ea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01127f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01127f5:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01127fb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112801:	29 d0                	sub    %edx,%eax
f0112803:	89 c3                	mov    %eax,%ebx
f0112805:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011280c:	10 00 00 
f011280f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0112814:	0f b6 c0             	movzbl %al,%eax
f0112817:	c1 e0 04             	shl    $0x4,%eax
f011281a:	89 c2                	mov    %eax,%edx
f011281c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112822:	01 d0                	add    %edx,%eax
f0112824:	48                   	dec    %eax
f0112825:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011282b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112831:	ba 00 00 00 00       	mov    $0x0,%edx
f0112836:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011283c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112842:	29 d0                	sub    %edx,%eax
f0112844:	01 d8                	add    %ebx,%eax
f0112846:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011284b:	39 c1                	cmp    %eax,%ecx
f011284d:	74 17                	je     f0112866 <test_kfree_bestfit+0xe30>
f011284f:	83 ec 04             	sub    $0x4,%esp
f0112852:	68 54 b2 11 f0       	push   $0xf011b254
f0112857:	68 fd 04 00 00       	push   $0x4fd
f011285c:	68 76 b1 11 f0       	push   $0xf011b176
f0112861:	e8 10 d9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112866:	e8 16 90 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011286b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011286e:	74 17                	je     f0112887 <test_kfree_bestfit+0xe51>
f0112870:	83 ec 04             	sub    $0x4,%esp
f0112873:	68 88 b1 11 f0       	push   $0xf011b188
f0112878:	68 fe 04 00 00       	push   $0x4fe
f011287d:	68 76 b1 11 f0       	push   $0xf011b176
f0112882:	e8 ef d8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112887:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011288a:	e8 2f 7b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011288f:	29 c3                	sub    %eax,%ebx
f0112891:	89 d8                	mov    %ebx,%eax
f0112893:	83 f8 05             	cmp    $0x5,%eax
f0112896:	74 17                	je     f01128af <test_kfree_bestfit+0xe79>
f0112898:	83 ec 04             	sub    $0x4,%esp
f011289b:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01128a0:	68 ff 04 00 00       	push   $0x4ff
f01128a5:	68 76 b1 11 f0       	push   $0xf011b176
f01128aa:	e8 c7 d8 fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01128af:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f01128b6:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01128b9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01128bf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01128c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01128c9:	eb 0e                	jmp    f01128d9 <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f01128cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01128ce:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128d1:	01 d0                	add    %edx,%eax
f01128d3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01128d6:	ff 45 f4             	incl   -0xc(%ebp)
f01128d9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01128df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01128e2:	7f e7                	jg     f01128cb <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01128e4:	e8 d5 7a ff ff       	call   f010a3be <sys_calculate_free_frames>
f01128e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01128ec:	e8 90 8f ff ff       	call   f010b881 <pf_calculate_free_frames>
f01128f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01128f4:	83 ec 0c             	sub    $0xc,%esp
f01128f7:	68 00 00 10 00       	push   $0x100000
f01128fc:	e8 25 95 ff ff       	call   f010be26 <kmalloc>
f0112901:	83 c4 10             	add    $0x10,%esp
f0112904:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011290a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112910:	89 c1                	mov    %eax,%ecx
f0112912:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0112919:	10 00 00 
f011291c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0112921:	0f b6 d0             	movzbl %al,%edx
f0112924:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011292a:	01 d0                	add    %edx,%eax
f011292c:	48                   	dec    %eax
f011292d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0112933:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112939:	ba 00 00 00 00       	mov    $0x0,%edx
f011293e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112944:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011294a:	29 d0                	sub    %edx,%eax
f011294c:	89 c3                	mov    %eax,%ebx
f011294e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0112955:	10 00 00 
f0112958:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011295d:	0f b6 c0             	movzbl %al,%eax
f0112960:	c1 e0 04             	shl    $0x4,%eax
f0112963:	89 c2                	mov    %eax,%edx
f0112965:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011296b:	01 d0                	add    %edx,%eax
f011296d:	48                   	dec    %eax
f011296e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0112974:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011297a:	ba 00 00 00 00       	mov    $0x0,%edx
f011297f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0112985:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011298b:	29 d0                	sub    %edx,%eax
f011298d:	01 d8                	add    %ebx,%eax
f011298f:	2d 00 b0 ff 09       	sub    $0x9ffb000,%eax
f0112994:	39 c1                	cmp    %eax,%ecx
f0112996:	74 17                	je     f01129af <test_kfree_bestfit+0xf79>
f0112998:	83 ec 04             	sub    $0x4,%esp
f011299b:	68 54 b2 11 f0       	push   $0xf011b254
f01129a0:	68 0b 05 00 00       	push   $0x50b
f01129a5:	68 76 b1 11 f0       	push   $0xf011b176
f01129aa:	e8 c7 d7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01129af:	e8 cd 8e ff ff       	call   f010b881 <pf_calculate_free_frames>
f01129b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01129b7:	74 17                	je     f01129d0 <test_kfree_bestfit+0xf9a>
f01129b9:	83 ec 04             	sub    $0x4,%esp
f01129bc:	68 88 b1 11 f0       	push   $0xf011b188
f01129c1:	68 0c 05 00 00       	push   $0x50c
f01129c6:	68 76 b1 11 f0       	push   $0xf011b176
f01129cb:	e8 a6 d7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01129d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01129d3:	e8 e6 79 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01129d8:	29 c3                	sub    %eax,%ebx
f01129da:	89 d8                	mov    %ebx,%eax
f01129dc:	3d 00 01 00 00       	cmp    $0x100,%eax
f01129e1:	74 17                	je     f01129fa <test_kfree_bestfit+0xfc4>
f01129e3:	83 ec 04             	sub    $0x4,%esp
f01129e6:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01129eb:	68 0d 05 00 00       	push   $0x50d
f01129f0:	68 76 b1 11 f0       	push   $0xf011b176
f01129f5:	e8 7c d7 fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01129fa:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0112a01:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0112a04:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112a0a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0112a0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112a14:	eb 0e                	jmp    f0112a24 <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f0112a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112a19:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a1c:	01 d0                	add    %edx,%eax
f0112a1e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0112a21:	ff 45 f4             	incl   -0xc(%ebp)
f0112a24:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0112a2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112a2d:	7f e7                	jg     f0112a16 <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0112a2f:	83 ec 0c             	sub    $0xc,%esp
f0112a32:	68 f2 b7 11 f0       	push   $0xf011b7f2
f0112a37:	e8 5a 43 ff ff       	call   f0106d96 <cprintf>
f0112a3c:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0112a3f:	e8 7a 79 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112a44:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112a47:	e8 35 8e ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112a4c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0112a4f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112a55:	83 ec 0c             	sub    $0xc,%esp
f0112a58:	50                   	push   %eax
f0112a59:	e8 59 94 ff ff       	call   f010beb7 <kfree>
f0112a5e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112a61:	e8 1b 8e ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112a66:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112a69:	74 17                	je     f0112a82 <test_kfree_bestfit+0x104c>
f0112a6b:	83 ec 04             	sub    $0x4,%esp
f0112a6e:	68 88 b1 11 f0       	push   $0xf011b188
f0112a73:	68 1d 05 00 00       	push   $0x51d
f0112a78:	68 76 b1 11 f0       	push   $0xf011b176
f0112a7d:	e8 f4 d6 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0112a82:	e8 37 79 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112a87:	89 c2                	mov    %eax,%edx
f0112a89:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112a8c:	29 c2                	sub    %eax,%edx
f0112a8e:	89 d0                	mov    %edx,%eax
f0112a90:	83 f8 02             	cmp    $0x2,%eax
f0112a93:	74 17                	je     f0112aac <test_kfree_bestfit+0x1076>
f0112a95:	83 ec 04             	sub    $0x4,%esp
f0112a98:	68 5c b7 11 f0       	push   $0xf011b75c
f0112a9d:	68 1e 05 00 00       	push   $0x51e
f0112aa2:	68 76 b1 11 f0       	push   $0xf011b176
f0112aa7:	e8 ca d6 fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112aac:	e8 0d 79 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112ab1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ab4:	e8 c8 8d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112ab9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0112abc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112ac2:	83 ec 0c             	sub    $0xc,%esp
f0112ac5:	50                   	push   %eax
f0112ac6:	e8 ec 93 ff ff       	call   f010beb7 <kfree>
f0112acb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112ace:	e8 ae 8d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112ad3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112ad6:	74 17                	je     f0112aef <test_kfree_bestfit+0x10b9>
f0112ad8:	83 ec 04             	sub    $0x4,%esp
f0112adb:	68 88 b1 11 f0       	push   $0xf011b188
f0112ae0:	68 24 05 00 00       	push   $0x524
f0112ae5:	68 76 b1 11 f0       	push   $0xf011b176
f0112aea:	e8 87 d6 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0112aef:	e8 ca 78 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112af4:	89 c2                	mov    %eax,%edx
f0112af6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112af9:	29 c2                	sub    %eax,%edx
f0112afb:	89 d0                	mov    %edx,%eax
f0112afd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112b02:	74 17                	je     f0112b1b <test_kfree_bestfit+0x10e5>
f0112b04:	83 ec 04             	sub    $0x4,%esp
f0112b07:	68 5c b7 11 f0       	push   $0xf011b75c
f0112b0c:	68 25 05 00 00       	push   $0x525
f0112b11:	68 76 b1 11 f0       	push   $0xf011b176
f0112b16:	e8 5b d6 fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112b1b:	e8 9e 78 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112b20:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112b23:	e8 59 8d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112b28:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0112b2b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112b31:	83 ec 0c             	sub    $0xc,%esp
f0112b34:	50                   	push   %eax
f0112b35:	e8 7d 93 ff ff       	call   f010beb7 <kfree>
f0112b3a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112b3d:	e8 3f 8d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112b42:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112b45:	74 17                	je     f0112b5e <test_kfree_bestfit+0x1128>
f0112b47:	83 ec 04             	sub    $0x4,%esp
f0112b4a:	68 88 b1 11 f0       	push   $0xf011b188
f0112b4f:	68 2b 05 00 00       	push   $0x52b
f0112b54:	68 76 b1 11 f0       	push   $0xf011b176
f0112b59:	e8 18 d6 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0112b5e:	e8 5b 78 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112b63:	89 c2                	mov    %eax,%edx
f0112b65:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112b68:	29 c2                	sub    %eax,%edx
f0112b6a:	89 d0                	mov    %edx,%eax
f0112b6c:	83 f8 01             	cmp    $0x1,%eax
f0112b6f:	74 17                	je     f0112b88 <test_kfree_bestfit+0x1152>
f0112b71:	83 ec 04             	sub    $0x4,%esp
f0112b74:	68 5c b7 11 f0       	push   $0xf011b75c
f0112b79:	68 2c 05 00 00       	push   $0x52c
f0112b7e:	68 76 b1 11 f0       	push   $0xf011b176
f0112b83:	e8 ee d5 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112b88:	e8 31 78 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112b8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112b90:	e8 ec 8c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112b95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0112b98:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0112b9e:	83 ec 0c             	sub    $0xc,%esp
f0112ba1:	50                   	push   %eax
f0112ba2:	e8 10 93 ff ff       	call   f010beb7 <kfree>
f0112ba7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112baa:	e8 d2 8c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112baf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112bb2:	74 17                	je     f0112bcb <test_kfree_bestfit+0x1195>
f0112bb4:	83 ec 04             	sub    $0x4,%esp
f0112bb7:	68 88 b1 11 f0       	push   $0xf011b188
f0112bbc:	68 32 05 00 00       	push   $0x532
f0112bc1:	68 76 b1 11 f0       	push   $0xf011b176
f0112bc6:	e8 ab d5 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0112bcb:	e8 ee 77 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112bd0:	89 c2                	mov    %eax,%edx
f0112bd2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112bd5:	29 c2                	sub    %eax,%edx
f0112bd7:	89 d0                	mov    %edx,%eax
f0112bd9:	83 f8 01             	cmp    $0x1,%eax
f0112bdc:	74 17                	je     f0112bf5 <test_kfree_bestfit+0x11bf>
f0112bde:	83 ec 04             	sub    $0x4,%esp
f0112be1:	68 5c b7 11 f0       	push   $0xf011b75c
f0112be6:	68 33 05 00 00       	push   $0x533
f0112beb:	68 76 b1 11 f0       	push   $0xf011b176
f0112bf0:	e8 81 d5 fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0112bf5:	e8 c4 77 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112bfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112bfd:	e8 7f 8c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112c02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0112c05:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112c0b:	83 ec 0c             	sub    $0xc,%esp
f0112c0e:	50                   	push   %eax
f0112c0f:	e8 a3 92 ff ff       	call   f010beb7 <kfree>
f0112c14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c17:	e8 65 8c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112c1c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112c1f:	74 17                	je     f0112c38 <test_kfree_bestfit+0x1202>
f0112c21:	83 ec 04             	sub    $0x4,%esp
f0112c24:	68 88 b1 11 f0       	push   $0xf011b188
f0112c29:	68 39 05 00 00       	push   $0x539
f0112c2e:	68 76 b1 11 f0       	push   $0xf011b176
f0112c33:	e8 3e d5 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0112c38:	e8 81 77 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112c3d:	89 c2                	mov    %eax,%edx
f0112c3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112c42:	29 c2                	sub    %eax,%edx
f0112c44:	89 d0                	mov    %edx,%eax
f0112c46:	83 f8 04             	cmp    $0x4,%eax
f0112c49:	74 17                	je     f0112c62 <test_kfree_bestfit+0x122c>
f0112c4b:	83 ec 04             	sub    $0x4,%esp
f0112c4e:	68 5c b7 11 f0       	push   $0xf011b75c
f0112c53:	68 3a 05 00 00       	push   $0x53a
f0112c58:	68 76 b1 11 f0       	push   $0xf011b176
f0112c5d:	e8 14 d5 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0112c62:	e8 57 77 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112c67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112c6a:	e8 12 8c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112c6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0112c72:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112c78:	83 ec 0c             	sub    $0xc,%esp
f0112c7b:	50                   	push   %eax
f0112c7c:	e8 36 92 ff ff       	call   f010beb7 <kfree>
f0112c81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c84:	e8 f8 8b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112c89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112c8c:	74 17                	je     f0112ca5 <test_kfree_bestfit+0x126f>
f0112c8e:	83 ec 04             	sub    $0x4,%esp
f0112c91:	68 88 b1 11 f0       	push   $0xf011b188
f0112c96:	68 40 05 00 00       	push   $0x540
f0112c9b:	68 76 b1 11 f0       	push   $0xf011b176
f0112ca0:	e8 d1 d4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0112ca5:	e8 14 77 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112caa:	89 c2                	mov    %eax,%edx
f0112cac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112caf:	29 c2                	sub    %eax,%edx
f0112cb1:	89 d0                	mov    %edx,%eax
f0112cb3:	83 f8 05             	cmp    $0x5,%eax
f0112cb6:	74 17                	je     f0112ccf <test_kfree_bestfit+0x1299>
f0112cb8:	83 ec 04             	sub    $0x4,%esp
f0112cbb:	68 5c b7 11 f0       	push   $0xf011b75c
f0112cc0:	68 41 05 00 00       	push   $0x541
f0112cc5:	68 76 b1 11 f0       	push   $0xf011b176
f0112cca:	e8 a7 d4 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112ccf:	e8 ea 76 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112cd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112cd7:	e8 a5 8b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112cdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0112cdf:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112ce5:	83 ec 0c             	sub    $0xc,%esp
f0112ce8:	50                   	push   %eax
f0112ce9:	e8 c9 91 ff ff       	call   f010beb7 <kfree>
f0112cee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112cf1:	e8 8b 8b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112cf6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112cf9:	74 17                	je     f0112d12 <test_kfree_bestfit+0x12dc>
f0112cfb:	83 ec 04             	sub    $0x4,%esp
f0112cfe:	68 88 b1 11 f0       	push   $0xf011b188
f0112d03:	68 47 05 00 00       	push   $0x547
f0112d08:	68 76 b1 11 f0       	push   $0xf011b176
f0112d0d:	e8 64 d4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0112d12:	e8 a7 76 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112d17:	89 c2                	mov    %eax,%edx
f0112d19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112d1c:	29 c2                	sub    %eax,%edx
f0112d1e:	89 d0                	mov    %edx,%eax
f0112d20:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112d25:	74 17                	je     f0112d3e <test_kfree_bestfit+0x1308>
f0112d27:	83 ec 04             	sub    $0x4,%esp
f0112d2a:	68 5c b7 11 f0       	push   $0xf011b75c
f0112d2f:	68 48 05 00 00       	push   $0x548
f0112d34:	68 76 b1 11 f0       	push   $0xf011b176
f0112d39:	e8 38 d4 fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0112d3e:	e8 7b 76 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112d43:	89 c2                	mov    %eax,%edx
f0112d45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112d48:	39 c2                	cmp    %eax,%edx
f0112d4a:	74 17                	je     f0112d63 <test_kfree_bestfit+0x132d>
f0112d4c:	83 ec 04             	sub    $0x4,%esp
f0112d4f:	68 fc b7 11 f0       	push   $0xf011b7fc
f0112d54:	68 4a 05 00 00       	push   $0x54a
f0112d59:	68 76 b1 11 f0       	push   $0xf011b176
f0112d5e:	e8 13 d4 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f0112d63:	83 ec 0c             	sub    $0xc,%esp
f0112d66:	68 30 b8 11 f0       	push   $0xf011b830
f0112d6b:	e8 26 40 ff ff       	call   f0106d96 <cprintf>
f0112d70:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0112d73:	83 ec 0c             	sub    $0xc,%esp
f0112d76:	6a 03                	push   $0x3
f0112d78:	e8 48 78 ff ff       	call   f010a5c5 <sys_bypassPageFault>
f0112d7d:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0112d80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112d87:	e9 82 00 00 00       	jmp    f0112e0e <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0112d8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112d8f:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0112d96:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0112d99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d9c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0112d9f:	e8 0f 78 ff ff       	call   f010a5b3 <sys_rcr2>
f0112da4:	89 c2                	mov    %eax,%edx
f0112da6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112da9:	39 c2                	cmp    %eax,%edx
f0112dab:	74 17                	je     f0112dc4 <test_kfree_bestfit+0x138e>
f0112dad:	83 ec 04             	sub    $0x4,%esp
f0112db0:	68 38 b8 11 f0       	push   $0xf011b838
f0112db5:	68 59 05 00 00       	push   $0x559
f0112dba:	68 76 b1 11 f0       	push   $0xf011b176
f0112dbf:	e8 b2 d3 fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f0112dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112dc7:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0112dce:	89 c2                	mov    %eax,%edx
f0112dd0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dd3:	01 d0                	add    %edx,%eax
f0112dd5:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0112dd8:	e8 d6 77 ff ff       	call   f010a5b3 <sys_rcr2>
f0112ddd:	89 c2                	mov    %eax,%edx
f0112ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112de2:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0112de9:	89 c1                	mov    %eax,%ecx
f0112deb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dee:	01 c8                	add    %ecx,%eax
f0112df0:	39 c2                	cmp    %eax,%edx
f0112df2:	74 17                	je     f0112e0b <test_kfree_bestfit+0x13d5>
f0112df4:	83 ec 04             	sub    $0x4,%esp
f0112df7:	68 38 b8 11 f0       	push   $0xf011b838
f0112dfc:	68 5b 05 00 00       	push   $0x55b
f0112e01:	68 76 b1 11 f0       	push   $0xf011b176
f0112e06:	e8 6b d3 fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0112e0b:	ff 45 f4             	incl   -0xc(%ebp)
f0112e0e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0112e12:	0f 8e 74 ff ff ff    	jle    f0112d8c <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0112e18:	83 ec 0c             	sub    $0xc,%esp
f0112e1b:	6a 00                	push   $0x0
f0112e1d:	e8 a3 77 ff ff       	call   f010a5c5 <sys_bypassPageFault>
f0112e22:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0112e25:	83 ec 0c             	sub    $0xc,%esp
f0112e28:	68 7d b8 11 f0       	push   $0xf011b87d
f0112e2d:	e8 64 3f ff ff       	call   f0106d96 <cprintf>
f0112e32:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112e35:	e8 84 75 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112e3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112e3d:	e8 3f 8a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112e42:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0112e45:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0112e4b:	83 ec 0c             	sub    $0xc,%esp
f0112e4e:	50                   	push   %eax
f0112e4f:	e8 63 90 ff ff       	call   f010beb7 <kfree>
f0112e54:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e57:	e8 25 8a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112e5c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112e5f:	74 17                	je     f0112e78 <test_kfree_bestfit+0x1442>
f0112e61:	83 ec 04             	sub    $0x4,%esp
f0112e64:	68 88 b1 11 f0       	push   $0xf011b188
f0112e69:	68 69 05 00 00       	push   $0x569
f0112e6e:	68 76 b1 11 f0       	push   $0xf011b176
f0112e73:	e8 fe d2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112e78:	e8 41 75 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112e7d:	89 c2                	mov    %eax,%edx
f0112e7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112e82:	39 c2                	cmp    %eax,%edx
f0112e84:	74 17                	je     f0112e9d <test_kfree_bestfit+0x1467>
f0112e86:	83 ec 04             	sub    $0x4,%esp
f0112e89:	68 84 b8 11 f0       	push   $0xf011b884
f0112e8e:	68 6a 05 00 00       	push   $0x56a
f0112e93:	68 76 b1 11 f0       	push   $0xf011b176
f0112e98:	e8 d9 d2 fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112e9d:	e8 1c 75 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112ea2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ea5:	e8 d7 89 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112eaa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0112ead:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112eb3:	83 ec 0c             	sub    $0xc,%esp
f0112eb6:	50                   	push   %eax
f0112eb7:	e8 fb 8f ff ff       	call   f010beb7 <kfree>
f0112ebc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112ebf:	e8 bd 89 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112ec4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112ec7:	74 17                	je     f0112ee0 <test_kfree_bestfit+0x14aa>
f0112ec9:	83 ec 04             	sub    $0x4,%esp
f0112ecc:	68 88 b1 11 f0       	push   $0xf011b188
f0112ed1:	68 70 05 00 00       	push   $0x570
f0112ed6:	68 76 b1 11 f0       	push   $0xf011b176
f0112edb:	e8 96 d2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112ee0:	e8 d9 74 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112ee5:	89 c2                	mov    %eax,%edx
f0112ee7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112eea:	39 c2                	cmp    %eax,%edx
f0112eec:	74 17                	je     f0112f05 <test_kfree_bestfit+0x14cf>
f0112eee:	83 ec 04             	sub    $0x4,%esp
f0112ef1:	68 84 b8 11 f0       	push   $0xf011b884
f0112ef6:	68 71 05 00 00       	push   $0x571
f0112efb:	68 76 b1 11 f0       	push   $0xf011b176
f0112f00:	e8 71 d2 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0112f05:	e8 b4 74 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112f0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112f0d:	e8 6f 89 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112f12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0112f15:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112f1b:	83 ec 0c             	sub    $0xc,%esp
f0112f1e:	50                   	push   %eax
f0112f1f:	e8 93 8f ff ff       	call   f010beb7 <kfree>
f0112f24:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112f27:	e8 55 89 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112f2c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112f2f:	74 17                	je     f0112f48 <test_kfree_bestfit+0x1512>
f0112f31:	83 ec 04             	sub    $0x4,%esp
f0112f34:	68 88 b1 11 f0       	push   $0xf011b188
f0112f39:	68 77 05 00 00       	push   $0x577
f0112f3e:	68 76 b1 11 f0       	push   $0xf011b176
f0112f43:	e8 2e d2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112f48:	e8 71 74 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112f4d:	89 c2                	mov    %eax,%edx
f0112f4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112f52:	39 c2                	cmp    %eax,%edx
f0112f54:	74 17                	je     f0112f6d <test_kfree_bestfit+0x1537>
f0112f56:	83 ec 04             	sub    $0x4,%esp
f0112f59:	68 84 b8 11 f0       	push   $0xf011b884
f0112f5e:	68 78 05 00 00       	push   $0x578
f0112f63:	68 76 b1 11 f0       	push   $0xf011b176
f0112f68:	e8 09 d2 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112f6d:	e8 4c 74 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112f72:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112f75:	e8 07 89 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112f7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0112f7d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112f83:	83 ec 0c             	sub    $0xc,%esp
f0112f86:	50                   	push   %eax
f0112f87:	e8 2b 8f ff ff       	call   f010beb7 <kfree>
f0112f8c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112f8f:	e8 ed 88 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0112f94:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112f97:	74 17                	je     f0112fb0 <test_kfree_bestfit+0x157a>
f0112f99:	83 ec 04             	sub    $0x4,%esp
f0112f9c:	68 88 b1 11 f0       	push   $0xf011b188
f0112fa1:	68 7e 05 00 00       	push   $0x57e
f0112fa6:	68 76 b1 11 f0       	push   $0xf011b176
f0112fab:	e8 c6 d1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112fb0:	e8 09 74 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0112fb5:	89 c2                	mov    %eax,%edx
f0112fb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112fba:	39 c2                	cmp    %eax,%edx
f0112fbc:	74 17                	je     f0112fd5 <test_kfree_bestfit+0x159f>
f0112fbe:	83 ec 04             	sub    $0x4,%esp
f0112fc1:	68 84 b8 11 f0       	push   $0xf011b884
f0112fc6:	68 7f 05 00 00       	push   $0x57f
f0112fcb:	68 76 b1 11 f0       	push   $0xf011b176
f0112fd0:	e8 a1 d1 fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f0112fd5:	83 ec 0c             	sub    $0xc,%esp
f0112fd8:	68 cb b8 11 f0       	push   $0xf011b8cb
f0112fdd:	e8 b4 3d ff ff       	call   f0106d96 <cprintf>
f0112fe2:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0112fe5:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0112fec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0112ff3:	eb 4a                	jmp    f011303f <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0112ff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112ff8:	89 c1                	mov    %eax,%ecx
f0112ffa:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0112fff:	83 ec 04             	sub    $0x4,%esp
f0113002:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0113008:	52                   	push   %edx
f0113009:	51                   	push   %ecx
f011300a:	50                   	push   %eax
f011300b:	e8 05 0b ff ff       	call   f0103b15 <get_page_table>
f0113010:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0113013:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0113019:	85 c0                	test   %eax,%eax
f011301b:	75 17                	jne    f0113034 <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011301d:	83 ec 04             	sub    $0x4,%esp
f0113020:	68 d4 b8 11 f0       	push   $0xf011b8d4
f0113025:	68 8d 05 00 00       	push   $0x58d
f011302a:	68 76 b1 11 f0       	push   $0xf011b176
f011302f:	e8 42 d1 fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0113034:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011303b:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f011303f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0113043:	78 b0                	js     f0112ff5 <test_kfree_bestfit+0x15bf>
f0113045:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0113049:	7f 09                	jg     f0113054 <test_kfree_bestfit+0x161e>
f011304b:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0113052:	76 a1                	jbe    f0112ff5 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0113054:	83 ec 0c             	sub    $0xc,%esp
f0113057:	68 52 b3 11 f0       	push   $0xf011b352
f011305c:	e8 35 3d ff ff       	call   f0106d96 <cprintf>
f0113061:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0113064:	83 ec 0c             	sub    $0xc,%esp
f0113067:	68 3c b9 11 f0       	push   $0xf011b93c
f011306c:	e8 25 3d ff ff       	call   f0106d96 <cprintf>
f0113071:	83 c4 10             	add    $0x10,%esp

	return 1;
f0113074:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0113079:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011307c:	5b                   	pop    %ebx
f011307d:	5f                   	pop    %edi
f011307e:	5d                   	pop    %ebp
f011307f:	c3                   	ret    

f0113080 <test_kheap_phys_addr>:


int test_kheap_phys_addr()
{
f0113080:	55                   	push   %ebp
f0113081:	89 e5                	mov    %esp,%ebp
f0113083:	57                   	push   %edi
f0113084:	56                   	push   %esi
f0113085:	53                   	push   %ebx
f0113086:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f011308c:	83 ec 0c             	sub    $0xc,%esp
f011308f:	68 b8 b0 11 f0       	push   $0xf011b0b8
f0113094:	e8 fd 3c ff ff       	call   f0106d96 <cprintf>
f0113099:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011309c:	83 ec 0c             	sub    $0xc,%esp
f011309f:	68 e8 b0 11 f0       	push   $0xf011b0e8
f01130a4:	e8 ed 3c ff ff       	call   f0106d96 <cprintf>
f01130a9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01130ac:	83 ec 0c             	sub    $0xc,%esp
f01130af:	68 b8 b0 11 f0       	push   $0xf011b0b8
f01130b4:	e8 dd 3c ff ff       	call   f0106d96 <cprintf>
f01130b9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01130bc:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01130c0:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f01130c4:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f01130ca:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f01130d0:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01130d7:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01130de:	e8 db 72 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01130e3:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01130e6:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f01130ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f01130f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01130f6:	89 d7                	mov    %edx,%edi
f01130f8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01130fa:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0113100:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113105:	b8 00 00 00 00       	mov    $0x0,%eax
f011310a:	89 d7                	mov    %edx,%edi
f011310c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011310e:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0113114:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113119:	b8 00 00 00 00       	mov    $0x0,%eax
f011311e:	89 d7                	mov    %edx,%edi
f0113120:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113122:	e8 97 72 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113127:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011312a:	e8 52 87 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011312f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0113132:	83 ec 0c             	sub    $0xc,%esp
f0113135:	68 00 fc 1f 00       	push   $0x1ffc00
f011313a:	e8 e7 8c ff ff       	call   f010be26 <kmalloc>
f011313f:	83 c4 10             	add    $0x10,%esp
f0113142:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113148:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f011314e:	89 c1                	mov    %eax,%ecx
f0113150:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0113157:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011315c:	0f b6 d0             	movzbl %al,%edx
f011315f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113162:	01 d0                	add    %edx,%eax
f0113164:	48                   	dec    %eax
f0113165:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0113168:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011316b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113170:	f7 75 a0             	divl   -0x60(%ebp)
f0113173:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113176:	29 d0                	sub    %edx,%eax
f0113178:	89 c3                	mov    %eax,%ebx
f011317a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0113181:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113186:	0f b6 c0             	movzbl %al,%eax
f0113189:	c1 e0 04             	shl    $0x4,%eax
f011318c:	89 c2                	mov    %eax,%edx
f011318e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113191:	01 d0                	add    %edx,%eax
f0113193:	48                   	dec    %eax
f0113194:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0113197:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011319a:	ba 00 00 00 00       	mov    $0x0,%edx
f011319f:	f7 75 98             	divl   -0x68(%ebp)
f01131a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01131a5:	29 d0                	sub    %edx,%eax
f01131a7:	01 d8                	add    %ebx,%eax
f01131a9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01131ae:	39 c1                	cmp    %eax,%ecx
f01131b0:	74 17                	je     f01131c9 <test_kheap_phys_addr+0x149>
f01131b2:	83 ec 04             	sub    $0x4,%esp
f01131b5:	68 54 b2 11 f0       	push   $0xf011b254
f01131ba:	68 bb 05 00 00       	push   $0x5bb
f01131bf:	68 76 b1 11 f0       	push   $0xf011b176
f01131c4:	e8 ad cf fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01131c9:	e8 b3 86 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01131ce:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01131d1:	74 17                	je     f01131ea <test_kheap_phys_addr+0x16a>
f01131d3:	83 ec 04             	sub    $0x4,%esp
f01131d6:	68 88 b1 11 f0       	push   $0xf011b188
f01131db:	68 bc 05 00 00       	push   $0x5bc
f01131e0:	68 76 b1 11 f0       	push   $0xf011b176
f01131e5:	e8 8c cf fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01131ea:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01131ed:	e8 cc 71 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01131f2:	29 c3                	sub    %eax,%ebx
f01131f4:	89 d8                	mov    %ebx,%eax
f01131f6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01131fb:	74 17                	je     f0113214 <test_kheap_phys_addr+0x194>
f01131fd:	83 ec 04             	sub    $0x4,%esp
f0113200:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0113205:	68 bd 05 00 00       	push   $0x5bd
f011320a:	68 76 b1 11 f0       	push   $0xf011b176
f011320f:	e8 62 cf fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113214:	e8 a5 71 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113219:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011321c:	e8 60 86 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113221:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0113224:	83 ec 0c             	sub    $0xc,%esp
f0113227:	68 00 fc 1f 00       	push   $0x1ffc00
f011322c:	e8 f5 8b ff ff       	call   f010be26 <kmalloc>
f0113231:	83 c4 10             	add    $0x10,%esp
f0113234:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011323a:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0113240:	89 c1                	mov    %eax,%ecx
f0113242:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0113249:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011324e:	0f b6 d0             	movzbl %al,%edx
f0113251:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113254:	01 d0                	add    %edx,%eax
f0113256:	48                   	dec    %eax
f0113257:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011325a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011325d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113262:	f7 75 90             	divl   -0x70(%ebp)
f0113265:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113268:	29 d0                	sub    %edx,%eax
f011326a:	89 c3                	mov    %eax,%ebx
f011326c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0113273:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113278:	0f b6 c0             	movzbl %al,%eax
f011327b:	c1 e0 04             	shl    $0x4,%eax
f011327e:	89 c2                	mov    %eax,%edx
f0113280:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113283:	01 d0                	add    %edx,%eax
f0113285:	48                   	dec    %eax
f0113286:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0113289:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011328c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113291:	f7 75 88             	divl   -0x78(%ebp)
f0113294:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113297:	29 d0                	sub    %edx,%eax
f0113299:	01 d8                	add    %ebx,%eax
f011329b:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f01132a0:	39 c1                	cmp    %eax,%ecx
f01132a2:	74 17                	je     f01132bb <test_kheap_phys_addr+0x23b>
f01132a4:	83 ec 04             	sub    $0x4,%esp
f01132a7:	68 54 b2 11 f0       	push   $0xf011b254
f01132ac:	68 c3 05 00 00       	push   $0x5c3
f01132b1:	68 76 b1 11 f0       	push   $0xf011b176
f01132b6:	e8 bb ce fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01132bb:	e8 c1 85 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01132c0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01132c3:	74 17                	je     f01132dc <test_kheap_phys_addr+0x25c>
f01132c5:	83 ec 04             	sub    $0x4,%esp
f01132c8:	68 88 b1 11 f0       	push   $0xf011b188
f01132cd:	68 c4 05 00 00       	push   $0x5c4
f01132d2:	68 76 b1 11 f0       	push   $0xf011b176
f01132d7:	e8 9a ce fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01132dc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01132df:	e8 da 70 ff ff       	call   f010a3be <sys_calculate_free_frames>
f01132e4:	29 c3                	sub    %eax,%ebx
f01132e6:	89 d8                	mov    %ebx,%eax
f01132e8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01132ed:	74 17                	je     f0113306 <test_kheap_phys_addr+0x286>
f01132ef:	83 ec 04             	sub    $0x4,%esp
f01132f2:	68 f0 b1 11 f0       	push   $0xf011b1f0
f01132f7:	68 c5 05 00 00       	push   $0x5c5
f01132fc:	68 76 b1 11 f0       	push   $0xf011b176
f0113301:	e8 70 ce fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0113306:	e8 b3 70 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011330b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011330e:	e8 6e 85 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113313:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0113316:	83 ec 0c             	sub    $0xc,%esp
f0113319:	68 00 08 00 00       	push   $0x800
f011331e:	e8 03 8b ff ff       	call   f010be26 <kmalloc>
f0113323:	83 c4 10             	add    $0x10,%esp
f0113326:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011332c:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0113332:	89 c1                	mov    %eax,%ecx
f0113334:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011333b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113340:	0f b6 d0             	movzbl %al,%edx
f0113343:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113346:	01 d0                	add    %edx,%eax
f0113348:	48                   	dec    %eax
f0113349:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011334f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113355:	ba 00 00 00 00       	mov    $0x0,%edx
f011335a:	f7 75 80             	divl   -0x80(%ebp)
f011335d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113363:	29 d0                	sub    %edx,%eax
f0113365:	89 c3                	mov    %eax,%ebx
f0113367:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011336e:	10 00 00 
f0113371:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113376:	0f b6 c0             	movzbl %al,%eax
f0113379:	c1 e0 04             	shl    $0x4,%eax
f011337c:	89 c2                	mov    %eax,%edx
f011337e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113384:	01 d0                	add    %edx,%eax
f0113386:	48                   	dec    %eax
f0113387:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011338d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113393:	ba 00 00 00 00       	mov    $0x0,%edx
f0113398:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011339e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01133a4:	29 d0                	sub    %edx,%eax
f01133a6:	01 d8                	add    %ebx,%eax
f01133a8:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f01133ad:	39 c1                	cmp    %eax,%ecx
f01133af:	74 17                	je     f01133c8 <test_kheap_phys_addr+0x348>
f01133b1:	83 ec 04             	sub    $0x4,%esp
f01133b4:	68 54 b2 11 f0       	push   $0xf011b254
f01133b9:	68 cb 05 00 00       	push   $0x5cb
f01133be:	68 76 b1 11 f0       	push   $0xf011b176
f01133c3:	e8 ae cd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01133c8:	e8 b4 84 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01133cd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01133d0:	74 17                	je     f01133e9 <test_kheap_phys_addr+0x369>
f01133d2:	83 ec 04             	sub    $0x4,%esp
f01133d5:	68 88 b1 11 f0       	push   $0xf011b188
f01133da:	68 cc 05 00 00       	push   $0x5cc
f01133df:	68 76 b1 11 f0       	push   $0xf011b176
f01133e4:	e8 8d cd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01133e9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01133ec:	e8 cd 6f ff ff       	call   f010a3be <sys_calculate_free_frames>
f01133f1:	29 c3                	sub    %eax,%ebx
f01133f3:	89 d8                	mov    %ebx,%eax
f01133f5:	83 f8 01             	cmp    $0x1,%eax
f01133f8:	74 17                	je     f0113411 <test_kheap_phys_addr+0x391>
f01133fa:	83 ec 04             	sub    $0x4,%esp
f01133fd:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0113402:	68 cd 05 00 00       	push   $0x5cd
f0113407:	68 76 b1 11 f0       	push   $0xf011b176
f011340c:	e8 65 cd fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0113411:	e8 a8 6f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113416:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113419:	e8 63 84 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011341e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0113421:	83 ec 0c             	sub    $0xc,%esp
f0113424:	68 00 08 00 00       	push   $0x800
f0113429:	e8 f8 89 ff ff       	call   f010be26 <kmalloc>
f011342e:	83 c4 10             	add    $0x10,%esp
f0113431:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113437:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f011343d:	89 c1                	mov    %eax,%ecx
f011343f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0113446:	10 00 00 
f0113449:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011344e:	0f b6 d0             	movzbl %al,%edx
f0113451:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113457:	01 d0                	add    %edx,%eax
f0113459:	48                   	dec    %eax
f011345a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0113460:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113466:	ba 00 00 00 00       	mov    $0x0,%edx
f011346b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0113471:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113477:	29 d0                	sub    %edx,%eax
f0113479:	89 c3                	mov    %eax,%ebx
f011347b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0113482:	10 00 00 
f0113485:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011348a:	0f b6 c0             	movzbl %al,%eax
f011348d:	c1 e0 04             	shl    $0x4,%eax
f0113490:	89 c2                	mov    %eax,%edx
f0113492:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113498:	01 d0                	add    %edx,%eax
f011349a:	48                   	dec    %eax
f011349b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01134a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01134a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01134ac:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01134b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01134b8:	29 d0                	sub    %edx,%eax
f01134ba:	01 d8                	add    %ebx,%eax
f01134bc:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f01134c1:	39 c1                	cmp    %eax,%ecx
f01134c3:	74 17                	je     f01134dc <test_kheap_phys_addr+0x45c>
f01134c5:	83 ec 04             	sub    $0x4,%esp
f01134c8:	68 54 b2 11 f0       	push   $0xf011b254
f01134cd:	68 d3 05 00 00       	push   $0x5d3
f01134d2:	68 76 b1 11 f0       	push   $0xf011b176
f01134d7:	e8 9a cc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01134dc:	e8 a0 83 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01134e1:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01134e4:	74 17                	je     f01134fd <test_kheap_phys_addr+0x47d>
f01134e6:	83 ec 04             	sub    $0x4,%esp
f01134e9:	68 88 b1 11 f0       	push   $0xf011b188
f01134ee:	68 d4 05 00 00       	push   $0x5d4
f01134f3:	68 76 b1 11 f0       	push   $0xf011b176
f01134f8:	e8 79 cc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01134fd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113500:	e8 b9 6e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113505:	29 c3                	sub    %eax,%ebx
f0113507:	89 d8                	mov    %ebx,%eax
f0113509:	83 f8 01             	cmp    $0x1,%eax
f011350c:	74 17                	je     f0113525 <test_kheap_phys_addr+0x4a5>
f011350e:	83 ec 04             	sub    $0x4,%esp
f0113511:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0113516:	68 d5 05 00 00       	push   $0x5d5
f011351b:	68 76 b1 11 f0       	push   $0xf011b176
f0113520:	e8 51 cc fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0113525:	e8 94 6e ff ff       	call   f010a3be <sys_calculate_free_frames>
f011352a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011352d:	e8 4f 83 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113532:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0113535:	83 ec 0c             	sub    $0xc,%esp
f0113538:	68 00 1c 00 00       	push   $0x1c00
f011353d:	e8 e4 88 ff ff       	call   f010be26 <kmalloc>
f0113542:	83 c4 10             	add    $0x10,%esp
f0113545:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011354b:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0113551:	89 c1                	mov    %eax,%ecx
f0113553:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011355a:	10 00 00 
f011355d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113562:	0f b6 d0             	movzbl %al,%edx
f0113565:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011356b:	01 d0                	add    %edx,%eax
f011356d:	48                   	dec    %eax
f011356e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0113574:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011357a:	ba 00 00 00 00       	mov    $0x0,%edx
f011357f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0113585:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011358b:	29 d0                	sub    %edx,%eax
f011358d:	89 c3                	mov    %eax,%ebx
f011358f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0113596:	10 00 00 
f0113599:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011359e:	0f b6 c0             	movzbl %al,%eax
f01135a1:	c1 e0 04             	shl    $0x4,%eax
f01135a4:	89 c2                	mov    %eax,%edx
f01135a6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01135ac:	01 d0                	add    %edx,%eax
f01135ae:	48                   	dec    %eax
f01135af:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01135b5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01135bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01135c0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01135c6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01135cc:	29 d0                	sub    %edx,%eax
f01135ce:	01 d8                	add    %ebx,%eax
f01135d0:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f01135d5:	39 c1                	cmp    %eax,%ecx
f01135d7:	74 17                	je     f01135f0 <test_kheap_phys_addr+0x570>
f01135d9:	83 ec 04             	sub    $0x4,%esp
f01135dc:	68 54 b2 11 f0       	push   $0xf011b254
f01135e1:	68 db 05 00 00       	push   $0x5db
f01135e6:	68 76 b1 11 f0       	push   $0xf011b176
f01135eb:	e8 86 cb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01135f0:	e8 8c 82 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01135f5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01135f8:	74 17                	je     f0113611 <test_kheap_phys_addr+0x591>
f01135fa:	83 ec 04             	sub    $0x4,%esp
f01135fd:	68 88 b1 11 f0       	push   $0xf011b188
f0113602:	68 dc 05 00 00       	push   $0x5dc
f0113607:	68 76 b1 11 f0       	push   $0xf011b176
f011360c:	e8 65 cb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113611:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113614:	e8 a5 6d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113619:	29 c3                	sub    %eax,%ebx
f011361b:	89 d8                	mov    %ebx,%eax
f011361d:	83 f8 02             	cmp    $0x2,%eax
f0113620:	74 17                	je     f0113639 <test_kheap_phys_addr+0x5b9>
f0113622:	83 ec 04             	sub    $0x4,%esp
f0113625:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011362a:	68 dd 05 00 00       	push   $0x5dd
f011362f:	68 76 b1 11 f0       	push   $0xf011b176
f0113634:	e8 3d cb fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0113639:	e8 80 6d ff ff       	call   f010a3be <sys_calculate_free_frames>
f011363e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113641:	e8 3b 82 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113646:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0113649:	83 ec 0c             	sub    $0xc,%esp
f011364c:	68 00 fc 2f 00       	push   $0x2ffc00
f0113651:	e8 d0 87 ff ff       	call   f010be26 <kmalloc>
f0113656:	83 c4 10             	add    $0x10,%esp
f0113659:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011365f:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0113665:	89 c1                	mov    %eax,%ecx
f0113667:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011366e:	10 00 00 
f0113671:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113676:	0f b6 d0             	movzbl %al,%edx
f0113679:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011367f:	01 d0                	add    %edx,%eax
f0113681:	48                   	dec    %eax
f0113682:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0113688:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011368e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113693:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0113699:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011369f:	29 d0                	sub    %edx,%eax
f01136a1:	89 c3                	mov    %eax,%ebx
f01136a3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01136aa:	10 00 00 
f01136ad:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01136b2:	0f b6 c0             	movzbl %al,%eax
f01136b5:	c1 e0 04             	shl    $0x4,%eax
f01136b8:	89 c2                	mov    %eax,%edx
f01136ba:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01136c0:	01 d0                	add    %edx,%eax
f01136c2:	48                   	dec    %eax
f01136c3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01136c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01136cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01136d4:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01136da:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01136e0:	29 d0                	sub    %edx,%eax
f01136e2:	01 d8                	add    %ebx,%eax
f01136e4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01136e9:	39 c1                	cmp    %eax,%ecx
f01136eb:	74 17                	je     f0113704 <test_kheap_phys_addr+0x684>
f01136ed:	83 ec 04             	sub    $0x4,%esp
f01136f0:	68 54 b2 11 f0       	push   $0xf011b254
f01136f5:	68 e3 05 00 00       	push   $0x5e3
f01136fa:	68 76 b1 11 f0       	push   $0xf011b176
f01136ff:	e8 72 ca fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113704:	e8 78 81 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113709:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011370c:	74 17                	je     f0113725 <test_kheap_phys_addr+0x6a5>
f011370e:	83 ec 04             	sub    $0x4,%esp
f0113711:	68 88 b1 11 f0       	push   $0xf011b188
f0113716:	68 e4 05 00 00       	push   $0x5e4
f011371b:	68 76 b1 11 f0       	push   $0xf011b176
f0113720:	e8 51 ca fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113725:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113728:	e8 91 6c ff ff       	call   f010a3be <sys_calculate_free_frames>
f011372d:	29 c3                	sub    %eax,%ebx
f011372f:	89 d8                	mov    %ebx,%eax
f0113731:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113736:	74 17                	je     f011374f <test_kheap_phys_addr+0x6cf>
f0113738:	83 ec 04             	sub    $0x4,%esp
f011373b:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0113740:	68 e5 05 00 00       	push   $0x5e5
f0113745:	68 76 b1 11 f0       	push   $0xf011b176
f011374a:	e8 27 ca fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011374f:	e8 6a 6c ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113754:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113757:	e8 25 81 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011375c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011375f:	83 ec 0c             	sub    $0xc,%esp
f0113762:	68 00 fc 5f 00       	push   $0x5ffc00
f0113767:	e8 ba 86 ff ff       	call   f010be26 <kmalloc>
f011376c:	83 c4 10             	add    $0x10,%esp
f011376f:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113775:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f011377b:	89 c1                	mov    %eax,%ecx
f011377d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0113784:	10 00 00 
f0113787:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011378c:	0f b6 d0             	movzbl %al,%edx
f011378f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113795:	01 d0                	add    %edx,%eax
f0113797:	48                   	dec    %eax
f0113798:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011379e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01137a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01137a9:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01137af:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01137b5:	29 d0                	sub    %edx,%eax
f01137b7:	89 c3                	mov    %eax,%ebx
f01137b9:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01137c0:	10 00 00 
f01137c3:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01137c8:	0f b6 c0             	movzbl %al,%eax
f01137cb:	c1 e0 04             	shl    $0x4,%eax
f01137ce:	89 c2                	mov    %eax,%edx
f01137d0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01137d6:	01 d0                	add    %edx,%eax
f01137d8:	48                   	dec    %eax
f01137d9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01137df:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01137e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01137ea:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01137f0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01137f6:	29 d0                	sub    %edx,%eax
f01137f8:	01 d8                	add    %ebx,%eax
f01137fa:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01137ff:	39 c1                	cmp    %eax,%ecx
f0113801:	74 17                	je     f011381a <test_kheap_phys_addr+0x79a>
f0113803:	83 ec 04             	sub    $0x4,%esp
f0113806:	68 54 b2 11 f0       	push   $0xf011b254
f011380b:	68 eb 05 00 00       	push   $0x5eb
f0113810:	68 76 b1 11 f0       	push   $0xf011b176
f0113815:	e8 5c c9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011381a:	e8 62 80 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011381f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113822:	74 17                	je     f011383b <test_kheap_phys_addr+0x7bb>
f0113824:	83 ec 04             	sub    $0x4,%esp
f0113827:	68 88 b1 11 f0       	push   $0xf011b188
f011382c:	68 ec 05 00 00       	push   $0x5ec
f0113831:	68 76 b1 11 f0       	push   $0xf011b176
f0113836:	e8 3b c9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011383b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011383e:	e8 7b 6b ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113843:	29 c3                	sub    %eax,%ebx
f0113845:	89 d8                	mov    %ebx,%eax
f0113847:	3d 00 06 00 00       	cmp    $0x600,%eax
f011384c:	74 17                	je     f0113865 <test_kheap_phys_addr+0x7e5>
f011384e:	83 ec 04             	sub    $0x4,%esp
f0113851:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0113856:	68 ed 05 00 00       	push   $0x5ed
f011385b:	68 76 b1 11 f0       	push   $0xf011b176
f0113860:	e8 11 c9 fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0113865:	e8 54 6b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011386a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011386d:	e8 0f 80 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113872:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0113875:	83 ec 0c             	sub    $0xc,%esp
f0113878:	68 00 38 00 00       	push   $0x3800
f011387d:	e8 a4 85 ff ff       	call   f010be26 <kmalloc>
f0113882:	83 c4 10             	add    $0x10,%esp
f0113885:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011388b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0113891:	89 c1                	mov    %eax,%ecx
f0113893:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011389a:	10 00 00 
f011389d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01138a2:	0f b6 d0             	movzbl %al,%edx
f01138a5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01138ab:	01 d0                	add    %edx,%eax
f01138ad:	48                   	dec    %eax
f01138ae:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01138b4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01138ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01138bf:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01138c5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01138cb:	29 d0                	sub    %edx,%eax
f01138cd:	89 c3                	mov    %eax,%ebx
f01138cf:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01138d6:	10 00 00 
f01138d9:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01138de:	0f b6 c0             	movzbl %al,%eax
f01138e1:	c1 e0 04             	shl    $0x4,%eax
f01138e4:	89 c2                	mov    %eax,%edx
f01138e6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01138ec:	01 d0                	add    %edx,%eax
f01138ee:	48                   	dec    %eax
f01138ef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01138f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01138fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0113900:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0113906:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011390c:	29 d0                	sub    %edx,%eax
f011390e:	01 d8                	add    %ebx,%eax
f0113910:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0113915:	39 c1                	cmp    %eax,%ecx
f0113917:	74 17                	je     f0113930 <test_kheap_phys_addr+0x8b0>
f0113919:	83 ec 04             	sub    $0x4,%esp
f011391c:	68 54 b2 11 f0       	push   $0xf011b254
f0113921:	68 f3 05 00 00       	push   $0x5f3
f0113926:	68 76 b1 11 f0       	push   $0xf011b176
f011392b:	e8 46 c8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113930:	e8 4c 7f ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113935:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113938:	74 17                	je     f0113951 <test_kheap_phys_addr+0x8d1>
f011393a:	83 ec 04             	sub    $0x4,%esp
f011393d:	68 88 b1 11 f0       	push   $0xf011b188
f0113942:	68 f4 05 00 00       	push   $0x5f4
f0113947:	68 76 b1 11 f0       	push   $0xf011b176
f011394c:	e8 25 c8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113951:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113954:	e8 65 6a ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113959:	29 c3                	sub    %eax,%ebx
f011395b:	89 d8                	mov    %ebx,%eax
f011395d:	83 f8 04             	cmp    $0x4,%eax
f0113960:	74 17                	je     f0113979 <test_kheap_phys_addr+0x8f9>
f0113962:	83 ec 04             	sub    $0x4,%esp
f0113965:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011396a:	68 f5 05 00 00       	push   $0x5f5
f011396f:	68 76 b1 11 f0       	push   $0xf011b176
f0113974:	e8 fd c7 fe ff       	call   f0100176 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0113979:	89 e0                	mov    %esp,%eax
f011397b:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011397d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0113984:	10 00 00 
f0113987:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011398c:	0f b6 d0             	movzbl %al,%edx
f011398f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113995:	01 d0                	add    %edx,%eax
f0113997:	48                   	dec    %eax
f0113998:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011399e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01139a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01139a9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01139af:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01139b5:	29 d0                	sub    %edx,%eax
f01139b7:	89 c1                	mov    %eax,%ecx
f01139b9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01139c0:	10 00 00 
f01139c3:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01139c8:	0f b6 c0             	movzbl %al,%eax
f01139cb:	c1 e0 04             	shl    $0x4,%eax
f01139ce:	89 c2                	mov    %eax,%edx
f01139d0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01139d6:	01 d0                	add    %edx,%eax
f01139d8:	48                   	dec    %eax
f01139d9:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01139df:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01139e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01139ea:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01139f0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01139f6:	29 d0                	sub    %edx,%eax
f01139f8:	01 c8                	add    %ecx,%eax
f01139fa:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01139ff:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0113a05:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0113a0c:	10 00 00 
f0113a0f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113a14:	0f b6 d0             	movzbl %al,%edx
f0113a17:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113a1d:	01 d0                	add    %edx,%eax
f0113a1f:	48                   	dec    %eax
f0113a20:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0113a26:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113a2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a31:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0113a37:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113a3d:	29 d0                	sub    %edx,%eax
f0113a3f:	89 c1                	mov    %eax,%ecx
f0113a41:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0113a48:	10 00 00 
f0113a4b:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113a50:	0f b6 c0             	movzbl %al,%eax
f0113a53:	c1 e0 04             	shl    $0x4,%eax
f0113a56:	89 c2                	mov    %eax,%edx
f0113a58:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113a5e:	01 d0                	add    %edx,%eax
f0113a60:	48                   	dec    %eax
f0113a61:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0113a67:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a72:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0113a78:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113a7e:	29 d0                	sub    %edx,%eax
f0113a80:	01 c8                	add    %ecx,%eax
f0113a82:	05 00 80 d0 00       	add    $0xd08000,%eax
f0113a87:	c1 e8 0c             	shr    $0xc,%eax
f0113a8a:	89 c2                	mov    %eax,%edx
f0113a8c:	4a                   	dec    %edx
f0113a8d:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f0113a93:	c1 e0 02             	shl    $0x2,%eax
f0113a96:	8d 50 03             	lea    0x3(%eax),%edx
f0113a99:	b8 10 00 00 00       	mov    $0x10,%eax
f0113a9e:	48                   	dec    %eax
f0113a9f:	01 d0                	add    %edx,%eax
f0113aa1:	bf 10 00 00 00       	mov    $0x10,%edi
f0113aa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0113aab:	f7 f7                	div    %edi
f0113aad:	6b c0 10             	imul   $0x10,%eax,%eax
f0113ab0:	29 c4                	sub    %eax,%esp
f0113ab2:	89 e0                	mov    %esp,%eax
f0113ab4:	83 c0 03             	add    $0x3,%eax
f0113ab7:	c1 e8 02             	shr    $0x2,%eax
f0113aba:	c1 e0 02             	shl    $0x2,%eax
f0113abd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0113ac3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113aca:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0113ad1:	eb 29                	jmp    f0113afc <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0113ad3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0113ad6:	8d 43 01             	lea    0x1(%ebx),%eax
f0113ad9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0113adc:	83 ec 0c             	sub    $0xc,%esp
f0113adf:	ff 75 e0             	pushl  -0x20(%ebp)
f0113ae2:	e8 6f 86 ff ff       	call   f010c156 <kheap_physical_address>
f0113ae7:	83 c4 10             	add    $0x10,%esp
f0113aea:	89 c2                	mov    %eax,%edx
f0113aec:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113af2:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113af5:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0113afc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113aff:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0113b05:	72 cc                	jb     f0113ad3 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0113b07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113b0a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0113b10:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113b17:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0113b1e:	e9 a5 00 00 00       	jmp    f0113bc8 <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0113b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0113b26:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0113b2b:	83 ec 04             	sub    $0x4,%esp
f0113b2e:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f0113b34:	51                   	push   %ecx
f0113b35:	52                   	push   %edx
f0113b36:	50                   	push   %eax
f0113b37:	e8 d9 ff fe ff       	call   f0103b15 <get_page_table>
f0113b3c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0113b3f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0113b45:	85 c0                	test   %eax,%eax
f0113b47:	75 17                	jne    f0113b60 <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0113b49:	83 ec 04             	sub    $0x4,%esp
f0113b4c:	68 74 b9 11 f0       	push   $0xf011b974
f0113b51:	68 0a 06 00 00       	push   $0x60a
f0113b56:	68 76 b1 11 f0       	push   $0xf011b176
f0113b5b:	e8 16 c6 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113b60:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0113b67:	eb 44                	jmp    f0113bad <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0113b69:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0113b6f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0113b72:	c1 e2 02             	shl    $0x2,%edx
f0113b75:	01 d0                	add    %edx,%eax
f0113b77:	8b 00                	mov    (%eax),%eax
f0113b79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113b7e:	89 c1                	mov    %eax,%ecx
f0113b80:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113b86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113b89:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0113b8c:	39 c1                	cmp    %eax,%ecx
f0113b8e:	74 17                	je     f0113ba7 <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0113b90:	83 ec 04             	sub    $0x4,%esp
f0113b93:	68 cd b9 11 f0       	push   $0xf011b9cd
f0113b98:	68 11 06 00 00       	push   $0x611
f0113b9d:	68 76 b1 11 f0       	push   $0xf011b176
f0113ba2:	e8 cf c5 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113ba7:	ff 45 dc             	incl   -0x24(%ebp)
f0113baa:	ff 45 e4             	incl   -0x1c(%ebp)
f0113bad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113bb0:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0113bb6:	7d 09                	jge    f0113bc1 <test_kheap_phys_addr+0xb41>
f0113bb8:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0113bbf:	7e a8                	jle    f0113b69 <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113bc1:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f0113bc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113bcb:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0113bd1:	0f 82 4c ff ff ff    	jb     f0113b23 <test_kheap_phys_addr+0xaa3>
f0113bd7:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0113bd9:	83 ec 0c             	sub    $0xc,%esp
f0113bdc:	68 ec b9 11 f0       	push   $0xf011b9ec
f0113be1:	e8 b0 31 ff ff       	call   f0106d96 <cprintf>
f0113be6:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0113be9:	e8 d0 67 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113bee:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0113bf4:	e8 88 7c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113bf9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0113bff:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0113c05:	83 ec 0c             	sub    $0xc,%esp
f0113c08:	50                   	push   %eax
f0113c09:	e8 a9 82 ff ff       	call   f010beb7 <kfree>
f0113c0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113c11:	e8 6b 7c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113c16:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0113c1c:	74 17                	je     f0113c35 <test_kheap_phys_addr+0xbb5>
f0113c1e:	83 ec 04             	sub    $0x4,%esp
f0113c21:	68 88 b1 11 f0       	push   $0xf011b188
f0113c26:	68 1e 06 00 00       	push   $0x61e
f0113c2b:	68 76 b1 11 f0       	push   $0xf011b176
f0113c30:	e8 41 c5 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0113c35:	e8 84 67 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113c3a:	89 c2                	mov    %eax,%edx
f0113c3c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113c42:	29 c2                	sub    %eax,%edx
f0113c44:	89 d0                	mov    %edx,%eax
f0113c46:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113c4b:	74 17                	je     f0113c64 <test_kheap_phys_addr+0xbe4>
f0113c4d:	83 ec 04             	sub    $0x4,%esp
f0113c50:	68 5c b7 11 f0       	push   $0xf011b75c
f0113c55:	68 1f 06 00 00       	push   $0x61f
f0113c5a:	68 76 b1 11 f0       	push   $0xf011b176
f0113c5f:	e8 12 c5 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113c64:	e8 55 67 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113c69:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113c6f:	e8 0d 7c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113c74:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0113c7a:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0113c80:	83 ec 0c             	sub    $0xc,%esp
f0113c83:	50                   	push   %eax
f0113c84:	e8 2e 82 ff ff       	call   f010beb7 <kfree>
f0113c89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113c8c:	e8 f0 7b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113c91:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0113c97:	74 17                	je     f0113cb0 <test_kheap_phys_addr+0xc30>
f0113c99:	83 ec 04             	sub    $0x4,%esp
f0113c9c:	68 88 b1 11 f0       	push   $0xf011b188
f0113ca1:	68 25 06 00 00       	push   $0x625
f0113ca6:	68 76 b1 11 f0       	push   $0xf011b176
f0113cab:	e8 c6 c4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0113cb0:	e8 09 67 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113cb5:	89 c2                	mov    %eax,%edx
f0113cb7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113cbd:	29 c2                	sub    %eax,%edx
f0113cbf:	89 d0                	mov    %edx,%eax
f0113cc1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113cc6:	74 17                	je     f0113cdf <test_kheap_phys_addr+0xc5f>
f0113cc8:	83 ec 04             	sub    $0x4,%esp
f0113ccb:	68 5c b7 11 f0       	push   $0xf011b75c
f0113cd0:	68 26 06 00 00       	push   $0x626
f0113cd5:	68 76 b1 11 f0       	push   $0xf011b176
f0113cda:	e8 97 c4 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0113cdf:	e8 da 66 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113ce4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113cea:	e8 92 7b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113cef:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0113cf5:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0113cfb:	83 ec 0c             	sub    $0xc,%esp
f0113cfe:	50                   	push   %eax
f0113cff:	e8 b3 81 ff ff       	call   f010beb7 <kfree>
f0113d04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113d07:	e8 75 7b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0113d0c:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0113d12:	74 17                	je     f0113d2b <test_kheap_phys_addr+0xcab>
f0113d14:	83 ec 04             	sub    $0x4,%esp
f0113d17:	68 88 b1 11 f0       	push   $0xf011b188
f0113d1c:	68 2c 06 00 00       	push   $0x62c
f0113d21:	68 76 b1 11 f0       	push   $0xf011b176
f0113d26:	e8 4b c4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0113d2b:	e8 8e 66 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0113d30:	89 c2                	mov    %eax,%edx
f0113d32:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113d38:	29 c2                	sub    %eax,%edx
f0113d3a:	89 d0                	mov    %edx,%eax
f0113d3c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0113d41:	74 17                	je     f0113d5a <test_kheap_phys_addr+0xcda>
f0113d43:	83 ec 04             	sub    $0x4,%esp
f0113d46:	68 5c b7 11 f0       	push   $0xf011b75c
f0113d4b:	68 2d 06 00 00       	push   $0x62d
f0113d50:	68 76 b1 11 f0       	push   $0xf011b176
f0113d55:	e8 1c c4 fe ff       	call   f0100176 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0113d5a:	89 e0                	mov    %esp,%eax
f0113d5c:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0113d5e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0113d65:	10 00 00 
f0113d68:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113d6d:	0f b6 d0             	movzbl %al,%edx
f0113d70:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0113d76:	01 d0                	add    %edx,%eax
f0113d78:	48                   	dec    %eax
f0113d79:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0113d7f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d8a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0113d90:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113d96:	29 d0                	sub    %edx,%eax
f0113d98:	89 c1                	mov    %eax,%ecx
f0113d9a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0113da1:	10 00 00 
f0113da4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113da9:	0f b6 c0             	movzbl %al,%eax
f0113dac:	c1 e0 04             	shl    $0x4,%eax
f0113daf:	89 c2                	mov    %eax,%edx
f0113db1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113db7:	01 d0                	add    %edx,%eax
f0113db9:	48                   	dec    %eax
f0113dba:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0113dc0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113dc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0113dcb:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0113dd1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113dd7:	29 d0                	sub    %edx,%eax
f0113dd9:	01 c8                	add    %ecx,%eax
f0113ddb:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0113de0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0113de6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0113ded:	10 00 00 
f0113df0:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113df5:	0f b6 d0             	movzbl %al,%edx
f0113df8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113dfe:	01 d0                	add    %edx,%eax
f0113e00:	48                   	dec    %eax
f0113e01:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0113e07:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0113e0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e12:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0113e18:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0113e1e:	29 d0                	sub    %edx,%eax
f0113e20:	89 c1                	mov    %eax,%ecx
f0113e22:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0113e29:	10 00 00 
f0113e2c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113e31:	0f b6 c0             	movzbl %al,%eax
f0113e34:	c1 e0 04             	shl    $0x4,%eax
f0113e37:	89 c2                	mov    %eax,%edx
f0113e39:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0113e3f:	01 d0                	add    %edx,%eax
f0113e41:	48                   	dec    %eax
f0113e42:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0113e48:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0113e4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e53:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0113e59:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0113e5f:	29 d0                	sub    %edx,%eax
f0113e61:	01 c8                	add    %ecx,%eax
f0113e63:	05 00 80 d0 00       	add    $0xd08000,%eax
f0113e68:	c1 e8 0c             	shr    $0xc,%eax
f0113e6b:	89 c2                	mov    %eax,%edx
f0113e6d:	4a                   	dec    %edx
f0113e6e:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0113e74:	c1 e0 02             	shl    $0x2,%eax
f0113e77:	8d 50 03             	lea    0x3(%eax),%edx
f0113e7a:	b8 10 00 00 00       	mov    $0x10,%eax
f0113e7f:	48                   	dec    %eax
f0113e80:	01 d0                	add    %edx,%eax
f0113e82:	bf 10 00 00 00       	mov    $0x10,%edi
f0113e87:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e8c:	f7 f7                	div    %edi
f0113e8e:	6b c0 10             	imul   $0x10,%eax,%eax
f0113e91:	29 c4                	sub    %eax,%esp
f0113e93:	89 e0                	mov    %esp,%eax
f0113e95:	83 c0 03             	add    $0x3,%eax
f0113e98:	c1 e8 02             	shr    $0x2,%eax
f0113e9b:	c1 e0 02             	shl    $0x2,%eax
f0113e9e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0113ea4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113eab:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0113eb2:	eb 29                	jmp    f0113edd <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f0113eb4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0113eb7:	8d 43 01             	lea    0x1(%ebx),%eax
f0113eba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0113ebd:	83 ec 0c             	sub    $0xc,%esp
f0113ec0:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ec3:	e8 8e 82 ff ff       	call   f010c156 <kheap_physical_address>
f0113ec8:	83 c4 10             	add    $0x10,%esp
f0113ecb:	89 c2                	mov    %eax,%edx
f0113ecd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0113ed3:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113ed6:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0113edd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113ee0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0113ee6:	72 cc                	jb     f0113eb4 <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0113ee8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113eeb:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0113ef1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113ef8:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0113eff:	e9 a5 00 00 00       	jmp    f0113fa9 <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0113f04:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0113f07:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0113f0c:	83 ec 04             	sub    $0x4,%esp
f0113f0f:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f0113f15:	51                   	push   %ecx
f0113f16:	52                   	push   %edx
f0113f17:	50                   	push   %eax
f0113f18:	e8 f8 fb fe ff       	call   f0103b15 <get_page_table>
f0113f1d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0113f20:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0113f26:	85 c0                	test   %eax,%eax
f0113f28:	75 17                	jne    f0113f41 <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0113f2a:	83 ec 04             	sub    $0x4,%esp
f0113f2d:	68 74 b9 11 f0       	push   $0xf011b974
f0113f32:	68 43 06 00 00       	push   $0x643
f0113f37:	68 76 b1 11 f0       	push   $0xf011b176
f0113f3c:	e8 35 c2 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113f41:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0113f48:	eb 44                	jmp    f0113f8e <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0113f4a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0113f50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0113f53:	c1 e2 02             	shl    $0x2,%edx
f0113f56:	01 d0                	add    %edx,%eax
f0113f58:	8b 00                	mov    (%eax),%eax
f0113f5a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113f5f:	89 c1                	mov    %eax,%ecx
f0113f61:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0113f67:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113f6a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0113f6d:	39 c1                	cmp    %eax,%ecx
f0113f6f:	74 17                	je     f0113f88 <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0113f71:	83 ec 04             	sub    $0x4,%esp
f0113f74:	68 cd b9 11 f0       	push   $0xf011b9cd
f0113f79:	68 4a 06 00 00       	push   $0x64a
f0113f7e:	68 76 b1 11 f0       	push   $0xf011b176
f0113f83:	e8 ee c1 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113f88:	ff 45 d4             	incl   -0x2c(%ebp)
f0113f8b:	ff 45 e4             	incl   -0x1c(%ebp)
f0113f8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113f91:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0113f97:	7d 09                	jge    f0113fa2 <test_kheap_phys_addr+0xf22>
f0113f99:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0113fa0:	7e a8                	jle    f0113f4a <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113fa2:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f0113fa9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113fac:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0113fb2:	0f 82 4c ff ff ff    	jb     f0113f04 <test_kheap_phys_addr+0xe84>
f0113fb8:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f0113fba:	83 ec 0c             	sub    $0xc,%esp
f0113fbd:	68 f9 b2 11 f0       	push   $0xf011b2f9
f0113fc2:	e8 cf 2d ff ff       	call   f0106d96 <cprintf>
f0113fc7:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0113fca:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0113fd1:	10 00 00 
f0113fd4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0113fd9:	0f b6 d0             	movzbl %al,%edx
f0113fdc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0113fe2:	01 d0                	add    %edx,%eax
f0113fe4:	48                   	dec    %eax
f0113fe5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0113feb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0113ff1:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ff6:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0113ffc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0114002:	29 d0                	sub    %edx,%eax
f0114004:	89 c1                	mov    %eax,%ecx
f0114006:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011400d:	10 00 00 
f0114010:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114015:	0f b6 c0             	movzbl %al,%eax
f0114018:	c1 e0 04             	shl    $0x4,%eax
f011401b:	89 c2                	mov    %eax,%edx
f011401d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0114023:	01 d0                	add    %edx,%eax
f0114025:	48                   	dec    %eax
f0114026:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011402c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0114032:	ba 00 00 00 00       	mov    $0x0,%edx
f0114037:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011403d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0114043:	29 d0                	sub    %edx,%eax
f0114045:	01 c8                	add    %ecx,%eax
f0114047:	2d 00 00 00 09       	sub    $0x9000000,%eax
f011404c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0114052:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0114059:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011405f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114062:	eb 0a                	jmp    f011406e <test_kheap_phys_addr+0xfee>
		{
			i++;
f0114064:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0114067:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011406e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0114075:	76 ed                	jbe    f0114064 <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f0114077:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011407a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0114080:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0114087:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011408d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114090:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0114097:	e9 ce 00 00 00       	jmp    f011416a <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f011409c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011409f:	89 c1                	mov    %eax,%ecx
f01140a1:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f01140a6:	83 ec 04             	sub    $0x4,%esp
f01140a9:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f01140af:	52                   	push   %edx
f01140b0:	51                   	push   %ecx
f01140b1:	50                   	push   %eax
f01140b2:	e8 5e fa fe ff       	call   f0103b15 <get_page_table>
f01140b7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01140ba:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01140c0:	85 c0                	test   %eax,%eax
f01140c2:	75 17                	jne    f01140db <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01140c4:	83 ec 04             	sub    $0x4,%esp
f01140c7:	68 74 b9 11 f0       	push   $0xf011b974
f01140cc:	68 65 06 00 00       	push   $0x665
f01140d1:	68 76 b1 11 f0       	push   $0xf011b176
f01140d6:	e8 9b c0 fe ff       	call   f0100176 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01140db:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01140e2:	eb 67                	jmp    f011414b <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01140e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01140e7:	c1 e0 0c             	shl    $0xc,%eax
f01140ea:	89 c2                	mov    %eax,%edx
f01140ec:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01140f2:	01 d0                	add    %edx,%eax
f01140f4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01140fa:	83 ec 0c             	sub    $0xc,%esp
f01140fd:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0114103:	e8 4e 80 ff ff       	call   f010c156 <kheap_physical_address>
f0114108:	83 c4 10             	add    $0x10,%esp
f011410b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0114111:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0114117:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011411a:	c1 e2 02             	shl    $0x2,%edx
f011411d:	01 d0                	add    %edx,%eax
f011411f:	8b 00                	mov    (%eax),%eax
f0114121:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114126:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f011412c:	74 17                	je     f0114145 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f011412e:	83 ec 04             	sub    $0x4,%esp
f0114131:	68 cd b9 11 f0       	push   $0xf011b9cd
f0114136:	68 6f 06 00 00       	push   $0x66f
f011413b:	68 76 b1 11 f0       	push   $0xf011b176
f0114140:	e8 31 c0 fe ff       	call   f0100176 <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0114145:	ff 45 cc             	incl   -0x34(%ebp)
f0114148:	ff 45 e4             	incl   -0x1c(%ebp)
f011414b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011414e:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0114154:	7d 09                	jge    f011415f <test_kheap_phys_addr+0x10df>
f0114156:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011415d:	7e 85                	jle    f01140e4 <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011415f:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0114166:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011416a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011416e:	0f 88 28 ff ff ff    	js     f011409c <test_kheap_phys_addr+0x101c>
f0114174:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0114178:	7f 0d                	jg     f0114187 <test_kheap_phys_addr+0x1107>
f011417a:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0114181:	0f 86 15 ff ff ff    	jbe    f011409c <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0114187:	83 ec 0c             	sub    $0xc,%esp
f011418a:	68 52 b3 11 f0       	push   $0xf011b352
f011418f:	e8 02 2c ff ff       	call   f0106d96 <cprintf>
f0114194:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0114197:	83 ec 0c             	sub    $0xc,%esp
f011419a:	68 20 ba 11 f0       	push   $0xf011ba20
f011419f:	e8 f2 2b ff ff       	call   f0106d96 <cprintf>
f01141a4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01141a7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01141ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01141af:	5b                   	pop    %ebx
f01141b0:	5e                   	pop    %esi
f01141b1:	5f                   	pop    %edi
f01141b2:	5d                   	pop    %ebp
f01141b3:	c3                   	ret    

f01141b4 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01141b4:	55                   	push   %ebp
f01141b5:	89 e5                	mov    %esp,%ebp
f01141b7:	57                   	push   %edi
f01141b8:	56                   	push   %esi
f01141b9:	53                   	push   %ebx
f01141ba:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f01141c0:	89 e0                	mov    %esp,%eax
f01141c2:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01141c4:	83 ec 0c             	sub    $0xc,%esp
f01141c7:	68 b8 b0 11 f0       	push   $0xf011b0b8
f01141cc:	e8 c5 2b ff ff       	call   f0106d96 <cprintf>
f01141d1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01141d4:	83 ec 0c             	sub    $0xc,%esp
f01141d7:	68 e8 b0 11 f0       	push   $0xf011b0e8
f01141dc:	e8 b5 2b ff ff       	call   f0106d96 <cprintf>
f01141e1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01141e4:	83 ec 0c             	sub    $0xc,%esp
f01141e7:	68 b8 b0 11 f0       	push   $0xf011b0b8
f01141ec:	e8 a5 2b ff ff       	call   f0106d96 <cprintf>
f01141f1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01141f4:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01141f8:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01141fc:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0114202:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0114208:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f011420f:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0114216:	e8 a3 61 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011421b:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011421e:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0114224:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114229:	b8 00 00 00 00       	mov    $0x0,%eax
f011422e:	89 d7                	mov    %edx,%edi
f0114230:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0114232:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0114238:	b9 14 00 00 00       	mov    $0x14,%ecx
f011423d:	b8 00 00 00 00       	mov    $0x0,%eax
f0114242:	89 d7                	mov    %edx,%edi
f0114244:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0114246:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f011424c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114251:	b8 00 00 00 00       	mov    $0x0,%eax
f0114256:	89 d7                	mov    %edx,%edi
f0114258:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011425a:	e8 5f 61 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011425f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114262:	e8 1a 76 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114267:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011426a:	83 ec 0c             	sub    $0xc,%esp
f011426d:	68 00 fc 1f 00       	push   $0x1ffc00
f0114272:	e8 af 7b ff ff       	call   f010be26 <kmalloc>
f0114277:	83 c4 10             	add    $0x10,%esp
f011427a:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114280:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0114286:	89 c1                	mov    %eax,%ecx
f0114288:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011428f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114294:	0f b6 d0             	movzbl %al,%edx
f0114297:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011429a:	01 d0                	add    %edx,%eax
f011429c:	48                   	dec    %eax
f011429d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01142a0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01142a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01142a8:	f7 75 b4             	divl   -0x4c(%ebp)
f01142ab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01142ae:	29 d0                	sub    %edx,%eax
f01142b0:	89 c3                	mov    %eax,%ebx
f01142b2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01142b9:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01142be:	0f b6 c0             	movzbl %al,%eax
f01142c1:	c1 e0 04             	shl    $0x4,%eax
f01142c4:	89 c2                	mov    %eax,%edx
f01142c6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01142c9:	01 d0                	add    %edx,%eax
f01142cb:	48                   	dec    %eax
f01142cc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01142cf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01142d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01142d7:	f7 75 ac             	divl   -0x54(%ebp)
f01142da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01142dd:	29 d0                	sub    %edx,%eax
f01142df:	01 d8                	add    %ebx,%eax
f01142e1:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01142e6:	39 c1                	cmp    %eax,%ecx
f01142e8:	74 17                	je     f0114301 <test_kheap_virt_addr+0x14d>
f01142ea:	83 ec 04             	sub    $0x4,%esp
f01142ed:	68 54 b2 11 f0       	push   $0xf011b254
f01142f2:	68 9c 06 00 00       	push   $0x69c
f01142f7:	68 76 b1 11 f0       	push   $0xf011b176
f01142fc:	e8 75 be fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114301:	e8 7b 75 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114306:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114309:	74 17                	je     f0114322 <test_kheap_virt_addr+0x16e>
f011430b:	83 ec 04             	sub    $0x4,%esp
f011430e:	68 88 b1 11 f0       	push   $0xf011b188
f0114313:	68 9d 06 00 00       	push   $0x69d
f0114318:	68 76 b1 11 f0       	push   $0xf011b176
f011431d:	e8 54 be fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114322:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114325:	e8 94 60 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011432a:	29 c3                	sub    %eax,%ebx
f011432c:	89 d8                	mov    %ebx,%eax
f011432e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114333:	74 17                	je     f011434c <test_kheap_virt_addr+0x198>
f0114335:	83 ec 04             	sub    $0x4,%esp
f0114338:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011433d:	68 9e 06 00 00       	push   $0x69e
f0114342:	68 76 b1 11 f0       	push   $0xf011b176
f0114347:	e8 2a be fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011434c:	e8 6d 60 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114351:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114354:	e8 28 75 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114359:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011435c:	83 ec 0c             	sub    $0xc,%esp
f011435f:	68 00 fc 1f 00       	push   $0x1ffc00
f0114364:	e8 bd 7a ff ff       	call   f010be26 <kmalloc>
f0114369:	83 c4 10             	add    $0x10,%esp
f011436c:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114372:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0114378:	89 c1                	mov    %eax,%ecx
f011437a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114381:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114386:	0f b6 d0             	movzbl %al,%edx
f0114389:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011438c:	01 d0                	add    %edx,%eax
f011438e:	48                   	dec    %eax
f011438f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0114392:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114395:	ba 00 00 00 00       	mov    $0x0,%edx
f011439a:	f7 75 a4             	divl   -0x5c(%ebp)
f011439d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01143a0:	29 d0                	sub    %edx,%eax
f01143a2:	89 c3                	mov    %eax,%ebx
f01143a4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01143ab:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01143b0:	0f b6 c0             	movzbl %al,%eax
f01143b3:	c1 e0 04             	shl    $0x4,%eax
f01143b6:	89 c2                	mov    %eax,%edx
f01143b8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01143bb:	01 d0                	add    %edx,%eax
f01143bd:	48                   	dec    %eax
f01143be:	89 45 98             	mov    %eax,-0x68(%ebp)
f01143c1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01143c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01143c9:	f7 75 9c             	divl   -0x64(%ebp)
f01143cc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01143cf:	29 d0                	sub    %edx,%eax
f01143d1:	01 d8                	add    %ebx,%eax
f01143d3:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f01143d8:	39 c1                	cmp    %eax,%ecx
f01143da:	74 17                	je     f01143f3 <test_kheap_virt_addr+0x23f>
f01143dc:	83 ec 04             	sub    $0x4,%esp
f01143df:	68 54 b2 11 f0       	push   $0xf011b254
f01143e4:	68 a4 06 00 00       	push   $0x6a4
f01143e9:	68 76 b1 11 f0       	push   $0xf011b176
f01143ee:	e8 83 bd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01143f3:	e8 89 74 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01143f8:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01143fb:	74 17                	je     f0114414 <test_kheap_virt_addr+0x260>
f01143fd:	83 ec 04             	sub    $0x4,%esp
f0114400:	68 88 b1 11 f0       	push   $0xf011b188
f0114405:	68 a5 06 00 00       	push   $0x6a5
f011440a:	68 76 b1 11 f0       	push   $0xf011b176
f011440f:	e8 62 bd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114414:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114417:	e8 a2 5f ff ff       	call   f010a3be <sys_calculate_free_frames>
f011441c:	29 c3                	sub    %eax,%ebx
f011441e:	89 d8                	mov    %ebx,%eax
f0114420:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114425:	74 17                	je     f011443e <test_kheap_virt_addr+0x28a>
f0114427:	83 ec 04             	sub    $0x4,%esp
f011442a:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011442f:	68 a6 06 00 00       	push   $0x6a6
f0114434:	68 76 b1 11 f0       	push   $0xf011b176
f0114439:	e8 38 bd fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011443e:	e8 7b 5f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114443:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114446:	e8 36 74 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011444b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011444e:	83 ec 0c             	sub    $0xc,%esp
f0114451:	68 00 08 00 00       	push   $0x800
f0114456:	e8 cb 79 ff ff       	call   f010be26 <kmalloc>
f011445b:	83 c4 10             	add    $0x10,%esp
f011445e:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114464:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011446a:	89 c1                	mov    %eax,%ecx
f011446c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0114473:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114478:	0f b6 d0             	movzbl %al,%edx
f011447b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011447e:	01 d0                	add    %edx,%eax
f0114480:	48                   	dec    %eax
f0114481:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114484:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114487:	ba 00 00 00 00       	mov    $0x0,%edx
f011448c:	f7 75 94             	divl   -0x6c(%ebp)
f011448f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114492:	29 d0                	sub    %edx,%eax
f0114494:	89 c3                	mov    %eax,%ebx
f0114496:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011449d:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01144a2:	0f b6 c0             	movzbl %al,%eax
f01144a5:	c1 e0 04             	shl    $0x4,%eax
f01144a8:	89 c2                	mov    %eax,%edx
f01144aa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01144ad:	01 d0                	add    %edx,%eax
f01144af:	48                   	dec    %eax
f01144b0:	89 45 88             	mov    %eax,-0x78(%ebp)
f01144b3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01144b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01144bb:	f7 75 8c             	divl   -0x74(%ebp)
f01144be:	8b 45 88             	mov    -0x78(%ebp),%eax
f01144c1:	29 d0                	sub    %edx,%eax
f01144c3:	01 d8                	add    %ebx,%eax
f01144c5:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f01144ca:	39 c1                	cmp    %eax,%ecx
f01144cc:	74 17                	je     f01144e5 <test_kheap_virt_addr+0x331>
f01144ce:	83 ec 04             	sub    $0x4,%esp
f01144d1:	68 54 b2 11 f0       	push   $0xf011b254
f01144d6:	68 ac 06 00 00       	push   $0x6ac
f01144db:	68 76 b1 11 f0       	push   $0xf011b176
f01144e0:	e8 91 bc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01144e5:	e8 97 73 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01144ea:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01144ed:	74 17                	je     f0114506 <test_kheap_virt_addr+0x352>
f01144ef:	83 ec 04             	sub    $0x4,%esp
f01144f2:	68 88 b1 11 f0       	push   $0xf011b188
f01144f7:	68 ad 06 00 00       	push   $0x6ad
f01144fc:	68 76 b1 11 f0       	push   $0xf011b176
f0114501:	e8 70 bc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114506:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114509:	e8 b0 5e ff ff       	call   f010a3be <sys_calculate_free_frames>
f011450e:	29 c3                	sub    %eax,%ebx
f0114510:	89 d8                	mov    %ebx,%eax
f0114512:	83 f8 01             	cmp    $0x1,%eax
f0114515:	74 17                	je     f011452e <test_kheap_virt_addr+0x37a>
f0114517:	83 ec 04             	sub    $0x4,%esp
f011451a:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011451f:	68 ae 06 00 00       	push   $0x6ae
f0114524:	68 76 b1 11 f0       	push   $0xf011b176
f0114529:	e8 48 bc fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011452e:	e8 8b 5e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114533:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114536:	e8 46 73 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011453b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011453e:	83 ec 0c             	sub    $0xc,%esp
f0114541:	68 00 08 00 00       	push   $0x800
f0114546:	e8 db 78 ff ff       	call   f010be26 <kmalloc>
f011454b:	83 c4 10             	add    $0x10,%esp
f011454e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114554:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011455a:	89 c1                	mov    %eax,%ecx
f011455c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114563:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114568:	0f b6 d0             	movzbl %al,%edx
f011456b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011456e:	01 d0                	add    %edx,%eax
f0114570:	48                   	dec    %eax
f0114571:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114574:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114577:	ba 00 00 00 00       	mov    $0x0,%edx
f011457c:	f7 75 84             	divl   -0x7c(%ebp)
f011457f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114582:	29 d0                	sub    %edx,%eax
f0114584:	89 c3                	mov    %eax,%ebx
f0114586:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011458d:	10 00 00 
f0114590:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114595:	0f b6 c0             	movzbl %al,%eax
f0114598:	c1 e0 04             	shl    $0x4,%eax
f011459b:	89 c2                	mov    %eax,%edx
f011459d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01145a3:	01 d0                	add    %edx,%eax
f01145a5:	48                   	dec    %eax
f01145a6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01145ac:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01145b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01145b7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01145bd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01145c3:	29 d0                	sub    %edx,%eax
f01145c5:	01 d8                	add    %ebx,%eax
f01145c7:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f01145cc:	39 c1                	cmp    %eax,%ecx
f01145ce:	74 17                	je     f01145e7 <test_kheap_virt_addr+0x433>
f01145d0:	83 ec 04             	sub    $0x4,%esp
f01145d3:	68 54 b2 11 f0       	push   $0xf011b254
f01145d8:	68 b4 06 00 00       	push   $0x6b4
f01145dd:	68 76 b1 11 f0       	push   $0xf011b176
f01145e2:	e8 8f bb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01145e7:	e8 95 72 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01145ec:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01145ef:	74 17                	je     f0114608 <test_kheap_virt_addr+0x454>
f01145f1:	83 ec 04             	sub    $0x4,%esp
f01145f4:	68 88 b1 11 f0       	push   $0xf011b188
f01145f9:	68 b5 06 00 00       	push   $0x6b5
f01145fe:	68 76 b1 11 f0       	push   $0xf011b176
f0114603:	e8 6e bb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114608:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011460b:	e8 ae 5d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114610:	29 c3                	sub    %eax,%ebx
f0114612:	89 d8                	mov    %ebx,%eax
f0114614:	83 f8 01             	cmp    $0x1,%eax
f0114617:	74 17                	je     f0114630 <test_kheap_virt_addr+0x47c>
f0114619:	83 ec 04             	sub    $0x4,%esp
f011461c:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0114621:	68 b6 06 00 00       	push   $0x6b6
f0114626:	68 76 b1 11 f0       	push   $0xf011b176
f011462b:	e8 46 bb fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0114630:	e8 89 5d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114635:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114638:	e8 44 72 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011463d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0114640:	83 ec 0c             	sub    $0xc,%esp
f0114643:	68 00 1c 00 00       	push   $0x1c00
f0114648:	e8 d9 77 ff ff       	call   f010be26 <kmalloc>
f011464d:	83 c4 10             	add    $0x10,%esp
f0114650:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114656:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011465c:	89 c1                	mov    %eax,%ecx
f011465e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114665:	10 00 00 
f0114668:	a0 64 32 53 f0       	mov    0xf0533264,%al
f011466d:	0f b6 d0             	movzbl %al,%edx
f0114670:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114676:	01 d0                	add    %edx,%eax
f0114678:	48                   	dec    %eax
f0114679:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011467f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114685:	ba 00 00 00 00       	mov    $0x0,%edx
f011468a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114690:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114696:	29 d0                	sub    %edx,%eax
f0114698:	89 c3                	mov    %eax,%ebx
f011469a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01146a1:	10 00 00 
f01146a4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01146a9:	0f b6 c0             	movzbl %al,%eax
f01146ac:	c1 e0 04             	shl    $0x4,%eax
f01146af:	89 c2                	mov    %eax,%edx
f01146b1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01146b7:	01 d0                	add    %edx,%eax
f01146b9:	48                   	dec    %eax
f01146ba:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01146c0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01146c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01146cb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01146d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01146d7:	29 d0                	sub    %edx,%eax
f01146d9:	01 d8                	add    %ebx,%eax
f01146db:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f01146e0:	39 c1                	cmp    %eax,%ecx
f01146e2:	74 17                	je     f01146fb <test_kheap_virt_addr+0x547>
f01146e4:	83 ec 04             	sub    $0x4,%esp
f01146e7:	68 54 b2 11 f0       	push   $0xf011b254
f01146ec:	68 bc 06 00 00       	push   $0x6bc
f01146f1:	68 76 b1 11 f0       	push   $0xf011b176
f01146f6:	e8 7b ba fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01146fb:	e8 81 71 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114700:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114703:	74 17                	je     f011471c <test_kheap_virt_addr+0x568>
f0114705:	83 ec 04             	sub    $0x4,%esp
f0114708:	68 88 b1 11 f0       	push   $0xf011b188
f011470d:	68 bd 06 00 00       	push   $0x6bd
f0114712:	68 76 b1 11 f0       	push   $0xf011b176
f0114717:	e8 5a ba fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011471c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011471f:	e8 9a 5c ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114724:	29 c3                	sub    %eax,%ebx
f0114726:	89 d8                	mov    %ebx,%eax
f0114728:	83 f8 02             	cmp    $0x2,%eax
f011472b:	74 17                	je     f0114744 <test_kheap_virt_addr+0x590>
f011472d:	83 ec 04             	sub    $0x4,%esp
f0114730:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0114735:	68 be 06 00 00       	push   $0x6be
f011473a:	68 76 b1 11 f0       	push   $0xf011b176
f011473f:	e8 32 ba fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114744:	e8 75 5c ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114749:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011474c:	e8 30 71 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114751:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114754:	83 ec 0c             	sub    $0xc,%esp
f0114757:	68 00 fc 2f 00       	push   $0x2ffc00
f011475c:	e8 c5 76 ff ff       	call   f010be26 <kmalloc>
f0114761:	83 c4 10             	add    $0x10,%esp
f0114764:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011476a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0114770:	89 c1                	mov    %eax,%ecx
f0114772:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114779:	10 00 00 
f011477c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114781:	0f b6 d0             	movzbl %al,%edx
f0114784:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011478a:	01 d0                	add    %edx,%eax
f011478c:	48                   	dec    %eax
f011478d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0114793:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114799:	ba 00 00 00 00       	mov    $0x0,%edx
f011479e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01147a4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01147aa:	29 d0                	sub    %edx,%eax
f01147ac:	89 c3                	mov    %eax,%ebx
f01147ae:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01147b5:	10 00 00 
f01147b8:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01147bd:	0f b6 c0             	movzbl %al,%eax
f01147c0:	c1 e0 04             	shl    $0x4,%eax
f01147c3:	89 c2                	mov    %eax,%edx
f01147c5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01147cb:	01 d0                	add    %edx,%eax
f01147cd:	48                   	dec    %eax
f01147ce:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01147d4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01147da:	ba 00 00 00 00       	mov    $0x0,%edx
f01147df:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01147e5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01147eb:	29 d0                	sub    %edx,%eax
f01147ed:	01 d8                	add    %ebx,%eax
f01147ef:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01147f4:	39 c1                	cmp    %eax,%ecx
f01147f6:	74 17                	je     f011480f <test_kheap_virt_addr+0x65b>
f01147f8:	83 ec 04             	sub    $0x4,%esp
f01147fb:	68 54 b2 11 f0       	push   $0xf011b254
f0114800:	68 c4 06 00 00       	push   $0x6c4
f0114805:	68 76 b1 11 f0       	push   $0xf011b176
f011480a:	e8 67 b9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011480f:	e8 6d 70 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114814:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114817:	74 17                	je     f0114830 <test_kheap_virt_addr+0x67c>
f0114819:	83 ec 04             	sub    $0x4,%esp
f011481c:	68 88 b1 11 f0       	push   $0xf011b188
f0114821:	68 c5 06 00 00       	push   $0x6c5
f0114826:	68 76 b1 11 f0       	push   $0xf011b176
f011482b:	e8 46 b9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114830:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114833:	e8 86 5b ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114838:	29 c3                	sub    %eax,%ebx
f011483a:	89 d8                	mov    %ebx,%eax
f011483c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114841:	74 17                	je     f011485a <test_kheap_virt_addr+0x6a6>
f0114843:	83 ec 04             	sub    $0x4,%esp
f0114846:	68 f0 b1 11 f0       	push   $0xf011b1f0
f011484b:	68 c6 06 00 00       	push   $0x6c6
f0114850:	68 76 b1 11 f0       	push   $0xf011b176
f0114855:	e8 1c b9 fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011485a:	e8 5f 5b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011485f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114862:	e8 1a 70 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114867:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011486a:	83 ec 0c             	sub    $0xc,%esp
f011486d:	68 00 fc 5f 00       	push   $0x5ffc00
f0114872:	e8 af 75 ff ff       	call   f010be26 <kmalloc>
f0114877:	83 c4 10             	add    $0x10,%esp
f011487a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114880:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0114886:	89 c1                	mov    %eax,%ecx
f0114888:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011488f:	10 00 00 
f0114892:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114897:	0f b6 d0             	movzbl %al,%edx
f011489a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01148a0:	01 d0                	add    %edx,%eax
f01148a2:	48                   	dec    %eax
f01148a3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01148a9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01148af:	ba 00 00 00 00       	mov    $0x0,%edx
f01148b4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01148ba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01148c0:	29 d0                	sub    %edx,%eax
f01148c2:	89 c3                	mov    %eax,%ebx
f01148c4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01148cb:	10 00 00 
f01148ce:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01148d3:	0f b6 c0             	movzbl %al,%eax
f01148d6:	c1 e0 04             	shl    $0x4,%eax
f01148d9:	89 c2                	mov    %eax,%edx
f01148db:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01148e1:	01 d0                	add    %edx,%eax
f01148e3:	48                   	dec    %eax
f01148e4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01148ea:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01148f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01148f5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01148fb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114901:	29 d0                	sub    %edx,%eax
f0114903:	01 d8                	add    %ebx,%eax
f0114905:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f011490a:	39 c1                	cmp    %eax,%ecx
f011490c:	74 17                	je     f0114925 <test_kheap_virt_addr+0x771>
f011490e:	83 ec 04             	sub    $0x4,%esp
f0114911:	68 54 b2 11 f0       	push   $0xf011b254
f0114916:	68 cc 06 00 00       	push   $0x6cc
f011491b:	68 76 b1 11 f0       	push   $0xf011b176
f0114920:	e8 51 b8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114925:	e8 57 6f ff ff       	call   f010b881 <pf_calculate_free_frames>
f011492a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011492d:	74 17                	je     f0114946 <test_kheap_virt_addr+0x792>
f011492f:	83 ec 04             	sub    $0x4,%esp
f0114932:	68 88 b1 11 f0       	push   $0xf011b188
f0114937:	68 cd 06 00 00       	push   $0x6cd
f011493c:	68 76 b1 11 f0       	push   $0xf011b176
f0114941:	e8 30 b8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114946:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114949:	e8 70 5a ff ff       	call   f010a3be <sys_calculate_free_frames>
f011494e:	29 c3                	sub    %eax,%ebx
f0114950:	89 d8                	mov    %ebx,%eax
f0114952:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114957:	74 17                	je     f0114970 <test_kheap_virt_addr+0x7bc>
f0114959:	83 ec 04             	sub    $0x4,%esp
f011495c:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0114961:	68 ce 06 00 00       	push   $0x6ce
f0114966:	68 76 b1 11 f0       	push   $0xf011b176
f011496b:	e8 06 b8 fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0114970:	e8 49 5a ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114975:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114978:	e8 04 6f ff ff       	call   f010b881 <pf_calculate_free_frames>
f011497d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0114980:	83 ec 0c             	sub    $0xc,%esp
f0114983:	68 00 38 00 00       	push   $0x3800
f0114988:	e8 99 74 ff ff       	call   f010be26 <kmalloc>
f011498d:	83 c4 10             	add    $0x10,%esp
f0114990:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114996:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011499c:	89 c1                	mov    %eax,%ecx
f011499e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01149a5:	10 00 00 
f01149a8:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01149ad:	0f b6 d0             	movzbl %al,%edx
f01149b0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01149b6:	01 d0                	add    %edx,%eax
f01149b8:	48                   	dec    %eax
f01149b9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01149bf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01149c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01149ca:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01149d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01149d6:	29 d0                	sub    %edx,%eax
f01149d8:	89 c3                	mov    %eax,%ebx
f01149da:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01149e1:	10 00 00 
f01149e4:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01149e9:	0f b6 c0             	movzbl %al,%eax
f01149ec:	c1 e0 04             	shl    $0x4,%eax
f01149ef:	89 c2                	mov    %eax,%edx
f01149f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01149f7:	01 d0                	add    %edx,%eax
f01149f9:	48                   	dec    %eax
f01149fa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0114a00:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114a06:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a0b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0114a11:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114a17:	29 d0                	sub    %edx,%eax
f0114a19:	01 d8                	add    %ebx,%eax
f0114a1b:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0114a20:	39 c1                	cmp    %eax,%ecx
f0114a22:	74 17                	je     f0114a3b <test_kheap_virt_addr+0x887>
f0114a24:	83 ec 04             	sub    $0x4,%esp
f0114a27:	68 54 b2 11 f0       	push   $0xf011b254
f0114a2c:	68 d4 06 00 00       	push   $0x6d4
f0114a31:	68 76 b1 11 f0       	push   $0xf011b176
f0114a36:	e8 3b b7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114a3b:	e8 41 6e ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114a40:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114a43:	74 17                	je     f0114a5c <test_kheap_virt_addr+0x8a8>
f0114a45:	83 ec 04             	sub    $0x4,%esp
f0114a48:	68 88 b1 11 f0       	push   $0xf011b188
f0114a4d:	68 d5 06 00 00       	push   $0x6d5
f0114a52:	68 76 b1 11 f0       	push   $0xf011b176
f0114a57:	e8 1a b7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114a5c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114a5f:	e8 5a 59 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114a64:	29 c3                	sub    %eax,%ebx
f0114a66:	89 d8                	mov    %ebx,%eax
f0114a68:	83 f8 04             	cmp    $0x4,%eax
f0114a6b:	74 17                	je     f0114a84 <test_kheap_virt_addr+0x8d0>
f0114a6d:	83 ec 04             	sub    $0x4,%esp
f0114a70:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0114a75:	68 d6 06 00 00       	push   $0x6d6
f0114a7a:	68 76 b1 11 f0       	push   $0xf011b176
f0114a7f:	e8 f2 b6 fe ff       	call   f0100176 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0114a84:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0114a8b:	10 00 00 
f0114a8e:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114a93:	0f b6 d0             	movzbl %al,%edx
f0114a96:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0114a9c:	01 d0                	add    %edx,%eax
f0114a9e:	48                   	dec    %eax
f0114a9f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0114aa5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114aab:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ab0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0114ab6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114abc:	29 d0                	sub    %edx,%eax
f0114abe:	89 c1                	mov    %eax,%ecx
f0114ac0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0114ac7:	10 00 00 
f0114aca:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114acf:	0f b6 c0             	movzbl %al,%eax
f0114ad2:	c1 e0 04             	shl    $0x4,%eax
f0114ad5:	89 c2                	mov    %eax,%edx
f0114ad7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0114add:	01 d0                	add    %edx,%eax
f0114adf:	48                   	dec    %eax
f0114ae0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0114ae6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0114aec:	ba 00 00 00 00       	mov    $0x0,%edx
f0114af1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0114af7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0114afd:	29 d0                	sub    %edx,%eax
f0114aff:	01 c8                	add    %ecx,%eax
f0114b01:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114b06:	c1 e8 0c             	shr    $0xc,%eax
f0114b09:	89 c2                	mov    %eax,%edx
f0114b0b:	4a                   	dec    %edx
f0114b0c:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0114b12:	c1 e0 02             	shl    $0x2,%eax
f0114b15:	8d 50 03             	lea    0x3(%eax),%edx
f0114b18:	b8 10 00 00 00       	mov    $0x10,%eax
f0114b1d:	48                   	dec    %eax
f0114b1e:	01 d0                	add    %edx,%eax
f0114b20:	bf 10 00 00 00       	mov    $0x10,%edi
f0114b25:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b2a:	f7 f7                	div    %edi
f0114b2c:	6b c0 10             	imul   $0x10,%eax,%eax
f0114b2f:	29 c4                	sub    %eax,%esp
f0114b31:	89 e0                	mov    %esp,%eax
f0114b33:	83 c0 03             	add    $0x3,%eax
f0114b36:	c1 e8 02             	shr    $0x2,%eax
f0114b39:	c1 e0 02             	shl    $0x2,%eax
f0114b3c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE ;
f0114b42:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0114b49:	10 00 00 
f0114b4c:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114b51:	0f b6 d0             	movzbl %al,%edx
f0114b54:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0114b5a:	01 d0                	add    %edx,%eax
f0114b5c:	48                   	dec    %eax
f0114b5d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0114b63:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114b69:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b6e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0114b74:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114b7a:	29 d0                	sub    %edx,%eax
f0114b7c:	89 c1                	mov    %eax,%ecx
f0114b7e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0114b85:	10 00 00 
f0114b88:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114b8d:	0f b6 c0             	movzbl %al,%eax
f0114b90:	c1 e0 04             	shl    $0x4,%eax
f0114b93:	89 c2                	mov    %eax,%edx
f0114b95:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0114b9b:	01 d0                	add    %edx,%eax
f0114b9d:	48                   	dec    %eax
f0114b9e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0114ba4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114baa:	ba 00 00 00 00       	mov    $0x0,%edx
f0114baf:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0114bb5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114bbb:	29 d0                	sub    %edx,%eax
f0114bbd:	01 c8                	add    %ecx,%eax
f0114bbf:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114bc4:	c1 e8 0c             	shr    $0xc,%eax
f0114bc7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0114bcd:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0114bd4:	10 00 00 
f0114bd7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114bdc:	0f b6 d0             	movzbl %al,%edx
f0114bdf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0114be5:	01 d0                	add    %edx,%eax
f0114be7:	48                   	dec    %eax
f0114be8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0114bee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0114bf9:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0114bff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114c05:	29 d0                	sub    %edx,%eax
f0114c07:	89 c1                	mov    %eax,%ecx
f0114c09:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0114c10:	10 00 00 
f0114c13:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114c18:	0f b6 c0             	movzbl %al,%eax
f0114c1b:	c1 e0 04             	shl    $0x4,%eax
f0114c1e:	89 c2                	mov    %eax,%edx
f0114c20:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0114c26:	01 d0                	add    %edx,%eax
f0114c28:	48                   	dec    %eax
f0114c29:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0114c2f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114c35:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c3a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0114c40:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114c46:	29 d0                	sub    %edx,%eax
f0114c48:	01 c8                	add    %ecx,%eax
f0114c4a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114c4f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0114c55:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0114c5c:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0114c63:	e9 d8 00 00 00       	jmp    f0114d40 <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0114c68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0114c6b:	a1 d0 16 55 f0       	mov    0xf05516d0,%eax
f0114c70:	83 ec 04             	sub    $0x4,%esp
f0114c73:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f0114c79:	51                   	push   %ecx
f0114c7a:	52                   	push   %edx
f0114c7b:	50                   	push   %eax
f0114c7c:	e8 94 ee fe ff       	call   f0103b15 <get_page_table>
f0114c81:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0114c84:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0114c8a:	85 c0                	test   %eax,%eax
f0114c8c:	75 17                	jne    f0114ca5 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0114c8e:	83 ec 04             	sub    $0x4,%esp
f0114c91:	68 74 b9 11 f0       	push   $0xf011b974
f0114c96:	68 e7 06 00 00       	push   $0x6e7
f0114c9b:	68 76 b1 11 f0       	push   $0xf011b176
f0114ca0:	e8 d1 b4 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0114ca5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0114cac:	eb 73                	jmp    f0114d21 <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0114cae:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0114cb4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114cb7:	c1 e2 02             	shl    $0x2,%edx
f0114cba:	01 d0                	add    %edx,%eax
f0114cbc:	8b 00                	mov    (%eax),%eax
f0114cbe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114cc3:	89 c1                	mov    %eax,%ecx
f0114cc5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ccb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0114cce:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114cd1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114cd7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0114cda:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114cdd:	83 ec 0c             	sub    $0xc,%esp
f0114ce0:	50                   	push   %eax
f0114ce1:	e8 4f 74 ff ff       	call   f010c135 <kheap_virtual_address>
f0114ce6:	83 c4 10             	add    $0x10,%esp
f0114ce9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f0114cef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114cf2:	c1 e0 0c             	shl    $0xc,%eax
f0114cf5:	89 c2                	mov    %eax,%edx
f0114cf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114cfa:	01 d0                	add    %edx,%eax
f0114cfc:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0114d02:	74 17                	je     f0114d1b <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f0114d04:	83 ec 04             	sub    $0x4,%esp
f0114d07:	68 68 ba 11 f0       	push   $0xf011ba68
f0114d0c:	68 f1 06 00 00       	push   $0x6f1
f0114d11:	68 76 b1 11 f0       	push   $0xf011b176
f0114d16:	e8 5b b4 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0114d1b:	ff 45 dc             	incl   -0x24(%ebp)
f0114d1e:	ff 45 e0             	incl   -0x20(%ebp)
f0114d21:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114d24:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0114d2a:	7d 0d                	jge    f0114d39 <test_kheap_virt_addr+0xb85>
f0114d2c:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0114d33:	0f 8e 75 ff ff ff    	jle    f0114cae <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0114d39:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f0114d40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114d43:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0114d49:	0f 82 19 ff ff ff    	jb     f0114c68 <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0114d4f:	83 ec 0c             	sub    $0xc,%esp
f0114d52:	68 84 ba 11 f0       	push   $0xf011ba84
f0114d57:	e8 3a 20 ff ff       	call   f0106d96 <cprintf>
f0114d5c:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0114d5f:	e8 5a 56 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114d64:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0114d6a:	e8 12 6b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114d6f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0114d75:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0114d7b:	83 ec 0c             	sub    $0xc,%esp
f0114d7e:	50                   	push   %eax
f0114d7f:	e8 33 71 ff ff       	call   f010beb7 <kfree>
f0114d84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114d87:	e8 f5 6a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114d8c:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0114d92:	74 17                	je     f0114dab <test_kheap_virt_addr+0xbf7>
f0114d94:	83 ec 04             	sub    $0x4,%esp
f0114d97:	68 88 b1 11 f0       	push   $0xf011b188
f0114d9c:	68 fe 06 00 00       	push   $0x6fe
f0114da1:	68 76 b1 11 f0       	push   $0xf011b176
f0114da6:	e8 cb b3 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0114dab:	e8 0e 56 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114db0:	89 c2                	mov    %eax,%edx
f0114db2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0114db8:	29 c2                	sub    %eax,%edx
f0114dba:	89 d0                	mov    %edx,%eax
f0114dbc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114dc1:	74 17                	je     f0114dda <test_kheap_virt_addr+0xc26>
f0114dc3:	83 ec 04             	sub    $0x4,%esp
f0114dc6:	68 5c b7 11 f0       	push   $0xf011b75c
f0114dcb:	68 ff 06 00 00       	push   $0x6ff
f0114dd0:	68 76 b1 11 f0       	push   $0xf011b176
f0114dd5:	e8 9c b3 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114dda:	e8 df 55 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114ddf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114de5:	e8 97 6a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114dea:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0114df0:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0114df6:	83 ec 0c             	sub    $0xc,%esp
f0114df9:	50                   	push   %eax
f0114dfa:	e8 b8 70 ff ff       	call   f010beb7 <kfree>
f0114dff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e02:	e8 7a 6a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114e07:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0114e0d:	74 17                	je     f0114e26 <test_kheap_virt_addr+0xc72>
f0114e0f:	83 ec 04             	sub    $0x4,%esp
f0114e12:	68 88 b1 11 f0       	push   $0xf011b188
f0114e17:	68 05 07 00 00       	push   $0x705
f0114e1c:	68 76 b1 11 f0       	push   $0xf011b176
f0114e21:	e8 50 b3 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0114e26:	e8 93 55 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114e2b:	89 c2                	mov    %eax,%edx
f0114e2d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0114e33:	29 c2                	sub    %eax,%edx
f0114e35:	89 d0                	mov    %edx,%eax
f0114e37:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114e3c:	74 17                	je     f0114e55 <test_kheap_virt_addr+0xca1>
f0114e3e:	83 ec 04             	sub    $0x4,%esp
f0114e41:	68 5c b7 11 f0       	push   $0xf011b75c
f0114e46:	68 06 07 00 00       	push   $0x706
f0114e4b:	68 76 b1 11 f0       	push   $0xf011b176
f0114e50:	e8 21 b3 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114e55:	e8 64 55 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114e5a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114e60:	e8 1c 6a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114e65:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0114e6b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0114e71:	83 ec 0c             	sub    $0xc,%esp
f0114e74:	50                   	push   %eax
f0114e75:	e8 3d 70 ff ff       	call   f010beb7 <kfree>
f0114e7a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e7d:	e8 ff 69 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0114e82:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0114e88:	74 17                	je     f0114ea1 <test_kheap_virt_addr+0xced>
f0114e8a:	83 ec 04             	sub    $0x4,%esp
f0114e8d:	68 88 b1 11 f0       	push   $0xf011b188
f0114e92:	68 0c 07 00 00       	push   $0x70c
f0114e97:	68 76 b1 11 f0       	push   $0xf011b176
f0114e9c:	e8 d5 b2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0114ea1:	e8 18 55 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0114ea6:	89 c2                	mov    %eax,%edx
f0114ea8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0114eae:	29 c2                	sub    %eax,%edx
f0114eb0:	89 d0                	mov    %edx,%eax
f0114eb2:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114eb7:	74 17                	je     f0114ed0 <test_kheap_virt_addr+0xd1c>
f0114eb9:	83 ec 04             	sub    $0x4,%esp
f0114ebc:	68 5c b7 11 f0       	push   $0xf011b75c
f0114ec1:	68 0d 07 00 00       	push   $0x70d
f0114ec6:	68 76 b1 11 f0       	push   $0xf011b176
f0114ecb:	e8 a6 b2 fe ff       	call   f0100176 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0114ed0:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0114ed7:	10 00 00 
f0114eda:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114edf:	0f b6 d0             	movzbl %al,%edx
f0114ee2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0114ee8:	01 d0                	add    %edx,%eax
f0114eea:	48                   	dec    %eax
f0114eeb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0114ef1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0114efc:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0114f02:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114f08:	29 d0                	sub    %edx,%eax
f0114f0a:	89 c1                	mov    %eax,%ecx
f0114f0c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0114f13:	10 00 00 
f0114f16:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114f1b:	0f b6 c0             	movzbl %al,%eax
f0114f1e:	c1 e0 04             	shl    $0x4,%eax
f0114f21:	89 c2                	mov    %eax,%edx
f0114f23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0114f29:	01 d0                	add    %edx,%eax
f0114f2b:	48                   	dec    %eax
f0114f2c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0114f32:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f3d:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0114f43:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114f49:	29 d0                	sub    %edx,%eax
f0114f4b:	01 c8                	add    %ecx,%eax
f0114f4d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114f52:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0114f58:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f0114f5f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0114f66:	10 00 00 
f0114f69:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114f6e:	0f b6 d0             	movzbl %al,%edx
f0114f71:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0114f77:	01 d0                	add    %edx,%eax
f0114f79:	48                   	dec    %eax
f0114f7a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0114f80:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114f86:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f8b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0114f91:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114f97:	29 d0                	sub    %edx,%eax
f0114f99:	89 c1                	mov    %eax,%ecx
f0114f9b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0114fa2:	10 00 00 
f0114fa5:	a0 64 32 53 f0       	mov    0xf0533264,%al
f0114faa:	0f b6 c0             	movzbl %al,%eax
f0114fad:	c1 e0 04             	shl    $0x4,%eax
f0114fb0:	89 c2                	mov    %eax,%edx
f0114fb2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0114fb8:	01 d0                	add    %edx,%eax
f0114fba:	48                   	dec    %eax
f0114fbb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0114fc1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114fc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0114fcc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0114fd2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114fd8:	29 d0                	sub    %edx,%eax
f0114fda:	01 c8                	add    %ecx,%eax
f0114fdc:	c1 e8 0c             	shr    $0xc,%eax
f0114fdf:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0114fe5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114feb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114fee:	eb 41                	jmp    f0115031 <test_kheap_virt_addr+0xe7d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114ff0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ff6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0114ff9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114ffc:	83 ec 0c             	sub    $0xc,%esp
f0114fff:	50                   	push   %eax
f0115000:	e8 30 71 ff ff       	call   f010c135 <kheap_virtual_address>
f0115005:	83 c4 10             	add    $0x10,%esp
f0115008:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f011500e:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0115015:	74 17                	je     f011502e <test_kheap_virt_addr+0xe7a>
			{
				panic("Wrong kheap_virtual_address");
f0115017:	83 ec 04             	sub    $0x4,%esp
f011501a:	68 68 ba 11 f0       	push   $0xf011ba68
f011501f:	68 1e 07 00 00       	push   $0x71e
f0115024:	68 76 b1 11 f0       	push   $0xf011b176
f0115029:	e8 48 b1 fe ff       	call   f0100176 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011502e:	ff 45 d8             	incl   -0x28(%ebp)
f0115031:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115037:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011503d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115040:	39 c2                	cmp    %eax,%edx
f0115042:	77 ac                	ja     f0114ff0 <test_kheap_virt_addr+0xe3c>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0115044:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011504a:	05 00 04 00 00       	add    $0x400,%eax
f011504f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0115052:	eb 4b                	jmp    f011509f <test_kheap_virt_addr+0xeeb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0115054:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011505a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011505d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0115060:	83 ec 0c             	sub    $0xc,%esp
f0115063:	50                   	push   %eax
f0115064:	e8 cc 70 ff ff       	call   f010c135 <kheap_virtual_address>
f0115069:	83 c4 10             	add    $0x10,%esp
f011506c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0115072:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115075:	c1 e0 0c             	shl    $0xc,%eax
f0115078:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011507d:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0115083:	74 17                	je     f011509c <test_kheap_virt_addr+0xee8>
			{
				panic("Wrong kheap_virtual_address");
f0115085:	83 ec 04             	sub    $0x4,%esp
f0115088:	68 68 ba 11 f0       	push   $0xf011ba68
f011508d:	68 28 07 00 00       	push   $0x728
f0115092:	68 76 b1 11 f0       	push   $0xf011b176
f0115097:	e8 da b0 fe ff       	call   f0100176 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011509c:	ff 45 d8             	incl   -0x28(%ebp)
f011509f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01150a5:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01150ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01150ae:	39 c2                	cmp    %eax,%edx
f01150b0:	77 a2                	ja     f0115054 <test_kheap_virt_addr+0xea0>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01150b2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01150b8:	05 04 07 00 00       	add    $0x704,%eax
f01150bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01150c0:	eb 41                	jmp    f0115103 <test_kheap_virt_addr+0xf4f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01150c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01150c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01150cb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01150ce:	83 ec 0c             	sub    $0xc,%esp
f01150d1:	50                   	push   %eax
f01150d2:	e8 5e 70 ff ff       	call   f010c135 <kheap_virtual_address>
f01150d7:	83 c4 10             	add    $0x10,%esp
f01150da:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f01150e0:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f01150e7:	74 17                	je     f0115100 <test_kheap_virt_addr+0xf4c>
			{
				panic("Wrong kheap_virtual_address");
f01150e9:	83 ec 04             	sub    $0x4,%esp
f01150ec:	68 68 ba 11 f0       	push   $0xf011ba68
f01150f1:	68 31 07 00 00       	push   $0x731
f01150f6:	68 76 b1 11 f0       	push   $0xf011b176
f01150fb:	e8 76 b0 fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0115100:	ff 45 d8             	incl   -0x28(%ebp)
f0115103:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115109:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f011510f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115112:	39 c2                	cmp    %eax,%edx
f0115114:	77 ac                	ja     f01150c2 <test_kheap_virt_addr+0xf0e>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0115116:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011511c:	05 04 0d 00 00       	add    $0xd04,%eax
f0115121:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0115124:	eb 4b                	jmp    f0115171 <test_kheap_virt_addr+0xfbd>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0115126:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011512c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011512f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0115132:	83 ec 0c             	sub    $0xc,%esp
f0115135:	50                   	push   %eax
f0115136:	e8 fa 6f ff ff       	call   f010c135 <kheap_virtual_address>
f011513b:	83 c4 10             	add    $0x10,%esp
f011513e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0115144:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115147:	c1 e0 0c             	shl    $0xc,%eax
f011514a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011514f:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0115155:	74 17                	je     f011516e <test_kheap_virt_addr+0xfba>
			{
				panic("Wrong kheap_virtual_address");
f0115157:	83 ec 04             	sub    $0x4,%esp
f011515a:	68 68 ba 11 f0       	push   $0xf011ba68
f011515f:	68 3a 07 00 00       	push   $0x73a
f0115164:	68 76 b1 11 f0       	push   $0xf011b176
f0115169:	e8 08 b0 fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011516e:	ff 45 d8             	incl   -0x28(%ebp)
f0115171:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115177:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f011517d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115180:	39 c2                	cmp    %eax,%edx
f0115182:	77 a2                	ja     f0115126 <test_kheap_virt_addr+0xf72>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0115184:	83 ec 0c             	sub    $0xc,%esp
f0115187:	68 f9 b2 11 f0       	push   $0xf011b2f9
f011518c:	e8 05 1c ff ff       	call   f0106d96 <cprintf>
f0115191:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0115194:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f011519b:	eb 54                	jmp    f01151f1 <test_kheap_virt_addr+0x103d>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011519d:	83 ec 0c             	sub    $0xc,%esp
f01151a0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01151a3:	e8 8d 6f ff ff       	call   f010c135 <kheap_virtual_address>
f01151a8:	83 c4 10             	add    $0x10,%esp
f01151ab:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f01151b1:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f01151b8:	74 30                	je     f01151ea <test_kheap_virt_addr+0x1036>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01151ba:	83 ec 04             	sub    $0x4,%esp
f01151bd:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01151c3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01151c6:	68 b5 ba 11 f0       	push   $0xf011bab5
f01151cb:	e8 c6 1b ff ff       	call   f0106d96 <cprintf>
f01151d0:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01151d3:	83 ec 04             	sub    $0x4,%esp
f01151d6:	68 68 ba 11 f0       	push   $0xf011ba68
f01151db:	68 4a 07 00 00       	push   $0x74a
f01151e0:	68 76 b1 11 f0       	push   $0xf011b176
f01151e5:	e8 8c af fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01151ea:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01151f1:	b8 f4 96 61 00       	mov    $0x6196f4,%eax
f01151f6:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01151f9:	72 a2                	jb     f011519d <test_kheap_virt_addr+0xfe9>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01151fb:	83 ec 0c             	sub    $0xc,%esp
f01151fe:	68 52 b3 11 f0       	push   $0xf011b352
f0115203:	e8 8e 1b ff ff       	call   f0106d96 <cprintf>
f0115208:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f011520b:	83 ec 0c             	sub    $0xc,%esp
f011520e:	68 d4 ba 11 f0       	push   $0xf011bad4
f0115213:	e8 7e 1b ff ff       	call   f0106d96 <cprintf>
f0115218:	83 c4 10             	add    $0x10,%esp

	return 1;
f011521b:	b8 01 00 00 00       	mov    $0x1,%eax
f0115220:	89 f4                	mov    %esi,%esp

}
f0115222:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115225:	5b                   	pop    %ebx
f0115226:	5e                   	pop    %esi
f0115227:	5f                   	pop    %edi
f0115228:	5d                   	pop    %ebp
f0115229:	c3                   	ret    

f011522a <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011522a:	55                   	push   %ebp
f011522b:	89 e5                	mov    %esp,%ebp
f011522d:	57                   	push   %edi
f011522e:	56                   	push   %esi
f011522f:	53                   	push   %ebx
f0115230:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0115236:	a0 3c ea 14 f0       	mov    0xf014ea3c,%al
f011523b:	84 c0                	test   %al,%al
f011523d:	74 56                	je     f0115295 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011523f:	c6 05 3c ea 14 f0 00 	movb   $0x0,0xf014ea3c
		initFreeFrames = sys_calculate_free_frames() ;
f0115246:	e8 73 51 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011524b:	a3 f0 96 61 f0       	mov    %eax,0xf06196f0
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0115250:	e8 2c 66 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115255:	a3 ec 96 61 f0       	mov    %eax,0xf06196ec
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011525a:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0115260:	bb 2e bc 11 f0       	mov    $0xf011bc2e,%ebx
f0115265:	ba 11 00 00 00       	mov    $0x11,%edx
f011526a:	89 c7                	mov    %eax,%edi
f011526c:	89 de                	mov    %ebx,%esi
f011526e:	89 d1                	mov    %edx,%ecx
f0115270:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115272:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0115278:	b9 53 00 00 00       	mov    $0x53,%ecx
f011527d:	b0 00                	mov    $0x0,%al
f011527f:	89 d7                	mov    %edx,%edi
f0115281:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0115283:	83 ec 0c             	sub    $0xc,%esp
f0115286:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f011528c:	50                   	push   %eax
f011528d:	e8 b7 c5 fe ff       	call   f0101849 <execute_command>
f0115292:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0115295:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011529c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01152a3:	a1 1c 32 53 f0       	mov    0xf053321c,%eax
f01152a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01152ab:	eb 2d                	jmp    f01152da <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f01152ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01152b0:	05 f4 02 00 00       	add    $0x2f4,%eax
f01152b5:	83 ec 08             	sub    $0x8,%esp
f01152b8:	68 1b bb 11 f0       	push   $0xf011bb1b
f01152bd:	50                   	push   %eax
f01152be:	e8 52 22 00 00       	call   f0117515 <strcmp>
f01152c3:	83 c4 10             	add    $0x10,%esp
f01152c6:	85 c0                	test   %eax,%eax
f01152c8:	75 08                	jne    f01152d2 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f01152ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01152cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01152d0:	eb 2f                	jmp    f0115301 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01152d2:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f01152d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01152da:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01152de:	74 08                	je     f01152e8 <test_three_creation_functions+0xbe>
f01152e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01152e3:	8b 40 44             	mov    0x44(%eax),%eax
f01152e6:	eb 05                	jmp    f01152ed <test_three_creation_functions+0xc3>
f01152e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01152ed:	a3 24 32 53 f0       	mov    %eax,0xf0533224
f01152f2:	a1 24 32 53 f0       	mov    0xf0533224,%eax
f01152f7:	85 c0                	test   %eax,%eax
f01152f9:	75 b2                	jne    f01152ad <test_three_creation_functions+0x83>
f01152fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01152ff:	75 ac                	jne    f01152ad <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0115301:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115304:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f011530a:	85 c0                	test   %eax,%eax
f011530c:	74 17                	je     f0115325 <test_three_creation_functions+0xfb>
			panic("Page fault occur while not expected. Review the three creation functions");
f011530e:	83 ec 04             	sub    $0x4,%esp
f0115311:	68 24 bb 11 f0       	push   $0xf011bb24
f0115316:	68 74 07 00 00       	push   $0x774
f011531b:	68 76 b1 11 f0       	push   $0xf011b176
f0115320:	e8 51 ae fe ff       	call   f0100176 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0115325:	83 ec 0c             	sub    $0xc,%esp
f0115328:	ff 75 e4             	pushl  -0x1c(%ebp)
f011532b:	e8 b4 ef fe ff       	call   f01042e4 <env_page_ws_get_size>
f0115330:	83 c4 10             	add    $0x10,%esp
f0115333:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0115336:	e8 83 50 ff ff       	call   f010a3be <sys_calculate_free_frames>
f011533b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011533e:	e8 3e 65 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115343:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115346:	a1 ec 96 61 f0       	mov    0xf06196ec,%eax
f011534b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011534e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0115351:	74 17                	je     f011536a <test_three_creation_functions+0x140>
f0115353:	83 ec 04             	sub    $0x4,%esp
f0115356:	68 88 b1 11 f0       	push   $0xf011b188
f011535b:	68 7a 07 00 00       	push   $0x77a
f0115360:	68 76 b1 11 f0       	push   $0xf011b176
f0115365:	e8 0c ae fe ff       	call   f0100176 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011536a:	a1 f0 96 61 f0       	mov    0xf06196f0,%eax
f011536f:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0115372:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115375:	83 c2 15             	add    $0x15,%edx
f0115378:	39 d0                	cmp    %edx,%eax
f011537a:	74 17                	je     f0115393 <test_three_creation_functions+0x169>
f011537c:	83 ec 04             	sub    $0x4,%esp
f011537f:	68 f0 b1 11 f0       	push   $0xf011b1f0
f0115384:	68 7c 07 00 00       	push   $0x77c
f0115389:	68 76 b1 11 f0       	push   $0xf011b176
f011538e:	e8 e3 ad fe ff       	call   f0100176 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0115393:	83 ec 0c             	sub    $0xc,%esp
f0115396:	68 00 10 00 00       	push   $0x1000
f011539b:	e8 86 6a ff ff       	call   f010be26 <kmalloc>
f01153a0:	83 c4 10             	add    $0x10,%esp
f01153a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f01153a6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01153ad:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01153b2:	0f b6 d0             	movzbl %al,%edx
f01153b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153b8:	01 d0                	add    %edx,%eax
f01153ba:	48                   	dec    %eax
f01153bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01153be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01153c6:	f7 75 cc             	divl   -0x34(%ebp)
f01153c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153cc:	29 d0                	sub    %edx,%eax
f01153ce:	89 c1                	mov    %eax,%ecx
f01153d0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01153d7:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01153dc:	0f b6 c0             	movzbl %al,%eax
f01153df:	c1 e0 04             	shl    $0x4,%eax
f01153e2:	89 c2                	mov    %eax,%edx
f01153e4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01153e7:	01 d0                	add    %edx,%eax
f01153e9:	48                   	dec    %eax
f01153ea:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01153ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01153f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01153f5:	f7 75 c4             	divl   -0x3c(%ebp)
f01153f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01153fb:	29 d0                	sub    %edx,%eax
f01153fd:	01 c8                	add    %ecx,%eax
f01153ff:	8d 90 00 50 01 f6    	lea    -0x9feb000(%eax),%edx
f0115405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115408:	39 c2                	cmp    %eax,%edx
f011540a:	74 17                	je     f0115423 <test_three_creation_functions+0x1f9>
f011540c:	83 ec 04             	sub    $0x4,%esp
f011540f:	68 70 bb 11 f0       	push   $0xf011bb70
f0115414:	68 80 07 00 00       	push   $0x780
f0115419:	68 76 b1 11 f0       	push   $0xf011b176
f011541e:	e8 53 ad fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nCongratulations!! the 3 creation functions test has completed successfully.\n");
f0115423:	83 ec 0c             	sub    $0xc,%esp
f0115426:	68 e0 bb 11 f0       	push   $0xf011bbe0
f011542b:	e8 66 19 ff ff       	call   f0106d96 <cprintf>
f0115430:	83 c4 10             	add    $0x10,%esp

	return 1;
f0115433:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115438:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011543b:	5b                   	pop    %ebx
f011543c:	5e                   	pop    %esi
f011543d:	5f                   	pop    %edi
f011543e:	5d                   	pop    %ebp
f011543f:	c3                   	ret    

f0115440 <schenv>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void schenv()
{
f0115440:	55                   	push   %ebp
f0115441:	89 e5                	mov    %esp,%ebp
f0115443:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0115446:	c6 05 74 32 53 f0 00 	movb   $0x0,0xf0533274
	__ne = NULL;
f011544d:	c7 05 40 32 53 f0 00 	movl   $0x0,0xf0533240
f0115454:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0115457:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011545e:	eb 3f                	jmp    f011549f <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0115460:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0115465:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115468:	c1 e2 04             	shl    $0x4,%edx
f011546b:	01 d0                	add    %edx,%eax
f011546d:	83 ec 0c             	sub    $0xc,%esp
f0115470:	50                   	push   %eax
f0115471:	e8 6f 34 ff ff       	call   f01088e5 <queue_size>
f0115476:	83 c4 10             	add    $0x10,%esp
f0115479:	85 c0                	test   %eax,%eax
f011547b:	74 1f                	je     f011549c <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f011547d:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0115482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115485:	c1 e2 04             	shl    $0x4,%edx
f0115488:	01 d0                	add    %edx,%eax
f011548a:	8b 40 04             	mov    0x4(%eax),%eax
f011548d:	a3 40 32 53 f0       	mov    %eax,0xf0533240
			__nl = i;
f0115492:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115495:	a2 74 32 53 f0       	mov    %al,0xf0533274
			break;
f011549a:	eb 10                	jmp    f01154ac <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f011549c:	ff 45 f4             	incl   -0xc(%ebp)
f011549f:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01154a4:	0f b6 c0             	movzbl %al,%eax
f01154a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01154aa:	7f b4                	jg     f0115460 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f01154ac:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01154b1:	85 c0                	test   %eax,%eax
f01154b3:	0f 84 86 00 00 00    	je     f011553f <schenv+0xff>
	{
		if (__ne != NULL)
f01154b9:	a1 40 32 53 f0       	mov    0xf0533240,%eax
f01154be:	85 c0                	test   %eax,%eax
f01154c0:	74 4b                	je     f011550d <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01154c2:	a0 14 32 53 f0       	mov    0xf0533214,%al
f01154c7:	0f b6 c0             	movzbl %al,%eax
f01154ca:	8d 50 01             	lea    0x1(%eax),%edx
f01154cd:	a0 74 32 53 f0       	mov    0xf0533274,%al
f01154d2:	0f b6 c0             	movzbl %al,%eax
f01154d5:	39 c2                	cmp    %eax,%edx
f01154d7:	7d 66                	jge    f011553f <schenv+0xff>
			{
				__ne = curenv;
f01154d9:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f01154de:	a3 40 32 53 f0       	mov    %eax,0xf0533240
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01154e3:	a0 14 32 53 f0       	mov    0xf0533214,%al
f01154e8:	0f b6 c0             	movzbl %al,%eax
f01154eb:	8a 15 64 32 53 f0    	mov    0xf0533264,%dl
f01154f1:	0f b6 d2             	movzbl %dl,%edx
f01154f4:	4a                   	dec    %edx
f01154f5:	39 d0                	cmp    %edx,%eax
f01154f7:	7d 08                	jge    f0115501 <schenv+0xc1>
f01154f9:	a0 14 32 53 f0       	mov    0xf0533214,%al
f01154fe:	40                   	inc    %eax
f01154ff:	eb 05                	jmp    f0115506 <schenv+0xc6>
f0115501:	a0 14 32 53 f0       	mov    0xf0533214,%al
f0115506:	a2 74 32 53 f0       	mov    %al,0xf0533274
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f011550b:	eb 32                	jmp    f011553f <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f011550d:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f0115512:	a3 40 32 53 f0       	mov    %eax,0xf0533240
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0115517:	a0 14 32 53 f0       	mov    0xf0533214,%al
f011551c:	0f b6 c0             	movzbl %al,%eax
f011551f:	8a 15 64 32 53 f0    	mov    0xf0533264,%dl
f0115525:	0f b6 d2             	movzbl %dl,%edx
f0115528:	4a                   	dec    %edx
f0115529:	39 d0                	cmp    %edx,%eax
f011552b:	7d 08                	jge    f0115535 <schenv+0xf5>
f011552d:	a0 14 32 53 f0       	mov    0xf0533214,%al
f0115532:	40                   	inc    %eax
f0115533:	eb 05                	jmp    f011553a <schenv+0xfa>
f0115535:	a0 14 32 53 f0       	mov    0xf0533214,%al
f011553a:	a2 74 32 53 f0       	mov    %al,0xf0533274
		}
	}
}
f011553f:	90                   	nop
f0115540:	c9                   	leave  
f0115541:	c3                   	ret    

f0115542 <chksch>:

void chksch(uint8 onoff)
{
f0115542:	55                   	push   %ebp
f0115543:	89 e5                	mov    %esp,%ebp
f0115545:	83 ec 04             	sub    $0x4,%esp
f0115548:	8b 45 08             	mov    0x8(%ebp),%eax
f011554b:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f011554e:	c7 05 70 32 53 f0 00 	movl   $0x0,0xf0533270
f0115555:	00 00 00 
	__ne = NULL;
f0115558:	c7 05 40 32 53 f0 00 	movl   $0x0,0xf0533240
f011555f:	00 00 00 
	__pl = 0 ;
f0115562:	c6 05 14 32 53 f0 00 	movb   $0x0,0xf0533214
	__nl = 0 ;
f0115569:	c6 05 74 32 53 f0 00 	movb   $0x0,0xf0533274
	__chkstatus = onoff;
f0115570:	8a 45 fc             	mov    -0x4(%ebp),%al
f0115573:	a2 3c 32 53 f0       	mov    %al,0xf053323c
}
f0115578:	90                   	nop
f0115579:	c9                   	leave  
f011557a:	c3                   	ret    

f011557b <chk1>:
void chk1()
{
f011557b:	55                   	push   %ebp
f011557c:	89 e5                	mov    %esp,%ebp
f011557e:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0115581:	a0 3c 32 53 f0       	mov    0xf053323c,%al
f0115586:	84 c0                	test   %al,%al
f0115588:	74 2b                	je     f01155b5 <chk1+0x3a>
		return ;
	__pe = curenv;
f011558a:	a1 50 29 53 f0       	mov    0xf0532950,%eax
f011558f:	a3 70 32 53 f0       	mov    %eax,0xf0533270
	__pl = __nl ;
f0115594:	a0 74 32 53 f0       	mov    0xf0533274,%al
f0115599:	a2 14 32 53 f0       	mov    %al,0xf0533214
	if (__pe == NULL)
f011559e:	a1 70 32 53 f0       	mov    0xf0533270,%eax
f01155a3:	85 c0                	test   %eax,%eax
f01155a5:	75 07                	jne    f01155ae <chk1+0x33>
	{
		__pl = 0;
f01155a7:	c6 05 14 32 53 f0 00 	movb   $0x0,0xf0533214
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f01155ae:	e8 8d fe ff ff       	call   f0115440 <schenv>
f01155b3:	eb 01                	jmp    f01155b6 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f01155b5:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f01155b6:	c9                   	leave  
f01155b7:	c3                   	ret    

f01155b8 <chk2>:
void chk2(struct Env* __se)
{
f01155b8:	55                   	push   %ebp
f01155b9:	89 e5                	mov    %esp,%ebp
f01155bb:	53                   	push   %ebx
f01155bc:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01155bf:	a0 3c 32 53 f0       	mov    0xf053323c,%al
f01155c4:	84 c0                	test   %al,%al
f01155c6:	0f 84 19 02 00 00    	je     f01157e5 <chk2+0x22d>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01155cc:	a1 40 32 53 f0       	mov    0xf0533240,%eax
f01155d1:	39 45 08             	cmp    %eax,0x8(%ebp)
f01155d4:	74 16                	je     f01155ec <chk2+0x34>
f01155d6:	68 94 bc 11 f0       	push   $0xf011bc94
f01155db:	68 a1 bc 11 f0       	push   $0xf011bca1
f01155e0:	6a 4b                	push   $0x4b
f01155e2:	68 b6 bc 11 f0       	push   $0xf011bcb6
f01155e7:	e8 f9 ab fe ff       	call   f01001e5 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01155ec:	a1 40 32 53 f0       	mov    0xf0533240,%eax
f01155f1:	85 c0                	test   %eax,%eax
f01155f3:	0f 84 04 01 00 00    	je     f01156fd <chk2+0x145>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01155f9:	8b 15 34 32 53 f0    	mov    0xf0533234,%edx
f01155ff:	a0 74 32 53 f0       	mov    0xf0533274,%al
f0115604:	0f b6 c0             	movzbl %al,%eax
f0115607:	01 d0                	add    %edx,%eax
f0115609:	8a 00                	mov    (%eax),%al
f011560b:	0f b6 d8             	movzbl %al,%ebx
f011560e:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0115613:	99                   	cltd   
f0115614:	f7 fb                	idiv   %ebx
f0115616:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f011561c:	8b 15 34 32 53 f0    	mov    0xf0533234,%edx
f0115622:	a0 74 32 53 f0       	mov    0xf0533274,%al
f0115627:	0f b6 c0             	movzbl %al,%eax
f011562a:	01 d0                	add    %edx,%eax
f011562c:	8a 00                	mov    (%eax),%al
f011562e:	0f b6 d8             	movzbl %al,%ebx
f0115631:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0115636:	99                   	cltd   
f0115637:	f7 fb                	idiv   %ebx
f0115639:	89 c3                	mov    %eax,%ebx
f011563b:	89 c8                	mov    %ecx,%eax
f011563d:	99                   	cltd   
f011563e:	f7 fb                	idiv   %ebx
f0115640:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0115644:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0115648:	89 d0                	mov    %edx,%eax
f011564a:	c1 e0 02             	shl    $0x2,%eax
f011564d:	01 d0                	add    %edx,%eax
f011564f:	01 c0                	add    %eax,%eax
f0115651:	01 d0                	add    %edx,%eax
f0115653:	c1 e0 02             	shl    $0x2,%eax
f0115656:	01 d0                	add    %edx,%eax
f0115658:	01 c0                	add    %eax,%eax
f011565a:	89 c1                	mov    %eax,%ecx
f011565c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0115661:	f7 e9                	imul   %ecx
f0115663:	c1 fa 05             	sar    $0x5,%edx
f0115666:	89 c8                	mov    %ecx,%eax
f0115668:	c1 f8 1f             	sar    $0x1f,%eax
f011566b:	29 c2                	sub    %eax,%edx
f011566d:	89 d0                	mov    %edx,%eax
f011566f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0_latch();
f0115673:	e8 c8 14 ff ff       	call   f0106b40 <kclock_read_cnt0_latch>
f0115678:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f011567c:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0115680:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0115684:	76 0a                	jbe    f0115690 <chk2+0xd8>
f0115686:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011568a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011568e:	76 16                	jbe    f01156a6 <chk2+0xee>
f0115690:	68 c8 bc 11 f0       	push   $0xf011bcc8
f0115695:	68 a1 bc 11 f0       	push   $0xf011bca1
f011569a:	6a 54                	push   $0x54
f011569c:	68 b6 bc 11 f0       	push   $0xf011bcb6
f01156a1:	e8 3f ab fe ff       	call   f01001e5 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01156a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01156ad:	eb 41                	jmp    f01156f0 <chk2+0x138>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01156af:	a1 40 32 53 f0       	mov    0xf0533240,%eax
f01156b4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01156b7:	89 c2                	mov    %eax,%edx
f01156b9:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01156be:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01156c1:	c1 e1 04             	shl    $0x4,%ecx
f01156c4:	01 c8                	add    %ecx,%eax
f01156c6:	83 ec 08             	sub    $0x8,%esp
f01156c9:	52                   	push   %edx
f01156ca:	50                   	push   %eax
f01156cb:	e8 8b 33 ff ff       	call   f0108a5b <find_env_in_queue>
f01156d0:	83 c4 10             	add    $0x10,%esp
f01156d3:	85 c0                	test   %eax,%eax
f01156d5:	74 16                	je     f01156ed <chk2+0x135>
f01156d7:	68 ec bc 11 f0       	push   $0xf011bcec
f01156dc:	68 a1 bc 11 f0       	push   $0xf011bca1
f01156e1:	6a 58                	push   $0x58
f01156e3:	68 b6 bc 11 f0       	push   $0xf011bcb6
f01156e8:	e8 f8 aa fe ff       	call   f01001e5 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0_latch();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01156ed:	ff 45 f4             	incl   -0xc(%ebp)
f01156f0:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01156f5:	0f b6 c0             	movzbl %al,%eax
f01156f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01156fb:	7f b2                	jg     f01156af <chk2+0xf7>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01156fd:	a1 70 32 53 f0       	mov    0xf0533270,%eax
f0115702:	85 c0                	test   %eax,%eax
f0115704:	0f 84 dc 00 00 00    	je     f01157e6 <chk2+0x22e>
f011570a:	8b 15 70 32 53 f0    	mov    0xf0533270,%edx
f0115710:	a1 40 32 53 f0       	mov    0xf0533240,%eax
f0115715:	39 c2                	cmp    %eax,%edx
f0115717:	0f 84 c9 00 00 00    	je     f01157e6 <chk2+0x22e>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f011571d:	a0 14 32 53 f0       	mov    0xf0533214,%al
f0115722:	0f b6 c0             	movzbl %al,%eax
f0115725:	8a 15 64 32 53 f0    	mov    0xf0533264,%dl
f011572b:	0f b6 d2             	movzbl %dl,%edx
f011572e:	4a                   	dec    %edx
f011572f:	39 d0                	cmp    %edx,%eax
f0115731:	74 08                	je     f011573b <chk2+0x183>
f0115733:	a0 14 32 53 f0       	mov    0xf0533214,%al
f0115738:	40                   	inc    %eax
f0115739:	eb 05                	jmp    f0115740 <chk2+0x188>
f011573b:	a0 14 32 53 f0       	mov    0xf0533214,%al
f0115740:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0115743:	a1 70 32 53 f0       	mov    0xf0533270,%eax
f0115748:	8b 40 4c             	mov    0x4c(%eax),%eax
f011574b:	89 c2                	mov    %eax,%edx
f011574d:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f0115752:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0115756:	c1 e1 04             	shl    $0x4,%ecx
f0115759:	01 c8                	add    %ecx,%eax
f011575b:	83 ec 08             	sub    $0x8,%esp
f011575e:	52                   	push   %edx
f011575f:	50                   	push   %eax
f0115760:	e8 f6 32 ff ff       	call   f0108a5b <find_env_in_queue>
f0115765:	83 c4 10             	add    $0x10,%esp
f0115768:	85 c0                	test   %eax,%eax
f011576a:	75 16                	jne    f0115782 <chk2+0x1ca>
f011576c:	68 2c bd 11 f0       	push   $0xf011bd2c
f0115771:	68 a1 bc 11 f0       	push   $0xf011bca1
f0115776:	6a 5e                	push   $0x5e
f0115778:	68 b6 bc 11 f0       	push   $0xf011bcb6
f011577d:	e8 63 aa fe ff       	call   f01001e5 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0115782:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115789:	eb 4b                	jmp    f01157d6 <chk2+0x21e>
		{
			if (i == __tl) continue;
f011578b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011578f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115792:	74 3e                	je     f01157d2 <chk2+0x21a>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0115794:	a1 70 32 53 f0       	mov    0xf0533270,%eax
f0115799:	8b 40 4c             	mov    0x4c(%eax),%eax
f011579c:	89 c2                	mov    %eax,%edx
f011579e:	a1 18 32 53 f0       	mov    0xf0533218,%eax
f01157a3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01157a6:	c1 e1 04             	shl    $0x4,%ecx
f01157a9:	01 c8                	add    %ecx,%eax
f01157ab:	83 ec 08             	sub    $0x8,%esp
f01157ae:	52                   	push   %edx
f01157af:	50                   	push   %eax
f01157b0:	e8 a6 32 ff ff       	call   f0108a5b <find_env_in_queue>
f01157b5:	83 c4 10             	add    $0x10,%esp
f01157b8:	85 c0                	test   %eax,%eax
f01157ba:	74 17                	je     f01157d3 <chk2+0x21b>
f01157bc:	68 70 bd 11 f0       	push   $0xf011bd70
f01157c1:	68 a1 bc 11 f0       	push   $0xf011bca1
f01157c6:	6a 62                	push   $0x62
f01157c8:	68 b6 bc 11 f0       	push   $0xf011bcb6
f01157cd:	e8 13 aa fe ff       	call   f01001e5 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f01157d2:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f01157d3:	ff 45 f0             	incl   -0x10(%ebp)
f01157d6:	a0 64 32 53 f0       	mov    0xf0533264,%al
f01157db:	0f b6 c0             	movzbl %al,%eax
f01157de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01157e1:	7f a8                	jg     f011578b <chk2+0x1d3>
f01157e3:	eb 01                	jmp    f01157e6 <chk2+0x22e>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01157e5:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01157e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01157e9:	c9                   	leave  
f01157ea:	c3                   	ret    

f01157eb <set_program_priority>:
#include <kern/priority_manager.h>
#include <inc/assert.h>
#include <kern/helpers.h>
#include <kern/user_environment.h>

void set_program_priority(struct Env* env, int priority) {
f01157eb:	55                   	push   %ebp
f01157ec:	89 e5                	mov    %esp,%ebp
f01157ee:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority�

	panic("This function is not implemented yet\n");
f01157f1:	83 ec 04             	sub    $0x4,%esp
f01157f4:	68 b0 bd 11 f0       	push   $0xf011bdb0
f01157f9:	6a 0a                	push   $0xa
f01157fb:	68 d6 bd 11 f0       	push   $0xf011bdd6
f0115800:	e8 71 a9 fe ff       	call   f0100176 <_panic>

f0115805 <test_priority_normal_and_higher>:
extern int pf_calculate_free_frames() ;
extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115805:	55                   	push   %ebp
f0115806:	89 e5                	mov    %esp,%ebp
f0115808:	57                   	push   %edi
f0115809:	56                   	push   %esi
f011580a:	53                   	push   %ebx
f011580b:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115811:	a0 3d ea 14 f0       	mov    0xf014ea3d,%al
f0115816:	84 c0                	test   %al,%al
f0115818:	0f 84 b7 09 00 00    	je     f01161d5 <test_priority_normal_and_higher+0x9d0>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f011581e:	c6 05 3d ea 14 f0 00 	movb   $0x0,0xf014ea3d
		char command[100] = "load fos_add 20";
f0115825:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011582b:	bb 4c c0 11 f0       	mov    $0xf011c04c,%ebx
f0115830:	ba 04 00 00 00       	mov    $0x4,%edx
f0115835:	89 c7                	mov    %eax,%edi
f0115837:	89 de                	mov    %ebx,%esi
f0115839:	89 d1                	mov    %edx,%ecx
f011583b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011583d:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115843:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115848:	b8 00 00 00 00       	mov    $0x0,%eax
f011584d:	89 d7                	mov    %edx,%edi
f011584f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115851:	83 ec 0c             	sub    $0xc,%esp
f0115854:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011585a:	50                   	push   %eax
f011585b:	e8 e9 bf fe ff       	call   f0101849 <execute_command>
f0115860:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115863:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115869:	bb b0 c0 11 f0       	mov    $0xf011c0b0,%ebx
f011586e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115873:	89 c7                	mov    %eax,%edi
f0115875:	89 de                	mov    %ebx,%esi
f0115877:	89 d1                	mov    %edx,%ecx
f0115879:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011587b:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115881:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115886:	b0 00                	mov    $0x0,%al
f0115888:	89 d7                	mov    %edx,%edi
f011588a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011588c:	83 ec 0c             	sub    $0xc,%esp
f011588f:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115895:	50                   	push   %eax
f0115896:	e8 ae bf fe ff       	call   f0101849 <execute_command>
f011589b:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011589e:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01158a4:	bb 14 c1 11 f0       	mov    $0xf011c114,%ebx
f01158a9:	ba 17 00 00 00       	mov    $0x17,%edx
f01158ae:	89 c7                	mov    %eax,%edi
f01158b0:	89 de                	mov    %ebx,%esi
f01158b2:	89 d1                	mov    %edx,%ecx
f01158b4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01158b6:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f01158bc:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01158c1:	b0 00                	mov    $0x0,%al
f01158c3:	89 d7                	mov    %edx,%edi
f01158c5:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01158c7:	83 ec 0c             	sub    $0xc,%esp
f01158ca:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01158d0:	50                   	push   %eax
f01158d1:	e8 73 bf fe ff       	call   f0101849 <execute_command>
f01158d6:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01158d9:	83 ec 04             	sub    $0x4,%esp
f01158dc:	6a 00                	push   $0x0
f01158de:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01158e1:	50                   	push   %eax
f01158e2:	68 00 10 00 00       	push   $0x1000
f01158e7:	e8 c6 d7 fe ff       	call   f01030b2 <envid2env>
f01158ec:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01158ef:	83 ec 04             	sub    $0x4,%esp
f01158f2:	6a 00                	push   $0x0
f01158f4:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01158f7:	50                   	push   %eax
f01158f8:	68 01 10 00 00       	push   $0x1001
f01158fd:	e8 b0 d7 fe ff       	call   f01030b2 <envid2env>
f0115902:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115905:	83 ec 04             	sub    $0x4,%esp
f0115908:	6a 00                	push   $0x0
f011590a:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011590d:	50                   	push   %eax
f011590e:	68 02 10 00 00       	push   $0x1002
f0115913:	e8 9a d7 fe ff       	call   f01030b2 <envid2env>
f0115918:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011591b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011591e:	85 c0                	test   %eax,%eax
f0115920:	74 0e                	je     f0115930 <test_priority_normal_and_higher+0x12b>
f0115922:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115925:	85 c0                	test   %eax,%eax
f0115927:	74 07                	je     f0115930 <test_priority_normal_and_higher+0x12b>
f0115929:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011592c:	85 c0                	test   %eax,%eax
f011592e:	75 14                	jne    f0115944 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115930:	83 ec 04             	sub    $0x4,%esp
f0115933:	68 f0 bd 11 f0       	push   $0xf011bdf0
f0115938:	6a 27                	push   $0x27
f011593a:	68 09 be 11 f0       	push   $0xf011be09
f011593f:	e8 32 a8 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115944:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115947:	8b 40 74             	mov    0x74(%eax),%eax
f011594a:	83 f8 14             	cmp    $0x14,%eax
f011594d:	75 16                	jne    f0115965 <test_priority_normal_and_higher+0x160>
f011594f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115952:	8b 40 74             	mov    0x74(%eax),%eax
f0115955:	83 f8 0f             	cmp    $0xf,%eax
f0115958:	75 0b                	jne    f0115965 <test_priority_normal_and_higher+0x160>
f011595a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011595d:	8b 40 74             	mov    0x74(%eax),%eax
f0115960:	83 f8 0a             	cmp    $0xa,%eax
f0115963:	74 14                	je     f0115979 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115965:	83 ec 04             	sub    $0x4,%esp
f0115968:	68 20 be 11 f0       	push   $0xf011be20
f011596d:	6a 2a                	push   $0x2a
f011596f:	68 09 be 11 f0       	push   $0xf011be09
f0115974:	e8 fd a7 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0115979:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115980:	eb 44                	jmp    f01159c6 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115982:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115985:	8b 48 78             	mov    0x78(%eax),%ecx
f0115988:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011598b:	89 d0                	mov    %edx,%eax
f011598d:	01 c0                	add    %eax,%eax
f011598f:	01 d0                	add    %edx,%eax
f0115991:	c1 e0 02             	shl    $0x2,%eax
f0115994:	01 c8                	add    %ecx,%eax
f0115996:	8b 10                	mov    (%eax),%edx
f0115998:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011599b:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01159a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01159a5:	8b 48 78             	mov    0x78(%eax),%ecx
f01159a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01159ab:	89 d0                	mov    %edx,%eax
f01159ad:	01 c0                	add    %eax,%eax
f01159af:	01 d0                	add    %edx,%eax
f01159b1:	c1 e0 02             	shl    $0x2,%eax
f01159b4:	01 c8                	add    %ecx,%eax
f01159b6:	8b 50 08             	mov    0x8(%eax),%edx
f01159b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01159bc:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01159c3:	ff 45 e4             	incl   -0x1c(%ebp)
f01159c6:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01159ca:	7e b6                	jle    f0115982 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01159cc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01159d3:	eb 44                	jmp    f0115a19 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01159d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159d8:	8b 48 78             	mov    0x78(%eax),%ecx
f01159db:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01159de:	89 d0                	mov    %edx,%eax
f01159e0:	01 c0                	add    %eax,%eax
f01159e2:	01 d0                	add    %edx,%eax
f01159e4:	c1 e0 02             	shl    $0x2,%eax
f01159e7:	01 c8                	add    %ecx,%eax
f01159e9:	8b 10                	mov    (%eax),%edx
f01159eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01159ee:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01159f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01159fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01159fe:	89 d0                	mov    %edx,%eax
f0115a00:	01 c0                	add    %eax,%eax
f0115a02:	01 d0                	add    %edx,%eax
f0115a04:	c1 e0 02             	shl    $0x2,%eax
f0115a07:	01 c8                	add    %ecx,%eax
f0115a09:	8b 50 08             	mov    0x8(%eax),%edx
f0115a0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115a0f:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115a16:	ff 45 e0             	incl   -0x20(%ebp)
f0115a19:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115a1d:	7e b6                	jle    f01159d5 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115a1f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115a26:	eb 44                	jmp    f0115a6c <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115a28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a2b:	8b 48 78             	mov    0x78(%eax),%ecx
f0115a2e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115a31:	89 d0                	mov    %edx,%eax
f0115a33:	01 c0                	add    %eax,%eax
f0115a35:	01 d0                	add    %edx,%eax
f0115a37:	c1 e0 02             	shl    $0x2,%eax
f0115a3a:	01 c8                	add    %ecx,%eax
f0115a3c:	8b 10                	mov    (%eax),%edx
f0115a3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a41:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115a48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a4b:	8b 48 78             	mov    0x78(%eax),%ecx
f0115a4e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115a51:	89 d0                	mov    %edx,%eax
f0115a53:	01 c0                	add    %eax,%eax
f0115a55:	01 d0                	add    %edx,%eax
f0115a57:	c1 e0 02             	shl    $0x2,%eax
f0115a5a:	01 c8                	add    %ecx,%eax
f0115a5c:	8b 50 08             	mov    0x8(%eax),%edx
f0115a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a62:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115a69:	ff 45 dc             	incl   -0x24(%ebp)
f0115a6c:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115a70:	7e b6                	jle    f0115a28 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115a72:	e8 47 49 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115a77:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115a7a:	e8 02 5e ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115a7f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115a82:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a85:	83 ec 08             	sub    $0x8,%esp
f0115a88:	6a 03                	push   $0x3
f0115a8a:	50                   	push   %eax
f0115a8b:	e8 5b fd ff ff       	call   f01157eb <set_program_priority>
f0115a90:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115a93:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a96:	83 ec 08             	sub    $0x8,%esp
f0115a99:	6a 03                	push   $0x3
f0115a9b:	50                   	push   %eax
f0115a9c:	e8 4a fd ff ff       	call   f01157eb <set_program_priority>
f0115aa1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115aa4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115aa7:	83 ec 08             	sub    $0x8,%esp
f0115aaa:	6a 03                	push   $0x3
f0115aac:	50                   	push   %eax
f0115aad:	e8 39 fd ff ff       	call   f01157eb <set_program_priority>
f0115ab2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115ab5:	e8 c7 5d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115aba:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115abd:	74 14                	je     f0115ad3 <test_priority_normal_and_higher+0x2ce>
f0115abf:	83 ec 04             	sub    $0x4,%esp
f0115ac2:	68 6c be 11 f0       	push   $0xf011be6c
f0115ac7:	6a 46                	push   $0x46
f0115ac9:	68 09 be 11 f0       	push   $0xf011be09
f0115ace:	e8 a3 a6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115ad3:	e8 e6 48 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115ad8:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115adb:	74 14                	je     f0115af1 <test_priority_normal_and_higher+0x2ec>
f0115add:	83 ec 04             	sub    $0x4,%esp
f0115ae0:	68 6c be 11 f0       	push   $0xf011be6c
f0115ae5:	6a 47                	push   $0x47
f0115ae7:	68 09 be 11 f0       	push   $0xf011be09
f0115aec:	e8 85 a6 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115af1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115af4:	8b 40 74             	mov    0x74(%eax),%eax
f0115af7:	83 f8 14             	cmp    $0x14,%eax
f0115afa:	75 16                	jne    f0115b12 <test_priority_normal_and_higher+0x30d>
f0115afc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115aff:	8b 40 74             	mov    0x74(%eax),%eax
f0115b02:	83 f8 0f             	cmp    $0xf,%eax
f0115b05:	75 0b                	jne    f0115b12 <test_priority_normal_and_higher+0x30d>
f0115b07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b0a:	8b 40 74             	mov    0x74(%eax),%eax
f0115b0d:	83 f8 0a             	cmp    $0xa,%eax
f0115b10:	74 14                	je     f0115b26 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115b12:	83 ec 04             	sub    $0x4,%esp
f0115b15:	68 98 be 11 f0       	push   $0xf011be98
f0115b1a:	6a 4a                	push   $0x4a
f0115b1c:	68 09 be 11 f0       	push   $0xf011be09
f0115b21:	e8 50 a6 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115b26:	e8 93 48 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115b2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115b2e:	e8 4e 5d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115b33:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115b36:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b39:	83 ec 08             	sub    $0x8,%esp
f0115b3c:	6a 04                	push   $0x4
f0115b3e:	50                   	push   %eax
f0115b3f:	e8 a7 fc ff ff       	call   f01157eb <set_program_priority>
f0115b44:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115b47:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b4a:	83 ec 08             	sub    $0x8,%esp
f0115b4d:	6a 04                	push   $0x4
f0115b4f:	50                   	push   %eax
f0115b50:	e8 96 fc ff ff       	call   f01157eb <set_program_priority>
f0115b55:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115b58:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b5b:	83 ec 08             	sub    $0x8,%esp
f0115b5e:	6a 04                	push   $0x4
f0115b60:	50                   	push   %eax
f0115b61:	e8 85 fc ff ff       	call   f01157eb <set_program_priority>
f0115b66:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115b69:	e8 13 5d ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115b6e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115b71:	74 14                	je     f0115b87 <test_priority_normal_and_higher+0x382>
f0115b73:	83 ec 04             	sub    $0x4,%esp
f0115b76:	68 6c be 11 f0       	push   $0xf011be6c
f0115b7b:	6a 54                	push   $0x54
f0115b7d:	68 09 be 11 f0       	push   $0xf011be09
f0115b82:	e8 ef a5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115b87:	e8 32 48 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115b8c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115b8f:	74 14                	je     f0115ba5 <test_priority_normal_and_higher+0x3a0>
f0115b91:	83 ec 04             	sub    $0x4,%esp
f0115b94:	68 ec be 11 f0       	push   $0xf011beec
f0115b99:	6a 55                	push   $0x55
f0115b9b:	68 09 be 11 f0       	push   $0xf011be09
f0115ba0:	e8 d1 a5 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115ba5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ba8:	8b 40 74             	mov    0x74(%eax),%eax
f0115bab:	83 f8 14             	cmp    $0x14,%eax
f0115bae:	75 16                	jne    f0115bc6 <test_priority_normal_and_higher+0x3c1>
f0115bb0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115bb3:	8b 40 74             	mov    0x74(%eax),%eax
f0115bb6:	83 f8 0f             	cmp    $0xf,%eax
f0115bb9:	75 0b                	jne    f0115bc6 <test_priority_normal_and_higher+0x3c1>
f0115bbb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bbe:	8b 40 74             	mov    0x74(%eax),%eax
f0115bc1:	83 f8 14             	cmp    $0x14,%eax
f0115bc4:	74 14                	je     f0115bda <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115bc6:	83 ec 04             	sub    $0x4,%esp
f0115bc9:	68 1c bf 11 f0       	push   $0xf011bf1c
f0115bce:	6a 58                	push   $0x58
f0115bd0:	68 09 be 11 f0       	push   $0xf011be09
f0115bd5:	e8 9c a5 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115bda:	e8 df 47 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115bdf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115be2:	e8 9a 5c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115be7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115bea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bed:	83 ec 08             	sub    $0x8,%esp
f0115bf0:	6a 04                	push   $0x4
f0115bf2:	50                   	push   %eax
f0115bf3:	e8 f3 fb ff ff       	call   f01157eb <set_program_priority>
f0115bf8:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115bfb:	e8 81 5c ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115c00:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115c03:	74 14                	je     f0115c19 <test_priority_normal_and_higher+0x414>
f0115c05:	83 ec 04             	sub    $0x4,%esp
f0115c08:	68 6c be 11 f0       	push   $0xf011be6c
f0115c0d:	6a 60                	push   $0x60
f0115c0f:	68 09 be 11 f0       	push   $0xf011be09
f0115c14:	e8 5d a5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115c19:	e8 a0 47 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115c1e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115c21:	74 14                	je     f0115c37 <test_priority_normal_and_higher+0x432>
f0115c23:	83 ec 04             	sub    $0x4,%esp
f0115c26:	68 6c be 11 f0       	push   $0xf011be6c
f0115c2b:	6a 61                	push   $0x61
f0115c2d:	68 09 be 11 f0       	push   $0xf011be09
f0115c32:	e8 3f a5 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115c37:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115c3a:	8b 40 74             	mov    0x74(%eax),%eax
f0115c3d:	83 f8 14             	cmp    $0x14,%eax
f0115c40:	75 16                	jne    f0115c58 <test_priority_normal_and_higher+0x453>
f0115c42:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115c45:	8b 40 74             	mov    0x74(%eax),%eax
f0115c48:	83 f8 0f             	cmp    $0xf,%eax
f0115c4b:	75 0b                	jne    f0115c58 <test_priority_normal_and_higher+0x453>
f0115c4d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c50:	8b 40 74             	mov    0x74(%eax),%eax
f0115c53:	83 f8 14             	cmp    $0x14,%eax
f0115c56:	74 14                	je     f0115c6c <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0115c58:	83 ec 04             	sub    $0x4,%esp
f0115c5b:	68 64 bf 11 f0       	push   $0xf011bf64
f0115c60:	6a 64                	push   $0x64
f0115c62:	68 09 be 11 f0       	push   $0xf011be09
f0115c67:	e8 0a a5 fe ff       	call   f0100176 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115c6c:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115c73:	eb 1b                	jmp    f0115c90 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115c75:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c78:	8b 48 78             	mov    0x78(%eax),%ecx
f0115c7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115c7e:	89 d0                	mov    %edx,%eax
f0115c80:	01 c0                	add    %eax,%eax
f0115c82:	01 d0                	add    %edx,%eax
f0115c84:	c1 e0 02             	shl    $0x2,%eax
f0115c87:	01 c8                	add    %ecx,%eax
f0115c89:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115c8d:	ff 45 d8             	incl   -0x28(%ebp)
f0115c90:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115c94:	7e df                	jle    f0115c75 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115c96:	e8 23 47 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115c9b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115c9e:	e8 de 5b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115ca3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115ca6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ca9:	83 ec 08             	sub    $0x8,%esp
f0115cac:	6a 04                	push   $0x4
f0115cae:	50                   	push   %eax
f0115caf:	e8 37 fb ff ff       	call   f01157eb <set_program_priority>
f0115cb4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115cb7:	e8 c5 5b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115cbc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115cbf:	74 14                	je     f0115cd5 <test_priority_normal_and_higher+0x4d0>
f0115cc1:	83 ec 04             	sub    $0x4,%esp
f0115cc4:	68 6c be 11 f0       	push   $0xf011be6c
f0115cc9:	6a 71                	push   $0x71
f0115ccb:	68 09 be 11 f0       	push   $0xf011be09
f0115cd0:	e8 a1 a4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115cd5:	e8 e4 46 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115cda:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115cdd:	74 14                	je     f0115cf3 <test_priority_normal_and_higher+0x4ee>
f0115cdf:	83 ec 04             	sub    $0x4,%esp
f0115ce2:	68 6c be 11 f0       	push   $0xf011be6c
f0115ce7:	6a 72                	push   $0x72
f0115ce9:	68 09 be 11 f0       	push   $0xf011be09
f0115cee:	e8 83 a4 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115cf3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115cf6:	8b 40 74             	mov    0x74(%eax),%eax
f0115cf9:	83 f8 14             	cmp    $0x14,%eax
f0115cfc:	75 16                	jne    f0115d14 <test_priority_normal_and_higher+0x50f>
f0115cfe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d01:	8b 40 74             	mov    0x74(%eax),%eax
f0115d04:	83 f8 0f             	cmp    $0xf,%eax
f0115d07:	75 0b                	jne    f0115d14 <test_priority_normal_and_higher+0x50f>
f0115d09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d0c:	8b 40 74             	mov    0x74(%eax),%eax
f0115d0f:	83 f8 14             	cmp    $0x14,%eax
f0115d12:	74 14                	je     f0115d28 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0115d14:	83 ec 04             	sub    $0x4,%esp
f0115d17:	68 64 bf 11 f0       	push   $0xf011bf64
f0115d1c:	6a 75                	push   $0x75
f0115d1e:	68 09 be 11 f0       	push   $0xf011be09
f0115d23:	e8 4e a4 fe ff       	call   f0100176 <_panic>

		for(int i = 10; i < 15; i++)
f0115d28:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0115d2f:	eb 1b                	jmp    f0115d4c <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115d31:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d34:	8b 48 78             	mov    0x78(%eax),%ecx
f0115d37:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115d3a:	89 d0                	mov    %edx,%eax
f0115d3c:	01 c0                	add    %eax,%eax
f0115d3e:	01 d0                	add    %edx,%eax
f0115d40:	c1 e0 02             	shl    $0x2,%eax
f0115d43:	01 c8                	add    %ecx,%eax
f0115d45:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115d49:	ff 45 d4             	incl   -0x2c(%ebp)
f0115d4c:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0115d50:	7e df                	jle    f0115d31 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115d52:	e8 67 46 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115d57:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d5a:	e8 22 5b ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115d5f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115d62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d65:	83 ec 08             	sub    $0x8,%esp
f0115d68:	6a 05                	push   $0x5
f0115d6a:	50                   	push   %eax
f0115d6b:	e8 7b fa ff ff       	call   f01157eb <set_program_priority>
f0115d70:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0115d73:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d76:	83 ec 08             	sub    $0x8,%esp
f0115d79:	6a 05                	push   $0x5
f0115d7b:	50                   	push   %eax
f0115d7c:	e8 6a fa ff ff       	call   f01157eb <set_program_priority>
f0115d81:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115d84:	e8 f8 5a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115d89:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115d8c:	74 17                	je     f0115da5 <test_priority_normal_and_higher+0x5a0>
f0115d8e:	83 ec 04             	sub    $0x4,%esp
f0115d91:	68 6c be 11 f0       	push   $0xf011be6c
f0115d96:	68 80 00 00 00       	push   $0x80
f0115d9b:	68 09 be 11 f0       	push   $0xf011be09
f0115da0:	e8 d1 a3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115da5:	e8 14 46 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115daa:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115dad:	74 17                	je     f0115dc6 <test_priority_normal_and_higher+0x5c1>
f0115daf:	83 ec 04             	sub    $0x4,%esp
f0115db2:	68 6c be 11 f0       	push   $0xf011be6c
f0115db7:	68 81 00 00 00       	push   $0x81
f0115dbc:	68 09 be 11 f0       	push   $0xf011be09
f0115dc1:	e8 b0 a3 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115dc6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115dc9:	8b 40 74             	mov    0x74(%eax),%eax
f0115dcc:	83 f8 14             	cmp    $0x14,%eax
f0115dcf:	75 16                	jne    f0115de7 <test_priority_normal_and_higher+0x5e2>
f0115dd1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115dd4:	8b 40 74             	mov    0x74(%eax),%eax
f0115dd7:	83 f8 1e             	cmp    $0x1e,%eax
f0115dda:	75 0b                	jne    f0115de7 <test_priority_normal_and_higher+0x5e2>
f0115ddc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ddf:	8b 40 74             	mov    0x74(%eax),%eax
f0115de2:	83 f8 28             	cmp    $0x28,%eax
f0115de5:	74 17                	je     f0115dfe <test_priority_normal_and_higher+0x5f9>
			panic("The programs' working set size should be doubled if full\n");
f0115de7:	83 ec 04             	sub    $0x4,%esp
f0115dea:	68 a0 bf 11 f0       	push   $0xf011bfa0
f0115def:	68 84 00 00 00       	push   $0x84
f0115df4:	68 09 be 11 f0       	push   $0xf011be09
f0115df9:	e8 78 a3 fe ff       	call   f0100176 <_panic>

		for(int i = 20; i < 40; i++)
f0115dfe:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0115e05:	eb 1b                	jmp    f0115e22 <test_priority_normal_and_higher+0x61d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115e07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e0a:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e0d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115e10:	89 d0                	mov    %edx,%eax
f0115e12:	01 c0                	add    %eax,%eax
f0115e14:	01 d0                	add    %edx,%eax
f0115e16:	c1 e0 02             	shl    $0x2,%eax
f0115e19:	01 c8                	add    %ecx,%eax
f0115e1b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0115e1f:	ff 45 d0             	incl   -0x30(%ebp)
f0115e22:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0115e26:	7e df                	jle    f0115e07 <test_priority_normal_and_higher+0x602>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115e28:	e8 91 45 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115e2d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e30:	e8 4c 5a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115e35:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115e38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e3b:	83 ec 08             	sub    $0x8,%esp
f0115e3e:	6a 05                	push   $0x5
f0115e40:	50                   	push   %eax
f0115e41:	e8 a5 f9 ff ff       	call   f01157eb <set_program_priority>
f0115e46:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115e49:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e4c:	83 ec 08             	sub    $0x8,%esp
f0115e4f:	6a 04                	push   $0x4
f0115e51:	50                   	push   %eax
f0115e52:	e8 94 f9 ff ff       	call   f01157eb <set_program_priority>
f0115e57:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e5a:	e8 22 5a ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115e5f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115e62:	74 17                	je     f0115e7b <test_priority_normal_and_higher+0x676>
f0115e64:	83 ec 04             	sub    $0x4,%esp
f0115e67:	68 6c be 11 f0       	push   $0xf011be6c
f0115e6c:	68 8f 00 00 00       	push   $0x8f
f0115e71:	68 09 be 11 f0       	push   $0xf011be09
f0115e76:	e8 fb a2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115e7b:	e8 3e 45 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115e80:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115e83:	74 17                	je     f0115e9c <test_priority_normal_and_higher+0x697>
f0115e85:	83 ec 04             	sub    $0x4,%esp
f0115e88:	68 6c be 11 f0       	push   $0xf011be6c
f0115e8d:	68 90 00 00 00       	push   $0x90
f0115e92:	68 09 be 11 f0       	push   $0xf011be09
f0115e97:	e8 da a2 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115e9c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e9f:	8b 40 74             	mov    0x74(%eax),%eax
f0115ea2:	83 f8 14             	cmp    $0x14,%eax
f0115ea5:	75 16                	jne    f0115ebd <test_priority_normal_and_higher+0x6b8>
f0115ea7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115eaa:	8b 40 74             	mov    0x74(%eax),%eax
f0115ead:	83 f8 1e             	cmp    $0x1e,%eax
f0115eb0:	75 0b                	jne    f0115ebd <test_priority_normal_and_higher+0x6b8>
f0115eb2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115eb5:	8b 40 74             	mov    0x74(%eax),%eax
f0115eb8:	83 f8 28             	cmp    $0x28,%eax
f0115ebb:	74 17                	je     f0115ed4 <test_priority_normal_and_higher+0x6cf>
			panic("The programs' working set size should be doubled if full\n");
f0115ebd:	83 ec 04             	sub    $0x4,%esp
f0115ec0:	68 a0 bf 11 f0       	push   $0xf011bfa0
f0115ec5:	68 93 00 00 00       	push   $0x93
f0115eca:	68 09 be 11 f0       	push   $0xf011be09
f0115ecf:	e8 a2 a2 fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 30; i++)
f0115ed4:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0115edb:	eb 1b                	jmp    f0115ef8 <test_priority_normal_and_higher+0x6f3>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115edd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ee0:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ee3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115ee6:	89 d0                	mov    %edx,%eax
f0115ee8:	01 c0                	add    %eax,%eax
f0115eea:	01 d0                	add    %edx,%eax
f0115eec:	c1 e0 02             	shl    $0x2,%eax
f0115eef:	01 c8                	add    %ecx,%eax
f0115ef1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0115ef5:	ff 45 cc             	incl   -0x34(%ebp)
f0115ef8:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0115efc:	7e df                	jle    f0115edd <test_priority_normal_and_higher+0x6d8>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115efe:	e8 bb 44 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115f03:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115f06:	e8 76 59 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115f0b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115f0e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f11:	83 ec 08             	sub    $0x8,%esp
f0115f14:	6a 05                	push   $0x5
f0115f16:	50                   	push   %eax
f0115f17:	e8 cf f8 ff ff       	call   f01157eb <set_program_priority>
f0115f1c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115f1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f22:	83 ec 08             	sub    $0x8,%esp
f0115f25:	6a 04                	push   $0x4
f0115f27:	50                   	push   %eax
f0115f28:	e8 be f8 ff ff       	call   f01157eb <set_program_priority>
f0115f2d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115f30:	e8 4c 59 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0115f35:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115f38:	74 17                	je     f0115f51 <test_priority_normal_and_higher+0x74c>
f0115f3a:	83 ec 04             	sub    $0x4,%esp
f0115f3d:	68 6c be 11 f0       	push   $0xf011be6c
f0115f42:	68 9e 00 00 00       	push   $0x9e
f0115f47:	68 09 be 11 f0       	push   $0xf011be09
f0115f4c:	e8 25 a2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115f51:	e8 68 44 ff ff       	call   f010a3be <sys_calculate_free_frames>
f0115f56:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115f59:	74 17                	je     f0115f72 <test_priority_normal_and_higher+0x76d>
f0115f5b:	83 ec 04             	sub    $0x4,%esp
f0115f5e:	68 6c be 11 f0       	push   $0xf011be6c
f0115f63:	68 9f 00 00 00       	push   $0x9f
f0115f68:	68 09 be 11 f0       	push   $0xf011be09
f0115f6d:	e8 04 a2 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115f72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f75:	8b 40 74             	mov    0x74(%eax),%eax
f0115f78:	83 f8 14             	cmp    $0x14,%eax
f0115f7b:	75 16                	jne    f0115f93 <test_priority_normal_and_higher+0x78e>
f0115f7d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f80:	8b 40 74             	mov    0x74(%eax),%eax
f0115f83:	83 f8 3c             	cmp    $0x3c,%eax
f0115f86:	75 0b                	jne    f0115f93 <test_priority_normal_and_higher+0x78e>
f0115f88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f8b:	8b 40 74             	mov    0x74(%eax),%eax
f0115f8e:	83 f8 28             	cmp    $0x28,%eax
f0115f91:	74 17                	je     f0115faa <test_priority_normal_and_higher+0x7a5>
			panic("The programs' working set size should be doubled if full\n");
f0115f93:	83 ec 04             	sub    $0x4,%esp
f0115f96:	68 a0 bf 11 f0       	push   $0xf011bfa0
f0115f9b:	68 a2 00 00 00       	push   $0xa2
f0115fa0:	68 09 be 11 f0       	push   $0xf011be09
f0115fa5:	e8 cc a1 fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 60; i++)
f0115faa:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115fb1:	eb 1b                	jmp    f0115fce <test_priority_normal_and_higher+0x7c9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115fb3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fb6:	8b 48 78             	mov    0x78(%eax),%ecx
f0115fb9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115fbc:	89 d0                	mov    %edx,%eax
f0115fbe:	01 c0                	add    %eax,%eax
f0115fc0:	01 d0                	add    %edx,%eax
f0115fc2:	c1 e0 02             	shl    $0x2,%eax
f0115fc5:	01 c8                	add    %ecx,%eax
f0115fc7:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115fcb:	ff 45 c8             	incl   -0x38(%ebp)
f0115fce:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115fd2:	7e df                	jle    f0115fb3 <test_priority_normal_and_higher+0x7ae>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115fd4:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115fdb:	eb 1b                	jmp    f0115ff8 <test_priority_normal_and_higher+0x7f3>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115fdd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fe0:	8b 48 78             	mov    0x78(%eax),%ecx
f0115fe3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115fe6:	89 d0                	mov    %edx,%eax
f0115fe8:	01 c0                	add    %eax,%eax
f0115fea:	01 d0                	add    %edx,%eax
f0115fec:	c1 e0 02             	shl    $0x2,%eax
f0115fef:	01 c8                	add    %ecx,%eax
f0115ff1:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115ff5:	ff 45 c4             	incl   -0x3c(%ebp)
f0115ff8:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115ffc:	7e df                	jle    f0115fdd <test_priority_normal_and_higher+0x7d8>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115ffe:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116005:	eb 7a                	jmp    f0116081 <test_priority_normal_and_higher+0x87c>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116007:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011600a:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116011:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116014:	8b 58 78             	mov    0x78(%eax),%ebx
f0116017:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011601a:	89 d0                	mov    %edx,%eax
f011601c:	01 c0                	add    %eax,%eax
f011601e:	01 d0                	add    %edx,%eax
f0116020:	c1 e0 02             	shl    $0x2,%eax
f0116023:	01 d8                	add    %ebx,%eax
f0116025:	8b 00                	mov    (%eax),%eax
f0116027:	39 c1                	cmp    %eax,%ecx
f0116029:	74 17                	je     f0116042 <test_priority_normal_and_higher+0x83d>
				panic("Working set should be moved properly to the new one");
f011602b:	83 ec 04             	sub    $0x4,%esp
f011602e:	68 dc bf 11 f0       	push   $0xf011bfdc
f0116033:	68 b0 00 00 00       	push   $0xb0
f0116038:	68 09 be 11 f0       	push   $0xf011be09
f011603d:	e8 34 a1 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116042:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116045:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011604c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011604f:	8b 58 78             	mov    0x78(%eax),%ebx
f0116052:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116055:	89 d0                	mov    %edx,%eax
f0116057:	01 c0                	add    %eax,%eax
f0116059:	01 d0                	add    %edx,%eax
f011605b:	c1 e0 02             	shl    $0x2,%eax
f011605e:	01 d8                	add    %ebx,%eax
f0116060:	8b 40 08             	mov    0x8(%eax),%eax
f0116063:	39 c1                	cmp    %eax,%ecx
f0116065:	74 17                	je     f011607e <test_priority_normal_and_higher+0x879>
				panic("Working set should be moved properly to the new one");
f0116067:	83 ec 04             	sub    $0x4,%esp
f011606a:	68 dc bf 11 f0       	push   $0xf011bfdc
f011606f:	68 b3 00 00 00       	push   $0xb3
f0116074:	68 09 be 11 f0       	push   $0xf011be09
f0116079:	e8 f8 a0 fe ff       	call   f0100176 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011607e:	ff 45 c0             	incl   -0x40(%ebp)
f0116081:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116085:	7e 80                	jle    f0116007 <test_priority_normal_and_higher+0x802>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116087:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011608e:	eb 7a                	jmp    f011610a <test_priority_normal_and_higher+0x905>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116090:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116093:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011609a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011609d:	8b 58 78             	mov    0x78(%eax),%ebx
f01160a0:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01160a3:	89 d0                	mov    %edx,%eax
f01160a5:	01 c0                	add    %eax,%eax
f01160a7:	01 d0                	add    %edx,%eax
f01160a9:	c1 e0 02             	shl    $0x2,%eax
f01160ac:	01 d8                	add    %ebx,%eax
f01160ae:	8b 00                	mov    (%eax),%eax
f01160b0:	39 c1                	cmp    %eax,%ecx
f01160b2:	74 17                	je     f01160cb <test_priority_normal_and_higher+0x8c6>
				panic("Working set should be moved properly to the new one");
f01160b4:	83 ec 04             	sub    $0x4,%esp
f01160b7:	68 dc bf 11 f0       	push   $0xf011bfdc
f01160bc:	68 b9 00 00 00       	push   $0xb9
f01160c1:	68 09 be 11 f0       	push   $0xf011be09
f01160c6:	e8 ab a0 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01160cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01160ce:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01160d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160d8:	8b 58 78             	mov    0x78(%eax),%ebx
f01160db:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01160de:	89 d0                	mov    %edx,%eax
f01160e0:	01 c0                	add    %eax,%eax
f01160e2:	01 d0                	add    %edx,%eax
f01160e4:	c1 e0 02             	shl    $0x2,%eax
f01160e7:	01 d8                	add    %ebx,%eax
f01160e9:	8b 40 08             	mov    0x8(%eax),%eax
f01160ec:	39 c1                	cmp    %eax,%ecx
f01160ee:	74 17                	je     f0116107 <test_priority_normal_and_higher+0x902>
				panic("Working set should be moved properly to the new one");
f01160f0:	83 ec 04             	sub    $0x4,%esp
f01160f3:	68 dc bf 11 f0       	push   $0xf011bfdc
f01160f8:	68 bc 00 00 00       	push   $0xbc
f01160fd:	68 09 be 11 f0       	push   $0xf011be09
f0116102:	e8 6f a0 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116107:	ff 45 bc             	incl   -0x44(%ebp)
f011610a:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011610e:	7e 80                	jle    f0116090 <test_priority_normal_and_higher+0x88b>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116110:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116117:	eb 7a                	jmp    f0116193 <test_priority_normal_and_higher+0x98e>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116119:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011611c:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116123:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116126:	8b 58 78             	mov    0x78(%eax),%ebx
f0116129:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011612c:	89 d0                	mov    %edx,%eax
f011612e:	01 c0                	add    %eax,%eax
f0116130:	01 d0                	add    %edx,%eax
f0116132:	c1 e0 02             	shl    $0x2,%eax
f0116135:	01 d8                	add    %ebx,%eax
f0116137:	8b 00                	mov    (%eax),%eax
f0116139:	39 c1                	cmp    %eax,%ecx
f011613b:	74 17                	je     f0116154 <test_priority_normal_and_higher+0x94f>
				panic("Working set should be moved properly to the new one");
f011613d:	83 ec 04             	sub    $0x4,%esp
f0116140:	68 dc bf 11 f0       	push   $0xf011bfdc
f0116145:	68 c2 00 00 00       	push   $0xc2
f011614a:	68 09 be 11 f0       	push   $0xf011be09
f011614f:	e8 22 a0 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116154:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116157:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011615e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116161:	8b 58 78             	mov    0x78(%eax),%ebx
f0116164:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116167:	89 d0                	mov    %edx,%eax
f0116169:	01 c0                	add    %eax,%eax
f011616b:	01 d0                	add    %edx,%eax
f011616d:	c1 e0 02             	shl    $0x2,%eax
f0116170:	01 d8                	add    %ebx,%eax
f0116172:	8b 40 08             	mov    0x8(%eax),%eax
f0116175:	39 c1                	cmp    %eax,%ecx
f0116177:	74 17                	je     f0116190 <test_priority_normal_and_higher+0x98b>
				panic("Working set should be moved properly to the new one");
f0116179:	83 ec 04             	sub    $0x4,%esp
f011617c:	68 dc bf 11 f0       	push   $0xf011bfdc
f0116181:	68 c5 00 00 00       	push   $0xc5
f0116186:	68 09 be 11 f0       	push   $0xf011be09
f011618b:	e8 e6 9f fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116190:	ff 45 b8             	incl   -0x48(%ebp)
f0116193:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116197:	7e 80                	jle    f0116119 <test_priority_normal_and_higher+0x914>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116199:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01161a0:	75 6e 61 
f01161a3:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01161aa:	6c 00 00 
f01161ad:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01161b3:	b9 17 00 00 00       	mov    $0x17,%ecx
f01161b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01161bd:	89 d7                	mov    %edx,%edi
f01161bf:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01161c1:	83 ec 0c             	sub    $0xc,%esp
f01161c4:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01161ca:	50                   	push   %eax
f01161cb:	e8 79 b6 fe ff       	call   f0101849 <execute_command>
f01161d0:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01161d3:	eb 10                	jmp    f01161e5 <test_priority_normal_and_higher+0x9e0>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01161d5:	83 ec 0c             	sub    $0xc,%esp
f01161d8:	68 10 c0 11 f0       	push   $0xf011c010
f01161dd:	e8 b4 0b ff ff       	call   f0106d96 <cprintf>
f01161e2:	83 c4 10             	add    $0x10,%esp
	}
}
f01161e5:	90                   	nop
f01161e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01161e9:	5b                   	pop    %ebx
f01161ea:	5e                   	pop    %esi
f01161eb:	5f                   	pop    %edi
f01161ec:	5d                   	pop    %ebp
f01161ed:	c3                   	ret    

f01161ee <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01161ee:	55                   	push   %ebp
f01161ef:	89 e5                	mov    %esp,%ebp
f01161f1:	57                   	push   %edi
f01161f2:	56                   	push   %esi
f01161f3:	53                   	push   %ebx
f01161f4:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01161fa:	a0 3d ea 14 f0       	mov    0xf014ea3d,%al
f01161ff:	84 c0                	test   %al,%al
f0116201:	0f 84 be 09 00 00    	je     f0116bc5 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116207:	c6 05 3d ea 14 f0 00 	movb   $0x0,0xf014ea3d
		char command[100] = "load fos_add 20";
f011620e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116214:	bb 4c c0 11 f0       	mov    $0xf011c04c,%ebx
f0116219:	ba 04 00 00 00       	mov    $0x4,%edx
f011621e:	89 c7                	mov    %eax,%edi
f0116220:	89 de                	mov    %ebx,%esi
f0116222:	89 d1                	mov    %edx,%ecx
f0116224:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116226:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011622c:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116231:	b8 00 00 00 00       	mov    $0x0,%eax
f0116236:	89 d7                	mov    %edx,%edi
f0116238:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011623a:	83 ec 0c             	sub    $0xc,%esp
f011623d:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116243:	50                   	push   %eax
f0116244:	e8 00 b6 fe ff       	call   f0101849 <execute_command>
f0116249:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011624c:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116252:	bb 08 c3 11 f0       	mov    $0xf011c308,%ebx
f0116257:	ba 0d 00 00 00       	mov    $0xd,%edx
f011625c:	89 c7                	mov    %eax,%edi
f011625e:	89 de                	mov    %ebx,%esi
f0116260:	89 d1                	mov    %edx,%ecx
f0116262:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116264:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011626a:	b9 57 00 00 00       	mov    $0x57,%ecx
f011626f:	b0 00                	mov    $0x0,%al
f0116271:	89 d7                	mov    %edx,%edi
f0116273:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116275:	83 ec 0c             	sub    $0xc,%esp
f0116278:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011627e:	50                   	push   %eax
f011627f:	e8 c5 b5 fe ff       	call   f0101849 <execute_command>
f0116284:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116287:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011628d:	bb 6c c3 11 f0       	mov    $0xf011c36c,%ebx
f0116292:	ba 17 00 00 00       	mov    $0x17,%edx
f0116297:	89 c7                	mov    %eax,%edi
f0116299:	89 de                	mov    %ebx,%esi
f011629b:	89 d1                	mov    %edx,%ecx
f011629d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011629f:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01162a5:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01162aa:	b0 00                	mov    $0x0,%al
f01162ac:	89 d7                	mov    %edx,%edi
f01162ae:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01162b0:	83 ec 0c             	sub    $0xc,%esp
f01162b3:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01162b9:	50                   	push   %eax
f01162ba:	e8 8a b5 fe ff       	call   f0101849 <execute_command>
f01162bf:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01162c2:	83 ec 04             	sub    $0x4,%esp
f01162c5:	6a 00                	push   $0x0
f01162c7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01162ca:	50                   	push   %eax
f01162cb:	68 00 10 00 00       	push   $0x1000
f01162d0:	e8 dd cd fe ff       	call   f01030b2 <envid2env>
f01162d5:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01162d8:	83 ec 04             	sub    $0x4,%esp
f01162db:	6a 00                	push   $0x0
f01162dd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01162e0:	50                   	push   %eax
f01162e1:	68 01 10 00 00       	push   $0x1001
f01162e6:	e8 c7 cd fe ff       	call   f01030b2 <envid2env>
f01162eb:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01162ee:	83 ec 04             	sub    $0x4,%esp
f01162f1:	6a 00                	push   $0x0
f01162f3:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01162f6:	50                   	push   %eax
f01162f7:	68 02 10 00 00       	push   $0x1002
f01162fc:	e8 b1 cd fe ff       	call   f01030b2 <envid2env>
f0116301:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116304:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116307:	85 c0                	test   %eax,%eax
f0116309:	74 0e                	je     f0116319 <test_priority_normal_and_lower+0x12b>
f011630b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011630e:	85 c0                	test   %eax,%eax
f0116310:	74 07                	je     f0116319 <test_priority_normal_and_lower+0x12b>
f0116312:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116315:	85 c0                	test   %eax,%eax
f0116317:	75 17                	jne    f0116330 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116319:	83 ec 04             	sub    $0x4,%esp
f011631c:	68 f0 bd 11 f0       	push   $0xf011bdf0
f0116321:	68 ec 00 00 00       	push   $0xec
f0116326:	68 09 be 11 f0       	push   $0xf011be09
f011632b:	e8 46 9e fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116330:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116333:	8b 40 74             	mov    0x74(%eax),%eax
f0116336:	83 f8 14             	cmp    $0x14,%eax
f0116339:	75 16                	jne    f0116351 <test_priority_normal_and_lower+0x163>
f011633b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011633e:	8b 40 74             	mov    0x74(%eax),%eax
f0116341:	83 f8 1e             	cmp    $0x1e,%eax
f0116344:	75 0b                	jne    f0116351 <test_priority_normal_and_lower+0x163>
f0116346:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116349:	8b 40 74             	mov    0x74(%eax),%eax
f011634c:	83 f8 28             	cmp    $0x28,%eax
f011634f:	74 17                	je     f0116368 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116351:	83 ec 04             	sub    $0x4,%esp
f0116354:	68 20 be 11 f0       	push   $0xf011be20
f0116359:	68 ef 00 00 00       	push   $0xef
f011635e:	68 09 be 11 f0       	push   $0xf011be09
f0116363:	e8 0e 9e fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0116368:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011636f:	eb 44                	jmp    f01163b5 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116371:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116374:	8b 48 78             	mov    0x78(%eax),%ecx
f0116377:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011637a:	89 d0                	mov    %edx,%eax
f011637c:	01 c0                	add    %eax,%eax
f011637e:	01 d0                	add    %edx,%eax
f0116380:	c1 e0 02             	shl    $0x2,%eax
f0116383:	01 c8                	add    %ecx,%eax
f0116385:	8b 10                	mov    (%eax),%edx
f0116387:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011638a:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116391:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116394:	8b 48 78             	mov    0x78(%eax),%ecx
f0116397:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011639a:	89 d0                	mov    %edx,%eax
f011639c:	01 c0                	add    %eax,%eax
f011639e:	01 d0                	add    %edx,%eax
f01163a0:	c1 e0 02             	shl    $0x2,%eax
f01163a3:	01 c8                	add    %ecx,%eax
f01163a5:	8b 50 08             	mov    0x8(%eax),%edx
f01163a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01163ab:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01163b2:	ff 45 e4             	incl   -0x1c(%ebp)
f01163b5:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01163b9:	7e b6                	jle    f0116371 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01163bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01163c2:	eb 44                	jmp    f0116408 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01163c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163c7:	8b 48 78             	mov    0x78(%eax),%ecx
f01163ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01163cd:	89 d0                	mov    %edx,%eax
f01163cf:	01 c0                	add    %eax,%eax
f01163d1:	01 d0                	add    %edx,%eax
f01163d3:	c1 e0 02             	shl    $0x2,%eax
f01163d6:	01 c8                	add    %ecx,%eax
f01163d8:	8b 10                	mov    (%eax),%edx
f01163da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01163dd:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01163e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163e7:	8b 48 78             	mov    0x78(%eax),%ecx
f01163ea:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01163ed:	89 d0                	mov    %edx,%eax
f01163ef:	01 c0                	add    %eax,%eax
f01163f1:	01 d0                	add    %edx,%eax
f01163f3:	c1 e0 02             	shl    $0x2,%eax
f01163f6:	01 c8                	add    %ecx,%eax
f01163f8:	8b 50 08             	mov    0x8(%eax),%edx
f01163fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01163fe:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116405:	ff 45 e0             	incl   -0x20(%ebp)
f0116408:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011640c:	7e b6                	jle    f01163c4 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011640e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116415:	eb 44                	jmp    f011645b <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116417:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011641a:	8b 48 78             	mov    0x78(%eax),%ecx
f011641d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116420:	89 d0                	mov    %edx,%eax
f0116422:	01 c0                	add    %eax,%eax
f0116424:	01 d0                	add    %edx,%eax
f0116426:	c1 e0 02             	shl    $0x2,%eax
f0116429:	01 c8                	add    %ecx,%eax
f011642b:	8b 10                	mov    (%eax),%edx
f011642d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116430:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116437:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011643a:	8b 48 78             	mov    0x78(%eax),%ecx
f011643d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116440:	89 d0                	mov    %edx,%eax
f0116442:	01 c0                	add    %eax,%eax
f0116444:	01 d0                	add    %edx,%eax
f0116446:	c1 e0 02             	shl    $0x2,%eax
f0116449:	01 c8                	add    %ecx,%eax
f011644b:	8b 50 08             	mov    0x8(%eax),%edx
f011644e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116451:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116458:	ff 45 dc             	incl   -0x24(%ebp)
f011645b:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011645f:	7e b6                	jle    f0116417 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116461:	e8 58 3f ff ff       	call   f010a3be <sys_calculate_free_frames>
f0116466:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116469:	e8 13 54 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011646e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116471:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116474:	83 ec 08             	sub    $0x8,%esp
f0116477:	6a 03                	push   $0x3
f0116479:	50                   	push   %eax
f011647a:	e8 6c f3 ff ff       	call   f01157eb <set_program_priority>
f011647f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116482:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116485:	83 ec 08             	sub    $0x8,%esp
f0116488:	6a 03                	push   $0x3
f011648a:	50                   	push   %eax
f011648b:	e8 5b f3 ff ff       	call   f01157eb <set_program_priority>
f0116490:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116493:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116496:	83 ec 08             	sub    $0x8,%esp
f0116499:	6a 03                	push   $0x3
f011649b:	50                   	push   %eax
f011649c:	e8 4a f3 ff ff       	call   f01157eb <set_program_priority>
f01164a1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164a4:	e8 d8 53 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01164a9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01164ac:	74 17                	je     f01164c5 <test_priority_normal_and_lower+0x2d7>
f01164ae:	83 ec 04             	sub    $0x4,%esp
f01164b1:	68 6c be 11 f0       	push   $0xf011be6c
f01164b6:	68 0b 01 00 00       	push   $0x10b
f01164bb:	68 09 be 11 f0       	push   $0xf011be09
f01164c0:	e8 b1 9c fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01164c5:	e8 f4 3e ff ff       	call   f010a3be <sys_calculate_free_frames>
f01164ca:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01164cd:	74 17                	je     f01164e6 <test_priority_normal_and_lower+0x2f8>
f01164cf:	83 ec 04             	sub    $0x4,%esp
f01164d2:	68 6c be 11 f0       	push   $0xf011be6c
f01164d7:	68 0c 01 00 00       	push   $0x10c
f01164dc:	68 09 be 11 f0       	push   $0xf011be09
f01164e1:	e8 90 9c fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01164e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164e9:	8b 40 74             	mov    0x74(%eax),%eax
f01164ec:	83 f8 14             	cmp    $0x14,%eax
f01164ef:	75 16                	jne    f0116507 <test_priority_normal_and_lower+0x319>
f01164f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01164f4:	8b 40 74             	mov    0x74(%eax),%eax
f01164f7:	83 f8 1e             	cmp    $0x1e,%eax
f01164fa:	75 0b                	jne    f0116507 <test_priority_normal_and_lower+0x319>
f01164fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01164ff:	8b 40 74             	mov    0x74(%eax),%eax
f0116502:	83 f8 28             	cmp    $0x28,%eax
f0116505:	74 17                	je     f011651e <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116507:	83 ec 04             	sub    $0x4,%esp
f011650a:	68 98 be 11 f0       	push   $0xf011be98
f011650f:	68 0f 01 00 00       	push   $0x10f
f0116514:	68 09 be 11 f0       	push   $0xf011be09
f0116519:	e8 58 9c fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f011651e:	e8 9b 3e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0116523:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116526:	e8 56 53 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011652b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011652e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116531:	83 ec 08             	sub    $0x8,%esp
f0116534:	6a 02                	push   $0x2
f0116536:	50                   	push   %eax
f0116537:	e8 af f2 ff ff       	call   f01157eb <set_program_priority>
f011653c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011653f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116542:	83 ec 08             	sub    $0x8,%esp
f0116545:	6a 02                	push   $0x2
f0116547:	50                   	push   %eax
f0116548:	e8 9e f2 ff ff       	call   f01157eb <set_program_priority>
f011654d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116550:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116553:	83 ec 08             	sub    $0x8,%esp
f0116556:	6a 02                	push   $0x2
f0116558:	50                   	push   %eax
f0116559:	e8 8d f2 ff ff       	call   f01157eb <set_program_priority>
f011655e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116561:	e8 1b 53 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0116566:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116569:	74 17                	je     f0116582 <test_priority_normal_and_lower+0x394>
f011656b:	83 ec 04             	sub    $0x4,%esp
f011656e:	68 6c be 11 f0       	push   $0xf011be6c
f0116573:	68 19 01 00 00       	push   $0x119
f0116578:	68 09 be 11 f0       	push   $0xf011be09
f011657d:	e8 f4 9b fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116582:	e8 37 3e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0116587:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011658a:	74 21                	je     f01165ad <test_priority_normal_and_lower+0x3bf>
f011658c:	e8 2d 3e ff ff       	call   f010a3be <sys_calculate_free_frames>
f0116591:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116594:	29 c2                	sub    %eax,%edx
f0116596:	89 d0                	mov    %edx,%eax
f0116598:	50                   	push   %eax
f0116599:	68 ec be 11 f0       	push   $0xf011beec
f011659e:	68 1a 01 00 00       	push   $0x11a
f01165a3:	68 09 be 11 f0       	push   $0xf011be09
f01165a8:	e8 c9 9b fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01165ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01165b0:	8b 40 74             	mov    0x74(%eax),%eax
f01165b3:	83 f8 0a             	cmp    $0xa,%eax
f01165b6:	75 16                	jne    f01165ce <test_priority_normal_and_lower+0x3e0>
f01165b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01165bb:	8b 40 74             	mov    0x74(%eax),%eax
f01165be:	83 f8 0f             	cmp    $0xf,%eax
f01165c1:	75 0b                	jne    f01165ce <test_priority_normal_and_lower+0x3e0>
f01165c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01165c6:	8b 40 74             	mov    0x74(%eax),%eax
f01165c9:	83 f8 14             	cmp    $0x14,%eax
f01165cc:	74 17                	je     f01165e5 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01165ce:	83 ec 04             	sub    $0x4,%esp
f01165d1:	68 1c bf 11 f0       	push   $0xf011bf1c
f01165d6:	68 1d 01 00 00       	push   $0x11d
f01165db:	68 09 be 11 f0       	push   $0xf011be09
f01165e0:	e8 91 9b fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f01165e5:	e8 d4 3d ff ff       	call   f010a3be <sys_calculate_free_frames>
f01165ea:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01165ed:	e8 8f 52 ff ff       	call   f010b881 <pf_calculate_free_frames>
f01165f2:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01165f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01165f8:	83 ec 08             	sub    $0x8,%esp
f01165fb:	6a 02                	push   $0x2
f01165fd:	50                   	push   %eax
f01165fe:	e8 e8 f1 ff ff       	call   f01157eb <set_program_priority>
f0116603:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116606:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116609:	83 ec 08             	sub    $0x8,%esp
f011660c:	6a 02                	push   $0x2
f011660e:	50                   	push   %eax
f011660f:	e8 d7 f1 ff ff       	call   f01157eb <set_program_priority>
f0116614:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116617:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011661a:	83 ec 08             	sub    $0x8,%esp
f011661d:	6a 02                	push   $0x2
f011661f:	50                   	push   %eax
f0116620:	e8 c6 f1 ff ff       	call   f01157eb <set_program_priority>
f0116625:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116628:	e8 54 52 ff ff       	call   f010b881 <pf_calculate_free_frames>
f011662d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116630:	74 17                	je     f0116649 <test_priority_normal_and_lower+0x45b>
f0116632:	83 ec 04             	sub    $0x4,%esp
f0116635:	68 6c be 11 f0       	push   $0xf011be6c
f011663a:	68 27 01 00 00       	push   $0x127
f011663f:	68 09 be 11 f0       	push   $0xf011be09
f0116644:	e8 2d 9b fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116649:	e8 70 3d ff ff       	call   f010a3be <sys_calculate_free_frames>
f011664e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116651:	74 21                	je     f0116674 <test_priority_normal_and_lower+0x486>
f0116653:	e8 66 3d ff ff       	call   f010a3be <sys_calculate_free_frames>
f0116658:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011665b:	29 c2                	sub    %eax,%edx
f011665d:	89 d0                	mov    %edx,%eax
f011665f:	50                   	push   %eax
f0116660:	68 ec be 11 f0       	push   $0xf011beec
f0116665:	68 28 01 00 00       	push   $0x128
f011666a:	68 09 be 11 f0       	push   $0xf011be09
f011666f:	e8 02 9b fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116674:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116677:	8b 40 74             	mov    0x74(%eax),%eax
f011667a:	83 f8 0a             	cmp    $0xa,%eax
f011667d:	75 16                	jne    f0116695 <test_priority_normal_and_lower+0x4a7>
f011667f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116682:	8b 40 74             	mov    0x74(%eax),%eax
f0116685:	83 f8 0f             	cmp    $0xf,%eax
f0116688:	75 0b                	jne    f0116695 <test_priority_normal_and_lower+0x4a7>
f011668a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011668d:	8b 40 74             	mov    0x74(%eax),%eax
f0116690:	83 f8 0a             	cmp    $0xa,%eax
f0116693:	74 17                	je     f01166ac <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116695:	83 ec 04             	sub    $0x4,%esp
f0116698:	68 1c bf 11 f0       	push   $0xf011bf1c
f011669d:	68 2b 01 00 00       	push   $0x12b
f01166a2:	68 09 be 11 f0       	push   $0xf011be09
f01166a7:	e8 ca 9a fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 10; i++)
f01166ac:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01166b3:	eb 7a                	jmp    f011672f <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01166b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01166b8:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01166bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166c2:	8b 58 78             	mov    0x78(%eax),%ebx
f01166c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01166c8:	89 d0                	mov    %edx,%eax
f01166ca:	01 c0                	add    %eax,%eax
f01166cc:	01 d0                	add    %edx,%eax
f01166ce:	c1 e0 02             	shl    $0x2,%eax
f01166d1:	01 d8                	add    %ebx,%eax
f01166d3:	8b 00                	mov    (%eax),%eax
f01166d5:	39 c1                	cmp    %eax,%ecx
f01166d7:	74 17                	je     f01166f0 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01166d9:	83 ec 04             	sub    $0x4,%esp
f01166dc:	68 dc bf 11 f0       	push   $0xf011bfdc
f01166e1:	68 30 01 00 00       	push   $0x130
f01166e6:	68 09 be 11 f0       	push   $0xf011be09
f01166eb:	e8 86 9a fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01166f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01166f3:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01166fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166fd:	8b 58 78             	mov    0x78(%eax),%ebx
f0116700:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116703:	89 d0                	mov    %edx,%eax
f0116705:	01 c0                	add    %eax,%eax
f0116707:	01 d0                	add    %edx,%eax
f0116709:	c1 e0 02             	shl    $0x2,%eax
f011670c:	01 d8                	add    %ebx,%eax
f011670e:	8b 40 08             	mov    0x8(%eax),%eax
f0116711:	39 c1                	cmp    %eax,%ecx
f0116713:	74 17                	je     f011672c <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116715:	83 ec 04             	sub    $0x4,%esp
f0116718:	68 dc bf 11 f0       	push   $0xf011bfdc
f011671d:	68 33 01 00 00       	push   $0x133
f0116722:	68 09 be 11 f0       	push   $0xf011be09
f0116727:	e8 4a 9a fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f011672c:	ff 45 d8             	incl   -0x28(%ebp)
f011672f:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116733:	7e 80                	jle    f01166b5 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116735:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011673c:	eb 7a                	jmp    f01167b8 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011673e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116741:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116748:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011674b:	8b 58 78             	mov    0x78(%eax),%ebx
f011674e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116751:	89 d0                	mov    %edx,%eax
f0116753:	01 c0                	add    %eax,%eax
f0116755:	01 d0                	add    %edx,%eax
f0116757:	c1 e0 02             	shl    $0x2,%eax
f011675a:	01 d8                	add    %ebx,%eax
f011675c:	8b 00                	mov    (%eax),%eax
f011675e:	39 c1                	cmp    %eax,%ecx
f0116760:	74 17                	je     f0116779 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116762:	83 ec 04             	sub    $0x4,%esp
f0116765:	68 dc bf 11 f0       	push   $0xf011bfdc
f011676a:	68 39 01 00 00       	push   $0x139
f011676f:	68 09 be 11 f0       	push   $0xf011be09
f0116774:	e8 fd 99 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116779:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011677c:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116783:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116786:	8b 58 78             	mov    0x78(%eax),%ebx
f0116789:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011678c:	89 d0                	mov    %edx,%eax
f011678e:	01 c0                	add    %eax,%eax
f0116790:	01 d0                	add    %edx,%eax
f0116792:	c1 e0 02             	shl    $0x2,%eax
f0116795:	01 d8                	add    %ebx,%eax
f0116797:	8b 40 08             	mov    0x8(%eax),%eax
f011679a:	39 c1                	cmp    %eax,%ecx
f011679c:	74 17                	je     f01167b5 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011679e:	83 ec 04             	sub    $0x4,%esp
f01167a1:	68 dc bf 11 f0       	push   $0xf011bfdc
f01167a6:	68 3c 01 00 00       	push   $0x13c
f01167ab:	68 09 be 11 f0       	push   $0xf011be09
f01167b0:	e8 c1 99 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01167b5:	ff 45 d4             	incl   -0x2c(%ebp)
f01167b8:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01167bc:	7e 80                	jle    f011673e <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01167be:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01167c5:	eb 7a                	jmp    f0116841 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01167c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01167ca:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01167d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167d4:	8b 58 78             	mov    0x78(%eax),%ebx
f01167d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01167da:	89 d0                	mov    %edx,%eax
f01167dc:	01 c0                	add    %eax,%eax
f01167de:	01 d0                	add    %edx,%eax
f01167e0:	c1 e0 02             	shl    $0x2,%eax
f01167e3:	01 d8                	add    %ebx,%eax
f01167e5:	8b 00                	mov    (%eax),%eax
f01167e7:	39 c1                	cmp    %eax,%ecx
f01167e9:	74 17                	je     f0116802 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f01167eb:	83 ec 04             	sub    $0x4,%esp
f01167ee:	68 dc bf 11 f0       	push   $0xf011bfdc
f01167f3:	68 42 01 00 00       	push   $0x142
f01167f8:	68 09 be 11 f0       	push   $0xf011be09
f01167fd:	e8 74 99 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116802:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116805:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011680c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011680f:	8b 58 78             	mov    0x78(%eax),%ebx
f0116812:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116815:	89 d0                	mov    %edx,%eax
f0116817:	01 c0                	add    %eax,%eax
f0116819:	01 d0                	add    %edx,%eax
f011681b:	c1 e0 02             	shl    $0x2,%eax
f011681e:	01 d8                	add    %ebx,%eax
f0116820:	8b 40 08             	mov    0x8(%eax),%eax
f0116823:	39 c1                	cmp    %eax,%ecx
f0116825:	74 17                	je     f011683e <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116827:	83 ec 04             	sub    $0x4,%esp
f011682a:	68 dc bf 11 f0       	push   $0xf011bfdc
f011682f:	68 45 01 00 00       	push   $0x145
f0116834:	68 09 be 11 f0       	push   $0xf011be09
f0116839:	e8 38 99 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011683e:	ff 45 d0             	incl   -0x30(%ebp)
f0116841:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116845:	7e 80                	jle    f01167c7 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116847:	e8 72 3b ff ff       	call   f010a3be <sys_calculate_free_frames>
f011684c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011684f:	e8 2d 50 ff ff       	call   f010b881 <pf_calculate_free_frames>
f0116854:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116857:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011685a:	83 ec 08             	sub    $0x8,%esp
f011685d:	6a 01                	push   $0x1
f011685f:	50                   	push   %eax
f0116860:	e8 86 ef ff ff       	call   f01157eb <set_program_priority>
f0116865:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116868:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011686b:	83 ec 08             	sub    $0x8,%esp
f011686e:	6a 01                	push   $0x1
f0116870:	50                   	push   %eax
f0116871:	e8 75 ef ff ff       	call   f01157eb <set_program_priority>
f0116876:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116879:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011687c:	83 ec 08             	sub    $0x8,%esp
f011687f:	6a 01                	push   $0x1
f0116881:	50                   	push   %eax
f0116882:	e8 64 ef ff ff       	call   f01157eb <set_program_priority>
f0116887:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011688a:	e8 f2 4f ff ff       	call   f010b881 <pf_calculate_free_frames>
f011688f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116892:	74 17                	je     f01168ab <test_priority_normal_and_lower+0x6bd>
f0116894:	83 ec 04             	sub    $0x4,%esp
f0116897:	68 6c be 11 f0       	push   $0xf011be6c
f011689c:	68 4e 01 00 00       	push   $0x14e
f01168a1:	68 09 be 11 f0       	push   $0xf011be09
f01168a6:	e8 cb 98 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01168ab:	e8 0e 3b ff ff       	call   f010a3be <sys_calculate_free_frames>
f01168b0:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01168b3:	83 f8 0d             	cmp    $0xd,%eax
f01168b6:	74 17                	je     f01168cf <test_priority_normal_and_lower+0x6e1>
f01168b8:	83 ec 04             	sub    $0x4,%esp
f01168bb:	68 78 c1 11 f0       	push   $0xf011c178
f01168c0:	68 4f 01 00 00       	push   $0x14f
f01168c5:	68 09 be 11 f0       	push   $0xf011be09
f01168ca:	e8 a7 98 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01168cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168d2:	8b 40 74             	mov    0x74(%eax),%eax
f01168d5:	83 f8 05             	cmp    $0x5,%eax
f01168d8:	75 16                	jne    f01168f0 <test_priority_normal_and_lower+0x702>
f01168da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168dd:	8b 40 74             	mov    0x74(%eax),%eax
f01168e0:	83 f8 07             	cmp    $0x7,%eax
f01168e3:	75 0b                	jne    f01168f0 <test_priority_normal_and_lower+0x702>
f01168e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168e8:	8b 40 74             	mov    0x74(%eax),%eax
f01168eb:	83 f8 05             	cmp    $0x5,%eax
f01168ee:	74 17                	je     f0116907 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f01168f0:	83 ec 04             	sub    $0x4,%esp
f01168f3:	68 c0 c1 11 f0       	push   $0xf011c1c0
f01168f8:	68 52 01 00 00       	push   $0x152
f01168fd:	68 09 be 11 f0       	push   $0xf011be09
f0116902:	e8 6f 98 fe ff       	call   f0100176 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116907:	e8 b2 3a ff ff       	call   f010a3be <sys_calculate_free_frames>
f011690c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011690f:	e8 6d 4f ff ff       	call   f010b881 <pf_calculate_free_frames>
f0116914:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116917:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011691a:	83 ec 08             	sub    $0x8,%esp
f011691d:	6a 01                	push   $0x1
f011691f:	50                   	push   %eax
f0116920:	e8 c6 ee ff ff       	call   f01157eb <set_program_priority>
f0116925:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116928:	e8 54 4f ff ff       	call   f010b881 <pf_calculate_free_frames>
f011692d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116930:	74 17                	je     f0116949 <test_priority_normal_and_lower+0x75b>
f0116932:	83 ec 04             	sub    $0x4,%esp
f0116935:	68 6c be 11 f0       	push   $0xf011be6c
f011693a:	68 58 01 00 00       	push   $0x158
f011693f:	68 09 be 11 f0       	push   $0xf011be09
f0116944:	e8 2d 98 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116949:	e8 70 3a ff ff       	call   f010a3be <sys_calculate_free_frames>
f011694e:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116951:	83 f8 03             	cmp    $0x3,%eax
f0116954:	74 17                	je     f011696d <test_priority_normal_and_lower+0x77f>
f0116956:	83 ec 04             	sub    $0x4,%esp
f0116959:	68 6c be 11 f0       	push   $0xf011be6c
f011695e:	68 59 01 00 00       	push   $0x159
f0116963:	68 09 be 11 f0       	push   $0xf011be09
f0116968:	e8 09 98 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011696d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116970:	8b 40 74             	mov    0x74(%eax),%eax
f0116973:	83 f8 02             	cmp    $0x2,%eax
f0116976:	75 16                	jne    f011698e <test_priority_normal_and_lower+0x7a0>
f0116978:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011697b:	8b 40 74             	mov    0x74(%eax),%eax
f011697e:	83 f8 07             	cmp    $0x7,%eax
f0116981:	75 0b                	jne    f011698e <test_priority_normal_and_lower+0x7a0>
f0116983:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116986:	8b 40 74             	mov    0x74(%eax),%eax
f0116989:	83 f8 05             	cmp    $0x5,%eax
f011698c:	74 17                	je     f01169a5 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011698e:	83 ec 04             	sub    $0x4,%esp
f0116991:	68 a0 bf 11 f0       	push   $0xf011bfa0
f0116996:	68 5c 01 00 00       	push   $0x15c
f011699b:	68 09 be 11 f0       	push   $0xf011be09
f01169a0:	e8 d1 97 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 2; i++)
f01169a5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01169ac:	e9 80 00 00 00       	jmp    f0116a31 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01169b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01169b4:	83 c0 08             	add    $0x8,%eax
f01169b7:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01169be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169c1:	8b 58 78             	mov    0x78(%eax),%ebx
f01169c4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01169c7:	89 d0                	mov    %edx,%eax
f01169c9:	01 c0                	add    %eax,%eax
f01169cb:	01 d0                	add    %edx,%eax
f01169cd:	c1 e0 02             	shl    $0x2,%eax
f01169d0:	01 d8                	add    %ebx,%eax
f01169d2:	8b 00                	mov    (%eax),%eax
f01169d4:	39 c1                	cmp    %eax,%ecx
f01169d6:	74 17                	je     f01169ef <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01169d8:	83 ec 04             	sub    $0x4,%esp
f01169db:	68 f0 c1 11 f0       	push   $0xf011c1f0
f01169e0:	68 61 01 00 00       	push   $0x161
f01169e5:	68 09 be 11 f0       	push   $0xf011be09
f01169ea:	e8 87 97 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01169ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01169f2:	83 c0 08             	add    $0x8,%eax
f01169f5:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01169fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169ff:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a02:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116a05:	89 d0                	mov    %edx,%eax
f0116a07:	01 c0                	add    %eax,%eax
f0116a09:	01 d0                	add    %edx,%eax
f0116a0b:	c1 e0 02             	shl    $0x2,%eax
f0116a0e:	01 d8                	add    %ebx,%eax
f0116a10:	8b 40 08             	mov    0x8(%eax),%eax
f0116a13:	39 c1                	cmp    %eax,%ecx
f0116a15:	74 17                	je     f0116a2e <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a17:	83 ec 04             	sub    $0x4,%esp
f0116a1a:	68 f0 c1 11 f0       	push   $0xf011c1f0
f0116a1f:	68 64 01 00 00       	push   $0x164
f0116a24:	68 09 be 11 f0       	push   $0xf011be09
f0116a29:	e8 48 97 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116a2e:	ff 45 cc             	incl   -0x34(%ebp)
f0116a31:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116a35:	0f 8e 76 ff ff ff    	jle    f01169b1 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116a3b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116a42:	e9 80 00 00 00       	jmp    f0116ac7 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a47:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116a4a:	83 c0 03             	add    $0x3,%eax
f0116a4d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116a54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a57:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a5a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116a5d:	89 d0                	mov    %edx,%eax
f0116a5f:	01 c0                	add    %eax,%eax
f0116a61:	01 d0                	add    %edx,%eax
f0116a63:	c1 e0 02             	shl    $0x2,%eax
f0116a66:	01 d8                	add    %ebx,%eax
f0116a68:	8b 00                	mov    (%eax),%eax
f0116a6a:	39 c1                	cmp    %eax,%ecx
f0116a6c:	74 17                	je     f0116a85 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116a6e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116a71:	68 5c c2 11 f0       	push   $0xf011c25c
f0116a76:	68 6a 01 00 00       	push   $0x16a
f0116a7b:	68 09 be 11 f0       	push   $0xf011be09
f0116a80:	e8 f1 96 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a85:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116a88:	83 c0 03             	add    $0x3,%eax
f0116a8b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116a92:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a95:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a98:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116a9b:	89 d0                	mov    %edx,%eax
f0116a9d:	01 c0                	add    %eax,%eax
f0116a9f:	01 d0                	add    %edx,%eax
f0116aa1:	c1 e0 02             	shl    $0x2,%eax
f0116aa4:	01 d8                	add    %ebx,%eax
f0116aa6:	8b 40 08             	mov    0x8(%eax),%eax
f0116aa9:	39 c1                	cmp    %eax,%ecx
f0116aab:	74 17                	je     f0116ac4 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116aad:	83 ec 04             	sub    $0x4,%esp
f0116ab0:	68 f0 c1 11 f0       	push   $0xf011c1f0
f0116ab5:	68 6d 01 00 00       	push   $0x16d
f0116aba:	68 09 be 11 f0       	push   $0xf011be09
f0116abf:	e8 b2 96 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116ac4:	ff 45 c8             	incl   -0x38(%ebp)
f0116ac7:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116acb:	0f 8e 76 ff ff ff    	jle    f0116a47 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116ad1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116ad8:	e9 80 00 00 00       	jmp    f0116b5d <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116add:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116ae0:	83 c0 05             	add    $0x5,%eax
f0116ae3:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116aea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116aed:	8b 58 78             	mov    0x78(%eax),%ebx
f0116af0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116af3:	89 d0                	mov    %edx,%eax
f0116af5:	01 c0                	add    %eax,%eax
f0116af7:	01 d0                	add    %edx,%eax
f0116af9:	c1 e0 02             	shl    $0x2,%eax
f0116afc:	01 d8                	add    %ebx,%eax
f0116afe:	8b 00                	mov    (%eax),%eax
f0116b00:	39 c1                	cmp    %eax,%ecx
f0116b02:	74 17                	je     f0116b1b <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116b04:	83 ec 04             	sub    $0x4,%esp
f0116b07:	68 f0 c1 11 f0       	push   $0xf011c1f0
f0116b0c:	68 73 01 00 00       	push   $0x173
f0116b11:	68 09 be 11 f0       	push   $0xf011be09
f0116b16:	e8 5b 96 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116b1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116b1e:	83 c0 05             	add    $0x5,%eax
f0116b21:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116b28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b2b:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b2e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116b31:	89 d0                	mov    %edx,%eax
f0116b33:	01 c0                	add    %eax,%eax
f0116b35:	01 d0                	add    %edx,%eax
f0116b37:	c1 e0 02             	shl    $0x2,%eax
f0116b3a:	01 d8                	add    %ebx,%eax
f0116b3c:	8b 40 08             	mov    0x8(%eax),%eax
f0116b3f:	39 c1                	cmp    %eax,%ecx
f0116b41:	74 17                	je     f0116b5a <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116b43:	83 ec 04             	sub    $0x4,%esp
f0116b46:	68 f0 c1 11 f0       	push   $0xf011c1f0
f0116b4b:	68 76 01 00 00       	push   $0x176
f0116b50:	68 09 be 11 f0       	push   $0xf011be09
f0116b55:	e8 1c 96 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116b5a:	ff 45 c4             	incl   -0x3c(%ebp)
f0116b5d:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116b61:	0f 8e 76 ff ff ff    	jle    f0116add <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116b67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b6a:	83 ec 08             	sub    $0x8,%esp
f0116b6d:	6a 05                	push   $0x5
f0116b6f:	50                   	push   %eax
f0116b70:	e8 76 ec ff ff       	call   f01157eb <set_program_priority>
f0116b75:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116b78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b7b:	83 ec 08             	sub    $0x8,%esp
f0116b7e:	6a 05                	push   $0x5
f0116b80:	50                   	push   %eax
f0116b81:	e8 65 ec ff ff       	call   f01157eb <set_program_priority>
f0116b86:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116b89:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116b90:	75 6e 61 
f0116b93:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116b9a:	6c 00 00 
f0116b9d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116ba3:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116ba8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bad:	89 d7                	mov    %edx,%edi
f0116baf:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116bb1:	83 ec 0c             	sub    $0xc,%esp
f0116bb4:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116bba:	50                   	push   %eax
f0116bbb:	e8 89 ac fe ff       	call   f0101849 <execute_command>
f0116bc0:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116bc3:	eb 10                	jmp    f0116bd5 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116bc5:	83 ec 0c             	sub    $0xc,%esp
f0116bc8:	68 cc c2 11 f0       	push   $0xf011c2cc
f0116bcd:	e8 c4 01 ff ff       	call   f0106d96 <cprintf>
f0116bd2:	83 c4 10             	add    $0x10,%esp
	}
}
f0116bd5:	90                   	nop
f0116bd6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116bd9:	5b                   	pop    %ebx
f0116bda:	5e                   	pop    %esi
f0116bdb:	5f                   	pop    %edi
f0116bdc:	5d                   	pop    %ebp
f0116bdd:	c3                   	ret    

f0116bde <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0116bde:	55                   	push   %ebp
f0116bdf:	89 e5                	mov    %esp,%ebp
f0116be1:	53                   	push   %ebx
f0116be2:	83 ec 14             	sub    $0x14,%esp
f0116be5:	8b 45 10             	mov    0x10(%ebp),%eax
f0116be8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116beb:	8b 45 14             	mov    0x14(%ebp),%eax
f0116bee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0116bf1:	8b 45 18             	mov    0x18(%ebp),%eax
f0116bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bf9:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0116bfc:	77 55                	ja     f0116c53 <printnum+0x75>
f0116bfe:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0116c01:	72 05                	jb     f0116c08 <printnum+0x2a>
f0116c03:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116c06:	77 4b                	ja     f0116c53 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0116c08:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0116c0b:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0116c0e:	8b 45 18             	mov    0x18(%ebp),%eax
f0116c11:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c16:	52                   	push   %edx
f0116c17:	50                   	push   %eax
f0116c18:	ff 75 f4             	pushl  -0xc(%ebp)
f0116c1b:	ff 75 f0             	pushl  -0x10(%ebp)
f0116c1e:	e8 b9 11 00 00       	call   f0117ddc <__udivdi3>
f0116c23:	83 c4 10             	add    $0x10,%esp
f0116c26:	83 ec 04             	sub    $0x4,%esp
f0116c29:	ff 75 20             	pushl  0x20(%ebp)
f0116c2c:	53                   	push   %ebx
f0116c2d:	ff 75 18             	pushl  0x18(%ebp)
f0116c30:	52                   	push   %edx
f0116c31:	50                   	push   %eax
f0116c32:	ff 75 0c             	pushl  0xc(%ebp)
f0116c35:	ff 75 08             	pushl  0x8(%ebp)
f0116c38:	e8 a1 ff ff ff       	call   f0116bde <printnum>
f0116c3d:	83 c4 20             	add    $0x20,%esp
f0116c40:	eb 1a                	jmp    f0116c5c <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0116c42:	83 ec 08             	sub    $0x8,%esp
f0116c45:	ff 75 0c             	pushl  0xc(%ebp)
f0116c48:	ff 75 20             	pushl  0x20(%ebp)
f0116c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c4e:	ff d0                	call   *%eax
f0116c50:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0116c53:	ff 4d 1c             	decl   0x1c(%ebp)
f0116c56:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0116c5a:	7f e6                	jg     f0116c42 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0116c5c:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0116c5f:	bb 00 00 00 00       	mov    $0x0,%ebx
f0116c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116c6a:	53                   	push   %ebx
f0116c6b:	51                   	push   %ecx
f0116c6c:	52                   	push   %edx
f0116c6d:	50                   	push   %eax
f0116c6e:	e8 79 12 00 00       	call   f0117eec <__umoddi3>
f0116c73:	83 c4 10             	add    $0x10,%esp
f0116c76:	05 f4 c5 11 f0       	add    $0xf011c5f4,%eax
f0116c7b:	8a 00                	mov    (%eax),%al
f0116c7d:	0f be c0             	movsbl %al,%eax
f0116c80:	83 ec 08             	sub    $0x8,%esp
f0116c83:	ff 75 0c             	pushl  0xc(%ebp)
f0116c86:	50                   	push   %eax
f0116c87:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c8a:	ff d0                	call   *%eax
f0116c8c:	83 c4 10             	add    $0x10,%esp
}
f0116c8f:	90                   	nop
f0116c90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0116c93:	c9                   	leave  
f0116c94:	c3                   	ret    

f0116c95 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0116c95:	55                   	push   %ebp
f0116c96:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0116c98:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0116c9c:	7e 1c                	jle    f0116cba <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0116c9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ca1:	8b 00                	mov    (%eax),%eax
f0116ca3:	8d 50 08             	lea    0x8(%eax),%edx
f0116ca6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ca9:	89 10                	mov    %edx,(%eax)
f0116cab:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cae:	8b 00                	mov    (%eax),%eax
f0116cb0:	83 e8 08             	sub    $0x8,%eax
f0116cb3:	8b 50 04             	mov    0x4(%eax),%edx
f0116cb6:	8b 00                	mov    (%eax),%eax
f0116cb8:	eb 40                	jmp    f0116cfa <getuint+0x65>
	else if (lflag)
f0116cba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0116cbe:	74 1e                	je     f0116cde <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0116cc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cc3:	8b 00                	mov    (%eax),%eax
f0116cc5:	8d 50 04             	lea    0x4(%eax),%edx
f0116cc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ccb:	89 10                	mov    %edx,(%eax)
f0116ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cd0:	8b 00                	mov    (%eax),%eax
f0116cd2:	83 e8 04             	sub    $0x4,%eax
f0116cd5:	8b 00                	mov    (%eax),%eax
f0116cd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0116cdc:	eb 1c                	jmp    f0116cfa <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0116cde:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ce1:	8b 00                	mov    (%eax),%eax
f0116ce3:	8d 50 04             	lea    0x4(%eax),%edx
f0116ce6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ce9:	89 10                	mov    %edx,(%eax)
f0116ceb:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cee:	8b 00                	mov    (%eax),%eax
f0116cf0:	83 e8 04             	sub    $0x4,%eax
f0116cf3:	8b 00                	mov    (%eax),%eax
f0116cf5:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0116cfa:	5d                   	pop    %ebp
f0116cfb:	c3                   	ret    

f0116cfc <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0116cfc:	55                   	push   %ebp
f0116cfd:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0116cff:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0116d03:	7e 1c                	jle    f0116d21 <getint+0x25>
		return va_arg(*ap, long long);
f0116d05:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d08:	8b 00                	mov    (%eax),%eax
f0116d0a:	8d 50 08             	lea    0x8(%eax),%edx
f0116d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d10:	89 10                	mov    %edx,(%eax)
f0116d12:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d15:	8b 00                	mov    (%eax),%eax
f0116d17:	83 e8 08             	sub    $0x8,%eax
f0116d1a:	8b 50 04             	mov    0x4(%eax),%edx
f0116d1d:	8b 00                	mov    (%eax),%eax
f0116d1f:	eb 38                	jmp    f0116d59 <getint+0x5d>
	else if (lflag)
f0116d21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0116d25:	74 1a                	je     f0116d41 <getint+0x45>
		return va_arg(*ap, long);
f0116d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d2a:	8b 00                	mov    (%eax),%eax
f0116d2c:	8d 50 04             	lea    0x4(%eax),%edx
f0116d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d32:	89 10                	mov    %edx,(%eax)
f0116d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d37:	8b 00                	mov    (%eax),%eax
f0116d39:	83 e8 04             	sub    $0x4,%eax
f0116d3c:	8b 00                	mov    (%eax),%eax
f0116d3e:	99                   	cltd   
f0116d3f:	eb 18                	jmp    f0116d59 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0116d41:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d44:	8b 00                	mov    (%eax),%eax
f0116d46:	8d 50 04             	lea    0x4(%eax),%edx
f0116d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d4c:	89 10                	mov    %edx,(%eax)
f0116d4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d51:	8b 00                	mov    (%eax),%eax
f0116d53:	83 e8 04             	sub    $0x4,%eax
f0116d56:	8b 00                	mov    (%eax),%eax
f0116d58:	99                   	cltd   
}
f0116d59:	5d                   	pop    %ebp
f0116d5a:	c3                   	ret    

f0116d5b <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0116d5b:	55                   	push   %ebp
f0116d5c:	89 e5                	mov    %esp,%ebp
f0116d5e:	56                   	push   %esi
f0116d5f:	53                   	push   %ebx
f0116d60:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0116d63:	eb 17                	jmp    f0116d7c <vprintfmt+0x21>
			if (ch == '\0')
f0116d65:	85 db                	test   %ebx,%ebx
f0116d67:	0f 84 af 03 00 00    	je     f011711c <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0116d6d:	83 ec 08             	sub    $0x8,%esp
f0116d70:	ff 75 0c             	pushl  0xc(%ebp)
f0116d73:	53                   	push   %ebx
f0116d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d77:	ff d0                	call   *%eax
f0116d79:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0116d7c:	8b 45 10             	mov    0x10(%ebp),%eax
f0116d7f:	8d 50 01             	lea    0x1(%eax),%edx
f0116d82:	89 55 10             	mov    %edx,0x10(%ebp)
f0116d85:	8a 00                	mov    (%eax),%al
f0116d87:	0f b6 d8             	movzbl %al,%ebx
f0116d8a:	83 fb 25             	cmp    $0x25,%ebx
f0116d8d:	75 d6                	jne    f0116d65 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0116d8f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0116d93:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0116d9a:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0116da1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0116da8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0116daf:	8b 45 10             	mov    0x10(%ebp),%eax
f0116db2:	8d 50 01             	lea    0x1(%eax),%edx
f0116db5:	89 55 10             	mov    %edx,0x10(%ebp)
f0116db8:	8a 00                	mov    (%eax),%al
f0116dba:	0f b6 d8             	movzbl %al,%ebx
f0116dbd:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0116dc0:	83 f8 55             	cmp    $0x55,%eax
f0116dc3:	0f 87 2b 03 00 00    	ja     f01170f4 <vprintfmt+0x399>
f0116dc9:	8b 04 85 18 c6 11 f0 	mov    -0xfee39e8(,%eax,4),%eax
f0116dd0:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0116dd2:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0116dd6:	eb d7                	jmp    f0116daf <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0116dd8:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0116ddc:	eb d1                	jmp    f0116daf <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0116dde:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0116de5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116de8:	89 d0                	mov    %edx,%eax
f0116dea:	c1 e0 02             	shl    $0x2,%eax
f0116ded:	01 d0                	add    %edx,%eax
f0116def:	01 c0                	add    %eax,%eax
f0116df1:	01 d8                	add    %ebx,%eax
f0116df3:	83 e8 30             	sub    $0x30,%eax
f0116df6:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0116df9:	8b 45 10             	mov    0x10(%ebp),%eax
f0116dfc:	8a 00                	mov    (%eax),%al
f0116dfe:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0116e01:	83 fb 2f             	cmp    $0x2f,%ebx
f0116e04:	7e 3e                	jle    f0116e44 <vprintfmt+0xe9>
f0116e06:	83 fb 39             	cmp    $0x39,%ebx
f0116e09:	7f 39                	jg     f0116e44 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0116e0b:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0116e0e:	eb d5                	jmp    f0116de5 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0116e10:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e13:	83 c0 04             	add    $0x4,%eax
f0116e16:	89 45 14             	mov    %eax,0x14(%ebp)
f0116e19:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e1c:	83 e8 04             	sub    $0x4,%eax
f0116e1f:	8b 00                	mov    (%eax),%eax
f0116e21:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0116e24:	eb 1f                	jmp    f0116e45 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0116e26:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116e2a:	79 83                	jns    f0116daf <vprintfmt+0x54>
				width = 0;
f0116e2c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0116e33:	e9 77 ff ff ff       	jmp    f0116daf <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0116e38:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0116e3f:	e9 6b ff ff ff       	jmp    f0116daf <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0116e44:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0116e45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116e49:	0f 89 60 ff ff ff    	jns    f0116daf <vprintfmt+0x54>
				width = precision, precision = -1;
f0116e4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116e52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116e55:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0116e5c:	e9 4e ff ff ff       	jmp    f0116daf <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0116e61:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0116e64:	e9 46 ff ff ff       	jmp    f0116daf <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0116e69:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e6c:	83 c0 04             	add    $0x4,%eax
f0116e6f:	89 45 14             	mov    %eax,0x14(%ebp)
f0116e72:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e75:	83 e8 04             	sub    $0x4,%eax
f0116e78:	8b 00                	mov    (%eax),%eax
f0116e7a:	83 ec 08             	sub    $0x8,%esp
f0116e7d:	ff 75 0c             	pushl  0xc(%ebp)
f0116e80:	50                   	push   %eax
f0116e81:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e84:	ff d0                	call   *%eax
f0116e86:	83 c4 10             	add    $0x10,%esp
			break;
f0116e89:	e9 89 02 00 00       	jmp    f0117117 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0116e8e:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e91:	83 c0 04             	add    $0x4,%eax
f0116e94:	89 45 14             	mov    %eax,0x14(%ebp)
f0116e97:	8b 45 14             	mov    0x14(%ebp),%eax
f0116e9a:	83 e8 04             	sub    $0x4,%eax
f0116e9d:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0116e9f:	85 db                	test   %ebx,%ebx
f0116ea1:	79 02                	jns    f0116ea5 <vprintfmt+0x14a>
				err = -err;
f0116ea3:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0116ea5:	83 fb 64             	cmp    $0x64,%ebx
f0116ea8:	7f 0b                	jg     f0116eb5 <vprintfmt+0x15a>
f0116eaa:	8b 34 9d 60 c4 11 f0 	mov    -0xfee3ba0(,%ebx,4),%esi
f0116eb1:	85 f6                	test   %esi,%esi
f0116eb3:	75 19                	jne    f0116ece <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0116eb5:	53                   	push   %ebx
f0116eb6:	68 05 c6 11 f0       	push   $0xf011c605
f0116ebb:	ff 75 0c             	pushl  0xc(%ebp)
f0116ebe:	ff 75 08             	pushl  0x8(%ebp)
f0116ec1:	e8 5e 02 00 00       	call   f0117124 <printfmt>
f0116ec6:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0116ec9:	e9 49 02 00 00       	jmp    f0117117 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0116ece:	56                   	push   %esi
f0116ecf:	68 0e c6 11 f0       	push   $0xf011c60e
f0116ed4:	ff 75 0c             	pushl  0xc(%ebp)
f0116ed7:	ff 75 08             	pushl  0x8(%ebp)
f0116eda:	e8 45 02 00 00       	call   f0117124 <printfmt>
f0116edf:	83 c4 10             	add    $0x10,%esp
			break;
f0116ee2:	e9 30 02 00 00       	jmp    f0117117 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0116ee7:	8b 45 14             	mov    0x14(%ebp),%eax
f0116eea:	83 c0 04             	add    $0x4,%eax
f0116eed:	89 45 14             	mov    %eax,0x14(%ebp)
f0116ef0:	8b 45 14             	mov    0x14(%ebp),%eax
f0116ef3:	83 e8 04             	sub    $0x4,%eax
f0116ef6:	8b 30                	mov    (%eax),%esi
f0116ef8:	85 f6                	test   %esi,%esi
f0116efa:	75 05                	jne    f0116f01 <vprintfmt+0x1a6>
				p = "(null)";
f0116efc:	be 11 c6 11 f0       	mov    $0xf011c611,%esi
			if (width > 0 && padc != '-')
f0116f01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116f05:	7e 6d                	jle    f0116f74 <vprintfmt+0x219>
f0116f07:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0116f0b:	74 67                	je     f0116f74 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0116f0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116f10:	83 ec 08             	sub    $0x8,%esp
f0116f13:	50                   	push   %eax
f0116f14:	56                   	push   %esi
f0116f15:	e8 12 05 00 00       	call   f011742c <strnlen>
f0116f1a:	83 c4 10             	add    $0x10,%esp
f0116f1d:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0116f20:	eb 16                	jmp    f0116f38 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0116f22:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0116f26:	83 ec 08             	sub    $0x8,%esp
f0116f29:	ff 75 0c             	pushl  0xc(%ebp)
f0116f2c:	50                   	push   %eax
f0116f2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f30:	ff d0                	call   *%eax
f0116f32:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0116f35:	ff 4d e4             	decl   -0x1c(%ebp)
f0116f38:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116f3c:	7f e4                	jg     f0116f22 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0116f3e:	eb 34                	jmp    f0116f74 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0116f40:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0116f44:	74 1c                	je     f0116f62 <vprintfmt+0x207>
f0116f46:	83 fb 1f             	cmp    $0x1f,%ebx
f0116f49:	7e 05                	jle    f0116f50 <vprintfmt+0x1f5>
f0116f4b:	83 fb 7e             	cmp    $0x7e,%ebx
f0116f4e:	7e 12                	jle    f0116f62 <vprintfmt+0x207>
					putch('?', putdat);
f0116f50:	83 ec 08             	sub    $0x8,%esp
f0116f53:	ff 75 0c             	pushl  0xc(%ebp)
f0116f56:	6a 3f                	push   $0x3f
f0116f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f5b:	ff d0                	call   *%eax
f0116f5d:	83 c4 10             	add    $0x10,%esp
f0116f60:	eb 0f                	jmp    f0116f71 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0116f62:	83 ec 08             	sub    $0x8,%esp
f0116f65:	ff 75 0c             	pushl  0xc(%ebp)
f0116f68:	53                   	push   %ebx
f0116f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f6c:	ff d0                	call   *%eax
f0116f6e:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0116f71:	ff 4d e4             	decl   -0x1c(%ebp)
f0116f74:	89 f0                	mov    %esi,%eax
f0116f76:	8d 70 01             	lea    0x1(%eax),%esi
f0116f79:	8a 00                	mov    (%eax),%al
f0116f7b:	0f be d8             	movsbl %al,%ebx
f0116f7e:	85 db                	test   %ebx,%ebx
f0116f80:	74 24                	je     f0116fa6 <vprintfmt+0x24b>
f0116f82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0116f86:	78 b8                	js     f0116f40 <vprintfmt+0x1e5>
f0116f88:	ff 4d e0             	decl   -0x20(%ebp)
f0116f8b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0116f8f:	79 af                	jns    f0116f40 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0116f91:	eb 13                	jmp    f0116fa6 <vprintfmt+0x24b>
				putch(' ', putdat);
f0116f93:	83 ec 08             	sub    $0x8,%esp
f0116f96:	ff 75 0c             	pushl  0xc(%ebp)
f0116f99:	6a 20                	push   $0x20
f0116f9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f9e:	ff d0                	call   *%eax
f0116fa0:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0116fa3:	ff 4d e4             	decl   -0x1c(%ebp)
f0116fa6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116faa:	7f e7                	jg     f0116f93 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0116fac:	e9 66 01 00 00       	jmp    f0117117 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0116fb1:	83 ec 08             	sub    $0x8,%esp
f0116fb4:	ff 75 e8             	pushl  -0x18(%ebp)
f0116fb7:	8d 45 14             	lea    0x14(%ebp),%eax
f0116fba:	50                   	push   %eax
f0116fbb:	e8 3c fd ff ff       	call   f0116cfc <getint>
f0116fc0:	83 c4 10             	add    $0x10,%esp
f0116fc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116fc6:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0116fc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116fcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116fcf:	85 d2                	test   %edx,%edx
f0116fd1:	79 23                	jns    f0116ff6 <vprintfmt+0x29b>
				putch('-', putdat);
f0116fd3:	83 ec 08             	sub    $0x8,%esp
f0116fd6:	ff 75 0c             	pushl  0xc(%ebp)
f0116fd9:	6a 2d                	push   $0x2d
f0116fdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0116fde:	ff d0                	call   *%eax
f0116fe0:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0116fe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116fe6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116fe9:	f7 d8                	neg    %eax
f0116feb:	83 d2 00             	adc    $0x0,%edx
f0116fee:	f7 da                	neg    %edx
f0116ff0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ff3:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0116ff6:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0116ffd:	e9 bc 00 00 00       	jmp    f01170be <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0117002:	83 ec 08             	sub    $0x8,%esp
f0117005:	ff 75 e8             	pushl  -0x18(%ebp)
f0117008:	8d 45 14             	lea    0x14(%ebp),%eax
f011700b:	50                   	push   %eax
f011700c:	e8 84 fc ff ff       	call   f0116c95 <getuint>
f0117011:	83 c4 10             	add    $0x10,%esp
f0117014:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0117017:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f011701a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0117021:	e9 98 00 00 00       	jmp    f01170be <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0117026:	83 ec 08             	sub    $0x8,%esp
f0117029:	ff 75 0c             	pushl  0xc(%ebp)
f011702c:	6a 58                	push   $0x58
f011702e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117031:	ff d0                	call   *%eax
f0117033:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0117036:	83 ec 08             	sub    $0x8,%esp
f0117039:	ff 75 0c             	pushl  0xc(%ebp)
f011703c:	6a 58                	push   $0x58
f011703e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117041:	ff d0                	call   *%eax
f0117043:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0117046:	83 ec 08             	sub    $0x8,%esp
f0117049:	ff 75 0c             	pushl  0xc(%ebp)
f011704c:	6a 58                	push   $0x58
f011704e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117051:	ff d0                	call   *%eax
f0117053:	83 c4 10             	add    $0x10,%esp
			break;
f0117056:	e9 bc 00 00 00       	jmp    f0117117 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f011705b:	83 ec 08             	sub    $0x8,%esp
f011705e:	ff 75 0c             	pushl  0xc(%ebp)
f0117061:	6a 30                	push   $0x30
f0117063:	8b 45 08             	mov    0x8(%ebp),%eax
f0117066:	ff d0                	call   *%eax
f0117068:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f011706b:	83 ec 08             	sub    $0x8,%esp
f011706e:	ff 75 0c             	pushl  0xc(%ebp)
f0117071:	6a 78                	push   $0x78
f0117073:	8b 45 08             	mov    0x8(%ebp),%eax
f0117076:	ff d0                	call   *%eax
f0117078:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f011707b:	8b 45 14             	mov    0x14(%ebp),%eax
f011707e:	83 c0 04             	add    $0x4,%eax
f0117081:	89 45 14             	mov    %eax,0x14(%ebp)
f0117084:	8b 45 14             	mov    0x14(%ebp),%eax
f0117087:	83 e8 04             	sub    $0x4,%eax
f011708a:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f011708c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011708f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0117096:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f011709d:	eb 1f                	jmp    f01170be <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f011709f:	83 ec 08             	sub    $0x8,%esp
f01170a2:	ff 75 e8             	pushl  -0x18(%ebp)
f01170a5:	8d 45 14             	lea    0x14(%ebp),%eax
f01170a8:	50                   	push   %eax
f01170a9:	e8 e7 fb ff ff       	call   f0116c95 <getuint>
f01170ae:	83 c4 10             	add    $0x10,%esp
f01170b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01170b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01170b7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01170be:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01170c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01170c5:	83 ec 04             	sub    $0x4,%esp
f01170c8:	52                   	push   %edx
f01170c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01170cc:	50                   	push   %eax
f01170cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01170d0:	ff 75 f0             	pushl  -0x10(%ebp)
f01170d3:	ff 75 0c             	pushl  0xc(%ebp)
f01170d6:	ff 75 08             	pushl  0x8(%ebp)
f01170d9:	e8 00 fb ff ff       	call   f0116bde <printnum>
f01170de:	83 c4 20             	add    $0x20,%esp
			break;
f01170e1:	eb 34                	jmp    f0117117 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01170e3:	83 ec 08             	sub    $0x8,%esp
f01170e6:	ff 75 0c             	pushl  0xc(%ebp)
f01170e9:	53                   	push   %ebx
f01170ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01170ed:	ff d0                	call   *%eax
f01170ef:	83 c4 10             	add    $0x10,%esp
			break;
f01170f2:	eb 23                	jmp    f0117117 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01170f4:	83 ec 08             	sub    $0x8,%esp
f01170f7:	ff 75 0c             	pushl  0xc(%ebp)
f01170fa:	6a 25                	push   $0x25
f01170fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01170ff:	ff d0                	call   *%eax
f0117101:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0117104:	ff 4d 10             	decl   0x10(%ebp)
f0117107:	eb 03                	jmp    f011710c <vprintfmt+0x3b1>
f0117109:	ff 4d 10             	decl   0x10(%ebp)
f011710c:	8b 45 10             	mov    0x10(%ebp),%eax
f011710f:	48                   	dec    %eax
f0117110:	8a 00                	mov    (%eax),%al
f0117112:	3c 25                	cmp    $0x25,%al
f0117114:	75 f3                	jne    f0117109 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0117116:	90                   	nop
		}
	}
f0117117:	e9 47 fc ff ff       	jmp    f0116d63 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f011711c:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f011711d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117120:	5b                   	pop    %ebx
f0117121:	5e                   	pop    %esi
f0117122:	5d                   	pop    %ebp
f0117123:	c3                   	ret    

f0117124 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0117124:	55                   	push   %ebp
f0117125:	89 e5                	mov    %esp,%ebp
f0117127:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f011712a:	8d 45 10             	lea    0x10(%ebp),%eax
f011712d:	83 c0 04             	add    $0x4,%eax
f0117130:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0117133:	8b 45 10             	mov    0x10(%ebp),%eax
f0117136:	ff 75 f4             	pushl  -0xc(%ebp)
f0117139:	50                   	push   %eax
f011713a:	ff 75 0c             	pushl  0xc(%ebp)
f011713d:	ff 75 08             	pushl  0x8(%ebp)
f0117140:	e8 16 fc ff ff       	call   f0116d5b <vprintfmt>
f0117145:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0117148:	90                   	nop
f0117149:	c9                   	leave  
f011714a:	c3                   	ret    

f011714b <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f011714b:	55                   	push   %ebp
f011714c:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f011714e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117151:	8b 40 08             	mov    0x8(%eax),%eax
f0117154:	8d 50 01             	lea    0x1(%eax),%edx
f0117157:	8b 45 0c             	mov    0xc(%ebp),%eax
f011715a:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f011715d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117160:	8b 10                	mov    (%eax),%edx
f0117162:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117165:	8b 40 04             	mov    0x4(%eax),%eax
f0117168:	39 c2                	cmp    %eax,%edx
f011716a:	73 12                	jae    f011717e <sprintputch+0x33>
		*b->buf++ = ch;
f011716c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011716f:	8b 00                	mov    (%eax),%eax
f0117171:	8d 48 01             	lea    0x1(%eax),%ecx
f0117174:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117177:	89 0a                	mov    %ecx,(%edx)
f0117179:	8b 55 08             	mov    0x8(%ebp),%edx
f011717c:	88 10                	mov    %dl,(%eax)
}
f011717e:	90                   	nop
f011717f:	5d                   	pop    %ebp
f0117180:	c3                   	ret    

f0117181 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0117181:	55                   	push   %ebp
f0117182:	89 e5                	mov    %esp,%ebp
f0117184:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0117187:	8b 45 08             	mov    0x8(%ebp),%eax
f011718a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011718d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117190:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117193:	8b 45 08             	mov    0x8(%ebp),%eax
f0117196:	01 d0                	add    %edx,%eax
f0117198:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011719b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01171a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01171a6:	74 06                	je     f01171ae <vsnprintf+0x2d>
f01171a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01171ac:	7f 07                	jg     f01171b5 <vsnprintf+0x34>
		return -E_INVAL;
f01171ae:	b8 03 00 00 00       	mov    $0x3,%eax
f01171b3:	eb 20                	jmp    f01171d5 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01171b5:	ff 75 14             	pushl  0x14(%ebp)
f01171b8:	ff 75 10             	pushl  0x10(%ebp)
f01171bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01171be:	50                   	push   %eax
f01171bf:	68 4b 71 11 f0       	push   $0xf011714b
f01171c4:	e8 92 fb ff ff       	call   f0116d5b <vprintfmt>
f01171c9:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01171cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01171cf:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01171d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01171d5:	c9                   	leave  
f01171d6:	c3                   	ret    

f01171d7 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01171d7:	55                   	push   %ebp
f01171d8:	89 e5                	mov    %esp,%ebp
f01171da:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01171dd:	8d 45 10             	lea    0x10(%ebp),%eax
f01171e0:	83 c0 04             	add    $0x4,%eax
f01171e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01171e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01171e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01171ec:	50                   	push   %eax
f01171ed:	ff 75 0c             	pushl  0xc(%ebp)
f01171f0:	ff 75 08             	pushl  0x8(%ebp)
f01171f3:	e8 89 ff ff ff       	call   f0117181 <vsnprintf>
f01171f8:	83 c4 10             	add    $0x10,%esp
f01171fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01171fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0117201:	c9                   	leave  
f0117202:	c3                   	ret    

f0117203 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0117203:	55                   	push   %ebp
f0117204:	89 e5                	mov    %esp,%ebp
f0117206:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0117209:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011720d:	74 13                	je     f0117222 <readline+0x1f>
		cprintf("%s", prompt);
f011720f:	83 ec 08             	sub    $0x8,%esp
f0117212:	ff 75 08             	pushl  0x8(%ebp)
f0117215:	68 70 c7 11 f0       	push   $0xf011c770
f011721a:	e8 77 fb fe ff       	call   f0106d96 <cprintf>
f011721f:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0117222:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0117229:	83 ec 0c             	sub    $0xc,%esp
f011722c:	6a 00                	push   $0x0
f011722e:	e8 eb 9a fe ff       	call   f0100d1e <iscons>
f0117233:	83 c4 10             	add    $0x10,%esp
f0117236:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0117239:	e8 c7 9a fe ff       	call   f0100d05 <getchar>
f011723e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0117241:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117245:	79 22                	jns    f0117269 <readline+0x66>
			if (c != -E_EOF)
f0117247:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011724b:	0f 84 ad 00 00 00    	je     f01172fe <readline+0xfb>
				cprintf("read error: %e\n", c);
f0117251:	83 ec 08             	sub    $0x8,%esp
f0117254:	ff 75 ec             	pushl  -0x14(%ebp)
f0117257:	68 73 c7 11 f0       	push   $0xf011c773
f011725c:	e8 35 fb fe ff       	call   f0106d96 <cprintf>
f0117261:	83 c4 10             	add    $0x10,%esp
			return;
f0117264:	e9 95 00 00 00       	jmp    f01172fe <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0117269:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011726d:	7e 34                	jle    f01172a3 <readline+0xa0>
f011726f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0117276:	7f 2b                	jg     f01172a3 <readline+0xa0>
			if (echoing)
f0117278:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011727c:	74 0e                	je     f011728c <readline+0x89>
				cputchar(c);
f011727e:	83 ec 0c             	sub    $0xc,%esp
f0117281:	ff 75 ec             	pushl  -0x14(%ebp)
f0117284:	e8 65 9a fe ff       	call   f0100cee <cputchar>
f0117289:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011728c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011728f:	8d 50 01             	lea    0x1(%eax),%edx
f0117292:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0117295:	89 c2                	mov    %eax,%edx
f0117297:	8b 45 0c             	mov    0xc(%ebp),%eax
f011729a:	01 d0                	add    %edx,%eax
f011729c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011729f:	88 10                	mov    %dl,(%eax)
f01172a1:	eb 56                	jmp    f01172f9 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01172a3:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01172a7:	75 1f                	jne    f01172c8 <readline+0xc5>
f01172a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01172ad:	7e 19                	jle    f01172c8 <readline+0xc5>
			if (echoing)
f01172af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01172b3:	74 0e                	je     f01172c3 <readline+0xc0>
				cputchar(c);
f01172b5:	83 ec 0c             	sub    $0xc,%esp
f01172b8:	ff 75 ec             	pushl  -0x14(%ebp)
f01172bb:	e8 2e 9a fe ff       	call   f0100cee <cputchar>
f01172c0:	83 c4 10             	add    $0x10,%esp

			i--;
f01172c3:	ff 4d f4             	decl   -0xc(%ebp)
f01172c6:	eb 31                	jmp    f01172f9 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01172c8:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01172cc:	74 0a                	je     f01172d8 <readline+0xd5>
f01172ce:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01172d2:	0f 85 61 ff ff ff    	jne    f0117239 <readline+0x36>
			if (echoing)
f01172d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01172dc:	74 0e                	je     f01172ec <readline+0xe9>
				cputchar(c);
f01172de:	83 ec 0c             	sub    $0xc,%esp
f01172e1:	ff 75 ec             	pushl  -0x14(%ebp)
f01172e4:	e8 05 9a fe ff       	call   f0100cee <cputchar>
f01172e9:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01172ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01172ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01172f2:	01 d0                	add    %edx,%eax
f01172f4:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01172f7:	eb 06                	jmp    f01172ff <readline+0xfc>
		}
	}
f01172f9:	e9 3b ff ff ff       	jmp    f0117239 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01172fe:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01172ff:	c9                   	leave  
f0117300:	c3                   	ret    

f0117301 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0117301:	55                   	push   %ebp
f0117302:	89 e5                	mov    %esp,%ebp
f0117304:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0117307:	e8 80 31 ff ff       	call   f010a48c <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f011730c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117310:	74 13                	je     f0117325 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0117312:	83 ec 08             	sub    $0x8,%esp
f0117315:	ff 75 08             	pushl  0x8(%ebp)
f0117318:	68 70 c7 11 f0       	push   $0xf011c770
f011731d:	e8 74 fa fe ff       	call   f0106d96 <cprintf>
f0117322:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0117325:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f011732c:	83 ec 0c             	sub    $0xc,%esp
f011732f:	6a 00                	push   $0x0
f0117331:	e8 e8 99 fe ff       	call   f0100d1e <iscons>
f0117336:	83 c4 10             	add    $0x10,%esp
f0117339:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f011733c:	e8 c4 99 fe ff       	call   f0100d05 <getchar>
f0117341:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0117344:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117348:	79 23                	jns    f011736d <atomic_readline+0x6c>
			if (c != -E_EOF)
f011734a:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011734e:	74 13                	je     f0117363 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0117350:	83 ec 08             	sub    $0x8,%esp
f0117353:	ff 75 ec             	pushl  -0x14(%ebp)
f0117356:	68 73 c7 11 f0       	push   $0xf011c773
f011735b:	e8 36 fa fe ff       	call   f0106d96 <cprintf>
f0117360:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0117363:	e8 3e 31 ff ff       	call   f010a4a6 <sys_enable_interrupt>
			return;
f0117368:	e9 9a 00 00 00       	jmp    f0117407 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011736d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0117371:	7e 34                	jle    f01173a7 <atomic_readline+0xa6>
f0117373:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011737a:	7f 2b                	jg     f01173a7 <atomic_readline+0xa6>
			if (echoing)
f011737c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0117380:	74 0e                	je     f0117390 <atomic_readline+0x8f>
				cputchar(c);
f0117382:	83 ec 0c             	sub    $0xc,%esp
f0117385:	ff 75 ec             	pushl  -0x14(%ebp)
f0117388:	e8 61 99 fe ff       	call   f0100cee <cputchar>
f011738d:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0117390:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117393:	8d 50 01             	lea    0x1(%eax),%edx
f0117396:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0117399:	89 c2                	mov    %eax,%edx
f011739b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011739e:	01 d0                	add    %edx,%eax
f01173a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01173a3:	88 10                	mov    %dl,(%eax)
f01173a5:	eb 5b                	jmp    f0117402 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01173a7:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01173ab:	75 1f                	jne    f01173cc <atomic_readline+0xcb>
f01173ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01173b1:	7e 19                	jle    f01173cc <atomic_readline+0xcb>
			if (echoing)
f01173b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01173b7:	74 0e                	je     f01173c7 <atomic_readline+0xc6>
				cputchar(c);
f01173b9:	83 ec 0c             	sub    $0xc,%esp
f01173bc:	ff 75 ec             	pushl  -0x14(%ebp)
f01173bf:	e8 2a 99 fe ff       	call   f0100cee <cputchar>
f01173c4:	83 c4 10             	add    $0x10,%esp
			i--;
f01173c7:	ff 4d f4             	decl   -0xc(%ebp)
f01173ca:	eb 36                	jmp    f0117402 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01173cc:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01173d0:	74 0a                	je     f01173dc <atomic_readline+0xdb>
f01173d2:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01173d6:	0f 85 60 ff ff ff    	jne    f011733c <atomic_readline+0x3b>
			if (echoing)
f01173dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01173e0:	74 0e                	je     f01173f0 <atomic_readline+0xef>
				cputchar(c);
f01173e2:	83 ec 0c             	sub    $0xc,%esp
f01173e5:	ff 75 ec             	pushl  -0x14(%ebp)
f01173e8:	e8 01 99 fe ff       	call   f0100cee <cputchar>
f01173ed:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01173f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01173f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01173f6:	01 d0                	add    %edx,%eax
f01173f8:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01173fb:	e8 a6 30 ff ff       	call   f010a4a6 <sys_enable_interrupt>
			return;
f0117400:	eb 05                	jmp    f0117407 <atomic_readline+0x106>
		}
	}
f0117402:	e9 35 ff ff ff       	jmp    f011733c <atomic_readline+0x3b>
}
f0117407:	c9                   	leave  
f0117408:	c3                   	ret    

f0117409 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0117409:	55                   	push   %ebp
f011740a:	89 e5                	mov    %esp,%ebp
f011740c:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f011740f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0117416:	eb 06                	jmp    f011741e <strlen+0x15>
		n++;
f0117418:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f011741b:	ff 45 08             	incl   0x8(%ebp)
f011741e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117421:	8a 00                	mov    (%eax),%al
f0117423:	84 c0                	test   %al,%al
f0117425:	75 f1                	jne    f0117418 <strlen+0xf>
		n++;
	return n;
f0117427:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011742a:	c9                   	leave  
f011742b:	c3                   	ret    

f011742c <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f011742c:	55                   	push   %ebp
f011742d:	89 e5                	mov    %esp,%ebp
f011742f:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0117432:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0117439:	eb 09                	jmp    f0117444 <strnlen+0x18>
		n++;
f011743b:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f011743e:	ff 45 08             	incl   0x8(%ebp)
f0117441:	ff 4d 0c             	decl   0xc(%ebp)
f0117444:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0117448:	74 09                	je     f0117453 <strnlen+0x27>
f011744a:	8b 45 08             	mov    0x8(%ebp),%eax
f011744d:	8a 00                	mov    (%eax),%al
f011744f:	84 c0                	test   %al,%al
f0117451:	75 e8                	jne    f011743b <strnlen+0xf>
		n++;
	return n;
f0117453:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0117456:	c9                   	leave  
f0117457:	c3                   	ret    

f0117458 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0117458:	55                   	push   %ebp
f0117459:	89 e5                	mov    %esp,%ebp
f011745b:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f011745e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117461:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0117464:	90                   	nop
f0117465:	8b 45 08             	mov    0x8(%ebp),%eax
f0117468:	8d 50 01             	lea    0x1(%eax),%edx
f011746b:	89 55 08             	mov    %edx,0x8(%ebp)
f011746e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117471:	8d 4a 01             	lea    0x1(%edx),%ecx
f0117474:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0117477:	8a 12                	mov    (%edx),%dl
f0117479:	88 10                	mov    %dl,(%eax)
f011747b:	8a 00                	mov    (%eax),%al
f011747d:	84 c0                	test   %al,%al
f011747f:	75 e4                	jne    f0117465 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0117481:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0117484:	c9                   	leave  
f0117485:	c3                   	ret    

f0117486 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0117486:	55                   	push   %ebp
f0117487:	89 e5                	mov    %esp,%ebp
f0117489:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f011748c:	8b 45 08             	mov    0x8(%ebp),%eax
f011748f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0117492:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0117499:	eb 1f                	jmp    f01174ba <strncpy+0x34>
		*dst++ = *src;
f011749b:	8b 45 08             	mov    0x8(%ebp),%eax
f011749e:	8d 50 01             	lea    0x1(%eax),%edx
f01174a1:	89 55 08             	mov    %edx,0x8(%ebp)
f01174a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01174a7:	8a 12                	mov    (%edx),%dl
f01174a9:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01174ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01174ae:	8a 00                	mov    (%eax),%al
f01174b0:	84 c0                	test   %al,%al
f01174b2:	74 03                	je     f01174b7 <strncpy+0x31>
			src++;
f01174b4:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01174b7:	ff 45 fc             	incl   -0x4(%ebp)
f01174ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01174bd:	3b 45 10             	cmp    0x10(%ebp),%eax
f01174c0:	72 d9                	jb     f011749b <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01174c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01174c5:	c9                   	leave  
f01174c6:	c3                   	ret    

f01174c7 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01174c7:	55                   	push   %ebp
f01174c8:	89 e5                	mov    %esp,%ebp
f01174ca:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01174cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01174d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01174d3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01174d7:	74 30                	je     f0117509 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01174d9:	eb 16                	jmp    f01174f1 <strlcpy+0x2a>
			*dst++ = *src++;
f01174db:	8b 45 08             	mov    0x8(%ebp),%eax
f01174de:	8d 50 01             	lea    0x1(%eax),%edx
f01174e1:	89 55 08             	mov    %edx,0x8(%ebp)
f01174e4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01174e7:	8d 4a 01             	lea    0x1(%edx),%ecx
f01174ea:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01174ed:	8a 12                	mov    (%edx),%dl
f01174ef:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f01174f1:	ff 4d 10             	decl   0x10(%ebp)
f01174f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01174f8:	74 09                	je     f0117503 <strlcpy+0x3c>
f01174fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01174fd:	8a 00                	mov    (%eax),%al
f01174ff:	84 c0                	test   %al,%al
f0117501:	75 d8                	jne    f01174db <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0117503:	8b 45 08             	mov    0x8(%ebp),%eax
f0117506:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0117509:	8b 55 08             	mov    0x8(%ebp),%edx
f011750c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011750f:	29 c2                	sub    %eax,%edx
f0117511:	89 d0                	mov    %edx,%eax
}
f0117513:	c9                   	leave  
f0117514:	c3                   	ret    

f0117515 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0117515:	55                   	push   %ebp
f0117516:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0117518:	eb 06                	jmp    f0117520 <strcmp+0xb>
		p++, q++;
f011751a:	ff 45 08             	incl   0x8(%ebp)
f011751d:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0117520:	8b 45 08             	mov    0x8(%ebp),%eax
f0117523:	8a 00                	mov    (%eax),%al
f0117525:	84 c0                	test   %al,%al
f0117527:	74 0e                	je     f0117537 <strcmp+0x22>
f0117529:	8b 45 08             	mov    0x8(%ebp),%eax
f011752c:	8a 10                	mov    (%eax),%dl
f011752e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117531:	8a 00                	mov    (%eax),%al
f0117533:	38 c2                	cmp    %al,%dl
f0117535:	74 e3                	je     f011751a <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0117537:	8b 45 08             	mov    0x8(%ebp),%eax
f011753a:	8a 00                	mov    (%eax),%al
f011753c:	0f b6 d0             	movzbl %al,%edx
f011753f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117542:	8a 00                	mov    (%eax),%al
f0117544:	0f b6 c0             	movzbl %al,%eax
f0117547:	29 c2                	sub    %eax,%edx
f0117549:	89 d0                	mov    %edx,%eax
}
f011754b:	5d                   	pop    %ebp
f011754c:	c3                   	ret    

f011754d <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f011754d:	55                   	push   %ebp
f011754e:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0117550:	eb 09                	jmp    f011755b <strncmp+0xe>
		n--, p++, q++;
f0117552:	ff 4d 10             	decl   0x10(%ebp)
f0117555:	ff 45 08             	incl   0x8(%ebp)
f0117558:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f011755b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011755f:	74 17                	je     f0117578 <strncmp+0x2b>
f0117561:	8b 45 08             	mov    0x8(%ebp),%eax
f0117564:	8a 00                	mov    (%eax),%al
f0117566:	84 c0                	test   %al,%al
f0117568:	74 0e                	je     f0117578 <strncmp+0x2b>
f011756a:	8b 45 08             	mov    0x8(%ebp),%eax
f011756d:	8a 10                	mov    (%eax),%dl
f011756f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117572:	8a 00                	mov    (%eax),%al
f0117574:	38 c2                	cmp    %al,%dl
f0117576:	74 da                	je     f0117552 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0117578:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011757c:	75 07                	jne    f0117585 <strncmp+0x38>
		return 0;
f011757e:	b8 00 00 00 00       	mov    $0x0,%eax
f0117583:	eb 14                	jmp    f0117599 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0117585:	8b 45 08             	mov    0x8(%ebp),%eax
f0117588:	8a 00                	mov    (%eax),%al
f011758a:	0f b6 d0             	movzbl %al,%edx
f011758d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117590:	8a 00                	mov    (%eax),%al
f0117592:	0f b6 c0             	movzbl %al,%eax
f0117595:	29 c2                	sub    %eax,%edx
f0117597:	89 d0                	mov    %edx,%eax
}
f0117599:	5d                   	pop    %ebp
f011759a:	c3                   	ret    

f011759b <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f011759b:	55                   	push   %ebp
f011759c:	89 e5                	mov    %esp,%ebp
f011759e:	83 ec 04             	sub    $0x4,%esp
f01175a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01175a4:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01175a7:	eb 12                	jmp    f01175bb <strchr+0x20>
		if (*s == c)
f01175a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01175ac:	8a 00                	mov    (%eax),%al
f01175ae:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01175b1:	75 05                	jne    f01175b8 <strchr+0x1d>
			return (char *) s;
f01175b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01175b6:	eb 11                	jmp    f01175c9 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01175b8:	ff 45 08             	incl   0x8(%ebp)
f01175bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01175be:	8a 00                	mov    (%eax),%al
f01175c0:	84 c0                	test   %al,%al
f01175c2:	75 e5                	jne    f01175a9 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01175c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01175c9:	c9                   	leave  
f01175ca:	c3                   	ret    

f01175cb <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01175cb:	55                   	push   %ebp
f01175cc:	89 e5                	mov    %esp,%ebp
f01175ce:	83 ec 04             	sub    $0x4,%esp
f01175d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01175d4:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01175d7:	eb 0d                	jmp    f01175e6 <strfind+0x1b>
		if (*s == c)
f01175d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01175dc:	8a 00                	mov    (%eax),%al
f01175de:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01175e1:	74 0e                	je     f01175f1 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01175e3:	ff 45 08             	incl   0x8(%ebp)
f01175e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01175e9:	8a 00                	mov    (%eax),%al
f01175eb:	84 c0                	test   %al,%al
f01175ed:	75 ea                	jne    f01175d9 <strfind+0xe>
f01175ef:	eb 01                	jmp    f01175f2 <strfind+0x27>
		if (*s == c)
			break;
f01175f1:	90                   	nop
	return (char *) s;
f01175f2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01175f5:	c9                   	leave  
f01175f6:	c3                   	ret    

f01175f7 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01175f7:	55                   	push   %ebp
f01175f8:	89 e5                	mov    %esp,%ebp
f01175fa:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01175fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0117600:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0117603:	8b 45 10             	mov    0x10(%ebp),%eax
f0117606:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0117609:	eb 0e                	jmp    f0117619 <memset+0x22>
		*p++ = c;
f011760b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011760e:	8d 50 01             	lea    0x1(%eax),%edx
f0117611:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0117614:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117617:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0117619:	ff 4d f8             	decl   -0x8(%ebp)
f011761c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0117620:	79 e9                	jns    f011760b <memset+0x14>
		*p++ = c;

	return v;
f0117622:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117625:	c9                   	leave  
f0117626:	c3                   	ret    

f0117627 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0117627:	55                   	push   %ebp
f0117628:	89 e5                	mov    %esp,%ebp
f011762a:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f011762d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117630:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0117633:	8b 45 08             	mov    0x8(%ebp),%eax
f0117636:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0117639:	eb 16                	jmp    f0117651 <memcpy+0x2a>
		*d++ = *s++;
f011763b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011763e:	8d 50 01             	lea    0x1(%eax),%edx
f0117641:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0117644:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117647:	8d 4a 01             	lea    0x1(%edx),%ecx
f011764a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f011764d:	8a 12                	mov    (%edx),%dl
f011764f:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0117651:	8b 45 10             	mov    0x10(%ebp),%eax
f0117654:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117657:	89 55 10             	mov    %edx,0x10(%ebp)
f011765a:	85 c0                	test   %eax,%eax
f011765c:	75 dd                	jne    f011763b <memcpy+0x14>
		*d++ = *s++;

	return dst;
f011765e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117661:	c9                   	leave  
f0117662:	c3                   	ret    

f0117663 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0117663:	55                   	push   %ebp
f0117664:	89 e5                	mov    %esp,%ebp
f0117666:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;
	
	s = src;
f0117669:	8b 45 0c             	mov    0xc(%ebp),%eax
f011766c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011766f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117672:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0117675:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117678:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f011767b:	73 50                	jae    f01176cd <memmove+0x6a>
f011767d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117680:	8b 45 10             	mov    0x10(%ebp),%eax
f0117683:	01 d0                	add    %edx,%eax
f0117685:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0117688:	76 43                	jbe    f01176cd <memmove+0x6a>
		s += n;
f011768a:	8b 45 10             	mov    0x10(%ebp),%eax
f011768d:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0117690:	8b 45 10             	mov    0x10(%ebp),%eax
f0117693:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0117696:	eb 10                	jmp    f01176a8 <memmove+0x45>
			*--d = *--s;
f0117698:	ff 4d f8             	decl   -0x8(%ebp)
f011769b:	ff 4d fc             	decl   -0x4(%ebp)
f011769e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01176a1:	8a 10                	mov    (%eax),%dl
f01176a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01176a6:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01176a8:	8b 45 10             	mov    0x10(%ebp),%eax
f01176ab:	8d 50 ff             	lea    -0x1(%eax),%edx
f01176ae:	89 55 10             	mov    %edx,0x10(%ebp)
f01176b1:	85 c0                	test   %eax,%eax
f01176b3:	75 e3                	jne    f0117698 <memmove+0x35>
	const char *s;
	char *d;
	
	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01176b5:	eb 23                	jmp    f01176da <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01176b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01176ba:	8d 50 01             	lea    0x1(%eax),%edx
f01176bd:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01176c0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01176c3:	8d 4a 01             	lea    0x1(%edx),%ecx
f01176c6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01176c9:	8a 12                	mov    (%edx),%dl
f01176cb:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01176cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01176d0:	8d 50 ff             	lea    -0x1(%eax),%edx
f01176d3:	89 55 10             	mov    %edx,0x10(%ebp)
f01176d6:	85 c0                	test   %eax,%eax
f01176d8:	75 dd                	jne    f01176b7 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01176da:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01176dd:	c9                   	leave  
f01176de:	c3                   	ret    

f01176df <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01176df:	55                   	push   %ebp
f01176e0:	89 e5                	mov    %esp,%ebp
f01176e2:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01176e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01176e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01176eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01176ee:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f01176f1:	eb 2a                	jmp    f011771d <memcmp+0x3e>
		if (*s1 != *s2)
f01176f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01176f6:	8a 10                	mov    (%eax),%dl
f01176f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01176fb:	8a 00                	mov    (%eax),%al
f01176fd:	38 c2                	cmp    %al,%dl
f01176ff:	74 16                	je     f0117717 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0117701:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117704:	8a 00                	mov    (%eax),%al
f0117706:	0f b6 d0             	movzbl %al,%edx
f0117709:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011770c:	8a 00                	mov    (%eax),%al
f011770e:	0f b6 c0             	movzbl %al,%eax
f0117711:	29 c2                	sub    %eax,%edx
f0117713:	89 d0                	mov    %edx,%eax
f0117715:	eb 18                	jmp    f011772f <memcmp+0x50>
		s1++, s2++;
f0117717:	ff 45 fc             	incl   -0x4(%ebp)
f011771a:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f011771d:	8b 45 10             	mov    0x10(%ebp),%eax
f0117720:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117723:	89 55 10             	mov    %edx,0x10(%ebp)
f0117726:	85 c0                	test   %eax,%eax
f0117728:	75 c9                	jne    f01176f3 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f011772a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011772f:	c9                   	leave  
f0117730:	c3                   	ret    

f0117731 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0117731:	55                   	push   %ebp
f0117732:	89 e5                	mov    %esp,%ebp
f0117734:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0117737:	8b 55 08             	mov    0x8(%ebp),%edx
f011773a:	8b 45 10             	mov    0x10(%ebp),%eax
f011773d:	01 d0                	add    %edx,%eax
f011773f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0117742:	eb 15                	jmp    f0117759 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0117744:	8b 45 08             	mov    0x8(%ebp),%eax
f0117747:	8a 00                	mov    (%eax),%al
f0117749:	0f b6 d0             	movzbl %al,%edx
f011774c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011774f:	0f b6 c0             	movzbl %al,%eax
f0117752:	39 c2                	cmp    %eax,%edx
f0117754:	74 0d                	je     f0117763 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0117756:	ff 45 08             	incl   0x8(%ebp)
f0117759:	8b 45 08             	mov    0x8(%ebp),%eax
f011775c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011775f:	72 e3                	jb     f0117744 <memfind+0x13>
f0117761:	eb 01                	jmp    f0117764 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0117763:	90                   	nop
	return (void *) s;
f0117764:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117767:	c9                   	leave  
f0117768:	c3                   	ret    

f0117769 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0117769:	55                   	push   %ebp
f011776a:	89 e5                	mov    %esp,%ebp
f011776c:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f011776f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0117776:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011777d:	eb 03                	jmp    f0117782 <strtol+0x19>
		s++;
f011777f:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0117782:	8b 45 08             	mov    0x8(%ebp),%eax
f0117785:	8a 00                	mov    (%eax),%al
f0117787:	3c 20                	cmp    $0x20,%al
f0117789:	74 f4                	je     f011777f <strtol+0x16>
f011778b:	8b 45 08             	mov    0x8(%ebp),%eax
f011778e:	8a 00                	mov    (%eax),%al
f0117790:	3c 09                	cmp    $0x9,%al
f0117792:	74 eb                	je     f011777f <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0117794:	8b 45 08             	mov    0x8(%ebp),%eax
f0117797:	8a 00                	mov    (%eax),%al
f0117799:	3c 2b                	cmp    $0x2b,%al
f011779b:	75 05                	jne    f01177a2 <strtol+0x39>
		s++;
f011779d:	ff 45 08             	incl   0x8(%ebp)
f01177a0:	eb 13                	jmp    f01177b5 <strtol+0x4c>
	else if (*s == '-')
f01177a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01177a5:	8a 00                	mov    (%eax),%al
f01177a7:	3c 2d                	cmp    $0x2d,%al
f01177a9:	75 0a                	jne    f01177b5 <strtol+0x4c>
		s++, neg = 1;
f01177ab:	ff 45 08             	incl   0x8(%ebp)
f01177ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01177b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01177b9:	74 06                	je     f01177c1 <strtol+0x58>
f01177bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01177bf:	75 20                	jne    f01177e1 <strtol+0x78>
f01177c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01177c4:	8a 00                	mov    (%eax),%al
f01177c6:	3c 30                	cmp    $0x30,%al
f01177c8:	75 17                	jne    f01177e1 <strtol+0x78>
f01177ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01177cd:	40                   	inc    %eax
f01177ce:	8a 00                	mov    (%eax),%al
f01177d0:	3c 78                	cmp    $0x78,%al
f01177d2:	75 0d                	jne    f01177e1 <strtol+0x78>
		s += 2, base = 16;
f01177d4:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01177d8:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01177df:	eb 28                	jmp    f0117809 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01177e1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01177e5:	75 15                	jne    f01177fc <strtol+0x93>
f01177e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01177ea:	8a 00                	mov    (%eax),%al
f01177ec:	3c 30                	cmp    $0x30,%al
f01177ee:	75 0c                	jne    f01177fc <strtol+0x93>
		s++, base = 8;
f01177f0:	ff 45 08             	incl   0x8(%ebp)
f01177f3:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01177fa:	eb 0d                	jmp    f0117809 <strtol+0xa0>
	else if (base == 0)
f01177fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117800:	75 07                	jne    f0117809 <strtol+0xa0>
		base = 10;
f0117802:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0117809:	8b 45 08             	mov    0x8(%ebp),%eax
f011780c:	8a 00                	mov    (%eax),%al
f011780e:	3c 2f                	cmp    $0x2f,%al
f0117810:	7e 19                	jle    f011782b <strtol+0xc2>
f0117812:	8b 45 08             	mov    0x8(%ebp),%eax
f0117815:	8a 00                	mov    (%eax),%al
f0117817:	3c 39                	cmp    $0x39,%al
f0117819:	7f 10                	jg     f011782b <strtol+0xc2>
			dig = *s - '0';
f011781b:	8b 45 08             	mov    0x8(%ebp),%eax
f011781e:	8a 00                	mov    (%eax),%al
f0117820:	0f be c0             	movsbl %al,%eax
f0117823:	83 e8 30             	sub    $0x30,%eax
f0117826:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117829:	eb 42                	jmp    f011786d <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f011782b:	8b 45 08             	mov    0x8(%ebp),%eax
f011782e:	8a 00                	mov    (%eax),%al
f0117830:	3c 60                	cmp    $0x60,%al
f0117832:	7e 19                	jle    f011784d <strtol+0xe4>
f0117834:	8b 45 08             	mov    0x8(%ebp),%eax
f0117837:	8a 00                	mov    (%eax),%al
f0117839:	3c 7a                	cmp    $0x7a,%al
f011783b:	7f 10                	jg     f011784d <strtol+0xe4>
			dig = *s - 'a' + 10;
f011783d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117840:	8a 00                	mov    (%eax),%al
f0117842:	0f be c0             	movsbl %al,%eax
f0117845:	83 e8 57             	sub    $0x57,%eax
f0117848:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011784b:	eb 20                	jmp    f011786d <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f011784d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117850:	8a 00                	mov    (%eax),%al
f0117852:	3c 40                	cmp    $0x40,%al
f0117854:	7e 39                	jle    f011788f <strtol+0x126>
f0117856:	8b 45 08             	mov    0x8(%ebp),%eax
f0117859:	8a 00                	mov    (%eax),%al
f011785b:	3c 5a                	cmp    $0x5a,%al
f011785d:	7f 30                	jg     f011788f <strtol+0x126>
			dig = *s - 'A' + 10;
f011785f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117862:	8a 00                	mov    (%eax),%al
f0117864:	0f be c0             	movsbl %al,%eax
f0117867:	83 e8 37             	sub    $0x37,%eax
f011786a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f011786d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117870:	3b 45 10             	cmp    0x10(%ebp),%eax
f0117873:	7d 19                	jge    f011788e <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0117875:	ff 45 08             	incl   0x8(%ebp)
f0117878:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011787b:	0f af 45 10          	imul   0x10(%ebp),%eax
f011787f:	89 c2                	mov    %eax,%edx
f0117881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117884:	01 d0                	add    %edx,%eax
f0117886:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0117889:	e9 7b ff ff ff       	jmp    f0117809 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f011788e:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f011788f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0117893:	74 08                	je     f011789d <strtol+0x134>
		*endptr = (char *) s;
f0117895:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117898:	8b 55 08             	mov    0x8(%ebp),%edx
f011789b:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f011789d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01178a1:	74 07                	je     f01178aa <strtol+0x141>
f01178a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01178a6:	f7 d8                	neg    %eax
f01178a8:	eb 03                	jmp    f01178ad <strtol+0x144>
f01178aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01178ad:	c9                   	leave  
f01178ae:	c3                   	ret    

f01178af <ltostr>:

void
ltostr(long value, char *str)
{
f01178af:	55                   	push   %ebp
f01178b0:	89 e5                	mov    %esp,%ebp
f01178b2:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01178b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01178bc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01178c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01178c7:	79 13                	jns    f01178dc <ltostr+0x2d>
	{
		neg = 1;
f01178c9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01178d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01178d3:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01178d6:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01178d9:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01178dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01178df:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01178e4:	99                   	cltd   
f01178e5:	f7 f9                	idiv   %ecx
f01178e7:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01178ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01178ed:	8d 50 01             	lea    0x1(%eax),%edx
f01178f0:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01178f3:	89 c2                	mov    %eax,%edx
f01178f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01178f8:	01 d0                	add    %edx,%eax
f01178fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01178fd:	83 c2 30             	add    $0x30,%edx
f0117900:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0117902:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0117905:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011790a:	f7 e9                	imul   %ecx
f011790c:	c1 fa 02             	sar    $0x2,%edx
f011790f:	89 c8                	mov    %ecx,%eax
f0117911:	c1 f8 1f             	sar    $0x1f,%eax
f0117914:	29 c2                	sub    %eax,%edx
f0117916:	89 d0                	mov    %edx,%eax
f0117918:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f011791b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f011791e:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0117923:	f7 e9                	imul   %ecx
f0117925:	c1 fa 02             	sar    $0x2,%edx
f0117928:	89 c8                	mov    %ecx,%eax
f011792a:	c1 f8 1f             	sar    $0x1f,%eax
f011792d:	29 c2                	sub    %eax,%edx
f011792f:	89 d0                	mov    %edx,%eax
f0117931:	c1 e0 02             	shl    $0x2,%eax
f0117934:	01 d0                	add    %edx,%eax
f0117936:	01 c0                	add    %eax,%eax
f0117938:	29 c1                	sub    %eax,%ecx
f011793a:	89 ca                	mov    %ecx,%edx
f011793c:	85 d2                	test   %edx,%edx
f011793e:	75 9c                	jne    f01178dc <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0117940:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0117947:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011794a:	48                   	dec    %eax
f011794b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f011794e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0117952:	74 3d                	je     f0117991 <ltostr+0xe2>
		start = 1 ;
f0117954:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f011795b:	eb 34                	jmp    f0117991 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f011795d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117960:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117963:	01 d0                	add    %edx,%eax
f0117965:	8a 00                	mov    (%eax),%al
f0117967:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f011796a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011796d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117970:	01 c2                	add    %eax,%edx
f0117972:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0117975:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117978:	01 c8                	add    %ecx,%eax
f011797a:	8a 00                	mov    (%eax),%al
f011797c:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f011797e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117981:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117984:	01 c2                	add    %eax,%edx
f0117986:	8a 45 eb             	mov    -0x15(%ebp),%al
f0117989:	88 02                	mov    %al,(%edx)
		start++ ;
f011798b:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f011798e:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0117991:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117994:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117997:	7c c4                	jl     f011795d <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0117999:	8b 55 f8             	mov    -0x8(%ebp),%edx
f011799c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011799f:	01 d0                	add    %edx,%eax
f01179a1:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f01179a4:	90                   	nop
f01179a5:	c9                   	leave  
f01179a6:	c3                   	ret    

f01179a7 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f01179a7:	55                   	push   %ebp
f01179a8:	89 e5                	mov    %esp,%ebp
f01179aa:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f01179ad:	ff 75 08             	pushl  0x8(%ebp)
f01179b0:	e8 54 fa ff ff       	call   f0117409 <strlen>
f01179b5:	83 c4 04             	add    $0x4,%esp
f01179b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01179bb:	ff 75 0c             	pushl  0xc(%ebp)
f01179be:	e8 46 fa ff ff       	call   f0117409 <strlen>
f01179c3:	83 c4 04             	add    $0x4,%esp
f01179c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01179c9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01179d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01179d7:	eb 17                	jmp    f01179f0 <strcconcat+0x49>
		final[s] = str1[s] ;
f01179d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01179dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01179df:	01 c2                	add    %eax,%edx
f01179e1:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01179e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01179e7:	01 c8                	add    %ecx,%eax
f01179e9:	8a 00                	mov    (%eax),%al
f01179eb:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01179ed:	ff 45 fc             	incl   -0x4(%ebp)
f01179f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01179f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01179f6:	7c e1                	jl     f01179d9 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01179f8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01179ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0117a06:	eb 1f                	jmp    f0117a27 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0117a08:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117a0b:	8d 50 01             	lea    0x1(%eax),%edx
f0117a0e:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0117a11:	89 c2                	mov    %eax,%edx
f0117a13:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a16:	01 c2                	add    %eax,%edx
f0117a18:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0117a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117a1e:	01 c8                	add    %ecx,%eax
f0117a20:	8a 00                	mov    (%eax),%al
f0117a22:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0117a24:	ff 45 f8             	incl   -0x8(%ebp)
f0117a27:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117a2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117a2d:	7c d9                	jl     f0117a08 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0117a2f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117a32:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a35:	01 d0                	add    %edx,%eax
f0117a37:	c6 00 00             	movb   $0x0,(%eax)
}
f0117a3a:	90                   	nop
f0117a3b:	c9                   	leave  
f0117a3c:	c3                   	ret    

f0117a3d <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0117a3d:	55                   	push   %ebp
f0117a3e:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0117a40:	8b 45 14             	mov    0x14(%ebp),%eax
f0117a43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0117a49:	8b 45 14             	mov    0x14(%ebp),%eax
f0117a4c:	8b 00                	mov    (%eax),%eax
f0117a4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117a55:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a58:	01 d0                	add    %edx,%eax
f0117a5a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0117a60:	eb 0c                	jmp    f0117a6e <strsplit+0x31>
			*string++ = 0;
f0117a62:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a65:	8d 50 01             	lea    0x1(%eax),%edx
f0117a68:	89 55 08             	mov    %edx,0x8(%ebp)
f0117a6b:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0117a6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a71:	8a 00                	mov    (%eax),%al
f0117a73:	84 c0                	test   %al,%al
f0117a75:	74 18                	je     f0117a8f <strsplit+0x52>
f0117a77:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a7a:	8a 00                	mov    (%eax),%al
f0117a7c:	0f be c0             	movsbl %al,%eax
f0117a7f:	50                   	push   %eax
f0117a80:	ff 75 0c             	pushl  0xc(%ebp)
f0117a83:	e8 13 fb ff ff       	call   f011759b <strchr>
f0117a88:	83 c4 08             	add    $0x8,%esp
f0117a8b:	85 c0                	test   %eax,%eax
f0117a8d:	75 d3                	jne    f0117a62 <strsplit+0x25>
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
f0117a8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a92:	8a 00                	mov    (%eax),%al
f0117a94:	84 c0                	test   %al,%al
f0117a96:	74 5a                	je     f0117af2 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1) 
f0117a98:	8b 45 14             	mov    0x14(%ebp),%eax
f0117a9b:	8b 00                	mov    (%eax),%eax
f0117a9d:	83 f8 0f             	cmp    $0xf,%eax
f0117aa0:	75 07                	jne    f0117aa9 <strsplit+0x6c>
		{
			return 0;
f0117aa2:	b8 00 00 00 00       	mov    $0x0,%eax
f0117aa7:	eb 66                	jmp    f0117b0f <strsplit+0xd2>
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0117aa9:	8b 45 14             	mov    0x14(%ebp),%eax
f0117aac:	8b 00                	mov    (%eax),%eax
f0117aae:	8d 48 01             	lea    0x1(%eax),%ecx
f0117ab1:	8b 55 14             	mov    0x14(%ebp),%edx
f0117ab4:	89 0a                	mov    %ecx,(%edx)
f0117ab6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117abd:	8b 45 10             	mov    0x10(%ebp),%eax
f0117ac0:	01 c2                	add    %eax,%edx
f0117ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0117ac5:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117ac7:	eb 03                	jmp    f0117acc <strsplit+0x8f>
			string++;
f0117ac9:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0117acf:	8a 00                	mov    (%eax),%al
f0117ad1:	84 c0                	test   %al,%al
f0117ad3:	74 8b                	je     f0117a60 <strsplit+0x23>
f0117ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0117ad8:	8a 00                	mov    (%eax),%al
f0117ada:	0f be c0             	movsbl %al,%eax
f0117add:	50                   	push   %eax
f0117ade:	ff 75 0c             	pushl  0xc(%ebp)
f0117ae1:	e8 b5 fa ff ff       	call   f011759b <strchr>
f0117ae6:	83 c4 08             	add    $0x8,%esp
f0117ae9:	85 c0                	test   %eax,%eax
f0117aeb:	74 dc                	je     f0117ac9 <strsplit+0x8c>
			string++;
	}
f0117aed:	e9 6e ff ff ff       	jmp    f0117a60 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0117af2:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0117af3:	8b 45 14             	mov    0x14(%ebp),%eax
f0117af6:	8b 00                	mov    (%eax),%eax
f0117af8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117aff:	8b 45 10             	mov    0x10(%ebp),%eax
f0117b02:	01 d0                	add    %edx,%eax
f0117b04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0117b0a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0117b0f:	c9                   	leave  
f0117b10:	c3                   	ret    

f0117b11 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0117b11:	55                   	push   %ebp
f0117b12:	89 e5                	mov    %esp,%ebp
f0117b14:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0117b17:	90                   	nop
f0117b18:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0117b1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117b22:	89 c2                	mov    %eax,%edx
f0117b24:	ec                   	in     (%dx),%al
f0117b25:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0117b28:	8a 45 f7             	mov    -0x9(%ebp),%al
f0117b2b:	0f b6 c0             	movzbl %al,%eax
f0117b2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0117b31:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117b34:	25 c0 00 00 00       	and    $0xc0,%eax
f0117b39:	83 f8 40             	cmp    $0x40,%eax
f0117b3c:	75 da                	jne    f0117b18 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0117b3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117b42:	74 11                	je     f0117b55 <ide_wait_ready+0x44>
f0117b44:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117b47:	83 e0 21             	and    $0x21,%eax
f0117b4a:	85 c0                	test   %eax,%eax
f0117b4c:	74 07                	je     f0117b55 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0117b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0117b53:	eb 05                	jmp    f0117b5a <ide_wait_ready+0x49>
	}
	return 0;
f0117b55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117b5a:	c9                   	leave  
f0117b5b:	c3                   	ret    

f0117b5c <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0117b5c:	55                   	push   %ebp
f0117b5d:	89 e5                	mov    %esp,%ebp
f0117b5f:	57                   	push   %edi
f0117b60:	53                   	push   %ebx
f0117b61:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0117b64:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0117b6b:	76 16                	jbe    f0117b83 <ide_read+0x27>
f0117b6d:	68 83 c7 11 f0       	push   $0xf011c783
f0117b72:	68 90 c7 11 f0       	push   $0xf011c790
f0117b77:	6a 25                	push   $0x25
f0117b79:	68 a5 c7 11 f0       	push   $0xf011c7a5
f0117b7e:	e8 f3 85 fe ff       	call   f0100176 <_panic>

	//TODOFUTUREWORK: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0117b83:	83 ec 0c             	sub    $0xc,%esp
f0117b86:	6a 00                	push   $0x0
f0117b88:	e8 84 ff ff ff       	call   f0117b11 <ide_wait_ready>
f0117b8d:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0117b90:	8b 45 10             	mov    0x10(%ebp),%eax
f0117b93:	0f b6 c0             	movzbl %al,%eax
f0117b96:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0117b9d:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0117ba0:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0117ba3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117ba6:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0117ba7:	8b 45 08             	mov    0x8(%ebp),%eax
f0117baa:	0f b6 c0             	movzbl %al,%eax
f0117bad:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0117bb4:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0117bb7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0117bba:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117bbd:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0117bbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bc1:	c1 e8 08             	shr    $0x8,%eax
f0117bc4:	0f b6 c0             	movzbl %al,%eax
f0117bc7:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0117bce:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0117bd1:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0117bd4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117bd7:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0117bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bdb:	c1 e8 10             	shr    $0x10,%eax
f0117bde:	0f b6 c0             	movzbl %al,%eax
f0117be1:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0117be8:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0117beb:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0117bee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117bf1:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0117bf2:	a1 10 32 53 f0       	mov    0xf0533210,%eax
f0117bf7:	83 e0 01             	and    $0x1,%eax
f0117bfa:	c1 e0 04             	shl    $0x4,%eax
f0117bfd:	88 c2                	mov    %al,%dl
f0117bff:	8b 45 08             	mov    0x8(%ebp),%eax
f0117c02:	c1 e8 18             	shr    $0x18,%eax
f0117c05:	83 e0 0f             	and    $0xf,%eax
f0117c08:	09 d0                	or     %edx,%eax
f0117c0a:	83 c8 e0             	or     $0xffffffe0,%eax
f0117c0d:	0f b6 c0             	movzbl %al,%eax
f0117c10:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0117c17:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0117c1a:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0117c1d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117c20:	ee                   	out    %al,(%dx)
f0117c21:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0117c28:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0117c2c:	8a 45 d7             	mov    -0x29(%ebp),%al
f0117c2f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117c32:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0117c33:	eb 55                	jmp    f0117c8a <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0117c35:	83 ec 0c             	sub    $0xc,%esp
f0117c38:	6a 01                	push   $0x1
f0117c3a:	e8 d2 fe ff ff       	call   f0117b11 <ide_wait_ready>
f0117c3f:	83 c4 10             	add    $0x10,%esp
f0117c42:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117c45:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0117c49:	79 05                	jns    f0117c50 <ide_read+0xf4>
			return r;
f0117c4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c4e:	eb 45                	jmp    f0117c95 <ide_read+0x139>
f0117c50:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0117c57:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117c5a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117c5d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0117c64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117c67:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0117c6a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c6d:	89 cb                	mov    %ecx,%ebx
f0117c6f:	89 df                	mov    %ebx,%edi
f0117c71:	89 c1                	mov    %eax,%ecx
f0117c73:	fc                   	cld    
f0117c74:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0117c76:	89 c8                	mov    %ecx,%eax
f0117c78:	89 fb                	mov    %edi,%ebx
f0117c7a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0117c7d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0117c80:	ff 4d 10             	decl   0x10(%ebp)
f0117c83:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0117c8a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117c8e:	75 a5                	jne    f0117c35 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0117c90:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117c95:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117c98:	5b                   	pop    %ebx
f0117c99:	5f                   	pop    %edi
f0117c9a:	5d                   	pop    %ebp
f0117c9b:	c3                   	ret    

f0117c9c <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0117c9c:	55                   	push   %ebp
f0117c9d:	89 e5                	mov    %esp,%ebp
f0117c9f:	56                   	push   %esi
f0117ca0:	53                   	push   %ebx
f0117ca1:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0117ca4:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0117cab:	76 16                	jbe    f0117cc3 <ide_write+0x27>
f0117cad:	68 83 c7 11 f0       	push   $0xf011c783
f0117cb2:	68 90 c7 11 f0       	push   $0xf011c790
f0117cb7:	6a 3f                	push   $0x3f
f0117cb9:	68 a5 c7 11 f0       	push   $0xf011c7a5
f0117cbe:	e8 b3 84 fe ff       	call   f0100176 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0117cc3:	83 ec 0c             	sub    $0xc,%esp
f0117cc6:	6a 00                	push   $0x0
f0117cc8:	e8 44 fe ff ff       	call   f0117b11 <ide_wait_ready>
f0117ccd:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0117cd0:	8b 45 10             	mov    0x10(%ebp),%eax
f0117cd3:	0f b6 c0             	movzbl %al,%eax
f0117cd6:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0117cdd:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0117ce0:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0117ce3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117ce6:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0117ce7:	8b 45 08             	mov    0x8(%ebp),%eax
f0117cea:	0f b6 c0             	movzbl %al,%eax
f0117ced:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0117cf4:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0117cf7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0117cfa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117cfd:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0117cfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0117d01:	c1 e8 08             	shr    $0x8,%eax
f0117d04:	0f b6 c0             	movzbl %al,%eax
f0117d07:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0117d0e:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0117d11:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0117d14:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117d17:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0117d18:	8b 45 08             	mov    0x8(%ebp),%eax
f0117d1b:	c1 e8 10             	shr    $0x10,%eax
f0117d1e:	0f b6 c0             	movzbl %al,%eax
f0117d21:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0117d28:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0117d2b:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0117d2e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117d31:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0117d32:	a1 10 32 53 f0       	mov    0xf0533210,%eax
f0117d37:	83 e0 01             	and    $0x1,%eax
f0117d3a:	c1 e0 04             	shl    $0x4,%eax
f0117d3d:	88 c2                	mov    %al,%dl
f0117d3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117d42:	c1 e8 18             	shr    $0x18,%eax
f0117d45:	83 e0 0f             	and    $0xf,%eax
f0117d48:	09 d0                	or     %edx,%eax
f0117d4a:	83 c8 e0             	or     $0xffffffe0,%eax
f0117d4d:	0f b6 c0             	movzbl %al,%eax
f0117d50:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0117d57:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0117d5a:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0117d5d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117d60:	ee                   	out    %al,(%dx)
f0117d61:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0117d68:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0117d6c:	8a 45 d7             	mov    -0x29(%ebp),%al
f0117d6f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117d72:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0117d73:	eb 55                	jmp    f0117dca <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0117d75:	83 ec 0c             	sub    $0xc,%esp
f0117d78:	6a 01                	push   $0x1
f0117d7a:	e8 92 fd ff ff       	call   f0117b11 <ide_wait_ready>
f0117d7f:	83 c4 10             	add    $0x10,%esp
f0117d82:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117d85:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0117d89:	79 05                	jns    f0117d90 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0117d8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117d8e:	eb 45                	jmp    f0117dd5 <ide_write+0x139>
f0117d90:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0117d97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d9a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117d9d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0117da4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117da7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0117daa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117dad:	89 cb                	mov    %ecx,%ebx
f0117daf:	89 de                	mov    %ebx,%esi
f0117db1:	89 c1                	mov    %eax,%ecx
f0117db3:	fc                   	cld    
f0117db4:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0117db6:	89 c8                	mov    %ecx,%eax
f0117db8:	89 f3                	mov    %esi,%ebx
f0117dba:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0117dbd:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0117dc0:	ff 4d 10             	decl   0x10(%ebp)
f0117dc3:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0117dca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117dce:	75 a5                	jne    f0117d75 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0117dd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117dd5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117dd8:	5b                   	pop    %ebx
f0117dd9:	5e                   	pop    %esi
f0117dda:	5d                   	pop    %ebp
f0117ddb:	c3                   	ret    

f0117ddc <__udivdi3>:
f0117ddc:	55                   	push   %ebp
f0117ddd:	57                   	push   %edi
f0117dde:	56                   	push   %esi
f0117ddf:	53                   	push   %ebx
f0117de0:	83 ec 1c             	sub    $0x1c,%esp
f0117de3:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0117de7:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0117deb:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0117def:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0117df3:	89 ca                	mov    %ecx,%edx
f0117df5:	89 f8                	mov    %edi,%eax
f0117df7:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0117dfb:	85 f6                	test   %esi,%esi
f0117dfd:	75 2d                	jne    f0117e2c <__udivdi3+0x50>
f0117dff:	39 cf                	cmp    %ecx,%edi
f0117e01:	77 65                	ja     f0117e68 <__udivdi3+0x8c>
f0117e03:	89 fd                	mov    %edi,%ebp
f0117e05:	85 ff                	test   %edi,%edi
f0117e07:	75 0b                	jne    f0117e14 <__udivdi3+0x38>
f0117e09:	b8 01 00 00 00       	mov    $0x1,%eax
f0117e0e:	31 d2                	xor    %edx,%edx
f0117e10:	f7 f7                	div    %edi
f0117e12:	89 c5                	mov    %eax,%ebp
f0117e14:	31 d2                	xor    %edx,%edx
f0117e16:	89 c8                	mov    %ecx,%eax
f0117e18:	f7 f5                	div    %ebp
f0117e1a:	89 c1                	mov    %eax,%ecx
f0117e1c:	89 d8                	mov    %ebx,%eax
f0117e1e:	f7 f5                	div    %ebp
f0117e20:	89 cf                	mov    %ecx,%edi
f0117e22:	89 fa                	mov    %edi,%edx
f0117e24:	83 c4 1c             	add    $0x1c,%esp
f0117e27:	5b                   	pop    %ebx
f0117e28:	5e                   	pop    %esi
f0117e29:	5f                   	pop    %edi
f0117e2a:	5d                   	pop    %ebp
f0117e2b:	c3                   	ret    
f0117e2c:	39 ce                	cmp    %ecx,%esi
f0117e2e:	77 28                	ja     f0117e58 <__udivdi3+0x7c>
f0117e30:	0f bd fe             	bsr    %esi,%edi
f0117e33:	83 f7 1f             	xor    $0x1f,%edi
f0117e36:	75 40                	jne    f0117e78 <__udivdi3+0x9c>
f0117e38:	39 ce                	cmp    %ecx,%esi
f0117e3a:	72 0a                	jb     f0117e46 <__udivdi3+0x6a>
f0117e3c:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0117e40:	0f 87 9e 00 00 00    	ja     f0117ee4 <__udivdi3+0x108>
f0117e46:	b8 01 00 00 00       	mov    $0x1,%eax
f0117e4b:	89 fa                	mov    %edi,%edx
f0117e4d:	83 c4 1c             	add    $0x1c,%esp
f0117e50:	5b                   	pop    %ebx
f0117e51:	5e                   	pop    %esi
f0117e52:	5f                   	pop    %edi
f0117e53:	5d                   	pop    %ebp
f0117e54:	c3                   	ret    
f0117e55:	8d 76 00             	lea    0x0(%esi),%esi
f0117e58:	31 ff                	xor    %edi,%edi
f0117e5a:	31 c0                	xor    %eax,%eax
f0117e5c:	89 fa                	mov    %edi,%edx
f0117e5e:	83 c4 1c             	add    $0x1c,%esp
f0117e61:	5b                   	pop    %ebx
f0117e62:	5e                   	pop    %esi
f0117e63:	5f                   	pop    %edi
f0117e64:	5d                   	pop    %ebp
f0117e65:	c3                   	ret    
f0117e66:	66 90                	xchg   %ax,%ax
f0117e68:	89 d8                	mov    %ebx,%eax
f0117e6a:	f7 f7                	div    %edi
f0117e6c:	31 ff                	xor    %edi,%edi
f0117e6e:	89 fa                	mov    %edi,%edx
f0117e70:	83 c4 1c             	add    $0x1c,%esp
f0117e73:	5b                   	pop    %ebx
f0117e74:	5e                   	pop    %esi
f0117e75:	5f                   	pop    %edi
f0117e76:	5d                   	pop    %ebp
f0117e77:	c3                   	ret    
f0117e78:	bd 20 00 00 00       	mov    $0x20,%ebp
f0117e7d:	89 eb                	mov    %ebp,%ebx
f0117e7f:	29 fb                	sub    %edi,%ebx
f0117e81:	89 f9                	mov    %edi,%ecx
f0117e83:	d3 e6                	shl    %cl,%esi
f0117e85:	89 c5                	mov    %eax,%ebp
f0117e87:	88 d9                	mov    %bl,%cl
f0117e89:	d3 ed                	shr    %cl,%ebp
f0117e8b:	89 e9                	mov    %ebp,%ecx
f0117e8d:	09 f1                	or     %esi,%ecx
f0117e8f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0117e93:	89 f9                	mov    %edi,%ecx
f0117e95:	d3 e0                	shl    %cl,%eax
f0117e97:	89 c5                	mov    %eax,%ebp
f0117e99:	89 d6                	mov    %edx,%esi
f0117e9b:	88 d9                	mov    %bl,%cl
f0117e9d:	d3 ee                	shr    %cl,%esi
f0117e9f:	89 f9                	mov    %edi,%ecx
f0117ea1:	d3 e2                	shl    %cl,%edx
f0117ea3:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117ea7:	88 d9                	mov    %bl,%cl
f0117ea9:	d3 e8                	shr    %cl,%eax
f0117eab:	09 c2                	or     %eax,%edx
f0117ead:	89 d0                	mov    %edx,%eax
f0117eaf:	89 f2                	mov    %esi,%edx
f0117eb1:	f7 74 24 0c          	divl   0xc(%esp)
f0117eb5:	89 d6                	mov    %edx,%esi
f0117eb7:	89 c3                	mov    %eax,%ebx
f0117eb9:	f7 e5                	mul    %ebp
f0117ebb:	39 d6                	cmp    %edx,%esi
f0117ebd:	72 19                	jb     f0117ed8 <__udivdi3+0xfc>
f0117ebf:	74 0b                	je     f0117ecc <__udivdi3+0xf0>
f0117ec1:	89 d8                	mov    %ebx,%eax
f0117ec3:	31 ff                	xor    %edi,%edi
f0117ec5:	e9 58 ff ff ff       	jmp    f0117e22 <__udivdi3+0x46>
f0117eca:	66 90                	xchg   %ax,%ax
f0117ecc:	8b 54 24 08          	mov    0x8(%esp),%edx
f0117ed0:	89 f9                	mov    %edi,%ecx
f0117ed2:	d3 e2                	shl    %cl,%edx
f0117ed4:	39 c2                	cmp    %eax,%edx
f0117ed6:	73 e9                	jae    f0117ec1 <__udivdi3+0xe5>
f0117ed8:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0117edb:	31 ff                	xor    %edi,%edi
f0117edd:	e9 40 ff ff ff       	jmp    f0117e22 <__udivdi3+0x46>
f0117ee2:	66 90                	xchg   %ax,%ax
f0117ee4:	31 c0                	xor    %eax,%eax
f0117ee6:	e9 37 ff ff ff       	jmp    f0117e22 <__udivdi3+0x46>
f0117eeb:	90                   	nop

f0117eec <__umoddi3>:
f0117eec:	55                   	push   %ebp
f0117eed:	57                   	push   %edi
f0117eee:	56                   	push   %esi
f0117eef:	53                   	push   %ebx
f0117ef0:	83 ec 1c             	sub    $0x1c,%esp
f0117ef3:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0117ef7:	8b 74 24 34          	mov    0x34(%esp),%esi
f0117efb:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0117eff:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0117f03:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0117f07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0117f0b:	89 f3                	mov    %esi,%ebx
f0117f0d:	89 fa                	mov    %edi,%edx
f0117f0f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0117f13:	89 34 24             	mov    %esi,(%esp)
f0117f16:	85 c0                	test   %eax,%eax
f0117f18:	75 1a                	jne    f0117f34 <__umoddi3+0x48>
f0117f1a:	39 f7                	cmp    %esi,%edi
f0117f1c:	0f 86 a2 00 00 00    	jbe    f0117fc4 <__umoddi3+0xd8>
f0117f22:	89 c8                	mov    %ecx,%eax
f0117f24:	89 f2                	mov    %esi,%edx
f0117f26:	f7 f7                	div    %edi
f0117f28:	89 d0                	mov    %edx,%eax
f0117f2a:	31 d2                	xor    %edx,%edx
f0117f2c:	83 c4 1c             	add    $0x1c,%esp
f0117f2f:	5b                   	pop    %ebx
f0117f30:	5e                   	pop    %esi
f0117f31:	5f                   	pop    %edi
f0117f32:	5d                   	pop    %ebp
f0117f33:	c3                   	ret    
f0117f34:	39 f0                	cmp    %esi,%eax
f0117f36:	0f 87 ac 00 00 00    	ja     f0117fe8 <__umoddi3+0xfc>
f0117f3c:	0f bd e8             	bsr    %eax,%ebp
f0117f3f:	83 f5 1f             	xor    $0x1f,%ebp
f0117f42:	0f 84 ac 00 00 00    	je     f0117ff4 <__umoddi3+0x108>
f0117f48:	bf 20 00 00 00       	mov    $0x20,%edi
f0117f4d:	29 ef                	sub    %ebp,%edi
f0117f4f:	89 fe                	mov    %edi,%esi
f0117f51:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0117f55:	89 e9                	mov    %ebp,%ecx
f0117f57:	d3 e0                	shl    %cl,%eax
f0117f59:	89 d7                	mov    %edx,%edi
f0117f5b:	89 f1                	mov    %esi,%ecx
f0117f5d:	d3 ef                	shr    %cl,%edi
f0117f5f:	09 c7                	or     %eax,%edi
f0117f61:	89 e9                	mov    %ebp,%ecx
f0117f63:	d3 e2                	shl    %cl,%edx
f0117f65:	89 14 24             	mov    %edx,(%esp)
f0117f68:	89 d8                	mov    %ebx,%eax
f0117f6a:	d3 e0                	shl    %cl,%eax
f0117f6c:	89 c2                	mov    %eax,%edx
f0117f6e:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117f72:	d3 e0                	shl    %cl,%eax
f0117f74:	89 44 24 04          	mov    %eax,0x4(%esp)
f0117f78:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117f7c:	89 f1                	mov    %esi,%ecx
f0117f7e:	d3 e8                	shr    %cl,%eax
f0117f80:	09 d0                	or     %edx,%eax
f0117f82:	d3 eb                	shr    %cl,%ebx
f0117f84:	89 da                	mov    %ebx,%edx
f0117f86:	f7 f7                	div    %edi
f0117f88:	89 d3                	mov    %edx,%ebx
f0117f8a:	f7 24 24             	mull   (%esp)
f0117f8d:	89 c6                	mov    %eax,%esi
f0117f8f:	89 d1                	mov    %edx,%ecx
f0117f91:	39 d3                	cmp    %edx,%ebx
f0117f93:	0f 82 87 00 00 00    	jb     f0118020 <__umoddi3+0x134>
f0117f99:	0f 84 91 00 00 00    	je     f0118030 <__umoddi3+0x144>
f0117f9f:	8b 54 24 04          	mov    0x4(%esp),%edx
f0117fa3:	29 f2                	sub    %esi,%edx
f0117fa5:	19 cb                	sbb    %ecx,%ebx
f0117fa7:	89 d8                	mov    %ebx,%eax
f0117fa9:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0117fad:	d3 e0                	shl    %cl,%eax
f0117faf:	89 e9                	mov    %ebp,%ecx
f0117fb1:	d3 ea                	shr    %cl,%edx
f0117fb3:	09 d0                	or     %edx,%eax
f0117fb5:	89 e9                	mov    %ebp,%ecx
f0117fb7:	d3 eb                	shr    %cl,%ebx
f0117fb9:	89 da                	mov    %ebx,%edx
f0117fbb:	83 c4 1c             	add    $0x1c,%esp
f0117fbe:	5b                   	pop    %ebx
f0117fbf:	5e                   	pop    %esi
f0117fc0:	5f                   	pop    %edi
f0117fc1:	5d                   	pop    %ebp
f0117fc2:	c3                   	ret    
f0117fc3:	90                   	nop
f0117fc4:	89 fd                	mov    %edi,%ebp
f0117fc6:	85 ff                	test   %edi,%edi
f0117fc8:	75 0b                	jne    f0117fd5 <__umoddi3+0xe9>
f0117fca:	b8 01 00 00 00       	mov    $0x1,%eax
f0117fcf:	31 d2                	xor    %edx,%edx
f0117fd1:	f7 f7                	div    %edi
f0117fd3:	89 c5                	mov    %eax,%ebp
f0117fd5:	89 f0                	mov    %esi,%eax
f0117fd7:	31 d2                	xor    %edx,%edx
f0117fd9:	f7 f5                	div    %ebp
f0117fdb:	89 c8                	mov    %ecx,%eax
f0117fdd:	f7 f5                	div    %ebp
f0117fdf:	89 d0                	mov    %edx,%eax
f0117fe1:	e9 44 ff ff ff       	jmp    f0117f2a <__umoddi3+0x3e>
f0117fe6:	66 90                	xchg   %ax,%ax
f0117fe8:	89 c8                	mov    %ecx,%eax
f0117fea:	89 f2                	mov    %esi,%edx
f0117fec:	83 c4 1c             	add    $0x1c,%esp
f0117fef:	5b                   	pop    %ebx
f0117ff0:	5e                   	pop    %esi
f0117ff1:	5f                   	pop    %edi
f0117ff2:	5d                   	pop    %ebp
f0117ff3:	c3                   	ret    
f0117ff4:	3b 04 24             	cmp    (%esp),%eax
f0117ff7:	72 06                	jb     f0117fff <__umoddi3+0x113>
f0117ff9:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0117ffd:	77 0f                	ja     f011800e <__umoddi3+0x122>
f0117fff:	89 f2                	mov    %esi,%edx
f0118001:	29 f9                	sub    %edi,%ecx
f0118003:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0118007:	89 14 24             	mov    %edx,(%esp)
f011800a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011800e:	8b 44 24 04          	mov    0x4(%esp),%eax
f0118012:	8b 14 24             	mov    (%esp),%edx
f0118015:	83 c4 1c             	add    $0x1c,%esp
f0118018:	5b                   	pop    %ebx
f0118019:	5e                   	pop    %esi
f011801a:	5f                   	pop    %edi
f011801b:	5d                   	pop    %ebp
f011801c:	c3                   	ret    
f011801d:	8d 76 00             	lea    0x0(%esi),%esi
f0118020:	2b 04 24             	sub    (%esp),%eax
f0118023:	19 fa                	sbb    %edi,%edx
f0118025:	89 d1                	mov    %edx,%ecx
f0118027:	89 c6                	mov    %eax,%esi
f0118029:	e9 71 ff ff ff       	jmp    f0117f9f <__umoddi3+0xb3>
f011802e:	66 90                	xchg   %ax,%ax
f0118030:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0118034:	72 ea                	jb     f0118020 <__umoddi3+0x134>
f0118036:	89 d9                	mov    %ebx,%ecx
f0118038:	e9 62 ff ff ff       	jmp    f0117f9f <__umoddi3+0xb3>
