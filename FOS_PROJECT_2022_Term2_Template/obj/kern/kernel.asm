
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 d0 14 00 	lgdtl  0x14d018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc cf 14 f0       	mov    $0xf014cfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();


//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba 08 b7 d4 f0       	mov    $0xf0d4b708,%edx
f010004a:	b8 e2 c6 52 f0       	mov    $0xf052c6e2,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 e2 c6 52 f0       	push   $0xf052c6e2
f010005e:	e8 60 70 01 00       	call   f01170c3 <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 52 0c 00 00       	call   f0100cbd <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 8d 00 00 00       	call   f01000fd <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 3b 2b 00 00       	call   f0102bb0 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 80 31 00 00       	call   f01031fa <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 9d 35 00 00       	call   f010361c <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 06 61 00 00       	call   f010618a <env_init>
	idt_init();
f0100084:	e8 5d 6d 00 00       	call   f0106de6 <idt_init>

	setPageReplacmentAlgorithmModifiedCLOCK();
f0100089:	e8 66 82 00 00       	call   f01082f4 <setPageReplacmentAlgorithmModifiedCLOCK>
	setUHeapPlacementStrategyNEXTFIT();
f010008e:	e8 f1 51 00 00       	call   f0105284 <setUHeapPlacementStrategyNEXTFIT>
	setKHeapPlacementStrategyNEXTFIT();
f0100093:	e8 a8 52 00 00       	call   f0105340 <setKHeapPlacementStrategyNEXTFIT>
	enableBuffering(0);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 00                	push   $0x0
f010009d:	e8 e6 82 00 00       	call   f0108388 <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 00                	push   $0x0
f01000aa:	e8 c1 82 00 00       	call   f0108370 <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	//TODODONE: remove this line
	chksch(1);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	6a 01                	push   $0x1
f01000b7:	e8 52 4f 01 00       	call   f011500e <chksch>
f01000bc:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000bf:	e8 02 6b 00 00       	call   f0106bc6 <pic_init>

	kclock_start(CLOCK_INTERVAL_IN_MS);
f01000c4:	83 ec 0c             	sub    $0xc,%esp
f01000c7:	6a 0a                	push   $0xa
f01000c9:	e8 cd 68 00 00       	call   f010699b <kclock_start>
f01000ce:	83 c4 10             	add    $0x10,%esp
	sched_init() ;
f01000d1:	e8 d3 8b 00 00       	call   f0108ca9 <sched_init>

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f01000d6:	83 ec 0c             	sub    $0xc,%esp
f01000d9:	68 20 7b 11 f0       	push   $0xf0117b20
f01000de:	e8 b2 6c 00 00       	call   f0106d95 <cprintf>
f01000e3:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f01000e6:	83 ec 0c             	sub    $0xc,%esp
f01000e9:	68 4c 7b 11 f0       	push   $0xf0117b4c
f01000ee:	e8 a2 6c 00 00       	call   f0106d95 <cprintf>
f01000f3:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f01000f6:	e8 f9 16 00 00       	call   f01017f4 <run_command_prompt>
	}
f01000fb:	eb d9                	jmp    f01000d6 <FOS_initialize+0x97>

f01000fd <print_welcome_message>:
}


void print_welcome_message()
{
f01000fd:	55                   	push   %ebp
f01000fe:	89 e5                	mov    %esp,%ebp
f0100100:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	68 71 7b 11 f0       	push   $0xf0117b71
f010010b:	e8 85 6c 00 00       	call   f0106d95 <cprintf>
f0100110:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100113:	83 ec 0c             	sub    $0xc,%esp
f0100116:	68 78 7b 11 f0       	push   $0xf0117b78
f010011b:	e8 75 6c 00 00       	call   f0106d95 <cprintf>
f0100120:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100123:	83 ec 0c             	sub    $0xc,%esp
f0100126:	68 c0 7b 11 f0       	push   $0xf0117bc0
f010012b:	e8 65 6c 00 00       	call   f0106d95 <cprintf>
f0100130:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 08 7c 11 f0       	push   $0xf0117c08
f010013b:	e8 55 6c 00 00       	call   f0106d95 <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 c0 7b 11 f0       	push   $0xf0117bc0
f010014b:	e8 45 6c 00 00       	call   f0106d95 <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 78 7b 11 f0       	push   $0xf0117b78
f010015b:	e8 35 6c 00 00       	call   f0106d95 <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 4d 7c 11 f0       	push   $0xf0117c4d
f010016b:	e8 25 6c 00 00       	call   f0106d95 <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
}
f0100173:	90                   	nop
f0100174:	c9                   	leave  
f0100175:	c3                   	ret    

f0100176 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100176:	55                   	push   %ebp
f0100177:	89 e5                	mov    %esp,%ebp
f0100179:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010017c:	8b 45 10             	mov    0x10(%ebp),%eax
f010017f:	a3 00 c7 52 f0       	mov    %eax,0xf052c700

	va_start(ap, fmt);
f0100184:	8d 45 10             	lea    0x10(%ebp),%eax
f0100187:	83 c0 04             	add    $0x4,%eax
f010018a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010018d:	83 ec 04             	sub    $0x4,%esp
f0100190:	ff 75 0c             	pushl  0xc(%ebp)
f0100193:	ff 75 08             	pushl  0x8(%ebp)
f0100196:	68 52 7c 11 f0       	push   $0xf0117c52
f010019b:	e8 f5 6b 00 00       	call   f0106d95 <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001a6:	83 ec 08             	sub    $0x8,%esp
f01001a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001ac:	50                   	push   %eax
f01001ad:	e8 ba 6b 00 00       	call   f0106d6c <vcprintf>
f01001b2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001b5:	83 ec 0c             	sub    $0xc,%esp
f01001b8:	68 6b 7c 11 f0       	push   $0xf0117c6b
f01001bd:	e8 d3 6b 00 00       	call   f0106d95 <cprintf>
f01001c2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001c5:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01001ca:	85 c0                	test   %eax,%eax
f01001cc:	74 12                	je     f01001e0 <_panic+0x6a>
f01001ce:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01001d3:	8b 40 54             	mov    0x54(%eax),%eax
f01001d6:	83 f8 02             	cmp    $0x2,%eax
f01001d9:	75 05                	jne    f01001e0 <_panic+0x6a>
	{
		//2015
		env_exit();
f01001db:	e8 42 66 00 00       	call   f0106822 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f01001e0:	e8 4d 89 00 00       	call   f0108b32 <fos_scheduler>

f01001e5 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all ready env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01001e5:	55                   	push   %ebp
f01001e6:	89 e5                	mov    %esp,%ebp
f01001e8:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001eb:	8b 45 10             	mov    0x10(%ebp),%eax
f01001ee:	a3 00 c7 52 f0       	mov    %eax,0xf052c700

	va_start(ap, fmt);
f01001f3:	8d 45 10             	lea    0x10(%ebp),%eax
f01001f6:	83 c0 04             	add    $0x4,%eax
f01001f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001fc:	83 ec 04             	sub    $0x4,%esp
f01001ff:	ff 75 0c             	pushl  0xc(%ebp)
f0100202:	ff 75 08             	pushl  0x8(%ebp)
f0100205:	68 52 7c 11 f0       	push   $0xf0117c52
f010020a:	e8 86 6b 00 00       	call   f0106d95 <cprintf>
f010020f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100212:	8b 45 10             	mov    0x10(%ebp),%eax
f0100215:	83 ec 08             	sub    $0x8,%esp
f0100218:	ff 75 f4             	pushl  -0xc(%ebp)
f010021b:	50                   	push   %eax
f010021c:	e8 4b 6b 00 00       	call   f0106d6c <vcprintf>
f0100221:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100224:	83 ec 0c             	sub    $0xc,%esp
f0100227:	68 6b 7c 11 f0       	push   $0xf0117c6b
f010022c:	e8 64 6b 00 00       	call   f0106d95 <cprintf>
f0100231:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100234:	e8 bc 95 00 00       	call   f01097f5 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100239:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010023e:	85 c0                	test   %eax,%eax
f0100240:	74 14                	je     f0100256 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100242:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0100247:	8b 40 4c             	mov    0x4c(%eax),%eax
f010024a:	83 ec 0c             	sub    $0xc,%esp
f010024d:	50                   	push   %eax
f010024e:	e8 89 93 00 00       	call   f01095dc <sched_exit_env>
f0100253:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100256:	e8 d7 88 00 00       	call   f0108b32 <fos_scheduler>

f010025b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010025b:	55                   	push   %ebp
f010025c:	89 e5                	mov    %esp,%ebp
f010025e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100261:	8b 45 10             	mov    0x10(%ebp),%eax
f0100264:	a3 00 c7 52 f0       	mov    %eax,0xf052c700

	va_start(ap, fmt);
f0100269:	8d 45 10             	lea    0x10(%ebp),%eax
f010026c:	83 c0 04             	add    $0x4,%eax
f010026f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100272:	83 ec 04             	sub    $0x4,%esp
f0100275:	ff 75 0c             	pushl  0xc(%ebp)
f0100278:	ff 75 08             	pushl  0x8(%ebp)
f010027b:	68 52 7c 11 f0       	push   $0xf0117c52
f0100280:	e8 10 6b 00 00       	call   f0106d95 <cprintf>
f0100285:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100288:	8b 45 10             	mov    0x10(%ebp),%eax
f010028b:	83 ec 08             	sub    $0x8,%esp
f010028e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100291:	50                   	push   %eax
f0100292:	e8 d5 6a 00 00       	call   f0106d6c <vcprintf>
f0100297:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010029a:	83 ec 0c             	sub    $0xc,%esp
f010029d:	68 6b 7c 11 f0       	push   $0xf0117c6b
f01002a2:	e8 ee 6a 00 00       	call   f0106d95 <cprintf>
f01002a7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002aa:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01002af:	85 c0                	test   %eax,%eax
f01002b1:	74 28                	je     f01002db <_panic_into_prompt+0x80>
f01002b3:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01002b8:	8b 40 54             	mov    0x54(%eax),%eax
f01002bb:	83 f8 02             	cmp    $0x2,%eax
f01002be:	75 1b                	jne    f01002db <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002c0:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01002c5:	83 ec 0c             	sub    $0xc,%esp
f01002c8:	50                   	push   %eax
f01002c9:	e8 19 8c 00 00       	call   f0108ee7 <sched_insert_exit>
f01002ce:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01002d1:	c7 05 50 c9 52 f0 00 	movl   $0x0,0xf052c950
f01002d8:	00 00 00 
	}

	lcr3(phys_page_directory);
f01002db:	a1 d8 b6 54 f0       	mov    0xf054b6d8,%eax
f01002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002e6:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f01002e9:	c7 05 58 d2 52 f0 00 	movl   $0x0,0xf052d258
f01002f0:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f01002f3:	83 ec 0c             	sub    $0xc,%esp
f01002f6:	6a 00                	push   $0x0
f01002f8:	e8 f7 14 00 00       	call   f01017f4 <run_command_prompt>
f01002fd:	83 c4 10             	add    $0x10,%esp
f0100300:	eb f1                	jmp    f01002f3 <_panic_into_prompt+0x98>

f0100302 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100302:	55                   	push   %ebp
f0100303:	89 e5                	mov    %esp,%ebp
f0100305:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100308:	8d 45 10             	lea    0x10(%ebp),%eax
f010030b:	83 c0 04             	add    $0x4,%eax
f010030e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100311:	83 ec 04             	sub    $0x4,%esp
f0100314:	ff 75 0c             	pushl  0xc(%ebp)
f0100317:	ff 75 08             	pushl  0x8(%ebp)
f010031a:	68 6d 7c 11 f0       	push   $0xf0117c6d
f010031f:	e8 71 6a 00 00       	call   f0106d95 <cprintf>
f0100324:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100327:	8b 45 10             	mov    0x10(%ebp),%eax
f010032a:	83 ec 08             	sub    $0x8,%esp
f010032d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100330:	50                   	push   %eax
f0100331:	e8 36 6a 00 00       	call   f0106d6c <vcprintf>
f0100336:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100339:	83 ec 0c             	sub    $0xc,%esp
f010033c:	68 6b 7c 11 f0       	push   $0xf0117c6b
f0100341:	e8 4f 6a 00 00       	call   f0106d95 <cprintf>
f0100346:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100349:	90                   	nop
f010034a:	c9                   	leave  
f010034b:	c3                   	ret    

f010034c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010034c:	55                   	push   %ebp
f010034d:	89 e5                	mov    %esp,%ebp
f010034f:	83 ec 10             	sub    $0x10,%esp
f0100352:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100359:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010035c:	89 c2                	mov    %eax,%edx
f010035e:	ec                   	in     (%dx),%al
f010035f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100362:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100365:	0f b6 c0             	movzbl %al,%eax
f0100368:	83 e0 01             	and    $0x1,%eax
f010036b:	85 c0                	test   %eax,%eax
f010036d:	75 07                	jne    f0100376 <serial_proc_data+0x2a>
		return -1;
f010036f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100374:	eb 16                	jmp    f010038c <serial_proc_data+0x40>
f0100376:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010037d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100380:	89 c2                	mov    %eax,%edx
f0100382:	ec                   	in     (%dx),%al
f0100383:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100386:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100389:	0f b6 c0             	movzbl %al,%eax
}
f010038c:	c9                   	leave  
f010038d:	c3                   	ret    

f010038e <serial_intr>:

void
serial_intr(void)
{
f010038e:	55                   	push   %ebp
f010038f:	89 e5                	mov    %esp,%ebp
f0100391:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100394:	a1 24 c7 52 f0       	mov    0xf052c724,%eax
f0100399:	85 c0                	test   %eax,%eax
f010039b:	74 10                	je     f01003ad <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f010039d:	83 ec 0c             	sub    $0xc,%esp
f01003a0:	68 4c 03 10 f0       	push   $0xf010034c
f01003a5:	e8 58 07 00 00       	call   f0100b02 <cons_intr>
f01003aa:	83 c4 10             	add    $0x10,%esp
}
f01003ad:	90                   	nop
f01003ae:	c9                   	leave  
f01003af:	c3                   	ret    

f01003b0 <serial_init>:

void
serial_init(void)
{
f01003b0:	55                   	push   %ebp
f01003b1:	89 e5                	mov    %esp,%ebp
f01003b3:	83 ec 40             	sub    $0x40,%esp
f01003b6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003bd:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003c1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003c7:	ee                   	out    %al,(%dx)
f01003c8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003cf:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01003d3:	8a 45 cf             	mov    -0x31(%ebp),%al
f01003d6:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01003d9:	ee                   	out    %al,(%dx)
f01003da:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01003e1:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01003e5:	8a 45 d0             	mov    -0x30(%ebp),%al
f01003e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01003eb:	ee                   	out    %al,(%dx)
f01003ec:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01003f3:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01003f7:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01003fd:	ee                   	out    %al,(%dx)
f01003fe:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100405:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100409:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010040c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010040f:	ee                   	out    %al,(%dx)
f0100410:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100417:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010041b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010041e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100421:	ee                   	out    %al,(%dx)
f0100422:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100429:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010042d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100430:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100433:	ee                   	out    %al,(%dx)
f0100434:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010043b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010043e:	89 c2                	mov    %eax,%edx
f0100440:	ec                   	in     (%dx),%al
f0100441:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100444:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100447:	3c ff                	cmp    $0xff,%al
f0100449:	0f 95 c0             	setne  %al
f010044c:	0f b6 c0             	movzbl %al,%eax
f010044f:	a3 24 c7 52 f0       	mov    %eax,0xf052c724
f0100454:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010045b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010045e:	89 c2                	mov    %eax,%edx
f0100460:	ec                   	in     (%dx),%al
f0100461:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100464:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010046b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100474:	90                   	nop
f0100475:	c9                   	leave  
f0100476:	c3                   	ret    

f0100477 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100477:	55                   	push   %ebp
f0100478:	89 e5                	mov    %esp,%ebp
f010047a:	83 ec 20             	sub    $0x20,%esp
f010047d:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100484:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100487:	89 c2                	mov    %eax,%edx
f0100489:	ec                   	in     (%dx),%al
f010048a:	88 45 ec             	mov    %al,-0x14(%ebp)
f010048d:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100494:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100497:	89 c2                	mov    %eax,%edx
f0100499:	ec                   	in     (%dx),%al
f010049a:	88 45 ed             	mov    %al,-0x13(%ebp)
f010049d:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004a7:	89 c2                	mov    %eax,%edx
f01004a9:	ec                   	in     (%dx),%al
f01004aa:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004ad:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004bd:	90                   	nop
f01004be:	c9                   	leave  
f01004bf:	c3                   	ret    

f01004c0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004c0:	55                   	push   %ebp
f01004c1:	89 e5                	mov    %esp,%ebp
f01004c3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004cd:	eb 08                	jmp    f01004d7 <lpt_putc+0x17>
		delay();
f01004cf:	e8 a3 ff ff ff       	call   f0100477 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004d4:	ff 45 fc             	incl   -0x4(%ebp)
f01004d7:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01004de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01004e1:	89 c2                	mov    %eax,%edx
f01004e3:	ec                   	in     (%dx),%al
f01004e4:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01004e7:	8a 45 eb             	mov    -0x15(%ebp),%al
f01004ea:	84 c0                	test   %al,%al
f01004ec:	78 09                	js     f01004f7 <lpt_putc+0x37>
f01004ee:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01004f5:	7e d8                	jle    f01004cf <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01004f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01004fa:	0f b6 c0             	movzbl %al,%eax
f01004fd:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100504:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100507:	8a 45 e8             	mov    -0x18(%ebp),%al
f010050a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010050d:	ee                   	out    %al,(%dx)
f010050e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100515:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100519:	8a 45 e9             	mov    -0x17(%ebp),%al
f010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010051f:	ee                   	out    %al,(%dx)
f0100520:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100527:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010052b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010052e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100531:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100532:	90                   	nop
f0100533:	c9                   	leave  
f0100534:	c3                   	ret    

f0100535 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100535:	55                   	push   %ebp
f0100536:	89 e5                	mov    %esp,%ebp
f0100538:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010053b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100542:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100545:	66 8b 00             	mov    (%eax),%ax
f0100548:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010054c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010054f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100554:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100557:	66 8b 00             	mov    (%eax),%ax
f010055a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010055e:	74 13                	je     f0100573 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100560:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100567:	c7 05 28 c7 52 f0 b4 	movl   $0x3b4,0xf052c728
f010056e:	03 00 00 
f0100571:	eb 14                	jmp    f0100587 <cga_init+0x52>
	} else {
		*cp = was;
f0100573:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100576:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010057a:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010057d:	c7 05 28 c7 52 f0 d4 	movl   $0x3d4,0xf052c728
f0100584:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100587:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f010058c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010058f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100593:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100596:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100599:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010059a:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f010059f:	40                   	inc    %eax
f01005a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005a6:	89 c2                	mov    %eax,%edx
f01005a8:	ec                   	in     (%dx),%al
f01005a9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005ac:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005af:	0f b6 c0             	movzbl %al,%eax
f01005b2:	c1 e0 08             	shl    $0x8,%eax
f01005b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005b8:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f01005bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005c0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005ca:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005cb:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f01005d0:	40                   	inc    %eax
f01005d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01005d7:	89 c2                	mov    %eax,%edx
f01005d9:	ec                   	in     (%dx),%al
f01005da:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01005dd:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01005e0:	0f b6 c0             	movzbl %al,%eax
f01005e3:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01005e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005e9:	a3 2c c7 52 f0       	mov    %eax,0xf052c72c
	crt_pos = pos;
f01005ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005f1:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
}
f01005f7:	90                   	nop
f01005f8:	c9                   	leave  
f01005f9:	c3                   	ret    

f01005fa <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01005fa:	55                   	push   %ebp
f01005fb:	89 e5                	mov    %esp,%ebp
f01005fd:	53                   	push   %ebx
f01005fe:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100601:	8b 45 08             	mov    0x8(%ebp),%eax
f0100604:	b0 00                	mov    $0x0,%al
f0100606:	85 c0                	test   %eax,%eax
f0100608:	75 07                	jne    f0100611 <cga_putc+0x17>
		c |= 0x0700;
f010060a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100611:	8b 45 08             	mov    0x8(%ebp),%eax
f0100614:	0f b6 c0             	movzbl %al,%eax
f0100617:	83 f8 0a             	cmp    $0xa,%eax
f010061a:	74 77                	je     f0100693 <cga_putc+0x99>
f010061c:	83 f8 0a             	cmp    $0xa,%eax
f010061f:	7f 13                	jg     f0100634 <cga_putc+0x3a>
f0100621:	83 f8 08             	cmp    $0x8,%eax
f0100624:	74 2e                	je     f0100654 <cga_putc+0x5a>
f0100626:	83 f8 09             	cmp    $0x9,%eax
f0100629:	0f 84 a8 00 00 00    	je     f01006d7 <cga_putc+0xdd>
f010062f:	e9 22 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
f0100634:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100639:	0f 84 de 00 00 00    	je     f010071d <cga_putc+0x123>
f010063f:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100644:	0f 84 f1 00 00 00    	je     f010073b <cga_putc+0x141>
f010064a:	83 f8 0d             	cmp    $0xd,%eax
f010064d:	74 5d                	je     f01006ac <cga_putc+0xb2>
f010064f:	e9 02 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100654:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f010065a:	66 85 c0             	test   %ax,%ax
f010065d:	0f 84 4f 01 00 00    	je     f01007b2 <cga_putc+0x1b8>
			crt_pos--;
f0100663:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100669:	48                   	dec    %eax
f010066a:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100670:	8b 15 2c c7 52 f0    	mov    0xf052c72c,%edx
f0100676:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f010067c:	0f b7 c0             	movzwl %ax,%eax
f010067f:	01 c0                	add    %eax,%eax
f0100681:	01 c2                	add    %eax,%edx
f0100683:	8b 45 08             	mov    0x8(%ebp),%eax
f0100686:	b0 00                	mov    $0x0,%al
f0100688:	83 c8 20             	or     $0x20,%eax
f010068b:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010068e:	e9 1f 01 00 00       	jmp    f01007b2 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100693:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100699:	83 c0 50             	add    $0x50,%eax
f010069c:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
		text_length = 0;
f01006a2:	c7 05 20 c7 52 f0 00 	movl   $0x0,0xf052c720
f01006a9:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006ac:	66 8b 0d 30 c7 52 f0 	mov    0xf052c730,%cx
f01006b3:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f01006b9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006be:	ba 00 00 00 00       	mov    $0x0,%edx
f01006c3:	66 f7 f3             	div    %bx
f01006c6:	89 d0                	mov    %edx,%eax
f01006c8:	29 c1                	sub    %eax,%ecx
f01006ca:	89 c8                	mov    %ecx,%eax
f01006cc:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
		break;
f01006d2:	e9 e5 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01006d7:	83 ec 0c             	sub    $0xc,%esp
f01006da:	6a 20                	push   $0x20
f01006dc:	e8 ba 05 00 00       	call   f0100c9b <cons_putc>
f01006e1:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 ad 05 00 00       	call   f0100c9b <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 a0 05 00 00       	call   f0100c9b <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 93 05 00 00       	call   f0100c9b <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 86 05 00 00       	call   f0100c9b <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		break;
f0100718:	e9 9f 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f010071d:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100723:	66 85 c0             	test   %ax,%ax
f0100726:	0f 84 89 00 00 00    	je     f01007b5 <cga_putc+0x1bb>
		     crt_pos--;
f010072c:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100732:	48                   	dec    %eax
f0100733:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
		     break;
f0100739:	eb 7a                	jmp    f01007b5 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f010073b:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100741:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100745:	77 71                	ja     f01007b8 <cga_putc+0x1be>
			     crt_pos++;
f0100747:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f010074d:	40                   	inc    %eax
f010074e:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
			     break;
f0100754:	eb 62                	jmp    f01007b8 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100756:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f010075d:	74 5c                	je     f01007bb <cga_putc+0x1c1>
f010075f:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100766:	74 53                	je     f01007bb <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100768:	8b 0d 2c c7 52 f0    	mov    0xf052c72c,%ecx
f010076e:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100774:	8d 50 01             	lea    0x1(%eax),%edx
f0100777:	66 89 15 30 c7 52 f0 	mov    %dx,0xf052c730
f010077e:	0f b7 c0             	movzwl %ax,%eax
f0100781:	01 c0                	add    %eax,%eax
f0100783:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100786:	8b 45 08             	mov    0x8(%ebp),%eax
f0100789:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f010078c:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	8b 15 20 c7 52 f0    	mov    0xf052c720,%edx
f010079b:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007a1:	39 d0                	cmp    %edx,%eax
f01007a3:	7e 16                	jle    f01007bb <cga_putc+0x1c1>
				text_length++;
f01007a5:	a1 20 c7 52 f0       	mov    0xf052c720,%eax
f01007aa:	40                   	inc    %eax
f01007ab:	a3 20 c7 52 f0       	mov    %eax,0xf052c720
		}
		break;
f01007b0:	eb 09                	jmp    f01007bb <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007b2:	90                   	nop
f01007b3:	eb 07                	jmp    f01007bc <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007b5:	90                   	nop
f01007b6:	eb 04                	jmp    f01007bc <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007b8:	90                   	nop
f01007b9:	eb 01                	jmp    f01007bc <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007bb:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007bc:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f01007c2:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007c6:	76 58                	jbe    f0100820 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007c8:	a1 2c c7 52 f0       	mov    0xf052c72c,%eax
f01007cd:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007d3:	a1 2c c7 52 f0       	mov    0xf052c72c,%eax
f01007d8:	83 ec 04             	sub    $0x4,%esp
f01007db:	68 00 0f 00 00       	push   $0xf00
f01007e0:	52                   	push   %edx
f01007e1:	50                   	push   %eax
f01007e2:	e8 0c 69 01 00       	call   f01170f3 <memcpy>
f01007e7:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ea:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007f1:	eb 15                	jmp    f0100808 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01007f3:	8b 15 2c c7 52 f0    	mov    0xf052c72c,%edx
f01007f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007fc:	01 c0                	add    %eax,%eax
f01007fe:	01 d0                	add    %edx,%eax
f0100800:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100805:	ff 45 f4             	incl   -0xc(%ebp)
f0100808:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f010080f:	7e e2                	jle    f01007f3 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100811:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100817:	83 e8 50             	sub    $0x50,%eax
f010081a:	66 a3 30 c7 52 f0    	mov    %ax,0xf052c730
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100820:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f0100825:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100828:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010082c:	8a 45 e0             	mov    -0x20(%ebp),%al
f010082f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100832:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100833:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100839:	66 c1 e8 08          	shr    $0x8,%ax
f010083d:	0f b6 c0             	movzbl %al,%eax
f0100840:	8b 15 28 c7 52 f0    	mov    0xf052c728,%edx
f0100846:	42                   	inc    %edx
f0100847:	89 55 ec             	mov    %edx,-0x14(%ebp)
f010084a:	88 45 e1             	mov    %al,-0x1f(%ebp)
f010084d:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100850:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100853:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100854:	a1 28 c7 52 f0       	mov    0xf052c728,%eax
f0100859:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010085c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100860:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100863:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100866:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100867:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f010086d:	0f b6 c0             	movzbl %al,%eax
f0100870:	8b 15 28 c7 52 f0    	mov    0xf052c728,%edx
f0100876:	42                   	inc    %edx
f0100877:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010087a:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010087d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100880:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100883:	ee                   	out    %al,(%dx)
}
f0100884:	90                   	nop
f0100885:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100888:	c9                   	leave  
f0100889:	c3                   	ret    

f010088a <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010088a:	55                   	push   %ebp
f010088b:	89 e5                	mov    %esp,%ebp
f010088d:	83 ec 28             	sub    $0x28,%esp
f0100890:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010089a:	89 c2                	mov    %eax,%edx
f010089c:	ec                   	in     (%dx),%al
f010089d:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008a0:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008a3:	0f b6 c0             	movzbl %al,%eax
f01008a6:	83 e0 01             	and    $0x1,%eax
f01008a9:	85 c0                	test   %eax,%eax
f01008ab:	75 0a                	jne    f01008b7 <kbd_proc_data+0x2d>
		return -1;
f01008ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008b2:	e9 2a 02 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
f01008b7:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008c1:	89 c2                	mov    %eax,%edx
f01008c3:	ec                   	in     (%dx),%al
f01008c4:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01008c7:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01008ca:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008cd:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008d1:	75 17                	jne    f01008ea <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008d3:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f01008d8:	83 c8 40             	or     $0x40,%eax
f01008db:	a3 48 c9 52 f0       	mov    %eax,0xf052c948
		return 0;
f01008e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01008e5:	e9 f7 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01008ea:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ed:	84 c0                	test   %al,%al
f01008ef:	79 44                	jns    f0100935 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008f1:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f01008f6:	83 e0 40             	and    $0x40,%eax
f01008f9:	85 c0                	test   %eax,%eax
f01008fb:	75 08                	jne    f0100905 <kbd_proc_data+0x7b>
f01008fd:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100900:	83 e0 7f             	and    $0x7f,%eax
f0100903:	eb 03                	jmp    f0100908 <kbd_proc_data+0x7e>
f0100905:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100908:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010090b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010090f:	8a 80 20 d0 14 f0    	mov    -0xfeb2fe0(%eax),%al
f0100915:	83 c8 40             	or     $0x40,%eax
f0100918:	0f b6 c0             	movzbl %al,%eax
f010091b:	f7 d0                	not    %eax
f010091d:	89 c2                	mov    %eax,%edx
f010091f:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100924:	21 d0                	and    %edx,%eax
f0100926:	a3 48 c9 52 f0       	mov    %eax,0xf052c948
		return 0;
f010092b:	b8 00 00 00 00       	mov    $0x0,%eax
f0100930:	e9 ac 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100935:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f010093a:	83 e0 40             	and    $0x40,%eax
f010093d:	85 c0                	test   %eax,%eax
f010093f:	74 11                	je     f0100952 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100941:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100945:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f010094a:	83 e0 bf             	and    $0xffffffbf,%eax
f010094d:	a3 48 c9 52 f0       	mov    %eax,0xf052c948
	}

	shift |= shiftcode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 d0 14 f0    	mov    -0xfeb2fe0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100964:	09 d0                	or     %edx,%eax
f0100966:	a3 48 c9 52 f0       	mov    %eax,0xf052c948
	shift ^= togglecode[data];
f010096b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010096f:	8a 80 20 d1 14 f0    	mov    -0xfeb2ee0(%eax),%al
f0100975:	0f b6 d0             	movzbl %al,%edx
f0100978:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f010097d:	31 d0                	xor    %edx,%eax
f010097f:	a3 48 c9 52 f0       	mov    %eax,0xf052c948

	c = charcode[shift & (CTL | SHIFT)][data];
f0100984:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100989:	83 e0 03             	and    $0x3,%eax
f010098c:	8b 14 85 20 d5 14 f0 	mov    -0xfeb2ae0(,%eax,4),%edx
f0100993:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100997:	01 d0                	add    %edx,%eax
f0100999:	8a 00                	mov    (%eax),%al
f010099b:	0f b6 c0             	movzbl %al,%eax
f010099e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009a1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009a8:	0f 85 9c 00 00 00    	jne    f0100a4a <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009ae:	a1 20 c7 52 f0       	mov    0xf052c720,%eax
f01009b3:	85 c0                	test   %eax,%eax
f01009b5:	0f 8e 85 00 00 00    	jle    f0100a40 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009bb:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f01009c1:	0f b7 c0             	movzwl %ax,%eax
f01009c4:	8b 15 20 c7 52 f0    	mov    0xf052c720,%edx
f01009ca:	81 c2 80 07 00 00    	add    $0x780,%edx
f01009d0:	39 d0                	cmp    %edx,%eax
f01009d2:	75 0a                	jne    f01009de <kbd_proc_data+0x154>
				return 0;
f01009d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01009d9:	e9 03 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			else {
			text_length--;
f01009de:	a1 20 c7 52 f0       	mov    0xf052c720,%eax
f01009e3:	48                   	dec    %eax
f01009e4:	a3 20 c7 52 f0       	mov    %eax,0xf052c720
				int crt_pos_Length = crt_pos - 1925;
f01009e9:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f01009ef:	0f b7 c0             	movzwl %ax,%eax
f01009f2:	2d 85 07 00 00       	sub    $0x785,%eax
f01009f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f01009fa:	66 a1 30 c7 52 f0    	mov    0xf052c730,%ax
f0100a00:	0f b7 c0             	movzwl %ax,%eax
f0100a03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a06:	eb 26                	jmp    f0100a2e <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a08:	8b 15 2c c7 52 f0    	mov    0xf052c72c,%edx
f0100a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a11:	01 c0                	add    %eax,%eax
f0100a13:	01 c2                	add    %eax,%edx
f0100a15:	a1 2c c7 52 f0       	mov    0xf052c72c,%eax
f0100a1a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a1d:	41                   	inc    %ecx
f0100a1e:	01 c9                	add    %ecx,%ecx
f0100a20:	01 c8                	add    %ecx,%eax
f0100a22:	66 8b 00             	mov    (%eax),%ax
f0100a25:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a28:	ff 45 e8             	incl   -0x18(%ebp)
f0100a2b:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a2e:	a1 20 c7 52 f0       	mov    0xf052c720,%eax
f0100a33:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a36:	7e d0                	jle    f0100a08 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a3b:	e9 a1 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a45:	e9 97 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a4a:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100a4f:	83 e0 08             	and    $0x8,%eax
f0100a52:	85 c0                	test   %eax,%eax
f0100a54:	74 22                	je     f0100a78 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a56:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a5a:	7e 0c                	jle    f0100a68 <kbd_proc_data+0x1de>
f0100a5c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a60:	7f 06                	jg     f0100a68 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a62:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a66:	eb 10                	jmp    f0100a78 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100a68:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a6c:	7e 0a                	jle    f0100a78 <kbd_proc_data+0x1ee>
f0100a6e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a72:	7f 04                	jg     f0100a78 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100a74:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100a78:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100a7d:	83 f8 10             	cmp    $0x10,%eax
f0100a80:	75 13                	jne    f0100a95 <kbd_proc_data+0x20b>
f0100a82:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100a86:	7e 0d                	jle    f0100a95 <kbd_proc_data+0x20b>
f0100a88:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100a8c:	7f 07                	jg     f0100a95 <kbd_proc_data+0x20b>
		return 0;
f0100a8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a93:	eb 4c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	if (c == 255)
f0100a95:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100a9c:	75 07                	jne    f0100aa5 <kbd_proc_data+0x21b>
		return 0;
f0100a9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aa3:	eb 3c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100aa5:	a1 48 c9 52 f0       	mov    0xf052c948,%eax
f0100aaa:	f7 d0                	not    %eax
f0100aac:	83 e0 06             	and    $0x6,%eax
f0100aaf:	85 c0                	test   %eax,%eax
f0100ab1:	75 2b                	jne    f0100ade <kbd_proc_data+0x254>
f0100ab3:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100aba:	75 22                	jne    f0100ade <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100abc:	83 ec 0c             	sub    $0xc,%esp
f0100abf:	68 88 7c 11 f0       	push   $0xf0117c88
f0100ac4:	e8 cc 62 00 00       	call   f0106d95 <cprintf>
f0100ac9:	83 c4 10             	add    $0x10,%esp
f0100acc:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100ad3:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100ad7:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100ada:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100add:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100ae1:	c9                   	leave  
f0100ae2:	c3                   	ret    

f0100ae3 <kbd_intr>:

void
kbd_intr(void)
{
f0100ae3:	55                   	push   %ebp
f0100ae4:	89 e5                	mov    %esp,%ebp
f0100ae6:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ae9:	83 ec 0c             	sub    $0xc,%esp
f0100aec:	68 8a 08 10 f0       	push   $0xf010088a
f0100af1:	e8 0c 00 00 00       	call   f0100b02 <cons_intr>
f0100af6:	83 c4 10             	add    $0x10,%esp
}
f0100af9:	90                   	nop
f0100afa:	c9                   	leave  
f0100afb:	c3                   	ret    

f0100afc <kbd_init>:

void
kbd_init(void)
{
f0100afc:	55                   	push   %ebp
f0100afd:	89 e5                	mov    %esp,%ebp
}
f0100aff:	90                   	nop
f0100b00:	5d                   	pop    %ebp
f0100b01:	c3                   	ret    

f0100b02 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b02:	55                   	push   %ebp
f0100b03:	89 e5                	mov    %esp,%ebp
f0100b05:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b08:	eb 35                	jmp    f0100b3f <cons_intr+0x3d>
		if (c == 0)
f0100b0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b0e:	75 02                	jne    f0100b12 <cons_intr+0x10>
			continue;
f0100b10:	eb 2d                	jmp    f0100b3f <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b12:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100b17:	8d 50 01             	lea    0x1(%eax),%edx
f0100b1a:	89 15 44 c9 52 f0    	mov    %edx,0xf052c944
f0100b20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b23:	88 90 40 c7 52 f0    	mov    %dl,-0xfad38c0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b29:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100b2e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b33:	75 0a                	jne    f0100b3f <cons_intr+0x3d>
			cons.wpos = 0;
f0100b35:	c7 05 44 c9 52 f0 00 	movl   $0x0,0xf052c944
f0100b3c:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b42:	ff d0                	call   *%eax
f0100b44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b47:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b4b:	75 bd                	jne    f0100b0a <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b4d:	90                   	nop
f0100b4e:	c9                   	leave  
f0100b4f:	c3                   	ret    

f0100b50 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b50:	55                   	push   %ebp
f0100b51:	89 e5                	mov    %esp,%ebp
f0100b53:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b56:	e8 33 f8 ff ff       	call   f010038e <serial_intr>
	kbd_intr();
f0100b5b:	e8 83 ff ff ff       	call   f0100ae3 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b60:	8b 15 40 c9 52 f0    	mov    0xf052c940,%edx
f0100b66:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100b6b:	39 c2                	cmp    %eax,%edx
f0100b6d:	74 35                	je     f0100ba4 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b6f:	a1 40 c9 52 f0       	mov    0xf052c940,%eax
f0100b74:	8d 50 01             	lea    0x1(%eax),%edx
f0100b77:	89 15 40 c9 52 f0    	mov    %edx,0xf052c940
f0100b7d:	8a 80 40 c7 52 f0    	mov    -0xfad38c0(%eax),%al
f0100b83:	0f b6 c0             	movzbl %al,%eax
f0100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b89:	a1 40 c9 52 f0       	mov    0xf052c940,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc+0x4f>
			cons.rpos = 0;
f0100b95:	c7 05 40 c9 52 f0 00 	movl   $0x0,0xf052c940
f0100b9c:	00 00 00 
		return c;
f0100b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ba2:	eb 05                	jmp    f0100ba9 <cons_getc+0x59>
	}
	return 0;
f0100ba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ba9:	c9                   	leave  
f0100baa:	c3                   	ret    

f0100bab <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100bab:	55                   	push   %ebp
f0100bac:	89 e5                	mov    %esp,%ebp
f0100bae:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bb8:	a1 24 c7 52 f0       	mov    0xf052c724,%eax
f0100bbd:	85 c0                	test   %eax,%eax
f0100bbf:	74 41                	je     f0100c02 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bc1:	e8 86 f7 ff ff       	call   f010034c <serial_proc_data>
f0100bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bc9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100bcd:	74 33                	je     f0100c02 <cons_getc2+0x57>
				if (c1 == 0)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 2d                	je     f0100c02 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100bd5:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100bda:	8d 50 01             	lea    0x1(%eax),%edx
f0100bdd:	89 15 44 c9 52 f0    	mov    %edx,0xf052c944
f0100be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100be6:	88 90 40 c7 52 f0    	mov    %dl,-0xfad38c0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100bec:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100bf1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bf6:	75 0a                	jne    f0100c02 <cons_getc2+0x57>
						cons.wpos = 0;
f0100bf8:	c7 05 44 c9 52 f0 00 	movl   $0x0,0xf052c944
f0100bff:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c09:	e8 7c fc ff ff       	call   f010088a <kbd_proc_data>
f0100c0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c11:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c15:	74 33                	je     f0100c4a <cons_getc2+0x9f>
			if (c2 == 0)
f0100c17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c1b:	74 2d                	je     f0100c4a <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c1d:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100c22:	8d 50 01             	lea    0x1(%eax),%edx
f0100c25:	89 15 44 c9 52 f0    	mov    %edx,0xf052c944
f0100c2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c2e:	88 90 40 c7 52 f0    	mov    %dl,-0xfad38c0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c34:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100c39:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c3e:	75 0a                	jne    f0100c4a <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c40:	c7 05 44 c9 52 f0 00 	movl   $0x0,0xf052c944
f0100c47:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c4e:	7e 44                	jle    f0100c94 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c50:	8b 15 40 c9 52 f0    	mov    0xf052c940,%edx
f0100c56:	a1 44 c9 52 f0       	mov    0xf052c944,%eax
f0100c5b:	39 c2                	cmp    %eax,%edx
f0100c5d:	74 35                	je     f0100c94 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c5f:	a1 40 c9 52 f0       	mov    0xf052c940,%eax
f0100c64:	8d 50 01             	lea    0x1(%eax),%edx
f0100c67:	89 15 40 c9 52 f0    	mov    %edx,0xf052c940
f0100c6d:	8a 80 40 c7 52 f0    	mov    -0xfad38c0(%eax),%al
f0100c73:	0f b6 c0             	movzbl %al,%eax
f0100c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c79:	a1 40 c9 52 f0       	mov    0xf052c940,%eax
f0100c7e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c83:	75 0a                	jne    f0100c8f <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c85:	c7 05 40 c9 52 f0 00 	movl   $0x0,0xf052c940
f0100c8c:	00 00 00 
			return c;
f0100c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c92:	eb 05                	jmp    f0100c99 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c99:	c9                   	leave  
f0100c9a:	c3                   	ret    

f0100c9b <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c9b:	55                   	push   %ebp
f0100c9c:	89 e5                	mov    %esp,%ebp
f0100c9e:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100ca1:	ff 75 08             	pushl  0x8(%ebp)
f0100ca4:	e8 17 f8 ff ff       	call   f01004c0 <lpt_putc>
f0100ca9:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100cac:	83 ec 0c             	sub    $0xc,%esp
f0100caf:	ff 75 08             	pushl  0x8(%ebp)
f0100cb2:	e8 43 f9 ff ff       	call   f01005fa <cga_putc>
f0100cb7:	83 c4 10             	add    $0x10,%esp
}
f0100cba:	90                   	nop
f0100cbb:	c9                   	leave  
f0100cbc:	c3                   	ret    

f0100cbd <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cbd:	55                   	push   %ebp
f0100cbe:	89 e5                	mov    %esp,%ebp
f0100cc0:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100cc3:	e8 6d f8 ff ff       	call   f0100535 <cga_init>
	kbd_init();
f0100cc8:	e8 2f fe ff ff       	call   f0100afc <kbd_init>
	serial_init();
f0100ccd:	e8 de f6 ff ff       	call   f01003b0 <serial_init>

	if (!serial_exists)
f0100cd2:	a1 24 c7 52 f0       	mov    0xf052c724,%eax
f0100cd7:	85 c0                	test   %eax,%eax
f0100cd9:	75 10                	jne    f0100ceb <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100cdb:	83 ec 0c             	sub    $0xc,%esp
f0100cde:	68 94 7c 11 f0       	push   $0xf0117c94
f0100ce3:	e8 ad 60 00 00       	call   f0106d95 <cprintf>
f0100ce8:	83 c4 10             	add    $0x10,%esp
}
f0100ceb:	90                   	nop
f0100cec:	c9                   	leave  
f0100ced:	c3                   	ret    

f0100cee <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100cee:	55                   	push   %ebp
f0100cef:	89 e5                	mov    %esp,%ebp
f0100cf1:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100cf4:	83 ec 0c             	sub    $0xc,%esp
f0100cf7:	ff 75 08             	pushl  0x8(%ebp)
f0100cfa:	e8 9c ff ff ff       	call   f0100c9b <cons_putc>
f0100cff:	83 c4 10             	add    $0x10,%esp
}
f0100d02:	90                   	nop
f0100d03:	c9                   	leave  
f0100d04:	c3                   	ret    

f0100d05 <getchar>:

int
getchar(void)
{
f0100d05:	55                   	push   %ebp
f0100d06:	89 e5                	mov    %esp,%ebp
f0100d08:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d0b:	e8 40 fe ff ff       	call   f0100b50 <cons_getc>
f0100d10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d17:	74 f2                	je     f0100d0b <getchar+0x6>
		/* do nothing */;
	return c;
f0100d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d1c:	c9                   	leave  
f0100d1d:	c3                   	ret    

f0100d1e <iscons>:

int
iscons(int fdnum)
{
f0100d1e:	55                   	push   %ebp
f0100d1f:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d21:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d26:	5d                   	pop    %ebp
f0100d27:	c3                   	ret    

f0100d28 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d28:	55                   	push   %ebp
f0100d29:	89 e5                	mov    %esp,%ebp
f0100d2b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d31:	c1 e8 0c             	shr    $0xc,%eax
f0100d34:	89 c2                	mov    %eax,%edx
f0100d36:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0100d3b:	39 c2                	cmp    %eax,%edx
f0100d3d:	72 14                	jb     f0100d53 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d3f:	83 ec 04             	sub    $0x4,%esp
f0100d42:	68 b4 7c 11 f0       	push   $0xf0117cb4
f0100d47:	6a 75                	push   $0x75
f0100d49:	68 d9 7c 11 f0       	push   $0xf0117cd9
f0100d4e:	e8 23 f4 ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f0100d53:	8b 15 c4 b6 54 f0    	mov    0xf054b6c4,%edx
f0100d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d5c:	c1 e8 0c             	shr    $0xc,%eax
f0100d5f:	89 c1                	mov    %eax,%ecx
f0100d61:	89 c8                	mov    %ecx,%eax
f0100d63:	01 c0                	add    %eax,%eax
f0100d65:	01 c8                	add    %ecx,%eax
f0100d67:	c1 e0 03             	shl    $0x3,%eax
f0100d6a:	01 d0                	add    %edx,%eax
}
f0100d6c:	c9                   	leave  
f0100d6d:	c3                   	ret    

f0100d6e <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100d6e:	55                   	push   %ebp
f0100d6f:	89 e5                	mov    %esp,%ebp
f0100d71:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100d74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100d7b:	eb 10                	jmp    f0100d8d <clearandwritecommand+0x1f>
		cputchar('\b');
f0100d7d:	83 ec 0c             	sub    $0xc,%esp
f0100d80:	6a 08                	push   $0x8
f0100d82:	e8 67 ff ff ff       	call   f0100cee <cputchar>
f0100d87:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100d8a:	ff 45 f4             	incl   -0xc(%ebp)
f0100d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d90:	8b 00                	mov    (%eax),%eax
f0100d92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100d95:	7f e6                	jg     f0100d7d <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100d97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100d9a:	c1 e0 0a             	shl    $0xa,%eax
f0100d9d:	05 80 62 54 f0       	add    $0xf0546280,%eax
f0100da2:	83 ec 0c             	sub    $0xc,%esp
f0100da5:	50                   	push   %eax
f0100da6:	e8 2a 61 01 00       	call   f0116ed5 <strlen>
f0100dab:	83 c4 10             	add    $0x10,%esp
f0100dae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100db1:	83 ec 04             	sub    $0x4,%esp
f0100db4:	68 00 04 00 00       	push   $0x400
f0100db9:	68 a0 b2 54 f0       	push   $0xf054b2a0
f0100dbe:	ff 75 10             	pushl  0x10(%ebp)
f0100dc1:	e8 2d 63 01 00       	call   f01170f3 <memcpy>
f0100dc6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dcc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100dd2:	eb 52                	jmp    f0100e26 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dd7:	8b 00                	mov    (%eax),%eax
f0100dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ddc:	c1 e2 0a             	shl    $0xa,%edx
f0100ddf:	01 d0                	add    %edx,%eax
f0100de1:	05 80 62 54 f0       	add    $0xf0546280,%eax
f0100de6:	8a 00                	mov    (%eax),%al
f0100de8:	0f be c0             	movsbl %al,%eax
f0100deb:	83 ec 0c             	sub    $0xc,%esp
f0100dee:	50                   	push   %eax
f0100def:	e8 fa fe ff ff       	call   f0100cee <cputchar>
f0100df4:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dfa:	8b 00                	mov    (%eax),%eax
f0100dfc:	89 c2                	mov    %eax,%edx
f0100dfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e01:	01 c2                	add    %eax,%edx
f0100e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e06:	8b 00                	mov    (%eax),%eax
f0100e08:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e0b:	c1 e1 0a             	shl    $0xa,%ecx
f0100e0e:	01 c8                	add    %ecx,%eax
f0100e10:	05 80 62 54 f0       	add    $0xf0546280,%eax
f0100e15:	8a 00                	mov    (%eax),%al
f0100e17:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e1c:	8b 00                	mov    (%eax),%eax
f0100e1e:	8d 50 01             	lea    0x1(%eax),%edx
f0100e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e24:	89 10                	mov    %edx,(%eax)
f0100e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e29:	8b 00                	mov    (%eax),%eax
f0100e2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e2e:	7c a4                	jl     f0100dd4 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e30:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e36:	89 10                	mov    %edx,(%eax)
}
f0100e38:	90                   	nop
f0100e39:	c9                   	leave  
f0100e3a:	c3                   	ret    

f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e3b:	55                   	push   %ebp
f0100e3c:	89 e5                	mov    %esp,%ebp
f0100e3e:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e48:	eb 10                	jmp    f0100e5a <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e4a:	83 ec 0c             	sub    $0xc,%esp
f0100e4d:	6a 08                	push   $0x8
f0100e4f:	e8 9a fe ff ff       	call   f0100cee <cputchar>
f0100e54:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e57:	ff 45 f4             	incl   -0xc(%ebp)
f0100e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e5d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e60:	7c e8                	jl     f0100e4a <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e62:	83 ec 0c             	sub    $0xc,%esp
f0100e65:	ff 75 0c             	pushl  0xc(%ebp)
f0100e68:	e8 68 60 01 00       	call   f0116ed5 <strlen>
f0100e6d:	83 c4 10             	add    $0x10,%esp
f0100e70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e73:	83 ec 04             	sub    $0x4,%esp
f0100e76:	68 00 04 00 00       	push   $0x400
f0100e7b:	68 a0 b2 54 f0       	push   $0xf054b2a0
f0100e80:	ff 75 10             	pushl  0x10(%ebp)
f0100e83:	e8 6b 62 01 00       	call   f01170f3 <memcpy>
f0100e88:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100e8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100e94:	eb 46                	jmp    f0100edc <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100e96:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e99:	8b 00                	mov    (%eax),%eax
f0100e9b:	89 c2                	mov    %eax,%edx
f0100e9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ea0:	01 d0                	add    %edx,%eax
f0100ea2:	8a 00                	mov    (%eax),%al
f0100ea4:	0f be c0             	movsbl %al,%eax
f0100ea7:	83 ec 0c             	sub    $0xc,%esp
f0100eaa:	50                   	push   %eax
f0100eab:	e8 3e fe ff ff       	call   f0100cee <cputchar>
f0100eb0:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eb6:	8b 00                	mov    (%eax),%eax
f0100eb8:	89 c2                	mov    %eax,%edx
f0100eba:	8b 45 10             	mov    0x10(%ebp),%eax
f0100ebd:	01 c2                	add    %eax,%edx
f0100ebf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ec2:	8b 00                	mov    (%eax),%eax
f0100ec4:	89 c1                	mov    %eax,%ecx
f0100ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ec9:	01 c8                	add    %ecx,%eax
f0100ecb:	8a 00                	mov    (%eax),%al
f0100ecd:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100ecf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed2:	8b 00                	mov    (%eax),%eax
f0100ed4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ed7:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eda:	89 10                	mov    %edx,(%eax)
f0100edc:	8b 45 14             	mov    0x14(%ebp),%eax
f0100edf:	8b 00                	mov    (%eax),%eax
f0100ee1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100ee4:	7c b0                	jl     f0100e96 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100ee6:	8b 45 18             	mov    0x18(%ebp),%eax
f0100ee9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100eec:	89 10                	mov    %edx,(%eax)
}
f0100eee:	90                   	nop
f0100eef:	c9                   	leave  
f0100ef0:	c3                   	ret    

f0100ef1 <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100ef1:	55                   	push   %ebp
f0100ef2:	89 e5                	mov    %esp,%ebp
f0100ef4:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100efe:	eb 21                	jmp    f0100f21 <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f03:	c1 e0 0a             	shl    $0xa,%eax
f0100f06:	05 80 d2 52 f0       	add    $0xf052d280,%eax
f0100f0b:	83 ec 04             	sub    $0x4,%esp
f0100f0e:	68 00 04 00 00       	push   $0x400
f0100f13:	6a 00                	push   $0x0
f0100f15:	50                   	push   %eax
f0100f16:	e8 a8 61 01 00       	call   f01170c3 <memset>
f0100f1b:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0100f21:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f25:	7e d9                	jle    f0100f00 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f27:	90                   	nop
f0100f28:	c9                   	leave  
f0100f29:	c3                   	ret    

f0100f2a <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f2a:	55                   	push   %ebp
f0100f2b:	89 e5                	mov    %esp,%ebp
f0100f2d:	57                   	push   %edi
f0100f2e:	53                   	push   %ebx
f0100f2f:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f39:	74 13                	je     f0100f4e <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f3b:	83 ec 08             	sub    $0x8,%esp
f0100f3e:	ff 75 08             	pushl  0x8(%ebp)
f0100f41:	68 bd 85 11 f0       	push   $0xf01185bd
f0100f46:	e8 4a 5e 00 00       	call   f0106d95 <cprintf>
f0100f4b:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f4e:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f0100f53:	40                   	inc    %eax
f0100f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f57:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f5e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f61:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f64:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100f6a:	83 ec 0c             	sub    $0xc,%esp
f0100f6d:	6a 00                	push   $0x0
f0100f6f:	e8 aa fd ff ff       	call   f0100d1e <iscons>
f0100f74:	83 c4 10             	add    $0x10,%esp
f0100f77:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100f7a:	e8 86 fd ff ff       	call   f0100d05 <getchar>
f0100f7f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100f82:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100f85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f88:	39 c2                	cmp    %eax,%edx
f0100f8a:	7e 06                	jle    f0100f92 <command_prompt_readline+0x68>
			lastIndex = i;
f0100f8c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f8f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100f92:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100f96:	79 22                	jns    f0100fba <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100f98:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100f9c:	0f 84 47 08 00 00    	je     f01017e9 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fa2:	83 ec 08             	sub    $0x8,%esp
f0100fa5:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fa8:	68 c0 85 11 f0       	push   $0xf01185c0
f0100fad:	e8 e3 5d 00 00       	call   f0106d95 <cprintf>
f0100fb2:	83 c4 10             	add    $0x10,%esp
			return;
f0100fb5:	e9 2f 08 00 00       	jmp    f01017e9 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100fba:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100fc1:	75 24                	jne    f0100fe7 <command_prompt_readline+0xbd>
			if (commandidx)
f0100fc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100fc7:	74 03                	je     f0100fcc <command_prompt_readline+0xa2>
				commandidx--;
f0100fc9:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0100fcc:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0100fcf:	50                   	push   %eax
f0100fd0:	ff 75 0c             	pushl  0xc(%ebp)
f0100fd3:	ff 75 f4             	pushl  -0xc(%ebp)
f0100fd6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0100fd9:	50                   	push   %eax
f0100fda:	e8 8f fd ff ff       	call   f0100d6e <clearandwritecommand>
f0100fdf:	83 c4 10             	add    $0x10,%esp
f0100fe2:	e9 eb 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0100fe7:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f0100fee:	75 35                	jne    f0101025 <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f0100ff0:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f0100ff5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0100ff8:	7d 03                	jge    f0100ffd <command_prompt_readline+0xd3>
				commandidx++;
f0100ffa:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0100ffd:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f0101002:	85 c0                	test   %eax,%eax
f0101004:	0f 88 c8 07 00 00    	js     f01017d2 <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010100a:	8d 45 8c             	lea    -0x74(%ebp),%eax
f010100d:	50                   	push   %eax
f010100e:	ff 75 0c             	pushl  0xc(%ebp)
f0101011:	ff 75 f4             	pushl  -0xc(%ebp)
f0101014:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101017:	50                   	push   %eax
f0101018:	e8 51 fd ff ff       	call   f0100d6e <clearandwritecommand>
f010101d:	83 c4 10             	add    $0x10,%esp
f0101020:	e9 ad 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f0101025:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101029:	0f 85 71 05 00 00    	jne    f01015a0 <command_prompt_readline+0x676>
			if (last_c != 9) {
f010102f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101033:	0f 84 0c 05 00 00    	je     f0101545 <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101039:	83 ec 08             	sub    $0x8,%esp
f010103c:	6a 64                	push   $0x64
f010103e:	68 80 d2 52 f0       	push   $0xf052d280
f0101043:	e8 a9 fe ff ff       	call   f0100ef1 <clear_prefix_list>
f0101048:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f010104b:	83 ec 0c             	sub    $0xc,%esp
f010104e:	ff 75 0c             	pushl  0xc(%ebp)
f0101051:	e8 7f 5e 01 00       	call   f0116ed5 <strlen>
f0101056:	83 c4 10             	add    $0x10,%esp
f0101059:	85 c0                	test   %eax,%eax
f010105b:	0f 84 7c 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
f0101061:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101068:	0f 84 6f 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f010106e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101075:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101078:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f010107b:	83 ec 08             	sub    $0x8,%esp
f010107e:	ff 75 0c             	pushl  0xc(%ebp)
f0101081:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101087:	50                   	push   %eax
f0101088:	e8 97 5e 01 00       	call   f0116f24 <strcpy>
f010108d:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 3a 5e 01 00       	call   f0116ed5 <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010a4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010aa:	01 d0                	add    %edx,%eax
f01010ac:	8a 00                	mov    (%eax),%al
f01010ae:	3c 20                	cmp    $0x20,%al
f01010b0:	0f 84 2d 07 00 00    	je     f01017e3 <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010b6:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010b9:	50                   	push   %eax
f01010ba:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010c0:	50                   	push   %eax
f01010c1:	68 d0 85 11 f0       	push   $0xf01185d0
f01010c6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010cc:	50                   	push   %eax
f01010cd:	e8 37 64 01 00       	call   f0117509 <strsplit>
f01010d2:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01010d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f01010dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01010df:	83 f8 01             	cmp    $0x1,%eax
f01010e2:	0f 8e dc 00 00 00    	jle    f01011c4 <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f01010e8:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f01010ee:	83 ec 08             	sub    $0x8,%esp
f01010f1:	68 8f 7f 11 f0       	push   $0xf0117f8f
f01010f6:	50                   	push   %eax
f01010f7:	e8 e5 5e 01 00       	call   f0116fe1 <strcmp>
f01010fc:	83 c4 10             	add    $0x10,%esp
f01010ff:	85 c0                	test   %eax,%eax
f0101101:	74 21                	je     f0101124 <command_prompt_readline+0x1fa>
f0101103:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101109:	83 ec 08             	sub    $0x8,%esp
f010110c:	68 ae 7f 11 f0       	push   $0xf0117fae
f0101111:	50                   	push   %eax
f0101112:	e8 ca 5e 01 00       	call   f0116fe1 <strcmp>
f0101117:	83 c4 10             	add    $0x10,%esp
f010111a:	85 c0                	test   %eax,%eax
f010111c:	74 06                	je     f0101124 <command_prompt_readline+0x1fa>
						continue;
f010111e:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010111f:	e9 b9 06 00 00       	jmp    f01017dd <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f0101124:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f010112b:	00 00 00 
f010112e:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101134:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101139:	b8 00 00 00 00       	mov    $0x0,%eax
f010113e:	89 d7                	mov    %edx,%edi
f0101140:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f0101142:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101145:	48                   	dec    %eax
f0101146:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f010114d:	83 ec 0c             	sub    $0xc,%esp
f0101150:	50                   	push   %eax
f0101151:	e8 7f 5d 01 00       	call   f0116ed5 <strlen>
f0101156:	83 c4 10             	add    $0x10,%esp
f0101159:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010115c:	29 c2                	sub    %eax,%edx
f010115e:	89 d0                	mov    %edx,%eax
f0101160:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101163:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010116a:	eb 1d                	jmp    f0101189 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f010116c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010116f:	8d 50 01             	lea    0x1(%eax),%edx
f0101172:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101175:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101178:	8b 55 0c             	mov    0xc(%ebp),%edx
f010117b:	01 ca                	add    %ecx,%edx
f010117d:	8a 12                	mov    (%edx),%dl
f010117f:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101186:	ff 45 e0             	incl   -0x20(%ebp)
f0101189:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010118c:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f010118f:	7c db                	jl     f010116c <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101191:	83 ec 08             	sub    $0x8,%esp
f0101194:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f010119a:	50                   	push   %eax
f010119b:	ff 75 0c             	pushl  0xc(%ebp)
f010119e:	e8 81 5d 01 00       	call   f0116f24 <strcpy>
f01011a3:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011a6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011a9:	48                   	dec    %eax
f01011aa:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011b1:	83 ec 08             	sub    $0x8,%esp
f01011b4:	50                   	push   %eax
f01011b5:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011bb:	50                   	push   %eax
f01011bc:	e8 63 5d 01 00       	call   f0116f24 <strcpy>
f01011c1:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f01011cb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011ce:	83 f8 01             	cmp    $0x1,%eax
f01011d1:	0f 85 2c 01 00 00    	jne    f0101303 <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01011d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01011de:	e9 0f 01 00 00       	jmp    f01012f2 <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f01011e3:	83 ec 0c             	sub    $0xc,%esp
f01011e6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011ec:	50                   	push   %eax
f01011ed:	e8 e3 5c 01 00       	call   f0116ed5 <strlen>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 c1                	mov    %eax,%ecx
f01011f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01011fa:	89 d0                	mov    %edx,%eax
f01011fc:	01 c0                	add    %eax,%eax
f01011fe:	01 d0                	add    %edx,%eax
f0101200:	c1 e0 02             	shl    $0x2,%eax
f0101203:	05 40 d5 14 f0       	add    $0xf014d540,%eax
f0101208:	8b 00                	mov    (%eax),%eax
f010120a:	83 ec 04             	sub    $0x4,%esp
f010120d:	51                   	push   %ecx
f010120e:	50                   	push   %eax
f010120f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101215:	50                   	push   %eax
f0101216:	e8 fe 5d 01 00       	call   f0117019 <strncmp>
f010121b:	83 c4 10             	add    $0x10,%esp
f010121e:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f0101221:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0101225:	0f 85 c4 00 00 00    	jne    f01012ef <command_prompt_readline+0x3c5>
							it_str = -1;
f010122b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101232:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101239:	00 00 00 
f010123c:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101242:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101247:	b8 00 00 00 00       	mov    $0x0,%eax
f010124c:	89 d7                	mov    %edx,%edi
f010124e:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101250:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101257:	eb 2d                	jmp    f0101286 <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101259:	ff 45 e4             	incl   -0x1c(%ebp)
f010125c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010125f:	89 d0                	mov    %edx,%eax
f0101261:	01 c0                	add    %eax,%eax
f0101263:	01 d0                	add    %edx,%eax
f0101265:	c1 e0 02             	shl    $0x2,%eax
f0101268:	05 40 d5 14 f0       	add    $0xf014d540,%eax
f010126d:	8b 10                	mov    (%eax),%edx
f010126f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101272:	01 d0                	add    %edx,%eax
f0101274:	8a 00                	mov    (%eax),%al
f0101276:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f010127c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010127f:	01 ca                	add    %ecx,%edx
f0101281:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101283:	ff 45 d4             	incl   -0x2c(%ebp)
f0101286:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101289:	89 d0                	mov    %edx,%eax
f010128b:	01 c0                	add    %eax,%eax
f010128d:	01 d0                	add    %edx,%eax
f010128f:	c1 e0 02             	shl    $0x2,%eax
f0101292:	05 40 d5 14 f0       	add    $0xf014d540,%eax
f0101297:	8b 00                	mov    (%eax),%eax
f0101299:	83 ec 0c             	sub    $0xc,%esp
f010129c:	50                   	push   %eax
f010129d:	e8 33 5c 01 00       	call   f0116ed5 <strlen>
f01012a2:	83 c4 10             	add    $0x10,%esp
f01012a5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012a8:	7f af                	jg     f0101259 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012ad:	c1 e0 0a             	shl    $0xa,%eax
f01012b0:	05 80 d2 52 f0       	add    $0xf052d280,%eax
f01012b5:	83 ec 04             	sub    $0x4,%esp
f01012b8:	68 00 04 00 00       	push   $0x400
f01012bd:	6a 00                	push   $0x0
f01012bf:	50                   	push   %eax
f01012c0:	e8 fe 5d 01 00       	call   f01170c3 <memset>
f01012c5:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01012c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01012cb:	40                   	inc    %eax
f01012cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01012cf:	c1 e2 0a             	shl    $0xa,%edx
f01012d2:	81 c2 80 d2 52 f0    	add    $0xf052d280,%edx
f01012d8:	83 ec 04             	sub    $0x4,%esp
f01012db:	50                   	push   %eax
f01012dc:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01012e2:	50                   	push   %eax
f01012e3:	52                   	push   %edx
f01012e4:	e8 69 5c 01 00       	call   f0116f52 <strncpy>
f01012e9:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01012ec:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01012ef:	ff 45 d8             	incl   -0x28(%ebp)
f01012f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f5:	83 f8 30             	cmp    $0x30,%eax
f01012f8:	0f 86 e5 fe ff ff    	jbe    f01011e3 <command_prompt_readline+0x2b9>
f01012fe:	e9 73 01 00 00       	jmp    f0101476 <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101303:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010130a:	e9 59 01 00 00       	jmp    f0101468 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f010130f:	83 ec 0c             	sub    $0xc,%esp
f0101312:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101318:	50                   	push   %eax
f0101319:	e8 b7 5b 01 00       	call   f0116ed5 <strlen>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 c1                	mov    %eax,%ecx
f0101323:	8b 1d 14 da 14 f0    	mov    0xf014da14,%ebx
f0101329:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010132c:	89 d0                	mov    %edx,%eax
f010132e:	01 c0                	add    %eax,%eax
f0101330:	01 d0                	add    %edx,%eax
f0101332:	c1 e0 02             	shl    $0x2,%eax
f0101335:	01 d8                	add    %ebx,%eax
f0101337:	8b 00                	mov    (%eax),%eax
f0101339:	83 ec 04             	sub    $0x4,%esp
f010133c:	51                   	push   %ecx
f010133d:	50                   	push   %eax
f010133e:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101344:	50                   	push   %eax
f0101345:	e8 cf 5c 01 00       	call   f0117019 <strncmp>
f010134a:	83 c4 10             	add    $0x10,%esp
f010134d:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f0101350:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101354:	0f 85 0b 01 00 00    	jne    f0101465 <command_prompt_readline+0x53b>
							it_str = -1;
f010135a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101361:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101368:	00 00 00 
f010136b:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101371:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101376:	b8 00 00 00 00       	mov    $0x0,%eax
f010137b:	89 d7                	mov    %edx,%edi
f010137d:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f010137f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101382:	83 f8 01             	cmp    $0x1,%eax
f0101385:	7e 39                	jle    f01013c0 <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101387:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010138e:	eb 1d                	jmp    f01013ad <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f0101390:	ff 45 e4             	incl   -0x1c(%ebp)
f0101393:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0101396:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101399:	01 d0                	add    %edx,%eax
f010139b:	8a 00                	mov    (%eax),%al
f010139d:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013a6:	01 ca                	add    %ecx,%edx
f01013a8:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013aa:	ff 45 cc             	incl   -0x34(%ebp)
f01013ad:	83 ec 0c             	sub    $0xc,%esp
f01013b0:	ff 75 0c             	pushl  0xc(%ebp)
f01013b3:	e8 1d 5b 01 00       	call   f0116ed5 <strlen>
f01013b8:	83 c4 10             	add    $0x10,%esp
f01013bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013be:	7f d0                	jg     f0101390 <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013c0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01013c7:	eb 30                	jmp    f01013f9 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f01013c9:	ff 45 e4             	incl   -0x1c(%ebp)
f01013cc:	8b 0d 14 da 14 f0    	mov    0xf014da14,%ecx
f01013d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d5:	89 d0                	mov    %edx,%eax
f01013d7:	01 c0                	add    %eax,%eax
f01013d9:	01 d0                	add    %edx,%eax
f01013db:	c1 e0 02             	shl    $0x2,%eax
f01013de:	01 c8                	add    %ecx,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013f6:	ff 45 c8             	incl   -0x38(%ebp)
f01013f9:	8b 0d 14 da 14 f0    	mov    0xf014da14,%ecx
f01013ff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101402:	89 d0                	mov    %edx,%eax
f0101404:	01 c0                	add    %eax,%eax
f0101406:	01 d0                	add    %edx,%eax
f0101408:	c1 e0 02             	shl    $0x2,%eax
f010140b:	01 c8                	add    %ecx,%eax
f010140d:	8b 00                	mov    (%eax),%eax
f010140f:	83 ec 0c             	sub    $0xc,%esp
f0101412:	50                   	push   %eax
f0101413:	e8 bd 5a 01 00       	call   f0116ed5 <strlen>
f0101418:	83 c4 10             	add    $0x10,%esp
f010141b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010141e:	7f a9                	jg     f01013c9 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101420:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101423:	c1 e0 0a             	shl    $0xa,%eax
f0101426:	05 80 d2 52 f0       	add    $0xf052d280,%eax
f010142b:	83 ec 04             	sub    $0x4,%esp
f010142e:	68 00 04 00 00       	push   $0x400
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 88 5c 01 00       	call   f01170c3 <memset>
f010143b:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101441:	40                   	inc    %eax
f0101442:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101445:	c1 e2 0a             	shl    $0xa,%edx
f0101448:	81 c2 80 d2 52 f0    	add    $0xf052d280,%edx
f010144e:	83 ec 04             	sub    $0x4,%esp
f0101451:	50                   	push   %eax
f0101452:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101458:	50                   	push   %eax
f0101459:	52                   	push   %edx
f010145a:	e8 f3 5a 01 00       	call   f0116f52 <strncpy>
f010145f:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101462:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101465:	ff 45 d0             	incl   -0x30(%ebp)
f0101468:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f010146d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f0101470:	0f 8c 99 fe ff ff    	jl     f010130f <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101476:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101479:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010147c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101480:	0f 84 4c 03 00 00    	je     f01017d2 <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f0101486:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010148d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101490:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101493:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f010149a:	eb 1f                	jmp    f01014bb <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f010149c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010149f:	8d 50 01             	lea    0x1(%eax),%edx
f01014a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014a5:	89 c2                	mov    %eax,%edx
f01014a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014aa:	01 c2                	add    %eax,%edx
f01014ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014af:	05 80 d2 52 f0       	add    $0xf052d280,%eax
f01014b4:	8a 00                	mov    (%eax),%al
f01014b6:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014b8:	ff 45 c4             	incl   -0x3c(%ebp)
f01014bb:	83 ec 0c             	sub    $0xc,%esp
f01014be:	68 80 d2 52 f0       	push   $0xf052d280
f01014c3:	e8 0d 5a 01 00       	call   f0116ed5 <strlen>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01014ce:	7f cc                	jg     f010149c <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014d0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01014d7:	eb 10                	jmp    f01014e9 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f01014d9:	83 ec 0c             	sub    $0xc,%esp
f01014dc:	6a 08                	push   $0x8
f01014de:	e8 0b f8 ff ff       	call   f0100cee <cputchar>
f01014e3:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014e6:	ff 45 c0             	incl   -0x40(%ebp)
f01014e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01014ec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01014ef:	7c e8                	jl     f01014d9 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01014f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01014f8:	eb 1c                	jmp    f0101516 <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f01014fa:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	01 d0                	add    %edx,%eax
f0101502:	8a 00                	mov    (%eax),%al
f0101504:	0f be c0             	movsbl %al,%eax
f0101507:	83 ec 0c             	sub    $0xc,%esp
f010150a:	50                   	push   %eax
f010150b:	e8 de f7 ff ff       	call   f0100cee <cputchar>
f0101510:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101513:	ff 45 bc             	incl   -0x44(%ebp)
f0101516:	83 ec 0c             	sub    $0xc,%esp
f0101519:	ff 75 0c             	pushl  0xc(%ebp)
f010151c:	e8 b4 59 01 00       	call   f0116ed5 <strlen>
f0101521:	83 c4 10             	add    $0x10,%esp
f0101524:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101527:	7f d1                	jg     f01014fa <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101529:	83 ec 0c             	sub    $0xc,%esp
f010152c:	ff 75 0c             	pushl  0xc(%ebp)
f010152f:	e8 a1 59 01 00       	call   f0116ed5 <strlen>
f0101534:	83 c4 10             	add    $0x10,%esp
f0101537:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010153a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010153d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0101540:	e9 8d 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101545:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101549:	0f 8e 83 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
f010154f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101552:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101555:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101558:	40                   	inc    %eax
f0101559:	99                   	cltd   
f010155a:	f7 7d ec             	idivl  -0x14(%ebp)
f010155d:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f0101560:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101563:	c1 e0 0a             	shl    $0xa,%eax
f0101566:	8d 98 80 d2 52 f0    	lea    -0xfad2d80(%eax),%ebx
f010156c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010156f:	c1 e0 0a             	shl    $0xa,%eax
f0101572:	05 80 d2 52 f0       	add    $0xf052d280,%eax
f0101577:	83 ec 0c             	sub    $0xc,%esp
f010157a:	50                   	push   %eax
f010157b:	e8 55 59 01 00       	call   f0116ed5 <strlen>
f0101580:	83 c4 10             	add    $0x10,%esp
f0101583:	83 ec 0c             	sub    $0xc,%esp
f0101586:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0101589:	52                   	push   %edx
f010158a:	8d 55 90             	lea    -0x70(%ebp),%edx
f010158d:	52                   	push   %edx
f010158e:	ff 75 0c             	pushl  0xc(%ebp)
f0101591:	53                   	push   %ebx
f0101592:	50                   	push   %eax
f0101593:	e8 a3 f8 ff ff       	call   f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>
f0101598:	83 c4 20             	add    $0x20,%esp
f010159b:	e9 32 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015a0:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015a7:	75 25                	jne    f01015ce <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015ac:	85 c0                	test   %eax,%eax
f01015ae:	0f 8e 1e 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
				i--;
f01015b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015b7:	48                   	dec    %eax
f01015b8:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015bb:	83 ec 0c             	sub    $0xc,%esp
f01015be:	ff 75 a8             	pushl  -0x58(%ebp)
f01015c1:	e8 28 f7 ff ff       	call   f0100cee <cputchar>
f01015c6:	83 c4 10             	add    $0x10,%esp
f01015c9:	e9 04 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f01015ce:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f01015d5:	75 28                	jne    f01015ff <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f01015d7:	8b 55 90             	mov    -0x70(%ebp),%edx
f01015da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01015dd:	39 c2                	cmp    %eax,%edx
f01015df:	0f 8d ed 01 00 00    	jge    f01017d2 <command_prompt_readline+0x8a8>
				i++;
f01015e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015e8:	40                   	inc    %eax
f01015e9:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015ec:	83 ec 0c             	sub    $0xc,%esp
f01015ef:	ff 75 a8             	pushl  -0x58(%ebp)
f01015f2:	e8 f7 f6 ff ff       	call   f0100cee <cputchar>
f01015f7:	83 c4 10             	add    $0x10,%esp
f01015fa:	e9 d3 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f01015ff:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f0101606:	75 3d                	jne    f0101645 <command_prompt_readline+0x71b>
f0101608:	8b 45 90             	mov    -0x70(%ebp),%eax
f010160b:	85 c0                	test   %eax,%eax
f010160d:	7e 36                	jle    f0101645 <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f010160f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101612:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0101615:	eb 1a                	jmp    f0101631 <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101617:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010161a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010161d:	01 c2                	add    %eax,%edx
f010161f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0101622:	8d 48 01             	lea    0x1(%eax),%ecx
f0101625:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101628:	01 c8                	add    %ecx,%eax
f010162a:	8a 00                	mov    (%eax),%al
f010162c:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f010162e:	ff 45 b8             	incl   -0x48(%ebp)
f0101631:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101634:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101637:	7e de                	jle    f0101617 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101639:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010163c:	48                   	dec    %eax
f010163d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101640:	e9 8d 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101645:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101649:	7e 51                	jle    f010169c <command_prompt_readline+0x772>
f010164b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010164e:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101653:	7f 47                	jg     f010169c <command_prompt_readline+0x772>
f0101655:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f010165c:	74 3e                	je     f010169c <command_prompt_readline+0x772>
f010165e:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f0101665:	74 35                	je     f010169c <command_prompt_readline+0x772>
			if (echoing)
f0101667:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f010166b:	74 0e                	je     f010167b <command_prompt_readline+0x751>
				cputchar(c);
f010166d:	83 ec 0c             	sub    $0xc,%esp
f0101670:	ff 75 a8             	pushl  -0x58(%ebp)
f0101673:	e8 76 f6 ff ff       	call   f0100cee <cputchar>
f0101678:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f010167b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010167e:	8d 50 01             	lea    0x1(%eax),%edx
f0101681:	89 55 90             	mov    %edx,-0x70(%ebp)
f0101684:	89 c2                	mov    %eax,%edx
f0101686:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101689:	01 d0                	add    %edx,%eax
f010168b:	8b 55 a8             	mov    -0x58(%ebp),%edx
f010168e:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101690:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101693:	40                   	inc    %eax
f0101694:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101697:	e9 36 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f010169c:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016a0:	75 51                	jne    f01016f3 <command_prompt_readline+0x7c9>
f01016a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016a5:	85 c0                	test   %eax,%eax
f01016a7:	7e 4a                	jle    f01016f3 <command_prompt_readline+0x7c9>

			if (echoing)
f01016a9:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016ad:	74 0e                	je     f01016bd <command_prompt_readline+0x793>
				cputchar(c);
f01016af:	83 ec 0c             	sub    $0xc,%esp
f01016b2:	ff 75 a8             	pushl  -0x58(%ebp)
f01016b5:	e8 34 f6 ff ff       	call   f0100cee <cputchar>
f01016ba:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016c3:	eb 1a                	jmp    f01016df <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016c8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01016cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ce:	01 c2                	add    %eax,%edx
f01016d0:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01016d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016d6:	01 c8                	add    %ecx,%eax
f01016d8:	8a 00                	mov    (%eax),%al
f01016da:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f01016dc:	ff 45 b4             	incl   -0x4c(%ebp)
f01016df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016e2:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f01016e5:	7e de                	jle    f01016c5 <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f01016e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016ea:	48                   	dec    %eax
f01016eb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01016ee:	e9 df 00 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f01016f3:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f01016f7:	74 0a                	je     f0101703 <command_prompt_readline+0x7d9>
f01016f9:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f01016fd:	0f 85 cf 00 00 00    	jne    f01017d2 <command_prompt_readline+0x8a8>

			if (echoing)
f0101703:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101707:	74 0e                	je     f0101717 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101709:	83 ec 0c             	sub    $0xc,%esp
f010170c:	ff 75 a8             	pushl  -0x58(%ebp)
f010170f:	e8 da f5 ff ff       	call   f0100cee <cputchar>
f0101714:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101717:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010171a:	89 c2                	mov    %eax,%edx
f010171c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010171f:	01 d0                	add    %edx,%eax
f0101721:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101724:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f0101729:	83 f8 13             	cmp    $0x13,%eax
f010172c:	75 56                	jne    f0101784 <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010172e:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101735:	eb 2d                	jmp    f0101764 <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101737:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010173a:	40                   	inc    %eax
f010173b:	c1 e0 0a             	shl    $0xa,%eax
f010173e:	8d 90 80 62 54 f0    	lea    -0xfab9d80(%eax),%edx
f0101744:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101747:	c1 e0 0a             	shl    $0xa,%eax
f010174a:	05 80 62 54 f0       	add    $0xf0546280,%eax
f010174f:	83 ec 04             	sub    $0x4,%esp
f0101752:	68 00 04 00 00       	push   $0x400
f0101757:	52                   	push   %edx
f0101758:	50                   	push   %eax
f0101759:	e8 95 59 01 00       	call   f01170f3 <memcpy>
f010175e:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101761:	ff 45 b0             	incl   -0x50(%ebp)
f0101764:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f0101768:	7e cd                	jle    f0101737 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f010176a:	83 ec 04             	sub    $0x4,%esp
f010176d:	68 00 04 00 00       	push   $0x400
f0101772:	ff 75 0c             	pushl  0xc(%ebp)
f0101775:	68 80 ae 54 f0       	push   $0xf054ae80
f010177a:	e8 74 59 01 00       	call   f01170f3 <memcpy>
f010177f:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101782:	eb 68                	jmp    f01017ec <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101784:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f0101789:	c1 e0 0a             	shl    $0xa,%eax
f010178c:	05 80 62 54 f0       	add    $0xf0546280,%eax
f0101791:	83 ec 08             	sub    $0x8,%esp
f0101794:	ff 75 0c             	pushl  0xc(%ebp)
f0101797:	50                   	push   %eax
f0101798:	e8 44 58 01 00       	call   f0116fe1 <strcmp>
f010179d:	83 c4 10             	add    $0x10,%esp
f01017a0:	85 c0                	test   %eax,%eax
f01017a2:	74 48                	je     f01017ec <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017a4:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f01017a9:	40                   	inc    %eax
f01017aa:	a3 8c d7 14 f0       	mov    %eax,0xf014d78c
f01017af:	a1 8c d7 14 f0       	mov    0xf014d78c,%eax
f01017b4:	c1 e0 0a             	shl    $0xa,%eax
f01017b7:	05 80 62 54 f0       	add    $0xf0546280,%eax
f01017bc:	83 ec 04             	sub    $0x4,%esp
f01017bf:	68 00 04 00 00       	push   $0x400
f01017c4:	ff 75 0c             	pushl  0xc(%ebp)
f01017c7:	50                   	push   %eax
f01017c8:	e8 26 59 01 00       	call   f01170f3 <memcpy>
f01017cd:	83 c4 10             	add    $0x10,%esp
			}
			return;
f01017d0:	eb 1a                	jmp    f01017ec <command_prompt_readline+0x8c2>

		}
		last_c = c;
f01017d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01017d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01017d8:	e9 9d f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01017dd:	90                   	nop
f01017de:	e9 97 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f01017e3:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f01017e4:	e9 91 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01017e9:	90                   	nop
f01017ea:	eb 01                	jmp    f01017ed <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f01017ec:	90                   	nop

		}
		last_c = c;
	}
}
f01017ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01017f0:	5b                   	pop    %ebx
f01017f1:	5f                   	pop    %edi
f01017f2:	5d                   	pop    %ebp
f01017f3:	c3                   	ret    

f01017f4 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f01017f4:	55                   	push   %ebp
f01017f5:	89 e5                	mov    %esp,%ebp
f01017f7:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f01017fd:	83 ec 04             	sub    $0x4,%esp
f0101800:	68 00 04 00 00       	push   $0x400
f0101805:	6a 00                	push   $0x0
f0101807:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010180d:	50                   	push   %eax
f010180e:	e8 b0 58 01 00       	call   f01170c3 <memset>
f0101813:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101816:	83 ec 08             	sub    $0x8,%esp
f0101819:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010181f:	50                   	push   %eax
f0101820:	68 d5 85 11 f0       	push   $0xf01185d5
f0101825:	e8 00 f7 ff ff       	call   f0100f2a <command_prompt_readline>
f010182a:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f010182d:	83 ec 0c             	sub    $0xc,%esp
f0101830:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101836:	50                   	push   %eax
f0101837:	e8 0d 00 00 00       	call   f0101849 <execute_command>
f010183c:	83 c4 10             	add    $0x10,%esp
f010183f:	85 c0                	test   %eax,%eax
f0101841:	78 02                	js     f0101845 <run_command_prompt+0x51>
				break;
	}
f0101843:	eb b8                	jmp    f01017fd <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101845:	90                   	nop
	}
}
f0101846:	90                   	nop
f0101847:	c9                   	leave  
f0101848:	c3                   	ret    

f0101849 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101849:	55                   	push   %ebp
f010184a:	89 e5                	mov    %esp,%ebp
f010184c:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f010184f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0101852:	50                   	push   %eax
f0101853:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0101856:	50                   	push   %eax
f0101857:	68 d0 85 11 f0       	push   $0xf01185d0
f010185c:	ff 75 08             	pushl  0x8(%ebp)
f010185f:	e8 a5 5c 01 00       	call   f0117509 <strsplit>
f0101864:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101867:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010186a:	85 c0                	test   %eax,%eax
f010186c:	75 0a                	jne    f0101878 <execute_command+0x2f>
		return 0;
f010186e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101873:	e9 95 00 00 00       	jmp    f010190d <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0101878:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010187f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101886:	eb 33                	jmp    f01018bb <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0101888:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010188b:	89 d0                	mov    %edx,%eax
f010188d:	01 c0                	add    %eax,%eax
f010188f:	01 d0                	add    %edx,%eax
f0101891:	c1 e0 02             	shl    $0x2,%eax
f0101894:	05 40 d5 14 f0       	add    $0xf014d540,%eax
f0101899:	8b 10                	mov    (%eax),%edx
f010189b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010189e:	83 ec 08             	sub    $0x8,%esp
f01018a1:	52                   	push   %edx
f01018a2:	50                   	push   %eax
f01018a3:	e8 39 57 01 00       	call   f0116fe1 <strcmp>
f01018a8:	83 c4 10             	add    $0x10,%esp
f01018ab:	85 c0                	test   %eax,%eax
f01018ad:	75 09                	jne    f01018b8 <execute_command+0x6f>
		{
			command_found = 1;
f01018af:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018b6:	eb 0b                	jmp    f01018c3 <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018b8:	ff 45 f0             	incl   -0x10(%ebp)
f01018bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018be:	83 f8 30             	cmp    $0x30,%eax
f01018c1:	76 c5                	jbe    f0101888 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018c7:	74 2b                	je     f01018f4 <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f01018c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018cc:	89 d0                	mov    %edx,%eax
f01018ce:	01 c0                	add    %eax,%eax
f01018d0:	01 d0                	add    %edx,%eax
f01018d2:	c1 e0 02             	shl    $0x2,%eax
f01018d5:	05 48 d5 14 f0       	add    $0xf014d548,%eax
f01018da:	8b 00                	mov    (%eax),%eax
f01018dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01018df:	83 ec 08             	sub    $0x8,%esp
f01018e2:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f01018e5:	51                   	push   %ecx
f01018e6:	52                   	push   %edx
f01018e7:	ff d0                	call   *%eax
f01018e9:	83 c4 10             	add    $0x10,%esp
f01018ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f01018ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01018f2:	eb 19                	jmp    f010190d <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f01018f4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018f7:	83 ec 08             	sub    $0x8,%esp
f01018fa:	50                   	push   %eax
f01018fb:	68 db 85 11 f0       	push   $0xf01185db
f0101900:	e8 90 54 00 00       	call   f0106d95 <cprintf>
f0101905:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101908:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010190d:	c9                   	leave  
f010190e:	c3                   	ret    

f010190f <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010190f:	55                   	push   %ebp
f0101910:	89 e5                	mov    %esp,%ebp
f0101912:	53                   	push   %ebx
f0101913:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010191d:	eb 3b                	jmp    f010195a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010191f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101922:	89 d0                	mov    %edx,%eax
f0101924:	01 c0                	add    %eax,%eax
f0101926:	01 d0                	add    %edx,%eax
f0101928:	c1 e0 02             	shl    $0x2,%eax
f010192b:	05 44 d5 14 f0       	add    $0xf014d544,%eax
f0101930:	8b 10                	mov    (%eax),%edx
f0101932:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101935:	89 c8                	mov    %ecx,%eax
f0101937:	01 c0                	add    %eax,%eax
f0101939:	01 c8                	add    %ecx,%eax
f010193b:	c1 e0 02             	shl    $0x2,%eax
f010193e:	05 40 d5 14 f0       	add    $0xf014d540,%eax
f0101943:	8b 00                	mov    (%eax),%eax
f0101945:	83 ec 04             	sub    $0x4,%esp
f0101948:	52                   	push   %edx
f0101949:	50                   	push   %eax
f010194a:	68 f1 85 11 f0       	push   $0xf01185f1
f010194f:	e8 41 54 00 00       	call   f0106d95 <cprintf>
f0101954:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101957:	ff 45 f4             	incl   -0xc(%ebp)
f010195a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010195d:	83 f8 30             	cmp    $0x30,%eax
f0101960:	76 bd                	jbe    f010191f <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101962:	83 ec 0c             	sub    $0xc,%esp
f0101965:	68 fa 85 11 f0       	push   $0xf01185fa
f010196a:	e8 26 54 00 00       	call   f0106d95 <cprintf>
f010196f:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101972:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101979:	eb 42                	jmp    f01019bd <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010197b:	8b 0d 14 da 14 f0    	mov    0xf014da14,%ecx
f0101981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101984:	89 d0                	mov    %edx,%eax
f0101986:	01 c0                	add    %eax,%eax
f0101988:	01 d0                	add    %edx,%eax
f010198a:	c1 e0 02             	shl    $0x2,%eax
f010198d:	01 c8                	add    %ecx,%eax
f010198f:	8b 50 04             	mov    0x4(%eax),%edx
f0101992:	8b 1d 14 da 14 f0    	mov    0xf014da14,%ebx
f0101998:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010199b:	89 c8                	mov    %ecx,%eax
f010199d:	01 c0                	add    %eax,%eax
f010199f:	01 c8                	add    %ecx,%eax
f01019a1:	c1 e0 02             	shl    $0x2,%eax
f01019a4:	01 d8                	add    %ebx,%eax
f01019a6:	8b 00                	mov    (%eax),%eax
f01019a8:	83 ec 04             	sub    $0x4,%esp
f01019ab:	52                   	push   %edx
f01019ac:	50                   	push   %eax
f01019ad:	68 0f 86 11 f0       	push   $0xf011860f
f01019b2:	e8 de 53 00 00       	call   f0106d95 <cprintf>
f01019b7:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019ba:	ff 45 f4             	incl   -0xc(%ebp)
f01019bd:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f01019c2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019c5:	7c b4                	jl     f010197b <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f01019c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01019cf:	c9                   	leave  
f01019d0:	c3                   	ret    

f01019d1 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01019d1:	55                   	push   %ebp
f01019d2:	89 e5                	mov    %esp,%ebp
f01019d4:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01019d7:	83 ec 0c             	sub    $0xc,%esp
f01019da:	68 2b 86 11 f0       	push   $0xf011862b
f01019df:	e8 b1 53 00 00       	call   f0106d95 <cprintf>
f01019e4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01019e7:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01019ec:	83 ec 04             	sub    $0x4,%esp
f01019ef:	50                   	push   %eax
f01019f0:	68 0c 00 10 f0       	push   $0xf010000c
f01019f5:	68 44 86 11 f0       	push   $0xf0118644
f01019fa:	e8 96 53 00 00       	call   f0106d95 <cprintf>
f01019ff:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a02:	b8 09 7b 11 00       	mov    $0x117b09,%eax
f0101a07:	83 ec 04             	sub    $0x4,%esp
f0101a0a:	50                   	push   %eax
f0101a0b:	68 09 7b 11 f0       	push   $0xf0117b09
f0101a10:	68 80 86 11 f0       	push   $0xf0118680
f0101a15:	e8 7b 53 00 00       	call   f0106d95 <cprintf>
f0101a1a:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a1d:	b8 e2 c6 52 00       	mov    $0x52c6e2,%eax
f0101a22:	83 ec 04             	sub    $0x4,%esp
f0101a25:	50                   	push   %eax
f0101a26:	68 e2 c6 52 f0       	push   $0xf052c6e2
f0101a2b:	68 bc 86 11 f0       	push   $0xf01186bc
f0101a30:	e8 60 53 00 00       	call   f0106d95 <cprintf>
f0101a35:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a38:	b8 08 b7 d4 00       	mov    $0xd4b708,%eax
f0101a3d:	83 ec 04             	sub    $0x4,%esp
f0101a40:	50                   	push   %eax
f0101a41:	68 08 b7 d4 f0       	push   $0xf0d4b708
f0101a46:	68 04 87 11 f0       	push   $0xf0118704
f0101a4b:	e8 45 53 00 00       	call   f0106d95 <cprintf>
f0101a50:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a53:	b8 08 b7 d4 f0       	mov    $0xf0d4b708,%eax
f0101a58:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a5e:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a63:	29 c2                	sub    %eax,%edx
f0101a65:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101a67:	85 c0                	test   %eax,%eax
f0101a69:	79 05                	jns    f0101a70 <command_kernel_info+0x9f>
f0101a6b:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101a70:	c1 f8 0a             	sar    $0xa,%eax
f0101a73:	83 ec 08             	sub    $0x8,%esp
f0101a76:	50                   	push   %eax
f0101a77:	68 40 87 11 f0       	push   $0xf0118740
f0101a7c:	e8 14 53 00 00       	call   f0106d95 <cprintf>
f0101a81:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101a84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a89:	c9                   	leave  
f0101a8a:	c3                   	ret    

f0101a8b <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101a8b:	55                   	push   %ebp
f0101a8c:	89 e5                	mov    %esp,%ebp
f0101a8e:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	83 c0 04             	add    $0x4,%eax
f0101a97:	8b 00                	mov    (%eax),%eax
f0101a99:	83 ec 04             	sub    $0x4,%esp
f0101a9c:	6a 0a                	push   $0xa
f0101a9e:	6a 00                	push   $0x0
f0101aa0:	50                   	push   %eax
f0101aa1:	e8 8f 57 01 00       	call   f0117235 <strtol>
f0101aa6:	83 c4 10             	add    $0x10,%esp
f0101aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101aac:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101ab3:	83 ec 04             	sub    $0x4,%esp
f0101ab6:	6a 00                	push   $0x0
f0101ab8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101abb:	50                   	push   %eax
f0101abc:	ff 75 f4             	pushl  -0xc(%ebp)
f0101abf:	e8 ee 15 00 00       	call   f01030b2 <envid2env>
f0101ac4:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aca:	83 c0 0c             	add    $0xc,%eax
f0101acd:	8b 00                	mov    (%eax),%eax
f0101acf:	83 ec 04             	sub    $0x4,%esp
f0101ad2:	6a 10                	push   $0x10
f0101ad4:	6a 00                	push   $0x0
f0101ad6:	50                   	push   %eax
f0101ad7:	e8 59 57 01 00       	call   f0117235 <strtol>
f0101adc:	83 c4 10             	add    $0x10,%esp
f0101adf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101ae2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ae5:	85 c0                	test   %eax,%eax
f0101ae7:	75 07                	jne    f0101af0 <command_writeusermem+0x65>
f0101ae9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101aee:	eb 43                	jmp    f0101b33 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101af0:	0f 20 d8             	mov    %cr3,%eax
f0101af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101af6:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101af9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101afc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101aff:	8b 40 60             	mov    0x60(%eax),%eax
f0101b02:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b08:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b14:	83 c0 08             	add    $0x8,%eax
f0101b17:	8b 00                	mov    (%eax),%eax
f0101b19:	8a 00                	mov    (%eax),%al
f0101b1b:	88 c2                	mov    %al,%dl
f0101b1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b20:	88 10                	mov    %dl,(%eax)
f0101b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b25:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b2b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b33:	c9                   	leave  
f0101b34:	c3                   	ret    

f0101b35 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b35:	55                   	push   %ebp
f0101b36:	89 e5                	mov    %esp,%ebp
f0101b38:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b3e:	83 c0 04             	add    $0x4,%eax
f0101b41:	8b 00                	mov    (%eax),%eax
f0101b43:	83 ec 04             	sub    $0x4,%esp
f0101b46:	6a 10                	push   $0x10
f0101b48:	6a 00                	push   $0x0
f0101b4a:	50                   	push   %eax
f0101b4b:	e8 e5 56 01 00       	call   f0117235 <strtol>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5e:	83 c0 08             	add    $0x8,%eax
f0101b61:	8b 00                	mov    (%eax),%eax
f0101b63:	83 ec 04             	sub    $0x4,%esp
f0101b66:	6a 0a                	push   $0xa
f0101b68:	6a 00                	push   $0x0
f0101b6a:	50                   	push   %eax
f0101b6b:	e8 c5 56 01 00       	call   f0117235 <strtol>
f0101b70:	83 c4 10             	add    $0x10,%esp
f0101b73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101b76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 0c             	sub    $0xc,%esp
f0101b88:	50                   	push   %eax
f0101b89:	e8 47 53 01 00       	call   f0116ed5 <strlen>
f0101b8e:	83 c4 10             	add    $0x10,%esp
f0101b91:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101b94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101b9b:	eb 30                	jmp    f0101bcd <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101b9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ba4:	eb 1c                	jmp    f0101bc2 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ba9:	83 c0 0c             	add    $0xc,%eax
f0101bac:	8b 10                	mov    (%eax),%edx
f0101bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bb1:	01 d0                	add    %edx,%eax
f0101bb3:	8a 00                	mov    (%eax),%al
f0101bb5:	88 c2                	mov    %al,%dl
f0101bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bba:	88 10                	mov    %dl,(%eax)
			address++;
f0101bbc:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bbf:	ff 45 ec             	incl   -0x14(%ebp)
f0101bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bc5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101bc8:	7c dc                	jl     f0101ba6 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101bca:	ff 45 f0             	incl   -0x10(%ebp)
f0101bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101bd0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101bd3:	7c c8                	jl     f0101b9d <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101bd5:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101bda:	c9                   	leave  
f0101bdb:	c3                   	ret    

f0101bdc <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101bdc:	55                   	push   %ebp
f0101bdd:	89 e5                	mov    %esp,%ebp
f0101bdf:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101be2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be5:	83 c0 04             	add    $0x4,%eax
f0101be8:	8b 00                	mov    (%eax),%eax
f0101bea:	83 ec 04             	sub    $0x4,%esp
f0101bed:	6a 0a                	push   $0xa
f0101bef:	6a 00                	push   $0x0
f0101bf1:	50                   	push   %eax
f0101bf2:	e8 3e 56 01 00       	call   f0117235 <strtol>
f0101bf7:	83 c4 10             	add    $0x10,%esp
f0101bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101bfd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c04:	83 ec 04             	sub    $0x4,%esp
f0101c07:	6a 00                	push   $0x0
f0101c09:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c0c:	50                   	push   %eax
f0101c0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c10:	e8 9d 14 00 00       	call   f01030b2 <envid2env>
f0101c15:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c1b:	83 c0 08             	add    $0x8,%eax
f0101c1e:	8b 00                	mov    (%eax),%eax
f0101c20:	83 ec 04             	sub    $0x4,%esp
f0101c23:	6a 10                	push   $0x10
f0101c25:	6a 00                	push   $0x0
f0101c27:	50                   	push   %eax
f0101c28:	e8 08 56 01 00       	call   f0117235 <strtol>
f0101c2d:	83 c4 10             	add    $0x10,%esp
f0101c30:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c36:	85 c0                	test   %eax,%eax
f0101c38:	75 07                	jne    f0101c41 <command_readusermem+0x65>
f0101c3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3f:	eb 4e                	jmp    f0101c8f <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c41:	0f 20 d8             	mov    %cr3,%eax
f0101c44:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c47:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c50:	8b 40 60             	mov    0x60(%eax),%eax
f0101c53:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c59:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c65:	8a 00                	mov    (%eax),%al
f0101c67:	0f b6 c0             	movzbl %al,%eax
f0101c6a:	83 ec 04             	sub    $0x4,%esp
f0101c6d:	50                   	push   %eax
f0101c6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c71:	68 6b 87 11 f0       	push   $0xf011876b
f0101c76:	e8 1a 51 00 00       	call   f0106d95 <cprintf>
f0101c7b:	83 c4 10             	add    $0x10,%esp
f0101c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101c81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101c84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101c87:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c8f:	c9                   	leave  
f0101c90:	c3                   	ret    

f0101c91 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101c91:	55                   	push   %ebp
f0101c92:	89 e5                	mov    %esp,%ebp
f0101c94:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c9a:	83 c0 04             	add    $0x4,%eax
f0101c9d:	8b 00                	mov    (%eax),%eax
f0101c9f:	83 ec 04             	sub    $0x4,%esp
f0101ca2:	6a 10                	push   $0x10
f0101ca4:	6a 00                	push   $0x0
f0101ca6:	50                   	push   %eax
f0101ca7:	e8 89 55 01 00       	call   f0117235 <strtol>
f0101cac:	83 c4 10             	add    $0x10,%esp
f0101caf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cba:	83 c0 08             	add    $0x8,%eax
f0101cbd:	8b 00                	mov    (%eax),%eax
f0101cbf:	83 ec 04             	sub    $0x4,%esp
f0101cc2:	6a 0a                	push   $0xa
f0101cc4:	6a 00                	push   $0x0
f0101cc6:	50                   	push   %eax
f0101cc7:	e8 69 55 01 00       	call   f0117235 <strtol>
f0101ccc:	83 c4 10             	add    $0x10,%esp
f0101ccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101cd2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101cd9:	eb 22                	jmp    f0101cfd <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cde:	8d 50 01             	lea    0x1(%eax),%edx
f0101ce1:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101ce4:	8a 00                	mov    (%eax),%al
f0101ce6:	0f b6 c0             	movzbl %al,%eax
f0101ce9:	83 ec 08             	sub    $0x8,%esp
f0101cec:	50                   	push   %eax
f0101ced:	68 85 87 11 f0       	push   $0xf0118785
f0101cf2:	e8 9e 50 00 00       	call   f0106d95 <cprintf>
f0101cf7:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101cfa:	ff 45 f0             	incl   -0x10(%ebp)
f0101cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d03:	7c d6                	jl     f0101cdb <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d05:	83 ec 0c             	sub    $0xc,%esp
f0101d08:	68 88 87 11 f0       	push   $0xf0118788
f0101d0d:	e8 83 50 00 00       	call   f0106d95 <cprintf>
f0101d12:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d1a:	c9                   	leave  
f0101d1b:	c3                   	ret    

f0101d1c <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d1c:	55                   	push   %ebp
f0101d1d:	89 e5                	mov    %esp,%ebp
f0101d1f:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d25:	83 c0 04             	add    $0x4,%eax
f0101d28:	8b 00                	mov    (%eax),%eax
f0101d2a:	83 ec 04             	sub    $0x4,%esp
f0101d2d:	6a 0a                	push   $0xa
f0101d2f:	6a 00                	push   $0x0
f0101d31:	50                   	push   %eax
f0101d32:	e8 fe 54 01 00       	call   f0117235 <strtol>
f0101d37:	83 c4 10             	add    $0x10,%esp
f0101d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d3d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d44:	83 ec 04             	sub    $0x4,%esp
f0101d47:	6a 00                	push   $0x0
f0101d49:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d4c:	50                   	push   %eax
f0101d4d:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d50:	e8 5d 13 00 00       	call   f01030b2 <envid2env>
f0101d55:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d5b:	83 c0 08             	add    $0x8,%eax
f0101d5e:	8b 00                	mov    (%eax),%eax
f0101d60:	83 ec 04             	sub    $0x4,%esp
f0101d63:	6a 10                	push   $0x10
f0101d65:	6a 00                	push   $0x0
f0101d67:	50                   	push   %eax
f0101d68:	e8 c8 54 01 00       	call   f0117235 <strtol>
f0101d6d:	83 c4 10             	add    $0x10,%esp
f0101d70:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101d73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d76:	83 c0 0c             	add    $0xc,%eax
f0101d79:	8b 00                	mov    (%eax),%eax
f0101d7b:	83 ec 04             	sub    $0x4,%esp
f0101d7e:	6a 0a                	push   $0xa
f0101d80:	6a 00                	push   $0x0
f0101d82:	50                   	push   %eax
f0101d83:	e8 ad 54 01 00       	call   f0117235 <strtol>
f0101d88:	83 c4 10             	add    $0x10,%esp
f0101d8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101d94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101d97:	85 c0                	test   %eax,%eax
f0101d99:	75 07                	jne    f0101da2 <command_readuserblock+0x86>
f0101d9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101da0:	eb 65                	jmp    f0101e07 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101da2:	0f 20 d8             	mov    %cr3,%eax
f0101da5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101da8:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101dab:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101dae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101db1:	8b 40 60             	mov    0x60(%eax),%eax
f0101db4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101db7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101dba:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101dbd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dc4:	eb 28                	jmp    f0101dee <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dc9:	8a 00                	mov    (%eax),%al
f0101dcb:	0f b6 d0             	movzbl %al,%edx
f0101dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dd1:	8a 00                	mov    (%eax),%al
f0101dd3:	0f b6 c0             	movzbl %al,%eax
f0101dd6:	52                   	push   %edx
f0101dd7:	50                   	push   %eax
f0101dd8:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ddb:	68 8a 87 11 f0       	push   $0xf011878a
f0101de0:	e8 b0 4f 00 00       	call   f0106d95 <cprintf>
f0101de5:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101de8:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101deb:	ff 45 f0             	incl   -0x10(%ebp)
f0101dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101df4:	7c d0                	jl     f0101dc6 <command_readuserblock+0xaa>
f0101df6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101df9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101dfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101dff:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e07:	c9                   	leave  
f0101e08:	c3                   	ret    

f0101e09 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e09:	55                   	push   %ebp
f0101e0a:	89 e5                	mov    %esp,%ebp
f0101e0c:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e12:	83 c0 04             	add    $0x4,%eax
f0101e15:	8b 00                	mov    (%eax),%eax
f0101e17:	83 ec 04             	sub    $0x4,%esp
f0101e1a:	6a 0a                	push   $0xa
f0101e1c:	6a 00                	push   $0x0
f0101e1e:	50                   	push   %eax
f0101e1f:	e8 11 54 01 00       	call   f0117235 <strtol>
f0101e24:	83 c4 10             	add    $0x10,%esp
f0101e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e2a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e31:	83 ec 04             	sub    $0x4,%esp
f0101e34:	6a 00                	push   $0x0
f0101e36:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e39:	50                   	push   %eax
f0101e3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e3d:	e8 70 12 00 00       	call   f01030b2 <envid2env>
f0101e42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e45:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e48:	85 c0                	test   %eax,%eax
f0101e4a:	75 0a                	jne    f0101e56 <command_remove_table+0x4d>
f0101e4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e51:	e9 c7 00 00 00       	jmp    f0101f1d <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e59:	83 c0 08             	add    $0x8,%eax
f0101e5c:	8b 00                	mov    (%eax),%eax
f0101e5e:	83 ec 04             	sub    $0x4,%esp
f0101e61:	6a 10                	push   $0x10
f0101e63:	6a 00                	push   $0x0
f0101e65:	50                   	push   %eax
f0101e66:	e8 ca 53 01 00       	call   f0117235 <strtol>
f0101e6b:	83 c4 10             	add    $0x10,%esp
f0101e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101e71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e74:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101e77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e7a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101e7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101e80:	c1 ea 16             	shr    $0x16,%edx
f0101e83:	c1 e2 02             	shl    $0x2,%edx
f0101e86:	01 d0                	add    %edx,%eax
f0101e88:	8b 00                	mov    (%eax),%eax
f0101e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101e8f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101e92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101e95:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101e9a:	77 1c                	ja     f0101eb8 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101e9c:	83 ec 0c             	sub    $0xc,%esp
f0101e9f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ea2:	e8 f0 9c 00 00       	call   f010bb97 <kheap_virtual_address>
f0101ea7:	83 c4 10             	add    $0x10,%esp
f0101eaa:	83 ec 0c             	sub    $0xc,%esp
f0101ead:	50                   	push   %eax
f0101eae:	e8 55 9c 00 00       	call   f010bb08 <kfree>
f0101eb3:	83 c4 10             	add    $0x10,%esp
f0101eb6:	eb 28                	jmp    f0101ee0 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ebe:	e8 65 ee ff ff       	call   f0100d28 <to_frame_info>
f0101ec3:	83 c4 10             	add    $0x10,%esp
f0101ec6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101ec9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ecc:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101ed2:	83 ec 0c             	sub    $0xc,%esp
f0101ed5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101ed8:	e8 ab 1b 00 00       	call   f0103a88 <free_frame>
f0101edd:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ee3:	c1 e8 16             	shr    $0x16,%eax
f0101ee6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101ee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101eec:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101eef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ef2:	c1 e2 02             	shl    $0x2,%edx
f0101ef5:	01 c2                	add    %eax,%edx
f0101ef7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101efa:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101efd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101f00:	c1 e1 02             	shl    $0x2,%ecx
f0101f03:	01 c8                	add    %ecx,%eax
f0101f05:	8b 00                	mov    (%eax),%eax
f0101f07:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f0a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f0c:	0f 20 d8             	mov    %cr3,%eax
f0101f0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f15:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f18:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f1d:	c9                   	leave  
f0101f1e:	c3                   	ret    

f0101f1f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f1f:	55                   	push   %ebp
f0101f20:	89 e5                	mov    %esp,%ebp
f0101f22:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f28:	83 c0 04             	add    $0x4,%eax
f0101f2b:	8b 00                	mov    (%eax),%eax
f0101f2d:	83 ec 04             	sub    $0x4,%esp
f0101f30:	6a 0a                	push   $0xa
f0101f32:	6a 00                	push   $0x0
f0101f34:	50                   	push   %eax
f0101f35:	e8 fb 52 01 00       	call   f0117235 <strtol>
f0101f3a:	83 c4 10             	add    $0x10,%esp
f0101f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f47:	83 ec 04             	sub    $0x4,%esp
f0101f4a:	6a 00                	push   $0x0
f0101f4c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f4f:	50                   	push   %eax
f0101f50:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f53:	e8 5a 11 00 00       	call   f01030b2 <envid2env>
f0101f58:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f5e:	85 c0                	test   %eax,%eax
f0101f60:	75 07                	jne    f0101f69 <command_allocuserpage+0x4a>
f0101f62:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f67:	eb 6d                	jmp    f0101fd6 <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f6c:	83 c0 08             	add    $0x8,%eax
f0101f6f:	8b 00                	mov    (%eax),%eax
f0101f71:	83 ec 04             	sub    $0x4,%esp
f0101f74:	6a 10                	push   $0x10
f0101f76:	6a 00                	push   $0x0
f0101f78:	50                   	push   %eax
f0101f79:	e8 b7 52 01 00       	call   f0117235 <strtol>
f0101f7e:	83 c4 10             	add    $0x10,%esp
f0101f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f87:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101f8a:	83 ec 0c             	sub    $0xc,%esp
f0101f8d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101f90:	50                   	push   %eax
f0101f91:	e8 00 1a 00 00       	call   f0103996 <allocate_frame>
f0101f96:	83 c4 10             	add    $0x10,%esp
f0101f99:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101f9c:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101fa0:	75 17                	jne    f0101fb9 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	68 9b 87 11 f0       	push   $0xf011879b
f0101faa:	e8 e6 4d 00 00       	call   f0106d95 <cprintf>
f0101faf:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101fb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fb7:	eb 1d                	jmp    f0101fd6 <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101fb9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101fbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101fbf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101fc2:	6a 06                	push   $0x6
f0101fc4:	ff 75 ec             	pushl  -0x14(%ebp)
f0101fc7:	52                   	push   %edx
f0101fc8:	50                   	push   %eax
f0101fc9:	e8 3c 1d 00 00       	call   f0103d0a <map_frame>
f0101fce:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd6:	c9                   	leave  
f0101fd7:	c3                   	ret    

f0101fd8 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101fd8:	55                   	push   %ebp
f0101fd9:	89 e5                	mov    %esp,%ebp
f0101fdb:	56                   	push   %esi
f0101fdc:	53                   	push   %ebx
f0101fdd:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101fe0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101fe3:	83 ec 0c             	sub    $0xc,%esp
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 16 22 00 00       	call   f0104202 <calculate_available_frames>
f0101fec:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101fef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101ff2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101ff8:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101ffb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101ffe:	01 de                	add    %ebx,%esi
f0102000:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102003:	01 f3                	add    %esi,%ebx
f0102005:	83 ec 0c             	sub    $0xc,%esp
f0102008:	51                   	push   %ecx
f0102009:	52                   	push   %edx
f010200a:	50                   	push   %eax
f010200b:	53                   	push   %ebx
f010200c:	68 b4 87 11 f0       	push   $0xf01187b4
f0102011:	e8 7f 4d 00 00       	call   f0106d95 <cprintf>
f0102016:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102019:	a1 80 b2 54 f0       	mov    0xf054b280,%eax
f010201e:	83 ec 08             	sub    $0x8,%esp
f0102021:	50                   	push   %eax
f0102022:	68 0c 88 11 f0       	push   $0xf011880c
f0102027:	e8 69 4d 00 00       	call   f0106d95 <cprintf>
f010202c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010202f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102034:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102037:	5b                   	pop    %ebx
f0102038:	5e                   	pop    %esi
f0102039:	5d                   	pop    %ebp
f010203a:	c3                   	ret    

f010203b <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010203b:	55                   	push   %ebp
f010203c:	89 e5                	mov    %esp,%ebp
f010203e:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102041:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102045:	7f 1a                	jg     f0102061 <command_run_program+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102047:	83 ec 0c             	sub    $0xc,%esp
f010204a:	68 48 88 11 f0       	push   $0xf0118848
f010204f:	e8 41 4d 00 00       	call   f0106d95 <cprintf>
f0102054:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102057:	b8 00 00 00 00       	mov    $0x0,%eax
f010205c:	e9 b2 00 00 00       	jmp    f0102113 <command_run_program+0xd8>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102061:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102065:	75 1d                	jne    f0102084 <command_run_program+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102067:	8b 45 0c             	mov    0xc(%ebp),%eax
f010206a:	83 c0 0c             	add    $0xc,%eax
f010206d:	8b 00                	mov    (%eax),%eax
f010206f:	83 ec 04             	sub    $0x4,%esp
f0102072:	6a 0a                	push   $0xa
f0102074:	6a 00                	push   $0x0
f0102076:	50                   	push   %eax
f0102077:	e8 b9 51 01 00       	call   f0117235 <strtol>
f010207c:	83 c4 10             	add    $0x10,%esp
f010207f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102082:	eb 07                	jmp    f010208b <command_run_program+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102084:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010208b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010208e:	83 c0 08             	add    $0x8,%eax
f0102091:	8b 00                	mov    (%eax),%eax
f0102093:	83 ec 04             	sub    $0x4,%esp
f0102096:	6a 0a                	push   $0xa
f0102098:	6a 00                	push   $0x0
f010209a:	50                   	push   %eax
f010209b:	e8 95 51 01 00       	call   f0117235 <strtol>
f01020a0:	83 c4 10             	add    $0x10,%esp
f01020a3:	89 c2                	mov    %eax,%edx
f01020a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020a8:	83 c0 04             	add    $0x4,%eax
f01020ab:	8b 00                	mov    (%eax),%eax
f01020ad:	83 ec 04             	sub    $0x4,%esp
f01020b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01020b3:	52                   	push   %edx
f01020b4:	50                   	push   %eax
f01020b5:	e8 62 39 00 00       	call   f0105a1c <env_create>
f01020ba:	83 c4 10             	add    $0x10,%esp
f01020bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if(env == NULL) return 0;
f01020c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01020c4:	75 07                	jne    f01020cd <command_run_program+0x92>
f01020c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01020cb:	eb 46                	jmp    f0102113 <command_run_program+0xd8>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01020cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020d0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01020d3:	83 ec 08             	sub    $0x8,%esp
f01020d6:	50                   	push   %eax
f01020d7:	68 93 88 11 f0       	push   $0xf0118893
f01020dc:	e8 b4 4c 00 00       	call   f0106d95 <cprintf>
f01020e1:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f01020e4:	c7 05 80 b2 54 f0 00 	movl   $0x0,0xf054b280
f01020eb:	00 00 00 

	sched_new_env(env);
f01020ee:	83 ec 0c             	sub    $0xc,%esp
f01020f1:	ff 75 f0             	pushl  -0x10(%ebp)
f01020f4:	e8 51 74 00 00       	call   f010954a <sched_new_env>
f01020f9:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f01020fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	50                   	push   %eax
f0102106:	e8 56 74 00 00       	call   f0109561 <sched_run_env>
f010210b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010210e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102113:	c9                   	leave  
f0102114:	c3                   	ret    

f0102115 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102115:	55                   	push   %ebp
f0102116:	89 e5                	mov    %esp,%ebp
f0102118:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010211b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010211e:	83 c0 04             	add    $0x4,%eax
f0102121:	8b 00                	mov    (%eax),%eax
f0102123:	83 ec 04             	sub    $0x4,%esp
f0102126:	6a 0a                	push   $0xa
f0102128:	6a 00                	push   $0x0
f010212a:	50                   	push   %eax
f010212b:	e8 05 51 01 00       	call   f0117235 <strtol>
f0102130:	83 c4 10             	add    $0x10,%esp
f0102133:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102136:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	50                   	push   %eax
f010213d:	e8 fa 77 00 00       	call   f010993c <sched_kill_env>
f0102142:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214a:	c9                   	leave  
f010214b:	c3                   	ret    

f010214c <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010214c:	55                   	push   %ebp
f010214d:	89 e5                	mov    %esp,%ebp
f010214f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102152:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102156:	7f 1a                	jg     f0102172 <commnad_load_env+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102158:	83 ec 0c             	sub    $0xc,%esp
f010215b:	68 48 88 11 f0       	push   $0xf0118848
f0102160:	e8 30 4c 00 00       	call   f0106d95 <cprintf>
f0102165:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102168:	b8 00 00 00 00       	mov    $0x0,%eax
f010216d:	e9 96 00 00 00       	jmp    f0102208 <commnad_load_env+0xbc>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102172:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102176:	75 1d                	jne    f0102195 <commnad_load_env+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102178:	8b 45 0c             	mov    0xc(%ebp),%eax
f010217b:	83 c0 0c             	add    $0xc,%eax
f010217e:	8b 00                	mov    (%eax),%eax
f0102180:	83 ec 04             	sub    $0x4,%esp
f0102183:	6a 0a                	push   $0xa
f0102185:	6a 00                	push   $0x0
f0102187:	50                   	push   %eax
f0102188:	e8 a8 50 01 00       	call   f0117235 <strtol>
f010218d:	83 c4 10             	add    $0x10,%esp
f0102190:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102193:	eb 07                	jmp    f010219c <commnad_load_env+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102195:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010219c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010219f:	83 c0 08             	add    $0x8,%eax
f01021a2:	8b 00                	mov    (%eax),%eax
f01021a4:	83 ec 04             	sub    $0x4,%esp
f01021a7:	6a 0a                	push   $0xa
f01021a9:	6a 00                	push   $0x0
f01021ab:	50                   	push   %eax
f01021ac:	e8 84 50 01 00       	call   f0117235 <strtol>
f01021b1:	83 c4 10             	add    $0x10,%esp
f01021b4:	89 c2                	mov    %eax,%edx
f01021b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021b9:	83 c0 04             	add    $0x4,%eax
f01021bc:	8b 00                	mov    (%eax),%eax
f01021be:	83 ec 04             	sub    $0x4,%esp
f01021c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01021c4:	52                   	push   %edx
f01021c5:	50                   	push   %eax
f01021c6:	e8 51 38 00 00       	call   f0105a1c <env_create>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if (env == NULL)
f01021d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01021d5:	75 07                	jne    f01021de <commnad_load_env+0x92>
		return 0 ;
f01021d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01021dc:	eb 2a                	jmp    f0102208 <commnad_load_env+0xbc>

	sched_new_env(env) ;
f01021de:	83 ec 0c             	sub    $0xc,%esp
f01021e1:	ff 75 f0             	pushl  -0x10(%ebp)
f01021e4:	e8 61 73 00 00       	call   f010954a <sched_new_env>
f01021e9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01021ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01021ef:	8b 40 4c             	mov    0x4c(%eax),%eax
f01021f2:	83 ec 08             	sub    $0x8,%esp
f01021f5:	50                   	push   %eax
f01021f6:	68 93 88 11 f0       	push   $0xf0118893
f01021fb:	e8 95 4b 00 00       	call   f0106d95 <cprintf>
f0102200:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102203:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102208:	c9                   	leave  
f0102209:	c3                   	ret    

f010220a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f010220a:	55                   	push   %ebp
f010220b:	89 e5                	mov    %esp,%ebp
f010220d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102210:	c7 05 80 b2 54 f0 00 	movl   $0x0,0xf054b280
f0102217:	00 00 00 
	sched_run_all();
f010221a:	e8 96 6f 00 00       	call   f01091b5 <sched_run_all>

	return 0 ;
f010221f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102224:	c9                   	leave  
f0102225:	c3                   	ret    

f0102226 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102226:	55                   	push   %ebp
f0102227:	89 e5                	mov    %esp,%ebp
f0102229:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f010222c:	e8 7a 6d 00 00       	call   f0108fab <sched_print_all>

	return 0 ;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f010223e:	e8 df 6f 00 00       	call   f0109222 <sched_kill_all>

	return 0 ;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmLRU();
f0102250:	e8 6f 60 00 00       	call   f01082c4 <setPageReplacmentAlgorithmLRU>
	cprintf("Page replacement algorithm is now LRU\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 a8 88 11 f0       	push   $0xf01188a8
f010225d:	e8 33 4b 00 00       	call   f0106d95 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102272:	e8 5d 60 00 00       	call   f01082d4 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102277:	83 ec 0c             	sub    $0xc,%esp
f010227a:	68 d0 88 11 f0       	push   $0xf01188d0
f010227f:	e8 11 4b 00 00       	call   f0106d95 <cprintf>
f0102284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010228c:	c9                   	leave  
f010228d:	c3                   	ret    

f010228e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f010228e:	55                   	push   %ebp
f010228f:	89 e5                	mov    %esp,%ebp
f0102291:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102294:	e8 4b 60 00 00       	call   f01082e4 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102299:	83 ec 0c             	sub    $0xc,%esp
f010229c:	68 fc 88 11 f0       	push   $0xf01188fc
f01022a1:	e8 ef 4a 00 00       	call   f0106d95 <cprintf>
f01022a6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ae:	c9                   	leave  
f01022af:	c3                   	ret    

f01022b0 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f01022b0:	55                   	push   %ebp
f01022b1:	89 e5                	mov    %esp,%ebp
f01022b3:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f01022b6:	e8 39 60 00 00       	call   f01082f4 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f01022bb:	83 ec 0c             	sub    $0xc,%esp
f01022be:	68 24 89 11 f0       	push   $0xf0118924
f01022c3:	e8 cd 4a 00 00       	call   f0106d95 <cprintf>
f01022c8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d0:	c9                   	leave  
f01022d1:	c3                   	ret    

f01022d2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f01022d2:	55                   	push   %ebp
f01022d3:	89 e5                	mov    %esp,%ebp
f01022d5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f01022d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022db:	83 c0 04             	add    $0x4,%eax
f01022de:	8b 00                	mov    (%eax),%eax
f01022e0:	83 ec 04             	sub    $0x4,%esp
f01022e3:	6a 0a                	push   $0xa
f01022e5:	6a 00                	push   $0x0
f01022e7:	50                   	push   %eax
f01022e8:	e8 48 4f 01 00       	call   f0117235 <strtol>
f01022ed:	83 c4 10             	add    $0x10,%esp
f01022f0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f01022f3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01022f7:	83 ec 0c             	sub    $0xc,%esp
f01022fa:	50                   	push   %eax
f01022fb:	e8 1e 69 00 00       	call   f0108c1e <sched_init_RR>
f0102300:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102303:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0102308:	8a 00                	mov    (%eax),%al
f010230a:	0f b6 c0             	movzbl %al,%eax
f010230d:	83 ec 08             	sub    $0x8,%esp
f0102310:	50                   	push   %eax
f0102311:	68 58 89 11 f0       	push   $0xf0118958
f0102316:	e8 7a 4a 00 00       	call   f0106d95 <cprintf>
f010231b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010231e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102323:	c9                   	leave  
f0102324:	c3                   	ret    

f0102325 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102325:	55                   	push   %ebp
f0102326:	89 e5                	mov    %esp,%ebp
f0102328:	53                   	push   %ebx
f0102329:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f010232c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010232f:	83 c0 04             	add    $0x4,%eax
f0102332:	8b 00                	mov    (%eax),%eax
f0102334:	83 ec 04             	sub    $0x4,%esp
f0102337:	6a 0a                	push   $0xa
f0102339:	6a 00                	push   $0x0
f010233b:	50                   	push   %eax
f010233c:	e8 f4 4e 01 00       	call   f0117235 <strtol>
f0102341:	83 c4 10             	add    $0x10,%esp
f0102344:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102347:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010234e:	eb 2e                	jmp    f010237e <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102350:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102353:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102359:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102360:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102363:	01 d0                	add    %edx,%eax
f0102365:	8b 00                	mov    (%eax),%eax
f0102367:	83 ec 04             	sub    $0x4,%esp
f010236a:	6a 0a                	push   $0xa
f010236c:	6a 00                	push   $0x0
f010236e:	50                   	push   %eax
f010236f:	e8 c1 4e 01 00       	call   f0117235 <strtol>
f0102374:	83 c4 10             	add    $0x10,%esp
f0102377:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010237b:	ff 45 f4             	incl   -0xc(%ebp)
f010237e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102381:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102384:	7c ca                	jl     f0102350 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102386:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010238a:	83 ec 08             	sub    $0x8,%esp
f010238d:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102390:	52                   	push   %edx
f0102391:	50                   	push   %eax
f0102392:	e8 48 67 00 00       	call   f0108adf <sched_init_MLFQ>
f0102397:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010239a:	83 ec 0c             	sub    $0xc,%esp
f010239d:	68 90 89 11 f0       	push   $0xf0118990
f01023a2:	e8 ee 49 00 00       	call   f0106d95 <cprintf>
f01023a7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01023b1:	eb 24                	jmp    f01023d7 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f01023b3:	8b 15 30 d2 52 f0    	mov    0xf052d230,%edx
f01023b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01023bc:	01 d0                	add    %edx,%eax
f01023be:	8a 00                	mov    (%eax),%al
f01023c0:	0f b6 c0             	movzbl %al,%eax
f01023c3:	83 ec 08             	sub    $0x8,%esp
f01023c6:	50                   	push   %eax
f01023c7:	68 bd 89 11 f0       	push   $0xf01189bd
f01023cc:	e8 c4 49 00 00       	call   f0106d95 <cprintf>
f01023d1:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023d4:	ff 45 f0             	incl   -0x10(%ebp)
f01023d7:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01023dc:	0f b6 c0             	movzbl %al,%eax
f01023df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01023e2:	7f cf                	jg     f01023b3 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 88 87 11 f0       	push   $0xf0118788
f01023ec:	e8 a4 49 00 00       	call   f0106d95 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023fc:	c9                   	leave  
f01023fd:	c3                   	ret    

f01023fe <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01023fe:	55                   	push   %ebp
f01023ff:	89 e5                	mov    %esp,%ebp
f0102401:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102404:	e8 bc 64 00 00       	call   f01088c5 <isSchedMethodMLFQ>
f0102409:	85 c0                	test   %eax,%eax
f010240b:	74 5c                	je     f0102469 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010240d:	83 ec 0c             	sub    $0xc,%esp
f0102410:	68 c4 89 11 f0       	push   $0xf01189c4
f0102415:	e8 7b 49 00 00       	call   f0106d95 <cprintf>
f010241a:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010241d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102424:	eb 24                	jmp    f010244a <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102426:	8b 15 30 d2 52 f0    	mov    0xf052d230,%edx
f010242c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010242f:	01 d0                	add    %edx,%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	0f b6 c0             	movzbl %al,%eax
f0102436:	83 ec 08             	sub    $0x8,%esp
f0102439:	50                   	push   %eax
f010243a:	68 bd 89 11 f0       	push   $0xf01189bd
f010243f:	e8 51 49 00 00       	call   f0106d95 <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102447:	ff 45 f4             	incl   -0xc(%ebp)
f010244a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010244f:	0f b6 c0             	movzbl %al,%eax
f0102452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102455:	7f cf                	jg     f0102426 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102457:	83 ec 0c             	sub    $0xc,%esp
f010245a:	68 88 87 11 f0       	push   $0xf0118788
f010245f:	e8 31 49 00 00       	call   f0106d95 <cprintf>
f0102464:	83 c4 10             	add    $0x10,%esp
f0102467:	eb 36                	jmp    f010249f <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102469:	e8 3d 64 00 00       	call   f01088ab <isSchedMethodRR>
f010246e:	85 c0                	test   %eax,%eax
f0102470:	74 1d                	je     f010248f <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102472:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0102477:	8a 00                	mov    (%eax),%al
f0102479:	0f b6 c0             	movzbl %al,%eax
f010247c:	83 ec 08             	sub    $0x8,%esp
f010247f:	50                   	push   %eax
f0102480:	68 f8 89 11 f0       	push   $0xf01189f8
f0102485:	e8 0b 49 00 00       	call   f0106d95 <cprintf>
f010248a:	83 c4 10             	add    $0x10,%esp
f010248d:	eb 10                	jmp    f010249f <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010248f:	83 ec 0c             	sub    $0xc,%esp
f0102492:	68 34 8a 11 f0       	push   $0xf0118a34
f0102497:	e8 f9 48 00 00       	call   f0106d95 <cprintf>
f010249c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010249f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a4:	c9                   	leave  
f01024a5:	c3                   	ret    

f01024a6 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01024a6:	55                   	push   %ebp
f01024a7:	89 e5                	mov    %esp,%ebp
f01024a9:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01024ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024af:	83 c0 04             	add    $0x4,%eax
f01024b2:	8b 00                	mov    (%eax),%eax
f01024b4:	83 ec 04             	sub    $0x4,%esp
f01024b7:	6a 0a                	push   $0xa
f01024b9:	6a 00                	push   $0x0
f01024bb:	50                   	push   %eax
f01024bc:	e8 74 4d 01 00       	call   f0117235 <strtol>
f01024c1:	83 c4 10             	add    $0x10,%esp
f01024c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01024c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01024ca:	0f b6 c0             	movzbl %al,%eax
f01024cd:	83 ec 0c             	sub    $0xc,%esp
f01024d0:	50                   	push   %eax
f01024d1:	e8 38 2b 01 00       	call   f011500e <chksch>
f01024d6:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01024d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024dd:	75 12                	jne    f01024f1 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01024df:	83 ec 0c             	sub    $0xc,%esp
f01024e2:	68 5c 8a 11 f0       	push   $0xf0118a5c
f01024e7:	e8 a9 48 00 00       	call   f0106d95 <cprintf>
f01024ec:	83 c4 10             	add    $0x10,%esp
f01024ef:	eb 16                	jmp    f0102507 <command_sch_test+0x61>
	else if (status == 1)
f01024f1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024f5:	75 10                	jne    f0102507 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01024f7:	83 ec 0c             	sub    $0xc,%esp
f01024fa:	68 84 8a 11 f0       	push   $0xf0118a84
f01024ff:	e8 91 48 00 00       	call   f0106d95 <cprintf>
f0102504:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102507:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010250c:	c9                   	leave  
f010250d:	c3                   	ret    

f010250e <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010250e:	55                   	push   %ebp
f010250f:	89 e5                	mov    %esp,%ebp
f0102511:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102514:	e8 06 5e 00 00       	call   f010831f <isPageReplacmentAlgorithmCLOCK>
f0102519:	85 c0                	test   %eax,%eax
f010251b:	74 12                	je     f010252f <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f010251d:	83 ec 0c             	sub    $0xc,%esp
f0102520:	68 a8 8a 11 f0       	push   $0xf0118aa8
f0102525:	e8 6b 48 00 00       	call   f0106d95 <cprintf>
f010252a:	83 c4 10             	add    $0x10,%esp
f010252d:	eb 61                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmLRU())
f010252f:	e8 d0 5d 00 00       	call   f0108304 <isPageReplacmentAlgorithmLRU>
f0102534:	85 c0                	test   %eax,%eax
f0102536:	74 12                	je     f010254a <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU\n");
f0102538:	83 ec 0c             	sub    $0xc,%esp
f010253b:	68 d0 8a 11 f0       	push   $0xf0118ad0
f0102540:	e8 50 48 00 00       	call   f0106d95 <cprintf>
f0102545:	83 c4 10             	add    $0x10,%esp
f0102548:	eb 46                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmFIFO())
f010254a:	e8 eb 5d 00 00       	call   f010833a <isPageReplacmentAlgorithmFIFO>
f010254f:	85 c0                	test   %eax,%eax
f0102551:	74 12                	je     f0102565 <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is FIFO\n");
f0102553:	83 ec 0c             	sub    $0xc,%esp
f0102556:	68 f4 8a 11 f0       	push   $0xf0118af4
f010255b:	e8 35 48 00 00       	call   f0106d95 <cprintf>
f0102560:	83 c4 10             	add    $0x10,%esp
f0102563:	eb 2b                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102565:	e8 eb 5d 00 00       	call   f0108355 <isPageReplacmentAlgorithmModifiedCLOCK>
f010256a:	85 c0                	test   %eax,%eax
f010256c:	74 12                	je     f0102580 <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f010256e:	83 ec 0c             	sub    $0xc,%esp
f0102571:	68 18 8b 11 f0       	push   $0xf0118b18
f0102576:	e8 1a 48 00 00       	call   f0106d95 <cprintf>
f010257b:	83 c4 10             	add    $0x10,%esp
f010257e:	eb 10                	jmp    f0102590 <command_print_page_rep+0x82>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102580:	83 ec 0c             	sub    $0xc,%esp
f0102583:	68 48 8b 11 f0       	push   $0xf0118b48
f0102588:	e8 08 48 00 00       	call   f0106d95 <cprintf>
f010258d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102590:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102595:	c9                   	leave  
f0102596:	c3                   	ret    

f0102597 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102597:	55                   	push   %ebp
f0102598:	89 e5                	mov    %esp,%ebp
f010259a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f010259d:	e8 c2 2c 00 00       	call   f0105264 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01025a2:	83 ec 0c             	sub    $0xc,%esp
f01025a5:	68 74 8b 11 f0       	push   $0xf0118b74
f01025aa:	e8 e6 47 00 00       	call   f0106d95 <cprintf>
f01025af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025b7:	c9                   	leave  
f01025b8:	c3                   	ret    

f01025b9 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01025b9:	55                   	push   %ebp
f01025ba:	89 e5                	mov    %esp,%ebp
f01025bc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01025bf:	e8 b0 2c 00 00       	call   f0105274 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01025c4:	83 ec 0c             	sub    $0xc,%esp
f01025c7:	68 a4 8b 11 f0       	push   $0xf0118ba4
f01025cc:	e8 c4 47 00 00       	call   f0106d95 <cprintf>
f01025d1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025d9:	c9                   	leave  
f01025da:	c3                   	ret    

f01025db <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01025e1:	e8 9e 2c 00 00       	call   f0105284 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01025e6:	83 ec 0c             	sub    $0xc,%esp
f01025e9:	68 d4 8b 11 f0       	push   $0xf0118bd4
f01025ee:	e8 a2 47 00 00       	call   f0106d95 <cprintf>
f01025f3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025fb:	c9                   	leave  
f01025fc:	c3                   	ret    

f01025fd <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01025fd:	55                   	push   %ebp
f01025fe:	89 e5                	mov    %esp,%ebp
f0102600:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102603:	e8 8c 2c 00 00       	call   f0105294 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102608:	83 ec 0c             	sub    $0xc,%esp
f010260b:	68 04 8c 11 f0       	push   $0xf0118c04
f0102610:	e8 80 47 00 00       	call   f0106d95 <cprintf>
f0102615:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102618:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261d:	c9                   	leave  
f010261e:	c3                   	ret    

f010261f <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010261f:	55                   	push   %ebp
f0102620:	89 e5                	mov    %esp,%ebp
f0102622:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102625:	e8 7a 2c 00 00       	call   f01052a4 <isUHeapPlacementStrategyFIRSTFIT>
f010262a:	85 c0                	test   %eax,%eax
f010262c:	74 12                	je     f0102640 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010262e:	83 ec 0c             	sub    $0xc,%esp
f0102631:	68 34 8c 11 f0       	push   $0xf0118c34
f0102636:	e8 5a 47 00 00       	call   f0106d95 <cprintf>
f010263b:	83 c4 10             	add    $0x10,%esp
f010263e:	eb 61                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102640:	e8 7a 2c 00 00       	call   f01052bf <isUHeapPlacementStrategyBESTFIT>
f0102645:	85 c0                	test   %eax,%eax
f0102647:	74 12                	je     f010265b <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102649:	83 ec 0c             	sub    $0xc,%esp
f010264c:	68 60 8c 11 f0       	push   $0xf0118c60
f0102651:	e8 3f 47 00 00       	call   f0106d95 <cprintf>
f0102656:	83 c4 10             	add    $0x10,%esp
f0102659:	eb 46                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010265b:	e8 7a 2c 00 00       	call   f01052da <isUHeapPlacementStrategyNEXTFIT>
f0102660:	85 c0                	test   %eax,%eax
f0102662:	74 12                	je     f0102676 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102664:	83 ec 0c             	sub    $0xc,%esp
f0102667:	68 8c 8c 11 f0       	push   $0xf0118c8c
f010266c:	e8 24 47 00 00       	call   f0106d95 <cprintf>
f0102671:	83 c4 10             	add    $0x10,%esp
f0102674:	eb 2b                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0102676:	e8 7a 2c 00 00       	call   f01052f5 <isUHeapPlacementStrategyWORSTFIT>
f010267b:	85 c0                	test   %eax,%eax
f010267d:	74 12                	je     f0102691 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f010267f:	83 ec 0c             	sub    $0xc,%esp
f0102682:	68 b8 8c 11 f0       	push   $0xf0118cb8
f0102687:	e8 09 47 00 00       	call   f0106d95 <cprintf>
f010268c:	83 c4 10             	add    $0x10,%esp
f010268f:	eb 10                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102691:	83 ec 0c             	sub    $0xc,%esp
f0102694:	68 e4 8c 11 f0       	push   $0xf0118ce4
f0102699:	e8 f7 46 00 00       	call   f0106d95 <cprintf>
f010269e:	83 c4 10             	add    $0x10,%esp

	return 0;
f01026a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a6:	c9                   	leave  
f01026a7:	c3                   	ret    

f01026a8 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01026a8:	55                   	push   %ebp
f01026a9:	89 e5                	mov    %esp,%ebp
f01026ab:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01026ae:	e8 5d 2c 00 00       	call   f0105310 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 10 8d 11 f0       	push   $0xf0118d10
f01026bb:	e8 d5 46 00 00       	call   f0106d95 <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c8:	c9                   	leave  
f01026c9:	c3                   	ret    

f01026ca <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01026ca:	55                   	push   %ebp
f01026cb:	89 e5                	mov    %esp,%ebp
f01026cd:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01026d0:	e8 4b 2c 00 00       	call   f0105320 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026d5:	83 ec 0c             	sub    $0xc,%esp
f01026d8:	68 10 8d 11 f0       	push   $0xf0118d10
f01026dd:	e8 b3 46 00 00       	call   f0106d95 <cprintf>
f01026e2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026ea:	c9                   	leave  
f01026eb:	c3                   	ret    

f01026ec <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01026ec:	55                   	push   %ebp
f01026ed:	89 e5                	mov    %esp,%ebp
f01026ef:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01026f2:	e8 39 2c 00 00       	call   f0105330 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01026f7:	83 ec 0c             	sub    $0xc,%esp
f01026fa:	68 44 8d 11 f0       	push   $0xf0118d44
f01026ff:	e8 91 46 00 00       	call   f0106d95 <cprintf>
f0102704:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102707:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010270c:	c9                   	leave  
f010270d:	c3                   	ret    

f010270e <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010270e:	55                   	push   %ebp
f010270f:	89 e5                	mov    %esp,%ebp
f0102711:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102714:	e8 27 2c 00 00       	call   f0105340 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102719:	83 ec 0c             	sub    $0xc,%esp
f010271c:	68 74 8d 11 f0       	push   $0xf0118d74
f0102721:	e8 6f 46 00 00       	call   f0106d95 <cprintf>
f0102726:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102729:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010272e:	c9                   	leave  
f010272f:	c3                   	ret    

f0102730 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102730:	55                   	push   %ebp
f0102731:	89 e5                	mov    %esp,%ebp
f0102733:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102736:	e8 15 2c 00 00       	call   f0105350 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010273b:	83 ec 0c             	sub    $0xc,%esp
f010273e:	68 a4 8d 11 f0       	push   $0xf0118da4
f0102743:	e8 4d 46 00 00       	call   f0106d95 <cprintf>
f0102748:	83 c4 10             	add    $0x10,%esp
	return 0;
f010274b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102750:	c9                   	leave  
f0102751:	c3                   	ret    

f0102752 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102752:	55                   	push   %ebp
f0102753:	89 e5                	mov    %esp,%ebp
f0102755:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102758:	e8 03 2c 00 00       	call   f0105360 <isKHeapPlacementStrategyCONTALLOC>
f010275d:	85 c0                	test   %eax,%eax
f010275f:	74 12                	je     f0102773 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 d8 8d 11 f0       	push   $0xf0118dd8
f0102769:	e8 27 46 00 00       	call   f0106d95 <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
f0102771:	eb 7c                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102773:	e8 02 2c 00 00       	call   f010537a <isKHeapPlacementStrategyFIRSTFIT>
f0102778:	85 c0                	test   %eax,%eax
f010277a:	74 12                	je     f010278e <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010277c:	83 ec 0c             	sub    $0xc,%esp
f010277f:	68 14 8e 11 f0       	push   $0xf0118e14
f0102784:	e8 0c 46 00 00       	call   f0106d95 <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
f010278c:	eb 61                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f010278e:	e8 02 2c 00 00       	call   f0105395 <isKHeapPlacementStrategyBESTFIT>
f0102793:	85 c0                	test   %eax,%eax
f0102795:	74 12                	je     f01027a9 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102797:	83 ec 0c             	sub    $0xc,%esp
f010279a:	68 44 8e 11 f0       	push   $0xf0118e44
f010279f:	e8 f1 45 00 00       	call   f0106d95 <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
f01027a7:	eb 46                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027a9:	e8 02 2c 00 00       	call   f01053b0 <isKHeapPlacementStrategyNEXTFIT>
f01027ae:	85 c0                	test   %eax,%eax
f01027b0:	74 12                	je     f01027c4 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01027b2:	83 ec 0c             	sub    $0xc,%esp
f01027b5:	68 70 8e 11 f0       	push   $0xf0118e70
f01027ba:	e8 d6 45 00 00       	call   f0106d95 <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
f01027c2:	eb 2b                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027c4:	e8 02 2c 00 00       	call   f01053cb <isKHeapPlacementStrategyWORSTFIT>
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	74 12                	je     f01027df <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01027cd:	83 ec 0c             	sub    $0xc,%esp
f01027d0:	68 9c 8e 11 f0       	push   $0xf0118e9c
f01027d5:	e8 bb 45 00 00       	call   f0106d95 <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
f01027dd:	eb 10                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01027df:	83 ec 0c             	sub    $0xc,%esp
f01027e2:	68 cc 8e 11 f0       	push   $0xf0118ecc
f01027e7:	e8 a9 45 00 00       	call   f0106d95 <cprintf>
f01027ec:	83 c4 10             	add    $0x10,%esp

	return 0;
f01027ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027f4:	c9                   	leave  
f01027f5:	c3                   	ret    

f01027f6 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01027f6:	55                   	push   %ebp
f01027f7:	89 e5                	mov    %esp,%ebp
f01027f9:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01027fc:	e8 95 5b 00 00       	call   f0108396 <isBufferingEnabled>
f0102801:	85 c0                	test   %eax,%eax
f0102803:	75 12                	jne    f0102817 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102805:	83 ec 0c             	sub    $0xc,%esp
f0102808:	68 fc 8e 11 f0       	push   $0xf0118efc
f010280d:	e8 83 45 00 00       	call   f0106d95 <cprintf>
f0102812:	83 c4 10             	add    $0x10,%esp
f0102815:	eb 1d                	jmp    f0102834 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102817:	83 ec 0c             	sub    $0xc,%esp
f010281a:	6a 00                	push   $0x0
f010281c:	e8 4f 5b 00 00       	call   f0108370 <enableModifiedBuffer>
f0102821:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102824:	83 ec 0c             	sub    $0xc,%esp
f0102827:	68 38 8f 11 f0       	push   $0xf0118f38
f010282c:	e8 64 45 00 00       	call   f0106d95 <cprintf>
f0102831:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102834:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102839:	c9                   	leave  
f010283a:	c3                   	ret    

f010283b <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010283b:	55                   	push   %ebp
f010283c:	89 e5                	mov    %esp,%ebp
f010283e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102841:	e8 50 5b 00 00       	call   f0108396 <isBufferingEnabled>
f0102846:	85 c0                	test   %eax,%eax
f0102848:	75 12                	jne    f010285c <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010284a:	83 ec 0c             	sub    $0xc,%esp
f010284d:	68 fc 8e 11 f0       	push   $0xf0118efc
f0102852:	e8 3e 45 00 00       	call   f0106d95 <cprintf>
f0102857:	83 c4 10             	add    $0x10,%esp
f010285a:	eb 1d                	jmp    f0102879 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010285c:	83 ec 0c             	sub    $0xc,%esp
f010285f:	6a 01                	push   $0x1
f0102861:	e8 0a 5b 00 00       	call   f0108370 <enableModifiedBuffer>
f0102866:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102869:	83 ec 0c             	sub    $0xc,%esp
f010286c:	68 5c 8f 11 f0       	push   $0xf0118f5c
f0102871:	e8 1f 45 00 00       	call   f0106d95 <cprintf>
f0102876:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102879:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010287e:	c9                   	leave  
f010287f:	c3                   	ret    

f0102880 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102880:	55                   	push   %ebp
f0102881:	89 e5                	mov    %esp,%ebp
f0102883:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102886:	83 ec 0c             	sub    $0xc,%esp
f0102889:	6a 00                	push   $0x0
f010288b:	e8 f8 5a 00 00       	call   f0108388 <enableBuffering>
f0102890:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102893:	83 ec 0c             	sub    $0xc,%esp
f0102896:	6a 00                	push   $0x0
f0102898:	e8 d3 5a 00 00       	call   f0108370 <enableModifiedBuffer>
f010289d:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01028a0:	83 ec 0c             	sub    $0xc,%esp
f01028a3:	68 7c 8f 11 f0       	push   $0xf0118f7c
f01028a8:	e8 e8 44 00 00       	call   f0106d95 <cprintf>
f01028ad:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01028bd:	83 ec 0c             	sub    $0xc,%esp
f01028c0:	6a 01                	push   $0x1
f01028c2:	e8 c1 5a 00 00       	call   f0108388 <enableBuffering>
f01028c7:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01028ca:	83 ec 0c             	sub    $0xc,%esp
f01028cd:	6a 01                	push   $0x1
f01028cf:	e8 9c 5a 00 00       	call   f0108370 <enableModifiedBuffer>
f01028d4:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01028d7:	e8 d2 5a 00 00       	call   f01083ae <getModifiedBufferLength>
f01028dc:	85 c0                	test   %eax,%eax
f01028de:	75 59                	jne    f0102939 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01028e0:	83 ec 0c             	sub    $0xc,%esp
f01028e3:	68 98 8f 11 f0       	push   $0xf0118f98
f01028e8:	e8 a8 44 00 00       	call   f0106d95 <cprintf>
f01028ed:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01028f0:	83 ec 08             	sub    $0x8,%esp
f01028f3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01028f6:	50                   	push   %eax
f01028f7:	68 c8 8f 11 f0       	push   $0xf0118fc8
f01028fc:	e8 ce 43 01 00       	call   f0116ccf <readline>
f0102901:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102904:	83 ec 04             	sub    $0x4,%esp
f0102907:	6a 0a                	push   $0xa
f0102909:	6a 00                	push   $0x0
f010290b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010290e:	50                   	push   %eax
f010290f:	e8 21 49 01 00       	call   f0117235 <strtol>
f0102914:	83 c4 10             	add    $0x10,%esp
f0102917:	83 ec 0c             	sub    $0xc,%esp
f010291a:	50                   	push   %eax
f010291b:	e8 80 5a 00 00       	call   f01083a0 <setModifiedBufferLength>
f0102920:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102923:	e8 86 5a 00 00       	call   f01083ae <getModifiedBufferLength>
f0102928:	83 ec 08             	sub    $0x8,%esp
f010292b:	50                   	push   %eax
f010292c:	68 f4 8f 11 f0       	push   $0xf0118ff4
f0102931:	e8 5f 44 00 00       	call   f0106d95 <cprintf>
f0102936:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102939:	83 ec 0c             	sub    $0xc,%esp
f010293c:	68 19 90 11 f0       	push   $0xf0119019
f0102941:	e8 4f 44 00 00       	call   f0106d95 <cprintf>
f0102946:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010294e:	c9                   	leave  
f010294f:	c3                   	ret    

f0102950 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102950:	55                   	push   %ebp
f0102951:	89 e5                	mov    %esp,%ebp
f0102953:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102956:	e8 3b 5a 00 00       	call   f0108396 <isBufferingEnabled>
f010295b:	85 c0                	test   %eax,%eax
f010295d:	75 12                	jne    f0102971 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010295f:	83 ec 0c             	sub    $0xc,%esp
f0102962:	68 34 90 11 f0       	push   $0xf0119034
f0102967:	e8 29 44 00 00       	call   f0106d95 <cprintf>
f010296c:	83 c4 10             	add    $0x10,%esp
f010296f:	eb 19                	jmp    f010298a <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102971:	e8 08 5a 00 00       	call   f010837e <isModifiedBufferEnabled>
f0102976:	85 c0                	test   %eax,%eax
f0102978:	75 10                	jne    f010298a <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010297a:	83 ec 0c             	sub    $0xc,%esp
f010297d:	68 84 90 11 f0       	push   $0xf0119084
f0102982:	e8 0e 44 00 00       	call   f0106d95 <cprintf>
f0102987:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010298a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298d:	83 c0 04             	add    $0x4,%eax
f0102990:	8b 00                	mov    (%eax),%eax
f0102992:	83 ec 04             	sub    $0x4,%esp
f0102995:	6a 0a                	push   $0xa
f0102997:	6a 00                	push   $0x0
f0102999:	50                   	push   %eax
f010299a:	e8 96 48 01 00       	call   f0117235 <strtol>
f010299f:	83 c4 10             	add    $0x10,%esp
f01029a2:	83 ec 0c             	sub    $0xc,%esp
f01029a5:	50                   	push   %eax
f01029a6:	e8 f5 59 00 00       	call   f01083a0 <setModifiedBufferLength>
f01029ab:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01029ae:	e8 fb 59 00 00       	call   f01083ae <getModifiedBufferLength>
f01029b3:	83 ec 08             	sub    $0x8,%esp
f01029b6:	50                   	push   %eax
f01029b7:	68 f4 8f 11 f0       	push   $0xf0118ff4
f01029bc:	e8 d4 43 00 00       	call   f0106d95 <cprintf>
f01029c1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01029c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029c9:	c9                   	leave  
f01029ca:	c3                   	ret    

f01029cb <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01029cb:	55                   	push   %ebp
f01029cc:	89 e5                	mov    %esp,%ebp
f01029ce:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01029d1:	e8 c0 59 00 00       	call   f0108396 <isBufferingEnabled>
f01029d6:	85 c0                	test   %eax,%eax
f01029d8:	75 12                	jne    f01029ec <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01029da:	83 ec 0c             	sub    $0xc,%esp
f01029dd:	68 34 90 11 f0       	push   $0xf0119034
f01029e2:	e8 ae 43 00 00       	call   f0106d95 <cprintf>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	eb 19                	jmp    f0102a05 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01029ec:	e8 8d 59 00 00       	call   f010837e <isModifiedBufferEnabled>
f01029f1:	85 c0                	test   %eax,%eax
f01029f3:	75 10                	jne    f0102a05 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01029f5:	83 ec 0c             	sub    $0xc,%esp
f01029f8:	68 84 90 11 f0       	push   $0xf0119084
f01029fd:	e8 93 43 00 00       	call   f0106d95 <cprintf>
f0102a02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102a05:	e8 a4 59 00 00       	call   f01083ae <getModifiedBufferLength>
f0102a0a:	83 ec 08             	sub    $0x8,%esp
f0102a0d:	50                   	push   %eax
f0102a0e:	68 ca 90 11 f0       	push   $0xf01190ca
f0102a13:	e8 7d 43 00 00       	call   f0106d95 <cprintf>
f0102a18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a20:	c9                   	leave  
f0102a21:	c3                   	ret    

f0102a22 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102a22:	55                   	push   %ebp
f0102a23:	89 e5                	mov    %esp,%ebp
f0102a25:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102a2f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a33:	75 1b                	jne    f0102a50 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102a35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a38:	83 c0 04             	add    $0x4,%eax
f0102a3b:	8b 00                	mov    (%eax),%eax
f0102a3d:	83 ec 04             	sub    $0x4,%esp
f0102a40:	6a 0a                	push   $0xa
f0102a42:	6a 00                	push   $0x0
f0102a44:	50                   	push   %eax
f0102a45:	e8 eb 47 01 00       	call   f0117235 <strtol>
f0102a4a:	83 c4 10             	add    $0x10,%esp
f0102a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (isKHeapPlacementStrategyNEXTFIT())
f0102a50:	e8 5b 29 00 00       	call   f01053b0 <isKHeapPlacementStrategyNEXTFIT>
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	74 47                	je     f0102aa0 <command_test_kmalloc+0x7e>
	{
		cprintf("Inside the NEXTFIT\n");
f0102a59:	83 ec 0c             	sub    $0xc,%esp
f0102a5c:	68 e7 90 11 f0       	push   $0xf01190e7
f0102a61:	e8 2f 43 00 00       	call   f0106d95 <cprintf>
f0102a66:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102a69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a6d:	75 17                	jne    f0102a86 <command_test_kmalloc+0x64>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102a6f:	83 ec 0c             	sub    $0xc,%esp
f0102a72:	68 fc 90 11 f0       	push   $0xf01190fc
f0102a77:	e8 19 43 00 00       	call   f0106d95 <cprintf>
f0102a7c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102a7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a84:	eb 7a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102a86:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102a8a:	75 07                	jne    f0102a93 <command_test_kmalloc+0x71>
			test_kmalloc();
f0102a8c:	e8 e2 91 00 00       	call   f010bc73 <test_kmalloc>
f0102a91:	eb 68                	jmp    f0102afb <command_test_kmalloc+0xd9>
		//Test nextfit strategy
		else if (testNum == 2)
f0102a93:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102a97:	75 62                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_nextfit();
f0102a99:	e8 d9 a1 00 00       	call   f010cc77 <test_kmalloc_nextfit>
f0102a9e:	eb 5b                	jmp    f0102afb <command_test_kmalloc+0xd9>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102aa0:	e8 f0 28 00 00       	call   f0105395 <isKHeapPlacementStrategyBESTFIT>
f0102aa5:	85 c0                	test   %eax,%eax
f0102aa7:	74 52                	je     f0102afb <command_test_kmalloc+0xd9>
	{
		cprintf("Inside the BESTFIT\n");
f0102aa9:	83 ec 0c             	sub    $0xc,%esp
f0102aac:	68 4a 91 11 f0       	push   $0xf011914a
f0102ab1:	e8 df 42 00 00       	call   f0106d95 <cprintf>
f0102ab6:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102ab9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102abd:	75 17                	jne    f0102ad6 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102abf:	83 ec 0c             	sub    $0xc,%esp
f0102ac2:	68 60 91 11 f0       	push   $0xf0119160
f0102ac7:	e8 c9 42 00 00       	call   f0106d95 <cprintf>
f0102acc:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102acf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ad4:	eb 2a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		if (testNum == 1)
f0102ad6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ada:	75 07                	jne    f0102ae3 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102adc:	e8 92 91 00 00       	call   f010bc73 <test_kmalloc>
f0102ae1:	eb 18                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 2)
f0102ae3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ae7:	75 07                	jne    f0102af0 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102ae9:	e8 46 b4 00 00       	call   f010df34 <test_kmalloc_bestfit1>
f0102aee:	eb 0b                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 3)
f0102af0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102af4:	75 05                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_bestfit2();
f0102af6:	e8 d1 c3 00 00       	call   f010eecc <test_kmalloc_bestfit2>
	}

	return 0;
f0102afb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b00:	c9                   	leave  
f0102b01:	c3                   	ret    

f0102b02 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102b02:	55                   	push   %ebp
f0102b03:	89 e5                	mov    %esp,%ebp
f0102b05:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102b08:	e8 88 28 00 00       	call   f0105395 <isKHeapPlacementStrategyBESTFIT>
f0102b0d:	85 c0                	test   %eax,%eax
f0102b0f:	74 07                	je     f0102b18 <command_test_kfree+0x16>
		{
			test_kfree_bestfit();
f0102b11:	e8 ec e9 00 00       	call   f0111502 <test_kfree_bestfit>
f0102b16:	eb 05                	jmp    f0102b1d <command_test_kfree+0x1b>
		}
		else
			test_kfree();
f0102b18:	e8 9b d3 00 00       	call   f010feb8 <test_kfree>
		return 0;
f0102b1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b22:	c9                   	leave  
f0102b23:	c3                   	ret    

f0102b24 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102b24:	55                   	push   %ebp
f0102b25:	89 e5                	mov    %esp,%ebp
f0102b27:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102b2a:	e8 1d 00 01 00       	call   f0112b4c <test_kheap_phys_addr>
	return 0;
f0102b2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b34:	c9                   	leave  
f0102b35:	c3                   	ret    

f0102b36 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102b36:	55                   	push   %ebp
f0102b37:	89 e5                	mov    %esp,%ebp
f0102b39:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102b3c:	e8 3f 11 01 00       	call   f0113c80 <test_kheap_virt_addr>
	return 0;
f0102b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b46:	c9                   	leave  
f0102b47:	c3                   	ret    

f0102b48 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102b48:	55                   	push   %ebp
f0102b49:	89 e5                	mov    %esp,%ebp
f0102b4b:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102b4e:	e8 a3 21 01 00       	call   f0114cf6 <test_three_creation_functions>
	return 0;
f0102b53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b58:	c9                   	leave  
f0102b59:	c3                   	ret    

f0102b5a <command_test_priority1>:
int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102b5a:	55                   	push   %ebp
f0102b5b:	89 e5                	mov    %esp,%ebp
f0102b5d:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102b60:	e8 6c 27 01 00       	call   f01152d1 <test_priority_normal_and_higher>
	return 0;
f0102b65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b6a:	c9                   	leave  
f0102b6b:	c3                   	ret    

f0102b6c <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102b6c:	55                   	push   %ebp
f0102b6d:	89 e5                	mov    %esp,%ebp
f0102b6f:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102b72:	e8 43 31 01 00       	call   f0115cba <test_priority_normal_and_lower>
	return 0;
f0102b77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b7c:	c9                   	leave  
f0102b7d:	c3                   	ret    

f0102b7e <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102b7e:	55                   	push   %ebp
f0102b7f:	89 e5                	mov    %esp,%ebp
f0102b81:	53                   	push   %ebx
f0102b82:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b88:	83 ec 0c             	sub    $0xc,%esp
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 9e 3d 00 00       	call   f010692f <mc146818_read>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	89 c3                	mov    %eax,%ebx
f0102b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b99:	40                   	inc    %eax
f0102b9a:	83 ec 0c             	sub    $0xc,%esp
f0102b9d:	50                   	push   %eax
f0102b9e:	e8 8c 3d 00 00       	call   f010692f <mc146818_read>
f0102ba3:	83 c4 10             	add    $0x10,%esp
f0102ba6:	c1 e0 08             	shl    $0x8,%eax
f0102ba9:	09 d8                	or     %ebx,%eax
}
f0102bab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102bae:	c9                   	leave  
f0102baf:	c3                   	ret    

f0102bb0 <detect_memory>:

void detect_memory()
{
f0102bb0:	55                   	push   %ebp
f0102bb1:	89 e5                	mov    %esp,%ebp
f0102bb3:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102bb6:	83 ec 0c             	sub    $0xc,%esp
f0102bb9:	6a 15                	push   $0x15
f0102bbb:	e8 be ff ff ff       	call   f0102b7e <nvram_read>
f0102bc0:	83 c4 10             	add    $0x10,%esp
f0102bc3:	c1 e0 0a             	shl    $0xa,%eax
f0102bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102bcc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102bd4:	83 ec 0c             	sub    $0xc,%esp
f0102bd7:	6a 17                	push   $0x17
f0102bd9:	e8 a0 ff ff ff       	call   f0102b7e <nvram_read>
f0102bde:	83 c4 10             	add    $0x10,%esp
f0102be1:	c1 e0 0a             	shl    $0xa,%eax
f0102be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102be7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102bf2:	83 ec 0c             	sub    $0xc,%esp
f0102bf5:	6a 34                	push   $0x34
f0102bf7:	e8 82 ff ff ff       	call   f0102b7e <nvram_read>
f0102bfc:	83 c4 10             	add    $0x10,%esp
f0102bff:	c1 e0 10             	shl    $0x10,%eax
f0102c02:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102c05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102c08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102c10:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102c14:	74 18                	je     f0102c2e <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102c19:	05 00 00 00 01       	add    $0x1000000,%eax
f0102c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c24:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102c29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102c2c:	eb 19                	jmp    f0102c47 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102c2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102c32:	74 0d                	je     f0102c41 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102c34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c37:	05 00 00 10 00       	add    $0x100000,%eax
f0102c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102c3f:	eb 06                	jmp    f0102c47 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102c41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102c47:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c51:	c1 e8 0c             	shr    $0xc,%eax
f0102c54:	a3 2c d2 52 f0       	mov    %eax,0xf052d22c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c5c:	c1 e8 0a             	shr    $0xa,%eax
f0102c5f:	83 ec 08             	sub    $0x8,%esp
f0102c62:	50                   	push   %eax
f0102c63:	68 b0 91 11 f0       	push   $0xf01191b0
f0102c68:	e8 28 41 00 00       	call   f0106d95 <cprintf>
f0102c6d:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102c70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c73:	c1 e8 0a             	shr    $0xa,%eax
f0102c76:	89 c2                	mov    %eax,%edx
f0102c78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102c7b:	c1 e8 0a             	shr    $0xa,%eax
f0102c7e:	83 ec 04             	sub    $0x4,%esp
f0102c81:	52                   	push   %edx
f0102c82:	50                   	push   %eax
f0102c83:	68 d1 91 11 f0       	push   $0xf01191d1
f0102c88:	e8 08 41 00 00       	call   f0106d95 <cprintf>
f0102c8d:	83 c4 10             	add    $0x10,%esp
}
f0102c90:	90                   	nop
f0102c91:	c9                   	leave  
f0102c92:	c3                   	ret    

f0102c93 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102c93:	55                   	push   %ebp
f0102c94:	89 e5                	mov    %esp,%ebp
f0102c96:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102c99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102ca0:	eb 40                	jmp    f0102ce2 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ca5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102cab:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102cb0:	83 ec 08             	sub    $0x8,%esp
f0102cb3:	52                   	push   %edx
f0102cb4:	50                   	push   %eax
f0102cb5:	e8 9b 01 00 00       	call   f0102e55 <check_va2pa>
f0102cba:	83 c4 10             	add    $0x10,%esp
f0102cbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102cc0:	74 19                	je     f0102cdb <check_boot_pgdir+0x48>
f0102cc2:	68 f0 91 11 f0       	push   $0xf01191f0
f0102cc7:	68 26 92 11 f0       	push   $0xf0119226
f0102ccc:	68 86 00 00 00       	push   $0x86
f0102cd1:	68 3b 92 11 f0       	push   $0xf011923b
f0102cd6:	e8 9b d4 ff ff       	call   f0100176 <_panic>

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102cdb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ce5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102ceb:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f0102cf0:	39 c2                	cmp    %eax,%edx
f0102cf2:	72 ae                	jb     f0102ca2 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102cf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102cfb:	eb 74                	jmp    f0102d71 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0102cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d00:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0102d06:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102d0b:	83 ec 08             	sub    $0x8,%esp
f0102d0e:	52                   	push   %edx
f0102d0f:	50                   	push   %eax
f0102d10:	e8 40 01 00 00       	call   f0102e55 <check_va2pa>
f0102d15:	83 c4 10             	add    $0x10,%esp
f0102d18:	c7 45 f0 00 50 14 f0 	movl   $0xf0145000,-0x10(%ebp)
f0102d1f:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0102d26:	77 17                	ja     f0102d3f <check_boot_pgdir+0xac>
f0102d28:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d2b:	68 4c 92 11 f0       	push   $0xf011924c
f0102d30:	68 90 00 00 00       	push   $0x90
f0102d35:	68 3b 92 11 f0       	push   $0xf011923b
f0102d3a:	e8 37 d4 ff ff       	call   f0100176 <_panic>
f0102d3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102d42:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0102d48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102d4b:	01 ca                	add    %ecx,%edx
f0102d4d:	39 d0                	cmp    %edx,%eax
f0102d4f:	74 19                	je     f0102d6a <check_boot_pgdir+0xd7>
f0102d51:	68 80 92 11 f0       	push   $0xf0119280
f0102d56:	68 26 92 11 f0       	push   $0xf0119226
f0102d5b:	68 90 00 00 00       	push   $0x90
f0102d60:	68 3b 92 11 f0       	push   $0xf011923b
f0102d65:	e8 0c d4 ff ff       	call   f0100176 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102d6a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102d71:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0102d78:	76 83                	jbe    f0102cfd <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102d7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102d81:	e9 af 00 00 00       	jmp    f0102e35 <check_boot_pgdir+0x1a2>
		switch (i) {
f0102d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d89:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d8e:	74 11                	je     f0102da1 <check_boot_pgdir+0x10e>
f0102d90:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d95:	72 36                	jb     f0102dcd <check_boot_pgdir+0x13a>
f0102d97:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0102d9c:	83 f8 02             	cmp    $0x2,%eax
f0102d9f:	77 2c                	ja     f0102dcd <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0102da1:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102da6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102da9:	c1 e2 02             	shl    $0x2,%edx
f0102dac:	01 d0                	add    %edx,%eax
f0102dae:	8b 00                	mov    (%eax),%eax
f0102db0:	85 c0                	test   %eax,%eax
f0102db2:	75 7a                	jne    f0102e2e <check_boot_pgdir+0x19b>
f0102db4:	68 02 93 11 f0       	push   $0xf0119302
f0102db9:	68 26 92 11 f0       	push   $0xf0119226
f0102dbe:	68 9b 00 00 00       	push   $0x9b
f0102dc3:	68 3b 92 11 f0       	push   $0xf011923b
f0102dc8:	e8 a9 d3 ff ff       	call   f0100176 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0102dcd:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0102dd4:	76 2c                	jbe    f0102e02 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0102dd6:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102dde:	c1 e2 02             	shl    $0x2,%edx
f0102de1:	01 d0                	add    %edx,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	85 c0                	test   %eax,%eax
f0102de7:	75 48                	jne    f0102e31 <check_boot_pgdir+0x19e>
f0102de9:	68 02 93 11 f0       	push   $0xf0119302
f0102dee:	68 26 92 11 f0       	push   $0xf0119226
f0102df3:	68 9f 00 00 00       	push   $0x9f
f0102df8:	68 3b 92 11 f0       	push   $0xf011923b
f0102dfd:	e8 74 d3 ff ff       	call   f0100176 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0102e02:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102e0a:	c1 e2 02             	shl    $0x2,%edx
f0102e0d:	01 d0                	add    %edx,%eax
f0102e0f:	8b 00                	mov    (%eax),%eax
f0102e11:	85 c0                	test   %eax,%eax
f0102e13:	74 1c                	je     f0102e31 <check_boot_pgdir+0x19e>
f0102e15:	68 18 93 11 f0       	push   $0xf0119318
f0102e1a:	68 26 92 11 f0       	push   $0xf0119226
f0102e1f:	68 a1 00 00 00       	push   $0xa1
f0102e24:	68 3b 92 11 f0       	push   $0xf011923b
f0102e29:	e8 48 d3 ff ff       	call   f0100176 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0102e2e:	90                   	nop
f0102e2f:	eb 01                	jmp    f0102e32 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0102e31:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102e32:	ff 45 f4             	incl   -0xc(%ebp)
f0102e35:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0102e3c:	0f 86 44 ff ff ff    	jbe    f0102d86 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0102e42:	83 ec 0c             	sub    $0xc,%esp
f0102e45:	68 34 93 11 f0       	push   $0xf0119334
f0102e4a:	e8 46 3f 00 00       	call   f0106d95 <cprintf>
f0102e4f:	83 c4 10             	add    $0x10,%esp
}
f0102e52:	90                   	nop
f0102e53:	c9                   	leave  
f0102e54:	c3                   	ret    

f0102e55 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0102e55:	55                   	push   %ebp
f0102e56:	89 e5                	mov    %esp,%ebp
f0102e58:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0102e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e5e:	c1 e8 16             	shr    $0x16,%eax
f0102e61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102e68:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e6b:	01 d0                	add    %edx,%eax
f0102e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0102e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e73:	8b 00                	mov    (%eax),%eax
f0102e75:	83 e0 01             	and    $0x1,%eax
f0102e78:	85 c0                	test   %eax,%eax
f0102e7a:	75 0a                	jne    f0102e86 <check_va2pa+0x31>
		return ~0;
f0102e7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102e81:	e9 87 00 00 00       	jmp    f0102f0d <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0102e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e89:	8b 00                	mov    (%eax),%eax
f0102e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102e96:	c1 e8 0c             	shr    $0xc,%eax
f0102e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e9c:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0102ea1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0102ea4:	72 17                	jb     f0102ebd <check_va2pa+0x68>
f0102ea6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ea9:	68 54 93 11 f0       	push   $0xf0119354
f0102eae:	68 b7 00 00 00       	push   $0xb7
f0102eb3:	68 3b 92 11 f0       	push   $0xf011923b
f0102eb8:	e8 b9 d2 ff ff       	call   f0100176 <_panic>
f0102ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102ec0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102ec5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0102ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ecb:	c1 e8 0c             	shr    $0xc,%eax
f0102ece:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102ed3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102edd:	01 d0                	add    %edx,%eax
f0102edf:	8b 00                	mov    (%eax),%eax
f0102ee1:	83 e0 01             	and    $0x1,%eax
f0102ee4:	85 c0                	test   %eax,%eax
f0102ee6:	75 07                	jne    f0102eef <check_va2pa+0x9a>
		return ~0;
f0102ee8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102eed:	eb 1e                	jmp    f0102f0d <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0102eef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef2:	c1 e8 0c             	shr    $0xc,%eax
f0102ef5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102efa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f04:	01 d0                	add    %edx,%eax
f0102f06:	8b 00                	mov    (%eax),%eax
f0102f08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0102f0d:	c9                   	leave  
f0102f0e:	c3                   	ret    

f0102f0f <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0102f0f:	55                   	push   %ebp
f0102f10:	89 e5                	mov    %esp,%ebp
f0102f12:	83 ec 10             	sub    $0x10,%esp
f0102f15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f18:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0102f1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f1e:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0102f21:	90                   	nop
f0102f22:	c9                   	leave  
f0102f23:	c3                   	ret    

f0102f24 <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0102f24:	55                   	push   %ebp
f0102f25:	89 e5                	mov    %esp,%ebp
f0102f27:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0102f2a:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0102f31:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f38:	eb 24                	jmp    f0102f5e <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0102f3a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102f3f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0102f42:	c1 e2 02             	shl    $0x2,%edx
f0102f45:	01 c2                	add    %eax,%edx
f0102f47:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102f4c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0102f4f:	c1 e1 02             	shl    $0x2,%ecx
f0102f52:	01 c8                	add    %ecx,%eax
f0102f54:	8b 00                	mov    (%eax),%eax
f0102f56:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f58:	ff 45 fc             	incl   -0x4(%ebp)
f0102f5b:	ff 45 f8             	incl   -0x8(%ebp)
f0102f5e:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f0102f63:	c1 e8 16             	shr    $0x16,%eax
f0102f66:	89 c2                	mov    %eax,%edx
f0102f68:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f6b:	39 c2                	cmp    %eax,%edx
f0102f6d:	77 cb                	ja     f0102f3a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0102f6f:	a1 d8 b6 54 f0       	mov    0xf054b6d8,%eax
f0102f74:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f7a:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0102f7d:	0f 20 c0             	mov    %cr0,%eax
f0102f80:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0102f83:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0102f86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0102f89:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0102f90:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0102f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f97:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0102f9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102f9d:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0102fa0:	0f 01 15 d0 d7 14 f0 	lgdtl  0xf014d7d0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0102fa7:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fac:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0102fae:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fb3:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0102fb5:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fba:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0102fbc:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc1:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0102fc3:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc8:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0102fca:	ea d1 2f 10 f0 08 00 	ljmp   $0x8,$0xf0102fd1
	asm volatile("lldt %%ax" :: "a" (0));
f0102fd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fd6:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0102fd9:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0102fe0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102fe7:	eb 19                	jmp    f0103002 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0102fe9:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0102fee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102ff1:	c1 e2 02             	shl    $0x2,%edx
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102ffc:	ff 45 f4             	incl   -0xc(%ebp)
f0102fff:	ff 45 f0             	incl   -0x10(%ebp)
f0103002:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f0103007:	c1 e8 16             	shr    $0x16,%eax
f010300a:	89 c2                	mov    %eax,%edx
f010300c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010300f:	39 c2                	cmp    %eax,%edx
f0103011:	77 d6                	ja     f0102fe9 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0103013:	a1 d8 b6 54 f0       	mov    0xf054b6d8,%eax
f0103018:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010301b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010301e:	0f 22 d8             	mov    %eax,%cr3
}
f0103021:	90                   	nop
f0103022:	c9                   	leave  
f0103023:	c3                   	ret    

f0103024 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0103024:	55                   	push   %ebp
f0103025:	89 e5                	mov    %esp,%ebp
f0103027:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010302a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010302f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103032:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0103039:	77 17                	ja     f0103052 <setup_listing_to_all_page_tables_entries+0x2e>
f010303b:	ff 75 f4             	pushl  -0xc(%ebp)
f010303e:	68 4c 92 11 f0       	push   $0xf011924c
f0103043:	68 86 01 00 00       	push   $0x186
f0103048:	68 3b 92 11 f0       	push   $0xf011923b
f010304d:	e8 24 d1 ff ff       	call   f0100176 <_panic>
f0103052:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103055:	05 00 00 00 10       	add    $0x10000000,%eax
f010305a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f010305d:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0103062:	05 fc 0e 00 00       	add    $0xefc,%eax
f0103067:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010306a:	83 ca 03             	or     $0x3,%edx
f010306d:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010306f:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0103074:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010307a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010307f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103082:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0103089:	77 17                	ja     f01030a2 <setup_listing_to_all_page_tables_entries+0x7e>
f010308b:	ff 75 ec             	pushl  -0x14(%ebp)
f010308e:	68 4c 92 11 f0       	push   $0xf011924c
f0103093:	68 8b 01 00 00       	push   $0x18b
f0103098:	68 3b 92 11 f0       	push   $0xf011923b
f010309d:	e8 d4 d0 ff ff       	call   f0100176 <_panic>
f01030a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01030a5:	05 00 00 00 10       	add    $0x10000000,%eax
f01030aa:	83 c8 05             	or     $0x5,%eax
f01030ad:	89 02                	mov    %eax,(%edx)

}
f01030af:	90                   	nop
f01030b0:	c9                   	leave  
f01030b1:	c3                   	ret    

f01030b2 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01030b2:	55                   	push   %ebp
f01030b3:	89 e5                	mov    %esp,%ebp
f01030b5:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01030b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01030bc:	75 15                	jne    f01030d3 <envid2env+0x21>
		*env_store = curenv;
f01030be:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f01030c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030c7:	89 10                	mov    %edx,(%eax)
		return 0;
f01030c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01030ce:	e9 94 00 00 00       	jmp    f0103167 <envid2env+0xb5>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01030d3:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f01030d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01030dc:	25 f1 04 00 00       	and    $0x4f1,%eax
f01030e1:	89 c2                	mov    %eax,%edx
f01030e3:	89 d0                	mov    %edx,%eax
f01030e5:	c1 e0 02             	shl    $0x2,%eax
f01030e8:	01 d0                	add    %edx,%eax
f01030ea:	01 c0                	add    %eax,%eax
f01030ec:	01 d0                	add    %edx,%eax
f01030ee:	01 c0                	add    %eax,%eax
f01030f0:	01 d0                	add    %edx,%eax
f01030f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01030f9:	01 d0                	add    %edx,%eax
f01030fb:	c1 e0 02             	shl    $0x2,%eax
f01030fe:	01 c8                	add    %ecx,%eax
f0103100:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0103103:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103106:	8b 40 54             	mov    0x54(%eax),%eax
f0103109:	85 c0                	test   %eax,%eax
f010310b:	74 0b                	je     f0103118 <envid2env+0x66>
f010310d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103110:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103113:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103116:	74 10                	je     f0103128 <envid2env+0x76>
		*env_store = 0;
f0103118:	8b 45 0c             	mov    0xc(%ebp),%eax
f010311b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103121:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103126:	eb 3f                	jmp    f0103167 <envid2env+0xb5>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0103128:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010312c:	74 2c                	je     f010315a <envid2env+0xa8>
f010312e:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0103133:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f0103136:	74 22                	je     f010315a <envid2env+0xa8>
f0103138:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010313b:	8b 50 50             	mov    0x50(%eax),%edx
f010313e:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0103143:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103146:	39 c2                	cmp    %eax,%edx
f0103148:	74 10                	je     f010315a <envid2env+0xa8>
		*env_store = 0;
f010314a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010314d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103153:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103158:	eb 0d                	jmp    f0103167 <envid2env+0xb5>
	}

	*env_store = e;
f010315a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010315d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103160:	89 10                	mov    %edx,(%eax)
	return 0;
f0103162:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103167:	c9                   	leave  
f0103168:	c3                   	ret    

f0103169 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0103169:	55                   	push   %ebp
f010316a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010316c:	8b 45 08             	mov    0x8(%ebp),%eax
f010316f:	8b 15 c4 b6 54 f0    	mov    0xf054b6c4,%edx
f0103175:	29 d0                	sub    %edx,%eax
f0103177:	c1 f8 03             	sar    $0x3,%eax
f010317a:	89 c2                	mov    %eax,%edx
f010317c:	89 d0                	mov    %edx,%eax
f010317e:	c1 e0 02             	shl    $0x2,%eax
f0103181:	01 d0                	add    %edx,%eax
f0103183:	c1 e0 02             	shl    $0x2,%eax
f0103186:	01 d0                	add    %edx,%eax
f0103188:	c1 e0 02             	shl    $0x2,%eax
f010318b:	01 d0                	add    %edx,%eax
f010318d:	89 c1                	mov    %eax,%ecx
f010318f:	c1 e1 08             	shl    $0x8,%ecx
f0103192:	01 c8                	add    %ecx,%eax
f0103194:	89 c1                	mov    %eax,%ecx
f0103196:	c1 e1 10             	shl    $0x10,%ecx
f0103199:	01 c8                	add    %ecx,%eax
f010319b:	01 c0                	add    %eax,%eax
f010319d:	01 d0                	add    %edx,%eax
}
f010319f:	5d                   	pop    %ebp
f01031a0:	c3                   	ret    

f01031a1 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f01031a1:	55                   	push   %ebp
f01031a2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01031a4:	ff 75 08             	pushl  0x8(%ebp)
f01031a7:	e8 bd ff ff ff       	call   f0103169 <to_frame_number>
f01031ac:	83 c4 04             	add    $0x4,%esp
f01031af:	c1 e0 0c             	shl    $0xc,%eax
}
f01031b2:	c9                   	leave  
f01031b3:	c3                   	ret    

f01031b4 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f01031b4:	55                   	push   %ebp
f01031b5:	89 e5                	mov    %esp,%ebp
f01031b7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01031ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01031bd:	c1 e8 0c             	shr    $0xc,%eax
f01031c0:	89 c2                	mov    %eax,%edx
f01031c2:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f01031c7:	39 c2                	cmp    %eax,%edx
f01031c9:	72 14                	jb     f01031df <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01031cb:	83 ec 04             	sub    $0x4,%esp
f01031ce:	68 84 93 11 f0       	push   $0xf0119384
f01031d3:	6a 75                	push   $0x75
f01031d5:	68 a9 93 11 f0       	push   $0xf01193a9
f01031da:	e8 97 cf ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f01031df:	8b 15 c4 b6 54 f0    	mov    0xf054b6c4,%edx
f01031e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031e8:	c1 e8 0c             	shr    $0xc,%eax
f01031eb:	89 c1                	mov    %eax,%ecx
f01031ed:	89 c8                	mov    %ecx,%eax
f01031ef:	01 c0                	add    %eax,%eax
f01031f1:	01 c8                	add    %ecx,%eax
f01031f3:	c1 e0 03             	shl    $0x3,%eax
f01031f6:	01 d0                	add    %edx,%eax
}
f01031f8:	c9                   	leave  
f01031f9:	c3                   	ret    

f01031fa <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f01031fa:	55                   	push   %ebp
f01031fb:	89 e5                	mov    %esp,%ebp
f01031fd:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103200:	83 ec 08             	sub    $0x8,%esp
f0103203:	68 00 10 00 00       	push   $0x1000
f0103208:	68 00 10 00 00       	push   $0x1000
f010320d:	e8 4f 02 00 00       	call   f0103461 <boot_allocate_space>
f0103212:	83 c4 10             	add    $0x10,%esp
f0103215:	a3 d0 b6 54 f0       	mov    %eax,0xf054b6d0
	memset(ptr_page_directory, 0, PAGE_SIZE);
f010321a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010321f:	83 ec 04             	sub    $0x4,%esp
f0103222:	68 00 10 00 00       	push   $0x1000
f0103227:	6a 00                	push   $0x0
f0103229:	50                   	push   %eax
f010322a:	e8 94 3e 01 00       	call   f01170c3 <memset>
f010322f:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0103232:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0103237:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010323a:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0103241:	77 14                	ja     f0103257 <initialize_kernel_VM+0x5d>
f0103243:	ff 75 e8             	pushl  -0x18(%ebp)
f0103246:	68 c4 93 11 f0       	push   $0xf01193c4
f010324b:	6a 57                	push   $0x57
f010324d:	68 f5 93 11 f0       	push   $0xf01193f5
f0103252:	e8 1f cf ff ff       	call   f0100176 <_panic>
f0103257:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010325a:	05 00 00 00 10       	add    $0x10000000,%eax
f010325f:	a3 d8 b6 54 f0       	mov    %eax,0xf054b6d8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0103264:	c7 45 e4 00 50 14 f0 	movl   $0xf0145000,-0x1c(%ebp)
f010326b:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0103272:	77 14                	ja     f0103288 <initialize_kernel_VM+0x8e>
f0103274:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103277:	68 c4 93 11 f0       	push   $0xf01193c4
f010327c:	6a 5f                	push   $0x5f
f010327e:	68 f5 93 11 f0       	push   $0xf01193f5
f0103283:	e8 ee ce ff ff       	call   f0100176 <_panic>
f0103288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010328b:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103291:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0103296:	83 ec 0c             	sub    $0xc,%esp
f0103299:	6a 02                	push   $0x2
f010329b:	52                   	push   %edx
f010329c:	68 00 80 00 00       	push   $0x8000
f01032a1:	68 00 80 bf ef       	push   $0xefbf8000
f01032a6:	50                   	push   %eax
f01032a7:	e8 16 02 00 00       	call   f01034c2 <boot_map_range>
f01032ac:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01032af:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01032b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01032bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032c4:	eb 25                	jmp    f01032eb <initialize_kernel_VM+0xf1>
	{
		++nTables;
f01032c6:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01032c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01032cc:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f01032d1:	83 ec 04             	sub    $0x4,%esp
f01032d4:	6a 01                	push   $0x1
f01032d6:	52                   	push   %edx
f01032d7:	50                   	push   %eax
f01032d8:	e8 59 02 00 00       	call   f0103536 <boot_get_page_table>
f01032dd:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032e0:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01032e7:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f01032eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032ef:	72 d5                	jb     f01032c6 <initialize_kernel_VM+0xcc>
f01032f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032f5:	77 06                	ja     f01032fd <initialize_kernel_VM+0x103>
f01032f7:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f01032fb:	76 c9                	jbe    f01032c6 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct Frame_Info) ;
f01032fd:	8b 15 2c d2 52 f0    	mov    0xf052d22c,%edx
f0103303:	89 d0                	mov    %edx,%eax
f0103305:	01 c0                	add    %eax,%eax
f0103307:	01 d0                	add    %edx,%eax
f0103309:	c1 e0 03             	shl    $0x3,%eax
f010330c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	68 00 10 00 00       	push   $0x1000
f0103317:	ff 75 e0             	pushl  -0x20(%ebp)
f010331a:	e8 42 01 00 00       	call   f0103461 <boot_allocate_space>
f010331f:	83 c4 10             	add    $0x10,%esp
f0103322:	a3 c4 b6 54 f0       	mov    %eax,0xf054b6c4
	memset(frames_info, 0, array_size);
f0103327:	a1 c4 b6 54 f0       	mov    0xf054b6c4,%eax
f010332c:	83 ec 04             	sub    $0x4,%esp
f010332f:	ff 75 e0             	pushl  -0x20(%ebp)
f0103332:	6a 00                	push   $0x0
f0103334:	50                   	push   %eax
f0103335:	e8 89 3d 01 00       	call   f01170c3 <memset>
f010333a:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f010333d:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0103344:	83 ec 08             	sub    $0x8,%esp
f0103347:	68 00 10 00 00       	push   $0x1000
f010334c:	ff 75 dc             	pushl  -0x24(%ebp)
f010334f:	e8 0d 01 00 00       	call   f0103461 <boot_allocate_space>
f0103354:	83 c4 10             	add    $0x10,%esp
f0103357:	a3 b0 b6 54 f0       	mov    %eax,0xf054b6b0
	memset(disk_frames_info , 0, disk_array_size);
f010335c:	a1 b0 b6 54 f0       	mov    0xf054b6b0,%eax
f0103361:	83 ec 04             	sub    $0x4,%esp
f0103364:	ff 75 dc             	pushl  -0x24(%ebp)
f0103367:	6a 00                	push   $0x0
f0103369:	50                   	push   %eax
f010336a:	e8 54 3d 01 00       	call   f01170c3 <memset>
f010336f:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0103372:	e8 ad fc ff ff       	call   f0103024 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d\n",NENV);
f0103377:	83 ec 08             	sub    $0x8,%esp
f010337a:	68 f2 04 00 00       	push   $0x4f2
f010337f:	68 0b 94 11 f0       	push   $0xf011940b
f0103384:	e8 0c 3a 00 00       	call   f0106d95 <cprintf>
f0103389:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f010338c:	c7 45 d8 b8 fe 0f 00 	movl   $0xffeb8,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0103393:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103396:	83 ec 08             	sub    $0x8,%esp
f0103399:	68 00 10 00 00       	push   $0x1000
f010339e:	50                   	push   %eax
f010339f:	e8 bd 00 00 00       	call   f0103461 <boot_allocate_space>
f01033a4:	83 c4 10             	add    $0x10,%esp
f01033a7:	a3 4c c9 52 f0       	mov    %eax,0xf052c94c
	memset(envs , 0, envs_size);
f01033ac:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033af:	a1 4c c9 52 f0       	mov    0xf052c94c,%eax
f01033b4:	83 ec 04             	sub    $0x4,%esp
f01033b7:	52                   	push   %edx
f01033b8:	6a 00                	push   $0x0
f01033ba:	50                   	push   %eax
f01033bb:	e8 03 3d 01 00       	call   f01170c3 <memset>
f01033c0:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01033c3:	a1 4c c9 52 f0       	mov    0xf052c94c,%eax
f01033c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01033cb:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01033d2:	77 17                	ja     f01033eb <initialize_kernel_VM+0x1f1>
f01033d4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01033d7:	68 c4 93 11 f0       	push   $0xf01193c4
f01033dc:	68 a8 00 00 00       	push   $0xa8
f01033e1:	68 f5 93 11 f0       	push   $0xf01193f5
f01033e6:	e8 8b cd ff ff       	call   f0100176 <_panic>
f01033eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01033ee:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01033f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033f7:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f01033fc:	83 ec 0c             	sub    $0xc,%esp
f01033ff:	6a 04                	push   $0x4
f0103401:	51                   	push   %ecx
f0103402:	52                   	push   %edx
f0103403:	68 00 00 c0 ee       	push   $0xeec00000
f0103408:	50                   	push   %eax
f0103409:	e8 b4 00 00 00       	call   f01034c2 <boot_map_range>
f010340e:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0103411:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0103416:	05 ec 0e 00 00       	add    $0xeec,%eax
f010341b:	8b 15 d0 b6 54 f0    	mov    0xf054b6d0,%edx
f0103421:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0103427:	8b 12                	mov    (%edx),%edx
f0103429:	83 ca 05             	or     $0x5,%edx
f010342c:	89 10                	mov    %edx,(%eax)
	if(USE_KHEAP)
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010342e:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f0103433:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103439:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010343e:	83 ec 0c             	sub    $0xc,%esp
f0103441:	6a 02                	push   $0x2
f0103443:	6a 00                	push   $0x0
f0103445:	52                   	push   %edx
f0103446:	68 00 00 00 f0       	push   $0xf0000000
f010344b:	50                   	push   %eax
f010344c:	e8 71 00 00 00       	call   f01034c2 <boot_map_range>
f0103451:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}

	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0103454:	e8 3a f8 ff ff       	call   f0102c93 <check_boot_pgdir>

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0103459:	e8 c6 fa ff ff       	call   f0102f24 <turn_on_paging>
}
f010345e:	90                   	nop
f010345f:	c9                   	leave  
f0103460:	c3                   	ret    

f0103461 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0103461:	55                   	push   %ebp
f0103462:	89 e5                	mov    %esp,%ebp
f0103464:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0103467:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f010346c:	85 c0                	test   %eax,%eax
f010346e:	75 0a                	jne    f010347a <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0103470:	c7 05 cc b6 54 f0 08 	movl   $0xf0d4b708,0xf054b6cc
f0103477:	b7 d4 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010347a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010347d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103480:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f0103485:	89 c2                	mov    %eax,%edx
f0103487:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010348a:	01 d0                	add    %edx,%eax
f010348c:	48                   	dec    %eax
f010348d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0103490:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103493:	ba 00 00 00 00       	mov    $0x0,%edx
f0103498:	f7 75 fc             	divl   -0x4(%ebp)
f010349b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010349e:	29 d0                	sub    %edx,%eax
f01034a0:	a3 cc b6 54 f0       	mov    %eax,0xf054b6cc

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01034a5:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f01034aa:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01034ad:	8b 15 cc b6 54 f0    	mov    0xf054b6cc,%edx
f01034b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b6:	01 d0                	add    %edx,%eax
f01034b8:	a3 cc b6 54 f0       	mov    %eax,0xf054b6cc

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01034bd:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f01034c0:	c9                   	leave  
f01034c1:	c3                   	ret    

f01034c2 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01034c2:	55                   	push   %ebp
f01034c3:	89 e5                	mov    %esp,%ebp
f01034c5:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01034c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01034cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01034d6:	eb 53                	jmp    f010352b <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01034d8:	83 ec 04             	sub    $0x4,%esp
f01034db:	6a 01                	push   $0x1
f01034dd:	ff 75 0c             	pushl  0xc(%ebp)
f01034e0:	ff 75 08             	pushl  0x8(%ebp)
f01034e3:	e8 4e 00 00 00       	call   f0103536 <boot_get_page_table>
f01034e8:	83 c4 10             	add    $0x10,%esp
f01034eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01034ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034f1:	c1 e8 0c             	shr    $0xc,%eax
f01034f4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01034f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103506:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103509:	01 c2                	add    %eax,%edx
f010350b:	8b 45 18             	mov    0x18(%ebp),%eax
f010350e:	0b 45 14             	or     0x14(%ebp),%eax
f0103511:	83 c8 01             	or     $0x1,%eax
f0103514:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0103516:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f010351d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0103524:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010352b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010352e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103531:	72 a5                	jb     f01034d8 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0103533:	90                   	nop
f0103534:	c9                   	leave  
f0103535:	c3                   	ret    

f0103536 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0103536:	55                   	push   %ebp
f0103537:	89 e5                	mov    %esp,%ebp
f0103539:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f010353c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010353f:	c1 e8 16             	shr    $0x16,%eax
f0103542:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0103545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103548:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010354f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103552:	01 d0                	add    %edx,%eax
f0103554:	8b 00                	mov    (%eax),%eax
f0103556:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0103559:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010355c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103561:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0103564:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103567:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010356a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010356d:	c1 e8 0c             	shr    $0xc,%eax
f0103570:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103573:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0103578:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010357b:	72 17                	jb     f0103594 <boot_get_page_table+0x5e>
f010357d:	ff 75 e8             	pushl  -0x18(%ebp)
f0103580:	68 1c 94 11 f0       	push   $0xf011941c
f0103585:	68 26 01 00 00       	push   $0x126
f010358a:	68 f5 93 11 f0       	push   $0xf01193f5
f010358f:	e8 e2 cb ff ff       	call   f0100176 <_panic>
f0103594:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103597:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010359c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010359f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01035a3:	75 72                	jne    f0103617 <boot_get_page_table+0xe1>
	{
		if (create)
f01035a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01035a9:	74 65                	je     f0103610 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01035ab:	83 ec 08             	sub    $0x8,%esp
f01035ae:	68 00 10 00 00       	push   $0x1000
f01035b3:	68 00 10 00 00       	push   $0x1000
f01035b8:	e8 a4 fe ff ff       	call   f0103461 <boot_allocate_space>
f01035bd:	83 c4 10             	add    $0x10,%esp
f01035c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01035c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01035c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01035c9:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01035d0:	77 17                	ja     f01035e9 <boot_get_page_table+0xb3>
f01035d2:	ff 75 dc             	pushl  -0x24(%ebp)
f01035d5:	68 c4 93 11 f0       	push   $0xf01193c4
f01035da:	68 2c 01 00 00       	push   $0x12c
f01035df:	68 f5 93 11 f0       	push   $0xf01193f5
f01035e4:	e8 8d cb ff ff       	call   f0100176 <_panic>
f01035e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01035ec:	05 00 00 00 10       	add    $0x10000000,%eax
f01035f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01035f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103601:	01 d0                	add    %edx,%eax
f0103603:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103606:	83 ca 03             	or     $0x3,%edx
f0103609:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f010360b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010360e:	eb 0a                	jmp    f010361a <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0103610:	b8 00 00 00 00       	mov    $0x0,%eax
f0103615:	eb 03                	jmp    f010361a <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0103617:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f010361a:	c9                   	leave  
f010361b:	c3                   	ret    

f010361c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010361c:	55                   	push   %ebp
f010361d:	89 e5                	mov    %esp,%ebp
f010361f:	53                   	push   %ebx
f0103620:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0103623:	c7 05 b4 b6 54 f0 00 	movl   $0x0,0xf054b6b4
f010362a:	00 00 00 
f010362d:	c7 05 b8 b6 54 f0 00 	movl   $0x0,0xf054b6b8
f0103634:	00 00 00 
f0103637:	c7 05 c0 b6 54 f0 00 	movl   $0x0,0xf054b6c0
f010363e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0103641:	c7 05 a0 b6 54 f0 00 	movl   $0x0,0xf054b6a0
f0103648:	00 00 00 
f010364b:	c7 05 a4 b6 54 f0 00 	movl   $0x0,0xf054b6a4
f0103652:	00 00 00 
f0103655:	c7 05 ac b6 54 f0 00 	movl   $0x0,0xf054b6ac
f010365c:	00 00 00 

	frames_info[0].references = 1;
f010365f:	a1 c4 b6 54 f0       	mov    0xf054b6c4,%eax
f0103664:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010366a:	a1 c4 b6 54 f0       	mov    0xf054b6c4,%eax
f010366f:	83 c0 18             	add    $0x18,%eax
f0103672:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0103678:	a1 c4 b6 54 f0       	mov    0xf054b6c4,%eax
f010367d:	83 c0 30             	add    $0x30,%eax
f0103680:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0103686:	c7 05 c8 b6 54 f0 00 	movl   $0xf0001000,0xf054b6c8
f010368d:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0103690:	c7 05 d4 b6 54 f0 00 	movl   $0xf0002000,0xf054b6d4
f0103697:	20 00 f0 
	i =0;
f010369a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01036a1:	eb 1f                	jmp    f01036c2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01036a3:	8b 15 c8 b6 54 f0    	mov    0xf054b6c8,%edx
f01036a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ac:	01 d0                	add    %edx,%eax
f01036ae:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01036b1:	8b 15 d4 b6 54 f0    	mov    0xf054b6d4,%edx
f01036b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ba:	01 d0                	add    %edx,%eax
f01036bc:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01036bf:	ff 45 f4             	incl   -0xc(%ebp)
f01036c2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01036c9:	7e d8                	jle    f01036a3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01036cb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01036d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036d5:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01036da:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01036dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01036e5:	f7 75 f0             	divl   -0x10(%ebp)
f01036e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036eb:	29 d0                	sub    %edx,%eax
f01036ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01036f0:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01036f7:	e9 bc 00 00 00       	jmp    f01037b8 <initialize_paging+0x19c>
	{

		initialize_frame_info(&(frames_info[i]));
f01036fc:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103702:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103705:	89 d0                	mov    %edx,%eax
f0103707:	01 c0                	add    %eax,%eax
f0103709:	01 d0                	add    %edx,%eax
f010370b:	c1 e0 03             	shl    $0x3,%eax
f010370e:	01 c8                	add    %ecx,%eax
f0103710:	83 ec 0c             	sub    $0xc,%esp
f0103713:	50                   	push   %eax
f0103714:	e8 62 02 00 00       	call   f010397b <initialize_frame_info>
f0103719:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010371c:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103722:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103725:	89 d0                	mov    %edx,%eax
f0103727:	01 c0                	add    %eax,%eax
f0103729:	01 d0                	add    %edx,%eax
f010372b:	c1 e0 03             	shl    $0x3,%eax
f010372e:	01 c8                	add    %ecx,%eax
f0103730:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f0103736:	89 10                	mov    %edx,(%eax)
f0103738:	8b 00                	mov    (%eax),%eax
f010373a:	85 c0                	test   %eax,%eax
f010373c:	74 1f                	je     f010375d <initialize_paging+0x141>
f010373e:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f0103744:	8b 1d c4 b6 54 f0    	mov    0xf054b6c4,%ebx
f010374a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010374d:	89 c8                	mov    %ecx,%eax
f010374f:	01 c0                	add    %eax,%eax
f0103751:	01 c8                	add    %ecx,%eax
f0103753:	c1 e0 03             	shl    $0x3,%eax
f0103756:	01 d8                	add    %ebx,%eax
f0103758:	89 42 04             	mov    %eax,0x4(%edx)
f010375b:	eb 19                	jmp    f0103776 <initialize_paging+0x15a>
f010375d:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103763:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103766:	89 d0                	mov    %edx,%eax
f0103768:	01 c0                	add    %eax,%eax
f010376a:	01 d0                	add    %edx,%eax
f010376c:	c1 e0 03             	shl    $0x3,%eax
f010376f:	01 c8                	add    %ecx,%eax
f0103771:	a3 b8 b6 54 f0       	mov    %eax,0xf054b6b8
f0103776:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f010377c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010377f:	89 d0                	mov    %edx,%eax
f0103781:	01 c0                	add    %eax,%eax
f0103783:	01 d0                	add    %edx,%eax
f0103785:	c1 e0 03             	shl    $0x3,%eax
f0103788:	01 c8                	add    %ecx,%eax
f010378a:	a3 b4 b6 54 f0       	mov    %eax,0xf054b6b4
f010378f:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103795:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103798:	89 d0                	mov    %edx,%eax
f010379a:	01 c0                	add    %eax,%eax
f010379c:	01 d0                	add    %edx,%eax
f010379e:	c1 e0 03             	shl    $0x3,%eax
f01037a1:	01 c8                	add    %ecx,%eax
f01037a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01037aa:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
f01037af:	40                   	inc    %eax
f01037b0:	a3 c0 b6 54 f0       	mov    %eax,0xf054b6c0
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01037b5:	ff 45 f4             	incl   -0xc(%ebp)
f01037b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01037bb:	85 c0                	test   %eax,%eax
f01037bd:	79 05                	jns    f01037c4 <initialize_paging+0x1a8>
f01037bf:	05 ff 0f 00 00       	add    $0xfff,%eax
f01037c4:	c1 f8 0c             	sar    $0xc,%eax
f01037c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01037ca:	0f 8f 2c ff ff ff    	jg     f01036fc <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037d0:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01037d7:	eb 1d                	jmp    f01037f6 <initialize_paging+0x1da>
	{
		frames_info[i].references = 1;
f01037d9:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f01037df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01037e2:	89 d0                	mov    %edx,%eax
f01037e4:	01 c0                	add    %eax,%eax
f01037e6:	01 d0                	add    %edx,%eax
f01037e8:	c1 e0 03             	shl    $0x3,%eax
f01037eb:	01 c8                	add    %ecx,%eax
f01037ed:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037f3:	ff 45 f4             	incl   -0xc(%ebp)
f01037f6:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01037fd:	7e da                	jle    f01037d9 <initialize_paging+0x1bd>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01037ff:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0103806:	a1 cc b6 54 f0       	mov    0xf054b6cc,%eax
f010380b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010380e:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0103815:	77 17                	ja     f010382e <initialize_paging+0x212>
f0103817:	ff 75 e0             	pushl  -0x20(%ebp)
f010381a:	68 c4 93 11 f0       	push   $0xf01193c4
f010381f:	68 79 01 00 00       	push   $0x179
f0103824:	68 f5 93 11 f0       	push   $0xf01193f5
f0103829:	e8 48 c9 ff ff       	call   f0100176 <_panic>
f010382e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103831:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103837:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010383a:	01 d0                	add    %edx,%eax
f010383c:	48                   	dec    %eax
f010383d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103840:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103843:	ba 00 00 00 00       	mov    $0x0,%edx
f0103848:	f7 75 e4             	divl   -0x1c(%ebp)
f010384b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010384e:	29 d0                	sub    %edx,%eax
f0103850:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103853:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010385a:	eb 1d                	jmp    f0103879 <initialize_paging+0x25d>
	{
		frames_info[i].references = 1;
f010385c:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103862:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103865:	89 d0                	mov    %edx,%eax
f0103867:	01 c0                	add    %eax,%eax
f0103869:	01 d0                	add    %edx,%eax
f010386b:	c1 e0 03             	shl    $0x3,%eax
f010386e:	01 c8                	add    %ecx,%eax
f0103870:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103876:	ff 45 f4             	incl   -0xc(%ebp)
f0103879:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387c:	85 c0                	test   %eax,%eax
f010387e:	79 05                	jns    f0103885 <initialize_paging+0x269>
f0103880:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103885:	c1 f8 0c             	sar    $0xc,%eax
f0103888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010388b:	7f cf                	jg     f010385c <initialize_paging+0x240>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010388d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103890:	85 c0                	test   %eax,%eax
f0103892:	79 05                	jns    f0103899 <initialize_paging+0x27d>
f0103894:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103899:	c1 f8 0c             	sar    $0xc,%eax
f010389c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010389f:	e9 bc 00 00 00       	jmp    f0103960 <initialize_paging+0x344>
	{
		initialize_frame_info(&(frames_info[i]));
f01038a4:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f01038aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038ad:	89 d0                	mov    %edx,%eax
f01038af:	01 c0                	add    %eax,%eax
f01038b1:	01 d0                	add    %edx,%eax
f01038b3:	c1 e0 03             	shl    $0x3,%eax
f01038b6:	01 c8                	add    %ecx,%eax
f01038b8:	83 ec 0c             	sub    $0xc,%esp
f01038bb:	50                   	push   %eax
f01038bc:	e8 ba 00 00 00       	call   f010397b <initialize_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01038c4:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f01038ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038cd:	89 d0                	mov    %edx,%eax
f01038cf:	01 c0                	add    %eax,%eax
f01038d1:	01 d0                	add    %edx,%eax
f01038d3:	c1 e0 03             	shl    $0x3,%eax
f01038d6:	01 c8                	add    %ecx,%eax
f01038d8:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f01038de:	89 10                	mov    %edx,(%eax)
f01038e0:	8b 00                	mov    (%eax),%eax
f01038e2:	85 c0                	test   %eax,%eax
f01038e4:	74 1f                	je     f0103905 <initialize_paging+0x2e9>
f01038e6:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f01038ec:	8b 1d c4 b6 54 f0    	mov    0xf054b6c4,%ebx
f01038f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01038f5:	89 c8                	mov    %ecx,%eax
f01038f7:	01 c0                	add    %eax,%eax
f01038f9:	01 c8                	add    %ecx,%eax
f01038fb:	c1 e0 03             	shl    $0x3,%eax
f01038fe:	01 d8                	add    %ebx,%eax
f0103900:	89 42 04             	mov    %eax,0x4(%edx)
f0103903:	eb 19                	jmp    f010391e <initialize_paging+0x302>
f0103905:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f010390b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010390e:	89 d0                	mov    %edx,%eax
f0103910:	01 c0                	add    %eax,%eax
f0103912:	01 d0                	add    %edx,%eax
f0103914:	c1 e0 03             	shl    $0x3,%eax
f0103917:	01 c8                	add    %ecx,%eax
f0103919:	a3 b8 b6 54 f0       	mov    %eax,0xf054b6b8
f010391e:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f0103924:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103927:	89 d0                	mov    %edx,%eax
f0103929:	01 c0                	add    %eax,%eax
f010392b:	01 d0                	add    %edx,%eax
f010392d:	c1 e0 03             	shl    $0x3,%eax
f0103930:	01 c8                	add    %ecx,%eax
f0103932:	a3 b4 b6 54 f0       	mov    %eax,0xf054b6b4
f0103937:	8b 0d c4 b6 54 f0    	mov    0xf054b6c4,%ecx
f010393d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103940:	89 d0                	mov    %edx,%eax
f0103942:	01 c0                	add    %eax,%eax
f0103944:	01 d0                	add    %edx,%eax
f0103946:	c1 e0 03             	shl    $0x3,%eax
f0103949:	01 c8                	add    %ecx,%eax
f010394b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103952:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
f0103957:	40                   	inc    %eax
f0103958:	a3 c0 b6 54 f0       	mov    %eax,0xf054b6c0
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010395d:	ff 45 f4             	incl   -0xc(%ebp)
f0103960:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103963:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0103968:	39 c2                	cmp    %eax,%edx
f010396a:	0f 82 34 ff ff ff    	jb     f01038a4 <initialize_paging+0x288>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0103970:	e8 b7 73 00 00       	call   f010ad2c <initialize_disk_page_file>
}
f0103975:	90                   	nop
f0103976:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103979:	c9                   	leave  
f010397a:	c3                   	ret    

f010397b <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct Frame_Info *ptr_frame_info)
{
f010397b:	55                   	push   %ebp
f010397c:	89 e5                	mov    %esp,%ebp
f010397e:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103981:	83 ec 04             	sub    $0x4,%esp
f0103984:	6a 18                	push   $0x18
f0103986:	6a 00                	push   $0x0
f0103988:	ff 75 08             	pushl  0x8(%ebp)
f010398b:	e8 33 37 01 00       	call   f01170c3 <memset>
f0103990:	83 c4 10             	add    $0x10,%esp
}
f0103993:	90                   	nop
f0103994:	c9                   	leave  
f0103995:	c3                   	ret    

f0103996 <allocate_frame>:
// Hint: references should not be incremented

extern void env_free(struct Env *e);

int allocate_frame(struct Frame_Info **ptr_frame_info)
{
f0103996:	55                   	push   %ebp
f0103997:	89 e5                	mov    %esp,%ebp
f0103999:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010399c:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f01039a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a5:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01039a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01039ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b1:	8b 00                	mov    (%eax),%eax
f01039b3:	85 c0                	test   %eax,%eax
f01039b5:	75 17                	jne    f01039ce <allocate_frame+0x38>
	{
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01039b7:	83 ec 04             	sub    $0x4,%esp
f01039ba:	68 4c 94 11 f0       	push   $0xf011944c
f01039bf:	68 ac 01 00 00       	push   $0x1ac
f01039c4:	68 f5 93 11 f0       	push   $0xf01193f5
f01039c9:	e8 a8 c7 ff ff       	call   f0100176 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01039ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01039d1:	8b 00                	mov    (%eax),%eax
f01039d3:	8b 00                	mov    (%eax),%eax
f01039d5:	85 c0                	test   %eax,%eax
f01039d7:	74 14                	je     f01039ed <allocate_frame+0x57>
f01039d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01039dc:	8b 00                	mov    (%eax),%eax
f01039de:	8b 00                	mov    (%eax),%eax
f01039e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01039e3:	8b 12                	mov    (%edx),%edx
f01039e5:	8b 52 04             	mov    0x4(%edx),%edx
f01039e8:	89 50 04             	mov    %edx,0x4(%eax)
f01039eb:	eb 0d                	jmp    f01039fa <allocate_frame+0x64>
f01039ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01039f0:	8b 00                	mov    (%eax),%eax
f01039f2:	8b 40 04             	mov    0x4(%eax),%eax
f01039f5:	a3 b8 b6 54 f0       	mov    %eax,0xf054b6b8
f01039fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fd:	8b 00                	mov    (%eax),%eax
f01039ff:	8b 40 04             	mov    0x4(%eax),%eax
f0103a02:	85 c0                	test   %eax,%eax
f0103a04:	74 13                	je     f0103a19 <allocate_frame+0x83>
f0103a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a09:	8b 00                	mov    (%eax),%eax
f0103a0b:	8b 40 04             	mov    0x4(%eax),%eax
f0103a0e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103a11:	8b 12                	mov    (%edx),%edx
f0103a13:	8b 12                	mov    (%edx),%edx
f0103a15:	89 10                	mov    %edx,(%eax)
f0103a17:	eb 0c                	jmp    f0103a25 <allocate_frame+0x8f>
f0103a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a1c:	8b 00                	mov    (%eax),%eax
f0103a1e:	8b 00                	mov    (%eax),%eax
f0103a20:	a3 b4 b6 54 f0       	mov    %eax,0xf054b6b4
f0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a28:	8b 00                	mov    (%eax),%eax
f0103a2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103a30:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a33:	8b 00                	mov    (%eax),%eax
f0103a35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a3c:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
f0103a41:	48                   	dec    %eax
f0103a42:	a3 c0 b6 54 f0       	mov    %eax,0xf054b6c0

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0103a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4a:	8b 00                	mov    (%eax),%eax
f0103a4c:	8a 40 14             	mov    0x14(%eax),%al
f0103a4f:	84 c0                	test   %al,%al
f0103a51:	74 1d                	je     f0103a70 <allocate_frame+0xda>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment,(*ptr_frame_info)->va);
f0103a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a56:	8b 00                	mov    (%eax),%eax
f0103a58:	8b 50 0c             	mov    0xc(%eax),%edx
f0103a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a5e:	8b 00                	mov    (%eax),%eax
f0103a60:	8b 40 10             	mov    0x10(%eax),%eax
f0103a63:	83 ec 08             	sub    $0x8,%esp
f0103a66:	52                   	push   %edx
f0103a67:	50                   	push   %eax
f0103a68:	e8 40 14 00 00       	call   f0104ead <pt_clear_page_table_entry>
f0103a6d:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0103a70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a73:	8b 00                	mov    (%eax),%eax
f0103a75:	83 ec 0c             	sub    $0xc,%esp
f0103a78:	50                   	push   %eax
f0103a79:	e8 fd fe ff ff       	call   f010397b <initialize_frame_info>
f0103a7e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103a81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a86:	c9                   	leave  
f0103a87:	c3                   	ret    

f0103a88 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct Frame_Info *ptr_frame_info)
{
f0103a88:	55                   	push   %ebp
f0103a89:	89 e5                	mov    %esp,%ebp
f0103a8b:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0103a8e:	83 ec 0c             	sub    $0xc,%esp
f0103a91:	ff 75 08             	pushl  0x8(%ebp)
f0103a94:	e8 e2 fe ff ff       	call   f010397b <initialize_frame_info>
f0103a99:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103a9c:	8b 15 b4 b6 54 f0    	mov    0xf054b6b4,%edx
f0103aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa5:	89 10                	mov    %edx,(%eax)
f0103aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aaa:	8b 00                	mov    (%eax),%eax
f0103aac:	85 c0                	test   %eax,%eax
f0103aae:	74 0d                	je     f0103abd <free_frame+0x35>
f0103ab0:	a1 b4 b6 54 f0       	mov    0xf054b6b4,%eax
f0103ab5:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ab8:	89 50 04             	mov    %edx,0x4(%eax)
f0103abb:	eb 08                	jmp    f0103ac5 <free_frame+0x3d>
f0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac0:	a3 b8 b6 54 f0       	mov    %eax,0xf054b6b8
f0103ac5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac8:	a3 b4 b6 54 f0       	mov    %eax,0xf054b6b4
f0103acd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ad7:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
f0103adc:	40                   	inc    %eax
f0103add:	a3 c0 b6 54 f0       	mov    %eax,0xf054b6c0
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0103ae2:	90                   	nop
f0103ae3:	c9                   	leave  
f0103ae4:	c3                   	ret    

f0103ae5 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct Frame_Info* ptr_frame_info)
{
f0103ae5:	55                   	push   %ebp
f0103ae6:	89 e5                	mov    %esp,%ebp
f0103ae8:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0103aeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aee:	8b 40 08             	mov    0x8(%eax),%eax
f0103af1:	48                   	dec    %eax
f0103af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0103af5:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afc:	8b 40 08             	mov    0x8(%eax),%eax
f0103aff:	66 85 c0             	test   %ax,%ax
f0103b02:	75 0e                	jne    f0103b12 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0103b04:	83 ec 0c             	sub    $0xc,%esp
f0103b07:	ff 75 08             	pushl  0x8(%ebp)
f0103b0a:	e8 79 ff ff ff       	call   f0103a88 <free_frame>
f0103b0f:	83 c4 10             	add    $0x10,%esp
}
f0103b12:	90                   	nop
f0103b13:	c9                   	leave  
f0103b14:	c3                   	ret    

f0103b15 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const void *virtual_address, uint32 **ptr_page_table)
{
f0103b15:	55                   	push   %ebp
f0103b16:	89 e5                	mov    %esp,%ebp
f0103b18:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b1e:	c1 e8 16             	shr    $0x16,%eax
f0103b21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b28:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2b:	01 d0                	add    %edx,%eax
f0103b2d:	8b 00                	mov    (%eax),%eax
f0103b2f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103b32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b35:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103b3a:	77 1d                	ja     f0103b59 <get_page_table+0x44>
	{
		*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b44:	83 ec 0c             	sub    $0xc,%esp
f0103b47:	50                   	push   %eax
f0103b48:	e8 4a 80 00 00       	call   f010bb97 <kheap_virtual_address>
f0103b4d:	83 c4 10             	add    $0x10,%esp
f0103b50:	89 c2                	mov    %eax,%edx
f0103b52:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b55:	89 10                	mov    %edx,(%eax)
f0103b57:	eb 44                	jmp    f0103b9d <get_page_table+0x88>
	}
	else
	{
		*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b67:	c1 e8 0c             	shr    $0xc,%eax
f0103b6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b6d:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0103b72:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b75:	72 17                	jb     f0103b8e <get_page_table+0x79>
f0103b77:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b7a:	68 1c 94 11 f0       	push   $0xf011941c
f0103b7f:	68 f2 01 00 00       	push   $0x1f2
f0103b84:	68 f5 93 11 f0       	push   $0xf01193f5
f0103b89:	e8 e8 c5 ff ff       	call   f0100176 <_panic>
f0103b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b96:	89 c2                	mov    %eax,%edx
f0103b98:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b9b:	89 10                	mov    %edx,(%eax)
	}

	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ba0:	83 e0 01             	and    $0x1,%eax
f0103ba3:	85 c0                	test   %eax,%eax
f0103ba5:	74 0a                	je     f0103bb1 <get_page_table+0x9c>
	{
		return TABLE_IN_MEMORY;
f0103ba7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103bac:	e9 ba 00 00 00       	jmp    f0103c6b <get_page_table+0x156>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103bb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103bb5:	0f 84 a2 00 00 00    	je     f0103c5d <get_page_table+0x148>
	{
		// Put the faulted address in CR2 and then
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;
f0103bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bbe:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103bc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103bc4:	0f 22 d0             	mov    %eax,%cr2

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0103bc7:	83 ec 0c             	sub    $0xc,%esp
f0103bca:	6a 00                	push   $0x0
f0103bcc:	e8 73 48 00 00       	call   f0108444 <fault_handler>
f0103bd1:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bd7:	c1 e8 16             	shr    $0x16,%eax
f0103bda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be4:	01 d0                	add    %edx,%eax
f0103be6:	8b 00                	mov    (%eax),%eax
f0103be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103beb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103bf3:	77 1d                	ja     f0103c12 <get_page_table+0xfd>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103bf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bfd:	83 ec 0c             	sub    $0xc,%esp
f0103c00:	50                   	push   %eax
f0103c01:	e8 91 7f 00 00       	call   f010bb97 <kheap_virtual_address>
f0103c06:	83 c4 10             	add    $0x10,%esp
f0103c09:	89 c2                	mov    %eax,%edx
f0103c0b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c0e:	89 10                	mov    %edx,(%eax)
f0103c10:	eb 44                	jmp    f0103c56 <get_page_table+0x141>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c20:	c1 e8 0c             	shr    $0xc,%eax
f0103c23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c26:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0103c2b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103c2e:	72 17                	jb     f0103c47 <get_page_table+0x132>
f0103c30:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c33:	68 1c 94 11 f0       	push   $0xf011941c
f0103c38:	68 0d 02 00 00       	push   $0x20d
f0103c3d:	68 f5 93 11 f0       	push   $0xf01193f5
f0103c42:	e8 2f c5 ff ff       	call   f0100176 <_panic>
f0103c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c4a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c4f:	89 c2                	mov    %eax,%edx
f0103c51:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c54:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0103c56:	b8 00 00 00 00       	mov    $0x0,%eax
f0103c5b:	eb 0e                	jmp    f0103c6b <get_page_table+0x156>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0103c5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0103c66:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0103c6b:	c9                   	leave  
f0103c6c:	c3                   	ret    

f0103c6d <create_page_table>:

void * create_page_table(uint32 *ptr_page_directory, const uint32 virtual_address) {
f0103c6d:	55                   	push   %ebp
f0103c6e:	89 e5                	mov    %esp,%ebp
f0103c70:	83 ec 18             	sub    $0x18,%esp
	//REMEMBER TO:
	//	a.	clear all entries (as it may contain garbage data)
	//	b.	clear the TLB cache (using "tlbflush()")
	//change this "return" according to your answer

	uint32* newPT = kmalloc(PAGE_SIZE);
f0103c73:	83 ec 0c             	sub    $0xc,%esp
f0103c76:	68 00 10 00 00       	push   $0x1000
f0103c7b:	e8 6f 7d 00 00       	call   f010b9ef <kmalloc>
f0103c80:	83 c4 10             	add    $0x10,%esp
f0103c83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
f0103c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c89:	83 ec 0c             	sub    $0xc,%esp
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 67 7f 00 00       	call   f010bbf9 <kheap_physical_address>
f0103c92:	83 c4 10             	add    $0x10,%esp
f0103c95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;
f0103c98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c9b:	c1 e8 16             	shr    $0x16,%eax
f0103c9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ca5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca8:	01 d0                	add    %edx,%eax
f0103caa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103cad:	83 ca 07             	or     $0x7,%edx
f0103cb0:	89 10                	mov    %edx,(%eax)

	for(int i=0; i < kilo; i++) {
f0103cb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb9:	eb 18                	jmp    f0103cd3 <create_page_table+0x66>
		newPT[i] = 0;
f0103cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc8:	01 d0                	add    %edx,%eax
f0103cca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	uint32* newPT = kmalloc(PAGE_SIZE);
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;

	for(int i=0; i < kilo; i++) {
f0103cd0:	ff 45 f4             	incl   -0xc(%ebp)
f0103cd3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0103cda:	7e df                	jle    f0103cbb <create_page_table+0x4e>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0103cdc:	0f 20 d8             	mov    %cr3,%eax
f0103cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0103ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ce5:	0f 22 d8             	mov    %eax,%cr3
		newPT[i] = 0;
	}

	tlbflush();
	return newPT;
f0103ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ceb:	c9                   	leave  
f0103cec:	c3                   	ret    

f0103ced <__static_cpt>:


void __static_cpt(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0103ced:	55                   	push   %ebp
f0103cee:	89 e5                	mov    %esp,%ebp
f0103cf0:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0103cf3:	83 ec 04             	sub    $0x4,%esp
f0103cf6:	68 9c 94 11 f0       	push   $0xf011949c
f0103cfb:	68 36 02 00 00       	push   $0x236
f0103d00:	68 f5 93 11 f0       	push   $0xf01193f5
f0103d05:	e8 6c c4 ff ff       	call   f0100176 <_panic>

f0103d0a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103d0a:	55                   	push   %ebp
f0103d0b:	89 e5                	mov    %esp,%ebp
f0103d0d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103d10:	ff 75 0c             	pushl  0xc(%ebp)
f0103d13:	e8 89 f4 ff ff       	call   f01031a1 <to_physical_address>
f0103d18:	83 c4 04             	add    $0x4,%esp
f0103d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0103d1e:	83 ec 04             	sub    $0x4,%esp
f0103d21:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103d24:	50                   	push   %eax
f0103d25:	ff 75 10             	pushl  0x10(%ebp)
f0103d28:	ff 75 08             	pushl  0x8(%ebp)
f0103d2b:	e8 e5 fd ff ff       	call   f0103b15 <get_page_table>
f0103d30:	83 c4 10             	add    $0x10,%esp
f0103d33:	83 f8 01             	cmp    $0x1,%eax
f0103d36:	75 15                	jne    f0103d4d <map_frame+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103d38:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d3b:	83 ec 08             	sub    $0x8,%esp
f0103d3e:	50                   	push   %eax
f0103d3f:	ff 75 08             	pushl  0x8(%ebp)
f0103d42:	e8 26 ff ff ff       	call   f0103c6d <create_page_table>
f0103d47:	83 c4 10             	add    $0x10,%esp
f0103d4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}

	}

	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0103d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d50:	8b 55 10             	mov    0x10(%ebp),%edx
f0103d53:	c1 ea 0c             	shr    $0xc,%edx
f0103d56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103d5c:	c1 e2 02             	shl    $0x2,%edx
f0103d5f:	01 d0                	add    %edx,%eax
f0103d61:	8b 00                	mov    (%eax),%eax
f0103d63:	89 45 f0             	mov    %eax,-0x10(%ebp)


	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0103d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d69:	83 e0 01             	and    $0x1,%eax
f0103d6c:	85 c0                	test   %eax,%eax
f0103d6e:	74 25                	je     f0103d95 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0103d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103d7b:	75 07                	jne    f0103d84 <map_frame+0x7a>
			return 0;
f0103d7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d82:	eb 43                	jmp    f0103dc7 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0103d84:	83 ec 08             	sub    $0x8,%esp
f0103d87:	ff 75 10             	pushl  0x10(%ebp)
f0103d8a:	ff 75 08             	pushl  0x8(%ebp)
f0103d8d:	e8 a7 00 00 00       	call   f0103e39 <unmap_frame>
f0103d92:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	8b 40 08             	mov    0x8(%eax),%eax
f0103d9b:	40                   	inc    %eax
f0103d9c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d9f:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103da6:	8b 55 10             	mov    0x10(%ebp),%edx
f0103da9:	c1 ea 0c             	shr    $0xc,%edx
f0103dac:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103db2:	c1 e2 02             	shl    $0x2,%edx
f0103db5:	01 c2                	add    %eax,%edx
f0103db7:	8b 45 14             	mov    0x14(%ebp),%eax
f0103dba:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103dbd:	83 c8 01             	or     $0x1,%eax
f0103dc0:	89 02                	mov    %eax,(%edx)

	return 0;
f0103dc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103dc7:	c9                   	leave  
f0103dc8:	c3                   	ret    

f0103dc9 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct Frame_Info * get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table)
{
f0103dc9:	55                   	push   %ebp
f0103dca:	89 e5                	mov    %esp,%ebp
f0103dcc:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0103dcf:	83 ec 04             	sub    $0x4,%esp
f0103dd2:	ff 75 10             	pushl  0x10(%ebp)
f0103dd5:	ff 75 0c             	pushl  0xc(%ebp)
f0103dd8:	ff 75 08             	pushl  0x8(%ebp)
f0103ddb:	e8 35 fd ff ff       	call   f0103b15 <get_page_table>
f0103de0:	83 c4 10             	add    $0x10,%esp
f0103de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if((*ptr_page_table) != 0)
f0103de6:	8b 45 10             	mov    0x10(%ebp),%eax
f0103de9:	8b 00                	mov    (%eax),%eax
f0103deb:	85 c0                	test   %eax,%eax
f0103ded:	74 43                	je     f0103e32 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0103def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103df2:	c1 e8 0c             	shr    $0xc,%eax
f0103df5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0103dfd:	8b 45 10             	mov    0x10(%ebp),%eax
f0103e00:	8b 00                	mov    (%eax),%eax
f0103e02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103e05:	c1 e2 02             	shl    $0x2,%edx
f0103e08:	01 d0                	add    %edx,%eax
f0103e0a:	8b 00                	mov    (%eax),%eax
f0103e0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0103e0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0103e13:	74 16                	je     f0103e2b <get_frame_info+0x62>
		{
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0103e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e1d:	83 ec 0c             	sub    $0xc,%esp
f0103e20:	50                   	push   %eax
f0103e21:	e8 8e f3 ff ff       	call   f01031b4 <to_frame_info>
f0103e26:	83 c4 10             	add    $0x10,%esp
f0103e29:	eb 0c                	jmp    f0103e37 <get_frame_info+0x6e>
		}
		return 0;
f0103e2b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e30:	eb 05                	jmp    f0103e37 <get_frame_info+0x6e>
	}
	return 0;
f0103e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e37:	c9                   	leave  
f0103e38:	c3                   	ret    

f0103e39 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, void *virtual_address)
{
f0103e39:	55                   	push   %ebp
f0103e3a:	89 e5                	mov    %esp,%ebp
f0103e3c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0103e3f:	83 ec 04             	sub    $0x4,%esp
f0103e42:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e45:	50                   	push   %eax
f0103e46:	ff 75 0c             	pushl  0xc(%ebp)
f0103e49:	ff 75 08             	pushl  0x8(%ebp)
f0103e4c:	e8 78 ff ff ff       	call   f0103dc9 <get_frame_info>
f0103e51:	83 c4 10             	add    $0x10,%esp
f0103e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0103e57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e5b:	74 60                	je     f0103ebd <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0103e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e60:	8a 40 14             	mov    0x14(%eax),%al
f0103e63:	84 c0                	test   %al,%al
f0103e65:	74 1d                	je     f0103e84 <unmap_frame+0x4b>
f0103e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e6a:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103e6f:	77 13                	ja     f0103e84 <unmap_frame+0x4b>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0103e71:	83 ec 08             	sub    $0x8,%esp
f0103e74:	ff 75 0c             	pushl  0xc(%ebp)
f0103e77:	68 c0 94 11 f0       	push   $0xf01194c0
f0103e7c:	e8 14 2f 00 00       	call   f0106d95 <cprintf>
f0103e81:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0103e84:	83 ec 0c             	sub    $0xc,%esp
f0103e87:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e8a:	e8 56 fc ff ff       	call   f0103ae5 <decrement_references>
f0103e8f:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0103e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e95:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e98:	c1 ea 0c             	shr    $0xc,%edx
f0103e9b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ea1:	c1 e2 02             	shl    $0x2,%edx
f0103ea4:	01 d0                	add    %edx,%eax
f0103ea6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, virtual_address);
f0103eac:	83 ec 08             	sub    $0x8,%esp
f0103eaf:	ff 75 0c             	pushl  0xc(%ebp)
f0103eb2:	ff 75 08             	pushl  0x8(%ebp)
f0103eb5:	e8 55 f0 ff ff       	call   f0102f0f <tlb_invalidate>
f0103eba:	83 c4 10             	add    $0x10,%esp
	}
}
f0103ebd:	90                   	nop
f0103ebe:	c9                   	leave  
f0103ebf:	c3                   	ret    

f0103ec0 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103ec0:	55                   	push   %ebp
f0103ec1:	89 e5                	mov    %esp,%ebp
f0103ec3:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103ec6:	ff 75 0c             	pushl  0xc(%ebp)
f0103ec9:	e8 d3 f2 ff ff       	call   f01031a1 <to_physical_address>
f0103ece:	83 c4 04             	add    $0x4,%esp
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103ed4:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ed7:	c1 e8 16             	shr    $0x16,%eax
f0103eda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee4:	01 d0                	add    %edx,%eax
f0103ee6:	8b 00                	mov    (%eax),%eax
f0103ee8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103eeb:	8b 45 10             	mov    0x10(%ebp),%eax
f0103eee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103ef3:	77 19                	ja     f0103f0e <loadtime_map_frame+0x4e>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ef8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103efd:	83 ec 0c             	sub    $0xc,%esp
f0103f00:	50                   	push   %eax
f0103f01:	e8 91 7c 00 00       	call   f010bb97 <kheap_virtual_address>
f0103f06:	83 c4 10             	add    $0x10,%esp
f0103f09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f0c:	eb 40                	jmp    f0103f4e <loadtime_map_frame+0x8e>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103f22:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0103f27:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <loadtime_map_frame+0x83>
f0103f2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0103f2f:	68 1c 94 11 f0       	push   $0xf011941c
f0103f34:	68 c3 02 00 00       	push   $0x2c3
f0103f39:	68 f5 93 11 f0       	push   $0xf01193f5
f0103f3e:	e8 33 c2 ff ff       	call   f0100176 <_panic>
f0103f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0103f4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103f52:	75 15                	jne    f0103f69 <loadtime_map_frame+0xa9>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103f54:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f57:	83 ec 08             	sub    $0x8,%esp
f0103f5a:	50                   	push   %eax
f0103f5b:	ff 75 08             	pushl  0x8(%ebp)
f0103f5e:	e8 0a fd ff ff       	call   f0103c6d <create_page_table>
f0103f63:	83 c4 10             	add    $0x10,%esp
f0103f66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}
	}

	ptr_frame_info->references++;
f0103f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f6c:	8b 40 08             	mov    0x8(%eax),%eax
f0103f6f:	40                   	inc    %eax
f0103f70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f73:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103f77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0103f7d:	c1 ea 0c             	shr    $0xc,%edx
f0103f80:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f86:	c1 e2 02             	shl    $0x2,%edx
f0103f89:	01 c2                	add    %eax,%edx
f0103f8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f8e:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103f91:	83 c8 01             	or     $0x1,%eax
f0103f94:	89 02                	mov    %eax,(%edx)

	return 0;
f0103f96:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103f9b:	c9                   	leave  
f0103f9c:	c3                   	ret    

f0103f9d <allocateMem>:
//======================================================
/// functions used for malloc() and freeHeap()
//======================================================

// [10] allocateMem
void allocateMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103f9d:	55                   	push   %ebp
f0103f9e:	89 e5                	mov    %esp,%ebp
f0103fa0:	83 ec 18             	sub    $0x18,%esp
	//panic("allocateMem() is not implemented yet...!!");

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
f0103fa3:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103faa:	8b 55 10             	mov    0x10(%ebp),%edx
f0103fad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fb0:	01 d0                	add    %edx,%eax
f0103fb2:	48                   	dec    %eax
f0103fb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0103fbe:	f7 75 f0             	divl   -0x10(%ebp)
f0103fc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fc4:	29 d0                	sub    %edx,%eax
f0103fc6:	89 45 10             	mov    %eax,0x10(%ebp)
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103fcf:	eb 1b                	jmp    f0103fec <allocateMem+0x4f>
		pf_add_empty_env_page(e, i, 1);
f0103fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd4:	83 ec 04             	sub    $0x4,%esp
f0103fd7:	6a 01                	push   $0x1
f0103fd9:	50                   	push   %eax
f0103fda:	ff 75 08             	pushl  0x8(%ebp)
f0103fdd:	e8 f9 70 00 00       	call   f010b0db <pf_add_empty_env_page>
f0103fe2:	83 c4 10             	add    $0x10,%esp

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fe5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0103fec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103fef:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ff2:	01 c2                	add    %eax,%edx
f0103ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ff7:	39 c2                	cmp    %eax,%edx
f0103ff9:	77 d6                	ja     f0103fd1 <allocateMem+0x34>
		pf_add_empty_env_page(e, i, 1);
	}
}
f0103ffb:	90                   	nop
f0103ffc:	c9                   	leave  
f0103ffd:	c3                   	ret    

f0103ffe <freeMem>:


// [12] freeMem

void freeMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103ffe:	55                   	push   %ebp
f0103fff:	89 e5                	mov    %esp,%ebp
f0104001:	83 ec 28             	sub    $0x28,%esp
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0104004:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104007:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010400a:	e9 0a 01 00 00       	jmp    f0104119 <freeMem+0x11b>
		pf_remove_env_page(e, i);
f010400f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104012:	83 ec 08             	sub    $0x8,%esp
f0104015:	50                   	push   %eax
f0104016:	ff 75 08             	pushl  0x8(%ebp)
f0104019:	e8 fc 73 00 00       	call   f010b41a <pf_remove_env_page>
f010401e:	83 c4 10             	add    $0x10,%esp

		for(int j=0; j < e->page_WS_max_size; j++) {
f0104021:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104028:	eb 4a                	jmp    f0104074 <freeMem+0x76>
			if(e->ptr_pageWorkingSet[i].virtual_address == j) {
f010402a:	8b 45 08             	mov    0x8(%ebp),%eax
f010402d:	8b 48 78             	mov    0x78(%eax),%ecx
f0104030:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104033:	89 d0                	mov    %edx,%eax
f0104035:	01 c0                	add    %eax,%eax
f0104037:	01 d0                	add    %edx,%eax
f0104039:	c1 e0 02             	shl    $0x2,%eax
f010403c:	01 c8                	add    %ecx,%eax
f010403e:	8b 10                	mov    (%eax),%edx
f0104040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104043:	39 c2                	cmp    %eax,%edx
f0104045:	75 2a                	jne    f0104071 <freeMem+0x73>
				env_page_ws_clear_entry(e, i);
f0104047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010404a:	83 ec 08             	sub    $0x8,%esp
f010404d:	50                   	push   %eax
f010404e:	ff 75 08             	pushl  0x8(%ebp)
f0104051:	e8 e8 03 00 00       	call   f010443e <env_page_ws_clear_entry>
f0104056:	83 c4 10             	add    $0x10,%esp
				unmap_frame(e->env_page_directory, (void*)i);
f0104059:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010405c:	8b 45 08             	mov    0x8(%ebp),%eax
f010405f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104062:	83 ec 08             	sub    $0x8,%esp
f0104065:	52                   	push   %edx
f0104066:	50                   	push   %eax
f0104067:	e8 cd fd ff ff       	call   f0103e39 <unmap_frame>
f010406c:	83 c4 10             	add    $0x10,%esp
				break;
f010406f:	eb 10                	jmp    f0104081 <freeMem+0x83>
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
		pf_remove_env_page(e, i);

		for(int j=0; j < e->page_WS_max_size; j++) {
f0104071:	ff 45 f0             	incl   -0x10(%ebp)
f0104074:	8b 45 08             	mov    0x8(%ebp),%eax
f0104077:	8b 50 74             	mov    0x74(%eax),%edx
f010407a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010407d:	39 c2                	cmp    %eax,%edx
f010407f:	77 a9                	ja     f010402a <freeMem+0x2c>
				unmap_frame(e->env_page_directory, (void*)i);
				break;
			}
		}

		uint32* ptrPT = NULL;
f0104081:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		get_page_table(e->env_page_directory, (void*)i, &ptrPT);
f0104088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010408b:	8b 45 08             	mov    0x8(%ebp),%eax
f010408e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104091:	83 ec 04             	sub    $0x4,%esp
f0104094:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0104097:	51                   	push   %ecx
f0104098:	52                   	push   %edx
f0104099:	50                   	push   %eax
f010409a:	e8 76 fa ff ff       	call   f0103b15 <get_page_table>
f010409f:	83 c4 10             	add    $0x10,%esp
		int x = 0;
f01040a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		if(ptrPT != NULL) {
f01040a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040ac:	85 c0                	test   %eax,%eax
f01040ae:	74 62                	je     f0104112 <freeMem+0x114>
			for(int j=0; j < kilo; j++) {
f01040b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01040b7:	eb 24                	jmp    f01040dd <freeMem+0xdf>
				x = 0;
f01040b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
				if(ptrPT[j] != 0) {
f01040c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01040c6:	c1 e2 02             	shl    $0x2,%edx
f01040c9:	01 d0                	add    %edx,%eax
f01040cb:	8b 00                	mov    (%eax),%eax
f01040cd:	85 c0                	test   %eax,%eax
f01040cf:	74 09                	je     f01040da <freeMem+0xdc>
					x = 1;
f01040d1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
					break;
f01040d8:	eb 0c                	jmp    f01040e6 <freeMem+0xe8>

		uint32* ptrPT = NULL;
		get_page_table(e->env_page_directory, (void*)i, &ptrPT);
		int x = 0;
		if(ptrPT != NULL) {
			for(int j=0; j < kilo; j++) {
f01040da:	ff 45 e8             	incl   -0x18(%ebp)
f01040dd:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
f01040e4:	7e d3                	jle    f01040b9 <freeMem+0xbb>
				if(ptrPT[j] != 0) {
					x = 1;
					break;
				}
			}
			if(x == 0) {
f01040e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01040ea:	75 26                	jne    f0104112 <freeMem+0x114>
				kfree((void*)ptrPT);
f01040ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040ef:	83 ec 0c             	sub    $0xc,%esp
f01040f2:	50                   	push   %eax
f01040f3:	e8 10 7a 00 00       	call   f010bb08 <kfree>
f01040f8:	83 c4 10             	add    $0x10,%esp
				e->env_page_directory[PDX(i)] = 0;
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104101:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104104:	c1 ea 16             	shr    $0x16,%edx
f0104107:	c1 e2 02             	shl    $0x2,%edx
f010410a:	01 d0                	add    %edx,%eax
f010410c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0104112:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0104119:	8b 55 0c             	mov    0xc(%ebp),%edx
f010411c:	8b 45 10             	mov    0x10(%ebp),%eax
f010411f:	01 c2                	add    %eax,%edx
f0104121:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104124:	39 c2                	cmp    %eax,%edx
f0104126:	0f 87 e3 fe ff ff    	ja     f010400f <freeMem+0x11>
				kfree((void*)ptrPT);
				e->env_page_directory[PDX(i)] = 0;
			}
		}
	}
}
f010412c:	90                   	nop
f010412d:	c9                   	leave  
f010412e:	c3                   	ret    

f010412f <__freeMem_with_buffering>:

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010412f:	55                   	push   %ebp
f0104130:	89 e5                	mov    %esp,%ebp
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Free any BUFFERED pages in the given range
	//4. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

	//Refer to the project presentation and documentation for details
}
f0104132:	90                   	nop
f0104133:	5d                   	pop    %ebp
f0104134:	c3                   	ret    

f0104135 <moveMem>:

//================= [BONUS] =====================
// [3] moveMem

void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size) {
f0104135:	55                   	push   %ebp
f0104136:	89 e5                	mov    %esp,%ebp
f0104138:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS3] User Heap Realloc [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("moveMem() is not implemented yet...!!");
f010413b:	83 ec 04             	sub    $0x4,%esp
f010413e:	68 e4 94 11 f0       	push   $0xf01194e4
f0104143:	68 33 03 00 00       	push   $0x333
f0104148:	68 f5 93 11 f0       	push   $0xf01193f5
f010414d:	e8 24 c0 ff ff       	call   f0100176 <_panic>

f0104152 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocatino size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
{
f0104152:	55                   	push   %ebp
f0104153:	89 e5                	mov    %esp,%ebp
f0104155:	83 ec 28             	sub    $0x28,%esp
	LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x",start_virtual_address));
	//calculate the required page tables
	uint32 number_of_tables = 0;
f0104158:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	long i = 0;
f010415f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);
f0104166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104169:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010416c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010416f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104174:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f0104177:	eb 27                	jmp    f01041a0 <calculate_required_frames+0x4e>
	{
		uint32 *ptr_page_table;
		get_page_table(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table);
f0104179:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010417c:	83 ec 04             	sub    $0x4,%esp
f010417f:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0104182:	52                   	push   %edx
f0104183:	50                   	push   %eax
f0104184:	ff 75 08             	pushl  0x8(%ebp)
f0104187:	e8 89 f9 ff ff       	call   f0103b15 <get_page_table>
f010418c:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table == 0)
f010418f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104192:	85 c0                	test   %eax,%eax
f0104194:	75 03                	jne    f0104199 <calculate_required_frames+0x47>
		{
			(number_of_tables)++;
f0104196:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 number_of_tables = 0;

	long i = 0;
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f0104199:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01041a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01041a6:	01 d0                	add    %edx,%eax
f01041a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01041ab:	77 cc                	ja     f0104179 <calculate_required_frames+0x27>
			(number_of_tables)++;
		}
	}

	//calc the required page frames
	uint32 number_of_pages = 0;
f01041ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f01041b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01041ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01041bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041c2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01041c5:	eb 24                	jmp    f01041eb <calculate_required_frames+0x99>
	{
		uint32 *ptr_page_table;
		if (get_frame_info(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table) == 0)
f01041c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041ca:	83 ec 04             	sub    $0x4,%esp
f01041cd:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01041d0:	52                   	push   %edx
f01041d1:	50                   	push   %eax
f01041d2:	ff 75 08             	pushl  0x8(%ebp)
f01041d5:	e8 ef fb ff ff       	call   f0103dc9 <get_frame_info>
f01041da:	83 c4 10             	add    $0x10,%esp
f01041dd:	85 c0                	test   %eax,%eax
f01041df:	75 03                	jne    f01041e4 <calculate_required_frames+0x92>
		{
			(number_of_pages)++;
f01041e1:	ff 45 ec             	incl   -0x14(%ebp)

	//calc the required page frames
	uint32 number_of_pages = 0;
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01041e4:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01041eb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041ee:	8b 45 10             	mov    0x10(%ebp),%eax
f01041f1:	01 d0                	add    %edx,%eax
f01041f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01041f6:	77 cf                	ja     f01041c7 <calculate_required_frames+0x75>
		}
	}

	//return total number of frames
	LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	return number_of_tables+number_of_pages;
f01041f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041fe:	01 d0                	add    %edx,%eax
}
f0104200:	c9                   	leave  
f0104201:	c3                   	ret    

f0104202 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0104202:	55                   	push   %ebp
f0104203:	89 e5                	mov    %esp,%ebp
f0104205:	57                   	push   %edi
f0104206:	56                   	push   %esi
f0104207:	53                   	push   %ebx
f0104208:	83 ec 20             	sub    $0x20,%esp
	//DETECTING LOOP inside the list
	//================================

	//calculate the free frames from the free frame list
	struct Frame_Info *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010420b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0104212:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0104219:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	LIST_FOREACH(ptr, &free_frame_list)
f0104220:	a1 b4 b6 54 f0       	mov    0xf054b6b4,%eax
f0104225:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104228:	eb 1a                	jmp    f0104244 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010422a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010422d:	8a 40 14             	mov    0x14(%eax),%al
f0104230:	84 c0                	test   %al,%al
f0104232:	74 05                	je     f0104239 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0104234:	ff 45 e8             	incl   -0x18(%ebp)
f0104237:	eb 03                	jmp    f010423c <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0104239:	ff 45 ec             	incl   -0x14(%ebp)
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;


	LIST_FOREACH(ptr, &free_frame_list)
f010423c:	a1 bc b6 54 f0       	mov    0xf054b6bc,%eax
f0104241:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104244:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104248:	74 07                	je     f0104251 <calculate_available_frames+0x4f>
f010424a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010424d:	8b 00                	mov    (%eax),%eax
f010424f:	eb 05                	jmp    f0104256 <calculate_available_frames+0x54>
f0104251:	b8 00 00 00 00       	mov    $0x0,%eax
f0104256:	a3 bc b6 54 f0       	mov    %eax,0xf054b6bc
f010425b:	a1 bc b6 54 f0       	mov    0xf054b6bc,%eax
f0104260:	85 c0                	test   %eax,%eax
f0104262:	75 c6                	jne    f010422a <calculate_available_frames+0x28>
f0104264:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104268:	75 c0                	jne    f010422a <calculate_available_frames+0x28>
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f010426a:	a1 a0 b6 54 f0       	mov    0xf054b6a0,%eax
f010426f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104272:	eb 0b                	jmp    f010427f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0104274:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f0104277:	a1 a8 b6 54 f0       	mov    0xf054b6a8,%eax
f010427c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010427f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104283:	74 07                	je     f010428c <calculate_available_frames+0x8a>
f0104285:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104288:	8b 00                	mov    (%eax),%eax
f010428a:	eb 05                	jmp    f0104291 <calculate_available_frames+0x8f>
f010428c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104291:	a3 a8 b6 54 f0       	mov    %eax,0xf054b6a8
f0104296:	a1 a8 b6 54 f0       	mov    0xf054b6a8,%eax
f010429b:	85 c0                	test   %eax,%eax
f010429d:	75 d5                	jne    f0104274 <calculate_available_frames+0x72>
f010429f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01042a3:	75 cf                	jne    f0104274 <calculate_available_frames+0x72>
		totalModified++ ;
	}


	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01042a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01042a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01042ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01042b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01042b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01042b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01042ba:	89 c3                	mov    %eax,%ebx
f01042bc:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01042bf:	ba 03 00 00 00       	mov    $0x3,%edx
f01042c4:	89 df                	mov    %ebx,%edi
f01042c6:	89 c6                	mov    %eax,%esi
f01042c8:	89 d1                	mov    %edx,%ecx
f01042ca:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01042cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01042cf:	83 c4 20             	add    $0x20,%esp
f01042d2:	5b                   	pop    %ebx
f01042d3:	5e                   	pop    %esi
f01042d4:	5f                   	pop    %edi
f01042d5:	5d                   	pop    %ebp
f01042d6:	c2 04 00             	ret    $0x4

f01042d9 <calculate_free_frames>:

//2018
// calculate_free_frames:
uint32 calculate_free_frames()
{
f01042d9:	55                   	push   %ebp
f01042da:	89 e5                	mov    %esp,%ebp
	return LIST_SIZE(&free_frame_list);
f01042dc:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
}
f01042e1:	5d                   	pop    %ebp
f01042e2:	c3                   	ret    

f01042e3 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f01042e3:	55                   	push   %ebp
f01042e4:	89 e5                	mov    %esp,%ebp
f01042e6:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01042e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01042f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01042f7:	eb 21                	jmp    f010431a <env_page_ws_get_size+0x37>
f01042f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01042fc:	8b 48 78             	mov    0x78(%eax),%ecx
f01042ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104302:	89 d0                	mov    %edx,%eax
f0104304:	01 c0                	add    %eax,%eax
f0104306:	01 d0                	add    %edx,%eax
f0104308:	c1 e0 02             	shl    $0x2,%eax
f010430b:	01 c8                	add    %ecx,%eax
f010430d:	8a 40 04             	mov    0x4(%eax),%al
f0104310:	84 c0                	test   %al,%al
f0104312:	75 03                	jne    f0104317 <env_page_ws_get_size+0x34>
f0104314:	ff 45 f8             	incl   -0x8(%ebp)
f0104317:	ff 45 fc             	incl   -0x4(%ebp)
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	8b 50 74             	mov    0x74(%eax),%edx
f0104320:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104323:	39 c2                	cmp    %eax,%edx
f0104325:	77 d2                	ja     f01042f9 <env_page_ws_get_size+0x16>
	return counter;
f0104327:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0104339:	eb 4c                	jmp    f0104387 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010433b:	8b 45 08             	mov    0x8(%ebp),%eax
f010433e:	8b 48 78             	mov    0x78(%eax),%ecx
f0104341:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104344:	89 d0                	mov    %edx,%eax
f0104346:	01 c0                	add    %eax,%eax
f0104348:	01 d0                	add    %edx,%eax
f010434a:	c1 e0 02             	shl    $0x2,%eax
f010434d:	01 c8                	add    %ecx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104354:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104357:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010435c:	89 c2                	mov    %eax,%edx
f010435e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104361:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104364:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104367:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010436c:	39 c2                	cmp    %eax,%edx
f010436e:	75 14                	jne    f0104384 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0104370:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104373:	83 ec 08             	sub    $0x8,%esp
f0104376:	50                   	push   %eax
f0104377:	ff 75 08             	pushl  0x8(%ebp)
f010437a:	e8 bf 00 00 00       	call   f010443e <env_page_ws_clear_entry>
f010437f:	83 c4 10             	add    $0x10,%esp
			break;
f0104382:	eb 10                	jmp    f0104394 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0104384:	ff 45 f4             	incl   -0xc(%ebp)
f0104387:	8b 45 08             	mov    0x8(%ebp),%eax
f010438a:	8b 50 74             	mov    0x74(%eax),%edx
f010438d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104390:	39 c2                	cmp    %eax,%edx
f0104392:	77 a7                	ja     f010433b <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0104394:	90                   	nop
f0104395:	c9                   	leave  
f0104396:	c3                   	ret    

f0104397 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0104397:	55                   	push   %ebp
f0104398:	89 e5                	mov    %esp,%ebp
f010439a:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f010439d:	8b 45 08             	mov    0x8(%ebp),%eax
f01043a0:	8b 40 74             	mov    0x74(%eax),%eax
f01043a3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01043a6:	77 19                	ja     f01043c1 <env_page_ws_set_entry+0x2a>
f01043a8:	68 0c 95 11 f0       	push   $0xf011950c
f01043ad:	68 42 95 11 f0       	push   $0xf0119542
f01043b2:	68 b3 03 00 00       	push   $0x3b3
f01043b7:	68 f5 93 11 f0       	push   $0xf01193f5
f01043bc:	e8 b5 bd ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01043c1:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01043c8:	76 19                	jbe    f01043e3 <env_page_ws_set_entry+0x4c>
f01043ca:	68 58 95 11 f0       	push   $0xf0119558
f01043cf:	68 42 95 11 f0       	push   $0xf0119542
f01043d4:	68 b4 03 00 00       	push   $0x3b4
f01043d9:	68 f5 93 11 f0       	push   $0xf01193f5
f01043de:	e8 93 bd ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01043e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e6:	8b 48 78             	mov    0x78(%eax),%ecx
f01043e9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043ec:	89 d0                	mov    %edx,%eax
f01043ee:	01 c0                	add    %eax,%eax
f01043f0:	01 d0                	add    %edx,%eax
f01043f2:	c1 e0 02             	shl    $0x2,%eax
f01043f5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01043f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01043fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104401:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104406:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 48 78             	mov    0x78(%eax),%ecx
f010440e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104411:	89 d0                	mov    %edx,%eax
f0104413:	01 c0                	add    %eax,%eax
f0104415:	01 d0                	add    %edx,%eax
f0104417:	c1 e0 02             	shl    $0x2,%eax
f010441a:	01 c8                	add    %ecx,%eax
f010441c:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0104420:	8b 45 08             	mov    0x8(%ebp),%eax
f0104423:	8b 48 78             	mov    0x78(%eax),%ecx
f0104426:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104429:	89 d0                	mov    %edx,%eax
f010442b:	01 c0                	add    %eax,%eax
f010442d:	01 d0                	add    %edx,%eax
f010442f:	c1 e0 02             	shl    $0x2,%eax
f0104432:	01 c8                	add    %ecx,%eax
f0104434:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010443b:	90                   	nop
}
f010443c:	c9                   	leave  
f010443d:	c3                   	ret    

f010443e <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010443e:	55                   	push   %ebp
f010443f:	89 e5                	mov    %esp,%ebp
f0104441:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104444:	8b 45 08             	mov    0x8(%ebp),%eax
f0104447:	8b 40 74             	mov    0x74(%eax),%eax
f010444a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010444d:	77 19                	ja     f0104468 <env_page_ws_clear_entry+0x2a>
f010444f:	68 8c 95 11 f0       	push   $0xf011958c
f0104454:	68 42 95 11 f0       	push   $0xf0119542
f0104459:	68 bf 03 00 00       	push   $0x3bf
f010445e:	68 f5 93 11 f0       	push   $0xf01193f5
f0104463:	e8 0e bd ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0104468:	8b 45 08             	mov    0x8(%ebp),%eax
f010446b:	8b 48 78             	mov    0x78(%eax),%ecx
f010446e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104471:	89 d0                	mov    %edx,%eax
f0104473:	01 c0                	add    %eax,%eax
f0104475:	01 d0                	add    %edx,%eax
f0104477:	c1 e0 02             	shl    $0x2,%eax
f010447a:	01 c8                	add    %ecx,%eax
f010447c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0104482:	8b 45 08             	mov    0x8(%ebp),%eax
f0104485:	8b 48 78             	mov    0x78(%eax),%ecx
f0104488:	8b 55 0c             	mov    0xc(%ebp),%edx
f010448b:	89 d0                	mov    %edx,%eax
f010448d:	01 c0                	add    %eax,%eax
f010448f:	01 d0                	add    %edx,%eax
f0104491:	c1 e0 02             	shl    $0x2,%eax
f0104494:	01 c8                	add    %ecx,%eax
f0104496:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	8b 48 78             	mov    0x78(%eax),%ecx
f01044a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044a3:	89 d0                	mov    %edx,%eax
f01044a5:	01 c0                	add    %eax,%eax
f01044a7:	01 d0                	add    %edx,%eax
f01044a9:	c1 e0 02             	shl    $0x2,%eax
f01044ac:	01 c8                	add    %ecx,%eax
f01044ae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01044b5:	90                   	nop
f01044b6:	c9                   	leave  
f01044b7:	c3                   	ret    

f01044b8 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01044b8:	55                   	push   %ebp
f01044b9:	89 e5                	mov    %esp,%ebp
f01044bb:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01044be:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c1:	8b 40 74             	mov    0x74(%eax),%eax
f01044c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01044c7:	77 19                	ja     f01044e2 <env_page_ws_get_virtual_address+0x2a>
f01044c9:	68 8c 95 11 f0       	push   $0xf011958c
f01044ce:	68 42 95 11 f0       	push   $0xf0119542
f01044d3:	68 c7 03 00 00       	push   $0x3c7
f01044d8:	68 f5 93 11 f0       	push   $0xf01193f5
f01044dd:	e8 94 bc ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01044e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e5:	8b 48 78             	mov    0x78(%eax),%ecx
f01044e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044eb:	89 d0                	mov    %edx,%eax
f01044ed:	01 c0                	add    %eax,%eax
f01044ef:	01 d0                	add    %edx,%eax
f01044f1:	c1 e0 02             	shl    $0x2,%eax
f01044f4:	01 c8                	add    %ecx,%eax
f01044f6:	8b 00                	mov    (%eax),%eax
f01044f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0104503:	c9                   	leave  
f0104504:	c3                   	ret    

f0104505 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104505:	55                   	push   %ebp
f0104506:	89 e5                	mov    %esp,%ebp
f0104508:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010450b:	8b 45 08             	mov    0x8(%ebp),%eax
f010450e:	8b 40 74             	mov    0x74(%eax),%eax
f0104511:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104514:	77 19                	ja     f010452f <env_page_ws_get_time_stamp+0x2a>
f0104516:	68 8c 95 11 f0       	push   $0xf011958c
f010451b:	68 42 95 11 f0       	push   $0xf0119542
f0104520:	68 cd 03 00 00       	push   $0x3cd
f0104525:	68 f5 93 11 f0       	push   $0xf01193f5
f010452a:	e8 47 bc ff ff       	call   f0100176 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010452f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104532:	8b 48 78             	mov    0x78(%eax),%ecx
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	89 d0                	mov    %edx,%eax
f010453a:	01 c0                	add    %eax,%eax
f010453c:	01 d0                	add    %edx,%eax
f010453e:	c1 e0 02             	shl    $0x2,%eax
f0104541:	01 c8                	add    %ecx,%eax
f0104543:	8b 40 08             	mov    0x8(%eax),%eax
}
f0104546:	c9                   	leave  
f0104547:	c3                   	ret    

f0104548 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104548:	55                   	push   %ebp
f0104549:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010454b:	8b 45 08             	mov    0x8(%ebp),%eax
f010454e:	8b 48 78             	mov    0x78(%eax),%ecx
f0104551:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104554:	89 d0                	mov    %edx,%eax
f0104556:	01 c0                	add    %eax,%eax
f0104558:	01 d0                	add    %edx,%eax
f010455a:	c1 e0 02             	shl    $0x2,%eax
f010455d:	01 c8                	add    %ecx,%eax
f010455f:	8a 40 04             	mov    0x4(%eax),%al
f0104562:	0f b6 c0             	movzbl %al,%eax
}
f0104565:	5d                   	pop    %ebp
f0104566:	c3                   	ret    

f0104567 <env_page_ws_print>:

void env_page_ws_print(struct Env *curenv)
{
f0104567:	55                   	push   %ebp
f0104568:	89 e5                	mov    %esp,%ebp
f010456a:	83 ec 28             	sub    $0x28,%esp
	uint32 i;
	cprintf("PAGE WS:\n");
f010456d:	83 ec 0c             	sub    $0xc,%esp
f0104570:	68 c4 95 11 f0       	push   $0xf01195c4
f0104575:	e8 1b 28 00 00       	call   f0106d95 <cprintf>
f010457a:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f010457d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104584:	e9 4e 01 00 00       	jmp    f01046d7 <env_page_ws_print+0x170>
	{
		if (curenv->ptr_pageWorkingSet[i].empty)
f0104589:	8b 45 08             	mov    0x8(%ebp),%eax
f010458c:	8b 48 78             	mov    0x78(%eax),%ecx
f010458f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104592:	89 d0                	mov    %edx,%eax
f0104594:	01 c0                	add    %eax,%eax
f0104596:	01 d0                	add    %edx,%eax
f0104598:	c1 e0 02             	shl    $0x2,%eax
f010459b:	01 c8                	add    %ecx,%eax
f010459d:	8a 40 04             	mov    0x4(%eax),%al
f01045a0:	84 c0                	test   %al,%al
f01045a2:	74 43                	je     f01045e7 <env_page_ws_print+0x80>
		{
			cprintf("EMPTY LOCATION");
f01045a4:	83 ec 0c             	sub    $0xc,%esp
f01045a7:	68 ce 95 11 f0       	push   $0xf01195ce
f01045ac:	e8 e4 27 00 00       	call   f0106d95 <cprintf>
f01045b1:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->page_last_WS_index )
f01045b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045b7:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01045bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01045c0:	75 10                	jne    f01045d2 <env_page_ws_print+0x6b>
			{
				cprintf("		<--");
f01045c2:	83 ec 0c             	sub    $0xc,%esp
f01045c5:	68 dd 95 11 f0       	push   $0xf01195dd
f01045ca:	e8 c6 27 00 00       	call   f0106d95 <cprintf>
f01045cf:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01045d2:	83 ec 0c             	sub    $0xc,%esp
f01045d5:	68 e3 95 11 f0       	push   $0xf01195e3
f01045da:	e8 b6 27 00 00       	call   f0106d95 <cprintf>
f01045df:	83 c4 10             	add    $0x10,%esp
			continue;
f01045e2:	e9 ed 00 00 00       	jmp    f01046d4 <env_page_ws_print+0x16d>
		}
		uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f01045e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01045ea:	8b 48 78             	mov    0x78(%eax),%ecx
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	89 d0                	mov    %edx,%eax
f01045f2:	01 c0                	add    %eax,%eax
f01045f4:	01 d0                	add    %edx,%eax
f01045f6:	c1 e0 02             	shl    $0x2,%eax
f01045f9:	01 c8                	add    %ecx,%eax
f01045fb:	8b 00                	mov    (%eax),%eax
f01045fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f0104600:	8b 45 08             	mov    0x8(%ebp),%eax
f0104603:	8b 48 78             	mov    0x78(%eax),%ecx
f0104606:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104609:	89 d0                	mov    %edx,%eax
f010460b:	01 c0                	add    %eax,%eax
f010460d:	01 d0                	add    %edx,%eax
f010460f:	c1 e0 02             	shl    $0x2,%eax
f0104612:	01 c8                	add    %ecx,%eax
f0104614:	8b 40 08             	mov    0x8(%eax),%eax
f0104617:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 perm = pt_get_page_permissions(curenv, virtual_address) ;
f010461a:	83 ec 08             	sub    $0x8,%esp
f010461d:	ff 75 f0             	pushl  -0x10(%ebp)
f0104620:	ff 75 08             	pushl  0x8(%ebp)
f0104623:	e8 e3 09 00 00       	call   f010500b <pt_get_page_permissions>
f0104628:	83 c4 10             	add    $0x10,%esp
f010462b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010462e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104631:	83 e0 40             	and    $0x40,%eax
f0104634:	85 c0                	test   %eax,%eax
f0104636:	0f 95 c0             	setne  %al
f0104639:	88 45 e7             	mov    %al,-0x19(%ebp)
		char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010463c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010463f:	83 e0 20             	and    $0x20,%eax
f0104642:	85 c0                	test   %eax,%eax
f0104644:	0f 95 c0             	setne  %al
f0104647:	88 45 e6             	mov    %al,-0x1a(%ebp)
		char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010464a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010464d:	25 00 02 00 00       	and    $0x200,%eax
f0104652:	85 c0                	test   %eax,%eax
f0104654:	0f 95 c0             	setne  %al
f0104657:	88 45 e5             	mov    %al,-0x1b(%ebp)


		cprintf("address @ %d = %x",i, curenv->ptr_pageWorkingSet[i].virtual_address);
f010465a:	8b 45 08             	mov    0x8(%ebp),%eax
f010465d:	8b 48 78             	mov    0x78(%eax),%ecx
f0104660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104663:	89 d0                	mov    %edx,%eax
f0104665:	01 c0                	add    %eax,%eax
f0104667:	01 d0                	add    %edx,%eax
f0104669:	c1 e0 02             	shl    $0x2,%eax
f010466c:	01 c8                	add    %ecx,%eax
f010466e:	8b 00                	mov    (%eax),%eax
f0104670:	83 ec 04             	sub    $0x4,%esp
f0104673:	50                   	push   %eax
f0104674:	ff 75 f4             	pushl  -0xc(%ebp)
f0104677:	68 e5 95 11 f0       	push   $0xf01195e5
f010467c:	e8 14 27 00 00       	call   f0106d95 <cprintf>
f0104681:	83 c4 10             	add    $0x10,%esp

		cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp) ;
f0104684:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f0104688:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f010468c:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f0104690:	83 ec 0c             	sub    $0xc,%esp
f0104693:	ff 75 ec             	pushl  -0x14(%ebp)
f0104696:	51                   	push   %ecx
f0104697:	52                   	push   %edx
f0104698:	50                   	push   %eax
f0104699:	68 f8 95 11 f0       	push   $0xf01195f8
f010469e:	e8 f2 26 00 00       	call   f0106d95 <cprintf>
f01046a3:	83 c4 20             	add    $0x20,%esp

		if(i==curenv->page_last_WS_index )
f01046a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a9:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01046af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046b2:	75 10                	jne    f01046c4 <env_page_ws_print+0x15d>
		{
			cprintf(" <--");
f01046b4:	83 ec 0c             	sub    $0xc,%esp
f01046b7:	68 2f 96 11 f0       	push   $0xf011962f
f01046bc:	e8 d4 26 00 00       	call   f0106d95 <cprintf>
f01046c1:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01046c4:	83 ec 0c             	sub    $0xc,%esp
f01046c7:	68 e3 95 11 f0       	push   $0xf01195e3
f01046cc:	e8 c4 26 00 00       	call   f0106d95 <cprintf>
f01046d1:	83 c4 10             	add    $0x10,%esp

void env_page_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("PAGE WS:\n");
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f01046d4:	ff 45 f4             	incl   -0xc(%ebp)
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 40 74             	mov    0x74(%eax),%eax
f01046dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046e0:	0f 87 a3 fe ff ff    	ja     f0104589 <env_page_ws_print+0x22>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01046e6:	90                   	nop
f01046e7:	c9                   	leave  
f01046e8:	c3                   	ret    

f01046e9 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *curenv)
{
f01046e9:	55                   	push   %ebp
f01046ea:	89 e5                	mov    %esp,%ebp
f01046ec:	53                   	push   %ebx
f01046ed:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01046f0:	83 ec 0c             	sub    $0xc,%esp
f01046f3:	68 34 96 11 f0       	push   $0xf0119634
f01046f8:	e8 98 26 00 00       	call   f0106d95 <cprintf>
f01046fd:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0104700:	83 ec 0c             	sub    $0xc,%esp
f0104703:	68 69 96 11 f0       	push   $0xf0119669
f0104708:	e8 88 26 00 00       	call   f0106d95 <cprintf>
f010470d:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104710:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104717:	e9 0c 01 00 00       	jmp    f0104828 <env_table_ws_print+0x13f>
	{
		if (curenv->__ptr_tws[i].empty)
f010471c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010471f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104722:	89 d0                	mov    %edx,%eax
f0104724:	01 c0                	add    %eax,%eax
f0104726:	01 d0                	add    %edx,%eax
f0104728:	c1 e0 02             	shl    $0x2,%eax
f010472b:	01 c8                	add    %ecx,%eax
f010472d:	83 e8 80             	sub    $0xffffff80,%eax
f0104730:	8a 00                	mov    (%eax),%al
f0104732:	84 c0                	test   %al,%al
f0104734:	74 43                	je     f0104779 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0104736:	83 ec 0c             	sub    $0xc,%esp
f0104739:	68 ce 95 11 f0       	push   $0xf01195ce
f010473e:	e8 52 26 00 00       	call   f0106d95 <cprintf>
f0104743:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->table_last_WS_index )
f0104746:	8b 45 08             	mov    0x8(%ebp),%eax
f0104749:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f010474f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104752:	75 10                	jne    f0104764 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0104754:	83 ec 0c             	sub    $0xc,%esp
f0104757:	68 dd 95 11 f0       	push   $0xf01195dd
f010475c:	e8 34 26 00 00       	call   f0106d95 <cprintf>
f0104761:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0104764:	83 ec 0c             	sub    $0xc,%esp
f0104767:	68 e3 95 11 f0       	push   $0xf01195e3
f010476c:	e8 24 26 00 00       	call   f0106d95 <cprintf>
f0104771:	83 c4 10             	add    $0x10,%esp
			continue;
f0104774:	e9 ac 00 00 00       	jmp    f0104825 <env_table_ws_print+0x13c>
		}
		uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f0104779:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010477c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010477f:	89 d0                	mov    %edx,%eax
f0104781:	01 c0                	add    %eax,%eax
f0104783:	01 d0                	add    %edx,%eax
f0104785:	c1 e0 02             	shl    $0x2,%eax
f0104788:	01 c8                	add    %ecx,%eax
f010478a:	83 c0 7c             	add    $0x7c,%eax
f010478d:	8b 00                	mov    (%eax),%eax
f010478f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, curenv->__ptr_tws[i].virtual_address);
f0104792:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104795:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104798:	89 d0                	mov    %edx,%eax
f010479a:	01 c0                	add    %eax,%eax
f010479c:	01 d0                	add    %edx,%eax
f010479e:	c1 e0 02             	shl    $0x2,%eax
f01047a1:	01 c8                	add    %ecx,%eax
f01047a3:	83 c0 7c             	add    $0x7c,%eax
f01047a6:	8b 00                	mov    (%eax),%eax
f01047a8:	83 ec 04             	sub    $0x4,%esp
f01047ab:	50                   	push   %eax
f01047ac:	ff 75 f4             	pushl  -0xc(%ebp)
f01047af:	68 74 96 11 f0       	push   $0xf0119674
f01047b4:	e8 dc 25 00 00       	call   f0106d95 <cprintf>
f01047b9:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(curenv, virtual_address), curenv->__ptr_tws[i].time_stamp);
f01047bc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047c2:	89 d0                	mov    %edx,%eax
f01047c4:	01 c0                	add    %eax,%eax
f01047c6:	01 d0                	add    %edx,%eax
f01047c8:	c1 e0 02             	shl    $0x2,%eax
f01047cb:	01 c8                	add    %ecx,%eax
f01047cd:	05 84 00 00 00       	add    $0x84,%eax
f01047d2:	8b 18                	mov    (%eax),%ebx
f01047d4:	83 ec 08             	sub    $0x8,%esp
f01047d7:	ff 75 f0             	pushl  -0x10(%ebp)
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 29 04 00 00       	call   f0104c0b <pd_is_table_used>
f01047e2:	83 c4 10             	add    $0x10,%esp
f01047e5:	83 ec 04             	sub    $0x4,%esp
f01047e8:	53                   	push   %ebx
f01047e9:	50                   	push   %eax
f01047ea:	68 8c 96 11 f0       	push   $0xf011968c
f01047ef:	e8 a1 25 00 00       	call   f0106d95 <cprintf>
f01047f4:	83 c4 10             	add    $0x10,%esp
		if(i==curenv->table_last_WS_index )
f01047f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01047fa:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104800:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104803:	75 10                	jne    f0104815 <env_table_ws_print+0x12c>
		{
			cprintf(" <--");
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	68 2f 96 11 f0       	push   $0xf011962f
f010480d:	e8 83 25 00 00       	call   f0106d95 <cprintf>
f0104812:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0104815:	83 ec 0c             	sub    $0xc,%esp
f0104818:	68 e3 95 11 f0       	push   $0xf01195e3
f010481d:	e8 73 25 00 00       	call   f0106d95 <cprintf>
f0104822:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104825:	ff 45 f4             	incl   -0xc(%ebp)
f0104828:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010482c:	0f 86 ea fe ff ff    	jbe    f010471c <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0104832:	90                   	nop
f0104833:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104836:	c9                   	leave  
f0104837:	c3                   	ret    

f0104838 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0104838:	55                   	push   %ebp
f0104839:	89 e5                	mov    %esp,%ebp
f010483b:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010483e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0104845:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010484c:	eb 20                	jmp    f010486e <env_table_ws_get_size+0x36>
f010484e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104851:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104854:	89 d0                	mov    %edx,%eax
f0104856:	01 c0                	add    %eax,%eax
f0104858:	01 d0                	add    %edx,%eax
f010485a:	c1 e0 02             	shl    $0x2,%eax
f010485d:	01 c8                	add    %ecx,%eax
f010485f:	83 e8 80             	sub    $0xffffff80,%eax
f0104862:	8a 00                	mov    (%eax),%al
f0104864:	84 c0                	test   %al,%al
f0104866:	75 03                	jne    f010486b <env_table_ws_get_size+0x33>
f0104868:	ff 45 f8             	incl   -0x8(%ebp)
f010486b:	ff 45 fc             	incl   -0x4(%ebp)
f010486e:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0104872:	7e da                	jle    f010484e <env_table_ws_get_size+0x16>
	return counter;
f0104874:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104877:	c9                   	leave  
f0104878:	c3                   	ret    

f0104879 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0104879:	55                   	push   %ebp
f010487a:	89 e5                	mov    %esp,%ebp
f010487c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010487f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0104886:	eb 4c                	jmp    f01048d4 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0104888:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010488b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010488e:	89 d0                	mov    %edx,%eax
f0104890:	01 c0                	add    %eax,%eax
f0104892:	01 d0                	add    %edx,%eax
f0104894:	c1 e0 02             	shl    $0x2,%eax
f0104897:	01 c8                	add    %ecx,%eax
f0104899:	83 c0 7c             	add    $0x7c,%eax
f010489c:	8b 00                	mov    (%eax),%eax
f010489e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048a4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048a9:	89 c2                	mov    %eax,%edx
f01048ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01048ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048b4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048b9:	39 c2                	cmp    %eax,%edx
f01048bb:	75 14                	jne    f01048d1 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01048bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c0:	83 ec 08             	sub    $0x8,%esp
f01048c3:	50                   	push   %eax
f01048c4:	ff 75 08             	pushl  0x8(%ebp)
f01048c7:	e8 b8 00 00 00       	call   f0104984 <env_table_ws_clear_entry>
f01048cc:	83 c4 10             	add    $0x10,%esp
			break;
f01048cf:	eb 09                	jmp    f01048da <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01048d1:	ff 45 f4             	incl   -0xc(%ebp)
f01048d4:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01048d8:	7e ae                	jle    f0104888 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01048da:	90                   	nop
f01048db:	c9                   	leave  
f01048dc:	c3                   	ret    

f01048dd <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01048dd:	55                   	push   %ebp
f01048de:	89 e5                	mov    %esp,%ebp
f01048e0:	53                   	push   %ebx
f01048e1:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01048e4:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01048e8:	76 19                	jbe    f0104903 <env_table_ws_set_entry+0x26>
f01048ea:	68 b0 96 11 f0       	push   $0xf01196b0
f01048ef:	68 42 95 11 f0       	push   $0xf0119542
f01048f4:	68 30 04 00 00       	push   $0x430
f01048f9:	68 f5 93 11 f0       	push   $0xf01193f5
f01048fe:	e8 73 b8 ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0104903:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010490a:	76 19                	jbe    f0104925 <env_table_ws_set_entry+0x48>
f010490c:	68 58 95 11 f0       	push   $0xf0119558
f0104911:	68 42 95 11 f0       	push   $0xf0119542
f0104916:	68 31 04 00 00       	push   $0x431
f010491b:	68 f5 93 11 f0       	push   $0xf01193f5
f0104920:	e8 51 b8 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0104925:	8b 45 10             	mov    0x10(%ebp),%eax
f0104928:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010492b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010492e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104933:	89 c1                	mov    %eax,%ecx
f0104935:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0104938:	8b 55 0c             	mov    0xc(%ebp),%edx
f010493b:	89 d0                	mov    %edx,%eax
f010493d:	01 c0                	add    %eax,%eax
f010493f:	01 d0                	add    %edx,%eax
f0104941:	c1 e0 02             	shl    $0x2,%eax
f0104944:	01 d8                	add    %ebx,%eax
f0104946:	83 c0 7c             	add    $0x7c,%eax
f0104949:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f010494b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010494e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104951:	89 d0                	mov    %edx,%eax
f0104953:	01 c0                	add    %eax,%eax
f0104955:	01 d0                	add    %edx,%eax
f0104957:	c1 e0 02             	shl    $0x2,%eax
f010495a:	01 c8                	add    %ecx,%eax
f010495c:	83 e8 80             	sub    $0xffffff80,%eax
f010495f:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0104962:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104965:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104968:	89 d0                	mov    %edx,%eax
f010496a:	01 c0                	add    %eax,%eax
f010496c:	01 d0                	add    %edx,%eax
f010496e:	c1 e0 02             	shl    $0x2,%eax
f0104971:	01 c8                	add    %ecx,%eax
f0104973:	05 84 00 00 00       	add    $0x84,%eax
f0104978:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010497e:	90                   	nop
}
f010497f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104982:	c9                   	leave  
f0104983:	c3                   	ret    

f0104984 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0104984:	55                   	push   %ebp
f0104985:	89 e5                	mov    %esp,%ebp
f0104987:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010498a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010498e:	76 19                	jbe    f01049a9 <env_table_ws_clear_entry+0x25>
f0104990:	68 b0 96 11 f0       	push   $0xf01196b0
f0104995:	68 42 95 11 f0       	push   $0xf0119542
f010499a:	68 3c 04 00 00       	push   $0x43c
f010499f:	68 f5 93 11 f0       	push   $0xf01193f5
f01049a4:	e8 cd b7 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01049a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049ac:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049af:	89 d0                	mov    %edx,%eax
f01049b1:	01 c0                	add    %eax,%eax
f01049b3:	01 d0                	add    %edx,%eax
f01049b5:	c1 e0 02             	shl    $0x2,%eax
f01049b8:	01 c8                	add    %ecx,%eax
f01049ba:	83 c0 7c             	add    $0x7c,%eax
f01049bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01049c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049c9:	89 d0                	mov    %edx,%eax
f01049cb:	01 c0                	add    %eax,%eax
f01049cd:	01 d0                	add    %edx,%eax
f01049cf:	c1 e0 02             	shl    $0x2,%eax
f01049d2:	01 c8                	add    %ecx,%eax
f01049d4:	83 e8 80             	sub    $0xffffff80,%eax
f01049d7:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01049da:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049dd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049e0:	89 d0                	mov    %edx,%eax
f01049e2:	01 c0                	add    %eax,%eax
f01049e4:	01 d0                	add    %edx,%eax
f01049e6:	c1 e0 02             	shl    $0x2,%eax
f01049e9:	01 c8                	add    %ecx,%eax
f01049eb:	05 84 00 00 00       	add    $0x84,%eax
f01049f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01049f6:	90                   	nop
f01049f7:	c9                   	leave  
f01049f8:	c3                   	ret    

f01049f9 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01049f9:	55                   	push   %ebp
f01049fa:	89 e5                	mov    %esp,%ebp
f01049fc:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01049ff:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a03:	76 19                	jbe    f0104a1e <env_table_ws_get_virtual_address+0x25>
f0104a05:	68 b0 96 11 f0       	push   $0xf01196b0
f0104a0a:	68 42 95 11 f0       	push   $0xf0119542
f0104a0f:	68 44 04 00 00       	push   $0x444
f0104a14:	68 f5 93 11 f0       	push   $0xf01193f5
f0104a19:	e8 58 b7 ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0104a1e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a24:	89 d0                	mov    %edx,%eax
f0104a26:	01 c0                	add    %eax,%eax
f0104a28:	01 d0                	add    %edx,%eax
f0104a2a:	c1 e0 02             	shl    $0x2,%eax
f0104a2d:	01 c8                	add    %ecx,%eax
f0104a2f:	83 c0 7c             	add    $0x7c,%eax
f0104a32:	8b 00                	mov    (%eax),%eax
f0104a34:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a3a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0104a3f:	c9                   	leave  
f0104a40:	c3                   	ret    

f0104a41 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104a41:	55                   	push   %ebp
f0104a42:	89 e5                	mov    %esp,%ebp
f0104a44:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104a47:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a4b:	76 19                	jbe    f0104a66 <env_table_ws_get_time_stamp+0x25>
f0104a4d:	68 b0 96 11 f0       	push   $0xf01196b0
f0104a52:	68 42 95 11 f0       	push   $0xf0119542
f0104a57:	68 4b 04 00 00       	push   $0x44b
f0104a5c:	68 f5 93 11 f0       	push   $0xf01193f5
f0104a61:	e8 10 b7 ff ff       	call   f0100176 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0104a66:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a6c:	89 d0                	mov    %edx,%eax
f0104a6e:	01 c0                	add    %eax,%eax
f0104a70:	01 d0                	add    %edx,%eax
f0104a72:	c1 e0 02             	shl    $0x2,%eax
f0104a75:	01 c8                	add    %ecx,%eax
f0104a77:	05 84 00 00 00       	add    $0x84,%eax
f0104a7c:	8b 00                	mov    (%eax),%eax
}
f0104a7e:	c9                   	leave  
f0104a7f:	c3                   	ret    

f0104a80 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104a80:	55                   	push   %ebp
f0104a81:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0104a83:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a89:	89 d0                	mov    %edx,%eax
f0104a8b:	01 c0                	add    %eax,%eax
f0104a8d:	01 d0                	add    %edx,%eax
f0104a8f:	c1 e0 02             	shl    $0x2,%eax
f0104a92:	01 c8                	add    %ecx,%eax
f0104a94:	83 e8 80             	sub    $0xffffff80,%eax
f0104a97:	8a 00                	mov    (%eax),%al
f0104a99:	0f b6 c0             	movzbl %al,%eax
}
f0104a9c:	5d                   	pop    %ebp
f0104a9d:	c3                   	ret    

f0104a9e <addTableToTableWorkingSet>:

void addTableToTableWorkingSet(struct Env *e, uint32 tableAddress)
{
f0104a9e:	55                   	push   %ebp
f0104a9f:	89 e5                	mov    %esp,%ebp
f0104aa1:	83 ec 10             	sub    $0x10,%esp
	tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE*1024);
f0104aa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104aa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104aaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104aad:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104ab2:	89 45 0c             	mov    %eax,0xc(%ebp)
	e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f0104ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ab8:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104abe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104ac1:	89 d0                	mov    %edx,%eax
f0104ac3:	01 c0                	add    %eax,%eax
f0104ac5:	01 d0                	add    %edx,%eax
f0104ac7:	c1 e0 02             	shl    $0x2,%eax
f0104aca:	01 c8                	add    %ecx,%eax
f0104acc:	8d 50 7c             	lea    0x7c(%eax),%edx
f0104acf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ad2:	89 02                	mov    %eax,(%edx)
	e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0104ad4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ad7:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104add:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104ae0:	89 d0                	mov    %edx,%eax
f0104ae2:	01 c0                	add    %eax,%eax
f0104ae4:	01 d0                	add    %edx,%eax
f0104ae6:	c1 e0 02             	shl    $0x2,%eax
f0104ae9:	01 c8                	add    %ecx,%eax
f0104aeb:	83 e8 80             	sub    $0xffffff80,%eax
f0104aee:	c6 00 00             	movb   $0x0,(%eax)
	e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0104af1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af4:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104afa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104afd:	89 d0                	mov    %edx,%eax
f0104aff:	01 c0                	add    %eax,%eax
f0104b01:	01 d0                	add    %edx,%eax
f0104b03:	c1 e0 02             	shl    $0x2,%eax
f0104b06:	01 c8                	add    %ecx,%eax
f0104b08:	05 84 00 00 00       	add    $0x84,%eax
f0104b0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//e->__ptr_tws[e->table_last_WS_index].time_stamp = time;

	e->table_last_WS_index ++;
f0104b13:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b16:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b1c:	8d 50 01             	lea    0x1(%eax),%edx
f0104b1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b22:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104b28:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2b:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b31:	b9 32 00 00 00       	mov    $0x32,%ecx
f0104b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0104b3b:	f7 f1                	div    %ecx
f0104b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b40:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
}
f0104b46:	90                   	nop
f0104b47:	c9                   	leave  
f0104b48:	c3                   	ret    

f0104b49 <bufferList_add_page>:
///****************************************************************************************///
///******************************* PAGE BUFFERING FUNCTIONS ******************************///
///****************************************************************************************///

void bufferList_add_page(struct Linked_List* bufferList,struct Frame_Info *ptr_frame_info)
{
f0104b49:	55                   	push   %ebp
f0104b4a:	89 e5                	mov    %esp,%ebp

		LIST_INSERT_TAIL(bufferList, ptr_frame_info);
f0104b4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4f:	8b 50 04             	mov    0x4(%eax),%edx
f0104b52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b55:	89 50 04             	mov    %edx,0x4(%eax)
f0104b58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b5b:	8b 40 04             	mov    0x4(%eax),%eax
f0104b5e:	85 c0                	test   %eax,%eax
f0104b60:	74 0d                	je     f0104b6f <bufferList_add_page+0x26>
f0104b62:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b65:	8b 40 04             	mov    0x4(%eax),%eax
f0104b68:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b6b:	89 10                	mov    %edx,(%eax)
f0104b6d:	eb 08                	jmp    f0104b77 <bufferList_add_page+0x2e>
f0104b6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b75:	89 10                	mov    %edx,(%eax)
f0104b77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b7a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104b7d:	89 50 04             	mov    %edx,0x4(%eax)
f0104b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104b89:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b8c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104b8f:	8d 50 01             	lea    0x1(%eax),%edx
f0104b92:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b95:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104b98:	90                   	nop
f0104b99:	5d                   	pop    %ebp
f0104b9a:	c3                   	ret    

f0104b9b <bufferlist_remove_page>:
void bufferlist_remove_page(struct Linked_List* bufferList, struct Frame_Info *ptr_frame_info)
{
f0104b9b:	55                   	push   %ebp
f0104b9c:	89 e5                	mov    %esp,%ebp
	LIST_REMOVE(bufferList, ptr_frame_info);
f0104b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ba1:	8b 00                	mov    (%eax),%eax
f0104ba3:	85 c0                	test   %eax,%eax
f0104ba5:	74 10                	je     f0104bb7 <bufferlist_remove_page+0x1c>
f0104ba7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104baa:	8b 00                	mov    (%eax),%eax
f0104bac:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104baf:	8b 52 04             	mov    0x4(%edx),%edx
f0104bb2:	89 50 04             	mov    %edx,0x4(%eax)
f0104bb5:	eb 0c                	jmp    f0104bc3 <bufferlist_remove_page+0x28>
f0104bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bba:	8b 50 04             	mov    0x4(%eax),%edx
f0104bbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bc0:	89 50 04             	mov    %edx,0x4(%eax)
f0104bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bc6:	8b 40 04             	mov    0x4(%eax),%eax
f0104bc9:	85 c0                	test   %eax,%eax
f0104bcb:	74 0f                	je     f0104bdc <bufferlist_remove_page+0x41>
f0104bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bd0:	8b 40 04             	mov    0x4(%eax),%eax
f0104bd3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bd6:	8b 12                	mov    (%edx),%edx
f0104bd8:	89 10                	mov    %edx,(%eax)
f0104bda:	eb 0a                	jmp    f0104be6 <bufferlist_remove_page+0x4b>
f0104bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bdf:	8b 10                	mov    (%eax),%edx
f0104be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be4:	89 10                	mov    %edx,(%eax)
f0104be6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104be9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104bef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bf2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104bf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfc:	8b 40 0c             	mov    0xc(%eax),%eax
f0104bff:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104c02:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c05:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104c08:	90                   	nop
f0104c09:	5d                   	pop    %ebp
f0104c0a:	c3                   	ret    

f0104c0b <pd_is_table_used>:

///============================================================================================
/// Dealing with page and page table entry flags

inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
{
f0104c0b:	55                   	push   %ebp
f0104c0c:	89 e5                	mov    %esp,%ebp
	return ( (ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0104c0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c11:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c17:	c1 ea 16             	shr    $0x16,%edx
f0104c1a:	c1 e2 02             	shl    $0x2,%edx
f0104c1d:	01 d0                	add    %edx,%eax
f0104c1f:	8b 00                	mov    (%eax),%eax
f0104c21:	83 e0 20             	and    $0x20,%eax
f0104c24:	85 c0                	test   %eax,%eax
f0104c26:	0f 95 c0             	setne  %al
f0104c29:	0f b6 c0             	movzbl %al,%eax
}
f0104c2c:	5d                   	pop    %ebp
f0104c2d:	c3                   	ret    

f0104c2e <pd_set_table_unused>:

inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
{
f0104c2e:	55                   	push   %ebp
f0104c2f:	89 e5                	mov    %esp,%ebp
f0104c31:	83 ec 08             	sub    $0x8,%esp
	ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0104c34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c37:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c3d:	c1 ea 16             	shr    $0x16,%edx
f0104c40:	c1 e2 02             	shl    $0x2,%edx
f0104c43:	01 c2                	add    %eax,%edx
f0104c45:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c48:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c4b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104c4e:	c1 e9 16             	shr    $0x16,%ecx
f0104c51:	c1 e1 02             	shl    $0x2,%ecx
f0104c54:	01 c8                	add    %ecx,%eax
f0104c56:	8b 00                	mov    (%eax),%eax
f0104c58:	83 e0 df             	and    $0xffffffdf,%eax
f0104c5b:	89 02                	mov    %eax,(%edx)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c60:	83 ec 08             	sub    $0x8,%esp
f0104c63:	50                   	push   %eax
f0104c64:	6a 00                	push   $0x0
f0104c66:	e8 a4 e2 ff ff       	call   f0102f0f <tlb_invalidate>
f0104c6b:	83 c4 10             	add    $0x10,%esp
}
f0104c6e:	90                   	nop
f0104c6f:	c9                   	leave  
f0104c70:	c3                   	ret    

f0104c71 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 10             	sub    $0x10,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	ptr_pgdir[PDX(virtual_address)] = 0 ;
f0104c80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c83:	c1 e8 16             	shr    $0x16,%eax
f0104c86:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104c8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104c90:	01 d0                	add    %edx,%eax
f0104c92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104c98:	0f 20 d8             	mov    %cr3,%eax
f0104c9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104c9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ca1:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104ca4:	90                   	nop
f0104ca5:	c9                   	leave  
f0104ca6:	c3                   	ret    

f0104ca7 <pt_set_page_permissions>:

extern int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

inline void pt_set_page_permissions(struct Env* ptr_env, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0104ca7:	55                   	push   %ebp
f0104ca8:	89 e5                	mov    %esp,%ebp
f0104caa:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104cad:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cb0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104cb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104cb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104cb9:	c1 e8 16             	shr    $0x16,%eax
f0104cbc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cc6:	01 d0                	add    %edx,%eax
f0104cc8:	8b 00                	mov    (%eax),%eax
f0104cca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104ccd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104cd0:	83 e0 01             	and    $0x1,%eax
f0104cd3:	85 c0                	test   %eax,%eax
f0104cd5:	0f 84 d6 00 00 00    	je     f0104db1 <pt_set_page_permissions+0x10a>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104cdb:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104ce2:	77 19                	ja     f0104cfd <pt_set_page_permissions+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104ce4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ce7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104cec:	83 ec 0c             	sub    $0xc,%esp
f0104cef:	50                   	push   %eax
f0104cf0:	e8 a2 6e 00 00       	call   f010bb97 <kheap_virtual_address>
f0104cf5:	83 c4 10             	add    $0x10,%esp
f0104cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cfb:	eb 40                	jmp    f0104d3d <pt_set_page_permissions+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104cfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d00:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d05:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104d08:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d0b:	c1 e8 0c             	shr    $0xc,%eax
f0104d0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104d11:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0104d16:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104d19:	72 17                	jb     f0104d32 <pt_set_page_permissions+0x8b>
f0104d1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0104d1e:	68 1c 94 11 f0       	push   $0xf011941c
f0104d23:	68 9c 04 00 00       	push   $0x49c
f0104d28:	68 f5 93 11 f0       	push   $0xf01193f5
f0104d2d:	e8 44 b4 ff ff       	call   f0100176 <_panic>
f0104d32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104d3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d40:	c1 e8 0c             	shr    $0xc,%eax
f0104d43:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d52:	01 c2                	add    %eax,%edx
f0104d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d57:	c1 e8 0c             	shr    $0xc,%eax
f0104d5a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d5f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d69:	01 c8                	add    %ecx,%eax
f0104d6b:	8b 00                	mov    (%eax),%eax
f0104d6d:	0b 45 10             	or     0x10(%ebp),%eax
f0104d70:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104d72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d75:	c1 e8 0c             	shr    $0xc,%eax
f0104d78:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d87:	01 d0                	add    %edx,%eax
f0104d89:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104d8c:	c1 ea 0c             	shr    $0xc,%edx
f0104d8f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104d95:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104d9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d9f:	01 ca                	add    %ecx,%edx
f0104da1:	8b 12                	mov    (%edx),%edx
f0104da3:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104da6:	f7 d1                	not    %ecx
f0104da8:	21 ca                	and    %ecx,%edx
f0104daa:	89 10                	mov    %edx,(%eax)
f0104dac:	e9 e8 00 00 00       	jmp    f0104e99 <pt_set_page_permissions+0x1f2>

	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104db1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104db5:	0f 84 c7 00 00 00    	je     f0104e82 <pt_set_page_permissions+0x1db>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104dbb:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104dc0:	83 ec 04             	sub    $0x4,%esp
f0104dc3:	50                   	push   %eax
f0104dc4:	ff 75 0c             	pushl  0xc(%ebp)
f0104dc7:	ff 75 08             	pushl  0x8(%ebp)
f0104dca:	e8 88 6a 00 00       	call   f010b857 <__pf_read_env_table>
f0104dcf:	83 c4 10             	add    $0x10,%esp
f0104dd2:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104dd5:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104dda:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104ddd:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104de1:	75 17                	jne    f0104dfa <pt_set_page_permissions+0x153>
			panic("pt_set_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f0104de3:	83 ec 04             	sub    $0x4,%esp
f0104de6:	68 e4 96 11 f0       	push   $0xf01196e4
f0104deb:	68 aa 04 00 00       	push   $0x4aa
f0104df0:	68 f5 93 11 f0       	push   $0xf01193f5
f0104df5:	e8 7c b3 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104dfd:	c1 e8 0c             	shr    $0xc,%eax
f0104e00:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e0f:	01 c2                	add    %eax,%edx
f0104e11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e14:	c1 e8 0c             	shr    $0xc,%eax
f0104e17:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e1c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104e23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e26:	01 c8                	add    %ecx,%eax
f0104e28:	8b 00                	mov    (%eax),%eax
f0104e2a:	0b 45 10             	or     0x10(%ebp),%eax
f0104e2d:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104e2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e32:	c1 e8 0c             	shr    $0xc,%eax
f0104e35:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e44:	01 d0                	add    %edx,%eax
f0104e46:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e49:	c1 ea 0c             	shr    $0xc,%edx
f0104e4c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104e52:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104e59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e5c:	01 ca                	add    %ecx,%edx
f0104e5e:	8b 12                	mov    (%edx),%edx
f0104e60:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104e63:	f7 d1                	not    %ecx
f0104e65:	21 ca                	and    %ecx,%edx
f0104e67:	89 10                	mov    %edx,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104e69:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104e6e:	83 ec 04             	sub    $0x4,%esp
f0104e71:	50                   	push   %eax
f0104e72:	ff 75 0c             	pushl  0xc(%ebp)
f0104e75:	ff 75 08             	pushl  0x8(%ebp)
f0104e78:	e8 35 69 00 00       	call   f010b7b2 <__pf_write_env_table>
f0104e7d:	83 c4 10             	add    $0x10,%esp
f0104e80:	eb 17                	jmp    f0104e99 <pt_set_page_permissions+0x1f2>
	}
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104e82:	83 ec 04             	sub    $0x4,%esp
f0104e85:	68 60 97 11 f0       	push   $0xf0119760
f0104e8a:	68 b4 04 00 00       	push   $0x4b4
f0104e8f:	68 f5 93 11 f0       	push   $0xf01193f5
f0104e94:	e8 dd b2 ff ff       	call   f0100176 <_panic>
	}

	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104e99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e9c:	83 ec 08             	sub    $0x8,%esp
f0104e9f:	50                   	push   %eax
f0104ea0:	6a 00                	push   $0x0
f0104ea2:	e8 68 e0 ff ff       	call   f0102f0f <tlb_invalidate>
f0104ea7:	83 c4 10             	add    $0x10,%esp
}
f0104eaa:	90                   	nop
f0104eab:	c9                   	leave  
f0104eac:	c3                   	ret    

f0104ead <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104ead:	55                   	push   %ebp
f0104eae:	89 e5                	mov    %esp,%ebp
f0104eb0:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104eb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104eb6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104eb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104ebc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ebf:	c1 e8 16             	shr    $0x16,%eax
f0104ec2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104ec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ecc:	01 d0                	add    %edx,%eax
f0104ece:	8b 00                	mov    (%eax),%eax
f0104ed0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104ed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ed6:	83 e0 01             	and    $0x1,%eax
f0104ed9:	85 c0                	test   %eax,%eax
f0104edb:	0f 84 84 00 00 00    	je     f0104f65 <pt_clear_page_table_entry+0xb8>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104ee1:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104ee8:	77 19                	ja     f0104f03 <pt_clear_page_table_entry+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104eea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104eed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104ef2:	83 ec 0c             	sub    $0xc,%esp
f0104ef5:	50                   	push   %eax
f0104ef6:	e8 9c 6c 00 00       	call   f010bb97 <kheap_virtual_address>
f0104efb:	83 c4 10             	add    $0x10,%esp
f0104efe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f01:	eb 40                	jmp    f0104f43 <pt_clear_page_table_entry+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104f03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104f0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104f0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f11:	c1 e8 0c             	shr    $0xc,%eax
f0104f14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104f17:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0104f1c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104f1f:	72 17                	jb     f0104f38 <pt_clear_page_table_entry+0x8b>
f0104f21:	ff 75 e8             	pushl  -0x18(%ebp)
f0104f24:	68 1c 94 11 f0       	push   $0xf011941c
f0104f29:	68 ca 04 00 00       	push   $0x4ca
f0104f2e:	68 f5 93 11 f0       	push   $0xf01193f5
f0104f33:	e8 3e b2 ff ff       	call   f0100176 <_panic>
f0104f38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f3b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104f40:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104f43:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f46:	c1 e8 0c             	shr    $0xc,%eax
f0104f49:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104f4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f58:	01 d0                	add    %edx,%eax
f0104f5a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f60:	e9 92 00 00 00       	jmp    f0104ff7 <pt_clear_page_table_entry+0x14a>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104f65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104f69:	74 75                	je     f0104fe0 <pt_clear_page_table_entry+0x133>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory

		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104f6b:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104f70:	83 ec 04             	sub    $0x4,%esp
f0104f73:	50                   	push   %eax
f0104f74:	ff 75 0c             	pushl  0xc(%ebp)
f0104f77:	ff 75 08             	pushl  0x8(%ebp)
f0104f7a:	e8 d8 68 00 00       	call   f010b857 <__pf_read_env_table>
f0104f7f:	83 c4 10             	add    $0x10,%esp
f0104f82:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104f85:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104f8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104f8d:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104f91:	75 17                	jne    f0104faa <pt_clear_page_table_entry+0xfd>
			panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0104f93:	83 ec 04             	sub    $0x4,%esp
f0104f96:	68 d4 97 11 f0       	push   $0xf01197d4
f0104f9b:	68 d8 04 00 00       	push   $0x4d8
f0104fa0:	68 f5 93 11 f0       	push   $0xf01193f5
f0104fa5:	e8 cc b1 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104faa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fad:	c1 e8 0c             	shr    $0xc,%eax
f0104fb0:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104fb5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fbf:	01 d0                	add    %edx,%eax
f0104fc1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104fc7:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0104fcc:	83 ec 04             	sub    $0x4,%esp
f0104fcf:	50                   	push   %eax
f0104fd0:	ff 75 0c             	pushl  0xc(%ebp)
f0104fd3:	ff 75 08             	pushl  0x8(%ebp)
f0104fd6:	e8 d7 67 00 00       	call   f010b7b2 <__pf_write_env_table>
f0104fdb:	83 c4 10             	add    $0x10,%esp
f0104fde:	eb 17                	jmp    f0104ff7 <pt_clear_page_table_entry+0x14a>
	}
	else
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104fe0:	83 ec 04             	sub    $0x4,%esp
f0104fe3:	68 54 98 11 f0       	push   $0xf0119854
f0104fe8:	68 df 04 00 00       	push   $0x4df
f0104fed:	68 f5 93 11 f0       	push   $0xf01193f5
f0104ff2:	e8 7f b1 ff ff       	call   f0100176 <_panic>


	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ffa:	83 ec 08             	sub    $0x8,%esp
f0104ffd:	50                   	push   %eax
f0104ffe:	6a 00                	push   $0x0
f0105000:	e8 0a df ff ff       	call   f0102f0f <tlb_invalidate>
f0105005:	83 c4 10             	add    $0x10,%esp
}
f0105008:	90                   	nop
f0105009:	c9                   	leave  
f010500a:	c3                   	ret    

f010500b <pt_get_page_permissions>:

inline uint32 pt_get_page_permissions(struct Env* ptr_env, uint32 virtual_address )
{
f010500b:	55                   	push   %ebp
f010500c:	89 e5                	mov    %esp,%ebp
f010500e:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0105011:	8b 45 08             	mov    0x8(%ebp),%eax
f0105014:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105017:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f010501a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010501d:	c1 e8 16             	shr    $0x16,%eax
f0105020:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105027:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010502a:	01 d0                	add    %edx,%eax
f010502c:	8b 00                	mov    (%eax),%eax
f010502e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0105031:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105034:	83 e0 01             	and    $0x1,%eax
f0105037:	85 c0                	test   %eax,%eax
f0105039:	74 67                	je     f01050a2 <pt_get_page_permissions+0x97>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010503b:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0105042:	77 1c                	ja     f0105060 <pt_get_page_permissions+0x55>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0105044:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105047:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010504c:	83 ec 0c             	sub    $0xc,%esp
f010504f:	50                   	push   %eax
f0105050:	e8 42 6b 00 00       	call   f010bb97 <kheap_virtual_address>
f0105055:	83 c4 10             	add    $0x10,%esp
f0105058:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010505b:	e9 8e 00 00 00       	jmp    f01050ee <pt_get_page_permissions+0xe3>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0105060:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105063:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105068:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010506b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010506e:	c1 e8 0c             	shr    $0xc,%eax
f0105071:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0105074:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f0105079:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010507c:	72 17                	jb     f0105095 <pt_get_page_permissions+0x8a>
f010507e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105081:	68 1c 94 11 f0       	push   $0xf011941c
f0105086:	68 f3 04 00 00       	push   $0x4f3
f010508b:	68 f5 93 11 f0       	push   $0xf01193f5
f0105090:	e8 e1 b0 ff ff       	call   f0100176 <_panic>
f0105095:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105098:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010509d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a0:	eb 4c                	jmp    f01050ee <pt_get_page_permissions+0xe3>
		}
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01050a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01050a6:	74 3f                	je     f01050e7 <pt_get_page_permissions+0xdc>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f01050a8:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f01050ad:	83 ec 04             	sub    $0x4,%esp
f01050b0:	50                   	push   %eax
f01050b1:	ff 75 0c             	pushl  0xc(%ebp)
f01050b4:	ff 75 08             	pushl  0x8(%ebp)
f01050b7:	e8 9b 67 00 00       	call   f010b857 <__pf_read_env_table>
f01050bc:	83 c4 10             	add    $0x10,%esp
f01050bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f01050c2:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f01050c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f01050ca:	83 7d e8 f6          	cmpl   $0xfffffff6,-0x18(%ebp)
f01050ce:	75 1e                	jne    f01050ee <pt_get_page_permissions+0xe3>
			panic("pt_get_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f01050d0:	83 ec 04             	sub    $0x4,%esp
f01050d3:	68 cc 98 11 f0       	push   $0xf01198cc
f01050d8:	68 fe 04 00 00       	push   $0x4fe
f01050dd:	68 f5 93 11 f0       	push   $0xf01193f5
f01050e2:	e8 8f b0 ff ff       	call   f0100176 <_panic>
			handling code");
	}
	else
		return 0;
f01050e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01050ec:	eb 1e                	jmp    f010510c <pt_get_page_permissions+0x101>
	//panic("function pt_get_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;

	//	if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//		panic("function pt_is_page_modified() called with invalid virtual address\n") ;

	return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01050ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01050f1:	c1 e8 0c             	shr    $0xc,%eax
f01050f4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01050f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105100:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105103:	01 d0                	add    %edx,%eax
f0105105:	8b 00                	mov    (%eax),%eax
f0105107:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f010510c:	c9                   	leave  
f010510d:	c3                   	ret    

f010510e <create_frames_storage>:
//=============================================================
// 2014 - edited in 2017
//=============================================================
// [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f010510e:	55                   	push   %ebp
f010510f:	89 e5                	mov    %esp,%ebp
f0105111:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = (void *)kmalloc(PAGE_SIZE);
f0105114:	83 ec 0c             	sub    $0xc,%esp
f0105117:	68 00 10 00 00       	push   $0x1000
f010511c:	e8 ce 68 00 00       	call   f010b9ef <kmalloc>
f0105121:	83 c4 10             	add    $0x10,%esp
f0105124:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0105127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010512b:	75 17                	jne    f0105144 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010512d:	83 ec 04             	sub    $0x4,%esp
f0105130:	68 47 99 11 f0       	push   $0xf0119947
f0105135:	68 14 05 00 00       	push   $0x514
f010513a:	68 f5 93 11 f0       	push   $0xf01193f5
f010513f:	e8 32 b0 ff ff       	call   f0100176 <_panic>
	}
	return frames_storage;
f0105144:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0105147:	c9                   	leave  
f0105148:	c3                   	ret    

f0105149 <add_frame_to_storage>:
// [2] Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
{
f0105149:	55                   	push   %ebp
f010514a:	89 e5                	mov    %esp,%ebp
f010514c:	53                   	push   %ebx
f010514d:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0105150:	8b 45 10             	mov    0x10(%ebp),%eax
f0105153:	c1 e0 0c             	shl    $0xc,%eax
f0105156:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage, (void*) va, &ptr_page_table);
f0105159:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010515c:	83 ec 04             	sub    $0x4,%esp
f010515f:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0105162:	52                   	push   %edx
f0105163:	50                   	push   %eax
f0105164:	ff 75 08             	pushl  0x8(%ebp)
f0105167:	e8 a9 e9 ff ff       	call   f0103b15 <get_page_table>
f010516c:	83 c4 10             	add    $0x10,%esp
f010516f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0105172:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0105176:	75 14                	jne    f010518c <add_frame_to_storage+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0105178:	83 ec 08             	sub    $0x8,%esp
f010517b:	ff 75 f4             	pushl  -0xc(%ebp)
f010517e:	ff 75 08             	pushl  0x8(%ebp)
f0105181:	e8 e7 ea ff ff       	call   f0103c6d <create_page_table>
f0105186:	83 c4 10             	add    $0x10,%esp
f0105189:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
		}

	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010518c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010518f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105192:	c1 ea 0c             	shr    $0xc,%edx
f0105195:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010519b:	c1 e2 02             	shl    $0x2,%edx
f010519e:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01051a1:	83 ec 0c             	sub    $0xc,%esp
f01051a4:	ff 75 0c             	pushl  0xc(%ebp)
f01051a7:	e8 f5 df ff ff       	call   f01031a1 <to_physical_address>
f01051ac:	83 c4 10             	add    $0x10,%esp
f01051af:	83 c8 01             	or     $0x1,%eax
f01051b2:	89 03                	mov    %eax,(%ebx)
}
f01051b4:	90                   	nop
f01051b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01051b8:	c9                   	leave  
f01051b9:	c3                   	ret    

f01051ba <get_frame_from_storage>:

// [3] Get a frame info from the storage of frames at the given index
inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01051ba:	55                   	push   %ebp
f01051bb:	89 e5                	mov    %esp,%ebp
f01051bd:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01051c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01051c3:	c1 e0 0c             	shl    $0xc,%eax
f01051c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage, (void*) va, &ptr_page_table);
f01051c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051cc:	83 ec 04             	sub    $0x4,%esp
f01051cf:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01051d2:	52                   	push   %edx
f01051d3:	50                   	push   %eax
f01051d4:	ff 75 08             	pushl  0x8(%ebp)
f01051d7:	e8 ed eb ff ff       	call   f0103dc9 <get_frame_info>
f01051dc:	83 c4 10             	add    $0x10,%esp
f01051df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01051e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01051e5:	c9                   	leave  
f01051e6:	c3                   	ret    

f01051e7 <clear_frames_storage>:

// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
f01051e7:	55                   	push   %ebp
f01051e8:	89 e5                	mov    %esp,%ebp
f01051ea:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01051ed:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01051f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01051fb:	eb 5b                	jmp    f0105258 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01051fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105200:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105207:	8b 45 08             	mov    0x8(%ebp),%eax
f010520a:	01 d0                	add    %edx,%eax
f010520c:	8b 00                	mov    (%eax),%eax
f010520e:	85 c0                	test   %eax,%eax
f0105210:	74 43                	je     f0105255 <clear_frames_storage+0x6e>
		{
			if(USE_KHEAP)
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0105212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105215:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010521c:	8b 45 08             	mov    0x8(%ebp),%eax
f010521f:	01 d0                	add    %edx,%eax
f0105221:	8b 00                	mov    (%eax),%eax
f0105223:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105228:	83 ec 0c             	sub    $0xc,%esp
f010522b:	50                   	push   %eax
f010522c:	e8 66 69 00 00       	call   f010bb97 <kheap_virtual_address>
f0105231:	83 c4 10             	add    $0x10,%esp
f0105234:	83 ec 0c             	sub    $0xc,%esp
f0105237:	50                   	push   %eax
f0105238:	e8 cb 68 00 00       	call   f010bb08 <kfree>
f010523d:	83 c4 10             	add    $0x10,%esp
			}
			else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
f0105240:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105243:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010524a:	8b 45 08             	mov    0x8(%ebp),%eax
f010524d:	01 d0                	add    %edx,%eax
f010524f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0105255:	ff 45 f4             	incl   -0xc(%ebp)
f0105258:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010525f:	7e 9c                	jle    f01051fd <clear_frames_storage+0x16>
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
		}
	}
}
f0105261:	90                   	nop
f0105262:	c9                   	leave  
f0105263:	c3                   	ret    

f0105264 <setUHeapPlacementStrategyFIRSTFIT>:
//********************************************************************************//

void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0105264:	55                   	push   %ebp
f0105265:	89 e5                	mov    %esp,%ebp
f0105267:	c7 05 34 d2 52 f0 01 	movl   $0x1,0xf052d234
f010526e:	00 00 00 
f0105271:	90                   	nop
f0105272:	5d                   	pop    %ebp
f0105273:	c3                   	ret    

f0105274 <setUHeapPlacementStrategyBESTFIT>:
void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0105274:	55                   	push   %ebp
f0105275:	89 e5                	mov    %esp,%ebp
f0105277:	c7 05 34 d2 52 f0 02 	movl   $0x2,0xf052d234
f010527e:	00 00 00 
f0105281:	90                   	nop
f0105282:	5d                   	pop    %ebp
f0105283:	c3                   	ret    

f0105284 <setUHeapPlacementStrategyNEXTFIT>:
void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0105284:	55                   	push   %ebp
f0105285:	89 e5                	mov    %esp,%ebp
f0105287:	c7 05 34 d2 52 f0 03 	movl   $0x3,0xf052d234
f010528e:	00 00 00 
f0105291:	90                   	nop
f0105292:	5d                   	pop    %ebp
f0105293:	c3                   	ret    

f0105294 <setUHeapPlacementStrategyWORSTFIT>:
void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0105294:	55                   	push   %ebp
f0105295:	89 e5                	mov    %esp,%ebp
f0105297:	c7 05 34 d2 52 f0 04 	movl   $0x4,0xf052d234
f010529e:	00 00 00 
f01052a1:	90                   	nop
f01052a2:	5d                   	pop    %ebp
f01052a3:	c3                   	ret    

f01052a4 <isUHeapPlacementStrategyFIRSTFIT>:

uint32 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01052a4:	55                   	push   %ebp
f01052a5:	89 e5                	mov    %esp,%ebp
f01052a7:	a1 34 d2 52 f0       	mov    0xf052d234,%eax
f01052ac:	83 f8 01             	cmp    $0x1,%eax
f01052af:	75 07                	jne    f01052b8 <isUHeapPlacementStrategyFIRSTFIT+0x14>
f01052b1:	b8 01 00 00 00       	mov    $0x1,%eax
f01052b6:	eb 05                	jmp    f01052bd <isUHeapPlacementStrategyFIRSTFIT+0x19>
f01052b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01052bd:	5d                   	pop    %ebp
f01052be:	c3                   	ret    

f01052bf <isUHeapPlacementStrategyBESTFIT>:
uint32 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f01052bf:	55                   	push   %ebp
f01052c0:	89 e5                	mov    %esp,%ebp
f01052c2:	a1 34 d2 52 f0       	mov    0xf052d234,%eax
f01052c7:	83 f8 02             	cmp    $0x2,%eax
f01052ca:	75 07                	jne    f01052d3 <isUHeapPlacementStrategyBESTFIT+0x14>
f01052cc:	b8 01 00 00 00       	mov    $0x1,%eax
f01052d1:	eb 05                	jmp    f01052d8 <isUHeapPlacementStrategyBESTFIT+0x19>
f01052d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01052d8:	5d                   	pop    %ebp
f01052d9:	c3                   	ret    

f01052da <isUHeapPlacementStrategyNEXTFIT>:
uint32 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f01052da:	55                   	push   %ebp
f01052db:	89 e5                	mov    %esp,%ebp
f01052dd:	a1 34 d2 52 f0       	mov    0xf052d234,%eax
f01052e2:	83 f8 03             	cmp    $0x3,%eax
f01052e5:	75 07                	jne    f01052ee <isUHeapPlacementStrategyNEXTFIT+0x14>
f01052e7:	b8 01 00 00 00       	mov    $0x1,%eax
f01052ec:	eb 05                	jmp    f01052f3 <isUHeapPlacementStrategyNEXTFIT+0x19>
f01052ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01052f3:	5d                   	pop    %ebp
f01052f4:	c3                   	ret    

f01052f5 <isUHeapPlacementStrategyWORSTFIT>:
uint32 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f01052f5:	55                   	push   %ebp
f01052f6:	89 e5                	mov    %esp,%ebp
f01052f8:	a1 34 d2 52 f0       	mov    0xf052d234,%eax
f01052fd:	83 f8 04             	cmp    $0x4,%eax
f0105300:	75 07                	jne    f0105309 <isUHeapPlacementStrategyWORSTFIT+0x14>
f0105302:	b8 01 00 00 00       	mov    $0x1,%eax
f0105307:	eb 05                	jmp    f010530e <isUHeapPlacementStrategyWORSTFIT+0x19>
f0105309:	b8 00 00 00 00       	mov    $0x0,%eax
f010530e:	5d                   	pop    %ebp
f010530f:	c3                   	ret    

f0105310 <setKHeapPlacementStrategyCONTALLOC>:

//********************************************************************************//
void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0105310:	55                   	push   %ebp
f0105311:	89 e5                	mov    %esp,%ebp
f0105313:	c7 05 5c d2 52 f0 00 	movl   $0x0,0xf052d25c
f010531a:	00 00 00 
f010531d:	90                   	nop
f010531e:	5d                   	pop    %ebp
f010531f:	c3                   	ret    

f0105320 <setKHeapPlacementStrategyFIRSTFIT>:
void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0105320:	55                   	push   %ebp
f0105321:	89 e5                	mov    %esp,%ebp
f0105323:	c7 05 5c d2 52 f0 01 	movl   $0x1,0xf052d25c
f010532a:	00 00 00 
f010532d:	90                   	nop
f010532e:	5d                   	pop    %ebp
f010532f:	c3                   	ret    

f0105330 <setKHeapPlacementStrategyBESTFIT>:
void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0105330:	55                   	push   %ebp
f0105331:	89 e5                	mov    %esp,%ebp
f0105333:	c7 05 5c d2 52 f0 02 	movl   $0x2,0xf052d25c
f010533a:	00 00 00 
f010533d:	90                   	nop
f010533e:	5d                   	pop    %ebp
f010533f:	c3                   	ret    

f0105340 <setKHeapPlacementStrategyNEXTFIT>:
void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0105340:	55                   	push   %ebp
f0105341:	89 e5                	mov    %esp,%ebp
f0105343:	c7 05 5c d2 52 f0 03 	movl   $0x3,0xf052d25c
f010534a:	00 00 00 
f010534d:	90                   	nop
f010534e:	5d                   	pop    %ebp
f010534f:	c3                   	ret    

f0105350 <setKHeapPlacementStrategyWORSTFIT>:
void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	c7 05 5c d2 52 f0 04 	movl   $0x4,0xf052d25c
f010535a:	00 00 00 
f010535d:	90                   	nop
f010535e:	5d                   	pop    %ebp
f010535f:	c3                   	ret    

f0105360 <isKHeapPlacementStrategyCONTALLOC>:

uint32 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0105360:	55                   	push   %ebp
f0105361:	89 e5                	mov    %esp,%ebp
f0105363:	a1 5c d2 52 f0       	mov    0xf052d25c,%eax
f0105368:	85 c0                	test   %eax,%eax
f010536a:	75 07                	jne    f0105373 <isKHeapPlacementStrategyCONTALLOC+0x13>
f010536c:	b8 01 00 00 00       	mov    $0x1,%eax
f0105371:	eb 05                	jmp    f0105378 <isKHeapPlacementStrategyCONTALLOC+0x18>
f0105373:	b8 00 00 00 00       	mov    $0x0,%eax
f0105378:	5d                   	pop    %ebp
f0105379:	c3                   	ret    

f010537a <isKHeapPlacementStrategyFIRSTFIT>:
uint32 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010537a:	55                   	push   %ebp
f010537b:	89 e5                	mov    %esp,%ebp
f010537d:	a1 5c d2 52 f0       	mov    0xf052d25c,%eax
f0105382:	83 f8 01             	cmp    $0x1,%eax
f0105385:	75 07                	jne    f010538e <isKHeapPlacementStrategyFIRSTFIT+0x14>
f0105387:	b8 01 00 00 00       	mov    $0x1,%eax
f010538c:	eb 05                	jmp    f0105393 <isKHeapPlacementStrategyFIRSTFIT+0x19>
f010538e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105393:	5d                   	pop    %ebp
f0105394:	c3                   	ret    

f0105395 <isKHeapPlacementStrategyBESTFIT>:
uint32 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0105395:	55                   	push   %ebp
f0105396:	89 e5                	mov    %esp,%ebp
f0105398:	a1 5c d2 52 f0       	mov    0xf052d25c,%eax
f010539d:	83 f8 02             	cmp    $0x2,%eax
f01053a0:	75 07                	jne    f01053a9 <isKHeapPlacementStrategyBESTFIT+0x14>
f01053a2:	b8 01 00 00 00       	mov    $0x1,%eax
f01053a7:	eb 05                	jmp    f01053ae <isKHeapPlacementStrategyBESTFIT+0x19>
f01053a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01053ae:	5d                   	pop    %ebp
f01053af:	c3                   	ret    

f01053b0 <isKHeapPlacementStrategyNEXTFIT>:
uint32 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01053b0:	55                   	push   %ebp
f01053b1:	89 e5                	mov    %esp,%ebp
f01053b3:	a1 5c d2 52 f0       	mov    0xf052d25c,%eax
f01053b8:	83 f8 03             	cmp    $0x3,%eax
f01053bb:	75 07                	jne    f01053c4 <isKHeapPlacementStrategyNEXTFIT+0x14>
f01053bd:	b8 01 00 00 00       	mov    $0x1,%eax
f01053c2:	eb 05                	jmp    f01053c9 <isKHeapPlacementStrategyNEXTFIT+0x19>
f01053c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01053c9:	5d                   	pop    %ebp
f01053ca:	c3                   	ret    

f01053cb <isKHeapPlacementStrategyWORSTFIT>:
uint32 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01053cb:	55                   	push   %ebp
f01053cc:	89 e5                	mov    %esp,%ebp
f01053ce:	a1 5c d2 52 f0       	mov    0xf052d25c,%eax
f01053d3:	83 f8 04             	cmp    $0x4,%eax
f01053d6:	75 07                	jne    f01053df <isKHeapPlacementStrategyWORSTFIT+0x14>
f01053d8:	b8 01 00 00 00       	mov    $0x1,%eax
f01053dd:	eb 05                	jmp    f01053e4 <isKHeapPlacementStrategyWORSTFIT+0x19>
f01053df:	b8 00 00 00 00       	mov    $0x0,%eax
f01053e4:	5d                   	pop    %ebp
f01053e5:	c3                   	ret    

f01053e6 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01053e6:	55                   	push   %ebp
f01053e7:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01053e9:	8b 15 54 c9 52 f0    	mov    0xf052c954,%edx
f01053ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f2:	89 10                	mov    %edx,(%eax)
f01053f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f7:	8b 00                	mov    (%eax),%eax
f01053f9:	85 c0                	test   %eax,%eax
f01053fb:	75 07                	jne    f0105404 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f01053fd:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0105402:	eb 11                	jmp    f0105415 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0105404:	8b 45 08             	mov    0x8(%ebp),%eax
f0105407:	8b 00                	mov    (%eax),%eax
f0105409:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0105410:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105415:	5d                   	pop    %ebp
f0105416:	c3                   	ret    

f0105417 <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0105417:	55                   	push   %ebp
f0105418:	89 e5                	mov    %esp,%ebp
f010541a:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010541d:	83 ec 04             	sub    $0x4,%esp
f0105420:	68 3c 03 00 00       	push   $0x33c
f0105425:	6a 00                	push   $0x0
f0105427:	ff 75 08             	pushl  0x8(%ebp)
f010542a:	e8 94 1c 01 00       	call   f01170c3 <memset>
f010542f:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0105432:	8b 45 08             	mov    0x8(%ebp),%eax
f0105435:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010543c:	8b 15 54 c9 52 f0    	mov    0xf052c954,%edx
f0105442:	8b 45 08             	mov    0x8(%ebp),%eax
f0105445:	89 50 44             	mov    %edx,0x44(%eax)
f0105448:	8b 45 08             	mov    0x8(%ebp),%eax
f010544b:	8b 40 44             	mov    0x44(%eax),%eax
f010544e:	85 c0                	test   %eax,%eax
f0105450:	74 0d                	je     f010545f <free_environment+0x48>
f0105452:	a1 54 c9 52 f0       	mov    0xf052c954,%eax
f0105457:	8b 55 08             	mov    0x8(%ebp),%edx
f010545a:	89 50 48             	mov    %edx,0x48(%eax)
f010545d:	eb 08                	jmp    f0105467 <free_environment+0x50>
f010545f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105462:	a3 58 c9 52 f0       	mov    %eax,0xf052c958
f0105467:	8b 45 08             	mov    0x8(%ebp),%eax
f010546a:	a3 54 c9 52 f0       	mov    %eax,0xf052c954
f010546f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105472:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105479:	a1 60 c9 52 f0       	mov    0xf052c960,%eax
f010547e:	40                   	inc    %eax
f010547f:	a3 60 c9 52 f0       	mov    %eax,0xf052c960
}
f0105484:	90                   	nop
f0105485:	c9                   	leave  
f0105486:	c3                   	ret    

f0105487 <create_user_page_WS>:


void * create_user_page_WS(unsigned int numOfElements)
{
f0105487:	55                   	push   %ebp
f0105488:	89 e5                	mov    %esp,%ebp
f010548a:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010548d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105490:	89 d0                	mov    %edx,%eax
f0105492:	01 c0                	add    %eax,%eax
f0105494:	01 d0                	add    %edx,%eax
f0105496:	c1 e0 02             	shl    $0x2,%eax
f0105499:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return kmalloc(nBytes);
f010549c:	83 ec 0c             	sub    $0xc,%esp
f010549f:	ff 75 f4             	pushl  -0xc(%ebp)
f01054a2:	e8 48 65 00 00       	call   f010b9ef <kmalloc>
f01054a7:	83 c4 10             	add    $0x10,%esp
}
f01054aa:	c9                   	leave  
f01054ab:	c3                   	ret    

f01054ac <create_user_directory>:


void * create_user_directory()
{
f01054ac:	55                   	push   %ebp
f01054ad:	89 e5                	mov    %esp,%ebp
f01054af:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new directory
	uint32* ptr_user_page_directory = (void *)kmalloc(PAGE_SIZE);
f01054b2:	83 ec 0c             	sub    $0xc,%esp
f01054b5:	68 00 10 00 00       	push   $0x1000
f01054ba:	e8 30 65 00 00       	call   f010b9ef <kmalloc>
f01054bf:	83 c4 10             	add    $0x10,%esp
f01054c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f01054c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054c9:	75 17                	jne    f01054e2 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01054cb:	83 ec 04             	sub    $0x4,%esp
f01054ce:	68 f2 9f 11 f0       	push   $0xf0119ff2
f01054d3:	68 f5 00 00 00       	push   $0xf5
f01054d8:	68 0f a0 11 f0       	push   $0xf011a00f
f01054dd:	e8 94 ac ff ff       	call   f0100176 <_panic>
	}
	return ptr_user_page_directory;
f01054e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01054e5:	c9                   	leave  
f01054e6:	c3                   	ret    

f01054e7 <ShareWSAtUserSpace>:

void ShareWSAtUserSpace(struct Env* e)
{
f01054e7:	55                   	push   %ebp
f01054e8:	89 e5                	mov    %esp,%ebp
f01054ea:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f01054ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01054f0:	c7 80 34 03 00 00 00 	movl   $0xa0000000,0x334(%eax)
f01054f7:	00 00 a0 
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
f01054fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fd:	8b 40 74             	mov    0x74(%eax),%eax
f0105500:	83 ec 0c             	sub    $0xc,%esp
f0105503:	50                   	push   %eax
f0105504:	e8 7e ff ff ff       	call   f0105487 <create_user_page_WS>
f0105509:	83 c4 10             	add    $0x10,%esp
f010550c:	89 c2                	mov    %eax,%edx
f010550e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105511:	89 50 78             	mov    %edx,0x78(%eax)
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f0105514:	8b 45 08             	mov    0x8(%ebp),%eax
f0105517:	8b 40 78             	mov    0x78(%eax),%eax
f010551a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010551d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105520:	8b 50 74             	mov    0x74(%eax),%edx
f0105523:	89 d0                	mov    %edx,%eax
f0105525:	01 c0                	add    %eax,%eax
f0105527:	01 d0                	add    %edx,%eax
f0105529:	c1 e0 02             	shl    $0x2,%eax
f010552c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010552f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105532:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0105538:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010553b:	8b 45 08             	mov    0x8(%ebp),%eax
f010553e:	8b 40 78             	mov    0x78(%eax),%eax
f0105541:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105544:	eb 72                	jmp    f01055b8 <ShareWSAtUserSpace+0xd1>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f0105546:	83 ec 0c             	sub    $0xc,%esp
f0105549:	ff 75 f4             	pushl  -0xc(%ebp)
f010554c:	e8 a8 66 00 00       	call   f010bbf9 <kheap_physical_address>
f0105551:	83 c4 10             	add    $0x10,%esp
f0105554:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f0105557:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010555a:	8b 45 08             	mov    0x8(%ebp),%eax
f010555d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105560:	83 ec 04             	sub    $0x4,%esp
f0105563:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0105566:	51                   	push   %ecx
f0105567:	52                   	push   %edx
f0105568:	50                   	push   %eax
f0105569:	e8 a7 e5 ff ff       	call   f0103b15 <get_page_table>
f010556e:	83 c4 10             	add    $0x10,%esp
f0105571:	83 f8 01             	cmp    $0x1,%eax
f0105574:	75 18                	jne    f010558e <ShareWSAtUserSpace+0xa7>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f0105576:	8b 45 08             	mov    0x8(%ebp),%eax
f0105579:	8b 40 5c             	mov    0x5c(%eax),%eax
f010557c:	83 ec 08             	sub    $0x8,%esp
f010557f:	ff 75 f0             	pushl  -0x10(%ebp)
f0105582:	50                   	push   %eax
f0105583:	e8 e5 e6 ff ff       	call   f0103c6d <create_page_table>
f0105588:	83 c4 10             	add    $0x10,%esp
f010558b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010558e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105591:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105594:	c1 ea 0c             	shr    $0xc,%edx
f0105597:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010559d:	c1 e2 02             	shl    $0x2,%edx
f01055a0:	01 d0                	add    %edx,%eax
f01055a2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01055a5:	83 ca 05             	or     $0x5,%edx
f01055a8:	89 10                	mov    %edx,(%eax)
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f01055aa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01055b1:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01055b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01055bb:	8b 40 78             	mov    0x78(%eax),%eax
f01055be:	89 c2                	mov    %eax,%edx
f01055c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055c3:	01 d0                	add    %edx,%eax
f01055c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01055c8:	0f 87 78 ff ff ff    	ja     f0105546 <ShareWSAtUserSpace+0x5f>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f01055ce:	90                   	nop
f01055cf:	c9                   	leave  
f01055d0:	c3                   	ret    

f01055d1 <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f01055d1:	55                   	push   %ebp
f01055d2:	89 e5                	mov    %esp,%ebp
f01055d4:	83 ec 18             	sub    $0x18,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f01055d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01055da:	8b 55 0c             	mov    0xc(%ebp),%edx
f01055dd:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f01055e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01055e3:	8b 55 10             	mov    0x10(%ebp),%edx
f01055e6:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f01055e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01055f0:	eb 17                	jmp    f0105609 <initialize_environment+0x38>
	{
		e->env_page_directory[i] = 0 ;
f01055f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01055f5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01055f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055fb:	c1 e2 02             	shl    $0x2,%edx
f01055fe:	01 d0                	add    %edx,%eax
f0105600:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105606:	ff 45 f4             	incl   -0xc(%ebp)
f0105609:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010560c:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0105611:	76 df                	jbe    f01055f2 <initialize_environment+0x21>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0105613:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010561a:	eb 22                	jmp    f010563e <initialize_environment+0x6d>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010561c:	8b 45 08             	mov    0x8(%ebp),%eax
f010561f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	c1 e2 02             	shl    $0x2,%edx
f0105628:	01 c2                	add    %eax,%edx
f010562a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010562f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105632:	c1 e1 02             	shl    $0x2,%ecx
f0105635:	01 c8                	add    %ecx,%eax
f0105637:	8b 00                	mov    (%eax),%eax
f0105639:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010563b:	ff 45 f4             	incl   -0xc(%ebp)
f010563e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105645:	7e d5                	jle    f010561c <initialize_environment+0x4b>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		ShareWSAtUserSpace(e);
f0105647:	83 ec 0c             	sub    $0xc,%esp
f010564a:	ff 75 08             	pushl  0x8(%ebp)
f010564d:	e8 95 fe ff ff       	call   f01054e7 <ShareWSAtUserSpace>
f0105652:	83 c4 10             	add    $0x10,%esp
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0105655:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010565c:	eb 50                	jmp    f01056ae <initialize_environment+0xdd>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010565e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105661:	8b 48 78             	mov    0x78(%eax),%ecx
f0105664:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105667:	89 d0                	mov    %edx,%eax
f0105669:	01 c0                	add    %eax,%eax
f010566b:	01 d0                	add    %edx,%eax
f010566d:	c1 e0 02             	shl    $0x2,%eax
f0105670:	01 c8                	add    %ecx,%eax
f0105672:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0105678:	8b 45 08             	mov    0x8(%ebp),%eax
f010567b:	8b 48 78             	mov    0x78(%eax),%ecx
f010567e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105681:	89 d0                	mov    %edx,%eax
f0105683:	01 c0                	add    %eax,%eax
f0105685:	01 d0                	add    %edx,%eax
f0105687:	c1 e0 02             	shl    $0x2,%eax
f010568a:	01 c8                	add    %ecx,%eax
f010568c:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0105690:	8b 45 08             	mov    0x8(%ebp),%eax
f0105693:	8b 48 78             	mov    0x78(%eax),%ecx
f0105696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105699:	89 d0                	mov    %edx,%eax
f010569b:	01 c0                	add    %eax,%eax
f010569d:	01 d0                	add    %edx,%eax
f010569f:	c1 e0 02             	shl    $0x2,%eax
f01056a2:	01 c8                	add    %ecx,%eax
f01056a4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f01056ab:	ff 45 f4             	incl   -0xc(%ebp)
f01056ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01056b1:	8b 50 74             	mov    0x74(%eax),%edx
f01056b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056b7:	39 c2                	cmp    %eax,%edx
f01056b9:	77 a3                	ja     f010565e <initialize_environment+0x8d>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f01056bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01056be:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01056c5:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f01056c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01056cf:	eb 50                	jmp    f0105721 <initialize_environment+0x150>
	{
		e->__ptr_tws[i].virtual_address = 0;
f01056d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d7:	89 d0                	mov    %edx,%eax
f01056d9:	01 c0                	add    %eax,%eax
f01056db:	01 d0                	add    %edx,%eax
f01056dd:	c1 e0 02             	shl    $0x2,%eax
f01056e0:	01 c8                	add    %ecx,%eax
f01056e2:	83 c0 7c             	add    $0x7c,%eax
f01056e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f01056eb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056f1:	89 d0                	mov    %edx,%eax
f01056f3:	01 c0                	add    %eax,%eax
f01056f5:	01 d0                	add    %edx,%eax
f01056f7:	c1 e0 02             	shl    $0x2,%eax
f01056fa:	01 c8                	add    %ecx,%eax
f01056fc:	83 e8 80             	sub    $0xffffff80,%eax
f01056ff:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0105702:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105705:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105708:	89 d0                	mov    %edx,%eax
f010570a:	01 c0                	add    %eax,%eax
f010570c:	01 d0                	add    %edx,%eax
f010570e:	c1 e0 02             	shl    $0x2,%eax
f0105711:	01 c8                	add    %ecx,%eax
f0105713:	05 84 00 00 00       	add    $0x84,%eax
f0105718:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010571e:	ff 45 f4             	incl   -0xc(%ebp)
f0105721:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0105725:	7e aa                	jle    f01056d1 <initialize_environment+0x100>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0105727:	8b 45 08             	mov    0x8(%ebp),%eax
f010572a:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
f0105731:	00 00 00 

	e->pageFaultsCounter=0;
f0105734:	8b 45 08             	mov    0x8(%ebp),%eax
f0105737:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
f010573e:	00 00 00 
	e->tableFaultsCounter=0;
f0105741:	8b 45 08             	mov    0x8(%ebp),%eax
f0105744:	c7 80 e0 02 00 00 00 	movl   $0x0,0x2e0(%eax)
f010574b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010574e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105751:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
f0105758:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010575b:	8b 45 08             	mov    0x8(%ebp),%eax
f010575e:	c7 80 e8 02 00 00 00 	movl   $0x0,0x2e8(%eax)
f0105765:	00 00 00 

	e->nModifiedPages=0;
f0105768:	8b 45 08             	mov    0x8(%ebp),%eax
f010576b:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
f0105772:	00 00 00 
	e->nNotModifiedPages=0;
f0105775:	8b 45 08             	mov    0x8(%ebp),%eax
f0105778:	c7 80 f0 02 00 00 00 	movl   $0x0,0x2f0(%eax)
f010577f:	00 00 00 

	e->nClocks = 0;
f0105782:	8b 45 08             	mov    0x8(%ebp),%eax
f0105785:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
f010578c:	00 00 00 


	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010578f:	83 ec 0c             	sub    $0xc,%esp
f0105792:	ff 75 08             	pushl  0x8(%ebp)
f0105795:	e8 66 0b 00 00       	call   f0106300 <complete_environment_initialization>
f010579a:	83 c4 10             	add    $0x10,%esp
}
f010579d:	90                   	nop
f010579e:	c9                   	leave  
f010579f:	c3                   	ret    

f01057a0 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01057a0:	55                   	push   %ebp
f01057a1:	89 e5                	mov    %esp,%ebp
f01057a3:	83 ec 48             	sub    $0x48,%esp
	void *vaddr = seg->virtual_address;
f01057a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057a9:	8b 40 0c             	mov    0xc(%eax),%eax
f01057ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01057af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057b2:	8b 40 08             	mov    0x8(%eax),%eax
f01057b5:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01057b8:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01057bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01057c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01057c5:	01 c2                	add    %eax,%edx
f01057c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01057ca:	01 d0                	add    %edx,%eax
f01057cc:	48                   	dec    %eax
f01057cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01057d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01057d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01057d8:	f7 75 dc             	divl   -0x24(%ebp)
f01057db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01057de:	29 d0                	sub    %edx,%eax
f01057e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f01057e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01057e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01057e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01057ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01057f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f01057f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f01057fb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0105802:	8b 45 10             	mov    0x10(%ebp),%eax
f0105805:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010580b:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0105812:	0f 85 67 01 00 00    	jne    f010597f <program_segment_alloc_map_copy_workingset+0x1df>
f0105818:	8b 45 08             	mov    0x8(%ebp),%eax
f010581b:	05 f4 02 00 00       	add    $0x2f4,%eax
f0105820:	83 ec 08             	sub    $0x8,%esp
f0105823:	68 e8 99 11 f0       	push   $0xf01199e8
f0105828:	50                   	push   %eax
f0105829:	e8 b3 17 01 00       	call   f0116fe1 <strcmp>
f010582e:	83 c4 10             	add    $0x10,%esp
f0105831:	85 c0                	test   %eax,%eax
f0105833:	0f 84 46 01 00 00    	je     f010597f <program_segment_alloc_map_copy_workingset+0x1df>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0105839:	8b 45 14             	mov    0x14(%ebp),%eax
f010583c:	83 f8 06             	cmp    $0x6,%eax
f010583f:	76 05                	jbe    f0105846 <program_segment_alloc_map_copy_workingset+0xa6>
f0105841:	b8 06 00 00 00       	mov    $0x6,%eax
f0105846:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105849:	e9 31 01 00 00       	jmp    f010597f <program_segment_alloc_map_copy_workingset+0x1df>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0105854:	50                   	push   %eax
f0105855:	e8 3c e1 ff ff       	call   f0103996 <allocate_frame>
f010585a:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f010585d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105860:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105863:	8b 45 08             	mov    0x8(%ebp),%eax
f0105866:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105869:	6a 06                	push   $0x6
f010586b:	51                   	push   %ecx
f010586c:	52                   	push   %edx
f010586d:	50                   	push   %eax
f010586e:	e8 4d e6 ff ff       	call   f0103ec0 <loadtime_map_frame>
f0105873:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0105876:	8b 45 08             	mov    0x8(%ebp),%eax
f0105879:	8b 48 78             	mov    0x78(%eax),%ecx
f010587c:	8b 45 08             	mov    0x8(%ebp),%eax
f010587f:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0105885:	89 d0                	mov    %edx,%eax
f0105887:	01 c0                	add    %eax,%eax
f0105889:	01 d0                	add    %edx,%eax
f010588b:	c1 e0 02             	shl    $0x2,%eax
f010588e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0105891:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105894:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0105896:	8b 45 08             	mov    0x8(%ebp),%eax
f0105899:	8b 48 78             	mov    0x78(%eax),%ecx
f010589c:	8b 45 08             	mov    0x8(%ebp),%eax
f010589f:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058a5:	89 d0                	mov    %edx,%eax
f01058a7:	01 c0                	add    %eax,%eax
f01058a9:	01 d0                	add    %edx,%eax
f01058ab:	c1 e0 02             	shl    $0x2,%eax
f01058ae:	01 c8                	add    %ecx,%eax
f01058b0:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f01058b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01058b7:	8b 48 78             	mov    0x78(%eax),%ecx
f01058ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01058bd:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058c3:	89 d0                	mov    %edx,%eax
f01058c5:	01 c0                	add    %eax,%eax
f01058c7:	01 d0                	add    %edx,%eax
f01058c9:	c1 e0 02             	shl    $0x2,%eax
f01058cc:	01 c8                	add    %ecx,%eax
f01058ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		e->page_last_WS_index ++;
f01058d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d8:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01058de:	8d 50 01             	lea    0x1(%eax),%edx
f01058e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01058e4:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f01058ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01058ed:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01058f3:	8b 55 08             	mov    0x8(%ebp),%edx
f01058f6:	8b 4a 74             	mov    0x74(%edx),%ecx
f01058f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01058fe:	f7 f1                	div    %ecx
f0105900:	8b 45 08             	mov    0x8(%ebp),%eax
f0105903:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0105909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010590c:	c1 e8 16             	shr    $0x16,%eax
f010590f:	89 c2                	mov    %eax,%edx
f0105911:	8b 45 18             	mov    0x18(%ebp),%eax
f0105914:	8b 00                	mov    (%eax),%eax
f0105916:	39 c2                	cmp    %eax,%edx
f0105918:	74 4e                	je     f0105968 <program_segment_alloc_map_copy_workingset+0x1c8>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f010591a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010591d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105920:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105923:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0105928:	83 ec 08             	sub    $0x8,%esp
f010592b:	50                   	push   %eax
f010592c:	ff 75 08             	pushl  0x8(%ebp)
f010592f:	e8 6a f1 ff ff       	call   f0104a9e <addTableToTableWorkingSet>
f0105934:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f0105937:	8b 45 08             	mov    0x8(%ebp),%eax
f010593a:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0105940:	85 c0                	test   %eax,%eax
f0105942:	75 17                	jne    f010595b <program_segment_alloc_map_copy_workingset+0x1bb>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0105944:	83 ec 04             	sub    $0x4,%esp
f0105947:	68 28 a0 11 f0       	push   $0xf011a028
f010594c:	68 8b 01 00 00       	push   $0x18b
f0105951:	68 0f a0 11 f0       	push   $0xf011a00f
f0105956:	e8 1b a8 ff ff       	call   f0100176 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010595b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010595e:	c1 e8 16             	shr    $0x16,%eax
f0105961:	89 c2                	mov    %eax,%edx
f0105963:	8b 45 18             	mov    0x18(%ebp),%eax
f0105966:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0105968:	8b 45 10             	mov    0x10(%ebp),%eax
f010596b:	8b 00                	mov    (%eax),%eax
f010596d:	8d 50 01             	lea    0x1(%eax),%edx
f0105970:	8b 45 10             	mov    0x10(%ebp),%eax
f0105973:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105975:	ff 45 f0             	incl   -0x10(%ebp)
f0105978:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010597f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105982:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0105985:	73 0c                	jae    f0105993 <program_segment_alloc_map_copy_workingset+0x1f3>
f0105987:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010598a:	3b 45 14             	cmp    0x14(%ebp),%eax
f010598d:	0f 82 bb fe ff ff    	jb     f010584e <program_segment_alloc_map_copy_workingset+0xae>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0105993:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105996:	8b 00                	mov    (%eax),%eax
f0105998:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010599b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010599e:	8b 40 0c             	mov    0xc(%eax),%eax
f01059a1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059a4:	eb 10                	jmp    f01059b6 <program_segment_alloc_map_copy_workingset+0x216>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f01059a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059a9:	8a 10                	mov    (%eax),%dl
f01059ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059ae:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01059b0:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01059b3:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059b9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01059bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01059bf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01059c4:	89 c2                	mov    %eax,%edx
f01059c6:	8b 45 10             	mov    0x10(%ebp),%eax
f01059c9:	8b 00                	mov    (%eax),%eax
f01059cb:	c1 e0 0c             	shl    $0xc,%eax
f01059ce:	01 c2                	add    %eax,%edx
f01059d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059d3:	39 c2                	cmp    %eax,%edx
f01059d5:	76 1d                	jbe    f01059f4 <program_segment_alloc_map_copy_workingset+0x254>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01059d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01059da:	8b 50 04             	mov    0x4(%eax),%edx
f01059dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e0:	01 c2                	add    %eax,%edx
f01059e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059e5:	39 c2                	cmp    %eax,%edx
f01059e7:	77 bd                	ja     f01059a6 <program_segment_alloc_map_copy_workingset+0x206>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01059e9:	eb 09                	jmp    f01059f4 <program_segment_alloc_map_copy_workingset+0x254>
	{
		*dst_ptr = 0;
f01059eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059ee:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f01059f1:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01059f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059f7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01059fa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01059fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105a02:	89 c2                	mov    %eax,%edx
f0105a04:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a07:	8b 00                	mov    (%eax),%eax
f0105a09:	c1 e0 0c             	shl    $0xc,%eax
f0105a0c:	01 c2                	add    %eax,%edx
f0105a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a11:	39 c2                	cmp    %eax,%edx
f0105a13:	77 d6                	ja     f01059eb <program_segment_alloc_map_copy_workingset+0x24b>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0105a15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105a1a:	c9                   	leave  
f0105a1b:	c3                   	ret    

f0105a1c <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f0105a1c:	55                   	push   %ebp
f0105a1d:	89 e5                	mov    %esp,%ebp
f0105a1f:	57                   	push   %edi
f0105a20:	56                   	push   %esi
f0105a21:	53                   	push   %ebx
f0105a22:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105a28:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105a2f:	83 ec 0c             	sub    $0xc,%esp
f0105a32:	ff 75 08             	pushl  0x8(%ebp)
f0105a35:	e8 ac 0c 00 00       	call   f01066e6 <get_user_program_info>
f0105a3a:	83 c4 10             	add    $0x10,%esp
f0105a3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105a40:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0105a44:	75 0a                	jne    f0105a50 <env_create+0x34>
f0105a46:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a4b:	e9 5d 06 00 00       	jmp    f01060ad <env_create+0x691>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105a50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a53:	8b 40 08             	mov    0x8(%eax),%eax
f0105a56:	89 45 bc             	mov    %eax,-0x44(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105a59:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%ebp)
f0105a60:	00 00 00 
	if(allocate_environment(&e) < 0)
f0105a63:	83 ec 0c             	sub    $0xc,%esp
f0105a66:	8d 85 50 ff ff ff    	lea    -0xb0(%ebp),%eax
f0105a6c:	50                   	push   %eax
f0105a6d:	e8 74 f9 ff ff       	call   f01053e6 <allocate_environment>
f0105a72:	83 c4 10             	add    $0x10,%esp
f0105a75:	85 c0                	test   %eax,%eax
f0105a77:	79 0a                	jns    f0105a83 <env_create+0x67>
	{
		return 0;
f0105a79:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a7e:	e9 2a 06 00 00       	jmp    f01060ad <env_create+0x691>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0105a83:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a86:	8b 00                	mov    (%eax),%eax
f0105a88:	83 ec 0c             	sub    $0xc,%esp
f0105a8b:	50                   	push   %eax
f0105a8c:	e8 44 14 01 00       	call   f0116ed5 <strlen>
f0105a91:	83 c4 10             	add    $0x10,%esp
f0105a94:	83 f8 3f             	cmp    $0x3f,%eax
f0105a97:	7f 20                	jg     f0105ab9 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0105a99:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a9c:	8b 00                	mov    (%eax),%eax
f0105a9e:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105aa4:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105aaa:	83 ec 08             	sub    $0x8,%esp
f0105aad:	50                   	push   %eax
f0105aae:	52                   	push   %edx
f0105aaf:	e8 70 14 01 00       	call   f0116f24 <strcpy>
f0105ab4:	83 c4 10             	add    $0x10,%esp
f0105ab7:	eb 20                	jmp    f0105ad9 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0105ab9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105abc:	8b 00                	mov    (%eax),%eax
f0105abe:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105ac4:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105aca:	83 ec 04             	sub    $0x4,%esp
f0105acd:	6a 3f                	push   $0x3f
f0105acf:	50                   	push   %eax
f0105ad0:	52                   	push   %edx
f0105ad1:	e8 7c 14 01 00       	call   f0116f52 <strncpy>
f0105ad6:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
	if(USE_KHEAP)
	{
		ptr_user_page_directory = create_user_directory();
f0105ad9:	e8 ce f9 ff ff       	call   f01054ac <create_user_directory>
f0105ade:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0105ae1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105ae4:	83 ec 0c             	sub    $0xc,%esp
f0105ae7:	50                   	push   %eax
f0105ae8:	e8 0c 61 00 00       	call   f010bbf9 <kheap_physical_address>
f0105aed:	83 c4 10             	add    $0x10,%esp
f0105af0:	89 45 b0             	mov    %eax,-0x50(%ebp)

	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105af3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105af9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105afc:	89 50 74             	mov    %edx,0x74(%eax)


	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105aff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b05:	83 ec 04             	sub    $0x4,%esp
f0105b08:	ff 75 b0             	pushl  -0x50(%ebp)
f0105b0b:	ff 75 b4             	pushl  -0x4c(%ebp)
f0105b0e:	50                   	push   %eax
f0105b0f:	e8 bd fa ff ff       	call   f01055d1 <initialize_environment>
f0105b14:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105b17:	0f 20 d8             	mov    %cr3,%eax
f0105b1a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	return val;
f0105b1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105b20:	89 45 a8             	mov    %eax,-0x58(%ebp)
	lcr3(e->env_cr3) ;
f0105b23:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b29:	8b 40 60             	mov    0x60(%eax),%eax
f0105b2c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105b32:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0105b38:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105b3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105b42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105b49:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b4f:	8b 40 74             	mov    0x74(%eax),%eax
f0105b52:	48                   	dec    %eax
f0105b53:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105b56:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%ebp)
f0105b5d:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105b60:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0105b66:	83 ec 08             	sub    $0x8,%esp
f0105b69:	ff 75 bc             	pushl  -0x44(%ebp)
f0105b6c:	50                   	push   %eax
f0105b6d:	e8 5b 0a 00 00       	call   f01065cd <PROGRAM_SEGMENT_FIRST>
f0105b72:	83 c4 0c             	add    $0xc,%esp
f0105b75:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105b7b:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0105b81:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105b86:	89 c7                	mov    %eax,%edi
f0105b88:	89 d6                	mov    %edx,%esi
f0105b8a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105b8c:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105b92:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105b95:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b98:	8b 40 10             	mov    0x10(%eax),%eax
f0105b9b:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105b9e:	75 07                	jne    f0105ba7 <env_create+0x18b>
f0105ba0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105ba7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105baa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105bad:	e9 0f 03 00 00       	jmp    f0105ec1 <env_create+0x4a5>
	{
		segment_counter++;
f0105bb2:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105bb5:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0105bbc:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105bbf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105bc5:	83 ec 0c             	sub    $0xc,%esp
f0105bc8:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f0105bce:	52                   	push   %edx
f0105bcf:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd2:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0105bd8:	52                   	push   %edx
f0105bd9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105bdc:	50                   	push   %eax
f0105bdd:	e8 be fb ff ff       	call   f01057a0 <program_segment_alloc_map_copy_workingset>
f0105be2:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105be5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0105beb:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105bee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bf1:	8b 00                	mov    (%eax),%eax
f0105bf3:	89 45 a0             	mov    %eax,-0x60(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105bf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bf9:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bfc:	89 45 9c             	mov    %eax,-0x64(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105bff:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c02:	89 45 98             	mov    %eax,-0x68(%ebp)
f0105c05:	8b 45 98             	mov    -0x68(%ebp),%eax
f0105c08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105c0d:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105c10:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0105c17:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0105c1a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105c1d:	01 d0                	add    %edx,%eax
f0105c1f:	48                   	dec    %eax
f0105c20:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105c23:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c26:	ba 00 00 00 00       	mov    $0x0,%edx
f0105c2b:	f7 75 90             	divl   -0x70(%ebp)
f0105c2e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c31:	29 d0                	sub    %edx,%eax
f0105c33:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105c36:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c39:	2b 45 94             	sub    -0x6c(%ebp),%eax
f0105c3c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105c3f:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0105c44:	83 ec 04             	sub    $0x4,%esp
f0105c47:	68 00 10 00 00       	push   $0x1000
f0105c4c:	6a 00                	push   $0x0
f0105c4e:	50                   	push   %eax
f0105c4f:	e8 6f 14 01 00       	call   f01170c3 <memset>
f0105c54:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105c57:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0105c5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105c5d:	8b 15 d4 b6 54 f0    	mov    0xf054b6d4,%edx
f0105c63:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105c66:	01 d0                	add    %edx,%eax
f0105c68:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105c71:	eb 13                	jmp    f0105c86 <env_create+0x26a>
		{
			*dst_ptr = *src_ptr ;
f0105c73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105c76:	8a 10                	mov    (%eax),%dl
f0105c78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105c7b:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c7d:	ff 45 cc             	incl   -0x34(%ebp)
f0105c80:	ff 45 d4             	incl   -0x2c(%ebp)
f0105c83:	ff 45 d0             	incl   -0x30(%ebp)
f0105c86:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105c89:	3b 45 88             	cmp    -0x78(%ebp),%eax
f0105c8c:	72 e5                	jb     f0105c73 <env_create+0x257>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105c8e:	8b 15 d4 b6 54 f0    	mov    0xf054b6d4,%edx
f0105c94:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105c9a:	83 ec 04             	sub    $0x4,%esp
f0105c9d:	52                   	push   %edx
f0105c9e:	ff 75 94             	pushl  -0x6c(%ebp)
f0105ca1:	50                   	push   %eax
f0105ca2:	e8 0d 55 00 00       	call   f010b1b4 <pf_add_env_page>
f0105ca7:	83 c4 10             	add    $0x10,%esp
f0105caa:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105cad:	75 17                	jne    f0105cc6 <env_create+0x2aa>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105caf:	83 ec 04             	sub    $0x4,%esp
f0105cb2:	68 cc a0 11 f0       	push   $0xf011a0cc
f0105cb7:	68 2d 02 00 00       	push   $0x22d
f0105cbc:	68 0f a0 11 f0       	push   $0xf011a00f
f0105cc1:	e8 b0 a4 ff ff       	call   f0100176 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105cc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cc9:	8b 50 04             	mov    0x4(%eax),%edx
f0105ccc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105ccf:	01 d0                	add    %edx,%eax
f0105cd1:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105cd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105cd7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105cdc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105ce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105ce5:	8b 50 04             	mov    0x4(%eax),%edx
f0105ce8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105ceb:	01 d0                	add    %edx,%eax
f0105ced:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105cf3:	8b 45 88             	mov    -0x78(%ebp),%eax
f0105cf6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105cf9:	eb 43                	jmp    f0105d3e <env_create+0x322>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0105cfb:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cfe:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105d04:	83 ec 04             	sub    $0x4,%esp
f0105d07:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105d0a:	52                   	push   %edx
f0105d0b:	50                   	push   %eax
f0105d0c:	e8 a3 54 00 00       	call   f010b1b4 <pf_add_env_page>
f0105d11:	83 c4 10             	add    $0x10,%esp
f0105d14:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105d17:	75 17                	jne    f0105d30 <env_create+0x314>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105d19:	83 ec 04             	sub    $0x4,%esp
f0105d1c:	68 cc a0 11 f0       	push   $0xf011a0cc
f0105d21:	68 3a 02 00 00       	push   $0x23a
f0105d26:	68 0f a0 11 f0       	push   $0xf011a00f
f0105d2b:	e8 46 a4 ff ff       	call   f0100176 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105d30:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105d37:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0105d3e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d41:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0105d47:	72 b2                	jb     f0105cfb <env_create+0x2df>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0105d49:	a1 d4 b6 54 f0       	mov    0xf054b6d4,%eax
f0105d4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0105d51:	83 ec 04             	sub    $0x4,%esp
f0105d54:	68 00 10 00 00       	push   $0x1000
f0105d59:	6a 00                	push   $0x0
f0105d5b:	ff 75 d0             	pushl  -0x30(%ebp)
f0105d5e:	e8 60 13 01 00       	call   f01170c3 <memset>
f0105d63:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0105d6c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105d6f:	eb 13                	jmp    f0105d84 <env_create+0x368>
		{
			*dst_ptr = *src_ptr;
f0105d71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105d74:	8a 10                	mov    (%eax),%dl
f0105d76:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105d79:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d7b:	ff 45 cc             	incl   -0x34(%ebp)
f0105d7e:	ff 45 d4             	incl   -0x2c(%ebp)
f0105d81:	ff 45 d0             	incl   -0x30(%ebp)
f0105d84:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d87:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0105d8d:	72 e2                	jb     f0105d71 <env_create+0x355>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105d8f:	8b 15 d4 b6 54 f0    	mov    0xf054b6d4,%edx
f0105d95:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105d9b:	83 ec 04             	sub    $0x4,%esp
f0105d9e:	52                   	push   %edx
f0105d9f:	ff b5 7c ff ff ff    	pushl  -0x84(%ebp)
f0105da5:	50                   	push   %eax
f0105da6:	e8 09 54 00 00       	call   f010b1b4 <pf_add_env_page>
f0105dab:	83 c4 10             	add    $0x10,%esp
f0105dae:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105db1:	75 17                	jne    f0105dca <env_create+0x3ae>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105db3:	83 ec 04             	sub    $0x4,%esp
f0105db6:	68 cc a0 11 f0       	push   $0xf011a0cc
f0105dbb:	68 49 02 00 00       	push   $0x249
f0105dc0:	68 0f a0 11 f0       	push   $0xf011a00f
f0105dc5:	e8 ac a3 ff ff       	call   f0100176 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0105dca:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0105dd1:	10 00 00 
f0105dd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105dd7:	8b 50 04             	mov    0x4(%eax),%edx
f0105dda:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105ddd:	01 c2                	add    %eax,%edx
f0105ddf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0105de5:	01 d0                	add    %edx,%eax
f0105de7:	48                   	dec    %eax
f0105de8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0105dee:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0105df9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0105dff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105e05:	29 d0                	sub    %edx,%eax
f0105e07:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0105e0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e0d:	8b 50 08             	mov    0x8(%eax),%edx
f0105e10:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105e13:	01 d0                	add    %edx,%eax
f0105e15:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0105e18:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e1e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0105e25:	eb 41                	jmp    f0105e68 <env_create+0x44c>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0105e27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e2d:	83 ec 04             	sub    $0x4,%esp
f0105e30:	6a 01                	push   $0x1
f0105e32:	ff 75 c8             	pushl  -0x38(%ebp)
f0105e35:	50                   	push   %eax
f0105e36:	e8 a0 52 00 00       	call   f010b0db <pf_add_empty_env_page>
f0105e3b:	83 c4 10             	add    $0x10,%esp
f0105e3e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105e41:	75 17                	jne    f0105e5a <env_create+0x43e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105e43:	83 ec 04             	sub    $0x4,%esp
f0105e46:	68 cc a0 11 f0       	push   $0xf011a0cc
f0105e4b:	68 56 02 00 00       	push   $0x256
f0105e50:	68 0f a0 11 f0       	push   $0xf011a00f
f0105e55:	e8 1c a3 ff ff       	call   f0100176 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e5a:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105e61:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0105e68:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0105e6f:	10 00 00 
f0105e72:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
f0105e78:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0105e7e:	01 d0                	add    %edx,%eax
f0105e80:	48                   	dec    %eax
f0105e81:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0105e87:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0105e92:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0105e98:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105e9e:	29 d0                	sub    %edx,%eax
f0105ea0:	89 c2                	mov    %eax,%edx
f0105ea2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105ea5:	39 c2                	cmp    %eax,%edx
f0105ea7:	0f 87 7a ff ff ff    	ja     f0105e27 <env_create+0x40b>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105ead:	83 ec 08             	sub    $0x8,%esp
f0105eb0:	ff 75 bc             	pushl  -0x44(%ebp)
f0105eb3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105eb6:	e8 07 06 00 00       	call   f01064c2 <PROGRAM_SEGMENT_NEXT>
f0105ebb:	83 c4 10             	add    $0x10,%esp
f0105ebe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105ec1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0105ec5:	0f 85 e7 fc ff ff    	jne    f0105bb2 <env_create+0x196>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0105ecb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0105ed2:	e9 9e 00 00 00       	jmp    f0105f75 <env_create+0x559>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0105ed7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105edd:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ee0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105ee3:	89 d0                	mov    %edx,%eax
f0105ee5:	01 c0                	add    %eax,%eax
f0105ee7:	01 d0                	add    %edx,%eax
f0105ee9:	c1 e0 02             	shl    $0x2,%eax
f0105eec:	01 c8                	add    %ecx,%eax
f0105eee:	8a 40 04             	mov    0x4(%eax),%al
f0105ef1:	84 c0                	test   %al,%al
f0105ef3:	75 7d                	jne    f0105f72 <env_create+0x556>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0105ef5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105efb:	8b 48 78             	mov    0x78(%eax),%ecx
f0105efe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105f01:	89 d0                	mov    %edx,%eax
f0105f03:	01 c0                	add    %eax,%eax
f0105f05:	01 d0                	add    %edx,%eax
f0105f07:	c1 e0 02             	shl    $0x2,%eax
f0105f0a:	01 c8                	add    %ecx,%eax
f0105f0c:	8b 00                	mov    (%eax),%eax
f0105f0e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f0105f14:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f1a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f20:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105f23:	83 ec 04             	sub    $0x4,%esp
f0105f26:	8d 8d 2c ff ff ff    	lea    -0xd4(%ebp),%ecx
f0105f2c:	51                   	push   %ecx
f0105f2d:	52                   	push   %edx
f0105f2e:	50                   	push   %eax
f0105f2f:	e8 e1 db ff ff       	call   f0103b15 <get_page_table>
f0105f34:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0105f37:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0105f3d:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f43:	c1 ea 0c             	shr    $0xc,%edx
f0105f46:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105f4c:	c1 e2 02             	shl    $0x2,%edx
f0105f4f:	01 d0                	add    %edx,%eax
f0105f51:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0105f57:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
f0105f5d:	c1 e9 0c             	shr    $0xc,%ecx
f0105f60:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0105f66:	c1 e1 02             	shl    $0x2,%ecx
f0105f69:	01 ca                	add    %ecx,%edx
f0105f6b:	8b 12                	mov    (%edx),%edx
f0105f6d:	83 e2 bf             	and    $0xffffffbf,%edx
f0105f70:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0105f72:	ff 45 c4             	incl   -0x3c(%ebp)
f0105f75:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f7b:	8b 50 74             	mov    0x74(%eax),%edx
f0105f7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105f81:	39 c2                	cmp    %eax,%edx
f0105f83:	0f 87 4e ff ff ff    	ja     f0105ed7 <env_create+0x4bb>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0105f89:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105f8c:	8b 50 08             	mov    0x8(%eax),%edx
f0105f8f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f95:	83 ec 08             	sub    $0x8,%esp
f0105f98:	52                   	push   %edx
f0105f99:	50                   	push   %eax
f0105f9a:	e8 43 08 00 00       	call   f01067e2 <set_environment_entry_point>
f0105f9f:	83 c4 10             	add    $0x10,%esp
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set


	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0105fa2:	c7 85 5c ff ff ff 00 	movl   $0xeebfd000,-0xa4(%ebp)
f0105fa9:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0105fac:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0105fb3:	e9 d4 00 00 00       	jmp    f010608c <env_create+0x670>
	{
		struct Frame_Info *pp = NULL;
f0105fb8:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0105fbf:	00 00 00 
		allocate_frame(&pp);
f0105fc2:	83 ec 0c             	sub    $0xc,%esp
f0105fc5:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105fcb:	50                   	push   %eax
f0105fcc:	e8 c5 d9 ff ff       	call   f0103996 <allocate_frame>
f0105fd1:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f0105fd4:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0105fd7:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0105fdd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105fe3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105fe6:	6a 06                	push   $0x6
f0105fe8:	51                   	push   %ecx
f0105fe9:	52                   	push   %edx
f0105fea:	50                   	push   %eax
f0105feb:	e8 d0 de ff ff       	call   f0103ec0 <loadtime_map_frame>
f0105ff0:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0105ff3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0105ff6:	83 ec 04             	sub    $0x4,%esp
f0105ff9:	68 00 10 00 00       	push   $0x1000
f0105ffe:	6a 00                	push   $0x0
f0106000:	50                   	push   %eax
f0106001:	e8 bd 10 01 00       	call   f01170c3 <memset>
f0106006:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0106009:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010600f:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106015:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010601b:	83 ec 04             	sub    $0x4,%esp
f010601e:	ff 75 c0             	pushl  -0x40(%ebp)
f0106021:	52                   	push   %edx
f0106022:	50                   	push   %eax
f0106023:	e8 6f e3 ff ff       	call   f0104397 <env_page_ws_set_entry>
f0106028:	83 c4 10             	add    $0x10,%esp
			e->page_last_WS_index ++;
f010602b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106031:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106037:	42                   	inc    %edx
f0106038:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010603e:	8b 8d 50 ff ff ff    	mov    -0xb0(%ebp),%ecx
f0106044:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010604a:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0106050:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0106056:	8b 5a 74             	mov    0x74(%edx),%ebx
f0106059:	ba 00 00 00 00       	mov    $0x0,%edx
f010605e:	f7 f3                	div    %ebx
f0106060:	89 d0                	mov    %edx,%eax
f0106062:	89 81 d4 02 00 00    	mov    %eax,0x2d4(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0106068:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010606e:	83 ec 04             	sub    $0x4,%esp
f0106071:	6a 01                	push   $0x1
f0106073:	ff 75 c0             	pushl  -0x40(%ebp)
f0106076:	50                   	push   %eax
f0106077:	e8 5f 50 00 00       	call   f010b0db <pf_add_empty_env_page>
f010607c:	83 c4 10             	add    $0x10,%esp
f010607f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0106085:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010608c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010608f:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0106095:	0f 83 1d ff ff ff    	jae    f0105fb8 <env_create+0x59c>
f010609b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010609e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01060a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01060a4:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01060a7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
}
f01060ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01060b0:	5b                   	pop    %ebx
f01060b1:	5e                   	pop    %esi
f01060b2:	5f                   	pop    %edi
f01060b3:	5d                   	pop    %ebp
f01060b4:	c3                   	ret    

f01060b5 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01060b5:	55                   	push   %ebp
f01060b6:	89 e5                	mov    %esp,%ebp
f01060b8:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01060bb:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01060c0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01060c3:	74 25                	je     f01060ea <env_run+0x35>
	{
		curenv = e ;
f01060c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01060c8:	a3 50 c9 52 f0       	mov    %eax,0xf052c950
		curenv->env_runs++ ;
f01060cd:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01060d2:	8b 50 58             	mov    0x58(%eax),%edx
f01060d5:	42                   	inc    %edx
f01060d6:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f01060d9:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01060de:	8b 40 60             	mov    0x60(%eax),%eax
f01060e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060e7:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01060ea:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01060ef:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01060f6:	e8 32 09 00 00       	call   f0106a2d <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01060fb:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0106100:	83 ec 0c             	sub    $0xc,%esp
f0106103:	50                   	push   %eax
f0106104:	e8 ff 07 00 00       	call   f0106908 <env_pop_tf>

f0106109 <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f0106109:	55                   	push   %ebp
f010610a:	89 e5                	mov    %esp,%ebp
f010610c:	83 ec 08             	sub    $0x8,%esp
	panic("This function is not required\n");
f010610f:	83 ec 04             	sub    $0x4,%esp
f0106112:	68 14 a1 11 f0       	push   $0xf011a114
f0106117:	68 bc 02 00 00       	push   $0x2bc
f010611c:	68 0f a0 11 f0       	push   $0xf011a00f
f0106121:	e8 50 a0 ff ff       	call   f0100176 <_panic>

f0106126 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f0106126:	55                   	push   %ebp
f0106127:	89 e5                	mov    %esp,%ebp
f0106129:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010612c:	e8 65 22 00 00       	call   f0108396 <isBufferingEnabled>
f0106131:	85 c0                	test   %eax,%eax
f0106133:	74 10                	je     f0106145 <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f0106135:	83 ec 0c             	sub    $0xc,%esp
f0106138:	ff 75 08             	pushl  0x8(%ebp)
f010613b:	e8 33 00 00 00       	call   f0106173 <__env_free_with_buffering>
f0106140:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f0106143:	eb 0e                	jmp    f0106153 <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f0106145:	83 ec 0c             	sub    $0xc,%esp
f0106148:	ff 75 08             	pushl  0x8(%ebp)
f010614b:	e8 06 00 00 00       	call   f0106156 <env_free>
f0106150:	83 c4 10             	add    $0x10,%esp
	}
}
f0106153:	90                   	nop
f0106154:	c9                   	leave  
f0106155:	c3                   	ret    

f0106156 <env_free>:
void env_free(struct Env *e) {
f0106156:	55                   	push   %ebp
f0106157:	89 e5                	mov    %esp,%ebp
f0106159:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS 2] Exit [env_free()]

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("env_free() is not implemented yet...!!");
f010615c:	83 ec 04             	sub    $0x4,%esp
f010615f:	68 34 a1 11 f0       	push   $0xf011a134
f0106164:	68 d4 02 00 00       	push   $0x2d4
f0106169:	68 0f a0 11 f0       	push   $0xf011a00f
f010616e:	e8 03 a0 ff ff       	call   f0100176 <_panic>

f0106173 <__env_free_with_buffering>:
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
}


void __env_free_with_buffering(struct Env *e)
{
f0106173:	55                   	push   %ebp
f0106174:	89 e5                	mov    %esp,%ebp
f0106176:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f0106179:	83 ec 0c             	sub    $0xc,%esp
f010617c:	ff 75 08             	pushl  0x8(%ebp)
f010617f:	e8 85 ff ff ff       	call   f0106109 <__remove_pws_user_pages>
f0106184:	83 c4 10             	add    $0x10,%esp

}
f0106187:	90                   	nop
f0106188:	c9                   	leave  
f0106189:	c3                   	ret    

f010618a <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010618a:	55                   	push   %ebp
f010618b:	89 e5                	mov    %esp,%ebp
f010618d:	53                   	push   %ebx
f010618e:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0106191:	c7 45 f8 f1 04 00 00 	movl   $0x4f1,-0x8(%ebp)
	for(; iEnv >= 0; iEnv--)
f0106198:	e9 52 01 00 00       	jmp    f01062ef <env_init+0x165>
	{
		envs[iEnv].env_status = ENV_FREE;
f010619d:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f01061a3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061a6:	89 d0                	mov    %edx,%eax
f01061a8:	c1 e0 02             	shl    $0x2,%eax
f01061ab:	01 d0                	add    %edx,%eax
f01061ad:	01 c0                	add    %eax,%eax
f01061af:	01 d0                	add    %edx,%eax
f01061b1:	01 c0                	add    %eax,%eax
f01061b3:	01 d0                	add    %edx,%eax
f01061b5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01061bc:	01 d0                	add    %edx,%eax
f01061be:	c1 e0 02             	shl    $0x2,%eax
f01061c1:	01 c8                	add    %ecx,%eax
f01061c3:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f01061ca:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f01061d0:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061d3:	89 d0                	mov    %edx,%eax
f01061d5:	c1 e0 02             	shl    $0x2,%eax
f01061d8:	01 d0                	add    %edx,%eax
f01061da:	01 c0                	add    %eax,%eax
f01061dc:	01 d0                	add    %edx,%eax
f01061de:	01 c0                	add    %eax,%eax
f01061e0:	01 d0                	add    %edx,%eax
f01061e2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01061e9:	01 d0                	add    %edx,%eax
f01061eb:	c1 e0 02             	shl    $0x2,%eax
f01061ee:	01 c8                	add    %ecx,%eax
f01061f0:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01061f7:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f01061fd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106200:	89 d0                	mov    %edx,%eax
f0106202:	c1 e0 02             	shl    $0x2,%eax
f0106205:	01 d0                	add    %edx,%eax
f0106207:	01 c0                	add    %eax,%eax
f0106209:	01 d0                	add    %edx,%eax
f010620b:	01 c0                	add    %eax,%eax
f010620d:	01 d0                	add    %edx,%eax
f010620f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106216:	01 d0                	add    %edx,%eax
f0106218:	c1 e0 02             	shl    $0x2,%eax
f010621b:	01 c8                	add    %ecx,%eax
f010621d:	8b 15 54 c9 52 f0    	mov    0xf052c954,%edx
f0106223:	89 50 44             	mov    %edx,0x44(%eax)
f0106226:	8b 40 44             	mov    0x44(%eax),%eax
f0106229:	85 c0                	test   %eax,%eax
f010622b:	74 31                	je     f010625e <env_init+0xd4>
f010622d:	8b 0d 54 c9 52 f0    	mov    0xf052c954,%ecx
f0106233:	8b 1d 4c c9 52 f0    	mov    0xf052c94c,%ebx
f0106239:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010623c:	89 d0                	mov    %edx,%eax
f010623e:	c1 e0 02             	shl    $0x2,%eax
f0106241:	01 d0                	add    %edx,%eax
f0106243:	01 c0                	add    %eax,%eax
f0106245:	01 d0                	add    %edx,%eax
f0106247:	01 c0                	add    %eax,%eax
f0106249:	01 d0                	add    %edx,%eax
f010624b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106252:	01 d0                	add    %edx,%eax
f0106254:	c1 e0 02             	shl    $0x2,%eax
f0106257:	01 d8                	add    %ebx,%eax
f0106259:	89 41 48             	mov    %eax,0x48(%ecx)
f010625c:	eb 2b                	jmp    f0106289 <env_init+0xff>
f010625e:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f0106264:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106267:	89 d0                	mov    %edx,%eax
f0106269:	c1 e0 02             	shl    $0x2,%eax
f010626c:	01 d0                	add    %edx,%eax
f010626e:	01 c0                	add    %eax,%eax
f0106270:	01 d0                	add    %edx,%eax
f0106272:	01 c0                	add    %eax,%eax
f0106274:	01 d0                	add    %edx,%eax
f0106276:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010627d:	01 d0                	add    %edx,%eax
f010627f:	c1 e0 02             	shl    $0x2,%eax
f0106282:	01 c8                	add    %ecx,%eax
f0106284:	a3 58 c9 52 f0       	mov    %eax,0xf052c958
f0106289:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f010628f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106292:	89 d0                	mov    %edx,%eax
f0106294:	c1 e0 02             	shl    $0x2,%eax
f0106297:	01 d0                	add    %edx,%eax
f0106299:	01 c0                	add    %eax,%eax
f010629b:	01 d0                	add    %edx,%eax
f010629d:	01 c0                	add    %eax,%eax
f010629f:	01 d0                	add    %edx,%eax
f01062a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062a8:	01 d0                	add    %edx,%eax
f01062aa:	c1 e0 02             	shl    $0x2,%eax
f01062ad:	01 c8                	add    %ecx,%eax
f01062af:	a3 54 c9 52 f0       	mov    %eax,0xf052c954
f01062b4:	8b 0d 4c c9 52 f0    	mov    0xf052c94c,%ecx
f01062ba:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062bd:	89 d0                	mov    %edx,%eax
f01062bf:	c1 e0 02             	shl    $0x2,%eax
f01062c2:	01 d0                	add    %edx,%eax
f01062c4:	01 c0                	add    %eax,%eax
f01062c6:	01 d0                	add    %edx,%eax
f01062c8:	01 c0                	add    %eax,%eax
f01062ca:	01 d0                	add    %edx,%eax
f01062cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062d3:	01 d0                	add    %edx,%eax
f01062d5:	c1 e0 02             	shl    $0x2,%eax
f01062d8:	01 c8                	add    %ecx,%eax
f01062da:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01062e1:	a1 60 c9 52 f0       	mov    0xf052c960,%eax
f01062e6:	40                   	inc    %eax
f01062e7:	a3 60 c9 52 f0       	mov    %eax,0xf052c960
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01062ec:	ff 4d f8             	decl   -0x8(%ebp)
f01062ef:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01062f3:	0f 89 a4 fe ff ff    	jns    f010619d <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01062f9:	90                   	nop
f01062fa:	83 c4 10             	add    $0x10,%esp
f01062fd:	5b                   	pop    %ebx
f01062fe:	5d                   	pop    %ebp
f01062ff:	c3                   	ret    

f0106300 <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f0106300:	55                   	push   %ebp
f0106301:	89 e5                	mov    %esp,%ebp
f0106303:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0106306:	8b 45 08             	mov    0x8(%ebp),%eax
f0106309:	8b 40 5c             	mov    0x5c(%eax),%eax
f010630c:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f0106312:	8b 45 08             	mov    0x8(%ebp),%eax
f0106315:	8b 40 60             	mov    0x60(%eax),%eax
f0106318:	83 c8 03             	or     $0x3,%eax
f010631b:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010631d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106320:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106323:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106329:	8b 45 08             	mov    0x8(%ebp),%eax
f010632c:	8b 40 60             	mov    0x60(%eax),%eax
f010632f:	83 c8 05             	or     $0x5,%eax
f0106332:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0106334:	8b 45 08             	mov    0x8(%ebp),%eax
f0106337:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010633e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106341:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0106348:	8b 45 08             	mov    0x8(%ebp),%eax
f010634b:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0106352:	8b 45 08             	mov    0x8(%ebp),%eax
f0106355:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f010635c:	8b 45 08             	mov    0x8(%ebp),%eax
f010635f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106362:	05 00 10 00 00       	add    $0x1000,%eax
f0106367:	25 0e fb ff ff       	and    $0xfffffb0e,%eax
f010636c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010636f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106373:	7f 07                	jg     f010637c <complete_environment_initialization+0x7c>
		generation = 1 << ENVGENSHIFT;
f0106375:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010637c:	8b 45 08             	mov    0x8(%ebp),%eax
f010637f:	8b 15 4c c9 52 f0    	mov    0xf052c94c,%edx
f0106385:	29 d0                	sub    %edx,%eax
f0106387:	c1 f8 02             	sar    $0x2,%eax
f010638a:	89 c2                	mov    %eax,%edx
f010638c:	89 d0                	mov    %edx,%eax
f010638e:	01 c0                	add    %eax,%eax
f0106390:	01 d0                	add    %edx,%eax
f0106392:	c1 e0 09             	shl    $0x9,%eax
f0106395:	29 d0                	sub    %edx,%eax
f0106397:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010639e:	01 c8                	add    %ecx,%eax
f01063a0:	c1 e0 03             	shl    $0x3,%eax
f01063a3:	01 d0                	add    %edx,%eax
f01063a5:	89 c1                	mov    %eax,%ecx
f01063a7:	c1 e1 05             	shl    $0x5,%ecx
f01063aa:	01 c8                	add    %ecx,%eax
f01063ac:	01 c0                	add    %eax,%eax
f01063ae:	01 d0                	add    %edx,%eax
f01063b0:	01 c0                	add    %eax,%eax
f01063b2:	01 d0                	add    %edx,%eax
f01063b4:	c1 e0 02             	shl    $0x2,%eax
f01063b7:	01 d0                	add    %edx,%eax
f01063b9:	c1 e0 04             	shl    $0x4,%eax
f01063bc:	01 d0                	add    %edx,%eax
f01063be:	f7 d8                	neg    %eax
f01063c0:	0b 45 f4             	or     -0xc(%ebp),%eax
f01063c3:	89 c2                	mov    %eax,%edx
f01063c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01063c8:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f01063cb:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01063d0:	85 c0                	test   %eax,%eax
f01063d2:	75 0c                	jne    f01063e0 <complete_environment_initialization+0xe0>
		e->env_parent_id = 0;//no parent;
f01063d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01063d7:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f01063de:	eb 0e                	jmp    f01063ee <complete_environment_initialization+0xee>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f01063e0:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01063e5:	8b 50 4c             	mov    0x4c(%eax),%edx
f01063e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01063eb:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f01063ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01063f1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f01063f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fb:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0106402:	8b 45 08             	mov    0x8(%ebp),%eax
f0106405:	83 ec 04             	sub    $0x4,%esp
f0106408:	6a 44                	push   $0x44
f010640a:	6a 00                	push   $0x0
f010640c:	50                   	push   %eax
f010640d:	e8 b1 0c 01 00       	call   f01170c3 <memset>
f0106412:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0106415:	8b 45 08             	mov    0x8(%ebp),%eax
f0106418:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010641e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106421:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0106427:	8b 45 08             	mov    0x8(%ebp),%eax
f010642a:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0106430:	8b 45 08             	mov    0x8(%ebp),%eax
f0106433:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010643a:	8b 45 08             	mov    0x8(%ebp),%eax
f010643d:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f0106443:	8b 45 08             	mov    0x8(%ebp),%eax
f0106446:	8b 40 38             	mov    0x38(%eax),%eax
f0106449:	80 cc 02             	or     $0x2,%ah
f010644c:	89 c2                	mov    %eax,%edx
f010644e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106451:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f0106454:	8b 45 08             	mov    0x8(%ebp),%eax
f0106457:	8b 40 44             	mov    0x44(%eax),%eax
f010645a:	85 c0                	test   %eax,%eax
f010645c:	74 11                	je     f010646f <complete_environment_initialization+0x16f>
f010645e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106461:	8b 40 44             	mov    0x44(%eax),%eax
f0106464:	8b 55 08             	mov    0x8(%ebp),%edx
f0106467:	8b 52 48             	mov    0x48(%edx),%edx
f010646a:	89 50 48             	mov    %edx,0x48(%eax)
f010646d:	eb 0b                	jmp    f010647a <complete_environment_initialization+0x17a>
f010646f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106472:	8b 40 48             	mov    0x48(%eax),%eax
f0106475:	a3 58 c9 52 f0       	mov    %eax,0xf052c958
f010647a:	8b 45 08             	mov    0x8(%ebp),%eax
f010647d:	8b 40 48             	mov    0x48(%eax),%eax
f0106480:	85 c0                	test   %eax,%eax
f0106482:	74 11                	je     f0106495 <complete_environment_initialization+0x195>
f0106484:	8b 45 08             	mov    0x8(%ebp),%eax
f0106487:	8b 40 48             	mov    0x48(%eax),%eax
f010648a:	8b 55 08             	mov    0x8(%ebp),%edx
f010648d:	8b 52 44             	mov    0x44(%edx),%edx
f0106490:	89 50 44             	mov    %edx,0x44(%eax)
f0106493:	eb 0b                	jmp    f01064a0 <complete_environment_initialization+0x1a0>
f0106495:	8b 45 08             	mov    0x8(%ebp),%eax
f0106498:	8b 40 44             	mov    0x44(%eax),%eax
f010649b:	a3 54 c9 52 f0       	mov    %eax,0xf052c954
f01064a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01064a3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01064aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01064ad:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01064b4:	a1 60 c9 52 f0       	mov    0xf052c960,%eax
f01064b9:	48                   	dec    %eax
f01064ba:	a3 60 c9 52 f0       	mov    %eax,0xf052c960
	return ;
f01064bf:	90                   	nop
}
f01064c0:	c9                   	leave  
f01064c1:	c3                   	ret    

f01064c2 <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f01064c2:	55                   	push   %ebp
f01064c3:	89 e5                	mov    %esp,%ebp
f01064c5:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f01064c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01064cb:	8b 40 10             	mov    0x10(%eax),%eax
f01064ce:	8d 48 01             	lea    0x1(%eax),%ecx
f01064d1:	8b 55 08             	mov    0x8(%ebp),%edx
f01064d4:	89 4a 10             	mov    %ecx,0x10(%edx)
f01064d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01064da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01064dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01064e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01064e3:	8b 00                	mov    (%eax),%eax
f01064e5:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01064ea:	74 17                	je     f0106503 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f01064ec:	83 ec 04             	sub    $0x4,%esp
f01064ef:	68 5b a1 11 f0       	push   $0xf011a15b
f01064f4:	68 3f 03 00 00       	push   $0x33f
f01064f9:	68 0f a0 11 f0       	push   $0xf011a00f
f01064fe:	e8 73 9c ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106503:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106506:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106509:	8b 45 0c             	mov    0xc(%ebp),%eax
f010650c:	01 d0                	add    %edx,%eax
f010650e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0106511:	eb 0f                	jmp    f0106522 <PROGRAM_SEGMENT_NEXT+0x60>
f0106513:	8b 45 08             	mov    0x8(%ebp),%eax
f0106516:	8b 40 10             	mov    0x10(%eax),%eax
f0106519:	8d 50 01             	lea    0x1(%eax),%edx
f010651c:	8b 45 08             	mov    0x8(%ebp),%eax
f010651f:	89 50 10             	mov    %edx,0x10(%eax)
f0106522:	8b 45 08             	mov    0x8(%ebp),%eax
f0106525:	8b 40 10             	mov    0x10(%eax),%eax
f0106528:	c1 e0 05             	shl    $0x5,%eax
f010652b:	89 c2                	mov    %eax,%edx
f010652d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106530:	01 d0                	add    %edx,%eax
f0106532:	8b 00                	mov    (%eax),%eax
f0106534:	83 f8 01             	cmp    $0x1,%eax
f0106537:	74 13                	je     f010654c <PROGRAM_SEGMENT_NEXT+0x8a>
f0106539:	8b 45 08             	mov    0x8(%ebp),%eax
f010653c:	8b 50 10             	mov    0x10(%eax),%edx
f010653f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106542:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106545:	0f b7 c0             	movzwl %ax,%eax
f0106548:	39 c2                	cmp    %eax,%edx
f010654a:	72 c7                	jb     f0106513 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010654c:	8b 45 08             	mov    0x8(%ebp),%eax
f010654f:	8b 40 10             	mov    0x10(%eax),%eax
f0106552:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0106555:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106558:	8b 40 2c             	mov    0x2c(%eax),%eax
f010655b:	0f b7 c0             	movzwl %ax,%eax
f010655e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106561:	7e 63                	jle    f01065c6 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106563:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106566:	c1 e0 05             	shl    $0x5,%eax
f0106569:	89 c2                	mov    %eax,%edx
f010656b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	8b 50 04             	mov    0x4(%eax),%edx
f0106573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106576:	01 c2                	add    %eax,%edx
f0106578:	8b 45 08             	mov    0x8(%ebp),%eax
f010657b:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010657d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106580:	c1 e0 05             	shl    $0x5,%eax
f0106583:	89 c2                	mov    %eax,%edx
f0106585:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106588:	01 d0                	add    %edx,%eax
f010658a:	8b 50 14             	mov    0x14(%eax),%edx
f010658d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106590:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f0106593:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106596:	c1 e0 05             	shl    $0x5,%eax
f0106599:	89 c2                	mov    %eax,%edx
f010659b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010659e:	01 d0                	add    %edx,%eax
f01065a0:	8b 50 10             	mov    0x10(%eax),%edx
f01065a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01065a6:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f01065a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065ac:	c1 e0 05             	shl    $0x5,%eax
f01065af:	89 c2                	mov    %eax,%edx
f01065b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065b4:	01 d0                	add    %edx,%eax
f01065b6:	8b 40 08             	mov    0x8(%eax),%eax
f01065b9:	89 c2                	mov    %eax,%edx
f01065bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01065be:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f01065c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01065c4:	eb 05                	jmp    f01065cb <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f01065c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	57                   	push   %edi
f01065d1:	56                   	push   %esi
f01065d2:	53                   	push   %ebx
f01065d3:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f01065d6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01065dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01065e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01065e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01065e6:	8b 00                	mov    (%eax),%eax
f01065e8:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01065ed:	74 17                	je     f0106606 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f01065ef:	83 ec 04             	sub    $0x4,%esp
f01065f2:	68 5b a1 11 f0       	push   $0xf011a15b
f01065f7:	68 58 03 00 00       	push   $0x358
f01065fc:	68 0f a0 11 f0       	push   $0xf011a00f
f0106601:	e8 70 9b ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106606:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106609:	8b 50 1c             	mov    0x1c(%eax),%edx
f010660c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010660f:	01 d0                	add    %edx,%eax
f0106611:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f0106614:	eb 07                	jmp    f010661d <PROGRAM_SEGMENT_FIRST+0x50>
f0106616:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106619:	40                   	inc    %eax
f010661a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010661d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106620:	c1 e0 05             	shl    $0x5,%eax
f0106623:	89 c2                	mov    %eax,%edx
f0106625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106628:	01 d0                	add    %edx,%eax
f010662a:	8b 00                	mov    (%eax),%eax
f010662c:	83 f8 01             	cmp    $0x1,%eax
f010662f:	74 10                	je     f0106641 <PROGRAM_SEGMENT_FIRST+0x74>
f0106631:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106637:	8b 40 2c             	mov    0x2c(%eax),%eax
f010663a:	0f b7 c0             	movzwl %ax,%eax
f010663d:	39 c2                	cmp    %eax,%edx
f010663f:	72 d5                	jb     f0106616 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f0106641:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106644:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f0106647:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010664a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010664d:	0f b7 c0             	movzwl %ax,%eax
f0106650:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0106653:	7e 68                	jle    f01066bd <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106655:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106658:	c1 e0 05             	shl    $0x5,%eax
f010665b:	89 c2                	mov    %eax,%edx
f010665d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106660:	01 d0                	add    %edx,%eax
f0106662:	8b 50 04             	mov    0x4(%eax),%edx
f0106665:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106668:	01 d0                	add    %edx,%eax
f010666a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010666d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106670:	c1 e0 05             	shl    $0x5,%eax
f0106673:	89 c2                	mov    %eax,%edx
f0106675:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106678:	01 d0                	add    %edx,%eax
f010667a:	8b 40 14             	mov    0x14(%eax),%eax
f010667d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f0106680:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106683:	c1 e0 05             	shl    $0x5,%eax
f0106686:	89 c2                	mov    %eax,%edx
f0106688:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668b:	01 d0                	add    %edx,%eax
f010668d:	8b 40 10             	mov    0x10(%eax),%eax
f0106690:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f0106693:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106696:	c1 e0 05             	shl    $0x5,%eax
f0106699:	89 c2                	mov    %eax,%edx
f010669b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010669e:	01 d0                	add    %edx,%eax
f01066a0:	8b 40 08             	mov    0x8(%eax),%eax
f01066a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f01066a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01066a9:	89 c3                	mov    %eax,%ebx
f01066ab:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01066ae:	ba 05 00 00 00       	mov    $0x5,%edx
f01066b3:	89 df                	mov    %ebx,%edi
f01066b5:	89 c6                	mov    %eax,%esi
f01066b7:	89 d1                	mov    %edx,%ecx
f01066b9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01066bb:	eb 1c                	jmp    f01066d9 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f01066bd:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f01066c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01066c7:	89 c3                	mov    %eax,%ebx
f01066c9:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01066cc:	ba 05 00 00 00       	mov    $0x5,%edx
f01066d1:	89 df                	mov    %ebx,%edi
f01066d3:	89 c6                	mov    %eax,%esi
f01066d5:	89 d1                	mov    %edx,%ecx
f01066d7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01066d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01066dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01066df:	5b                   	pop    %ebx
f01066e0:	5e                   	pop    %esi
f01066e1:	5f                   	pop    %edi
f01066e2:	5d                   	pop    %ebp
f01066e3:	c2 04 00             	ret    $0x4

f01066e6 <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f01066e6:	55                   	push   %ebp
f01066e7:	89 e5                	mov    %esp,%ebp
f01066e9:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f01066ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01066f3:	eb 29                	jmp    f010671e <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f01066f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066f8:	89 d0                	mov    %edx,%eax
f01066fa:	01 c0                	add    %eax,%eax
f01066fc:	01 d0                	add    %edx,%eax
f01066fe:	c1 e0 02             	shl    $0x2,%eax
f0106701:	05 e0 d7 14 f0       	add    $0xf014d7e0,%eax
f0106706:	8b 00                	mov    (%eax),%eax
f0106708:	83 ec 08             	sub    $0x8,%esp
f010670b:	50                   	push   %eax
f010670c:	ff 75 08             	pushl  0x8(%ebp)
f010670f:	e8 cd 08 01 00       	call   f0116fe1 <strcmp>
f0106714:	83 c4 10             	add    $0x10,%esp
f0106717:	85 c0                	test   %eax,%eax
f0106719:	74 0f                	je     f010672a <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010671b:	ff 45 f4             	incl   -0xc(%ebp)
f010671e:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f0106723:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106726:	7c cd                	jl     f01066f5 <get_user_program_info+0xf>
f0106728:	eb 01                	jmp    f010672b <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010672a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010672b:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f0106730:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106733:	75 1a                	jne    f010674f <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0106735:	83 ec 08             	sub    $0x8,%esp
f0106738:	ff 75 08             	pushl  0x8(%ebp)
f010673b:	68 71 a1 11 f0       	push   $0xf011a171
f0106740:	e8 50 06 00 00       	call   f0106d95 <cprintf>
f0106745:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106748:	b8 00 00 00 00       	mov    $0x0,%eax
f010674d:	eb 11                	jmp    f0106760 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010674f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106752:	89 d0                	mov    %edx,%eax
f0106754:	01 c0                	add    %eax,%eax
f0106756:	01 d0                	add    %edx,%eax
f0106758:	c1 e0 02             	shl    $0x2,%eax
f010675b:	05 e0 d7 14 f0       	add    $0xf014d7e0,%eax
}
f0106760:	c9                   	leave  
f0106761:	c3                   	ret    

f0106762 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0106762:	55                   	push   %ebp
f0106763:	89 e5                	mov    %esp,%ebp
f0106765:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106768:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010676f:	eb 30                	jmp    f01067a1 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0106771:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106774:	89 d0                	mov    %edx,%eax
f0106776:	01 c0                	add    %eax,%eax
f0106778:	01 d0                	add    %edx,%eax
f010677a:	c1 e0 02             	shl    $0x2,%eax
f010677d:	05 e0 d7 14 f0       	add    $0xf014d7e0,%eax
f0106782:	8b 00                	mov    (%eax),%eax
f0106784:	8b 55 08             	mov    0x8(%ebp),%edx
f0106787:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f010678d:	83 ec 08             	sub    $0x8,%esp
f0106790:	50                   	push   %eax
f0106791:	52                   	push   %edx
f0106792:	e8 4a 08 01 00       	call   f0116fe1 <strcmp>
f0106797:	83 c4 10             	add    $0x10,%esp
f010679a:	85 c0                	test   %eax,%eax
f010679c:	74 0f                	je     f01067ad <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010679e:	ff 45 f4             	incl   -0xc(%ebp)
f01067a1:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f01067a6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067a9:	7c c6                	jl     f0106771 <get_user_program_info_by_env+0xf>
f01067ab:	eb 01                	jmp    f01067ae <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f01067ad:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f01067ae:	a1 18 da 14 f0       	mov    0xf014da18,%eax
f01067b3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067b6:	75 17                	jne    f01067cf <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f01067b8:	83 ec 0c             	sub    $0xc,%esp
f01067bb:	68 8c a1 11 f0       	push   $0xf011a18c
f01067c0:	e8 d0 05 00 00       	call   f0106d95 <cprintf>
f01067c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f01067c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01067cd:	eb 11                	jmp    f01067e0 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f01067cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067d2:	89 d0                	mov    %edx,%eax
f01067d4:	01 c0                	add    %eax,%eax
f01067d6:	01 d0                	add    %edx,%eax
f01067d8:	c1 e0 02             	shl    $0x2,%eax
f01067db:	05 e0 d7 14 f0       	add    $0xf014d7e0,%eax
}
f01067e0:	c9                   	leave  
f01067e1:	c3                   	ret    

f01067e2 <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f01067e2:	55                   	push   %ebp
f01067e3:	89 e5                	mov    %esp,%ebp
f01067e5:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f01067e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01067eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f01067ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01067f1:	8b 00                	mov    (%eax),%eax
f01067f3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f01067f8:	74 17                	je     f0106811 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f01067fa:	83 ec 04             	sub    $0x4,%esp
f01067fd:	68 5b a1 11 f0       	push   $0xf011a15b
f0106802:	68 8d 03 00 00       	push   $0x38d
f0106807:	68 0f a0 11 f0       	push   $0xf011a00f
f010680c:	e8 65 99 ff ff       	call   f0100176 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0106811:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106814:	8b 40 18             	mov    0x18(%eax),%eax
f0106817:	89 c2                	mov    %eax,%edx
f0106819:	8b 45 08             	mov    0x8(%ebp),%eax
f010681c:	89 50 30             	mov    %edx,0x30(%eax)
}
f010681f:	90                   	nop
f0106820:	c9                   	leave  
f0106821:	c3                   	ret    

f0106822 <env_exit>:



//it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0106822:	55                   	push   %ebp
f0106823:	89 e5                	mov    %esp,%ebp
f0106825:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106828:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010682d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106830:	83 ec 0c             	sub    $0xc,%esp
f0106833:	50                   	push   %eax
f0106834:	e8 a3 2d 00 00       	call   f01095dc <sched_exit_env>
f0106839:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010683c:	e8 f1 22 00 00       	call   f0108b32 <fos_scheduler>

f0106841 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
/*2015*///obsolete! we run on a scheduler!!
void env_destroy(struct Env *e)
{
f0106841:	55                   	push   %ebp
f0106842:	89 e5                	mov    %esp,%ebp
f0106844:	83 ec 08             	sub    $0x8,%esp
	panic("env_destroy() is obsoleted since 2015!");
f0106847:	83 ec 04             	sub    $0x4,%esp
f010684a:	68 a4 a1 11 f0       	push   $0xf011a1a4
f010684f:	68 a3 03 00 00       	push   $0x3a3
f0106854:	68 0f a0 11 f0       	push   $0xf011a00f
f0106859:	e8 18 99 ff ff       	call   f0100176 <_panic>

f010685e <cleanup_buffers>:
		run_command_prompt();
	 */
}

void cleanup_buffers(struct Env* e)
{
f010685e:	55                   	push   %ebp
f010685f:	89 e5                	mov    %esp,%ebp
f0106861:	83 ec 18             	sub    $0x18,%esp
	// remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f0106864:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010686b:	a1 a0 b6 54 f0       	mov    0xf054b6a0,%eax
f0106870:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106873:	eb 4d                	jmp    f01068c2 <cleanup_buffers+0x64>
	{
		if(ptr_fi->environment == e)
f0106875:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106878:	8b 40 10             	mov    0x10(%eax),%eax
f010687b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010687e:	75 3a                	jne    f01068ba <cleanup_buffers+0x5c>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f0106880:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106883:	8b 50 0c             	mov    0xc(%eax),%edx
f0106886:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106889:	8b 40 10             	mov    0x10(%eax),%eax
f010688c:	83 ec 08             	sub    $0x8,%esp
f010688f:	52                   	push   %edx
f0106890:	50                   	push   %eax
f0106891:	e8 17 e6 ff ff       	call   f0104ead <pt_clear_page_table_entry>
f0106896:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			bufferlist_remove_page(&modified_frame_list, ptr_fi);
f0106899:	83 ec 08             	sub    $0x8,%esp
f010689c:	ff 75 f4             	pushl  -0xc(%ebp)
f010689f:	68 a0 b6 54 f0       	push   $0xf054b6a0
f01068a4:	e8 f2 e2 ff ff       	call   f0104b9b <bufferlist_remove_page>
f01068a9:	83 c4 10             	add    $0x10,%esp

			free_frame(ptr_fi);
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	ff 75 f4             	pushl  -0xc(%ebp)
f01068b2:	e8 d1 d1 ff ff       	call   f0103a88 <free_frame>
f01068b7:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f01068ba:	a1 a8 b6 54 f0       	mov    0xf054b6a8,%eax
f01068bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01068c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01068c6:	74 07                	je     f01068cf <cleanup_buffers+0x71>
f01068c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068cb:	8b 00                	mov    (%eax),%eax
f01068cd:	eb 05                	jmp    f01068d4 <cleanup_buffers+0x76>
f01068cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01068d4:	a3 a8 b6 54 f0       	mov    %eax,0xf054b6a8
f01068d9:	a1 a8 b6 54 f0       	mov    0xf054b6a8,%eax
f01068de:	85 c0                	test   %eax,%eax
f01068e0:	75 93                	jne    f0106875 <cleanup_buffers+0x17>
f01068e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01068e6:	75 8d                	jne    f0106875 <cleanup_buffers+0x17>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f01068e8:	90                   	nop
f01068e9:	c9                   	leave  
f01068ea:	c3                   	ret    

f01068eb <env_run_cmd_prmpt>:


/*2015*///obsolete! use env_exit() instead! it add the exited env to the EXIT list, then reinvoke the scheduler
void env_run_cmd_prmpt()
{
f01068eb:	55                   	push   %ebp
f01068ec:	89 e5                	mov    %esp,%ebp
f01068ee:	83 ec 08             	sub    $0x8,%esp
	panic("env_run_cmd_prmpt() is obsoleted since 2015! use env_exit() instead");
f01068f1:	83 ec 04             	sub    $0x4,%esp
f01068f4:	68 cc a1 11 f0       	push   $0xf011a1cc
f01068f9:	68 d0 03 00 00       	push   $0x3d0
f01068fe:	68 0f a0 11 f0       	push   $0xf011a00f
f0106903:	e8 6e 98 ff ff       	call   f0100176 <_panic>

f0106908 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0106908:	55                   	push   %ebp
f0106909:	89 e5                	mov    %esp,%ebp
f010690b:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010690e:	8b 65 08             	mov    0x8(%ebp),%esp
f0106911:	61                   	popa   
f0106912:	07                   	pop    %es
f0106913:	1f                   	pop    %ds
f0106914:	83 c4 08             	add    $0x8,%esp
f0106917:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0106918:	83 ec 04             	sub    $0x4,%esp
f010691b:	68 10 a2 11 f0       	push   $0xf011a210
f0106920:	68 e2 03 00 00       	push   $0x3e2
f0106925:	68 0f a0 11 f0       	push   $0xf011a00f
f010692a:	e8 47 98 ff ff       	call   f0100176 <_panic>

f010692f <mc146818_read>:

#include <inc/assert.h>

unsigned
mc146818_read(unsigned reg)
{
f010692f:	55                   	push   %ebp
f0106930:	89 e5                	mov    %esp,%ebp
f0106932:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106935:	8b 45 08             	mov    0x8(%ebp),%eax
f0106938:	0f b6 c0             	movzbl %al,%eax
f010693b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106942:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106945:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106948:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010694b:	ee                   	out    %al,(%dx)
f010694c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106953:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106956:	89 c2                	mov    %eax,%edx
f0106958:	ec                   	in     (%dx),%al
f0106959:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010695c:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010695f:	0f b6 c0             	movzbl %al,%eax
}
f0106962:	c9                   	leave  
f0106963:	c3                   	ret    

f0106964 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0106964:	55                   	push   %ebp
f0106965:	89 e5                	mov    %esp,%ebp
f0106967:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010696a:	8b 45 08             	mov    0x8(%ebp),%eax
f010696d:	0f b6 c0             	movzbl %al,%eax
f0106970:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106977:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010697a:	8a 45 f6             	mov    -0xa(%ebp),%al
f010697d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106980:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0106981:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106984:	0f b6 c0             	movzbl %al,%eax
f0106987:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010698e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106991:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106994:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106997:	ee                   	out    %al,(%dx)
}
f0106998:	90                   	nop
f0106999:	c9                   	leave  
f010699a:	c3                   	ret    

f010699b <kclock_start>:


void
kclock_start(uint8 quantum)
{
f010699b:	55                   	push   %ebp
f010699c:	89 e5                	mov    %esp,%ebp
f010699e:	83 ec 28             	sub    $0x28,%esp
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01069a7:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01069ae:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01069b2:	8a 45 f3             	mov    -0xd(%ebp),%al
f01069b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01069b8:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	kclock_set_quantum(quantum);
f01069b9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01069bd:	83 ec 0c             	sub    $0xc,%esp
f01069c0:	50                   	push   %eax
f01069c1:	e8 20 00 00 00       	call   f01069e6 <kclock_set_quantum>
f01069c6:	83 c4 10             	add    $0x10,%esp

	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("Timer Started: Counter0 Value = %d\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01069c9:	66 a1 1c da 14 f0    	mov    0xf014da1c,%ax
f01069cf:	0f b7 c0             	movzwl %ax,%eax
f01069d2:	25 fe ff 00 00       	and    $0xfffe,%eax
f01069d7:	83 ec 0c             	sub    $0xc,%esp
f01069da:	50                   	push   %eax
f01069db:	e8 16 03 00 00       	call   f0106cf6 <irq_setmask_8259A>
f01069e0:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01069e3:	90                   	nop
f01069e4:	c9                   	leave  
f01069e5:	c3                   	ret    

f01069e6 <kclock_set_quantum>:
//==============

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01069e6:	55                   	push   %ebp
f01069e7:	89 e5                	mov    %esp,%ebp
f01069e9:	53                   	push   %ebx
f01069ea:	83 ec 14             	sub    $0x14,%esp
f01069ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f0:	88 45 f4             	mov    %al,-0xc(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
	{
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f01069f3:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f01069f7:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01069fc:	99                   	cltd   
f01069fd:	f7 fb                	idiv   %ebx
f01069ff:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106a05:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f0106a09:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106a0e:	99                   	cltd   
f0106a0f:	f7 fb                	idiv   %ebx
f0106a11:	89 c3                	mov    %eax,%ebx
f0106a13:	89 c8                	mov    %ecx,%eax
f0106a15:	99                   	cltd   
f0106a16:	f7 fb                	idiv   %ebx
f0106a18:	0f b7 c0             	movzwl %ax,%eax
f0106a1b:	83 ec 0c             	sub    $0xc,%esp
f0106a1e:	50                   	push   %eax
f0106a1f:	e8 8f 00 00 00       	call   f0106ab3 <kclock_write_cnt0_LSB_first>
f0106a24:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0106a27:	90                   	nop
f0106a28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106a2b:	c9                   	leave  
f0106a2c:	c3                   	ret    

f0106a2d <kclock_resume>:
//==============

void
kclock_resume(void)
{
f0106a2d:	55                   	push   %ebp
f0106a2e:	89 e5                	mov    %esp,%ebp
f0106a30:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0106a33:	e8 bd 00 00 00       	call   f0106af5 <kclock_read_cnt0>
f0106a38:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0106a3c:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106a43:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106a47:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106a4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106a4d:	ee                   	out    %al,(%dx)
	//cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 10)
f0106a4e:	66 83 7d f6 09       	cmpw   $0x9,-0xa(%ebp)
f0106a53:	77 06                	ja     f0106a5b <kclock_resume+0x2e>
	{
		cnt0 = 10;
f0106a55:	66 c7 45 f6 0a 00    	movw   $0xa,-0xa(%ebp)
	}
	//================
//	outb(TIMER_CNTR0, (uint8)(cnt0 & 0x00FF));
//	outb(TIMER_CNTR0, (uint8)((cnt0>>8) & 0x00FF));
	kclock_write_cnt0_LSB_first(cnt0) ;
f0106a5b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a5f:	83 ec 0c             	sub    $0xc,%esp
f0106a62:	50                   	push   %eax
f0106a63:	e8 4b 00 00 00       	call   f0106ab3 <kclock_write_cnt0_LSB_first>
f0106a68:	83 c4 10             	add    $0x10,%esp

//	cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106a6b:	66 a1 1c da 14 f0    	mov    0xf014da1c,%ax
f0106a71:	0f b7 c0             	movzwl %ax,%eax
f0106a74:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106a79:	83 ec 0c             	sub    $0xc,%esp
f0106a7c:	50                   	push   %eax
f0106a7d:	e8 74 02 00 00       	call   f0106cf6 <irq_setmask_8259A>
f0106a82:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0106a85:	90                   	nop
f0106a86:	c9                   	leave  
f0106a87:	c3                   	ret    

f0106a88 <kclock_stop>:

void
kclock_stop(void)
{
f0106a88:	55                   	push   %ebp
f0106a89:	89 e5                	mov    %esp,%ebp
f0106a8b:	83 ec 18             	sub    $0x18,%esp
f0106a8e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106a95:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106a99:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106a9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106a9f:	ee                   	out    %al,(%dx)
//		}
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Before Lag = %x, After lag = %x\n", cnt0_before, cnt0_after );


	irq_setmask_8259A(0xFFFF);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	68 ff ff 00 00       	push   $0xffff
f0106aa8:	e8 49 02 00 00       	call   f0106cf6 <irq_setmask_8259A>
f0106aad:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0106ab0:	90                   	nop
f0106ab1:	c9                   	leave  
f0106ab2:	c3                   	ret    

f0106ab3 <kclock_write_cnt0_LSB_first>:

//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0106ab3:	55                   	push   %ebp
f0106ab4:	89 e5                	mov    %esp,%ebp
f0106ab6:	83 ec 14             	sub    $0x14,%esp
f0106ab9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106abc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0106ac0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac3:	0f b6 c0             	movzbl %al,%eax
f0106ac6:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0106acd:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106ad0:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106ad3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106ad6:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0106ad7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ada:	66 c1 e8 08          	shr    $0x8,%ax
f0106ade:	0f b6 c0             	movzbl %al,%eax
f0106ae1:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0106ae8:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106aeb:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106aee:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106af1:	ee                   	out    %al,(%dx)
}
f0106af2:	90                   	nop
f0106af3:	c9                   	leave  
f0106af4:	c3                   	ret    

f0106af5 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0106af5:	55                   	push   %ebp
f0106af6:	89 e5                	mov    %esp,%ebp
f0106af8:	83 ec 20             	sub    $0x20,%esp
f0106afb:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b02:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b05:	89 c2                	mov    %eax,%edx
f0106b07:	ec                   	in     (%dx),%al
f0106b08:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106b0b:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106b0e:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b11:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b1b:	89 c2                	mov    %eax,%edx
f0106b1d:	ec                   	in     (%dx),%al
f0106b1e:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0106b21:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106b24:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106b27:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0106b2b:	c1 e0 08             	shl    $0x8,%eax
f0106b2e:	89 c2                	mov    %eax,%edx
f0106b30:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106b34:	09 d0                	or     %edx,%eax
f0106b36:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0106b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b3d:	c9                   	leave  
f0106b3e:	c3                   	ret    

f0106b3f <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0106b3f:	55                   	push   %ebp
f0106b40:	89 e5                	mov    %esp,%ebp
f0106b42:	83 ec 30             	sub    $0x30,%esp
f0106b45:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b4f:	89 c2                	mov    %eax,%edx
f0106b51:	ec                   	in     (%dx),%al
f0106b52:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0106b55:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0106b58:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b5b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106b62:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106b66:	8a 45 dc             	mov    -0x24(%ebp),%al
f0106b69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106b6c:	ee                   	out    %al,(%dx)
f0106b6d:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b77:	89 c2                	mov    %eax,%edx
f0106b79:	ec                   	in     (%dx),%al
f0106b7a:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0106b7d:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106b80:	88 45 f3             	mov    %al,-0xd(%ebp)
f0106b83:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b8d:	89 c2                	mov    %eax,%edx
f0106b8f:	ec                   	in     (%dx),%al
f0106b90:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0106b93:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106b96:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106b99:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0106b9d:	c1 e0 08             	shl    $0x8,%eax
f0106ba0:	89 c2                	mov    %eax,%edx
f0106ba2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0106ba6:	09 d0                	or     %edx,%eax
f0106ba8:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0106bac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106bb0:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0106bb7:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106bba:	8a 45 df             	mov    -0x21(%ebp),%al
f0106bbd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106bc0:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0106bc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0106bc4:	c9                   	leave  
f0106bc5:	c3                   	ret    

f0106bc6 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106bc6:	55                   	push   %ebp
f0106bc7:	89 e5                	mov    %esp,%ebp
f0106bc9:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106bcc:	c7 05 64 c9 52 f0 01 	movl   $0x1,0xf052c964
f0106bd3:	00 00 00 
f0106bd6:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106bdd:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f0106be1:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106be4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106be7:	ee                   	out    %al,(%dx)
f0106be8:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106bef:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106bf3:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106bf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106bf9:	ee                   	out    %al,(%dx)
f0106bfa:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106c01:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106c05:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106c08:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106c0b:	ee                   	out    %al,(%dx)
f0106c0c:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106c13:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106c17:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106c1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106c1d:	ee                   	out    %al,(%dx)
f0106c1e:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106c25:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106c29:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106c2c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106c2f:	ee                   	out    %al,(%dx)
f0106c30:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106c37:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106c3b:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106c3e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106c41:	ee                   	out    %al,(%dx)
f0106c42:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106c49:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106c4d:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106c50:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106c53:	ee                   	out    %al,(%dx)
f0106c54:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106c5b:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106c5f:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106c62:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106c65:	ee                   	out    %al,(%dx)
f0106c66:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106c6d:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106c71:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106c74:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106c77:	ee                   	out    %al,(%dx)
f0106c78:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106c7f:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106c83:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106c86:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106c89:	ee                   	out    %al,(%dx)
f0106c8a:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106c91:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106c95:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106c98:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106c9b:	ee                   	out    %al,(%dx)
f0106c9c:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ca3:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ca7:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106caa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106cad:	ee                   	out    %al,(%dx)
f0106cae:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106cb5:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106cb9:	8a 45 be             	mov    -0x42(%ebp),%al
f0106cbc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106cbf:	ee                   	out    %al,(%dx)
f0106cc0:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106cc7:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ccb:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106cce:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106cd1:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0106cd2:	66 a1 1c da 14 f0    	mov    0xf014da1c,%ax
f0106cd8:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106cdc:	74 15                	je     f0106cf3 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106cde:	66 a1 1c da 14 f0    	mov    0xf014da1c,%ax
f0106ce4:	0f b7 c0             	movzwl %ax,%eax
f0106ce7:	83 ec 0c             	sub    $0xc,%esp
f0106cea:	50                   	push   %eax
f0106ceb:	e8 06 00 00 00       	call   f0106cf6 <irq_setmask_8259A>
f0106cf0:	83 c4 10             	add    $0x10,%esp
}
f0106cf3:	90                   	nop
f0106cf4:	c9                   	leave  
f0106cf5:	c3                   	ret    

f0106cf6 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106cf6:	55                   	push   %ebp
f0106cf7:	89 e5                	mov    %esp,%ebp
f0106cf9:	83 ec 14             	sub    $0x14,%esp
f0106cfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106cff:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0106d03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d06:	66 a3 1c da 14 f0    	mov    %ax,0xf014da1c
	if (!didinit)
f0106d0c:	a1 64 c9 52 f0       	mov    0xf052c964,%eax
f0106d11:	85 c0                	test   %eax,%eax
f0106d13:	74 34                	je     f0106d49 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0106d15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d18:	0f b6 c0             	movzbl %al,%eax
f0106d1b:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106d22:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106d25:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106d28:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106d2b:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d2f:	66 c1 e8 08          	shr    $0x8,%ax
f0106d33:	0f b6 c0             	movzbl %al,%eax
f0106d36:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106d3d:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106d40:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106d43:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106d46:	ee                   	out    %al,(%dx)
f0106d47:	eb 01                	jmp    f0106d4a <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106d49:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106d4a:	c9                   	leave  
f0106d4b:	c3                   	ret    

f0106d4c <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0106d4c:	55                   	push   %ebp
f0106d4d:	89 e5                	mov    %esp,%ebp
f0106d4f:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0106d52:	83 ec 0c             	sub    $0xc,%esp
f0106d55:	ff 75 08             	pushl  0x8(%ebp)
f0106d58:	e8 91 9f ff ff       	call   f0100cee <cputchar>
f0106d5d:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0106d60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d63:	83 c0 04             	add    $0x4,%eax
f0106d66:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0106d69:	90                   	nop
f0106d6a:	c9                   	leave  
f0106d6b:	c3                   	ret    

f0106d6c <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0106d6c:	55                   	push   %ebp
f0106d6d:	89 e5                	mov    %esp,%ebp
f0106d6f:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0106d72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0106d79:	ff 75 0c             	pushl  0xc(%ebp)
f0106d7c:	ff 75 08             	pushl  0x8(%ebp)
f0106d7f:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106d82:	50                   	push   %eax
f0106d83:	68 4c 6d 10 f0       	push   $0xf0106d4c
f0106d88:	e8 9a fa 00 00       	call   f0116827 <vprintfmt>
f0106d8d:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0106d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106d93:	c9                   	leave  
f0106d94:	c3                   	ret    

f0106d95 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0106d95:	55                   	push   %ebp
f0106d96:	89 e5                	mov    %esp,%ebp
f0106d98:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0106d9b:	8d 45 0c             	lea    0xc(%ebp),%eax
f0106d9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0106da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106da4:	83 ec 08             	sub    $0x8,%esp
f0106da7:	ff 75 f4             	pushl  -0xc(%ebp)
f0106daa:	50                   	push   %eax
f0106dab:	e8 bc ff ff ff       	call   f0106d6c <vcprintf>
f0106db0:	83 c4 10             	add    $0x10,%esp
f0106db3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0106db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0106db9:	c9                   	leave  
f0106dba:	c3                   	ret    

f0106dbb <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f0106dbb:	55                   	push   %ebp
f0106dbc:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f0106dbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dc1:	83 f8 13             	cmp    $0x13,%eax
f0106dc4:	77 0c                	ja     f0106dd2 <trapname+0x17>
		return excnames[trapno];
f0106dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dc9:	8b 04 85 e0 a5 11 f0 	mov    -0xfee5a20(,%eax,4),%eax
f0106dd0:	eb 12                	jmp    f0106de4 <trapname+0x29>
	if (trapno == T_SYSCALL)
f0106dd2:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0106dd6:	75 07                	jne    f0106ddf <trapname+0x24>
		return "System call";
f0106dd8:	b8 20 a2 11 f0       	mov    $0xf011a220,%eax
f0106ddd:	eb 05                	jmp    f0106de4 <trapname+0x29>
	return "(unknown trap)";
f0106ddf:	b8 2c a2 11 f0       	mov    $0xf011a22c,%eax
}
f0106de4:	5d                   	pop    %ebp
f0106de5:	c3                   	ret    

f0106de6 <idt_init>:


void
idt_init(void)
{
f0106de6:	55                   	push   %ebp
f0106de7:	89 e5                	mov    %esp,%ebp
f0106de9:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f0106dec:	b8 9e 87 10 f0       	mov    $0xf010879e,%eax
f0106df1:	66 a3 10 ca 52 f0    	mov    %ax,0xf052ca10
f0106df7:	66 c7 05 12 ca 52 f0 	movw   $0x8,0xf052ca12
f0106dfe:	08 00 
f0106e00:	a0 14 ca 52 f0       	mov    0xf052ca14,%al
f0106e05:	83 e0 e0             	and    $0xffffffe0,%eax
f0106e08:	a2 14 ca 52 f0       	mov    %al,0xf052ca14
f0106e0d:	a0 14 ca 52 f0       	mov    0xf052ca14,%al
f0106e12:	83 e0 1f             	and    $0x1f,%eax
f0106e15:	a2 14 ca 52 f0       	mov    %al,0xf052ca14
f0106e1a:	a0 15 ca 52 f0       	mov    0xf052ca15,%al
f0106e1f:	83 e0 f0             	and    $0xfffffff0,%eax
f0106e22:	83 c8 0e             	or     $0xe,%eax
f0106e25:	a2 15 ca 52 f0       	mov    %al,0xf052ca15
f0106e2a:	a0 15 ca 52 f0       	mov    0xf052ca15,%al
f0106e2f:	83 e0 ef             	and    $0xffffffef,%eax
f0106e32:	a2 15 ca 52 f0       	mov    %al,0xf052ca15
f0106e37:	a0 15 ca 52 f0       	mov    0xf052ca15,%al
f0106e3c:	83 e0 9f             	and    $0xffffff9f,%eax
f0106e3f:	a2 15 ca 52 f0       	mov    %al,0xf052ca15
f0106e44:	a0 15 ca 52 f0       	mov    0xf052ca15,%al
f0106e49:	83 c8 80             	or     $0xffffff80,%eax
f0106e4c:	a2 15 ca 52 f0       	mov    %al,0xf052ca15
f0106e51:	b8 9e 87 10 f0       	mov    $0xf010879e,%eax
f0106e56:	c1 e8 10             	shr    $0x10,%eax
f0106e59:	66 a3 16 ca 52 f0    	mov    %ax,0xf052ca16
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f0106e5f:	b8 a6 87 10 f0       	mov    $0xf01087a6,%eax
f0106e64:	66 a3 20 cb 52 f0    	mov    %ax,0xf052cb20
f0106e6a:	66 c7 05 22 cb 52 f0 	movw   $0x8,0xf052cb22
f0106e71:	08 00 
f0106e73:	a0 24 cb 52 f0       	mov    0xf052cb24,%al
f0106e78:	83 e0 e0             	and    $0xffffffe0,%eax
f0106e7b:	a2 24 cb 52 f0       	mov    %al,0xf052cb24
f0106e80:	a0 24 cb 52 f0       	mov    0xf052cb24,%al
f0106e85:	83 e0 1f             	and    $0x1f,%eax
f0106e88:	a2 24 cb 52 f0       	mov    %al,0xf052cb24
f0106e8d:	a0 25 cb 52 f0       	mov    0xf052cb25,%al
f0106e92:	83 e0 f0             	and    $0xfffffff0,%eax
f0106e95:	83 c8 0e             	or     $0xe,%eax
f0106e98:	a2 25 cb 52 f0       	mov    %al,0xf052cb25
f0106e9d:	a0 25 cb 52 f0       	mov    0xf052cb25,%al
f0106ea2:	83 e0 ef             	and    $0xffffffef,%eax
f0106ea5:	a2 25 cb 52 f0       	mov    %al,0xf052cb25
f0106eaa:	a0 25 cb 52 f0       	mov    0xf052cb25,%al
f0106eaf:	83 c8 60             	or     $0x60,%eax
f0106eb2:	a2 25 cb 52 f0       	mov    %al,0xf052cb25
f0106eb7:	a0 25 cb 52 f0       	mov    0xf052cb25,%al
f0106ebc:	83 c8 80             	or     $0xffffff80,%eax
f0106ebf:	a2 25 cb 52 f0       	mov    %al,0xf052cb25
f0106ec4:	b8 a6 87 10 f0       	mov    $0xf01087a6,%eax
f0106ec9:	c1 e8 10             	shr    $0x10,%eax
f0106ecc:	66 a3 26 cb 52 f0    	mov    %ax,0xf052cb26
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0106ed2:	b8 b0 87 10 f0       	mov    $0xf01087b0,%eax
f0106ed7:	66 a3 e0 c9 52 f0    	mov    %ax,0xf052c9e0
f0106edd:	66 c7 05 e2 c9 52 f0 	movw   $0x8,0xf052c9e2
f0106ee4:	08 00 
f0106ee6:	a0 e4 c9 52 f0       	mov    0xf052c9e4,%al
f0106eeb:	83 e0 e0             	and    $0xffffffe0,%eax
f0106eee:	a2 e4 c9 52 f0       	mov    %al,0xf052c9e4
f0106ef3:	a0 e4 c9 52 f0       	mov    0xf052c9e4,%al
f0106ef8:	83 e0 1f             	and    $0x1f,%eax
f0106efb:	a2 e4 c9 52 f0       	mov    %al,0xf052c9e4
f0106f00:	a0 e5 c9 52 f0       	mov    0xf052c9e5,%al
f0106f05:	83 e0 f0             	and    $0xfffffff0,%eax
f0106f08:	83 c8 0e             	or     $0xe,%eax
f0106f0b:	a2 e5 c9 52 f0       	mov    %al,0xf052c9e5
f0106f10:	a0 e5 c9 52 f0       	mov    0xf052c9e5,%al
f0106f15:	83 e0 ef             	and    $0xffffffef,%eax
f0106f18:	a2 e5 c9 52 f0       	mov    %al,0xf052c9e5
f0106f1d:	a0 e5 c9 52 f0       	mov    0xf052c9e5,%al
f0106f22:	83 e0 9f             	and    $0xffffff9f,%eax
f0106f25:	a2 e5 c9 52 f0       	mov    %al,0xf052c9e5
f0106f2a:	a0 e5 c9 52 f0       	mov    0xf052c9e5,%al
f0106f2f:	83 c8 80             	or     $0xffffff80,%eax
f0106f32:	a2 e5 c9 52 f0       	mov    %al,0xf052c9e5
f0106f37:	b8 b0 87 10 f0       	mov    $0xf01087b0,%eax
f0106f3c:	c1 e8 10             	shr    $0x10,%eax
f0106f3f:	66 a3 e6 c9 52 f0    	mov    %ax,0xf052c9e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f0106f45:	b8 b8 87 10 f0       	mov    $0xf01087b8,%eax
f0106f4a:	66 a3 a0 c9 52 f0    	mov    %ax,0xf052c9a0
f0106f50:	66 c7 05 a2 c9 52 f0 	movw   $0x8,0xf052c9a2
f0106f57:	08 00 
f0106f59:	a0 a4 c9 52 f0       	mov    0xf052c9a4,%al
f0106f5e:	83 e0 e0             	and    $0xffffffe0,%eax
f0106f61:	a2 a4 c9 52 f0       	mov    %al,0xf052c9a4
f0106f66:	a0 a4 c9 52 f0       	mov    0xf052c9a4,%al
f0106f6b:	83 e0 1f             	and    $0x1f,%eax
f0106f6e:	a2 a4 c9 52 f0       	mov    %al,0xf052c9a4
f0106f73:	a0 a5 c9 52 f0       	mov    0xf052c9a5,%al
f0106f78:	83 e0 f0             	and    $0xfffffff0,%eax
f0106f7b:	83 c8 0e             	or     $0xe,%eax
f0106f7e:	a2 a5 c9 52 f0       	mov    %al,0xf052c9a5
f0106f83:	a0 a5 c9 52 f0       	mov    0xf052c9a5,%al
f0106f88:	83 e0 ef             	and    $0xffffffef,%eax
f0106f8b:	a2 a5 c9 52 f0       	mov    %al,0xf052c9a5
f0106f90:	a0 a5 c9 52 f0       	mov    0xf052c9a5,%al
f0106f95:	83 c8 60             	or     $0x60,%eax
f0106f98:	a2 a5 c9 52 f0       	mov    %al,0xf052c9a5
f0106f9d:	a0 a5 c9 52 f0       	mov    0xf052c9a5,%al
f0106fa2:	83 c8 80             	or     $0xffffff80,%eax
f0106fa5:	a2 a5 c9 52 f0       	mov    %al,0xf052c9a5
f0106faa:	b8 b8 87 10 f0       	mov    $0xf01087b8,%eax
f0106faf:	c1 e8 10             	shr    $0x10,%eax
f0106fb2:	66 a3 a6 c9 52 f0    	mov    %ax,0xf052c9a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0106fb8:	b8 c2 87 10 f0       	mov    $0xf01087c2,%eax
f0106fbd:	66 a3 a8 c9 52 f0    	mov    %ax,0xf052c9a8
f0106fc3:	66 c7 05 aa c9 52 f0 	movw   $0x8,0xf052c9aa
f0106fca:	08 00 
f0106fcc:	a0 ac c9 52 f0       	mov    0xf052c9ac,%al
f0106fd1:	83 e0 e0             	and    $0xffffffe0,%eax
f0106fd4:	a2 ac c9 52 f0       	mov    %al,0xf052c9ac
f0106fd9:	a0 ac c9 52 f0       	mov    0xf052c9ac,%al
f0106fde:	83 e0 1f             	and    $0x1f,%eax
f0106fe1:	a2 ac c9 52 f0       	mov    %al,0xf052c9ac
f0106fe6:	a0 ad c9 52 f0       	mov    0xf052c9ad,%al
f0106feb:	83 c8 0f             	or     $0xf,%eax
f0106fee:	a2 ad c9 52 f0       	mov    %al,0xf052c9ad
f0106ff3:	a0 ad c9 52 f0       	mov    0xf052c9ad,%al
f0106ff8:	83 e0 ef             	and    $0xffffffef,%eax
f0106ffb:	a2 ad c9 52 f0       	mov    %al,0xf052c9ad
f0107000:	a0 ad c9 52 f0       	mov    0xf052c9ad,%al
f0107005:	83 c8 60             	or     $0x60,%eax
f0107008:	a2 ad c9 52 f0       	mov    %al,0xf052c9ad
f010700d:	a0 ad c9 52 f0       	mov    0xf052c9ad,%al
f0107012:	83 c8 80             	or     $0xffffff80,%eax
f0107015:	a2 ad c9 52 f0       	mov    %al,0xf052c9ad
f010701a:	b8 c2 87 10 f0       	mov    $0xf01087c2,%eax
f010701f:	c1 e8 10             	shr    $0x10,%eax
f0107022:	66 a3 ae c9 52 f0    	mov    %ax,0xf052c9ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0107028:	b8 cc 87 10 f0       	mov    $0xf01087cc,%eax
f010702d:	66 a3 b0 c9 52 f0    	mov    %ax,0xf052c9b0
f0107033:	66 c7 05 b2 c9 52 f0 	movw   $0x8,0xf052c9b2
f010703a:	08 00 
f010703c:	a0 b4 c9 52 f0       	mov    0xf052c9b4,%al
f0107041:	83 e0 e0             	and    $0xffffffe0,%eax
f0107044:	a2 b4 c9 52 f0       	mov    %al,0xf052c9b4
f0107049:	a0 b4 c9 52 f0       	mov    0xf052c9b4,%al
f010704e:	83 e0 1f             	and    $0x1f,%eax
f0107051:	a2 b4 c9 52 f0       	mov    %al,0xf052c9b4
f0107056:	a0 b5 c9 52 f0       	mov    0xf052c9b5,%al
f010705b:	83 e0 f0             	and    $0xfffffff0,%eax
f010705e:	83 c8 0e             	or     $0xe,%eax
f0107061:	a2 b5 c9 52 f0       	mov    %al,0xf052c9b5
f0107066:	a0 b5 c9 52 f0       	mov    0xf052c9b5,%al
f010706b:	83 e0 ef             	and    $0xffffffef,%eax
f010706e:	a2 b5 c9 52 f0       	mov    %al,0xf052c9b5
f0107073:	a0 b5 c9 52 f0       	mov    0xf052c9b5,%al
f0107078:	83 c8 60             	or     $0x60,%eax
f010707b:	a2 b5 c9 52 f0       	mov    %al,0xf052c9b5
f0107080:	a0 b5 c9 52 f0       	mov    0xf052c9b5,%al
f0107085:	83 c8 80             	or     $0xffffff80,%eax
f0107088:	a2 b5 c9 52 f0       	mov    %al,0xf052c9b5
f010708d:	b8 cc 87 10 f0       	mov    $0xf01087cc,%eax
f0107092:	c1 e8 10             	shr    $0x10,%eax
f0107095:	66 a3 b6 c9 52 f0    	mov    %ax,0xf052c9b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010709b:	b8 d6 87 10 f0       	mov    $0xf01087d6,%eax
f01070a0:	66 a3 b8 c9 52 f0    	mov    %ax,0xf052c9b8
f01070a6:	66 c7 05 ba c9 52 f0 	movw   $0x8,0xf052c9ba
f01070ad:	08 00 
f01070af:	a0 bc c9 52 f0       	mov    0xf052c9bc,%al
f01070b4:	83 e0 e0             	and    $0xffffffe0,%eax
f01070b7:	a2 bc c9 52 f0       	mov    %al,0xf052c9bc
f01070bc:	a0 bc c9 52 f0       	mov    0xf052c9bc,%al
f01070c1:	83 e0 1f             	and    $0x1f,%eax
f01070c4:	a2 bc c9 52 f0       	mov    %al,0xf052c9bc
f01070c9:	a0 bd c9 52 f0       	mov    0xf052c9bd,%al
f01070ce:	83 c8 0f             	or     $0xf,%eax
f01070d1:	a2 bd c9 52 f0       	mov    %al,0xf052c9bd
f01070d6:	a0 bd c9 52 f0       	mov    0xf052c9bd,%al
f01070db:	83 e0 ef             	and    $0xffffffef,%eax
f01070de:	a2 bd c9 52 f0       	mov    %al,0xf052c9bd
f01070e3:	a0 bd c9 52 f0       	mov    0xf052c9bd,%al
f01070e8:	83 c8 60             	or     $0x60,%eax
f01070eb:	a2 bd c9 52 f0       	mov    %al,0xf052c9bd
f01070f0:	a0 bd c9 52 f0       	mov    0xf052c9bd,%al
f01070f5:	83 c8 80             	or     $0xffffff80,%eax
f01070f8:	a2 bd c9 52 f0       	mov    %al,0xf052c9bd
f01070fd:	b8 d6 87 10 f0       	mov    $0xf01087d6,%eax
f0107102:	c1 e8 10             	shr    $0x10,%eax
f0107105:	66 a3 be c9 52 f0    	mov    %ax,0xf052c9be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010710b:	b8 e0 87 10 f0       	mov    $0xf01087e0,%eax
f0107110:	66 a3 c0 c9 52 f0    	mov    %ax,0xf052c9c0
f0107116:	66 c7 05 c2 c9 52 f0 	movw   $0x8,0xf052c9c2
f010711d:	08 00 
f010711f:	a0 c4 c9 52 f0       	mov    0xf052c9c4,%al
f0107124:	83 e0 e0             	and    $0xffffffe0,%eax
f0107127:	a2 c4 c9 52 f0       	mov    %al,0xf052c9c4
f010712c:	a0 c4 c9 52 f0       	mov    0xf052c9c4,%al
f0107131:	83 e0 1f             	and    $0x1f,%eax
f0107134:	a2 c4 c9 52 f0       	mov    %al,0xf052c9c4
f0107139:	a0 c5 c9 52 f0       	mov    0xf052c9c5,%al
f010713e:	83 c8 0f             	or     $0xf,%eax
f0107141:	a2 c5 c9 52 f0       	mov    %al,0xf052c9c5
f0107146:	a0 c5 c9 52 f0       	mov    0xf052c9c5,%al
f010714b:	83 e0 ef             	and    $0xffffffef,%eax
f010714e:	a2 c5 c9 52 f0       	mov    %al,0xf052c9c5
f0107153:	a0 c5 c9 52 f0       	mov    0xf052c9c5,%al
f0107158:	83 c8 60             	or     $0x60,%eax
f010715b:	a2 c5 c9 52 f0       	mov    %al,0xf052c9c5
f0107160:	a0 c5 c9 52 f0       	mov    0xf052c9c5,%al
f0107165:	83 c8 80             	or     $0xffffff80,%eax
f0107168:	a2 c5 c9 52 f0       	mov    %al,0xf052c9c5
f010716d:	b8 e0 87 10 f0       	mov    $0xf01087e0,%eax
f0107172:	c1 e8 10             	shr    $0x10,%eax
f0107175:	66 a3 c6 c9 52 f0    	mov    %ax,0xf052c9c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010717b:	b8 ea 87 10 f0       	mov    $0xf01087ea,%eax
f0107180:	66 a3 c8 c9 52 f0    	mov    %ax,0xf052c9c8
f0107186:	66 c7 05 ca c9 52 f0 	movw   $0x8,0xf052c9ca
f010718d:	08 00 
f010718f:	a0 cc c9 52 f0       	mov    0xf052c9cc,%al
f0107194:	83 e0 e0             	and    $0xffffffe0,%eax
f0107197:	a2 cc c9 52 f0       	mov    %al,0xf052c9cc
f010719c:	a0 cc c9 52 f0       	mov    0xf052c9cc,%al
f01071a1:	83 e0 1f             	and    $0x1f,%eax
f01071a4:	a2 cc c9 52 f0       	mov    %al,0xf052c9cc
f01071a9:	a0 cd c9 52 f0       	mov    0xf052c9cd,%al
f01071ae:	83 e0 f0             	and    $0xfffffff0,%eax
f01071b1:	83 c8 0e             	or     $0xe,%eax
f01071b4:	a2 cd c9 52 f0       	mov    %al,0xf052c9cd
f01071b9:	a0 cd c9 52 f0       	mov    0xf052c9cd,%al
f01071be:	83 e0 ef             	and    $0xffffffef,%eax
f01071c1:	a2 cd c9 52 f0       	mov    %al,0xf052c9cd
f01071c6:	a0 cd c9 52 f0       	mov    0xf052c9cd,%al
f01071cb:	83 c8 60             	or     $0x60,%eax
f01071ce:	a2 cd c9 52 f0       	mov    %al,0xf052c9cd
f01071d3:	a0 cd c9 52 f0       	mov    0xf052c9cd,%al
f01071d8:	83 c8 80             	or     $0xffffff80,%eax
f01071db:	a2 cd c9 52 f0       	mov    %al,0xf052c9cd
f01071e0:	b8 ea 87 10 f0       	mov    $0xf01087ea,%eax
f01071e5:	c1 e8 10             	shr    $0x10,%eax
f01071e8:	66 a3 ce c9 52 f0    	mov    %ax,0xf052c9ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f01071ee:	b8 f4 87 10 f0       	mov    $0xf01087f4,%eax
f01071f3:	66 a3 d0 c9 52 f0    	mov    %ax,0xf052c9d0
f01071f9:	66 c7 05 d2 c9 52 f0 	movw   $0x8,0xf052c9d2
f0107200:	08 00 
f0107202:	a0 d4 c9 52 f0       	mov    0xf052c9d4,%al
f0107207:	83 e0 e0             	and    $0xffffffe0,%eax
f010720a:	a2 d4 c9 52 f0       	mov    %al,0xf052c9d4
f010720f:	a0 d4 c9 52 f0       	mov    0xf052c9d4,%al
f0107214:	83 e0 1f             	and    $0x1f,%eax
f0107217:	a2 d4 c9 52 f0       	mov    %al,0xf052c9d4
f010721c:	a0 d5 c9 52 f0       	mov    0xf052c9d5,%al
f0107221:	83 e0 f0             	and    $0xfffffff0,%eax
f0107224:	83 c8 0e             	or     $0xe,%eax
f0107227:	a2 d5 c9 52 f0       	mov    %al,0xf052c9d5
f010722c:	a0 d5 c9 52 f0       	mov    0xf052c9d5,%al
f0107231:	83 e0 ef             	and    $0xffffffef,%eax
f0107234:	a2 d5 c9 52 f0       	mov    %al,0xf052c9d5
f0107239:	a0 d5 c9 52 f0       	mov    0xf052c9d5,%al
f010723e:	83 c8 60             	or     $0x60,%eax
f0107241:	a2 d5 c9 52 f0       	mov    %al,0xf052c9d5
f0107246:	a0 d5 c9 52 f0       	mov    0xf052c9d5,%al
f010724b:	83 c8 80             	or     $0xffffff80,%eax
f010724e:	a2 d5 c9 52 f0       	mov    %al,0xf052c9d5
f0107253:	b8 f4 87 10 f0       	mov    $0xf01087f4,%eax
f0107258:	c1 e8 10             	shr    $0x10,%eax
f010725b:	66 a3 d6 c9 52 f0    	mov    %ax,0xf052c9d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f0107261:	b8 fe 87 10 f0       	mov    $0xf01087fe,%eax
f0107266:	66 a3 d8 c9 52 f0    	mov    %ax,0xf052c9d8
f010726c:	66 c7 05 da c9 52 f0 	movw   $0x8,0xf052c9da
f0107273:	08 00 
f0107275:	a0 dc c9 52 f0       	mov    0xf052c9dc,%al
f010727a:	83 e0 e0             	and    $0xffffffe0,%eax
f010727d:	a2 dc c9 52 f0       	mov    %al,0xf052c9dc
f0107282:	a0 dc c9 52 f0       	mov    0xf052c9dc,%al
f0107287:	83 e0 1f             	and    $0x1f,%eax
f010728a:	a2 dc c9 52 f0       	mov    %al,0xf052c9dc
f010728f:	a0 dd c9 52 f0       	mov    0xf052c9dd,%al
f0107294:	83 e0 f0             	and    $0xfffffff0,%eax
f0107297:	83 c8 0e             	or     $0xe,%eax
f010729a:	a2 dd c9 52 f0       	mov    %al,0xf052c9dd
f010729f:	a0 dd c9 52 f0       	mov    0xf052c9dd,%al
f01072a4:	83 e0 ef             	and    $0xffffffef,%eax
f01072a7:	a2 dd c9 52 f0       	mov    %al,0xf052c9dd
f01072ac:	a0 dd c9 52 f0       	mov    0xf052c9dd,%al
f01072b1:	83 c8 60             	or     $0x60,%eax
f01072b4:	a2 dd c9 52 f0       	mov    %al,0xf052c9dd
f01072b9:	a0 dd c9 52 f0       	mov    0xf052c9dd,%al
f01072be:	83 c8 80             	or     $0xffffff80,%eax
f01072c1:	a2 dd c9 52 f0       	mov    %al,0xf052c9dd
f01072c6:	b8 fe 87 10 f0       	mov    $0xf01087fe,%eax
f01072cb:	c1 e8 10             	shr    $0x10,%eax
f01072ce:	66 a3 de c9 52 f0    	mov    %ax,0xf052c9de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f01072d4:	b8 08 88 10 f0       	mov    $0xf0108808,%eax
f01072d9:	66 a3 f0 c9 52 f0    	mov    %ax,0xf052c9f0
f01072df:	66 c7 05 f2 c9 52 f0 	movw   $0x8,0xf052c9f2
f01072e6:	08 00 
f01072e8:	a0 f4 c9 52 f0       	mov    0xf052c9f4,%al
f01072ed:	83 e0 e0             	and    $0xffffffe0,%eax
f01072f0:	a2 f4 c9 52 f0       	mov    %al,0xf052c9f4
f01072f5:	a0 f4 c9 52 f0       	mov    0xf052c9f4,%al
f01072fa:	83 e0 1f             	and    $0x1f,%eax
f01072fd:	a2 f4 c9 52 f0       	mov    %al,0xf052c9f4
f0107302:	a0 f5 c9 52 f0       	mov    0xf052c9f5,%al
f0107307:	83 e0 f0             	and    $0xfffffff0,%eax
f010730a:	83 c8 0e             	or     $0xe,%eax
f010730d:	a2 f5 c9 52 f0       	mov    %al,0xf052c9f5
f0107312:	a0 f5 c9 52 f0       	mov    0xf052c9f5,%al
f0107317:	83 e0 ef             	and    $0xffffffef,%eax
f010731a:	a2 f5 c9 52 f0       	mov    %al,0xf052c9f5
f010731f:	a0 f5 c9 52 f0       	mov    0xf052c9f5,%al
f0107324:	83 c8 60             	or     $0x60,%eax
f0107327:	a2 f5 c9 52 f0       	mov    %al,0xf052c9f5
f010732c:	a0 f5 c9 52 f0       	mov    0xf052c9f5,%al
f0107331:	83 c8 80             	or     $0xffffff80,%eax
f0107334:	a2 f5 c9 52 f0       	mov    %al,0xf052c9f5
f0107339:	b8 08 88 10 f0       	mov    $0xf0108808,%eax
f010733e:	c1 e8 10             	shr    $0x10,%eax
f0107341:	66 a3 f6 c9 52 f0    	mov    %ax,0xf052c9f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f0107347:	b8 10 88 10 f0       	mov    $0xf0108810,%eax
f010734c:	66 a3 f8 c9 52 f0    	mov    %ax,0xf052c9f8
f0107352:	66 c7 05 fa c9 52 f0 	movw   $0x8,0xf052c9fa
f0107359:	08 00 
f010735b:	a0 fc c9 52 f0       	mov    0xf052c9fc,%al
f0107360:	83 e0 e0             	and    $0xffffffe0,%eax
f0107363:	a2 fc c9 52 f0       	mov    %al,0xf052c9fc
f0107368:	a0 fc c9 52 f0       	mov    0xf052c9fc,%al
f010736d:	83 e0 1f             	and    $0x1f,%eax
f0107370:	a2 fc c9 52 f0       	mov    %al,0xf052c9fc
f0107375:	a0 fd c9 52 f0       	mov    0xf052c9fd,%al
f010737a:	83 e0 f0             	and    $0xfffffff0,%eax
f010737d:	83 c8 0e             	or     $0xe,%eax
f0107380:	a2 fd c9 52 f0       	mov    %al,0xf052c9fd
f0107385:	a0 fd c9 52 f0       	mov    0xf052c9fd,%al
f010738a:	83 e0 ef             	and    $0xffffffef,%eax
f010738d:	a2 fd c9 52 f0       	mov    %al,0xf052c9fd
f0107392:	a0 fd c9 52 f0       	mov    0xf052c9fd,%al
f0107397:	83 c8 60             	or     $0x60,%eax
f010739a:	a2 fd c9 52 f0       	mov    %al,0xf052c9fd
f010739f:	a0 fd c9 52 f0       	mov    0xf052c9fd,%al
f01073a4:	83 c8 80             	or     $0xffffff80,%eax
f01073a7:	a2 fd c9 52 f0       	mov    %al,0xf052c9fd
f01073ac:	b8 10 88 10 f0       	mov    $0xf0108810,%eax
f01073b1:	c1 e8 10             	shr    $0x10,%eax
f01073b4:	66 a3 fe c9 52 f0    	mov    %ax,0xf052c9fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f01073ba:	b8 14 88 10 f0       	mov    $0xf0108814,%eax
f01073bf:	66 a3 00 ca 52 f0    	mov    %ax,0xf052ca00
f01073c5:	66 c7 05 02 ca 52 f0 	movw   $0x8,0xf052ca02
f01073cc:	08 00 
f01073ce:	a0 04 ca 52 f0       	mov    0xf052ca04,%al
f01073d3:	83 e0 e0             	and    $0xffffffe0,%eax
f01073d6:	a2 04 ca 52 f0       	mov    %al,0xf052ca04
f01073db:	a0 04 ca 52 f0       	mov    0xf052ca04,%al
f01073e0:	83 e0 1f             	and    $0x1f,%eax
f01073e3:	a2 04 ca 52 f0       	mov    %al,0xf052ca04
f01073e8:	a0 05 ca 52 f0       	mov    0xf052ca05,%al
f01073ed:	83 e0 f0             	and    $0xfffffff0,%eax
f01073f0:	83 c8 0e             	or     $0xe,%eax
f01073f3:	a2 05 ca 52 f0       	mov    %al,0xf052ca05
f01073f8:	a0 05 ca 52 f0       	mov    0xf052ca05,%al
f01073fd:	83 e0 ef             	and    $0xffffffef,%eax
f0107400:	a2 05 ca 52 f0       	mov    %al,0xf052ca05
f0107405:	a0 05 ca 52 f0       	mov    0xf052ca05,%al
f010740a:	83 c8 60             	or     $0x60,%eax
f010740d:	a2 05 ca 52 f0       	mov    %al,0xf052ca05
f0107412:	a0 05 ca 52 f0       	mov    0xf052ca05,%al
f0107417:	83 c8 80             	or     $0xffffff80,%eax
f010741a:	a2 05 ca 52 f0       	mov    %al,0xf052ca05
f010741f:	b8 14 88 10 f0       	mov    $0xf0108814,%eax
f0107424:	c1 e8 10             	shr    $0x10,%eax
f0107427:	66 a3 06 ca 52 f0    	mov    %ax,0xf052ca06
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010742d:	b8 18 88 10 f0       	mov    $0xf0108818,%eax
f0107432:	66 a3 08 ca 52 f0    	mov    %ax,0xf052ca08
f0107438:	66 c7 05 0a ca 52 f0 	movw   $0x8,0xf052ca0a
f010743f:	08 00 
f0107441:	a0 0c ca 52 f0       	mov    0xf052ca0c,%al
f0107446:	83 e0 e0             	and    $0xffffffe0,%eax
f0107449:	a2 0c ca 52 f0       	mov    %al,0xf052ca0c
f010744e:	a0 0c ca 52 f0       	mov    0xf052ca0c,%al
f0107453:	83 e0 1f             	and    $0x1f,%eax
f0107456:	a2 0c ca 52 f0       	mov    %al,0xf052ca0c
f010745b:	a0 0d ca 52 f0       	mov    0xf052ca0d,%al
f0107460:	83 e0 f0             	and    $0xfffffff0,%eax
f0107463:	83 c8 0e             	or     $0xe,%eax
f0107466:	a2 0d ca 52 f0       	mov    %al,0xf052ca0d
f010746b:	a0 0d ca 52 f0       	mov    0xf052ca0d,%al
f0107470:	83 e0 ef             	and    $0xffffffef,%eax
f0107473:	a2 0d ca 52 f0       	mov    %al,0xf052ca0d
f0107478:	a0 0d ca 52 f0       	mov    0xf052ca0d,%al
f010747d:	83 c8 60             	or     $0x60,%eax
f0107480:	a2 0d ca 52 f0       	mov    %al,0xf052ca0d
f0107485:	a0 0d ca 52 f0       	mov    0xf052ca0d,%al
f010748a:	83 c8 80             	or     $0xffffff80,%eax
f010748d:	a2 0d ca 52 f0       	mov    %al,0xf052ca0d
f0107492:	b8 18 88 10 f0       	mov    $0xf0108818,%eax
f0107497:	c1 e8 10             	shr    $0x10,%eax
f010749a:	66 a3 0e ca 52 f0    	mov    %ax,0xf052ca0e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f01074a0:	b8 1c 88 10 f0       	mov    $0xf010881c,%eax
f01074a5:	66 a3 20 ca 52 f0    	mov    %ax,0xf052ca20
f01074ab:	66 c7 05 22 ca 52 f0 	movw   $0x8,0xf052ca22
f01074b2:	08 00 
f01074b4:	a0 24 ca 52 f0       	mov    0xf052ca24,%al
f01074b9:	83 e0 e0             	and    $0xffffffe0,%eax
f01074bc:	a2 24 ca 52 f0       	mov    %al,0xf052ca24
f01074c1:	a0 24 ca 52 f0       	mov    0xf052ca24,%al
f01074c6:	83 e0 1f             	and    $0x1f,%eax
f01074c9:	a2 24 ca 52 f0       	mov    %al,0xf052ca24
f01074ce:	a0 25 ca 52 f0       	mov    0xf052ca25,%al
f01074d3:	83 e0 f0             	and    $0xfffffff0,%eax
f01074d6:	83 c8 0e             	or     $0xe,%eax
f01074d9:	a2 25 ca 52 f0       	mov    %al,0xf052ca25
f01074de:	a0 25 ca 52 f0       	mov    0xf052ca25,%al
f01074e3:	83 e0 ef             	and    $0xffffffef,%eax
f01074e6:	a2 25 ca 52 f0       	mov    %al,0xf052ca25
f01074eb:	a0 25 ca 52 f0       	mov    0xf052ca25,%al
f01074f0:	83 c8 60             	or     $0x60,%eax
f01074f3:	a2 25 ca 52 f0       	mov    %al,0xf052ca25
f01074f8:	a0 25 ca 52 f0       	mov    0xf052ca25,%al
f01074fd:	83 c8 80             	or     $0xffffff80,%eax
f0107500:	a2 25 ca 52 f0       	mov    %al,0xf052ca25
f0107505:	b8 1c 88 10 f0       	mov    $0xf010881c,%eax
f010750a:	c1 e8 10             	shr    $0x10,%eax
f010750d:	66 a3 26 ca 52 f0    	mov    %ax,0xf052ca26
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f0107513:	b8 22 88 10 f0       	mov    $0xf0108822,%eax
f0107518:	66 a3 28 ca 52 f0    	mov    %ax,0xf052ca28
f010751e:	66 c7 05 2a ca 52 f0 	movw   $0x8,0xf052ca2a
f0107525:	08 00 
f0107527:	a0 2c ca 52 f0       	mov    0xf052ca2c,%al
f010752c:	83 e0 e0             	and    $0xffffffe0,%eax
f010752f:	a2 2c ca 52 f0       	mov    %al,0xf052ca2c
f0107534:	a0 2c ca 52 f0       	mov    0xf052ca2c,%al
f0107539:	83 e0 1f             	and    $0x1f,%eax
f010753c:	a2 2c ca 52 f0       	mov    %al,0xf052ca2c
f0107541:	a0 2d ca 52 f0       	mov    0xf052ca2d,%al
f0107546:	83 e0 f0             	and    $0xfffffff0,%eax
f0107549:	83 c8 0e             	or     $0xe,%eax
f010754c:	a2 2d ca 52 f0       	mov    %al,0xf052ca2d
f0107551:	a0 2d ca 52 f0       	mov    0xf052ca2d,%al
f0107556:	83 e0 ef             	and    $0xffffffef,%eax
f0107559:	a2 2d ca 52 f0       	mov    %al,0xf052ca2d
f010755e:	a0 2d ca 52 f0       	mov    0xf052ca2d,%al
f0107563:	83 c8 60             	or     $0x60,%eax
f0107566:	a2 2d ca 52 f0       	mov    %al,0xf052ca2d
f010756b:	a0 2d ca 52 f0       	mov    0xf052ca2d,%al
f0107570:	83 c8 80             	or     $0xffffff80,%eax
f0107573:	a2 2d ca 52 f0       	mov    %al,0xf052ca2d
f0107578:	b8 22 88 10 f0       	mov    $0xf0108822,%eax
f010757d:	c1 e8 10             	shr    $0x10,%eax
f0107580:	66 a3 2e ca 52 f0    	mov    %ax,0xf052ca2e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f0107586:	b8 26 88 10 f0       	mov    $0xf0108826,%eax
f010758b:	66 a3 30 ca 52 f0    	mov    %ax,0xf052ca30
f0107591:	66 c7 05 32 ca 52 f0 	movw   $0x8,0xf052ca32
f0107598:	08 00 
f010759a:	a0 34 ca 52 f0       	mov    0xf052ca34,%al
f010759f:	83 e0 e0             	and    $0xffffffe0,%eax
f01075a2:	a2 34 ca 52 f0       	mov    %al,0xf052ca34
f01075a7:	a0 34 ca 52 f0       	mov    0xf052ca34,%al
f01075ac:	83 e0 1f             	and    $0x1f,%eax
f01075af:	a2 34 ca 52 f0       	mov    %al,0xf052ca34
f01075b4:	a0 35 ca 52 f0       	mov    0xf052ca35,%al
f01075b9:	83 e0 f0             	and    $0xfffffff0,%eax
f01075bc:	83 c8 0e             	or     $0xe,%eax
f01075bf:	a2 35 ca 52 f0       	mov    %al,0xf052ca35
f01075c4:	a0 35 ca 52 f0       	mov    0xf052ca35,%al
f01075c9:	83 e0 ef             	and    $0xffffffef,%eax
f01075cc:	a2 35 ca 52 f0       	mov    %al,0xf052ca35
f01075d1:	a0 35 ca 52 f0       	mov    0xf052ca35,%al
f01075d6:	83 c8 60             	or     $0x60,%eax
f01075d9:	a2 35 ca 52 f0       	mov    %al,0xf052ca35
f01075de:	a0 35 ca 52 f0       	mov    0xf052ca35,%al
f01075e3:	83 c8 80             	or     $0xffffff80,%eax
f01075e6:	a2 35 ca 52 f0       	mov    %al,0xf052ca35
f01075eb:	b8 26 88 10 f0       	mov    $0xf0108826,%eax
f01075f0:	c1 e8 10             	shr    $0x10,%eax
f01075f3:	66 a3 36 ca 52 f0    	mov    %ax,0xf052ca36
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f01075f9:	b8 2c 88 10 f0       	mov    $0xf010882c,%eax
f01075fe:	66 a3 38 ca 52 f0    	mov    %ax,0xf052ca38
f0107604:	66 c7 05 3a ca 52 f0 	movw   $0x8,0xf052ca3a
f010760b:	08 00 
f010760d:	a0 3c ca 52 f0       	mov    0xf052ca3c,%al
f0107612:	83 e0 e0             	and    $0xffffffe0,%eax
f0107615:	a2 3c ca 52 f0       	mov    %al,0xf052ca3c
f010761a:	a0 3c ca 52 f0       	mov    0xf052ca3c,%al
f010761f:	83 e0 1f             	and    $0x1f,%eax
f0107622:	a2 3c ca 52 f0       	mov    %al,0xf052ca3c
f0107627:	a0 3d ca 52 f0       	mov    0xf052ca3d,%al
f010762c:	83 e0 f0             	and    $0xfffffff0,%eax
f010762f:	83 c8 0e             	or     $0xe,%eax
f0107632:	a2 3d ca 52 f0       	mov    %al,0xf052ca3d
f0107637:	a0 3d ca 52 f0       	mov    0xf052ca3d,%al
f010763c:	83 e0 ef             	and    $0xffffffef,%eax
f010763f:	a2 3d ca 52 f0       	mov    %al,0xf052ca3d
f0107644:	a0 3d ca 52 f0       	mov    0xf052ca3d,%al
f0107649:	83 c8 60             	or     $0x60,%eax
f010764c:	a2 3d ca 52 f0       	mov    %al,0xf052ca3d
f0107651:	a0 3d ca 52 f0       	mov    0xf052ca3d,%al
f0107656:	83 c8 80             	or     $0xffffff80,%eax
f0107659:	a2 3d ca 52 f0       	mov    %al,0xf052ca3d
f010765e:	b8 2c 88 10 f0       	mov    $0xf010882c,%eax
f0107663:	c1 e8 10             	shr    $0x10,%eax
f0107666:	66 a3 3e ca 52 f0    	mov    %ax,0xf052ca3e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010766c:	b8 32 88 10 f0       	mov    $0xf0108832,%eax
f0107671:	66 a3 a0 ca 52 f0    	mov    %ax,0xf052caa0
f0107677:	66 c7 05 a2 ca 52 f0 	movw   $0x8,0xf052caa2
f010767e:	08 00 
f0107680:	a0 a4 ca 52 f0       	mov    0xf052caa4,%al
f0107685:	83 e0 e0             	and    $0xffffffe0,%eax
f0107688:	a2 a4 ca 52 f0       	mov    %al,0xf052caa4
f010768d:	a0 a4 ca 52 f0       	mov    0xf052caa4,%al
f0107692:	83 e0 1f             	and    $0x1f,%eax
f0107695:	a2 a4 ca 52 f0       	mov    %al,0xf052caa4
f010769a:	a0 a5 ca 52 f0       	mov    0xf052caa5,%al
f010769f:	83 e0 f0             	and    $0xfffffff0,%eax
f01076a2:	83 c8 0e             	or     $0xe,%eax
f01076a5:	a2 a5 ca 52 f0       	mov    %al,0xf052caa5
f01076aa:	a0 a5 ca 52 f0       	mov    0xf052caa5,%al
f01076af:	83 e0 ef             	and    $0xffffffef,%eax
f01076b2:	a2 a5 ca 52 f0       	mov    %al,0xf052caa5
f01076b7:	a0 a5 ca 52 f0       	mov    0xf052caa5,%al
f01076bc:	83 c8 60             	or     $0x60,%eax
f01076bf:	a2 a5 ca 52 f0       	mov    %al,0xf052caa5
f01076c4:	a0 a5 ca 52 f0       	mov    0xf052caa5,%al
f01076c9:	83 c8 80             	or     $0xffffff80,%eax
f01076cc:	a2 a5 ca 52 f0       	mov    %al,0xf052caa5
f01076d1:	b8 32 88 10 f0       	mov    $0xf0108832,%eax
f01076d6:	c1 e8 10             	shr    $0x10,%eax
f01076d9:	66 a3 a6 ca 52 f0    	mov    %ax,0xf052caa6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f01076df:	b8 38 88 10 f0       	mov    $0xf0108838,%eax
f01076e4:	66 a3 a8 ca 52 f0    	mov    %ax,0xf052caa8
f01076ea:	66 c7 05 aa ca 52 f0 	movw   $0x8,0xf052caaa
f01076f1:	08 00 
f01076f3:	a0 ac ca 52 f0       	mov    0xf052caac,%al
f01076f8:	83 e0 e0             	and    $0xffffffe0,%eax
f01076fb:	a2 ac ca 52 f0       	mov    %al,0xf052caac
f0107700:	a0 ac ca 52 f0       	mov    0xf052caac,%al
f0107705:	83 e0 1f             	and    $0x1f,%eax
f0107708:	a2 ac ca 52 f0       	mov    %al,0xf052caac
f010770d:	a0 ad ca 52 f0       	mov    0xf052caad,%al
f0107712:	83 e0 f0             	and    $0xfffffff0,%eax
f0107715:	83 c8 0e             	or     $0xe,%eax
f0107718:	a2 ad ca 52 f0       	mov    %al,0xf052caad
f010771d:	a0 ad ca 52 f0       	mov    0xf052caad,%al
f0107722:	83 e0 ef             	and    $0xffffffef,%eax
f0107725:	a2 ad ca 52 f0       	mov    %al,0xf052caad
f010772a:	a0 ad ca 52 f0       	mov    0xf052caad,%al
f010772f:	83 c8 60             	or     $0x60,%eax
f0107732:	a2 ad ca 52 f0       	mov    %al,0xf052caad
f0107737:	a0 ad ca 52 f0       	mov    0xf052caad,%al
f010773c:	83 c8 80             	or     $0xffffff80,%eax
f010773f:	a2 ad ca 52 f0       	mov    %al,0xf052caad
f0107744:	b8 38 88 10 f0       	mov    $0xf0108838,%eax
f0107749:	c1 e8 10             	shr    $0x10,%eax
f010774c:	66 a3 ae ca 52 f0    	mov    %ax,0xf052caae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f0107752:	b8 3e 88 10 f0       	mov    $0xf010883e,%eax
f0107757:	66 a3 b0 ca 52 f0    	mov    %ax,0xf052cab0
f010775d:	66 c7 05 b2 ca 52 f0 	movw   $0x8,0xf052cab2
f0107764:	08 00 
f0107766:	a0 b4 ca 52 f0       	mov    0xf052cab4,%al
f010776b:	83 e0 e0             	and    $0xffffffe0,%eax
f010776e:	a2 b4 ca 52 f0       	mov    %al,0xf052cab4
f0107773:	a0 b4 ca 52 f0       	mov    0xf052cab4,%al
f0107778:	83 e0 1f             	and    $0x1f,%eax
f010777b:	a2 b4 ca 52 f0       	mov    %al,0xf052cab4
f0107780:	a0 b5 ca 52 f0       	mov    0xf052cab5,%al
f0107785:	83 e0 f0             	and    $0xfffffff0,%eax
f0107788:	83 c8 0e             	or     $0xe,%eax
f010778b:	a2 b5 ca 52 f0       	mov    %al,0xf052cab5
f0107790:	a0 b5 ca 52 f0       	mov    0xf052cab5,%al
f0107795:	83 e0 ef             	and    $0xffffffef,%eax
f0107798:	a2 b5 ca 52 f0       	mov    %al,0xf052cab5
f010779d:	a0 b5 ca 52 f0       	mov    0xf052cab5,%al
f01077a2:	83 c8 60             	or     $0x60,%eax
f01077a5:	a2 b5 ca 52 f0       	mov    %al,0xf052cab5
f01077aa:	a0 b5 ca 52 f0       	mov    0xf052cab5,%al
f01077af:	83 c8 80             	or     $0xffffff80,%eax
f01077b2:	a2 b5 ca 52 f0       	mov    %al,0xf052cab5
f01077b7:	b8 3e 88 10 f0       	mov    $0xf010883e,%eax
f01077bc:	c1 e8 10             	shr    $0x10,%eax
f01077bf:	66 a3 b6 ca 52 f0    	mov    %ax,0xf052cab6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f01077c5:	b8 44 88 10 f0       	mov    $0xf0108844,%eax
f01077ca:	66 a3 b8 ca 52 f0    	mov    %ax,0xf052cab8
f01077d0:	66 c7 05 ba ca 52 f0 	movw   $0x8,0xf052caba
f01077d7:	08 00 
f01077d9:	a0 bc ca 52 f0       	mov    0xf052cabc,%al
f01077de:	83 e0 e0             	and    $0xffffffe0,%eax
f01077e1:	a2 bc ca 52 f0       	mov    %al,0xf052cabc
f01077e6:	a0 bc ca 52 f0       	mov    0xf052cabc,%al
f01077eb:	83 e0 1f             	and    $0x1f,%eax
f01077ee:	a2 bc ca 52 f0       	mov    %al,0xf052cabc
f01077f3:	a0 bd ca 52 f0       	mov    0xf052cabd,%al
f01077f8:	83 e0 f0             	and    $0xfffffff0,%eax
f01077fb:	83 c8 0e             	or     $0xe,%eax
f01077fe:	a2 bd ca 52 f0       	mov    %al,0xf052cabd
f0107803:	a0 bd ca 52 f0       	mov    0xf052cabd,%al
f0107808:	83 e0 ef             	and    $0xffffffef,%eax
f010780b:	a2 bd ca 52 f0       	mov    %al,0xf052cabd
f0107810:	a0 bd ca 52 f0       	mov    0xf052cabd,%al
f0107815:	83 c8 60             	or     $0x60,%eax
f0107818:	a2 bd ca 52 f0       	mov    %al,0xf052cabd
f010781d:	a0 bd ca 52 f0       	mov    0xf052cabd,%al
f0107822:	83 c8 80             	or     $0xffffff80,%eax
f0107825:	a2 bd ca 52 f0       	mov    %al,0xf052cabd
f010782a:	b8 44 88 10 f0       	mov    $0xf0108844,%eax
f010782f:	c1 e8 10             	shr    $0x10,%eax
f0107832:	66 a3 be ca 52 f0    	mov    %ax,0xf052cabe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0107838:	b8 4a 88 10 f0       	mov    $0xf010884a,%eax
f010783d:	66 a3 c0 ca 52 f0    	mov    %ax,0xf052cac0
f0107843:	66 c7 05 c2 ca 52 f0 	movw   $0x8,0xf052cac2
f010784a:	08 00 
f010784c:	a0 c4 ca 52 f0       	mov    0xf052cac4,%al
f0107851:	83 e0 e0             	and    $0xffffffe0,%eax
f0107854:	a2 c4 ca 52 f0       	mov    %al,0xf052cac4
f0107859:	a0 c4 ca 52 f0       	mov    0xf052cac4,%al
f010785e:	83 e0 1f             	and    $0x1f,%eax
f0107861:	a2 c4 ca 52 f0       	mov    %al,0xf052cac4
f0107866:	a0 c5 ca 52 f0       	mov    0xf052cac5,%al
f010786b:	83 e0 f0             	and    $0xfffffff0,%eax
f010786e:	83 c8 0e             	or     $0xe,%eax
f0107871:	a2 c5 ca 52 f0       	mov    %al,0xf052cac5
f0107876:	a0 c5 ca 52 f0       	mov    0xf052cac5,%al
f010787b:	83 e0 ef             	and    $0xffffffef,%eax
f010787e:	a2 c5 ca 52 f0       	mov    %al,0xf052cac5
f0107883:	a0 c5 ca 52 f0       	mov    0xf052cac5,%al
f0107888:	83 c8 60             	or     $0x60,%eax
f010788b:	a2 c5 ca 52 f0       	mov    %al,0xf052cac5
f0107890:	a0 c5 ca 52 f0       	mov    0xf052cac5,%al
f0107895:	83 c8 80             	or     $0xffffff80,%eax
f0107898:	a2 c5 ca 52 f0       	mov    %al,0xf052cac5
f010789d:	b8 4a 88 10 f0       	mov    $0xf010884a,%eax
f01078a2:	c1 e8 10             	shr    $0x10,%eax
f01078a5:	66 a3 c6 ca 52 f0    	mov    %ax,0xf052cac6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f01078ab:	b8 50 88 10 f0       	mov    $0xf0108850,%eax
f01078b0:	66 a3 c8 ca 52 f0    	mov    %ax,0xf052cac8
f01078b6:	66 c7 05 ca ca 52 f0 	movw   $0x8,0xf052caca
f01078bd:	08 00 
f01078bf:	a0 cc ca 52 f0       	mov    0xf052cacc,%al
f01078c4:	83 e0 e0             	and    $0xffffffe0,%eax
f01078c7:	a2 cc ca 52 f0       	mov    %al,0xf052cacc
f01078cc:	a0 cc ca 52 f0       	mov    0xf052cacc,%al
f01078d1:	83 e0 1f             	and    $0x1f,%eax
f01078d4:	a2 cc ca 52 f0       	mov    %al,0xf052cacc
f01078d9:	a0 cd ca 52 f0       	mov    0xf052cacd,%al
f01078de:	83 e0 f0             	and    $0xfffffff0,%eax
f01078e1:	83 c8 0e             	or     $0xe,%eax
f01078e4:	a2 cd ca 52 f0       	mov    %al,0xf052cacd
f01078e9:	a0 cd ca 52 f0       	mov    0xf052cacd,%al
f01078ee:	83 e0 ef             	and    $0xffffffef,%eax
f01078f1:	a2 cd ca 52 f0       	mov    %al,0xf052cacd
f01078f6:	a0 cd ca 52 f0       	mov    0xf052cacd,%al
f01078fb:	83 c8 60             	or     $0x60,%eax
f01078fe:	a2 cd ca 52 f0       	mov    %al,0xf052cacd
f0107903:	a0 cd ca 52 f0       	mov    0xf052cacd,%al
f0107908:	83 c8 80             	or     $0xffffff80,%eax
f010790b:	a2 cd ca 52 f0       	mov    %al,0xf052cacd
f0107910:	b8 50 88 10 f0       	mov    $0xf0108850,%eax
f0107915:	c1 e8 10             	shr    $0x10,%eax
f0107918:	66 a3 ce ca 52 f0    	mov    %ax,0xf052cace
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010791e:	b8 56 88 10 f0       	mov    $0xf0108856,%eax
f0107923:	66 a3 d0 ca 52 f0    	mov    %ax,0xf052cad0
f0107929:	66 c7 05 d2 ca 52 f0 	movw   $0x8,0xf052cad2
f0107930:	08 00 
f0107932:	a0 d4 ca 52 f0       	mov    0xf052cad4,%al
f0107937:	83 e0 e0             	and    $0xffffffe0,%eax
f010793a:	a2 d4 ca 52 f0       	mov    %al,0xf052cad4
f010793f:	a0 d4 ca 52 f0       	mov    0xf052cad4,%al
f0107944:	83 e0 1f             	and    $0x1f,%eax
f0107947:	a2 d4 ca 52 f0       	mov    %al,0xf052cad4
f010794c:	a0 d5 ca 52 f0       	mov    0xf052cad5,%al
f0107951:	83 e0 f0             	and    $0xfffffff0,%eax
f0107954:	83 c8 0e             	or     $0xe,%eax
f0107957:	a2 d5 ca 52 f0       	mov    %al,0xf052cad5
f010795c:	a0 d5 ca 52 f0       	mov    0xf052cad5,%al
f0107961:	83 e0 ef             	and    $0xffffffef,%eax
f0107964:	a2 d5 ca 52 f0       	mov    %al,0xf052cad5
f0107969:	a0 d5 ca 52 f0       	mov    0xf052cad5,%al
f010796e:	83 c8 60             	or     $0x60,%eax
f0107971:	a2 d5 ca 52 f0       	mov    %al,0xf052cad5
f0107976:	a0 d5 ca 52 f0       	mov    0xf052cad5,%al
f010797b:	83 c8 80             	or     $0xffffff80,%eax
f010797e:	a2 d5 ca 52 f0       	mov    %al,0xf052cad5
f0107983:	b8 56 88 10 f0       	mov    $0xf0108856,%eax
f0107988:	c1 e8 10             	shr    $0x10,%eax
f010798b:	66 a3 d6 ca 52 f0    	mov    %ax,0xf052cad6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f0107991:	b8 5c 88 10 f0       	mov    $0xf010885c,%eax
f0107996:	66 a3 d8 ca 52 f0    	mov    %ax,0xf052cad8
f010799c:	66 c7 05 da ca 52 f0 	movw   $0x8,0xf052cada
f01079a3:	08 00 
f01079a5:	a0 dc ca 52 f0       	mov    0xf052cadc,%al
f01079aa:	83 e0 e0             	and    $0xffffffe0,%eax
f01079ad:	a2 dc ca 52 f0       	mov    %al,0xf052cadc
f01079b2:	a0 dc ca 52 f0       	mov    0xf052cadc,%al
f01079b7:	83 e0 1f             	and    $0x1f,%eax
f01079ba:	a2 dc ca 52 f0       	mov    %al,0xf052cadc
f01079bf:	a0 dd ca 52 f0       	mov    0xf052cadd,%al
f01079c4:	83 e0 f0             	and    $0xfffffff0,%eax
f01079c7:	83 c8 0e             	or     $0xe,%eax
f01079ca:	a2 dd ca 52 f0       	mov    %al,0xf052cadd
f01079cf:	a0 dd ca 52 f0       	mov    0xf052cadd,%al
f01079d4:	83 e0 ef             	and    $0xffffffef,%eax
f01079d7:	a2 dd ca 52 f0       	mov    %al,0xf052cadd
f01079dc:	a0 dd ca 52 f0       	mov    0xf052cadd,%al
f01079e1:	83 c8 60             	or     $0x60,%eax
f01079e4:	a2 dd ca 52 f0       	mov    %al,0xf052cadd
f01079e9:	a0 dd ca 52 f0       	mov    0xf052cadd,%al
f01079ee:	83 c8 80             	or     $0xffffff80,%eax
f01079f1:	a2 dd ca 52 f0       	mov    %al,0xf052cadd
f01079f6:	b8 5c 88 10 f0       	mov    $0xf010885c,%eax
f01079fb:	c1 e8 10             	shr    $0x10,%eax
f01079fe:	66 a3 de ca 52 f0    	mov    %ax,0xf052cade
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f0107a04:	b8 62 88 10 f0       	mov    $0xf0108862,%eax
f0107a09:	66 a3 e0 ca 52 f0    	mov    %ax,0xf052cae0
f0107a0f:	66 c7 05 e2 ca 52 f0 	movw   $0x8,0xf052cae2
f0107a16:	08 00 
f0107a18:	a0 e4 ca 52 f0       	mov    0xf052cae4,%al
f0107a1d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a20:	a2 e4 ca 52 f0       	mov    %al,0xf052cae4
f0107a25:	a0 e4 ca 52 f0       	mov    0xf052cae4,%al
f0107a2a:	83 e0 1f             	and    $0x1f,%eax
f0107a2d:	a2 e4 ca 52 f0       	mov    %al,0xf052cae4
f0107a32:	a0 e5 ca 52 f0       	mov    0xf052cae5,%al
f0107a37:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a3a:	83 c8 0e             	or     $0xe,%eax
f0107a3d:	a2 e5 ca 52 f0       	mov    %al,0xf052cae5
f0107a42:	a0 e5 ca 52 f0       	mov    0xf052cae5,%al
f0107a47:	83 e0 ef             	and    $0xffffffef,%eax
f0107a4a:	a2 e5 ca 52 f0       	mov    %al,0xf052cae5
f0107a4f:	a0 e5 ca 52 f0       	mov    0xf052cae5,%al
f0107a54:	83 c8 60             	or     $0x60,%eax
f0107a57:	a2 e5 ca 52 f0       	mov    %al,0xf052cae5
f0107a5c:	a0 e5 ca 52 f0       	mov    0xf052cae5,%al
f0107a61:	83 c8 80             	or     $0xffffff80,%eax
f0107a64:	a2 e5 ca 52 f0       	mov    %al,0xf052cae5
f0107a69:	b8 62 88 10 f0       	mov    $0xf0108862,%eax
f0107a6e:	c1 e8 10             	shr    $0x10,%eax
f0107a71:	66 a3 e6 ca 52 f0    	mov    %ax,0xf052cae6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0107a77:	b8 68 88 10 f0       	mov    $0xf0108868,%eax
f0107a7c:	66 a3 e8 ca 52 f0    	mov    %ax,0xf052cae8
f0107a82:	66 c7 05 ea ca 52 f0 	movw   $0x8,0xf052caea
f0107a89:	08 00 
f0107a8b:	a0 ec ca 52 f0       	mov    0xf052caec,%al
f0107a90:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a93:	a2 ec ca 52 f0       	mov    %al,0xf052caec
f0107a98:	a0 ec ca 52 f0       	mov    0xf052caec,%al
f0107a9d:	83 e0 1f             	and    $0x1f,%eax
f0107aa0:	a2 ec ca 52 f0       	mov    %al,0xf052caec
f0107aa5:	a0 ed ca 52 f0       	mov    0xf052caed,%al
f0107aaa:	83 e0 f0             	and    $0xfffffff0,%eax
f0107aad:	83 c8 0e             	or     $0xe,%eax
f0107ab0:	a2 ed ca 52 f0       	mov    %al,0xf052caed
f0107ab5:	a0 ed ca 52 f0       	mov    0xf052caed,%al
f0107aba:	83 e0 ef             	and    $0xffffffef,%eax
f0107abd:	a2 ed ca 52 f0       	mov    %al,0xf052caed
f0107ac2:	a0 ed ca 52 f0       	mov    0xf052caed,%al
f0107ac7:	83 c8 60             	or     $0x60,%eax
f0107aca:	a2 ed ca 52 f0       	mov    %al,0xf052caed
f0107acf:	a0 ed ca 52 f0       	mov    0xf052caed,%al
f0107ad4:	83 c8 80             	or     $0xffffff80,%eax
f0107ad7:	a2 ed ca 52 f0       	mov    %al,0xf052caed
f0107adc:	b8 68 88 10 f0       	mov    $0xf0108868,%eax
f0107ae1:	c1 e8 10             	shr    $0x10,%eax
f0107ae4:	66 a3 ee ca 52 f0    	mov    %ax,0xf052caee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f0107aea:	b8 6e 88 10 f0       	mov    $0xf010886e,%eax
f0107aef:	66 a3 f0 ca 52 f0    	mov    %ax,0xf052caf0
f0107af5:	66 c7 05 f2 ca 52 f0 	movw   $0x8,0xf052caf2
f0107afc:	08 00 
f0107afe:	a0 f4 ca 52 f0       	mov    0xf052caf4,%al
f0107b03:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b06:	a2 f4 ca 52 f0       	mov    %al,0xf052caf4
f0107b0b:	a0 f4 ca 52 f0       	mov    0xf052caf4,%al
f0107b10:	83 e0 1f             	and    $0x1f,%eax
f0107b13:	a2 f4 ca 52 f0       	mov    %al,0xf052caf4
f0107b18:	a0 f5 ca 52 f0       	mov    0xf052caf5,%al
f0107b1d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b20:	83 c8 0e             	or     $0xe,%eax
f0107b23:	a2 f5 ca 52 f0       	mov    %al,0xf052caf5
f0107b28:	a0 f5 ca 52 f0       	mov    0xf052caf5,%al
f0107b2d:	83 e0 ef             	and    $0xffffffef,%eax
f0107b30:	a2 f5 ca 52 f0       	mov    %al,0xf052caf5
f0107b35:	a0 f5 ca 52 f0       	mov    0xf052caf5,%al
f0107b3a:	83 c8 60             	or     $0x60,%eax
f0107b3d:	a2 f5 ca 52 f0       	mov    %al,0xf052caf5
f0107b42:	a0 f5 ca 52 f0       	mov    0xf052caf5,%al
f0107b47:	83 c8 80             	or     $0xffffff80,%eax
f0107b4a:	a2 f5 ca 52 f0       	mov    %al,0xf052caf5
f0107b4f:	b8 6e 88 10 f0       	mov    $0xf010886e,%eax
f0107b54:	c1 e8 10             	shr    $0x10,%eax
f0107b57:	66 a3 f6 ca 52 f0    	mov    %ax,0xf052caf6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f0107b5d:	b8 74 88 10 f0       	mov    $0xf0108874,%eax
f0107b62:	66 a3 f8 ca 52 f0    	mov    %ax,0xf052caf8
f0107b68:	66 c7 05 fa ca 52 f0 	movw   $0x8,0xf052cafa
f0107b6f:	08 00 
f0107b71:	a0 fc ca 52 f0       	mov    0xf052cafc,%al
f0107b76:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b79:	a2 fc ca 52 f0       	mov    %al,0xf052cafc
f0107b7e:	a0 fc ca 52 f0       	mov    0xf052cafc,%al
f0107b83:	83 e0 1f             	and    $0x1f,%eax
f0107b86:	a2 fc ca 52 f0       	mov    %al,0xf052cafc
f0107b8b:	a0 fd ca 52 f0       	mov    0xf052cafd,%al
f0107b90:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b93:	83 c8 0e             	or     $0xe,%eax
f0107b96:	a2 fd ca 52 f0       	mov    %al,0xf052cafd
f0107b9b:	a0 fd ca 52 f0       	mov    0xf052cafd,%al
f0107ba0:	83 e0 ef             	and    $0xffffffef,%eax
f0107ba3:	a2 fd ca 52 f0       	mov    %al,0xf052cafd
f0107ba8:	a0 fd ca 52 f0       	mov    0xf052cafd,%al
f0107bad:	83 c8 60             	or     $0x60,%eax
f0107bb0:	a2 fd ca 52 f0       	mov    %al,0xf052cafd
f0107bb5:	a0 fd ca 52 f0       	mov    0xf052cafd,%al
f0107bba:	83 c8 80             	or     $0xffffff80,%eax
f0107bbd:	a2 fd ca 52 f0       	mov    %al,0xf052cafd
f0107bc2:	b8 74 88 10 f0       	mov    $0xf0108874,%eax
f0107bc7:	c1 e8 10             	shr    $0x10,%eax
f0107bca:	66 a3 fe ca 52 f0    	mov    %ax,0xf052cafe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f0107bd0:	b8 7a 88 10 f0       	mov    $0xf010887a,%eax
f0107bd5:	66 a3 00 cb 52 f0    	mov    %ax,0xf052cb00
f0107bdb:	66 c7 05 02 cb 52 f0 	movw   $0x8,0xf052cb02
f0107be2:	08 00 
f0107be4:	a0 04 cb 52 f0       	mov    0xf052cb04,%al
f0107be9:	83 e0 e0             	and    $0xffffffe0,%eax
f0107bec:	a2 04 cb 52 f0       	mov    %al,0xf052cb04
f0107bf1:	a0 04 cb 52 f0       	mov    0xf052cb04,%al
f0107bf6:	83 e0 1f             	and    $0x1f,%eax
f0107bf9:	a2 04 cb 52 f0       	mov    %al,0xf052cb04
f0107bfe:	a0 05 cb 52 f0       	mov    0xf052cb05,%al
f0107c03:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c06:	83 c8 0e             	or     $0xe,%eax
f0107c09:	a2 05 cb 52 f0       	mov    %al,0xf052cb05
f0107c0e:	a0 05 cb 52 f0       	mov    0xf052cb05,%al
f0107c13:	83 e0 ef             	and    $0xffffffef,%eax
f0107c16:	a2 05 cb 52 f0       	mov    %al,0xf052cb05
f0107c1b:	a0 05 cb 52 f0       	mov    0xf052cb05,%al
f0107c20:	83 c8 60             	or     $0x60,%eax
f0107c23:	a2 05 cb 52 f0       	mov    %al,0xf052cb05
f0107c28:	a0 05 cb 52 f0       	mov    0xf052cb05,%al
f0107c2d:	83 c8 80             	or     $0xffffff80,%eax
f0107c30:	a2 05 cb 52 f0       	mov    %al,0xf052cb05
f0107c35:	b8 7a 88 10 f0       	mov    $0xf010887a,%eax
f0107c3a:	c1 e8 10             	shr    $0x10,%eax
f0107c3d:	66 a3 06 cb 52 f0    	mov    %ax,0xf052cb06
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f0107c43:	b8 80 88 10 f0       	mov    $0xf0108880,%eax
f0107c48:	66 a3 08 cb 52 f0    	mov    %ax,0xf052cb08
f0107c4e:	66 c7 05 0a cb 52 f0 	movw   $0x8,0xf052cb0a
f0107c55:	08 00 
f0107c57:	a0 0c cb 52 f0       	mov    0xf052cb0c,%al
f0107c5c:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c5f:	a2 0c cb 52 f0       	mov    %al,0xf052cb0c
f0107c64:	a0 0c cb 52 f0       	mov    0xf052cb0c,%al
f0107c69:	83 e0 1f             	and    $0x1f,%eax
f0107c6c:	a2 0c cb 52 f0       	mov    %al,0xf052cb0c
f0107c71:	a0 0d cb 52 f0       	mov    0xf052cb0d,%al
f0107c76:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c79:	83 c8 0e             	or     $0xe,%eax
f0107c7c:	a2 0d cb 52 f0       	mov    %al,0xf052cb0d
f0107c81:	a0 0d cb 52 f0       	mov    0xf052cb0d,%al
f0107c86:	83 e0 ef             	and    $0xffffffef,%eax
f0107c89:	a2 0d cb 52 f0       	mov    %al,0xf052cb0d
f0107c8e:	a0 0d cb 52 f0       	mov    0xf052cb0d,%al
f0107c93:	83 c8 60             	or     $0x60,%eax
f0107c96:	a2 0d cb 52 f0       	mov    %al,0xf052cb0d
f0107c9b:	a0 0d cb 52 f0       	mov    0xf052cb0d,%al
f0107ca0:	83 c8 80             	or     $0xffffff80,%eax
f0107ca3:	a2 0d cb 52 f0       	mov    %al,0xf052cb0d
f0107ca8:	b8 80 88 10 f0       	mov    $0xf0108880,%eax
f0107cad:	c1 e8 10             	shr    $0x10,%eax
f0107cb0:	66 a3 0e cb 52 f0    	mov    %ax,0xf052cb0e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f0107cb6:	b8 86 88 10 f0       	mov    $0xf0108886,%eax
f0107cbb:	66 a3 10 cb 52 f0    	mov    %ax,0xf052cb10
f0107cc1:	66 c7 05 12 cb 52 f0 	movw   $0x8,0xf052cb12
f0107cc8:	08 00 
f0107cca:	a0 14 cb 52 f0       	mov    0xf052cb14,%al
f0107ccf:	83 e0 e0             	and    $0xffffffe0,%eax
f0107cd2:	a2 14 cb 52 f0       	mov    %al,0xf052cb14
f0107cd7:	a0 14 cb 52 f0       	mov    0xf052cb14,%al
f0107cdc:	83 e0 1f             	and    $0x1f,%eax
f0107cdf:	a2 14 cb 52 f0       	mov    %al,0xf052cb14
f0107ce4:	a0 15 cb 52 f0       	mov    0xf052cb15,%al
f0107ce9:	83 e0 f0             	and    $0xfffffff0,%eax
f0107cec:	83 c8 0e             	or     $0xe,%eax
f0107cef:	a2 15 cb 52 f0       	mov    %al,0xf052cb15
f0107cf4:	a0 15 cb 52 f0       	mov    0xf052cb15,%al
f0107cf9:	83 e0 ef             	and    $0xffffffef,%eax
f0107cfc:	a2 15 cb 52 f0       	mov    %al,0xf052cb15
f0107d01:	a0 15 cb 52 f0       	mov    0xf052cb15,%al
f0107d06:	83 c8 60             	or     $0x60,%eax
f0107d09:	a2 15 cb 52 f0       	mov    %al,0xf052cb15
f0107d0e:	a0 15 cb 52 f0       	mov    0xf052cb15,%al
f0107d13:	83 c8 80             	or     $0xffffff80,%eax
f0107d16:	a2 15 cb 52 f0       	mov    %al,0xf052cb15
f0107d1b:	b8 86 88 10 f0       	mov    $0xf0108886,%eax
f0107d20:	c1 e8 10             	shr    $0x10,%eax
f0107d23:	66 a3 16 cb 52 f0    	mov    %ax,0xf052cb16
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f0107d29:	b8 8c 88 10 f0       	mov    $0xf010888c,%eax
f0107d2e:	66 a3 18 cb 52 f0    	mov    %ax,0xf052cb18
f0107d34:	66 c7 05 1a cb 52 f0 	movw   $0x8,0xf052cb1a
f0107d3b:	08 00 
f0107d3d:	a0 1c cb 52 f0       	mov    0xf052cb1c,%al
f0107d42:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d45:	a2 1c cb 52 f0       	mov    %al,0xf052cb1c
f0107d4a:	a0 1c cb 52 f0       	mov    0xf052cb1c,%al
f0107d4f:	83 e0 1f             	and    $0x1f,%eax
f0107d52:	a2 1c cb 52 f0       	mov    %al,0xf052cb1c
f0107d57:	a0 1d cb 52 f0       	mov    0xf052cb1d,%al
f0107d5c:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d5f:	83 c8 0e             	or     $0xe,%eax
f0107d62:	a2 1d cb 52 f0       	mov    %al,0xf052cb1d
f0107d67:	a0 1d cb 52 f0       	mov    0xf052cb1d,%al
f0107d6c:	83 e0 ef             	and    $0xffffffef,%eax
f0107d6f:	a2 1d cb 52 f0       	mov    %al,0xf052cb1d
f0107d74:	a0 1d cb 52 f0       	mov    0xf052cb1d,%al
f0107d79:	83 c8 60             	or     $0x60,%eax
f0107d7c:	a2 1d cb 52 f0       	mov    %al,0xf052cb1d
f0107d81:	a0 1d cb 52 f0       	mov    0xf052cb1d,%al
f0107d86:	83 c8 80             	or     $0xffffff80,%eax
f0107d89:	a2 1d cb 52 f0       	mov    %al,0xf052cb1d
f0107d8e:	b8 8c 88 10 f0       	mov    $0xf010888c,%eax
f0107d93:	c1 e8 10             	shr    $0x10,%eax
f0107d96:	66 a3 1e cb 52 f0    	mov    %ax,0xf052cb1e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f0107d9c:	c7 05 a4 d1 52 f0 00 	movl   $0xefc00000,0xf052d1a4
f0107da3:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f0107da6:	66 c7 05 a8 d1 52 f0 	movw   $0x10,0xf052d1a8
f0107dad:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f0107daf:	66 c7 05 c8 d7 14 f0 	movw   $0x68,0xf014d7c8
f0107db6:	68 00 
f0107db8:	b8 a0 d1 52 f0       	mov    $0xf052d1a0,%eax
f0107dbd:	66 a3 ca d7 14 f0    	mov    %ax,0xf014d7ca
f0107dc3:	b8 a0 d1 52 f0       	mov    $0xf052d1a0,%eax
f0107dc8:	c1 e8 10             	shr    $0x10,%eax
f0107dcb:	a2 cc d7 14 f0       	mov    %al,0xf014d7cc
f0107dd0:	a0 cd d7 14 f0       	mov    0xf014d7cd,%al
f0107dd5:	83 e0 f0             	and    $0xfffffff0,%eax
f0107dd8:	83 c8 09             	or     $0x9,%eax
f0107ddb:	a2 cd d7 14 f0       	mov    %al,0xf014d7cd
f0107de0:	a0 cd d7 14 f0       	mov    0xf014d7cd,%al
f0107de5:	83 c8 10             	or     $0x10,%eax
f0107de8:	a2 cd d7 14 f0       	mov    %al,0xf014d7cd
f0107ded:	a0 cd d7 14 f0       	mov    0xf014d7cd,%al
f0107df2:	83 e0 9f             	and    $0xffffff9f,%eax
f0107df5:	a2 cd d7 14 f0       	mov    %al,0xf014d7cd
f0107dfa:	a0 cd d7 14 f0       	mov    0xf014d7cd,%al
f0107dff:	83 c8 80             	or     $0xffffff80,%eax
f0107e02:	a2 cd d7 14 f0       	mov    %al,0xf014d7cd
f0107e07:	a0 ce d7 14 f0       	mov    0xf014d7ce,%al
f0107e0c:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e0f:	a2 ce d7 14 f0       	mov    %al,0xf014d7ce
f0107e14:	a0 ce d7 14 f0       	mov    0xf014d7ce,%al
f0107e19:	83 e0 ef             	and    $0xffffffef,%eax
f0107e1c:	a2 ce d7 14 f0       	mov    %al,0xf014d7ce
f0107e21:	a0 ce d7 14 f0       	mov    0xf014d7ce,%al
f0107e26:	83 e0 df             	and    $0xffffffdf,%eax
f0107e29:	a2 ce d7 14 f0       	mov    %al,0xf014d7ce
f0107e2e:	a0 ce d7 14 f0       	mov    0xf014d7ce,%al
f0107e33:	83 c8 40             	or     $0x40,%eax
f0107e36:	a2 ce d7 14 f0       	mov    %al,0xf014d7ce
f0107e3b:	a0 ce d7 14 f0       	mov    0xf014d7ce,%al
f0107e40:	83 e0 7f             	and    $0x7f,%eax
f0107e43:	a2 ce d7 14 f0       	mov    %al,0xf014d7ce
f0107e48:	b8 a0 d1 52 f0       	mov    $0xf052d1a0,%eax
f0107e4d:	c1 e8 18             	shr    $0x18,%eax
f0107e50:	a2 cf d7 14 f0       	mov    %al,0xf014d7cf
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f0107e55:	a0 cd d7 14 f0       	mov    0xf014d7cd,%al
f0107e5a:	83 e0 ef             	and    $0xffffffef,%eax
f0107e5d:	a2 cd d7 14 f0       	mov    %al,0xf014d7cd
f0107e62:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f0107e68:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f0107e6c:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f0107e6f:	0f 01 1d 20 da 14 f0 	lidtl  0xf014da20
}
f0107e76:	90                   	nop
f0107e77:	c9                   	leave  
f0107e78:	c3                   	ret    

f0107e79 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f0107e79:	55                   	push   %ebp
f0107e7a:	89 e5                	mov    %esp,%ebp
f0107e7c:	53                   	push   %ebx
f0107e7d:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f0107e80:	83 ec 08             	sub    $0x8,%esp
f0107e83:	ff 75 08             	pushl  0x8(%ebp)
f0107e86:	68 3b a2 11 f0       	push   $0xf011a23b
f0107e8b:	e8 05 ef ff ff       	call   f0106d95 <cprintf>
f0107e90:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f0107e93:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e96:	83 ec 0c             	sub    $0xc,%esp
f0107e99:	50                   	push   %eax
f0107e9a:	e8 fd 00 00 00       	call   f0107f9c <print_regs>
f0107e9f:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0107ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea5:	8b 40 20             	mov    0x20(%eax),%eax
f0107ea8:	0f b7 c0             	movzwl %ax,%eax
f0107eab:	83 ec 08             	sub    $0x8,%esp
f0107eae:	50                   	push   %eax
f0107eaf:	68 4d a2 11 f0       	push   $0xf011a24d
f0107eb4:	e8 dc ee ff ff       	call   f0106d95 <cprintf>
f0107eb9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f0107ebc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ebf:	8b 40 24             	mov    0x24(%eax),%eax
f0107ec2:	0f b7 c0             	movzwl %ax,%eax
f0107ec5:	83 ec 08             	sub    $0x8,%esp
f0107ec8:	50                   	push   %eax
f0107ec9:	68 60 a2 11 f0       	push   $0xf011a260
f0107ece:	e8 c2 ee ff ff       	call   f0106d95 <cprintf>
f0107ed3:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f0107ed6:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed9:	8b 58 28             	mov    0x28(%eax),%ebx
f0107edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107edf:	8b 40 28             	mov    0x28(%eax),%eax
f0107ee2:	83 ec 0c             	sub    $0xc,%esp
f0107ee5:	50                   	push   %eax
f0107ee6:	e8 d0 ee ff ff       	call   f0106dbb <trapname>
f0107eeb:	83 c4 10             	add    $0x10,%esp
f0107eee:	89 c2                	mov    %eax,%edx
f0107ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ef3:	8b 40 28             	mov    0x28(%eax),%eax
f0107ef6:	53                   	push   %ebx
f0107ef7:	52                   	push   %edx
f0107ef8:	50                   	push   %eax
f0107ef9:	68 73 a2 11 f0       	push   $0xf011a273
f0107efe:	e8 92 ee ff ff       	call   f0106d95 <cprintf>
f0107f03:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f0107f06:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f09:	8b 40 2c             	mov    0x2c(%eax),%eax
f0107f0c:	83 ec 08             	sub    $0x8,%esp
f0107f0f:	50                   	push   %eax
f0107f10:	68 8a a2 11 f0       	push   $0xf011a28a
f0107f15:	e8 7b ee ff ff       	call   f0106d95 <cprintf>
f0107f1a:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f0107f1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f20:	8b 40 30             	mov    0x30(%eax),%eax
f0107f23:	83 ec 08             	sub    $0x8,%esp
f0107f26:	50                   	push   %eax
f0107f27:	68 99 a2 11 f0       	push   $0xf011a299
f0107f2c:	e8 64 ee ff ff       	call   f0106d95 <cprintf>
f0107f31:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f0107f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f37:	8b 40 34             	mov    0x34(%eax),%eax
f0107f3a:	0f b7 c0             	movzwl %ax,%eax
f0107f3d:	83 ec 08             	sub    $0x8,%esp
f0107f40:	50                   	push   %eax
f0107f41:	68 a8 a2 11 f0       	push   $0xf011a2a8
f0107f46:	e8 4a ee ff ff       	call   f0106d95 <cprintf>
f0107f4b:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f0107f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f51:	8b 40 38             	mov    0x38(%eax),%eax
f0107f54:	83 ec 08             	sub    $0x8,%esp
f0107f57:	50                   	push   %eax
f0107f58:	68 bb a2 11 f0       	push   $0xf011a2bb
f0107f5d:	e8 33 ee ff ff       	call   f0106d95 <cprintf>
f0107f62:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f0107f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f68:	8b 40 3c             	mov    0x3c(%eax),%eax
f0107f6b:	83 ec 08             	sub    $0x8,%esp
f0107f6e:	50                   	push   %eax
f0107f6f:	68 ca a2 11 f0       	push   $0xf011a2ca
f0107f74:	e8 1c ee ff ff       	call   f0106d95 <cprintf>
f0107f79:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f0107f7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f7f:	8b 40 40             	mov    0x40(%eax),%eax
f0107f82:	0f b7 c0             	movzwl %ax,%eax
f0107f85:	83 ec 08             	sub    $0x8,%esp
f0107f88:	50                   	push   %eax
f0107f89:	68 d9 a2 11 f0       	push   $0xf011a2d9
f0107f8e:	e8 02 ee ff ff       	call   f0106d95 <cprintf>
f0107f93:	83 c4 10             	add    $0x10,%esp
}
f0107f96:	90                   	nop
f0107f97:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107f9a:	c9                   	leave  
f0107f9b:	c3                   	ret    

f0107f9c <print_regs>:

void print_regs(struct PushRegs *regs)
{
f0107f9c:	55                   	push   %ebp
f0107f9d:	89 e5                	mov    %esp,%ebp
f0107f9f:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f0107fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa5:	8b 00                	mov    (%eax),%eax
f0107fa7:	83 ec 08             	sub    $0x8,%esp
f0107faa:	50                   	push   %eax
f0107fab:	68 ec a2 11 f0       	push   $0xf011a2ec
f0107fb0:	e8 e0 ed ff ff       	call   f0106d95 <cprintf>
f0107fb5:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f0107fb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fbb:	8b 40 04             	mov    0x4(%eax),%eax
f0107fbe:	83 ec 08             	sub    $0x8,%esp
f0107fc1:	50                   	push   %eax
f0107fc2:	68 fb a2 11 f0       	push   $0xf011a2fb
f0107fc7:	e8 c9 ed ff ff       	call   f0106d95 <cprintf>
f0107fcc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f0107fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fd2:	8b 40 08             	mov    0x8(%eax),%eax
f0107fd5:	83 ec 08             	sub    $0x8,%esp
f0107fd8:	50                   	push   %eax
f0107fd9:	68 0a a3 11 f0       	push   $0xf011a30a
f0107fde:	e8 b2 ed ff ff       	call   f0106d95 <cprintf>
f0107fe3:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f0107fe6:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe9:	8b 40 0c             	mov    0xc(%eax),%eax
f0107fec:	83 ec 08             	sub    $0x8,%esp
f0107fef:	50                   	push   %eax
f0107ff0:	68 19 a3 11 f0       	push   $0xf011a319
f0107ff5:	e8 9b ed ff ff       	call   f0106d95 <cprintf>
f0107ffa:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f0107ffd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108000:	8b 40 10             	mov    0x10(%eax),%eax
f0108003:	83 ec 08             	sub    $0x8,%esp
f0108006:	50                   	push   %eax
f0108007:	68 28 a3 11 f0       	push   $0xf011a328
f010800c:	e8 84 ed ff ff       	call   f0106d95 <cprintf>
f0108011:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f0108014:	8b 45 08             	mov    0x8(%ebp),%eax
f0108017:	8b 40 14             	mov    0x14(%eax),%eax
f010801a:	83 ec 08             	sub    $0x8,%esp
f010801d:	50                   	push   %eax
f010801e:	68 37 a3 11 f0       	push   $0xf011a337
f0108023:	e8 6d ed ff ff       	call   f0106d95 <cprintf>
f0108028:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010802b:	8b 45 08             	mov    0x8(%ebp),%eax
f010802e:	8b 40 18             	mov    0x18(%eax),%eax
f0108031:	83 ec 08             	sub    $0x8,%esp
f0108034:	50                   	push   %eax
f0108035:	68 46 a3 11 f0       	push   $0xf011a346
f010803a:	e8 56 ed ff ff       	call   f0106d95 <cprintf>
f010803f:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f0108042:	8b 45 08             	mov    0x8(%ebp),%eax
f0108045:	8b 40 1c             	mov    0x1c(%eax),%eax
f0108048:	83 ec 08             	sub    $0x8,%esp
f010804b:	50                   	push   %eax
f010804c:	68 55 a3 11 f0       	push   $0xf011a355
f0108051:	e8 3f ed ff ff       	call   f0106d95 <cprintf>
f0108056:	83 c4 10             	add    $0x10,%esp
}
f0108059:	90                   	nop
f010805a:	c9                   	leave  
f010805b:	c3                   	ret    

f010805c <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010805c:	55                   	push   %ebp
f010805d:	89 e5                	mov    %esp,%ebp
f010805f:	57                   	push   %edi
f0108060:	56                   	push   %esi
f0108061:	53                   	push   %ebx
f0108062:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f0108065:	8b 45 08             	mov    0x8(%ebp),%eax
f0108068:	8b 40 28             	mov    0x28(%eax),%eax
f010806b:	83 f8 0e             	cmp    $0xe,%eax
f010806e:	75 21                	jne    f0108091 <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU())
f0108070:	e8 8f 02 00 00       	call   f0108304 <isPageReplacmentAlgorithmLRU>
f0108075:	85 c0                	test   %eax,%eax
f0108077:	74 05                	je     f010807e <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f0108079:	e8 8b 1c 00 00       	call   f0109d09 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010807e:	83 ec 0c             	sub    $0xc,%esp
f0108081:	ff 75 08             	pushl  0x8(%ebp)
f0108084:	e8 bb 03 00 00       	call   f0108444 <fault_handler>
f0108089:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010808c:	e9 a5 00 00 00       	jmp    f0108136 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f0108091:	8b 45 08             	mov    0x8(%ebp),%eax
f0108094:	8b 40 28             	mov    0x28(%eax),%eax
f0108097:	83 f8 30             	cmp    $0x30,%eax
f010809a:	75 42                	jne    f01080de <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010809c:	8b 45 08             	mov    0x8(%ebp),%eax
f010809f:	8b 78 04             	mov    0x4(%eax),%edi
f01080a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a5:	8b 30                	mov    (%eax),%esi
f01080a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080aa:	8b 58 10             	mov    0x10(%eax),%ebx
f01080ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01080b0:	8b 48 18             	mov    0x18(%eax),%ecx
f01080b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080b6:	8b 50 14             	mov    0x14(%eax),%edx
f01080b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01080bc:	8b 40 1c             	mov    0x1c(%eax),%eax
f01080bf:	83 ec 08             	sub    $0x8,%esp
f01080c2:	57                   	push   %edi
f01080c3:	56                   	push   %esi
f01080c4:	53                   	push   %ebx
f01080c5:	51                   	push   %ecx
f01080c6:	52                   	push   %edx
f01080c7:	50                   	push   %eax
f01080c8:	e8 df 24 00 00       	call   f010a5ac <syscall>
f01080cd:	83 c4 20             	add    $0x20,%esp
f01080d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f01080d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01080d9:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01080dc:	eb 58                	jmp    f0108136 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f01080de:	8b 45 08             	mov    0x8(%ebp),%eax
f01080e1:	8b 40 28             	mov    0x28(%eax),%eax
f01080e4:	83 f8 08             	cmp    $0x8,%eax
f01080e7:	75 17                	jne    f0108100 <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f01080e9:	83 ec 04             	sub    $0x4,%esp
f01080ec:	68 64 a3 11 f0       	push   $0xf011a364
f01080f1:	68 f0 00 00 00       	push   $0xf0
f01080f6:	68 73 a3 11 f0       	push   $0xf011a373
f01080fb:	e8 76 80 ff ff       	call   f0100176 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f0108100:	8b 45 08             	mov    0x8(%ebp),%eax
f0108103:	8b 40 28             	mov    0x28(%eax),%eax
f0108106:	83 f8 20             	cmp    $0x20,%eax
f0108109:	75 07                	jne    f0108112 <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f010810b:	e8 e0 1b 00 00       	call   f0109cf0 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f0108110:	eb 24                	jmp    f0108136 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f0108112:	8b 45 08             	mov    0x8(%ebp),%eax
f0108115:	8b 40 34             	mov    0x34(%eax),%eax
f0108118:	66 83 f8 08          	cmp    $0x8,%ax
f010811c:	75 17                	jne    f0108135 <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f010811e:	83 ec 04             	sub    $0x4,%esp
f0108121:	68 7f a3 11 f0       	push   $0xf011a37f
f0108126:	68 fd 00 00 00       	push   $0xfd
f010812b:	68 73 a3 11 f0       	push   $0xf011a373
f0108130:	e8 41 80 ff ff       	call   f0100176 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f0108135:	90                   	nop
		}
	}
	return;
}
f0108136:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0108139:	5b                   	pop    %ebx
f010813a:	5e                   	pop    %esi
f010813b:	5f                   	pop    %edi
f010813c:	5d                   	pop    %ebp
f010813d:	c3                   	ret    

f010813e <trap>:

void trap(struct Trapframe *tf)
{
f010813e:	55                   	push   %ebp
f010813f:	89 e5                	mov    %esp,%ebp
f0108141:	57                   	push   %edi
f0108142:	56                   	push   %esi
f0108143:	53                   	push   %ebx
f0108144:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f0108147:	e8 3c e9 ff ff       	call   f0106a88 <kclock_stop>

	int userTrap = 0;
f010814c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108153:	8b 45 08             	mov    0x8(%ebp),%eax
f0108156:	8b 40 34             	mov    0x34(%eax),%eax
f0108159:	0f b7 c0             	movzwl %ax,%eax
f010815c:	83 e0 03             	and    $0x3,%eax
f010815f:	83 f8 03             	cmp    $0x3,%eax
f0108162:	75 49                	jne    f01081ad <trap+0x6f>
		assert(curenv);
f0108164:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108169:	85 c0                	test   %eax,%eax
f010816b:	75 19                	jne    f0108186 <trap+0x48>
f010816d:	68 98 a3 11 f0       	push   $0xf011a398
f0108172:	68 9f a3 11 f0       	push   $0xf011a39f
f0108177:	68 0d 01 00 00       	push   $0x10d
f010817c:	68 73 a3 11 f0       	push   $0xf011a373
f0108181:	e8 f0 7f ff ff       	call   f0100176 <_panic>
		curenv->env_tf = *tf;
f0108186:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f010818c:	8b 45 08             	mov    0x8(%ebp),%eax
f010818f:	89 c3                	mov    %eax,%ebx
f0108191:	b8 11 00 00 00       	mov    $0x11,%eax
f0108196:	89 d7                	mov    %edx,%edi
f0108198:	89 de                	mov    %ebx,%esi
f010819a:	89 c1                	mov    %eax,%ecx
f010819c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010819e:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01081a3:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f01081a6:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f01081ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01081b0:	8b 40 28             	mov    0x28(%eax),%eax
f01081b3:	83 f8 20             	cmp    $0x20,%eax
f01081b6:	75 40                	jne    f01081f8 <trap+0xba>
	{
//		uint16 cnt0 = kclock_read_cnt0() ;
//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f01081b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01081bc:	0f 84 a6 00 00 00    	je     f0108268 <trap+0x12a>
		{
			assert(curenv);
f01081c2:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01081c7:	85 c0                	test   %eax,%eax
f01081c9:	75 19                	jne    f01081e4 <trap+0xa6>
f01081cb:	68 98 a3 11 f0       	push   $0xf011a398
f01081d0:	68 9f a3 11 f0       	push   $0xf011a39f
f01081d5:	68 19 01 00 00       	push   $0x119
f01081da:	68 73 a3 11 f0       	push   $0xf011a373
f01081df:	e8 92 7f ff ff       	call   f0100176 <_panic>
			curenv->nClocks++ ;
f01081e4:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01081e9:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f01081ef:	42                   	inc    %edx
f01081f0:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
f01081f6:	eb 70                	jmp    f0108268 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f01081f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081fb:	8b 40 28             	mov    0x28(%eax),%eax
f01081fe:	83 f8 0e             	cmp    $0xe,%eax
f0108201:	75 65                	jne    f0108268 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f0108203:	a0 80 c9 52 f0       	mov    0xf052c980,%al
f0108208:	84 c0                	test   %al,%al
f010820a:	74 5c                	je     f0108268 <trap+0x12a>
			if (userTrap){
f010820c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108210:	74 2c                	je     f010823e <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f0108212:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108217:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f010821d:	8b 52 30             	mov    0x30(%edx),%edx
f0108220:	89 d1                	mov    %edx,%ecx
f0108222:	8a 15 80 c9 52 f0    	mov    0xf052c980,%dl
f0108228:	0f b6 d2             	movzbl %dl,%edx
f010822b:	01 ca                	add    %ecx,%edx
f010822d:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f0108230:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108235:	83 ec 0c             	sub    $0xc,%esp
f0108238:	50                   	push   %eax
f0108239:	e8 77 de ff ff       	call   f01060b5 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010823e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108241:	8b 40 30             	mov    0x30(%eax),%eax
f0108244:	89 c2                	mov    %eax,%edx
f0108246:	a0 80 c9 52 f0       	mov    0xf052c980,%al
f010824b:	0f b6 c0             	movzbl %al,%eax
f010824e:	01 d0                	add    %edx,%eax
f0108250:	89 c2                	mov    %eax,%edx
f0108252:	8b 45 08             	mov    0x8(%ebp),%eax
f0108255:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f0108258:	e8 d0 e7 ff ff       	call   f0106a2d <kclock_resume>
				env_pop_tf(tf);
f010825d:	83 ec 0c             	sub    $0xc,%esp
f0108260:	ff 75 08             	pushl  0x8(%ebp)
f0108263:	e8 a0 e6 ff ff       	call   f0106908 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f0108268:	83 ec 0c             	sub    $0xc,%esp
f010826b:	ff 75 08             	pushl  0x8(%ebp)
f010826e:	e8 e9 fd ff ff       	call   f010805c <trap_dispatch>
f0108273:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f0108276:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010827a:	74 3d                	je     f01082b9 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010827c:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108281:	85 c0                	test   %eax,%eax
f0108283:	74 0d                	je     f0108292 <trap+0x154>
f0108285:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010828a:	8b 40 54             	mov    0x54(%eax),%eax
f010828d:	83 f8 02             	cmp    $0x2,%eax
f0108290:	74 19                	je     f01082ab <trap+0x16d>
f0108292:	68 b4 a3 11 f0       	push   $0xf011a3b4
f0108297:	68 9f a3 11 f0       	push   $0xf011a39f
f010829c:	68 2e 01 00 00       	push   $0x12e
f01082a1:	68 73 a3 11 f0       	push   $0xf011a373
f01082a6:	e8 cb 7e ff ff       	call   f0100176 <_panic>
		env_run(curenv);
f01082ab:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01082b0:	83 ec 0c             	sub    $0xc,%esp
f01082b3:	50                   	push   %eax
f01082b4:	e8 fc dd ff ff       	call   f01060b5 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f01082b9:	83 ec 0c             	sub    $0xc,%esp
f01082bc:	ff 75 08             	pushl  0x8(%ebp)
f01082bf:	e8 44 e6 ff ff       	call   f0106908 <env_pop_tf>

f01082c4 <setPageReplacmentAlgorithmLRU>:
	}
}

void setPageReplacmentAlgorithmLRU(){_PageRepAlgoType = PG_REP_LRU;}
f01082c4:	55                   	push   %ebp
f01082c5:	89 e5                	mov    %esp,%ebp
f01082c7:	c7 05 64 d2 52 f0 01 	movl   $0x1,0xf052d264
f01082ce:	00 00 00 
f01082d1:	90                   	nop
f01082d2:	5d                   	pop    %ebp
f01082d3:	c3                   	ret    

f01082d4 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f01082d4:	55                   	push   %ebp
f01082d5:	89 e5                	mov    %esp,%ebp
f01082d7:	c7 05 64 d2 52 f0 02 	movl   $0x2,0xf052d264
f01082de:	00 00 00 
f01082e1:	90                   	nop
f01082e2:	5d                   	pop    %ebp
f01082e3:	c3                   	ret    

f01082e4 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f01082e4:	55                   	push   %ebp
f01082e5:	89 e5                	mov    %esp,%ebp
f01082e7:	c7 05 64 d2 52 f0 03 	movl   $0x3,0xf052d264
f01082ee:	00 00 00 
f01082f1:	90                   	nop
f01082f2:	5d                   	pop    %ebp
f01082f3:	c3                   	ret    

f01082f4 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f01082f4:	55                   	push   %ebp
f01082f5:	89 e5                	mov    %esp,%ebp
f01082f7:	c7 05 64 d2 52 f0 04 	movl   $0x4,0xf052d264
f01082fe:	00 00 00 
f0108301:	90                   	nop
f0108302:	5d                   	pop    %ebp
f0108303:	c3                   	ret    

f0108304 <isPageReplacmentAlgorithmLRU>:

uint32 isPageReplacmentAlgorithmLRU(){if(_PageRepAlgoType == PG_REP_LRU) return 1; return 0;}
f0108304:	55                   	push   %ebp
f0108305:	89 e5                	mov    %esp,%ebp
f0108307:	a1 64 d2 52 f0       	mov    0xf052d264,%eax
f010830c:	83 f8 01             	cmp    $0x1,%eax
f010830f:	75 07                	jne    f0108318 <isPageReplacmentAlgorithmLRU+0x14>
f0108311:	b8 01 00 00 00       	mov    $0x1,%eax
f0108316:	eb 05                	jmp    f010831d <isPageReplacmentAlgorithmLRU+0x19>
f0108318:	b8 00 00 00 00       	mov    $0x0,%eax
f010831d:	5d                   	pop    %ebp
f010831e:	c3                   	ret    

f010831f <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010831f:	55                   	push   %ebp
f0108320:	89 e5                	mov    %esp,%ebp
f0108322:	a1 64 d2 52 f0       	mov    0xf052d264,%eax
f0108327:	83 f8 02             	cmp    $0x2,%eax
f010832a:	75 07                	jne    f0108333 <isPageReplacmentAlgorithmCLOCK+0x14>
f010832c:	b8 01 00 00 00       	mov    $0x1,%eax
f0108331:	eb 05                	jmp    f0108338 <isPageReplacmentAlgorithmCLOCK+0x19>
f0108333:	b8 00 00 00 00       	mov    $0x0,%eax
f0108338:	5d                   	pop    %ebp
f0108339:	c3                   	ret    

f010833a <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010833a:	55                   	push   %ebp
f010833b:	89 e5                	mov    %esp,%ebp
f010833d:	a1 64 d2 52 f0       	mov    0xf052d264,%eax
f0108342:	83 f8 03             	cmp    $0x3,%eax
f0108345:	75 07                	jne    f010834e <isPageReplacmentAlgorithmFIFO+0x14>
f0108347:	b8 01 00 00 00       	mov    $0x1,%eax
f010834c:	eb 05                	jmp    f0108353 <isPageReplacmentAlgorithmFIFO+0x19>
f010834e:	b8 00 00 00 00       	mov    $0x0,%eax
f0108353:	5d                   	pop    %ebp
f0108354:	c3                   	ret    

f0108355 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f0108355:	55                   	push   %ebp
f0108356:	89 e5                	mov    %esp,%ebp
f0108358:	a1 64 d2 52 f0       	mov    0xf052d264,%eax
f010835d:	83 f8 04             	cmp    $0x4,%eax
f0108360:	75 07                	jne    f0108369 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f0108362:	b8 01 00 00 00       	mov    $0x1,%eax
f0108367:	eb 05                	jmp    f010836e <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f0108369:	b8 00 00 00 00       	mov    $0x0,%eax
f010836e:	5d                   	pop    %ebp
f010836f:	c3                   	ret    

f0108370 <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f0108370:	55                   	push   %ebp
f0108371:	89 e5                	mov    %esp,%ebp
f0108373:	8b 45 08             	mov    0x8(%ebp),%eax
f0108376:	a3 54 d2 52 f0       	mov    %eax,0xf052d254
f010837b:	90                   	nop
f010837c:	5d                   	pop    %ebp
f010837d:	c3                   	ret    

f010837e <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010837e:	55                   	push   %ebp
f010837f:	89 e5                	mov    %esp,%ebp
f0108381:	a1 54 d2 52 f0       	mov    0xf052d254,%eax
f0108386:	5d                   	pop    %ebp
f0108387:	c3                   	ret    

f0108388 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f0108388:	55                   	push   %ebp
f0108389:	89 e5                	mov    %esp,%ebp
f010838b:	8b 45 08             	mov    0x8(%ebp),%eax
f010838e:	a3 68 d2 52 f0       	mov    %eax,0xf052d268
f0108393:	90                   	nop
f0108394:	5d                   	pop    %ebp
f0108395:	c3                   	ret    

f0108396 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f0108396:	55                   	push   %ebp
f0108397:	89 e5                	mov    %esp,%ebp
f0108399:	a1 68 d2 52 f0       	mov    0xf052d268,%eax
f010839e:	5d                   	pop    %ebp
f010839f:	c3                   	ret    

f01083a0 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f01083a0:	55                   	push   %ebp
f01083a1:	89 e5                	mov    %esp,%ebp
f01083a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a6:	a3 74 d2 52 f0       	mov    %eax,0xf052d274
f01083ab:	90                   	nop
f01083ac:	5d                   	pop    %ebp
f01083ad:	c3                   	ret    

f01083ae <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f01083ae:	55                   	push   %ebp
f01083af:	89 e5                	mov    %esp,%ebp
f01083b1:	a1 74 d2 52 f0       	mov    0xf052d274,%eax
f01083b6:	5d                   	pop    %ebp
f01083b7:	c3                   	ret    

f01083b8 <detect_modified_loop>:


void detect_modified_loop()
{
f01083b8:	55                   	push   %ebp
f01083b9:	89 e5                	mov    %esp,%ebp
f01083bb:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f01083be:	a1 a0 b6 54 f0       	mov    0xf054b6a0,%eax
f01083c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f01083c6:	a1 a0 b6 54 f0       	mov    0xf054b6a0,%eax
f01083cb:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01083ce:	eb 52                	jmp    f0108422 <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01083d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083d3:	8b 00                	mov    (%eax),%eax
f01083d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01083d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083de:	75 12                	jne    f01083f2 <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	68 e1 a3 11 f0       	push   $0xf011a3e1
f01083e8:	e8 a8 e9 ff ff       	call   f0106d95 <cprintf>
f01083ed:	83 c4 10             	add    $0x10,%esp
			break;
f01083f0:	eb 3f                	jmp    f0108431 <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f01083f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01083f6:	74 38                	je     f0108430 <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01083f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083fb:	8b 00                	mov    (%eax),%eax
f01083fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0108400:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108403:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108406:	75 12                	jne    f010841a <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108408:	83 ec 0c             	sub    $0xc,%esp
f010840b:	68 e1 a3 11 f0       	push   $0xf011a3e1
f0108410:	e8 80 e9 ff ff       	call   f0106d95 <cprintf>
f0108415:	83 c4 10             	add    $0x10,%esp
			break;
f0108418:	eb 17                	jmp    f0108431 <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f010841a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010841d:	8b 00                	mov    (%eax),%eax
f010841f:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f0108422:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108426:	74 09                	je     f0108431 <detect_modified_loop+0x79>
f0108428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010842c:	75 a2                	jne    f01083d0 <detect_modified_loop+0x18>
f010842e:	eb 01                	jmp    f0108431 <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0108430:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f0108431:	83 ec 0c             	sub    $0xc,%esp
f0108434:	68 fd a3 11 f0       	push   $0xf011a3fd
f0108439:	e8 57 e9 ff ff       	call   f0106d95 <cprintf>
f010843e:	83 c4 10             	add    $0x10,%esp
}
f0108441:	90                   	nop
f0108442:	c9                   	leave  
f0108443:	c3                   	ret    

f0108444 <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f0108444:	55                   	push   %ebp
f0108445:	89 e5                	mov    %esp,%ebp
f0108447:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010844a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108451:	8b 45 08             	mov    0x8(%ebp),%eax
f0108454:	8b 40 34             	mov    0x34(%eax),%eax
f0108457:	0f b7 c0             	movzwl %ax,%eax
f010845a:	83 e0 03             	and    $0x3,%eax
f010845d:	83 f8 03             	cmp    $0x3,%eax
f0108460:	75 07                	jne    f0108469 <fault_handler+0x25>
		userTrap = 1;
f0108462:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f0108469:	0f 20 d0             	mov    %cr2,%eax
f010846c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010846f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f0108472:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f0108475:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108479:	75 29                	jne    f01084a4 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010847b:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f0108482:	77 40                	ja     f01084c4 <fault_handler+0x80>
f0108484:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010848b:	76 37                	jbe    f01084c4 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010848d:	83 ec 04             	sub    $0x4,%esp
f0108490:	68 1c a4 11 f0       	push   $0xf011a41c
f0108495:	68 7b 01 00 00       	push   $0x17b
f010849a:	68 73 a3 11 f0       	push   $0xf011a373
f010849f:	e8 d2 7c ff ff       	call   f0100176 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f01084a4:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f01084ab:	76 17                	jbe    f01084c4 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f01084ad:	83 ec 04             	sub    $0x4,%esp
f01084b0:	68 40 a4 11 f0       	push   $0xf011a440
f01084b5:	68 81 01 00 00       	push   $0x181
f01084ba:	68 73 a3 11 f0       	push   $0xf011a373
f01084bf:	e8 b2 7c ff ff       	call   f0100176 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f01084c4:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01084c9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f01084cc:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01084d1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01084d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084d7:	c1 ea 16             	shr    $0x16,%edx
f01084da:	c1 e2 02             	shl    $0x2,%edx
f01084dd:	01 d0                	add    %edx,%eax
f01084df:	8b 00                	mov    (%eax),%eax
f01084e1:	83 e0 01             	and    $0x1,%eax
f01084e4:	85 c0                	test   %eax,%eax
f01084e6:	75 28                	jne    f0108510 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f01084e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084eb:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
f01084f1:	8d 50 01             	lea    0x1(%eax),%edx
f01084f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f7:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)

		table_fault_handler(faulted_env, fault_va);
f01084fd:	83 ec 08             	sub    $0x8,%esp
f0108500:	ff 75 ec             	pushl  -0x14(%ebp)
f0108503:	ff 75 e8             	pushl  -0x18(%ebp)
f0108506:	e8 56 00 00 00       	call   f0108561 <table_fault_handler>
f010850b:	83 c4 10             	add    $0x10,%esp
f010850e:	eb 42                	jmp    f0108552 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f0108510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108513:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f0108519:	8d 50 01             	lea    0x1(%eax),%edx
f010851c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010851f:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)

//				cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
//				cprintf("\nPage working set BEFORE fault handler...\n");
//				env_page_ws_print(curenv);

		if(isBufferingEnabled())
f0108525:	e8 6c fe ff ff       	call   f0108396 <isBufferingEnabled>
f010852a:	85 c0                	test   %eax,%eax
f010852c:	74 13                	je     f0108541 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010852e:	83 ec 08             	sub    $0x8,%esp
f0108531:	ff 75 ec             	pushl  -0x14(%ebp)
f0108534:	ff 75 e8             	pushl  -0x18(%ebp)
f0108537:	e8 44 02 00 00       	call   f0108780 <__page_fault_handler_with_buffering>
f010853c:	83 c4 10             	add    $0x10,%esp
f010853f:	eb 11                	jmp    f0108552 <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f0108541:	83 ec 08             	sub    $0x8,%esp
f0108544:	ff 75 ec             	pushl  -0x14(%ebp)
f0108547:	ff 75 e8             	pushl  -0x18(%ebp)
f010854a:	e8 3c 01 00 00       	call   f010868b <page_fault_handler>
f010854f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108552:	0f 20 d8             	mov    %cr3,%eax
f0108555:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108558:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010855b:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010855e:	90                   	nop
f010855f:	c9                   	leave  
f0108560:	c3                   	ret    

f0108561 <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0108561:	55                   	push   %ebp
f0108562:	89 e5                	mov    %esp,%ebp
f0108564:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
	if(USE_KHEAP)
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f0108567:	8b 45 08             	mov    0x8(%ebp),%eax
f010856a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010856d:	83 ec 08             	sub    $0x8,%esp
f0108570:	ff 75 0c             	pushl  0xc(%ebp)
f0108573:	50                   	push   %eax
f0108574:	e8 f4 b6 ff ff       	call   f0103c6d <create_page_table>
f0108579:	83 c4 10             	add    $0x10,%esp
f010857c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}

}
f010857f:	90                   	nop
f0108580:	c9                   	leave  
f0108581:	c3                   	ret    

f0108582 <placement>:

void placement(struct Env * curenv, uint32 fault_va) {
f0108582:	55                   	push   %ebp
f0108583:	89 e5                	mov    %esp,%ebp
f0108585:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* fPTR;
	allocate_frame(&fPTR);
f0108588:	83 ec 0c             	sub    $0xc,%esp
f010858b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010858e:	50                   	push   %eax
f010858f:	e8 02 b4 ff ff       	call   f0103996 <allocate_frame>
f0108594:	83 c4 10             	add    $0x10,%esp
	map_frame(curenv->env_page_directory, fPTR, (void*)fault_va, PERM_USER|PERM_WRITEABLE);
f0108597:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010859a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010859d:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085a3:	6a 06                	push   $0x6
f01085a5:	51                   	push   %ecx
f01085a6:	52                   	push   %edx
f01085a7:	50                   	push   %eax
f01085a8:	e8 5d b7 ff ff       	call   f0103d0a <map_frame>
f01085ad:	83 c4 10             	add    $0x10,%esp

	if(pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f01085b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085b3:	83 ec 08             	sub    $0x8,%esp
f01085b6:	50                   	push   %eax
f01085b7:	ff 75 08             	pushl  0x8(%ebp)
f01085ba:	e8 b8 2d 00 00       	call   f010b377 <pf_read_env_page>
f01085bf:	83 c4 10             	add    $0x10,%esp
f01085c2:	83 f8 f7             	cmp    $0xfffffff7,%eax
f01085c5:	75 4a                	jne    f0108611 <placement+0x8f>
		fault_va = ROUNDDOWN(fault_va,PAGE_SIZE);
f01085c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01085d5:	89 45 0c             	mov    %eax,0xc(%ebp)
		if((fault_va >= USER_HEAP_MAX) && (fault_va < USTACKTOP)) {
f01085d8:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f01085df:	76 1e                	jbe    f01085ff <placement+0x7d>
f01085e1:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f01085e8:	77 15                	ja     f01085ff <placement+0x7d>
			pf_add_empty_env_page(curenv, fault_va, 1);
f01085ea:	83 ec 04             	sub    $0x4,%esp
f01085ed:	6a 01                	push   $0x1
f01085ef:	ff 75 0c             	pushl  0xc(%ebp)
f01085f2:	ff 75 08             	pushl  0x8(%ebp)
f01085f5:	e8 e1 2a 00 00       	call   f010b0db <pf_add_empty_env_page>
f01085fa:	83 c4 10             	add    $0x10,%esp
f01085fd:	eb 12                	jmp    f0108611 <placement+0x8f>
		}
		else {
			cprintf("\t=>Page doesn't Exist\n");
f01085ff:	83 ec 0c             	sub    $0xc,%esp
f0108602:	68 61 a4 11 f0       	push   $0xf011a461
f0108607:	e8 89 e7 ff ff       	call   f0106d95 <cprintf>
f010860c:	83 c4 10             	add    $0x10,%esp
f010860f:	eb 78                	jmp    f0108689 <placement+0x107>
			return;
		}
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f0108611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108618:	eb 5f                	jmp    f0108679 <placement+0xf7>
		if(env_page_ws_is_entry_empty(curenv, i)) {
f010861a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010861d:	83 ec 08             	sub    $0x8,%esp
f0108620:	50                   	push   %eax
f0108621:	ff 75 08             	pushl  0x8(%ebp)
f0108624:	e8 1f bf ff ff       	call   f0104548 <env_page_ws_is_entry_empty>
f0108629:	83 c4 10             	add    $0x10,%esp
f010862c:	85 c0                	test   %eax,%eax
f010862e:	74 46                	je     f0108676 <placement+0xf4>
			env_page_ws_set_entry(curenv, i, fault_va);
f0108630:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108633:	83 ec 04             	sub    $0x4,%esp
f0108636:	ff 75 0c             	pushl  0xc(%ebp)
f0108639:	50                   	push   %eax
f010863a:	ff 75 08             	pushl  0x8(%ebp)
f010863d:	e8 55 bd ff ff       	call   f0104397 <env_page_ws_set_entry>
f0108642:	83 c4 10             	add    $0x10,%esp
			curenv->page_last_WS_index = i+1;
f0108645:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108648:	40                   	inc    %eax
f0108649:	89 c2                	mov    %eax,%edx
f010864b:	8b 45 08             	mov    0x8(%ebp),%eax
f010864e:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f0108654:	8b 45 08             	mov    0x8(%ebp),%eax
f0108657:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f010865d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108660:	8b 40 74             	mov    0x74(%eax),%eax
f0108663:	39 c2                	cmp    %eax,%edx
f0108665:	75 21                	jne    f0108688 <placement+0x106>
				curenv->page_last_WS_index = 0;
f0108667:	8b 45 08             	mov    0x8(%ebp),%eax
f010866a:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108671:	00 00 00 
			break;
f0108674:	eb 12                	jmp    f0108688 <placement+0x106>
			cprintf("\t=>Page doesn't Exist\n");
			return;
		}
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f0108676:	ff 45 f4             	incl   -0xc(%ebp)
f0108679:	8b 45 08             	mov    0x8(%ebp),%eax
f010867c:	8b 50 74             	mov    0x74(%eax),%edx
f010867f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108682:	39 c2                	cmp    %eax,%edx
f0108684:	77 94                	ja     f010861a <placement+0x98>
f0108686:	eb 01                	jmp    f0108689 <placement+0x107>
			env_page_ws_set_entry(curenv, i, fault_va);
			curenv->page_last_WS_index = i+1;

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
				curenv->page_last_WS_index = 0;
			break;
f0108688:	90                   	nop
		}
	}
}
f0108689:	c9                   	leave  
f010868a:	c3                   	ret    

f010868b <page_fault_handler>:


//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va) {
f010868b:	55                   	push   %ebp
f010868c:	89 e5                	mov    %esp,%ebp
f010868e:	83 ec 18             	sub    $0x18,%esp
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	//refer to the project presentation and documentation for details

	if (env_page_ws_get_size(curenv) < curenv->page_WS_max_size)
f0108691:	83 ec 0c             	sub    $0xc,%esp
f0108694:	ff 75 08             	pushl  0x8(%ebp)
f0108697:	e8 47 bc ff ff       	call   f01042e3 <env_page_ws_get_size>
f010869c:	83 c4 10             	add    $0x10,%esp
f010869f:	89 c2                	mov    %eax,%edx
f01086a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a4:	8b 40 74             	mov    0x74(%eax),%eax
f01086a7:	39 c2                	cmp    %eax,%edx
f01086a9:	73 16                	jae    f01086c1 <page_fault_handler+0x36>
		placement(curenv, fault_va);
f01086ab:	83 ec 08             	sub    $0x8,%esp
f01086ae:	ff 75 0c             	pushl  0xc(%ebp)
f01086b1:	ff 75 08             	pushl  0x8(%ebp)
f01086b4:	e8 c9 fe ff ff       	call   f0108582 <placement>
f01086b9:	83 c4 10             	add    $0x10,%esp
		env_page_ws_clear_entry(curenv, curenv->page_last_WS_index);
		placement(curenv, fault_va);
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f01086bc:	e9 bc 00 00 00       	jmp    f010877d <page_fault_handler+0xf2>
	//refer to the project presentation and documentation for details

	if (env_page_ws_get_size(curenv) < curenv->page_WS_max_size)
		placement(curenv, fault_va);
	else {
		uint32 vAdd = env_page_ws_get_virtual_address(curenv, curenv->page_last_WS_index);
f01086c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01086c4:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01086ca:	83 ec 08             	sub    $0x8,%esp
f01086cd:	50                   	push   %eax
f01086ce:	ff 75 08             	pushl  0x8(%ebp)
f01086d1:	e8 e2 bd ff ff       	call   f01044b8 <env_page_ws_get_virtual_address>
f01086d6:	83 c4 10             	add    $0x10,%esp
f01086d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

		if(pt_get_page_permissions(curenv, vAdd) & PERM_MODIFIED) {
f01086dc:	83 ec 08             	sub    $0x8,%esp
f01086df:	ff 75 f4             	pushl  -0xc(%ebp)
f01086e2:	ff 75 08             	pushl  0x8(%ebp)
f01086e5:	e8 21 c9 ff ff       	call   f010500b <pt_get_page_permissions>
f01086ea:	83 c4 10             	add    $0x10,%esp
f01086ed:	83 e0 40             	and    $0x40,%eax
f01086f0:	85 c0                	test   %eax,%eax
f01086f2:	74 4a                	je     f010873e <page_fault_handler+0xb3>
			uint32* ptr;
			struct Frame_Info* f = get_frame_info(curenv->env_page_directory, (void*)vAdd, &ptr);
f01086f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01086fa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01086fd:	83 ec 04             	sub    $0x4,%esp
f0108700:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f0108703:	51                   	push   %ecx
f0108704:	52                   	push   %edx
f0108705:	50                   	push   %eax
f0108706:	e8 be b6 ff ff       	call   f0103dc9 <get_frame_info>
f010870b:	83 c4 10             	add    $0x10,%esp
f010870e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pf_update_env_page(curenv, (void*)vAdd, f);
f0108711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108714:	83 ec 04             	sub    $0x4,%esp
f0108717:	ff 75 f0             	pushl  -0x10(%ebp)
f010871a:	50                   	push   %eax
f010871b:	ff 75 08             	pushl  0x8(%ebp)
f010871e:	e8 55 2b 00 00       	call   f010b278 <pf_update_env_page>
f0108723:	83 c4 10             	add    $0x10,%esp
			unmap_frame(curenv->env_page_directory, (void*)vAdd);
f0108726:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108729:	8b 45 08             	mov    0x8(%ebp),%eax
f010872c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010872f:	83 ec 08             	sub    $0x8,%esp
f0108732:	52                   	push   %edx
f0108733:	50                   	push   %eax
f0108734:	e8 00 b7 ff ff       	call   f0103e39 <unmap_frame>
f0108739:	83 c4 10             	add    $0x10,%esp
f010873c:	eb 16                	jmp    f0108754 <page_fault_handler+0xc9>
		}
		else
			unmap_frame(curenv->env_page_directory, (void*)vAdd);
f010873e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108741:	8b 45 08             	mov    0x8(%ebp),%eax
f0108744:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108747:	83 ec 08             	sub    $0x8,%esp
f010874a:	52                   	push   %edx
f010874b:	50                   	push   %eax
f010874c:	e8 e8 b6 ff ff       	call   f0103e39 <unmap_frame>
f0108751:	83 c4 10             	add    $0x10,%esp

		env_page_ws_clear_entry(curenv, curenv->page_last_WS_index);
f0108754:	8b 45 08             	mov    0x8(%ebp),%eax
f0108757:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010875d:	83 ec 08             	sub    $0x8,%esp
f0108760:	50                   	push   %eax
f0108761:	ff 75 08             	pushl  0x8(%ebp)
f0108764:	e8 d5 bc ff ff       	call   f010443e <env_page_ws_clear_entry>
f0108769:	83 c4 10             	add    $0x10,%esp
		placement(curenv, fault_va);
f010876c:	83 ec 08             	sub    $0x8,%esp
f010876f:	ff 75 0c             	pushl  0xc(%ebp)
f0108772:	ff 75 08             	pushl  0x8(%ebp)
f0108775:	e8 08 fe ff ff       	call   f0108582 <placement>
f010877a:	83 c4 10             	add    $0x10,%esp
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f010877d:	90                   	nop
f010877e:	c9                   	leave  
f010877f:	c3                   	ret    

f0108780 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f0108780:	55                   	push   %ebp
f0108781:	89 e5                	mov    %esp,%ebp
f0108783:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("this function is not required...!!");
f0108786:	83 ec 04             	sub    $0x4,%esp
f0108789:	68 78 a4 11 f0       	push   $0xf011a478
f010878e:	68 fe 01 00 00       	push   $0x1fe
f0108793:	68 73 a3 11 f0       	push   $0xf011a373
f0108798:	e8 d9 79 ff ff       	call   f0100176 <_panic>
f010879d:	90                   	nop

f010879e <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010879e:	6a 0e                	push   $0xe
f01087a0:	e9 ed 00 00 00       	jmp    f0108892 <_alltraps>
f01087a5:	90                   	nop

f01087a6 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f01087a6:	6a 00                	push   $0x0
f01087a8:	6a 30                	push   $0x30
f01087aa:	e9 e3 00 00 00       	jmp    f0108892 <_alltraps>
f01087af:	90                   	nop

f01087b0 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f01087b0:	6a 08                	push   $0x8
f01087b2:	e9 db 00 00 00       	jmp    f0108892 <_alltraps>
f01087b7:	90                   	nop

f01087b8 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f01087b8:	6a 00                	push   $0x0
f01087ba:	6a 00                	push   $0x0
f01087bc:	e9 d1 00 00 00       	jmp    f0108892 <_alltraps>
f01087c1:	90                   	nop

f01087c2 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f01087c2:	6a 00                	push   $0x0
f01087c4:	6a 01                	push   $0x1
f01087c6:	e9 c7 00 00 00       	jmp    f0108892 <_alltraps>
f01087cb:	90                   	nop

f01087cc <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f01087cc:	6a 00                	push   $0x0
f01087ce:	6a 02                	push   $0x2
f01087d0:	e9 bd 00 00 00       	jmp    f0108892 <_alltraps>
f01087d5:	90                   	nop

f01087d6 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f01087d6:	6a 00                	push   $0x0
f01087d8:	6a 03                	push   $0x3
f01087da:	e9 b3 00 00 00       	jmp    f0108892 <_alltraps>
f01087df:	90                   	nop

f01087e0 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f01087e0:	6a 00                	push   $0x0
f01087e2:	6a 04                	push   $0x4
f01087e4:	e9 a9 00 00 00       	jmp    f0108892 <_alltraps>
f01087e9:	90                   	nop

f01087ea <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f01087ea:	6a 00                	push   $0x0
f01087ec:	6a 05                	push   $0x5
f01087ee:	e9 9f 00 00 00       	jmp    f0108892 <_alltraps>
f01087f3:	90                   	nop

f01087f4 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f01087f4:	6a 00                	push   $0x0
f01087f6:	6a 06                	push   $0x6
f01087f8:	e9 95 00 00 00       	jmp    f0108892 <_alltraps>
f01087fd:	90                   	nop

f01087fe <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f01087fe:	6a 00                	push   $0x0
f0108800:	6a 07                	push   $0x7
f0108802:	e9 8b 00 00 00       	jmp    f0108892 <_alltraps>
f0108807:	90                   	nop

f0108808 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f0108808:	6a 0a                	push   $0xa
f010880a:	e9 83 00 00 00       	jmp    f0108892 <_alltraps>
f010880f:	90                   	nop

f0108810 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f0108810:	6a 0b                	push   $0xb
f0108812:	eb 7e                	jmp    f0108892 <_alltraps>

f0108814 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f0108814:	6a 0c                	push   $0xc
f0108816:	eb 7a                	jmp    f0108892 <_alltraps>

f0108818 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f0108818:	6a 0d                	push   $0xd
f010881a:	eb 76                	jmp    f0108892 <_alltraps>

f010881c <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010881c:	6a 00                	push   $0x0
f010881e:	6a 10                	push   $0x10
f0108820:	eb 70                	jmp    f0108892 <_alltraps>

f0108822 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f0108822:	6a 11                	push   $0x11
f0108824:	eb 6c                	jmp    f0108892 <_alltraps>

f0108826 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f0108826:	6a 00                	push   $0x0
f0108828:	6a 12                	push   $0x12
f010882a:	eb 66                	jmp    f0108892 <_alltraps>

f010882c <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010882c:	6a 00                	push   $0x0
f010882e:	6a 13                	push   $0x13
f0108830:	eb 60                	jmp    f0108892 <_alltraps>

f0108832 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f0108832:	6a 00                	push   $0x0
f0108834:	6a 20                	push   $0x20
f0108836:	eb 5a                	jmp    f0108892 <_alltraps>

f0108838 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f0108838:	6a 00                	push   $0x0
f010883a:	6a 21                	push   $0x21
f010883c:	eb 54                	jmp    f0108892 <_alltraps>

f010883e <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010883e:	6a 00                	push   $0x0
f0108840:	6a 22                	push   $0x22
f0108842:	eb 4e                	jmp    f0108892 <_alltraps>

f0108844 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f0108844:	6a 00                	push   $0x0
f0108846:	6a 23                	push   $0x23
f0108848:	eb 48                	jmp    f0108892 <_alltraps>

f010884a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010884a:	6a 00                	push   $0x0
f010884c:	6a 24                	push   $0x24
f010884e:	eb 42                	jmp    f0108892 <_alltraps>

f0108850 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f0108850:	6a 00                	push   $0x0
f0108852:	6a 25                	push   $0x25
f0108854:	eb 3c                	jmp    f0108892 <_alltraps>

f0108856 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f0108856:	6a 00                	push   $0x0
f0108858:	6a 26                	push   $0x26
f010885a:	eb 36                	jmp    f0108892 <_alltraps>

f010885c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010885c:	6a 00                	push   $0x0
f010885e:	6a 27                	push   $0x27
f0108860:	eb 30                	jmp    f0108892 <_alltraps>

f0108862 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f0108862:	6a 00                	push   $0x0
f0108864:	6a 28                	push   $0x28
f0108866:	eb 2a                	jmp    f0108892 <_alltraps>

f0108868 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f0108868:	6a 00                	push   $0x0
f010886a:	6a 29                	push   $0x29
f010886c:	eb 24                	jmp    f0108892 <_alltraps>

f010886e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010886e:	6a 00                	push   $0x0
f0108870:	6a 2a                	push   $0x2a
f0108872:	eb 1e                	jmp    f0108892 <_alltraps>

f0108874 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f0108874:	6a 00                	push   $0x0
f0108876:	6a 2b                	push   $0x2b
f0108878:	eb 18                	jmp    f0108892 <_alltraps>

f010887a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010887a:	6a 00                	push   $0x0
f010887c:	6a 2c                	push   $0x2c
f010887e:	eb 12                	jmp    f0108892 <_alltraps>

f0108880 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f0108880:	6a 00                	push   $0x0
f0108882:	6a 2d                	push   $0x2d
f0108884:	eb 0c                	jmp    f0108892 <_alltraps>

f0108886 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f0108886:	6a 00                	push   $0x0
f0108888:	6a 2e                	push   $0x2e
f010888a:	eb 06                	jmp    f0108892 <_alltraps>

f010888c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010888c:	6a 00                	push   $0x0
f010888e:	6a 2f                	push   $0x2f
f0108890:	eb 00                	jmp    f0108892 <_alltraps>

f0108892 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds 
f0108892:	1e                   	push   %ds
push %es 
f0108893:	06                   	push   %es
pushal 	
f0108894:	60                   	pusha  

mov $(GD_KD), %ax 
f0108895:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f0108899:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010889b:	8e c0                	mov    %eax,%es

push %esp
f010889d:	54                   	push   %esp

call trap
f010889e:	e8 9b f8 ff ff       	call   f010813e <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at 
f01088a3:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal 	
f01088a4:	61                   	popa   
pop %es 
f01088a5:	07                   	pop    %es
pop %ds    
f01088a6:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f01088a7:	83 c4 08             	add    $0x8,%esp

iret
f01088aa:	cf                   	iret   

f01088ab <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01088ab:	55                   	push   %ebp
f01088ac:	89 e5                	mov    %esp,%ebp
f01088ae:	a1 50 d2 52 f0       	mov    0xf052d250,%eax
f01088b3:	85 c0                	test   %eax,%eax
f01088b5:	75 07                	jne    f01088be <isSchedMethodRR+0x13>
f01088b7:	b8 01 00 00 00       	mov    $0x1,%eax
f01088bc:	eb 05                	jmp    f01088c3 <isSchedMethodRR+0x18>
f01088be:	b8 00 00 00 00       	mov    $0x0,%eax
f01088c3:	5d                   	pop    %ebp
f01088c4:	c3                   	ret    

f01088c5 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01088c5:	55                   	push   %ebp
f01088c6:	89 e5                	mov    %esp,%ebp
f01088c8:	a1 50 d2 52 f0       	mov    0xf052d250,%eax
f01088cd:	83 f8 01             	cmp    $0x1,%eax
f01088d0:	75 07                	jne    f01088d9 <isSchedMethodMLFQ+0x14>
f01088d2:	b8 01 00 00 00       	mov    $0x1,%eax
f01088d7:	eb 05                	jmp    f01088de <isSchedMethodMLFQ+0x19>
f01088d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01088de:	5d                   	pop    %ebp
f01088df:	c3                   	ret    

f01088e0 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01088e0:	55                   	push   %ebp
f01088e1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01088e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01088e7:	74 1d                	je     f0108906 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01088e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01088f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01088f5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01088fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0108906:	90                   	nop
f0108907:	5d                   	pop    %ebp
f0108908:	c3                   	ret    

f0108909 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0108909:	55                   	push   %ebp
f010890a:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010890c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108910:	74 08                	je     f010891a <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0108912:	8b 45 08             	mov    0x8(%ebp),%eax
f0108915:	8b 40 0c             	mov    0xc(%eax),%eax
f0108918:	eb 05                	jmp    f010891f <queue_size+0x16>
	}
	else
	{
		return 0;
f010891a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010891f:	5d                   	pop    %ebp
f0108920:	c3                   	ret    

f0108921 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0108921:	55                   	push   %ebp
f0108922:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108924:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108928:	74 4c                	je     f0108976 <enqueue+0x55>
	{
		LIST_INSERT_HEAD(queue, env);
f010892a:	8b 45 08             	mov    0x8(%ebp),%eax
f010892d:	8b 10                	mov    (%eax),%edx
f010892f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108932:	89 50 44             	mov    %edx,0x44(%eax)
f0108935:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108938:	8b 40 44             	mov    0x44(%eax),%eax
f010893b:	85 c0                	test   %eax,%eax
f010893d:	74 0d                	je     f010894c <enqueue+0x2b>
f010893f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108942:	8b 00                	mov    (%eax),%eax
f0108944:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108947:	89 50 48             	mov    %edx,0x48(%eax)
f010894a:	eb 09                	jmp    f0108955 <enqueue+0x34>
f010894c:	8b 45 08             	mov    0x8(%ebp),%eax
f010894f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108952:	89 50 04             	mov    %edx,0x4(%eax)
f0108955:	8b 45 08             	mov    0x8(%ebp),%eax
f0108958:	8b 55 0c             	mov    0xc(%ebp),%edx
f010895b:	89 10                	mov    %edx,(%eax)
f010895d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108960:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108967:	8b 45 08             	mov    0x8(%ebp),%eax
f010896a:	8b 40 0c             	mov    0xc(%eax),%eax
f010896d:	8d 50 01             	lea    0x1(%eax),%edx
f0108970:	8b 45 08             	mov    0x8(%ebp),%eax
f0108973:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0108976:	90                   	nop
f0108977:	5d                   	pop    %ebp
f0108978:	c3                   	ret    

f0108979 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0108979:	55                   	push   %ebp
f010897a:	89 e5                	mov    %esp,%ebp
f010897c:	83 ec 10             	sub    $0x10,%esp
	struct Env* envItem = LIST_LAST(queue);
f010897f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108982:	8b 40 04             	mov    0x4(%eax),%eax
f0108985:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (envItem != NULL)
f0108988:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010898c:	74 70                	je     f01089fe <dequeue+0x85>
	{
		LIST_REMOVE(queue, envItem);
f010898e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108991:	8b 40 44             	mov    0x44(%eax),%eax
f0108994:	85 c0                	test   %eax,%eax
f0108996:	74 11                	je     f01089a9 <dequeue+0x30>
f0108998:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010899b:	8b 40 44             	mov    0x44(%eax),%eax
f010899e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01089a1:	8b 52 48             	mov    0x48(%edx),%edx
f01089a4:	89 50 48             	mov    %edx,0x48(%eax)
f01089a7:	eb 0c                	jmp    f01089b5 <dequeue+0x3c>
f01089a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089ac:	8b 50 48             	mov    0x48(%eax),%edx
f01089af:	8b 45 08             	mov    0x8(%ebp),%eax
f01089b2:	89 50 04             	mov    %edx,0x4(%eax)
f01089b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089b8:	8b 40 48             	mov    0x48(%eax),%eax
f01089bb:	85 c0                	test   %eax,%eax
f01089bd:	74 11                	je     f01089d0 <dequeue+0x57>
f01089bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089c2:	8b 40 48             	mov    0x48(%eax),%eax
f01089c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01089c8:	8b 52 44             	mov    0x44(%edx),%edx
f01089cb:	89 50 44             	mov    %edx,0x44(%eax)
f01089ce:	eb 0b                	jmp    f01089db <dequeue+0x62>
f01089d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089d3:	8b 50 44             	mov    0x44(%eax),%edx
f01089d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01089d9:	89 10                	mov    %edx,(%eax)
f01089db:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089de:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01089e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01089e8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01089ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01089f2:	8b 40 0c             	mov    0xc(%eax),%eax
f01089f5:	8d 50 ff             	lea    -0x1(%eax),%edx
f01089f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01089fb:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01089fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0108a01:	c9                   	leave  
f0108a02:	c3                   	ret    

f0108a03 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0108a03:	55                   	push   %ebp
f0108a04:	89 e5                	mov    %esp,%ebp
	if (e != NULL)
f0108a06:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108a0a:	74 70                	je     f0108a7c <remove_from_queue+0x79>
	{
		LIST_REMOVE(queue, e);
f0108a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a0f:	8b 40 44             	mov    0x44(%eax),%eax
f0108a12:	85 c0                	test   %eax,%eax
f0108a14:	74 11                	je     f0108a27 <remove_from_queue+0x24>
f0108a16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a19:	8b 40 44             	mov    0x44(%eax),%eax
f0108a1c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a1f:	8b 52 48             	mov    0x48(%edx),%edx
f0108a22:	89 50 48             	mov    %edx,0x48(%eax)
f0108a25:	eb 0c                	jmp    f0108a33 <remove_from_queue+0x30>
f0108a27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a2a:	8b 50 48             	mov    0x48(%eax),%edx
f0108a2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a30:	89 50 04             	mov    %edx,0x4(%eax)
f0108a33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a36:	8b 40 48             	mov    0x48(%eax),%eax
f0108a39:	85 c0                	test   %eax,%eax
f0108a3b:	74 11                	je     f0108a4e <remove_from_queue+0x4b>
f0108a3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a40:	8b 40 48             	mov    0x48(%eax),%eax
f0108a43:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a46:	8b 52 44             	mov    0x44(%edx),%edx
f0108a49:	89 50 44             	mov    %edx,0x44(%eax)
f0108a4c:	eb 0b                	jmp    f0108a59 <remove_from_queue+0x56>
f0108a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a51:	8b 50 44             	mov    0x44(%eax),%edx
f0108a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a57:	89 10                	mov    %edx,(%eax)
f0108a59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a5c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a66:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108a6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a70:	8b 40 0c             	mov    0xc(%eax),%eax
f0108a73:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a79:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0108a7c:	90                   	nop
f0108a7d:	5d                   	pop    %ebp
f0108a7e:	c3                   	ret    

f0108a7f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0108a7f:	55                   	push   %ebp
f0108a80:	89 e5                	mov    %esp,%ebp
f0108a82:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0108a85:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0108a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a8f:	8b 00                	mov    (%eax),%eax
f0108a91:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0108a94:	eb 19                	jmp    f0108aaf <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0108a96:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108a99:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108a9c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108a9f:	75 05                	jne    f0108aa6 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0108aa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108aa4:	eb 37                	jmp    f0108add <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0108aa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108aa9:	8b 40 08             	mov    0x8(%eax),%eax
f0108aac:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0108aaf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108ab3:	74 08                	je     f0108abd <find_env_in_queue+0x3e>
f0108ab5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108ab8:	8b 40 44             	mov    0x44(%eax),%eax
f0108abb:	eb 05                	jmp    f0108ac2 <find_env_in_queue+0x43>
f0108abd:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ac2:	8b 55 08             	mov    0x8(%ebp),%edx
f0108ac5:	89 42 08             	mov    %eax,0x8(%edx)
f0108ac8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108acb:	8b 40 08             	mov    0x8(%eax),%eax
f0108ace:	85 c0                	test   %eax,%eax
f0108ad0:	75 c4                	jne    f0108a96 <find_env_in_queue+0x17>
f0108ad2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108ad6:	75 be                	jne    f0108a96 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0108ad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108add:	c9                   	leave  
f0108ade:	c3                   	ret    

f0108adf <sched_init_MLFQ>:

//==================================================================================//
//============================= REQUIRED FUNCTIONS =================================//
//==================================================================================//

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel) {
f0108adf:	55                   	push   %ebp
f0108ae0:	89 e5                	mov    %esp,%ebp
f0108ae2:	83 ec 18             	sub    $0x18,%esp
f0108ae5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ae8:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0108aeb:	e8 f9 01 00 00       	call   f0108ce9 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0108af0:	c7 05 58 d2 52 f0 00 	movl   $0x0,0xf052d258
f0108af7:	00 00 00 
	scheduler_method = SCH_MLFQ;
f0108afa:	c7 05 50 d2 52 f0 01 	movl   $0x1,0xf052d250
f0108b01:	00 00 00 
	//=========================================
	//=========================================

	//TODO: [PROJECT 2022 [7] CPU Scheduling MLFQ] Initialize MLFQ
	// Write your code here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f0108b04:	83 ec 04             	sub    $0x4,%esp
f0108b07:	68 30 a6 11 f0       	push   $0xf011a630
f0108b0c:	6a 66                	push   $0x66
f0108b0e:	68 5e a6 11 f0       	push   $0xf011a65e
f0108b13:	e8 5e 76 ff ff       	call   f0100176 <_panic>

f0108b18 <fos_scheduler_MLFQ>:
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
}


struct Env* fos_scheduler_MLFQ() {
f0108b18:	55                   	push   %ebp
f0108b19:	89 e5                	mov    %esp,%ebp
f0108b1b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 [8] CPU Scheduling MLFQ] MLFQ Scheduler
	// Write your code here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0108b1e:	83 ec 04             	sub    $0x4,%esp
f0108b21:	68 6c a6 11 f0       	push   $0xf011a66c
f0108b26:	6a 71                	push   $0x71
f0108b28:	68 5e a6 11 f0       	push   $0xf011a65e
f0108b2d:	e8 44 76 ff ff       	call   f0100176 <_panic>

f0108b32 <fos_scheduler>:
//==================================================================================//



void fos_scheduler(void)
{
f0108b32:	55                   	push   %ebp
f0108b33:	89 e5                	mov    %esp,%ebp
f0108b35:	83 ec 18             	sub    $0x18,%esp

	chk1();
f0108b38:	e8 0a c5 00 00       	call   f0115047 <chk1>
	scheduler_status = SCH_STARTED;
f0108b3d:	c7 05 58 d2 52 f0 01 	movl   $0x1,0xf052d258
f0108b44:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0108b47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0108b4e:	a1 50 d2 52 f0       	mov    0xf052d250,%eax
f0108b53:	85 c0                	test   %eax,%eax
f0108b55:	75 4d                	jne    f0108ba4 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0108b57:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108b5c:	85 c0                	test   %eax,%eax
f0108b5e:	74 18                	je     f0108b78 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0108b60:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f0108b66:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108b6b:	83 ec 08             	sub    $0x8,%esp
f0108b6e:	52                   	push   %edx
f0108b6f:	50                   	push   %eax
f0108b70:	e8 ac fd ff ff       	call   f0108921 <enqueue>
f0108b75:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0108b78:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108b7d:	83 ec 0c             	sub    $0xc,%esp
f0108b80:	50                   	push   %eax
f0108b81:	e8 f3 fd ff ff       	call   f0108979 <dequeue>
f0108b86:	83 c4 10             	add    $0x10,%esp
f0108b89:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0108b8c:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0108b91:	8a 00                	mov    (%eax),%al
f0108b93:	0f b6 c0             	movzbl %al,%eax
f0108b96:	83 ec 0c             	sub    $0xc,%esp
f0108b99:	50                   	push   %eax
f0108b9a:	e8 47 de ff ff       	call   f01069e6 <kclock_set_quantum>
f0108b9f:	83 c4 10             	add    $0x10,%esp
f0108ba2:	eb 12                	jmp    f0108bb6 <fos_scheduler+0x84>

	}
	else if (scheduler_method == SCH_MLFQ)
f0108ba4:	a1 50 d2 52 f0       	mov    0xf052d250,%eax
f0108ba9:	83 f8 01             	cmp    $0x1,%eax
f0108bac:	75 08                	jne    f0108bb6 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0108bae:	e8 65 ff ff ff       	call   f0108b18 <fos_scheduler_MLFQ>
f0108bb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0108bb6:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0108bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0108bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bc1:	a3 50 c9 52 f0       	mov    %eax,0xf052c950
	chk2(next_env);
f0108bc6:	83 ec 0c             	sub    $0xc,%esp
f0108bc9:	ff 75 f4             	pushl  -0xc(%ebp)
f0108bcc:	e8 b3 c4 00 00       	call   f0115084 <chk2>
f0108bd1:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0108bd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108bd7:	a3 50 c9 52 f0       	mov    %eax,0xf052c950

	//cprintf("Scheduler select program '%s'\n", next_env->prog_name);
	if(next_env != NULL)
f0108bdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108be0:	74 0b                	je     f0108bed <fos_scheduler+0xbb>
	{
		env_run(next_env);
f0108be2:	83 ec 0c             	sub    $0xc,%esp
f0108be5:	ff 75 f4             	pushl  -0xc(%ebp)
f0108be8:	e8 c8 d4 ff ff       	call   f01060b5 <env_run>
	}
	else
	{
		curenv = NULL;
f0108bed:	c7 05 50 c9 52 f0 00 	movl   $0x0,0xf052c950
f0108bf4:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0108bf7:	a1 d8 b6 54 f0       	mov    0xf054b6d8,%eax
f0108bfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108bff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c02:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0108c05:	c7 05 58 d2 52 f0 00 	movl   $0x0,0xf052d258
f0108c0c:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0108c0f:	83 ec 0c             	sub    $0xc,%esp
f0108c12:	6a 00                	push   $0x0
f0108c14:	e8 db 8b ff ff       	call   f01017f4 <run_command_prompt>
f0108c19:	83 c4 10             	add    $0x10,%esp
f0108c1c:	eb f1                	jmp    f0108c0f <fos_scheduler+0xdd>

f0108c1e <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0108c1e:	55                   	push   %ebp
f0108c1f:	89 e5                	mov    %esp,%ebp
f0108c21:	83 ec 18             	sub    $0x18,%esp
f0108c24:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c27:	88 45 f4             	mov    %al,-0xc(%ebp)
	sched_delete_ready_queues();
f0108c2a:	e8 ba 00 00 00       	call   f0108ce9 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0108c2f:	c7 05 58 d2 52 f0 00 	movl   $0x0,0xf052d258
f0108c36:	00 00 00 
	scheduler_method = SCH_RR;
f0108c39:	c7 05 50 d2 52 f0 00 	movl   $0x0,0xf052d250
f0108c40:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0108c43:	c6 05 60 d2 52 f0 01 	movb   $0x1,0xf052d260
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0108c4a:	83 ec 0c             	sub    $0xc,%esp
f0108c4d:	6a 10                	push   $0x10
f0108c4f:	e8 9b 2d 00 00       	call   f010b9ef <kmalloc>
f0108c54:	83 c4 10             	add    $0x10,%esp
f0108c57:	a3 14 d2 52 f0       	mov    %eax,0xf052d214
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0108c5c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0108c61:	0f b6 c0             	movzbl %al,%eax
f0108c64:	83 ec 0c             	sub    $0xc,%esp
f0108c67:	50                   	push   %eax
f0108c68:	e8 82 2d 00 00       	call   f010b9ef <kmalloc>
f0108c6d:	83 c4 10             	add    $0x10,%esp
f0108c70:	a3 30 d2 52 f0       	mov    %eax,0xf052d230
	quantums[0] = quantum;
f0108c75:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0108c7a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0108c7d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0108c7f:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0108c84:	8a 00                	mov    (%eax),%al
f0108c86:	0f b6 c0             	movzbl %al,%eax
f0108c89:	83 ec 0c             	sub    $0xc,%esp
f0108c8c:	50                   	push   %eax
f0108c8d:	e8 54 dd ff ff       	call   f01069e6 <kclock_set_quantum>
f0108c92:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0108c95:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108c9a:	83 ec 0c             	sub    $0xc,%esp
f0108c9d:	50                   	push   %eax
f0108c9e:	e8 3d fc ff ff       	call   f01088e0 <init_queue>
f0108ca3:	83 c4 10             	add    $0x10,%esp
}
f0108ca6:	90                   	nop
f0108ca7:	c9                   	leave  
f0108ca8:	c3                   	ret    

f0108ca9 <sched_init>:



void sched_init()
{
f0108ca9:	55                   	push   %ebp
f0108caa:	89 e5                	mov    %esp,%ebp
f0108cac:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0108caf:	c7 05 28 d2 52 f0 00 	movl   $0x0,0xf052d228
f0108cb6:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0108cb9:	83 ec 0c             	sub    $0xc,%esp
f0108cbc:	6a 0a                	push   $0xa
f0108cbe:	e8 5b ff ff ff       	call   f0108c1e <sched_init_RR>
f0108cc3:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0108cc6:	83 ec 0c             	sub    $0xc,%esp
f0108cc9:	68 40 d2 52 f0       	push   $0xf052d240
f0108cce:	e8 0d fc ff ff       	call   f01088e0 <init_queue>
f0108cd3:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0108cd6:	83 ec 0c             	sub    $0xc,%esp
f0108cd9:	68 18 d2 52 f0       	push   $0xf052d218
f0108cde:	e8 fd fb ff ff       	call   f01088e0 <init_queue>
f0108ce3:	83 c4 10             	add    $0x10,%esp
}
f0108ce6:	90                   	nop
f0108ce7:	c9                   	leave  
f0108ce8:	c3                   	ret    

f0108ce9 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0108ce9:	55                   	push   %ebp
f0108cea:	89 e5                	mov    %esp,%ebp
f0108cec:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f0108cef:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108cf4:	85 c0                	test   %eax,%eax
f0108cf6:	74 11                	je     f0108d09 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0108cf8:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108cfd:	83 ec 0c             	sub    $0xc,%esp
f0108d00:	50                   	push   %eax
f0108d01:	e8 02 2e 00 00       	call   f010bb08 <kfree>
f0108d06:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0108d09:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0108d0e:	85 c0                	test   %eax,%eax
f0108d10:	74 11                	je     f0108d23 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0108d12:	a1 30 d2 52 f0       	mov    0xf052d230,%eax
f0108d17:	83 ec 0c             	sub    $0xc,%esp
f0108d1a:	50                   	push   %eax
f0108d1b:	e8 e8 2d 00 00       	call   f010bb08 <kfree>
f0108d20:	83 c4 10             	add    $0x10,%esp
}
f0108d23:	90                   	nop
f0108d24:	c9                   	leave  
f0108d25:	c3                   	ret    

f0108d26 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0108d26:	55                   	push   %ebp
f0108d27:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108d29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108d2d:	74 1b                	je     f0108d4a <sched_insert_ready+0x24>
	{
		env->env_status = ENV_READY ;
f0108d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d32:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0108d39:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108d3e:	ff 75 08             	pushl  0x8(%ebp)
f0108d41:	50                   	push   %eax
f0108d42:	e8 da fb ff ff       	call   f0108921 <enqueue>
f0108d47:	83 c4 08             	add    $0x8,%esp
	}
}
f0108d4a:	90                   	nop
f0108d4b:	c9                   	leave  
f0108d4c:	c3                   	ret    

f0108d4d <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0108d4d:	55                   	push   %ebp
f0108d4e:	89 e5                	mov    %esp,%ebp
f0108d50:	83 ec 10             	sub    $0x10,%esp
	if(env != NULL)
f0108d53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108d57:	0f 84 e1 00 00 00    	je     f0108e3e <sched_remove_ready+0xf1>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0108d5d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d64:	e9 c4 00 00 00       	jmp    f0108e2d <sched_remove_ready+0xe0>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0108d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d6c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108d6f:	89 c2                	mov    %eax,%edx
f0108d71:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108d76:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0108d79:	c1 e1 04             	shl    $0x4,%ecx
f0108d7c:	01 c8                	add    %ecx,%eax
f0108d7e:	52                   	push   %edx
f0108d7f:	50                   	push   %eax
f0108d80:	e8 fa fc ff ff       	call   f0108a7f <find_env_in_queue>
f0108d85:	83 c4 08             	add    $0x8,%esp
f0108d88:	89 45 f8             	mov    %eax,-0x8(%ebp)
			if (ptr_env != NULL)
f0108d8b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0108d8f:	0f 84 95 00 00 00    	je     f0108e2a <sched_remove_ready+0xdd>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0108d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d98:	8b 40 44             	mov    0x44(%eax),%eax
f0108d9b:	85 c0                	test   %eax,%eax
f0108d9d:	74 11                	je     f0108db0 <sched_remove_ready+0x63>
f0108d9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108da2:	8b 40 44             	mov    0x44(%eax),%eax
f0108da5:	8b 55 08             	mov    0x8(%ebp),%edx
f0108da8:	8b 52 48             	mov    0x48(%edx),%edx
f0108dab:	89 50 48             	mov    %edx,0x48(%eax)
f0108dae:	eb 16                	jmp    f0108dc6 <sched_remove_ready+0x79>
f0108db0:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108db5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108db8:	c1 e2 04             	shl    $0x4,%edx
f0108dbb:	01 c2                	add    %eax,%edx
f0108dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dc0:	8b 40 48             	mov    0x48(%eax),%eax
f0108dc3:	89 42 04             	mov    %eax,0x4(%edx)
f0108dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dc9:	8b 40 48             	mov    0x48(%eax),%eax
f0108dcc:	85 c0                	test   %eax,%eax
f0108dce:	74 11                	je     f0108de1 <sched_remove_ready+0x94>
f0108dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dd3:	8b 40 48             	mov    0x48(%eax),%eax
f0108dd6:	8b 55 08             	mov    0x8(%ebp),%edx
f0108dd9:	8b 52 44             	mov    0x44(%edx),%edx
f0108ddc:	89 50 44             	mov    %edx,0x44(%eax)
f0108ddf:	eb 15                	jmp    f0108df6 <sched_remove_ready+0xa9>
f0108de1:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108de6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108de9:	c1 e2 04             	shl    $0x4,%edx
f0108dec:	01 c2                	add    %eax,%edx
f0108dee:	8b 45 08             	mov    0x8(%ebp),%eax
f0108df1:	8b 40 44             	mov    0x44(%eax),%eax
f0108df4:	89 02                	mov    %eax,(%edx)
f0108df6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108df9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e03:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108e0a:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0108e0f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108e12:	c1 e2 04             	shl    $0x4,%edx
f0108e15:	01 d0                	add    %edx,%eax
f0108e17:	8b 50 0c             	mov    0xc(%eax),%edx
f0108e1a:	4a                   	dec    %edx
f0108e1b:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0108e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e21:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0108e28:	eb 14                	jmp    f0108e3e <sched_remove_ready+0xf1>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0108e2a:	ff 45 fc             	incl   -0x4(%ebp)
f0108e2d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0108e32:	0f b6 c0             	movzbl %al,%eax
f0108e35:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0108e38:	0f 8f 2b ff ff ff    	jg     f0108d69 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0108e3e:	c9                   	leave  
f0108e3f:	c3                   	ret    

f0108e40 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0108e40:	55                   	push   %ebp
f0108e41:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108e43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108e47:	74 1a                	je     f0108e63 <sched_insert_new+0x23>
	{
		env->env_status = ENV_NEW ;
f0108e49:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e4c:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0108e53:	ff 75 08             	pushl  0x8(%ebp)
f0108e56:	68 40 d2 52 f0       	push   $0xf052d240
f0108e5b:	e8 c1 fa ff ff       	call   f0108921 <enqueue>
f0108e60:	83 c4 08             	add    $0x8,%esp
	}
}
f0108e63:	90                   	nop
f0108e64:	c9                   	leave  
f0108e65:	c3                   	ret    

f0108e66 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0108e66:	55                   	push   %ebp
f0108e67:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108e69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108e6d:	74 75                	je     f0108ee4 <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0108e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e72:	8b 40 44             	mov    0x44(%eax),%eax
f0108e75:	85 c0                	test   %eax,%eax
f0108e77:	74 11                	je     f0108e8a <sched_remove_new+0x24>
f0108e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e7c:	8b 40 44             	mov    0x44(%eax),%eax
f0108e7f:	8b 55 08             	mov    0x8(%ebp),%edx
f0108e82:	8b 52 48             	mov    0x48(%edx),%edx
f0108e85:	89 50 48             	mov    %edx,0x48(%eax)
f0108e88:	eb 0b                	jmp    f0108e95 <sched_remove_new+0x2f>
f0108e8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e8d:	8b 40 48             	mov    0x48(%eax),%eax
f0108e90:	a3 44 d2 52 f0       	mov    %eax,0xf052d244
f0108e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e98:	8b 40 48             	mov    0x48(%eax),%eax
f0108e9b:	85 c0                	test   %eax,%eax
f0108e9d:	74 11                	je     f0108eb0 <sched_remove_new+0x4a>
f0108e9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ea2:	8b 40 48             	mov    0x48(%eax),%eax
f0108ea5:	8b 55 08             	mov    0x8(%ebp),%edx
f0108ea8:	8b 52 44             	mov    0x44(%edx),%edx
f0108eab:	89 50 44             	mov    %edx,0x44(%eax)
f0108eae:	eb 0b                	jmp    f0108ebb <sched_remove_new+0x55>
f0108eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0108eb3:	8b 40 44             	mov    0x44(%eax),%eax
f0108eb6:	a3 40 d2 52 f0       	mov    %eax,0xf052d240
f0108ebb:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ebe:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108ec5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ec8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108ecf:	a1 4c d2 52 f0       	mov    0xf052d24c,%eax
f0108ed4:	48                   	dec    %eax
f0108ed5:	a3 4c d2 52 f0       	mov    %eax,0xf052d24c
		env->env_status = ENV_UNKNOWN;
f0108eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0108edd:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0108ee4:	90                   	nop
f0108ee5:	5d                   	pop    %ebp
f0108ee6:	c3                   	ret    

f0108ee7 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0108ee7:	55                   	push   %ebp
f0108ee8:	89 e5                	mov    %esp,%ebp
f0108eea:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0108eed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108ef1:	74 34                	je     f0108f27 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0108ef3:	e8 9e f4 ff ff       	call   f0108396 <isBufferingEnabled>
f0108ef8:	85 c0                	test   %eax,%eax
f0108efa:	74 0e                	je     f0108f0a <sched_insert_exit+0x23>
f0108efc:	83 ec 0c             	sub    $0xc,%esp
f0108eff:	ff 75 08             	pushl  0x8(%ebp)
f0108f02:	e8 57 d9 ff ff       	call   f010685e <cleanup_buffers>
f0108f07:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0108f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f0d:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0108f14:	83 ec 08             	sub    $0x8,%esp
f0108f17:	ff 75 08             	pushl  0x8(%ebp)
f0108f1a:	68 18 d2 52 f0       	push   $0xf052d218
f0108f1f:	e8 fd f9 ff ff       	call   f0108921 <enqueue>
f0108f24:	83 c4 10             	add    $0x10,%esp
	}
}
f0108f27:	90                   	nop
f0108f28:	c9                   	leave  
f0108f29:	c3                   	ret    

f0108f2a <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0108f2a:	55                   	push   %ebp
f0108f2b:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108f2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108f31:	74 75                	je     f0108fa8 <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0108f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f36:	8b 40 44             	mov    0x44(%eax),%eax
f0108f39:	85 c0                	test   %eax,%eax
f0108f3b:	74 11                	je     f0108f4e <sched_remove_exit+0x24>
f0108f3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f40:	8b 40 44             	mov    0x44(%eax),%eax
f0108f43:	8b 55 08             	mov    0x8(%ebp),%edx
f0108f46:	8b 52 48             	mov    0x48(%edx),%edx
f0108f49:	89 50 48             	mov    %edx,0x48(%eax)
f0108f4c:	eb 0b                	jmp    f0108f59 <sched_remove_exit+0x2f>
f0108f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f51:	8b 40 48             	mov    0x48(%eax),%eax
f0108f54:	a3 1c d2 52 f0       	mov    %eax,0xf052d21c
f0108f59:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f5c:	8b 40 48             	mov    0x48(%eax),%eax
f0108f5f:	85 c0                	test   %eax,%eax
f0108f61:	74 11                	je     f0108f74 <sched_remove_exit+0x4a>
f0108f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f66:	8b 40 48             	mov    0x48(%eax),%eax
f0108f69:	8b 55 08             	mov    0x8(%ebp),%edx
f0108f6c:	8b 52 44             	mov    0x44(%edx),%edx
f0108f6f:	89 50 44             	mov    %edx,0x44(%eax)
f0108f72:	eb 0b                	jmp    f0108f7f <sched_remove_exit+0x55>
f0108f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f77:	8b 40 44             	mov    0x44(%eax),%eax
f0108f7a:	a3 18 d2 52 f0       	mov    %eax,0xf052d218
f0108f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f82:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108f89:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f8c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108f93:	a1 24 d2 52 f0       	mov    0xf052d224,%eax
f0108f98:	48                   	dec    %eax
f0108f99:	a3 24 d2 52 f0       	mov    %eax,0xf052d224
		env->env_status = ENV_UNKNOWN;
f0108f9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fa1:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0108fa8:	90                   	nop
f0108fa9:	5d                   	pop    %ebp
f0108faa:	c3                   	ret    

f0108fab <sched_print_all>:

void sched_print_all()
{
f0108fab:	55                   	push   %ebp
f0108fac:	89 e5                	mov    %esp,%ebp
f0108fae:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0108fb1:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f0108fb6:	85 c0                	test   %eax,%eax
f0108fb8:	74 6c                	je     f0109026 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0108fba:	83 ec 0c             	sub    $0xc,%esp
f0108fbd:	68 a0 a6 11 f0       	push   $0xf011a6a0
f0108fc2:	e8 ce dd ff ff       	call   f0106d95 <cprintf>
f0108fc7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0108fca:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f0108fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108fd2:	eb 29                	jmp    f0108ffd <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0108fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fd7:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0108fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fe0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108fe3:	83 ec 04             	sub    $0x4,%esp
f0108fe6:	52                   	push   %edx
f0108fe7:	50                   	push   %eax
f0108fe8:	68 c2 a6 11 f0       	push   $0xf011a6c2
f0108fed:	e8 a3 dd ff ff       	call   f0106d95 <cprintf>
f0108ff2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0108ff5:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f0108ffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108ffd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109001:	74 08                	je     f010900b <sched_print_all+0x60>
f0109003:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109006:	8b 40 44             	mov    0x44(%eax),%eax
f0109009:	eb 05                	jmp    f0109010 <sched_print_all+0x65>
f010900b:	b8 00 00 00 00       	mov    $0x0,%eax
f0109010:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f0109015:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f010901a:	85 c0                	test   %eax,%eax
f010901c:	75 b6                	jne    f0108fd4 <sched_print_all+0x29>
f010901e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109022:	75 b0                	jne    f0108fd4 <sched_print_all+0x29>
f0109024:	eb 10                	jmp    f0109036 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0109026:	83 ec 0c             	sub    $0xc,%esp
f0109029:	68 cc a6 11 f0       	push   $0xf011a6cc
f010902e:	e8 62 dd ff ff       	call   f0106d95 <cprintf>
f0109033:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0109036:	83 ec 0c             	sub    $0xc,%esp
f0109039:	68 e8 a6 11 f0       	push   $0xf011a6e8
f010903e:	e8 52 dd ff ff       	call   f0106d95 <cprintf>
f0109043:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109046:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010904d:	e9 ca 00 00 00       	jmp    f010911c <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109052:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109057:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010905a:	c1 e2 04             	shl    $0x4,%edx
f010905d:	01 d0                	add    %edx,%eax
f010905f:	8b 00                	mov    (%eax),%eax
f0109061:	85 c0                	test   %eax,%eax
f0109063:	0f 84 8d 00 00 00    	je     f01090f6 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0109069:	83 ec 08             	sub    $0x8,%esp
f010906c:	ff 75 f0             	pushl  -0x10(%ebp)
f010906f:	68 1c a7 11 f0       	push   $0xf011a71c
f0109074:	e8 1c dd ff ff       	call   f0106d95 <cprintf>
f0109079:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010907c:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109081:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109084:	c1 e2 04             	shl    $0x4,%edx
f0109087:	01 d0                	add    %edx,%eax
f0109089:	8b 00                	mov    (%eax),%eax
f010908b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010908e:	eb 34                	jmp    f01090c4 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109093:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010909c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010909f:	83 ec 04             	sub    $0x4,%esp
f01090a2:	52                   	push   %edx
f01090a3:	50                   	push   %eax
f01090a4:	68 c2 a6 11 f0       	push   $0xf011a6c2
f01090a9:	e8 e7 dc ff ff       	call   f0106d95 <cprintf>
f01090ae:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01090b1:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01090b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01090b9:	c1 e2 04             	shl    $0x4,%edx
f01090bc:	01 d0                	add    %edx,%eax
f01090be:	8b 40 08             	mov    0x8(%eax),%eax
f01090c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01090c4:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01090c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01090cc:	c1 e2 04             	shl    $0x4,%edx
f01090cf:	01 d0                	add    %edx,%eax
f01090d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01090d5:	74 08                	je     f01090df <sched_print_all+0x134>
f01090d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01090da:	8b 52 44             	mov    0x44(%edx),%edx
f01090dd:	eb 05                	jmp    f01090e4 <sched_print_all+0x139>
f01090df:	ba 00 00 00 00       	mov    $0x0,%edx
f01090e4:	89 50 08             	mov    %edx,0x8(%eax)
f01090e7:	8b 40 08             	mov    0x8(%eax),%eax
f01090ea:	85 c0                	test   %eax,%eax
f01090ec:	75 a2                	jne    f0109090 <sched_print_all+0xe5>
f01090ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01090f2:	75 9c                	jne    f0109090 <sched_print_all+0xe5>
f01090f4:	eb 13                	jmp    f0109109 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f01090f6:	83 ec 08             	sub    $0x8,%esp
f01090f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01090fc:	68 44 a7 11 f0       	push   $0xf011a744
f0109101:	e8 8f dc ff ff       	call   f0106d95 <cprintf>
f0109106:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109109:	83 ec 0c             	sub    $0xc,%esp
f010910c:	68 e8 a6 11 f0       	push   $0xf011a6e8
f0109111:	e8 7f dc ff ff       	call   f0106d95 <cprintf>
f0109116:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109119:	ff 45 f0             	incl   -0x10(%ebp)
f010911c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0109121:	0f b6 c0             	movzbl %al,%eax
f0109124:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109127:	0f 8f 25 ff ff ff    	jg     f0109052 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f010912d:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f0109132:	85 c0                	test   %eax,%eax
f0109134:	74 6c                	je     f01091a2 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0109136:	83 ec 0c             	sub    $0xc,%esp
f0109139:	68 68 a7 11 f0       	push   $0xf011a768
f010913e:	e8 52 dc ff ff       	call   f0106d95 <cprintf>
f0109143:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109146:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f010914b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010914e:	eb 29                	jmp    f0109179 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109150:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109153:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109159:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010915c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010915f:	83 ec 04             	sub    $0x4,%esp
f0109162:	52                   	push   %edx
f0109163:	50                   	push   %eax
f0109164:	68 c2 a6 11 f0       	push   $0xf011a6c2
f0109169:	e8 27 dc ff ff       	call   f0106d95 <cprintf>
f010916e:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109171:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0109176:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109179:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010917d:	74 08                	je     f0109187 <sched_print_all+0x1dc>
f010917f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109182:	8b 40 44             	mov    0x44(%eax),%eax
f0109185:	eb 05                	jmp    f010918c <sched_print_all+0x1e1>
f0109187:	b8 00 00 00 00       	mov    $0x0,%eax
f010918c:	a3 20 d2 52 f0       	mov    %eax,0xf052d220
f0109191:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0109196:	85 c0                	test   %eax,%eax
f0109198:	75 b6                	jne    f0109150 <sched_print_all+0x1a5>
f010919a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010919e:	75 b0                	jne    f0109150 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f01091a0:	eb 10                	jmp    f01091b2 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01091a2:	83 ec 0c             	sub    $0xc,%esp
f01091a5:	68 8a a7 11 f0       	push   $0xf011a78a
f01091aa:	e8 e6 db ff ff       	call   f0106d95 <cprintf>
f01091af:	83 c4 10             	add    $0x10,%esp
	}
}
f01091b2:	90                   	nop
f01091b3:	c9                   	leave  
f01091b4:	c3                   	ret    

f01091b5 <sched_run_all>:

void sched_run_all()
{
f01091b5:	55                   	push   %ebp
f01091b6:	89 e5                	mov    %esp,%ebp
f01091b8:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01091bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01091c2:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f01091c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01091ca:	eb 1e                	jmp    f01091ea <sched_run_all+0x35>
	{
		sched_remove_new(ptr_env);
f01091cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01091cf:	e8 92 fc ff ff       	call   f0108e66 <sched_remove_new>
f01091d4:	83 c4 04             	add    $0x4,%esp
		sched_insert_ready(ptr_env);
f01091d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01091da:	e8 47 fb ff ff       	call   f0108d26 <sched_insert_ready>
f01091df:	83 c4 04             	add    $0x4,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01091e2:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01091e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01091ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01091ee:	74 08                	je     f01091f8 <sched_run_all+0x43>
f01091f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01091f3:	8b 40 44             	mov    0x44(%eax),%eax
f01091f6:	eb 05                	jmp    f01091fd <sched_run_all+0x48>
f01091f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01091fd:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f0109202:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f0109207:	85 c0                	test   %eax,%eax
f0109209:	75 c1                	jne    f01091cc <sched_run_all+0x17>
f010920b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010920f:	75 bb                	jne    f01091cc <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0109211:	a1 58 d2 52 f0       	mov    0xf052d258,%eax
f0109216:	85 c0                	test   %eax,%eax
f0109218:	75 05                	jne    f010921f <sched_run_all+0x6a>
		fos_scheduler();
f010921a:	e8 13 f9 ff ff       	call   f0108b32 <fos_scheduler>
}
f010921f:	90                   	nop
f0109220:	c9                   	leave  
f0109221:	c3                   	ret    

f0109222 <sched_kill_all>:

void sched_kill_all()
{
f0109222:	55                   	push   %ebp
f0109223:	89 e5                	mov    %esp,%ebp
f0109225:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0109228:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f010922d:	85 c0                	test   %eax,%eax
f010922f:	0f 84 98 00 00 00    	je     f01092cd <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0109235:	83 ec 0c             	sub    $0xc,%esp
f0109238:	68 a8 a7 11 f0       	push   $0xf011a7a8
f010923d:	e8 53 db ff ff       	call   f0106d95 <cprintf>
f0109242:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109245:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f010924a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010924d:	eb 55                	jmp    f01092a4 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010924f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109252:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109258:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010925b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010925e:	83 ec 04             	sub    $0x4,%esp
f0109261:	52                   	push   %edx
f0109262:	50                   	push   %eax
f0109263:	68 d4 a7 11 f0       	push   $0xf011a7d4
f0109268:	e8 28 db ff ff       	call   f0106d95 <cprintf>
f010926d:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0109270:	83 ec 0c             	sub    $0xc,%esp
f0109273:	ff 75 f4             	pushl  -0xc(%ebp)
f0109276:	e8 eb fb ff ff       	call   f0108e66 <sched_remove_new>
f010927b:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010927e:	83 ec 0c             	sub    $0xc,%esp
f0109281:	ff 75 f4             	pushl  -0xc(%ebp)
f0109284:	e8 9d ce ff ff       	call   f0106126 <start_env_free>
f0109289:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010928c:	83 ec 0c             	sub    $0xc,%esp
f010928f:	68 e7 a7 11 f0       	push   $0xf011a7e7
f0109294:	e8 fc da ff ff       	call   f0106d95 <cprintf>
f0109299:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010929c:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01092a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01092a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01092a8:	74 08                	je     f01092b2 <sched_kill_all+0x90>
f01092aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092ad:	8b 40 44             	mov    0x44(%eax),%eax
f01092b0:	eb 05                	jmp    f01092b7 <sched_kill_all+0x95>
f01092b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01092b7:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f01092bc:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01092c1:	85 c0                	test   %eax,%eax
f01092c3:	75 8a                	jne    f010924f <sched_kill_all+0x2d>
f01092c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01092c9:	75 84                	jne    f010924f <sched_kill_all+0x2d>
f01092cb:	eb 10                	jmp    f01092dd <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f01092cd:	83 ec 0c             	sub    $0xc,%esp
f01092d0:	68 ed a7 11 f0       	push   $0xf011a7ed
f01092d5:	e8 bb da ff ff       	call   f0106d95 <cprintf>
f01092da:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01092dd:	83 ec 0c             	sub    $0xc,%esp
f01092e0:	68 e8 a6 11 f0       	push   $0xf011a6e8
f01092e5:	e8 ab da ff ff       	call   f0106d95 <cprintf>
f01092ea:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01092ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01092f4:	e9 7c 01 00 00       	jmp    f0109475 <sched_kill_all+0x253>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01092f9:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01092fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109301:	c1 e2 04             	shl    $0x4,%edx
f0109304:	01 d0                	add    %edx,%eax
f0109306:	8b 00                	mov    (%eax),%eax
f0109308:	85 c0                	test   %eax,%eax
f010930a:	0f 84 3f 01 00 00    	je     f010944f <sched_kill_all+0x22d>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0109310:	83 ec 08             	sub    $0x8,%esp
f0109313:	ff 75 f0             	pushl  -0x10(%ebp)
f0109316:	68 08 a8 11 f0       	push   $0xf011a808
f010931b:	e8 75 da ff ff       	call   f0106d95 <cprintf>
f0109320:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109323:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010932b:	c1 e2 04             	shl    $0x4,%edx
f010932e:	01 d0                	add    %edx,%eax
f0109330:	8b 00                	mov    (%eax),%eax
f0109332:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109335:	e9 db 00 00 00       	jmp    f0109415 <sched_kill_all+0x1f3>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010933a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010933d:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109343:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109346:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109349:	83 ec 04             	sub    $0x4,%esp
f010934c:	52                   	push   %edx
f010934d:	50                   	push   %eax
f010934e:	68 d4 a7 11 f0       	push   $0xf011a7d4
f0109353:	e8 3d da ff ff       	call   f0106d95 <cprintf>
f0109358:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010935b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010935e:	8b 40 44             	mov    0x44(%eax),%eax
f0109361:	85 c0                	test   %eax,%eax
f0109363:	74 11                	je     f0109376 <sched_kill_all+0x154>
f0109365:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109368:	8b 40 44             	mov    0x44(%eax),%eax
f010936b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010936e:	8b 52 48             	mov    0x48(%edx),%edx
f0109371:	89 50 48             	mov    %edx,0x48(%eax)
f0109374:	eb 16                	jmp    f010938c <sched_kill_all+0x16a>
f0109376:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f010937b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010937e:	c1 e2 04             	shl    $0x4,%edx
f0109381:	01 c2                	add    %eax,%edx
f0109383:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109386:	8b 40 48             	mov    0x48(%eax),%eax
f0109389:	89 42 04             	mov    %eax,0x4(%edx)
f010938c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010938f:	8b 40 48             	mov    0x48(%eax),%eax
f0109392:	85 c0                	test   %eax,%eax
f0109394:	74 11                	je     f01093a7 <sched_kill_all+0x185>
f0109396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109399:	8b 40 48             	mov    0x48(%eax),%eax
f010939c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010939f:	8b 52 44             	mov    0x44(%edx),%edx
f01093a2:	89 50 44             	mov    %edx,0x44(%eax)
f01093a5:	eb 15                	jmp    f01093bc <sched_kill_all+0x19a>
f01093a7:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01093ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01093af:	c1 e2 04             	shl    $0x4,%edx
f01093b2:	01 c2                	add    %eax,%edx
f01093b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093b7:	8b 40 44             	mov    0x44(%eax),%eax
f01093ba:	89 02                	mov    %eax,(%edx)
f01093bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093bf:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01093c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093c9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01093d0:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01093d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01093d8:	c1 e2 04             	shl    $0x4,%edx
f01093db:	01 d0                	add    %edx,%eax
f01093dd:	8b 50 0c             	mov    0xc(%eax),%edx
f01093e0:	4a                   	dec    %edx
f01093e1:	89 50 0c             	mov    %edx,0xc(%eax)
				start_env_free(ptr_env);
f01093e4:	83 ec 0c             	sub    $0xc,%esp
f01093e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01093ea:	e8 37 cd ff ff       	call   f0106126 <start_env_free>
f01093ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01093f2:	83 ec 0c             	sub    $0xc,%esp
f01093f5:	68 e7 a7 11 f0       	push   $0xf011a7e7
f01093fa:	e8 96 d9 ff ff       	call   f0106d95 <cprintf>
f01093ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109402:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109407:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010940a:	c1 e2 04             	shl    $0x4,%edx
f010940d:	01 d0                	add    %edx,%eax
f010940f:	8b 40 08             	mov    0x8(%eax),%eax
f0109412:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109415:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f010941a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010941d:	c1 e2 04             	shl    $0x4,%edx
f0109420:	01 d0                	add    %edx,%eax
f0109422:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109426:	74 08                	je     f0109430 <sched_kill_all+0x20e>
f0109428:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010942b:	8b 52 44             	mov    0x44(%edx),%edx
f010942e:	eb 05                	jmp    f0109435 <sched_kill_all+0x213>
f0109430:	ba 00 00 00 00       	mov    $0x0,%edx
f0109435:	89 50 08             	mov    %edx,0x8(%eax)
f0109438:	8b 40 08             	mov    0x8(%eax),%eax
f010943b:	85 c0                	test   %eax,%eax
f010943d:	0f 85 f7 fe ff ff    	jne    f010933a <sched_kill_all+0x118>
f0109443:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109447:	0f 85 ed fe ff ff    	jne    f010933a <sched_kill_all+0x118>
f010944d:	eb 13                	jmp    f0109462 <sched_kill_all+0x240>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010944f:	83 ec 08             	sub    $0x8,%esp
f0109452:	ff 75 f0             	pushl  -0x10(%ebp)
f0109455:	68 44 a7 11 f0       	push   $0xf011a744
f010945a:	e8 36 d9 ff ff       	call   f0106d95 <cprintf>
f010945f:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109462:	83 ec 0c             	sub    $0xc,%esp
f0109465:	68 e8 a6 11 f0       	push   $0xf011a6e8
f010946a:	e8 26 d9 ff ff       	call   f0106d95 <cprintf>
f010946f:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109472:	ff 45 f0             	incl   -0x10(%ebp)
f0109475:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010947a:	0f b6 c0             	movzbl %al,%eax
f010947d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109480:	0f 8f 73 fe ff ff    	jg     f01092f9 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0109486:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f010948b:	85 c0                	test   %eax,%eax
f010948d:	0f 84 98 00 00 00    	je     f010952b <sched_kill_all+0x309>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0109493:	83 ec 0c             	sub    $0xc,%esp
f0109496:	68 3c a8 11 f0       	push   $0xf011a83c
f010949b:	e8 f5 d8 ff ff       	call   f0106d95 <cprintf>
f01094a0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01094a3:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f01094a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01094ab:	eb 55                	jmp    f0109502 <sched_kill_all+0x2e0>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01094ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094b0:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f01094b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094b9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01094bc:	83 ec 04             	sub    $0x4,%esp
f01094bf:	52                   	push   %edx
f01094c0:	50                   	push   %eax
f01094c1:	68 d4 a7 11 f0       	push   $0xf011a7d4
f01094c6:	e8 ca d8 ff ff       	call   f0106d95 <cprintf>
f01094cb:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01094ce:	83 ec 0c             	sub    $0xc,%esp
f01094d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01094d4:	e8 51 fa ff ff       	call   f0108f2a <sched_remove_exit>
f01094d9:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f01094dc:	83 ec 0c             	sub    $0xc,%esp
f01094df:	ff 75 f4             	pushl  -0xc(%ebp)
f01094e2:	e8 3f cc ff ff       	call   f0106126 <start_env_free>
f01094e7:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01094ea:	83 ec 0c             	sub    $0xc,%esp
f01094ed:	68 e7 a7 11 f0       	push   $0xf011a7e7
f01094f2:	e8 9e d8 ff ff       	call   f0106d95 <cprintf>
f01094f7:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01094fa:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f01094ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109502:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109506:	74 08                	je     f0109510 <sched_kill_all+0x2ee>
f0109508:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010950b:	8b 40 44             	mov    0x44(%eax),%eax
f010950e:	eb 05                	jmp    f0109515 <sched_kill_all+0x2f3>
f0109510:	b8 00 00 00 00       	mov    $0x0,%eax
f0109515:	a3 20 d2 52 f0       	mov    %eax,0xf052d220
f010951a:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f010951f:	85 c0                	test   %eax,%eax
f0109521:	75 8a                	jne    f01094ad <sched_kill_all+0x28b>
f0109523:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109527:	75 84                	jne    f01094ad <sched_kill_all+0x28b>
f0109529:	eb 10                	jmp    f010953b <sched_kill_all+0x319>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010952b:	83 ec 0c             	sub    $0xc,%esp
f010952e:	68 8a a7 11 f0       	push   $0xf011a78a
f0109533:	e8 5d d8 ff ff       	call   f0106d95 <cprintf>
f0109538:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010953b:	c7 05 50 c9 52 f0 00 	movl   $0x0,0xf052c950
f0109542:	00 00 00 
	fos_scheduler();
f0109545:	e8 e8 f5 ff ff       	call   f0108b32 <fos_scheduler>

f010954a <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010954a:	55                   	push   %ebp
f010954b:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010954d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109551:	74 0b                	je     f010955e <sched_new_env+0x14>
	{
		sched_insert_new(e);
f0109553:	ff 75 08             	pushl  0x8(%ebp)
f0109556:	e8 e5 f8 ff ff       	call   f0108e40 <sched_insert_new>
f010955b:	83 c4 04             	add    $0x4,%esp
	}
}
f010955e:	90                   	nop
f010955f:	c9                   	leave  
f0109560:	c3                   	ret    

f0109561 <sched_run_env>:

void sched_run_env(uint32 envId)
{
f0109561:	55                   	push   %ebp
f0109562:	89 e5                	mov    %esp,%ebp
f0109564:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109567:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010956e:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f0109573:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109576:	eb 37                	jmp    f01095af <sched_run_env+0x4e>
	{
		if(ptr_env->env_id == envId)
f0109578:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010957b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010957e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109581:	75 24                	jne    f01095a7 <sched_run_env+0x46>
		{
			sched_remove_new(ptr_env);
f0109583:	ff 75 f4             	pushl  -0xc(%ebp)
f0109586:	e8 db f8 ff ff       	call   f0108e66 <sched_remove_new>
f010958b:	83 c4 04             	add    $0x4,%esp
			sched_insert_ready(ptr_env);
f010958e:	ff 75 f4             	pushl  -0xc(%ebp)
f0109591:	e8 90 f7 ff ff       	call   f0108d26 <sched_insert_ready>
f0109596:	83 c4 04             	add    $0x4,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0109599:	a1 58 d2 52 f0       	mov    0xf052d258,%eax
f010959e:	85 c0                	test   %eax,%eax
f01095a0:	75 36                	jne    f01095d8 <sched_run_env+0x77>
			{
				fos_scheduler();
f01095a2:	e8 8b f5 ff ff       	call   f0108b32 <fos_scheduler>
}

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01095a7:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01095ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01095af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01095b3:	74 08                	je     f01095bd <sched_run_env+0x5c>
f01095b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01095b8:	8b 40 44             	mov    0x44(%eax),%eax
f01095bb:	eb 05                	jmp    f01095c2 <sched_run_env+0x61>
f01095bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01095c2:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f01095c7:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01095cc:	85 c0                	test   %eax,%eax
f01095ce:	75 a8                	jne    f0109578 <sched_run_env+0x17>
f01095d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01095d4:	75 a2                	jne    f0109578 <sched_run_env+0x17>
			}
			break;
		}
	}

}
f01095d6:	eb 01                	jmp    f01095d9 <sched_run_env+0x78>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01095d8:	90                   	nop
		}
	}

}
f01095d9:	90                   	nop
f01095da:	c9                   	leave  
f01095db:	c3                   	ret    

f01095dc <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01095dc:	55                   	push   %ebp
f01095dd:	89 e5                	mov    %esp,%ebp
f01095df:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01095e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01095e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01095f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01095f4:	75 56                	jne    f010964c <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01095f6:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f01095fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01095fe:	eb 25                	jmp    f0109625 <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f0109600:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109603:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109606:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109609:	75 12                	jne    f010961d <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f010960b:	ff 75 f4             	pushl  -0xc(%ebp)
f010960e:	e8 53 f8 ff ff       	call   f0108e66 <sched_remove_new>
f0109613:	83 c4 04             	add    $0x4,%esp
				found = 1;
f0109616:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010961d:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f0109622:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109625:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109629:	74 08                	je     f0109633 <sched_exit_env+0x57>
f010962b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010962e:	8b 40 44             	mov    0x44(%eax),%eax
f0109631:	eb 05                	jmp    f0109638 <sched_exit_env+0x5c>
f0109633:	b8 00 00 00 00       	mov    $0x0,%eax
f0109638:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f010963d:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f0109642:	85 c0                	test   %eax,%eax
f0109644:	75 ba                	jne    f0109600 <sched_exit_env+0x24>
f0109646:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010964a:	75 b4                	jne    f0109600 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010964c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109650:	0f 85 4a 01 00 00    	jne    f01097a0 <sched_exit_env+0x1c4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109656:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010965d:	e9 2a 01 00 00       	jmp    f010978c <sched_exit_env+0x1b0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109662:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109667:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010966a:	c1 e2 04             	shl    $0x4,%edx
f010966d:	01 d0                	add    %edx,%eax
f010966f:	8b 00                	mov    (%eax),%eax
f0109671:	85 c0                	test   %eax,%eax
f0109673:	0f 84 0a 01 00 00    	je     f0109783 <sched_exit_env+0x1a7>
			{
				ptr_env=NULL;
f0109679:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109680:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109685:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109688:	c1 e2 04             	shl    $0x4,%edx
f010968b:	01 d0                	add    %edx,%eax
f010968d:	8b 00                	mov    (%eax),%eax
f010968f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109692:	e9 b4 00 00 00       	jmp    f010974b <sched_exit_env+0x16f>
				{
					if(ptr_env->env_id == envId)
f0109697:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010969a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010969d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01096a0:	0f 85 92 00 00 00    	jne    f0109738 <sched_exit_env+0x15c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01096a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096a9:	8b 40 44             	mov    0x44(%eax),%eax
f01096ac:	85 c0                	test   %eax,%eax
f01096ae:	74 11                	je     f01096c1 <sched_exit_env+0xe5>
f01096b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096b3:	8b 40 44             	mov    0x44(%eax),%eax
f01096b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096b9:	8b 52 48             	mov    0x48(%edx),%edx
f01096bc:	89 50 48             	mov    %edx,0x48(%eax)
f01096bf:	eb 16                	jmp    f01096d7 <sched_exit_env+0xfb>
f01096c1:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01096c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01096c9:	c1 e2 04             	shl    $0x4,%edx
f01096cc:	01 c2                	add    %eax,%edx
f01096ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096d1:	8b 40 48             	mov    0x48(%eax),%eax
f01096d4:	89 42 04             	mov    %eax,0x4(%edx)
f01096d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096da:	8b 40 48             	mov    0x48(%eax),%eax
f01096dd:	85 c0                	test   %eax,%eax
f01096df:	74 11                	je     f01096f2 <sched_exit_env+0x116>
f01096e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01096e4:	8b 40 48             	mov    0x48(%eax),%eax
f01096e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096ea:	8b 52 44             	mov    0x44(%edx),%edx
f01096ed:	89 50 44             	mov    %edx,0x44(%eax)
f01096f0:	eb 15                	jmp    f0109707 <sched_exit_env+0x12b>
f01096f2:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01096f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01096fa:	c1 e2 04             	shl    $0x4,%edx
f01096fd:	01 c2                	add    %eax,%edx
f01096ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109702:	8b 40 44             	mov    0x44(%eax),%eax
f0109705:	89 02                	mov    %eax,(%edx)
f0109707:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010970a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109714:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010971b:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109720:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109723:	c1 e2 04             	shl    $0x4,%edx
f0109726:	01 d0                	add    %edx,%eax
f0109728:	8b 50 0c             	mov    0xc(%eax),%edx
f010972b:	4a                   	dec    %edx
f010972c:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f010972f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109736:	eb 4b                	jmp    f0109783 <sched_exit_env+0x1a7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109738:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f010973d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109740:	c1 e2 04             	shl    $0x4,%edx
f0109743:	01 d0                	add    %edx,%eax
f0109745:	8b 40 08             	mov    0x8(%eax),%eax
f0109748:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010974b:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109750:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109753:	c1 e2 04             	shl    $0x4,%edx
f0109756:	01 d0                	add    %edx,%eax
f0109758:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010975c:	74 08                	je     f0109766 <sched_exit_env+0x18a>
f010975e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109761:	8b 52 44             	mov    0x44(%edx),%edx
f0109764:	eb 05                	jmp    f010976b <sched_exit_env+0x18f>
f0109766:	ba 00 00 00 00       	mov    $0x0,%edx
f010976b:	89 50 08             	mov    %edx,0x8(%eax)
f010976e:	8b 40 08             	mov    0x8(%eax),%eax
f0109771:	85 c0                	test   %eax,%eax
f0109773:	0f 85 1e ff ff ff    	jne    f0109697 <sched_exit_env+0xbb>
f0109779:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010977d:	0f 85 14 ff ff ff    	jne    f0109697 <sched_exit_env+0xbb>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0109783:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109787:	75 16                	jne    f010979f <sched_exit_env+0x1c3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109789:	ff 45 ec             	incl   -0x14(%ebp)
f010978c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0109791:	0f b6 c0             	movzbl %al,%eax
f0109794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109797:	0f 8f c5 fe ff ff    	jg     f0109662 <sched_exit_env+0x86>
f010979d:	eb 01                	jmp    f01097a0 <sched_exit_env+0x1c4>
						break;
					}
				}
			}
			if (found)
				break;
f010979f:	90                   	nop
		}
	}
	if (!found)
f01097a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01097a4:	75 1c                	jne    f01097c2 <sched_exit_env+0x1e6>
	{
		if (curenv->env_id == envId)
f01097a6:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01097ab:	8b 40 4c             	mov    0x4c(%eax),%eax
f01097ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f01097b1:	75 0f                	jne    f01097c2 <sched_exit_env+0x1e6>
		{
			ptr_env = curenv;
f01097b3:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01097b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01097bb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01097c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01097c6:	74 2a                	je     f01097f2 <sched_exit_env+0x216>
	{
		sched_insert_exit(ptr_env);
f01097c8:	83 ec 0c             	sub    $0xc,%esp
f01097cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01097ce:	e8 14 f7 ff ff       	call   f0108ee7 <sched_insert_exit>
f01097d3:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01097d6:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f01097db:	8b 40 4c             	mov    0x4c(%eax),%eax
f01097de:	3b 45 08             	cmp    0x8(%ebp),%eax
f01097e1:	75 0f                	jne    f01097f2 <sched_exit_env+0x216>
		{
			curenv = NULL;
f01097e3:	c7 05 50 c9 52 f0 00 	movl   $0x0,0xf052c950
f01097ea:	00 00 00 
			fos_scheduler();
f01097ed:	e8 40 f3 ff ff       	call   f0108b32 <fos_scheduler>
		}
	}
}
f01097f2:	90                   	nop
f01097f3:	c9                   	leave  
f01097f4:	c3                   	ret    

f01097f5 <sched_exit_all_ready_envs>:

void sched_exit_all_ready_envs()
{
f01097f5:	55                   	push   %ebp
f01097f6:	89 e5                	mov    %esp,%ebp
f01097f8:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01097fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109802:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109809:	e9 1a 01 00 00       	jmp    f0109928 <sched_exit_all_ready_envs+0x133>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010980e:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109813:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109816:	c1 e2 04             	shl    $0x4,%edx
f0109819:	01 d0                	add    %edx,%eax
f010981b:	8b 00                	mov    (%eax),%eax
f010981d:	85 c0                	test   %eax,%eax
f010981f:	0f 84 00 01 00 00    	je     f0109925 <sched_exit_all_ready_envs+0x130>
		{
			ptr_env=NULL;
f0109825:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010982c:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109831:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109834:	c1 e2 04             	shl    $0x4,%edx
f0109837:	01 d0                	add    %edx,%eax
f0109839:	8b 00                	mov    (%eax),%eax
f010983b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010983e:	e9 aa 00 00 00       	jmp    f01098ed <sched_exit_all_ready_envs+0xf8>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109843:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109846:	8b 40 44             	mov    0x44(%eax),%eax
f0109849:	85 c0                	test   %eax,%eax
f010984b:	74 11                	je     f010985e <sched_exit_all_ready_envs+0x69>
f010984d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109850:	8b 40 44             	mov    0x44(%eax),%eax
f0109853:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109856:	8b 52 48             	mov    0x48(%edx),%edx
f0109859:	89 50 48             	mov    %edx,0x48(%eax)
f010985c:	eb 16                	jmp    f0109874 <sched_exit_all_ready_envs+0x7f>
f010985e:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109863:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109866:	c1 e2 04             	shl    $0x4,%edx
f0109869:	01 c2                	add    %eax,%edx
f010986b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010986e:	8b 40 48             	mov    0x48(%eax),%eax
f0109871:	89 42 04             	mov    %eax,0x4(%edx)
f0109874:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109877:	8b 40 48             	mov    0x48(%eax),%eax
f010987a:	85 c0                	test   %eax,%eax
f010987c:	74 11                	je     f010988f <sched_exit_all_ready_envs+0x9a>
f010987e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109881:	8b 40 48             	mov    0x48(%eax),%eax
f0109884:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109887:	8b 52 44             	mov    0x44(%edx),%edx
f010988a:	89 50 44             	mov    %edx,0x44(%eax)
f010988d:	eb 15                	jmp    f01098a4 <sched_exit_all_ready_envs+0xaf>
f010988f:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109894:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109897:	c1 e2 04             	shl    $0x4,%edx
f010989a:	01 c2                	add    %eax,%edx
f010989c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010989f:	8b 40 44             	mov    0x44(%eax),%eax
f01098a2:	89 02                	mov    %eax,(%edx)
f01098a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098a7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01098ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098b1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098b8:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01098bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098c0:	c1 e2 04             	shl    $0x4,%edx
f01098c3:	01 d0                	add    %edx,%eax
f01098c5:	8b 50 0c             	mov    0xc(%eax),%edx
f01098c8:	4a                   	dec    %edx
f01098c9:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01098cc:	83 ec 0c             	sub    $0xc,%esp
f01098cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01098d2:	e8 10 f6 ff ff       	call   f0108ee7 <sched_insert_exit>
f01098d7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01098da:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01098df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098e2:	c1 e2 04             	shl    $0x4,%edx
f01098e5:	01 d0                	add    %edx,%eax
f01098e7:	8b 40 08             	mov    0x8(%eax),%eax
f01098ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098ed:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f01098f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098f5:	c1 e2 04             	shl    $0x4,%edx
f01098f8:	01 d0                	add    %edx,%eax
f01098fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098fe:	74 08                	je     f0109908 <sched_exit_all_ready_envs+0x113>
f0109900:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109903:	8b 52 44             	mov    0x44(%edx),%edx
f0109906:	eb 05                	jmp    f010990d <sched_exit_all_ready_envs+0x118>
f0109908:	ba 00 00 00 00       	mov    $0x0,%edx
f010990d:	89 50 08             	mov    %edx,0x8(%eax)
f0109910:	8b 40 08             	mov    0x8(%eax),%eax
f0109913:	85 c0                	test   %eax,%eax
f0109915:	0f 85 28 ff ff ff    	jne    f0109843 <sched_exit_all_ready_envs+0x4e>
f010991b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010991f:	0f 85 1e ff ff ff    	jne    f0109843 <sched_exit_all_ready_envs+0x4e>
}

void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109925:	ff 45 f0             	incl   -0x10(%ebp)
f0109928:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010992d:	0f b6 c0             	movzbl %al,%eax
f0109930:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109933:	0f 8f d5 fe ff ff    	jg     f010980e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0109939:	90                   	nop
f010993a:	c9                   	leave  
f010993b:	c3                   	ret    

f010993c <sched_kill_env>:

void sched_kill_env(uint32 envId)
{
f010993c:	55                   	push   %ebp
f010993d:	89 e5                	mov    %esp,%ebp
f010993f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0109949:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109950:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109954:	0f 85 a0 00 00 00    	jne    f01099fa <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010995a:	a1 40 d2 52 f0       	mov    0xf052d240,%eax
f010995f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109962:	eb 67                	jmp    f01099cb <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0109964:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109967:	8b 40 4c             	mov    0x4c(%eax),%eax
f010996a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010996d:	75 54                	jne    f01099c3 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010996f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109972:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010997b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010997e:	83 ec 04             	sub    $0x4,%esp
f0109981:	52                   	push   %edx
f0109982:	50                   	push   %eax
f0109983:	68 68 a8 11 f0       	push   $0xf011a868
f0109988:	e8 08 d4 ff ff       	call   f0106d95 <cprintf>
f010998d:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0109990:	83 ec 0c             	sub    $0xc,%esp
f0109993:	ff 75 f4             	pushl  -0xc(%ebp)
f0109996:	e8 cb f4 ff ff       	call   f0108e66 <sched_remove_new>
f010999b:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010999e:	83 ec 0c             	sub    $0xc,%esp
f01099a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01099a4:	e8 7d c7 ff ff       	call   f0106126 <start_env_free>
f01099a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01099ac:	83 ec 0c             	sub    $0xc,%esp
f01099af:	68 e7 a7 11 f0       	push   $0xf011a7e7
f01099b4:	e8 dc d3 ff ff       	call   f0106d95 <cprintf>
f01099b9:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01099bc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01099c3:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01099c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099cf:	74 08                	je     f01099d9 <sched_kill_env+0x9d>
f01099d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099d4:	8b 40 44             	mov    0x44(%eax),%eax
f01099d7:	eb 05                	jmp    f01099de <sched_kill_env+0xa2>
f01099d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01099de:	a3 48 d2 52 f0       	mov    %eax,0xf052d248
f01099e3:	a1 48 d2 52 f0       	mov    0xf052d248,%eax
f01099e8:	85 c0                	test   %eax,%eax
f01099ea:	0f 85 74 ff ff ff    	jne    f0109964 <sched_kill_env+0x28>
f01099f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099f4:	0f 85 6a ff ff ff    	jne    f0109964 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01099fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01099fe:	0f 85 89 01 00 00    	jne    f0109b8d <sched_kill_env+0x251>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109a04:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109a0b:	e9 69 01 00 00       	jmp    f0109b79 <sched_kill_env+0x23d>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109a10:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109a15:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109a18:	c1 e2 04             	shl    $0x4,%edx
f0109a1b:	01 d0                	add    %edx,%eax
f0109a1d:	8b 00                	mov    (%eax),%eax
f0109a1f:	85 c0                	test   %eax,%eax
f0109a21:	0f 84 49 01 00 00    	je     f0109b70 <sched_kill_env+0x234>
			{
				ptr_env=NULL;
f0109a27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109a2e:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109a33:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109a36:	c1 e2 04             	shl    $0x4,%edx
f0109a39:	01 d0                	add    %edx,%eax
f0109a3b:	8b 00                	mov    (%eax),%eax
f0109a3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a40:	e9 f3 00 00 00       	jmp    f0109b38 <sched_kill_env+0x1fc>
				{
					if(ptr_env->env_id == envId)
f0109a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a48:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a4b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a4e:	0f 85 d1 00 00 00    	jne    f0109b25 <sched_kill_env+0x1e9>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0109a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a57:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a60:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a63:	ff 75 ec             	pushl  -0x14(%ebp)
f0109a66:	52                   	push   %edx
f0109a67:	50                   	push   %eax
f0109a68:	68 90 a8 11 f0       	push   $0xf011a890
f0109a6d:	e8 23 d3 ff ff       	call   f0106d95 <cprintf>
f0109a72:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a78:	8b 40 44             	mov    0x44(%eax),%eax
f0109a7b:	85 c0                	test   %eax,%eax
f0109a7d:	74 11                	je     f0109a90 <sched_kill_env+0x154>
f0109a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a82:	8b 40 44             	mov    0x44(%eax),%eax
f0109a85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a88:	8b 52 48             	mov    0x48(%edx),%edx
f0109a8b:	89 50 48             	mov    %edx,0x48(%eax)
f0109a8e:	eb 16                	jmp    f0109aa6 <sched_kill_env+0x16a>
f0109a90:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109a95:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109a98:	c1 e2 04             	shl    $0x4,%edx
f0109a9b:	01 c2                	add    %eax,%edx
f0109a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109aa0:	8b 40 48             	mov    0x48(%eax),%eax
f0109aa3:	89 42 04             	mov    %eax,0x4(%edx)
f0109aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109aa9:	8b 40 48             	mov    0x48(%eax),%eax
f0109aac:	85 c0                	test   %eax,%eax
f0109aae:	74 11                	je     f0109ac1 <sched_kill_env+0x185>
f0109ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ab3:	8b 40 48             	mov    0x48(%eax),%eax
f0109ab6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ab9:	8b 52 44             	mov    0x44(%edx),%edx
f0109abc:	89 50 44             	mov    %edx,0x44(%eax)
f0109abf:	eb 15                	jmp    f0109ad6 <sched_kill_env+0x19a>
f0109ac1:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109ac6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ac9:	c1 e2 04             	shl    $0x4,%edx
f0109acc:	01 c2                	add    %eax,%edx
f0109ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ad1:	8b 40 44             	mov    0x44(%eax),%eax
f0109ad4:	89 02                	mov    %eax,(%edx)
f0109ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ad9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ae3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109aea:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109aef:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109af2:	c1 e2 04             	shl    $0x4,%edx
f0109af5:	01 d0                	add    %edx,%eax
f0109af7:	8b 50 0c             	mov    0xc(%eax),%edx
f0109afa:	4a                   	dec    %edx
f0109afb:	89 50 0c             	mov    %edx,0xc(%eax)
						start_env_free(ptr_env);
f0109afe:	83 ec 0c             	sub    $0xc,%esp
f0109b01:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b04:	e8 1d c6 ff ff       	call   f0106126 <start_env_free>
f0109b09:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0109b0c:	83 ec 0c             	sub    $0xc,%esp
f0109b0f:	68 e7 a7 11 f0       	push   $0xf011a7e7
f0109b14:	e8 7c d2 ff ff       	call   f0106d95 <cprintf>
f0109b19:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0109b1c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109b23:	eb 4b                	jmp    f0109b70 <sched_kill_env+0x234>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109b25:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109b2d:	c1 e2 04             	shl    $0x4,%edx
f0109b30:	01 d0                	add    %edx,%eax
f0109b32:	8b 40 08             	mov    0x8(%eax),%eax
f0109b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109b38:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0109b3d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109b40:	c1 e2 04             	shl    $0x4,%edx
f0109b43:	01 d0                	add    %edx,%eax
f0109b45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b49:	74 08                	je     f0109b53 <sched_kill_env+0x217>
f0109b4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4e:	8b 52 44             	mov    0x44(%edx),%edx
f0109b51:	eb 05                	jmp    f0109b58 <sched_kill_env+0x21c>
f0109b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b58:	89 50 08             	mov    %edx,0x8(%eax)
f0109b5b:	8b 40 08             	mov    0x8(%eax),%eax
f0109b5e:	85 c0                	test   %eax,%eax
f0109b60:	0f 85 df fe ff ff    	jne    f0109a45 <sched_kill_env+0x109>
f0109b66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b6a:	0f 85 d5 fe ff ff    	jne    f0109a45 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0109b70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109b74:	75 16                	jne    f0109b8c <sched_kill_env+0x250>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109b76:	ff 45 ec             	incl   -0x14(%ebp)
f0109b79:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0109b7e:	0f b6 c0             	movzbl %al,%eax
f0109b81:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109b84:	0f 8f 86 fe ff ff    	jg     f0109a10 <sched_kill_env+0xd4>
f0109b8a:	eb 01                	jmp    f0109b8d <sched_kill_env+0x251>
						//return;
					}
				}
			}
			if (found)
				break;
f0109b8c:	90                   	nop
		}
	}
	if (!found)
f0109b8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109b91:	0f 85 a7 00 00 00    	jne    f0109c3e <sched_kill_env+0x302>
	{
		ptr_env=NULL;
f0109b97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109b9e:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f0109ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109ba6:	eb 67                	jmp    f0109c0f <sched_kill_env+0x2d3>
		{
			if(ptr_env->env_id == envId)
f0109ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bab:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109bae:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109bb1:	75 54                	jne    f0109c07 <sched_kill_env+0x2cb>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0109bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bb6:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bbf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109bc2:	83 ec 04             	sub    $0x4,%esp
f0109bc5:	52                   	push   %edx
f0109bc6:	50                   	push   %eax
f0109bc7:	68 bc a8 11 f0       	push   $0xf011a8bc
f0109bcc:	e8 c4 d1 ff ff       	call   f0106d95 <cprintf>
f0109bd1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0109bd4:	83 ec 0c             	sub    $0xc,%esp
f0109bd7:	ff 75 f4             	pushl  -0xc(%ebp)
f0109bda:	e8 4b f3 ff ff       	call   f0108f2a <sched_remove_exit>
f0109bdf:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f0109be2:	83 ec 0c             	sub    $0xc,%esp
f0109be5:	ff 75 f4             	pushl  -0xc(%ebp)
f0109be8:	e8 39 c5 ff ff       	call   f0106126 <start_env_free>
f0109bed:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109bf0:	83 ec 0c             	sub    $0xc,%esp
f0109bf3:	68 e7 a7 11 f0       	push   $0xf011a7e7
f0109bf8:	e8 98 d1 ff ff       	call   f0106d95 <cprintf>
f0109bfd:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0109c00:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109c07:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0109c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109c0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c13:	74 08                	je     f0109c1d <sched_kill_env+0x2e1>
f0109c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c18:	8b 40 44             	mov    0x44(%eax),%eax
f0109c1b:	eb 05                	jmp    f0109c22 <sched_kill_env+0x2e6>
f0109c1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109c22:	a3 20 d2 52 f0       	mov    %eax,0xf052d220
f0109c27:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0109c2c:	85 c0                	test   %eax,%eax
f0109c2e:	0f 85 74 ff ff ff    	jne    f0109ba8 <sched_kill_env+0x26c>
f0109c34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c38:	0f 85 6a ff ff ff    	jne    f0109ba8 <sched_kill_env+0x26c>
				//return;
			}
		}
	}

	if (!found)
f0109c3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109c42:	75 7f                	jne    f0109cc3 <sched_kill_env+0x387>
	{
		if (curenv->env_id == envId)
f0109c44:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109c49:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109c4c:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109c4f:	75 72                	jne    f0109cc3 <sched_kill_env+0x387>
		{
			ptr_env = curenv;
f0109c51:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0109c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c5c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109c5f:	83 f8 02             	cmp    $0x2,%eax
f0109c62:	74 19                	je     f0109c7d <sched_kill_env+0x341>
f0109c64:	68 e4 a8 11 f0       	push   $0xf011a8e4
f0109c69:	68 04 a9 11 f0       	push   $0xf011a904
f0109c6e:	68 50 02 00 00       	push   $0x250
f0109c73:	68 5e a6 11 f0       	push   $0xf011a65e
f0109c78:	e8 f9 64 ff ff       	call   f0100176 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c80:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c89:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109c8c:	83 ec 04             	sub    $0x4,%esp
f0109c8f:	52                   	push   %edx
f0109c90:	50                   	push   %eax
f0109c91:	68 1c a9 11 f0       	push   $0xf011a91c
f0109c96:	e8 fa d0 ff ff       	call   f0106d95 <cprintf>
f0109c9b:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109c9e:	83 ec 0c             	sub    $0xc,%esp
f0109ca1:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ca4:	e8 7d c4 ff ff       	call   f0106126 <start_env_free>
f0109ca9:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109cac:	83 ec 0c             	sub    $0xc,%esp
f0109caf:	68 e7 a7 11 f0       	push   $0xf011a7e7
f0109cb4:	e8 dc d0 ff ff       	call   f0106d95 <cprintf>
f0109cb9:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0109cbc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	//If it's the curenv, then reset it and reinvoke the scheduler
	//as there's no meaning to return back to a killed env
	if (curenv->env_id == envId)
f0109cc3:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109cc8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ccb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109cce:	75 1d                	jne    f0109ced <sched_kill_env+0x3b1>
	{
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0109cd0:	a1 d8 b6 54 f0       	mov    0xf054b6d8,%eax
f0109cd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0109cd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109cdb:	0f 22 d8             	mov    %eax,%cr3
		curenv = NULL;
f0109cde:	c7 05 50 c9 52 f0 00 	movl   $0x0,0xf052c950
f0109ce5:	00 00 00 
		fos_scheduler();
f0109ce8:	e8 45 ee ff ff       	call   f0108b32 <fos_scheduler>
	}

}
f0109ced:	90                   	nop
f0109cee:	c9                   	leave  
f0109cef:	c3                   	ret    

f0109cf0 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0109cf0:	55                   	push   %ebp
f0109cf1:	89 e5                	mov    %esp,%ebp
f0109cf3:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU())
f0109cf6:	e8 09 e6 ff ff       	call   f0108304 <isPageReplacmentAlgorithmLRU>
f0109cfb:	85 c0                	test   %eax,%eax
f0109cfd:	74 05                	je     f0109d04 <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f0109cff:	e8 05 00 00 00       	call   f0109d09 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0109d04:	e8 29 ee ff ff       	call   f0108b32 <fos_scheduler>

f0109d09 <update_WS_time_stamps>:
}
void update_WS_time_stamps()
{
f0109d09:	55                   	push   %ebp
f0109d0a:	89 e5                	mov    %esp,%ebp
f0109d0c:	53                   	push   %ebx
f0109d0d:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0109d10:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109d15:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0109d18:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0109d1c:	0f 84 bc 01 00 00    	je     f0109ede <update_WS_time_stamps+0x1d5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0109d22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109d29:	e9 c7 00 00 00       	jmp    f0109df5 <update_WS_time_stamps+0xec>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0109d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109d31:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d37:	89 d0                	mov    %edx,%eax
f0109d39:	01 c0                	add    %eax,%eax
f0109d3b:	01 d0                	add    %edx,%eax
f0109d3d:	c1 e0 02             	shl    $0x2,%eax
f0109d40:	01 c8                	add    %ecx,%eax
f0109d42:	8a 40 04             	mov    0x4(%eax),%al
f0109d45:	3c 01                	cmp    $0x1,%al
f0109d47:	0f 84 a5 00 00 00    	je     f0109df2 <update_WS_time_stamps+0xe9>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0109d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109d50:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d56:	89 d0                	mov    %edx,%eax
f0109d58:	01 c0                	add    %eax,%eax
f0109d5a:	01 d0                	add    %edx,%eax
f0109d5c:	c1 e0 02             	shl    $0x2,%eax
f0109d5f:	01 c8                	add    %ecx,%eax
f0109d61:	8b 00                	mov    (%eax),%eax
f0109d63:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
f0109d66:	83 ec 08             	sub    $0x8,%esp
f0109d69:	ff 75 e8             	pushl  -0x18(%ebp)
f0109d6c:	ff 75 ec             	pushl  -0x14(%ebp)
f0109d6f:	e8 97 b2 ff ff       	call   f010500b <pt_get_page_permissions>
f0109d74:	83 c4 10             	add    $0x10,%esp
f0109d77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0109d7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109d7d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d83:	89 d0                	mov    %edx,%eax
f0109d85:	01 c0                	add    %eax,%eax
f0109d87:	01 d0                	add    %edx,%eax
f0109d89:	c1 e0 02             	shl    $0x2,%eax
f0109d8c:	01 c8                	add    %ecx,%eax
f0109d8e:	8b 40 08             	mov    0x8(%eax),%eax
f0109d91:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0109d94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d97:	83 e0 20             	and    $0x20,%eax
f0109d9a:	85 c0                	test   %eax,%eax
f0109d9c:	74 37                	je     f0109dd5 <update_WS_time_stamps+0xcc>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0109d9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109da1:	8b 48 78             	mov    0x78(%eax),%ecx
f0109da4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109da7:	89 d0                	mov    %edx,%eax
f0109da9:	01 c0                	add    %eax,%eax
f0109dab:	01 d0                	add    %edx,%eax
f0109dad:	c1 e0 02             	shl    $0x2,%eax
f0109db0:	01 c8                	add    %ecx,%eax
f0109db2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109db5:	c1 ea 02             	shr    $0x2,%edx
f0109db8:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0109dbe:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
f0109dc1:	6a 20                	push   $0x20
f0109dc3:	6a 00                	push   $0x0
f0109dc5:	ff 75 e8             	pushl  -0x18(%ebp)
f0109dc8:	ff 75 ec             	pushl  -0x14(%ebp)
f0109dcb:	e8 d7 ae ff ff       	call   f0104ca7 <pt_set_page_permissions>
f0109dd0:	83 c4 10             	add    $0x10,%esp
f0109dd3:	eb 1d                	jmp    f0109df2 <update_WS_time_stamps+0xe9>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0109dd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109dd8:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109dde:	89 d0                	mov    %edx,%eax
f0109de0:	01 c0                	add    %eax,%eax
f0109de2:	01 d0                	add    %edx,%eax
f0109de4:	c1 e0 02             	shl    $0x2,%eax
f0109de7:	01 c8                	add    %ecx,%eax
f0109de9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109dec:	c1 ea 02             	shr    $0x2,%edx
f0109def:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0109df2:	ff 45 f4             	incl   -0xc(%ebp)
f0109df5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109df8:	8b 50 74             	mov    0x74(%eax),%edx
f0109dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109dfe:	39 c2                	cmp    %eax,%edx
f0109e00:	0f 87 28 ff ff ff    	ja     f0109d2e <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0109e06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109e0d:	e9 c2 00 00 00       	jmp    f0109ed4 <update_WS_time_stamps+0x1cb>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0109e12:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109e15:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e18:	89 d0                	mov    %edx,%eax
f0109e1a:	01 c0                	add    %eax,%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	c1 e0 02             	shl    $0x2,%eax
f0109e21:	01 c8                	add    %ecx,%eax
f0109e23:	83 e8 80             	sub    $0xffffff80,%eax
f0109e26:	8a 00                	mov    (%eax),%al
f0109e28:	3c 01                	cmp    $0x1,%al
f0109e2a:	0f 84 a1 00 00 00    	je     f0109ed1 <update_WS_time_stamps+0x1c8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0109e30:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109e33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e36:	89 d0                	mov    %edx,%eax
f0109e38:	01 c0                	add    %eax,%eax
f0109e3a:	01 d0                	add    %edx,%eax
f0109e3c:	c1 e0 02             	shl    $0x2,%eax
f0109e3f:	01 c8                	add    %ecx,%eax
f0109e41:	83 c0 7c             	add    $0x7c,%eax
f0109e44:	8b 00                	mov    (%eax),%eax
f0109e46:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0109e49:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0109e4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e4f:	89 d0                	mov    %edx,%eax
f0109e51:	01 c0                	add    %eax,%eax
f0109e53:	01 d0                	add    %edx,%eax
f0109e55:	c1 e0 02             	shl    $0x2,%eax
f0109e58:	01 c8                	add    %ecx,%eax
f0109e5a:	05 84 00 00 00       	add    $0x84,%eax
f0109e5f:	8b 00                	mov    (%eax),%eax
f0109e61:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f0109e64:	83 ec 08             	sub    $0x8,%esp
f0109e67:	ff 75 dc             	pushl  -0x24(%ebp)
f0109e6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0109e6d:	e8 99 ad ff ff       	call   f0104c0b <pd_is_table_used>
f0109e72:	83 c4 10             	add    $0x10,%esp
f0109e75:	85 c0                	test   %eax,%eax
f0109e77:	74 38                	je     f0109eb1 <update_WS_time_stamps+0x1a8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0109e79:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109e7c:	c1 e8 02             	shr    $0x2,%eax
f0109e7f:	0d 00 00 00 80       	or     $0x80000000,%eax
f0109e84:	89 c1                	mov    %eax,%ecx
f0109e86:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0109e89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e8c:	89 d0                	mov    %edx,%eax
f0109e8e:	01 c0                	add    %eax,%eax
f0109e90:	01 d0                	add    %edx,%eax
f0109e92:	c1 e0 02             	shl    $0x2,%eax
f0109e95:	01 d8                	add    %ebx,%eax
f0109e97:	05 84 00 00 00       	add    $0x84,%eax
f0109e9c:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f0109e9e:	83 ec 08             	sub    $0x8,%esp
f0109ea1:	ff 75 dc             	pushl  -0x24(%ebp)
f0109ea4:	ff 75 ec             	pushl  -0x14(%ebp)
f0109ea7:	e8 82 ad ff ff       	call   f0104c2e <pd_set_table_unused>
f0109eac:	83 c4 10             	add    $0x10,%esp
f0109eaf:	eb 20                	jmp    f0109ed1 <update_WS_time_stamps+0x1c8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0109eb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109eb4:	c1 e8 02             	shr    $0x2,%eax
f0109eb7:	89 c1                	mov    %eax,%ecx
f0109eb9:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0109ebc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109ebf:	89 d0                	mov    %edx,%eax
f0109ec1:	01 c0                	add    %eax,%eax
f0109ec3:	01 d0                	add    %edx,%eax
f0109ec5:	c1 e0 02             	shl    $0x2,%eax
f0109ec8:	01 d8                	add    %ebx,%eax
f0109eca:	05 84 00 00 00       	add    $0x84,%eax
f0109ecf:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0109ed1:	ff 45 f0             	incl   -0x10(%ebp)
f0109ed4:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0109ed8:	0f 8e 34 ff ff ff    	jle    f0109e12 <update_WS_time_stamps+0x109>
					}
				}
			}
		}
	}
}
f0109ede:	90                   	nop
f0109edf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109ee2:	c9                   	leave  
f0109ee3:	c3                   	ret    

f0109ee4 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0109ee4:	55                   	push   %ebp
f0109ee5:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0109ee7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eea:	8b 15 c4 b6 54 f0    	mov    0xf054b6c4,%edx
f0109ef0:	29 d0                	sub    %edx,%eax
f0109ef2:	c1 f8 03             	sar    $0x3,%eax
f0109ef5:	89 c2                	mov    %eax,%edx
f0109ef7:	89 d0                	mov    %edx,%eax
f0109ef9:	c1 e0 02             	shl    $0x2,%eax
f0109efc:	01 d0                	add    %edx,%eax
f0109efe:	c1 e0 02             	shl    $0x2,%eax
f0109f01:	01 d0                	add    %edx,%eax
f0109f03:	c1 e0 02             	shl    $0x2,%eax
f0109f06:	01 d0                	add    %edx,%eax
f0109f08:	89 c1                	mov    %eax,%ecx
f0109f0a:	c1 e1 08             	shl    $0x8,%ecx
f0109f0d:	01 c8                	add    %ecx,%eax
f0109f0f:	89 c1                	mov    %eax,%ecx
f0109f11:	c1 e1 10             	shl    $0x10,%ecx
f0109f14:	01 c8                	add    %ecx,%eax
f0109f16:	01 c0                	add    %eax,%eax
f0109f18:	01 d0                	add    %edx,%eax
}
f0109f1a:	5d                   	pop    %ebp
f0109f1b:	c3                   	ret    

f0109f1c <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f0109f1c:	55                   	push   %ebp
f0109f1d:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109f1f:	ff 75 08             	pushl  0x8(%ebp)
f0109f22:	e8 bd ff ff ff       	call   f0109ee4 <to_frame_number>
f0109f27:	83 c4 04             	add    $0x4,%esp
f0109f2a:	c1 e0 0c             	shl    $0xc,%eax
}
f0109f2d:	c9                   	leave  
f0109f2e:	c3                   	ret    

f0109f2f <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f0109f2f:	55                   	push   %ebp
f0109f30:	89 e5                	mov    %esp,%ebp
f0109f32:	83 ec 18             	sub    $0x18,%esp
f0109f35:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f38:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f0109f3b:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f0109f3f:	74 26                	je     f0109f67 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f0109f41:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109f46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f49:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f0109f4f:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0109f55:	83 ec 04             	sub    $0x4,%esp
f0109f58:	50                   	push   %eax
f0109f59:	52                   	push   %edx
f0109f5a:	68 48 a9 11 f0       	push   $0xf011a948
f0109f5f:	e8 31 ce ff ff       	call   f0106d95 <cprintf>
f0109f64:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f0109f67:	83 ec 04             	sub    $0x4,%esp
f0109f6a:	ff 75 08             	pushl  0x8(%ebp)
f0109f6d:	ff 75 0c             	pushl  0xc(%ebp)
f0109f70:	68 51 a9 11 f0       	push   $0xf011a951
f0109f75:	e8 1b ce ff ff       	call   f0106d95 <cprintf>
f0109f7a:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f0109f7d:	90                   	nop
f0109f7e:	c9                   	leave  
f0109f7f:	c3                   	ret    

f0109f80 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f0109f80:	55                   	push   %ebp
f0109f81:	89 e5                	mov    %esp,%ebp
f0109f83:	83 ec 18             	sub    $0x18,%esp
f0109f86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f89:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f0109f8c:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f0109f90:	83 ec 08             	sub    $0x8,%esp
f0109f93:	50                   	push   %eax
f0109f94:	68 56 a9 11 f0       	push   $0xf011a956
f0109f99:	e8 f7 cd ff ff       	call   f0106d95 <cprintf>
f0109f9e:	83 c4 10             	add    $0x10,%esp
}
f0109fa1:	90                   	nop
f0109fa2:	c9                   	leave  
f0109fa3:	c3                   	ret    

f0109fa4 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f0109fa4:	55                   	push   %ebp
f0109fa5:	89 e5                	mov    %esp,%ebp
f0109fa7:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f0109faa:	e8 fc 6b ff ff       	call   f0100bab <cons_getc2>
f0109faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f0109fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0109fb5:	c9                   	leave  
f0109fb6:	c3                   	ret    

f0109fb7 <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f0109fb7:	55                   	push   %ebp
f0109fb8:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f0109fba:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109fbf:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f0109fc2:	5d                   	pop    %ebp
f0109fc3:	c3                   	ret    

f0109fc4 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f0109fc4:	55                   	push   %ebp
f0109fc5:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f0109fc7:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0109fcc:	89 c2                	mov    %eax,%edx
f0109fce:	a1 4c c9 52 f0       	mov    0xf052c94c,%eax
f0109fd3:	29 c2                	sub    %eax,%edx
f0109fd5:	89 d0                	mov    %edx,%eax
f0109fd7:	c1 f8 02             	sar    $0x2,%eax
f0109fda:	89 c2                	mov    %eax,%edx
f0109fdc:	89 d0                	mov    %edx,%eax
f0109fde:	01 c0                	add    %eax,%eax
f0109fe0:	01 d0                	add    %edx,%eax
f0109fe2:	c1 e0 09             	shl    $0x9,%eax
f0109fe5:	29 d0                	sub    %edx,%eax
f0109fe7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109fee:	01 c8                	add    %ecx,%eax
f0109ff0:	c1 e0 03             	shl    $0x3,%eax
f0109ff3:	01 d0                	add    %edx,%eax
f0109ff5:	89 c1                	mov    %eax,%ecx
f0109ff7:	c1 e1 05             	shl    $0x5,%ecx
f0109ffa:	01 c8                	add    %ecx,%eax
f0109ffc:	01 c0                	add    %eax,%eax
f0109ffe:	01 d0                	add    %edx,%eax
f010a000:	01 c0                	add    %eax,%eax
f010a002:	01 d0                	add    %edx,%eax
f010a004:	c1 e0 02             	shl    $0x2,%eax
f010a007:	01 d0                	add    %edx,%eax
f010a009:	c1 e0 04             	shl    $0x4,%eax
f010a00c:	01 d0                	add    %edx,%eax
f010a00e:	f7 d8                	neg    %eax
}
f010a010:	5d                   	pop    %ebp
f010a011:	c3                   	ret    

f010a012 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010a012:	55                   	push   %ebp
f010a013:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010a015:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a01a:	8b 40 50             	mov    0x50(%eax),%eax
}
f010a01d:	5d                   	pop    %ebp
f010a01e:	c3                   	ret    

f010a01f <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010a01f:	55                   	push   %ebp
f010a020:	89 e5                	mov    %esp,%ebp
f010a022:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010a025:	83 ec 04             	sub    $0x4,%esp
f010a028:	6a 00                	push   $0x0
f010a02a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010a02d:	50                   	push   %eax
f010a02e:	ff 75 08             	pushl  0x8(%ebp)
f010a031:	e8 7c 90 ff ff       	call   f01030b2 <envid2env>
f010a036:	83 c4 10             	add    $0x10,%esp
f010a039:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a03c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a040:	79 05                	jns    f010a047 <sys_env_destroy+0x28>
		return r;
f010a042:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a045:	eb 5e                	jmp    f010a0a5 <sys_env_destroy+0x86>

	if (e == curenv)
f010a047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a04a:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a04f:	39 c2                	cmp    %eax,%edx
f010a051:	75 1b                	jne    f010a06e <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010a053:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a058:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a05b:	83 ec 08             	sub    $0x8,%esp
f010a05e:	50                   	push   %eax
f010a05f:	68 59 a9 11 f0       	push   $0xf011a959
f010a064:	e8 2c cd ff ff       	call   f0106d95 <cprintf>
f010a069:	83 c4 10             	add    $0x10,%esp
f010a06c:	eb 20                	jmp    f010a08e <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010a06e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a071:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a074:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a079:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a07c:	83 ec 04             	sub    $0x4,%esp
f010a07f:	52                   	push   %edx
f010a080:	50                   	push   %eax
f010a081:	68 74 a9 11 f0       	push   $0xf011a974
f010a086:	e8 0a cd ff ff       	call   f0106d95 <cprintf>
f010a08b:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010a08e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a091:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a094:	83 ec 0c             	sub    $0xc,%esp
f010a097:	50                   	push   %eax
f010a098:	e8 9f f8 ff ff       	call   f010993c <sched_kill_env>
f010a09d:	83 c4 10             	add    $0x10,%esp

	return 0;
f010a0a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a0a5:	c9                   	leave  
f010a0a6:	c3                   	ret    

f010a0a7 <sys_env_exit>:

static void sys_env_exit()
{
f010a0a7:	55                   	push   %ebp
f010a0a8:	89 e5                	mov    %esp,%ebp
f010a0aa:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010a0ad:	e8 70 c7 ff ff       	call   f0106822 <env_exit>
	//env_run_cmd_prmpt();
}
f010a0b2:	90                   	nop
f010a0b3:	c9                   	leave  
f010a0b4:	c3                   	ret    

f010a0b5 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010a0b5:	55                   	push   %ebp
f010a0b6:	89 e5                	mov    %esp,%ebp
f010a0b8:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010a0bb:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a0c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010a0c3:	83 ec 0c             	sub    $0xc,%esp
f010a0c6:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a0c9:	50                   	push   %eax
f010a0ca:	e8 c7 98 ff ff       	call   f0103996 <allocate_frame>
f010a0cf:	83 c4 10             	add    $0x10,%esp
f010a0d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a0d5:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a0d9:	75 08                	jne    f010a0e3 <__sys_allocate_page+0x2e>
		return r ;
f010a0db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a0de:	e9 e8 00 00 00       	jmp    f010a1cb <__sys_allocate_page+0x116>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010a0e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e6:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010a0eb:	77 0c                	ja     f010a0f9 <__sys_allocate_page+0x44>
f010a0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f0:	25 ff 0f 00 00       	and    $0xfff,%eax
f010a0f5:	85 c0                	test   %eax,%eax
f010a0f7:	74 0a                	je     f010a103 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010a0f9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a0fe:	e9 c8 00 00 00       	jmp    f010a1cb <__sys_allocate_page+0x116>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010a103:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a106:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010a10b:	83 f8 04             	cmp    $0x4,%eax
f010a10e:	74 0a                	je     f010a11a <__sys_allocate_page+0x65>
		return E_INVAL;
f010a110:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a115:	e9 b1 00 00 00       	jmp    f010a1cb <__sys_allocate_page+0x116>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010a11a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a11d:	83 ec 0c             	sub    $0xc,%esp
f010a120:	50                   	push   %eax
f010a121:	e8 f6 fd ff ff       	call   f0109f1c <to_physical_address>
f010a126:	83 c4 10             	add    $0x10,%esp
f010a129:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, (void*)USER_LIMIT, PERM_WRITEABLE);
f010a12c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a132:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a135:	6a 02                	push   $0x2
f010a137:	68 00 00 80 ef       	push   $0xef800000
f010a13c:	52                   	push   %edx
f010a13d:	50                   	push   %eax
f010a13e:	e8 c7 9b ff ff       	call   f0103d0a <map_frame>
f010a143:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010a146:	83 ec 04             	sub    $0x4,%esp
f010a149:	68 00 10 00 00       	push   $0x1000
f010a14e:	6a 00                	push   $0x0
f010a150:	68 00 00 80 ef       	push   $0xef800000
f010a155:	e8 69 cf 00 00       	call   f01170c3 <memset>
f010a15a:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010a15d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a160:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a163:	8b 40 08             	mov    0x8(%eax),%eax
f010a166:	40                   	inc    %eax
f010a167:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, (void*)USER_LIMIT);
f010a16b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a16e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a171:	83 ec 08             	sub    $0x8,%esp
f010a174:	68 00 00 80 ef       	push   $0xef800000
f010a179:	50                   	push   %eax
f010a17a:	e8 ba 9c ff ff       	call   f0103e39 <unmap_frame>
f010a17f:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010a182:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a185:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a188:	8b 40 08             	mov    0x8(%eax),%eax
f010a18b:	48                   	dec    %eax
f010a18c:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}

	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010a190:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a193:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a196:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a199:	ff 75 0c             	pushl  0xc(%ebp)
f010a19c:	ff 75 08             	pushl  0x8(%ebp)
f010a19f:	52                   	push   %edx
f010a1a0:	50                   	push   %eax
f010a1a1:	e8 64 9b ff ff       	call   f0103d0a <map_frame>
f010a1a6:	83 c4 10             	add    $0x10,%esp
f010a1a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a1ac:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a1b0:	75 14                	jne    f010a1c6 <__sys_allocate_page+0x111>
	{
		decrement_references(ptr_frame_info);
f010a1b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a1b5:	83 ec 0c             	sub    $0xc,%esp
f010a1b8:	50                   	push   %eax
f010a1b9:	e8 27 99 ff ff       	call   f0103ae5 <decrement_references>
f010a1be:	83 c4 10             	add    $0x10,%esp
		return r;
f010a1c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a1c4:	eb 05                	jmp    f010a1cb <__sys_allocate_page+0x116>
	}
	return 0 ;
f010a1c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a1cb:	c9                   	leave  
f010a1cc:	c3                   	ret    

f010a1cd <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010a1cd:	55                   	push   %ebp
f010a1ce:	89 e5                	mov    %esp,%ebp
f010a1d0:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010a1d3:	83 ec 04             	sub    $0x4,%esp
f010a1d6:	68 8c a9 11 f0       	push   $0xf011a98c
f010a1db:	68 e3 00 00 00       	push   $0xe3
f010a1e0:	68 aa a9 11 f0       	push   $0xf011a9aa
f010a1e5:	e8 8c 5f ff ff       	call   f0100176 <_panic>

f010a1ea <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010a1ea:	55                   	push   %ebp
f010a1eb:	89 e5                	mov    %esp,%ebp
f010a1ed:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010a1f0:	83 ec 04             	sub    $0x4,%esp
f010a1f3:	68 bc a9 11 f0       	push   $0xf011a9bc
f010a1f8:	68 f2 00 00 00       	push   $0xf2
f010a1fd:	68 aa a9 11 f0       	push   $0xf011a9aa
f010a202:	e8 6f 5f ff ff       	call   f0100176 <_panic>

f010a207 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010a207:	55                   	push   %ebp
f010a208:	89 e5                	mov    %esp,%ebp
f010a20a:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010a20d:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a212:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a215:	83 ec 04             	sub    $0x4,%esp
f010a218:	ff 75 0c             	pushl  0xc(%ebp)
f010a21b:	ff 75 08             	pushl  0x8(%ebp)
f010a21e:	50                   	push   %eax
f010a21f:	e8 2e 9f ff ff       	call   f0104152 <calculate_required_frames>
f010a224:	83 c4 10             	add    $0x10,%esp
}
f010a227:	c9                   	leave  
f010a228:	c3                   	ret    

f010a229 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010a229:	55                   	push   %ebp
f010a22a:	89 e5                	mov    %esp,%ebp
f010a22c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a22f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a232:	83 ec 0c             	sub    $0xc,%esp
f010a235:	50                   	push   %eax
f010a236:	e8 c7 9f ff ff       	call   f0104202 <calculate_available_frames>
f010a23b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010a23e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a241:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a244:	01 d0                	add    %edx,%eax
}
f010a246:	c9                   	leave  
f010a247:	c3                   	ret    

f010a248 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010a248:	55                   	push   %ebp
f010a249:	89 e5                	mov    %esp,%ebp
f010a24b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a24e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a251:	83 ec 0c             	sub    $0xc,%esp
f010a254:	50                   	push   %eax
f010a255:	e8 a8 9f ff ff       	call   f0104202 <calculate_available_frames>
f010a25a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010a25d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a260:	c9                   	leave  
f010a261:	c3                   	ret    

f010a262 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010a262:	55                   	push   %ebp
f010a263:	89 e5                	mov    %esp,%ebp
f010a265:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a268:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a26b:	83 ec 0c             	sub    $0xc,%esp
f010a26e:	50                   	push   %eax
f010a26f:	e8 8e 9f ff ff       	call   f0104202 <calculate_available_frames>
f010a274:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010a277:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010a27a:	c9                   	leave  
f010a27b:	c3                   	ret    

f010a27c <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010a27c:	55                   	push   %ebp
f010a27d:	89 e5                	mov    %esp,%ebp
f010a27f:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010a282:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a287:	83 ec 0c             	sub    $0xc,%esp
f010a28a:	50                   	push   %eax
f010a28b:	e8 bc 13 00 00       	call   f010b64c <pf_calculate_allocated_pages>
f010a290:	83 c4 10             	add    $0x10,%esp
}
f010a293:	c9                   	leave  
f010a294:	c3                   	ret    

f010a295 <sys_freeMem>:


void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010a295:	55                   	push   %ebp
f010a296:	89 e5                	mov    %esp,%ebp
f010a298:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010a29b:	e8 f6 e0 ff ff       	call   f0108396 <isBufferingEnabled>
f010a2a0:	85 c0                	test   %eax,%eax
f010a2a2:	74 19                	je     f010a2bd <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010a2a4:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a2a9:	83 ec 04             	sub    $0x4,%esp
f010a2ac:	ff 75 0c             	pushl  0xc(%ebp)
f010a2af:	ff 75 08             	pushl  0x8(%ebp)
f010a2b2:	50                   	push   %eax
f010a2b3:	e8 77 9e ff ff       	call   f010412f <__freeMem_with_buffering>
f010a2b8:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010a2bb:	eb 18                	jmp    f010a2d5 <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010a2bd:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a2c2:	83 ec 04             	sub    $0x4,%esp
f010a2c5:	ff 75 0c             	pushl  0xc(%ebp)
f010a2c8:	ff 75 08             	pushl  0x8(%ebp)
f010a2cb:	50                   	push   %eax
f010a2cc:	e8 2d 9d ff ff       	call   f0103ffe <freeMem>
f010a2d1:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010a2d4:	90                   	nop
}
f010a2d5:	c9                   	leave  
f010a2d6:	c3                   	ret    

f010a2d7 <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010a2d7:	55                   	push   %ebp
f010a2d8:	89 e5                	mov    %esp,%ebp
f010a2da:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010a2dd:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a2e2:	83 ec 04             	sub    $0x4,%esp
f010a2e5:	ff 75 0c             	pushl  0xc(%ebp)
f010a2e8:	ff 75 08             	pushl  0x8(%ebp)
f010a2eb:	50                   	push   %eax
f010a2ec:	e8 ac 9c ff ff       	call   f0103f9d <allocateMem>
f010a2f1:	83 c4 10             	add    $0x10,%esp
	return;
f010a2f4:	90                   	nop
}
f010a2f5:	c9                   	leave  
f010a2f6:	c3                   	ret    

f010a2f7 <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010a2f7:	55                   	push   %ebp
f010a2f8:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010a2fa:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a2ff:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f010a305:	8b 52 38             	mov    0x38(%edx),%edx
f010a308:	80 e6 fd             	and    $0xfd,%dh
f010a30b:	89 50 38             	mov    %edx,0x38(%eax)
}
f010a30e:	90                   	nop
f010a30f:	5d                   	pop    %ebp
f010a310:	c3                   	ret    

f010a311 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010a311:	55                   	push   %ebp
f010a312:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010a314:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a319:	8b 15 50 c9 52 f0    	mov    0xf052c950,%edx
f010a31f:	8b 52 38             	mov    0x38(%edx),%edx
f010a322:	80 ce 02             	or     $0x2,%dh
f010a325:	89 50 38             	mov    %edx,0x38(%eax)
}
f010a328:	90                   	nop
f010a329:	5d                   	pop    %ebp
f010a32a:	c3                   	ret    

f010a32b <sys_clearFFL>:

void sys_clearFFL()
{
f010a32b:	55                   	push   %ebp
f010a32c:	89 e5                	mov    %esp,%ebp
f010a32e:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010a331:	a1 c0 b6 54 f0       	mov    0xf054b6c0,%eax
f010a336:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010a339:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010a340:	eb 12                	jmp    f010a354 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010a342:	83 ec 0c             	sub    $0xc,%esp
f010a345:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a348:	50                   	push   %eax
f010a349:	e8 48 96 ff ff       	call   f0103996 <allocate_frame>
f010a34e:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010a351:	ff 45 f4             	incl   -0xc(%ebp)
f010a354:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a357:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a35a:	7c e6                	jl     f010a342 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010a35c:	90                   	nop
f010a35d:	c9                   	leave  
f010a35e:	c3                   	ret    

f010a35f <sys_create_env>:

int sys_create_env(char* programName, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f010a35f:	55                   	push   %ebp
f010a360:	89 e5                	mov    %esp,%ebp
f010a362:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, percent_WS_pages_to_remove);
f010a365:	83 ec 04             	sub    $0x4,%esp
f010a368:	ff 75 10             	pushl  0x10(%ebp)
f010a36b:	ff 75 0c             	pushl  0xc(%ebp)
f010a36e:	ff 75 08             	pushl  0x8(%ebp)
f010a371:	e8 a6 b6 ff ff       	call   f0105a1c <env_create>
f010a376:	83 c4 10             	add    $0x10,%esp
f010a379:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010a37c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a380:	75 07                	jne    f010a389 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010a382:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010a387:	eb 14                	jmp    f010a39d <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010a389:	83 ec 0c             	sub    $0xc,%esp
f010a38c:	ff 75 f4             	pushl  -0xc(%ebp)
f010a38f:	e8 b6 f1 ff ff       	call   f010954a <sched_new_env>
f010a394:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010a397:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a39a:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a39d:	c9                   	leave  
f010a39e:	c3                   	ret    

f010a39f <sys_run_env>:

void sys_run_env(int32 envId)
{
f010a39f:	55                   	push   %ebp
f010a3a0:	89 e5                	mov    %esp,%ebp
f010a3a2:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010a3a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a8:	83 ec 0c             	sub    $0xc,%esp
f010a3ab:	50                   	push   %eax
f010a3ac:	e8 b0 f1 ff ff       	call   f0109561 <sched_run_env>
f010a3b1:	83 c4 10             	add    $0x10,%esp
}
f010a3b4:	90                   	nop
f010a3b5:	c9                   	leave  
f010a3b6:	c3                   	ret    

f010a3b7 <sys_free_env>:

void sys_free_env(int32 envId)
{
f010a3b7:	55                   	push   %ebp
f010a3b8:	89 e5                	mov    %esp,%ebp
f010a3ba:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010a3bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c0:	83 ec 0c             	sub    $0xc,%esp
f010a3c3:	50                   	push   %eax
f010a3c4:	e8 73 f5 ff ff       	call   f010993c <sched_kill_env>
f010a3c9:	83 c4 10             	add    $0x10,%esp
}
f010a3cc:	90                   	nop
f010a3cd:	c9                   	leave  
f010a3ce:	c3                   	ret    

f010a3cf <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010a3cf:	55                   	push   %ebp
f010a3d0:	89 e5                	mov    %esp,%ebp
f010a3d2:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010a3d5:	0f 31                	rdtsc  
f010a3d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010a3da:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010a3dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a3e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010a3e6:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010a3e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010a3ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010a3f2:	89 01                	mov    %eax,(%ecx)
f010a3f4:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010a3f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fa:	c9                   	leave  
f010a3fb:	c2 04 00             	ret    $0x4

f010a3fe <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010a3fe:	55                   	push   %ebp
f010a3ff:	89 e5                	mov    %esp,%ebp
f010a401:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010a404:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010a409:	ff 75 10             	pushl  0x10(%ebp)
f010a40c:	ff 75 0c             	pushl  0xc(%ebp)
f010a40f:	ff 75 08             	pushl  0x8(%ebp)
f010a412:	50                   	push   %eax
f010a413:	e8 1d 9d ff ff       	call   f0104135 <moveMem>
f010a418:	83 c4 10             	add    $0x10,%esp
	return;
f010a41b:	90                   	nop
}
f010a41c:	c9                   	leave  
f010a41d:	c3                   	ret    

f010a41e <sys_rcr2>:
uint32 sys_rcr2()
{
f010a41e:	55                   	push   %ebp
f010a41f:	89 e5                	mov    %esp,%ebp
f010a421:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010a424:	0f 20 d0             	mov    %cr2,%eax
f010a427:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010a42a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010a42d:	90                   	nop
}
f010a42e:	c9                   	leave  
f010a42f:	c3                   	ret    

f010a430 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010a430:	55                   	push   %ebp
f010a431:	89 e5                	mov    %esp,%ebp
f010a433:	83 ec 04             	sub    $0x4,%esp
f010a436:	8b 45 08             	mov    0x8(%ebp),%eax
f010a439:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010a43c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010a43f:	a2 80 c9 52 f0       	mov    %al,0xf052c980
}
f010a444:	90                   	nop
f010a445:	c9                   	leave  
f010a446:	c3                   	ret    

f010a447 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010a447:	55                   	push   %ebp
f010a448:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010a44a:	c7 05 dc b6 54 f0 00 	movl   $0x0,0xf054b6dc
f010a451:	00 00 00 
}
f010a454:	90                   	nop
f010a455:	5d                   	pop    %ebp
f010a456:	c3                   	ret    

f010a457 <inctst>:
void inctst()
{
f010a457:	55                   	push   %ebp
f010a458:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010a45a:	a1 dc b6 54 f0       	mov    0xf054b6dc,%eax
f010a45f:	40                   	inc    %eax
f010a460:	a3 dc b6 54 f0       	mov    %eax,0xf054b6dc
}
f010a465:	90                   	nop
f010a466:	5d                   	pop    %ebp
f010a467:	c3                   	ret    

f010a468 <gettst>:
uint32 gettst()
{
f010a468:	55                   	push   %ebp
f010a469:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010a46b:	a1 dc b6 54 f0       	mov    0xf054b6dc,%eax
}
f010a470:	5d                   	pop    %ebp
f010a471:	c3                   	ret    

f010a472 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010a472:	55                   	push   %ebp
f010a473:	89 e5                	mov    %esp,%ebp
f010a475:	83 ec 28             	sub    $0x28,%esp
f010a478:	8b 45 14             	mov    0x14(%ebp),%eax
f010a47b:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010a47e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010a485:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010a489:	83 f8 65             	cmp    $0x65,%eax
f010a48c:	74 5d                	je     f010a4eb <tst+0x79>
f010a48e:	83 f8 65             	cmp    $0x65,%eax
f010a491:	7f 0a                	jg     f010a49d <tst+0x2b>
f010a493:	83 f8 62             	cmp    $0x62,%eax
f010a496:	74 73                	je     f010a50b <tst+0x99>
f010a498:	e9 91 00 00 00       	jmp    f010a52e <tst+0xbc>
f010a49d:	83 f8 67             	cmp    $0x67,%eax
f010a4a0:	74 29                	je     f010a4cb <tst+0x59>
f010a4a2:	83 f8 6c             	cmp    $0x6c,%eax
f010a4a5:	0f 85 83 00 00 00    	jne    f010a52e <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010a4ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a4b1:	73 09                	jae    f010a4bc <tst+0x4a>
			chk = 1;
f010a4b3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a4ba:	eb 68                	jmp    f010a524 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010a4bc:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a4c0:	74 62                	je     f010a524 <tst+0xb2>
			chk = 1;
f010a4c2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a4c9:	eb 59                	jmp    f010a524 <tst+0xb2>
	case 'g':
		if (n > v1)
f010a4cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a4d1:	76 09                	jbe    f010a4dc <tst+0x6a>
			chk = 1;
f010a4d3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a4da:	eb 4b                	jmp    f010a527 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010a4dc:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a4e0:	74 45                	je     f010a527 <tst+0xb5>
			chk = 1;
f010a4e2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a4e9:	eb 3c                	jmp    f010a527 <tst+0xb5>
	case 'e':
		if (n == v1)
f010a4eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ee:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a4f1:	75 09                	jne    f010a4fc <tst+0x8a>
			chk = 1;
f010a4f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010a4fa:	eb 2e                	jmp    f010a52a <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010a4fc:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010a500:	74 28                	je     f010a52a <tst+0xb8>
			chk = 1;
f010a502:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a509:	eb 1f                	jmp    f010a52a <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010a50b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a511:	72 1a                	jb     f010a52d <tst+0xbb>
f010a513:	8b 45 08             	mov    0x8(%ebp),%eax
f010a516:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a519:	77 12                	ja     f010a52d <tst+0xbb>
			chk = 1;
f010a51b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010a522:	eb 09                	jmp    f010a52d <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a524:	90                   	nop
f010a525:	eb 07                	jmp    f010a52e <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a527:	90                   	nop
f010a528:	eb 04                	jmp    f010a52e <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010a52a:	90                   	nop
f010a52b:	eb 01                	jmp    f010a52e <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010a52d:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010a52e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a532:	75 17                	jne    f010a54b <tst+0xd9>
f010a534:	83 ec 04             	sub    $0x4,%esp
f010a537:	68 db a9 11 f0       	push   $0xf011a9db
f010a53c:	68 95 01 00 00       	push   $0x195
f010a541:	68 aa a9 11 f0       	push   $0xf011a9aa
f010a546:	e8 2b 5c ff ff       	call   f0100176 <_panic>
	tstcnt++ ;
f010a54b:	a1 dc b6 54 f0       	mov    0xf054b6dc,%eax
f010a550:	40                   	inc    %eax
f010a551:	a3 dc b6 54 f0       	mov    %eax,0xf054b6dc
	return;
f010a556:	90                   	nop
}
f010a557:	c9                   	leave  
f010a558:	c3                   	ret    

f010a559 <chktst>:

void chktst(uint32 n)
{
f010a559:	55                   	push   %ebp
f010a55a:	89 e5                	mov    %esp,%ebp
f010a55c:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010a55f:	a1 dc b6 54 f0       	mov    0xf054b6dc,%eax
f010a564:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a567:	75 12                	jne    f010a57b <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010a569:	83 ec 0c             	sub    $0xc,%esp
f010a56c:	68 f0 a9 11 f0       	push   $0xf011a9f0
f010a571:	e8 1f c8 ff ff       	call   f0106d95 <cprintf>
f010a576:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010a579:	eb 17                	jmp    f010a592 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010a57b:	83 ec 04             	sub    $0x4,%esp
f010a57e:	68 1c aa 11 f0       	push   $0xf011aa1c
f010a583:	68 9f 01 00 00       	push   $0x19f
f010a588:	68 aa a9 11 f0       	push   $0xf011a9aa
f010a58d:	e8 e4 5b ff ff       	call   f0100176 <_panic>
}
f010a592:	c9                   	leave  
f010a593:	c3                   	ret    

f010a594 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010a594:	55                   	push   %ebp
f010a595:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010a597:	a1 34 d2 52 f0       	mov    0xf052d234,%eax
}
f010a59c:	5d                   	pop    %ebp
f010a59d:	c3                   	ret    

f010a59e <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010a59e:	55                   	push   %ebp
f010a59f:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010a5a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a4:	a3 34 d2 52 f0       	mov    %eax,0xf052d234
}
f010a5a9:	90                   	nop
f010a5aa:	5d                   	pop    %ebp
f010a5ab:	c3                   	ret    

f010a5ac <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010a5ac:	55                   	push   %ebp
f010a5ad:	89 e5                	mov    %esp,%ebp
f010a5af:	56                   	push   %esi
f010a5b0:	53                   	push   %ebx
f010a5b1:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010a5b4:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010a5b8:	0f 87 ec 02 00 00    	ja     f010a8aa <syscall+0x2fe>
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	c1 e0 02             	shl    $0x2,%eax
f010a5c4:	05 38 aa 11 f0       	add    $0xf011aa38,%eax
f010a5c9:	8b 00                	mov    (%eax),%eax
f010a5cb:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010a5cd:	8b 45 14             	mov    0x14(%ebp),%eax
f010a5d0:	0f b6 d0             	movzbl %al,%edx
f010a5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a5d6:	83 ec 04             	sub    $0x4,%esp
f010a5d9:	52                   	push   %edx
f010a5da:	ff 75 10             	pushl  0x10(%ebp)
f010a5dd:	50                   	push   %eax
f010a5de:	e8 4c f9 ff ff       	call   f0109f2f <sys_cputs>
f010a5e3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a5e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010a5eb:	e9 bf 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010a5f0:	e8 af f9 ff ff       	call   f0109fa4 <sys_cgetc>
f010a5f5:	e9 b5 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010a5fa:	e8 c5 f9 ff ff       	call   f0109fc4 <sys_getenvindex>
f010a5ff:	e9 ab 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010a604:	e8 ae f9 ff ff       	call   f0109fb7 <sys_getenvid>
f010a609:	e9 a1 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010a60e:	e8 ff f9 ff ff       	call   f010a012 <sys_getparentenvid>
f010a613:	e9 97 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010a618:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a61b:	83 ec 0c             	sub    $0xc,%esp
f010a61e:	50                   	push   %eax
f010a61f:	e8 fb f9 ff ff       	call   f010a01f <sys_env_destroy>
f010a624:	83 c4 10             	add    $0x10,%esp
f010a627:	e9 83 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010a62c:	e8 76 fa ff ff       	call   f010a0a7 <sys_env_exit>
		return 0;
f010a631:	b8 00 00 00 00       	mov    $0x0,%eax
f010a636:	e9 74 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010a63b:	83 ec 08             	sub    $0x8,%esp
f010a63e:	ff 75 10             	pushl  0x10(%ebp)
f010a641:	ff 75 0c             	pushl  0xc(%ebp)
f010a644:	e8 be fb ff ff       	call   f010a207 <sys_calculate_required_frames>
f010a649:	83 c4 10             	add    $0x10,%esp
f010a64c:	e9 5e 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010a651:	e8 d3 fb ff ff       	call   f010a229 <sys_calculate_free_frames>
f010a656:	e9 54 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010a65b:	e8 e8 fb ff ff       	call   f010a248 <sys_calculate_modified_frames>
f010a660:	e9 4a 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010a665:	e8 f8 fb ff ff       	call   f010a262 <sys_calculate_notmod_frames>
f010a66a:	e9 40 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010a66f:	e8 08 fc ff ff       	call   f010a27c <sys_pf_calculate_allocated_pages>
f010a674:	e9 36 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010a679:	83 ec 08             	sub    $0x8,%esp
f010a67c:	ff 75 10             	pushl  0x10(%ebp)
f010a67f:	ff 75 0c             	pushl  0xc(%ebp)
f010a682:	e8 0e fc ff ff       	call   f010a295 <sys_freeMem>
f010a687:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a68a:	b8 00 00 00 00       	mov    $0x0,%eax
f010a68f:	e9 1b 02 00 00       	jmp    f010a8af <syscall+0x303>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010a694:	8b 55 10             	mov    0x10(%ebp),%edx
f010a697:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a69a:	83 ec 08             	sub    $0x8,%esp
f010a69d:	52                   	push   %edx
f010a69e:	50                   	push   %eax
f010a69f:	e8 11 fa ff ff       	call   f010a0b5 <__sys_allocate_page>
f010a6a4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a6a7:	b8 00 00 00 00       	mov    $0x0,%eax
f010a6ac:	e9 fe 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010a6b1:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010a6b4:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010a6b7:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010a6ba:	8b 55 10             	mov    0x10(%ebp),%edx
f010a6bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6c0:	83 ec 0c             	sub    $0xc,%esp
f010a6c3:	56                   	push   %esi
f010a6c4:	53                   	push   %ebx
f010a6c5:	51                   	push   %ecx
f010a6c6:	52                   	push   %edx
f010a6c7:	50                   	push   %eax
f010a6c8:	e8 00 fb ff ff       	call   f010a1cd <__sys_map_frame>
f010a6cd:	83 c4 20             	add    $0x20,%esp
		return 0;
f010a6d0:	b8 00 00 00 00       	mov    $0x0,%eax
f010a6d5:	e9 d5 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010a6da:	8b 55 10             	mov    0x10(%ebp),%edx
f010a6dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6e0:	83 ec 08             	sub    $0x8,%esp
f010a6e3:	52                   	push   %edx
f010a6e4:	50                   	push   %eax
f010a6e5:	e8 00 fb ff ff       	call   f010a1ea <__sys_unmap_frame>
f010a6ea:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a6ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010a6f2:	e9 b8 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010a6f7:	83 ec 08             	sub    $0x8,%esp
f010a6fa:	ff 75 10             	pushl  0x10(%ebp)
f010a6fd:	ff 75 0c             	pushl  0xc(%ebp)
f010a700:	e8 d2 fb ff ff       	call   f010a2d7 <sys_allocateMem>
f010a705:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a708:	b8 00 00 00 00       	mov    $0x0,%eax
f010a70d:	e9 9d 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010a712:	e8 e0 fb ff ff       	call   f010a2f7 <sys_disable_interrupt>
		return 0;
f010a717:	b8 00 00 00 00       	mov    $0x0,%eax
f010a71c:	e9 8e 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010a721:	e8 eb fb ff ff       	call   f010a311 <sys_enable_interrupt>
		return 0;
f010a726:	b8 00 00 00 00       	mov    $0x0,%eax
f010a72b:	e9 7f 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010a730:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a733:	0f be c0             	movsbl %al,%eax
f010a736:	83 ec 0c             	sub    $0xc,%esp
f010a739:	50                   	push   %eax
f010a73a:	e8 41 f8 ff ff       	call   f0109f80 <sys_cputc>
f010a73f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a742:	b8 00 00 00 00       	mov    $0x0,%eax
f010a747:	e9 63 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010a74c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a74f:	0f be c0             	movsbl %al,%eax
f010a752:	83 ec 0c             	sub    $0xc,%esp
f010a755:	50                   	push   %eax
f010a756:	e8 d0 fb ff ff       	call   f010a32b <sys_clearFFL>
f010a75b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a75e:	b8 00 00 00 00       	mov    $0x0,%eax
f010a763:	e9 47 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;


	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3);
f010a768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a76b:	83 ec 04             	sub    $0x4,%esp
f010a76e:	ff 75 14             	pushl  0x14(%ebp)
f010a771:	ff 75 10             	pushl  0x10(%ebp)
f010a774:	50                   	push   %eax
f010a775:	e8 e5 fb ff ff       	call   f010a35f <sys_create_env>
f010a77a:	83 c4 10             	add    $0x10,%esp
f010a77d:	e9 2d 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010a782:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a785:	83 ec 0c             	sub    $0xc,%esp
f010a788:	50                   	push   %eax
f010a789:	e8 29 fc ff ff       	call   f010a3b7 <sys_free_env>
f010a78e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a791:	b8 00 00 00 00       	mov    $0x0,%eax
f010a796:	e9 14 01 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010a79b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a79e:	83 ec 0c             	sub    $0xc,%esp
f010a7a1:	50                   	push   %eax
f010a7a2:	e8 f8 fb ff ff       	call   f010a39f <sys_run_env>
f010a7a7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a7aa:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7af:	e9 fb 00 00 00       	jmp    f010a8af <syscall+0x303>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010a7b4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a7b7:	83 ec 0c             	sub    $0xc,%esp
f010a7ba:	50                   	push   %eax
f010a7bb:	e8 0f fc ff ff       	call   f010a3cf <sys_get_virtual_time>
f010a7c0:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010a7c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010a7c9:	8b 45 10             	mov    0x10(%ebp),%eax
f010a7cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010a7cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a7d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010a7d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a7da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a7dd:	89 10                	mov    %edx,(%eax)
		return 0;
f010a7df:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7e4:	e9 c6 00 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010a7e9:	83 ec 04             	sub    $0x4,%esp
f010a7ec:	ff 75 14             	pushl  0x14(%ebp)
f010a7ef:	ff 75 10             	pushl  0x10(%ebp)
f010a7f2:	ff 75 0c             	pushl  0xc(%ebp)
f010a7f5:	e8 04 fc ff ff       	call   f010a3fe <sys_moveMem>
f010a7fa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a7fd:	b8 00 00 00 00       	mov    $0x0,%eax
f010a802:	e9 a8 00 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010a807:	e8 12 fc ff ff       	call   f010a41e <sys_rcr2>
f010a80c:	e9 9e 00 00 00       	jmp    f010a8af <syscall+0x303>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010a811:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a814:	0f b6 c0             	movzbl %al,%eax
f010a817:	83 ec 0c             	sub    $0xc,%esp
f010a81a:	50                   	push   %eax
f010a81b:	e8 10 fc ff ff       	call   f010a430 <sys_bypassPageFault>
f010a820:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a823:	b8 00 00 00 00       	mov    $0x0,%eax
f010a828:	e9 82 00 00 00       	jmp    f010a8af <syscall+0x303>

	case SYS_rsttst:
		rsttst();
f010a82d:	e8 15 fc ff ff       	call   f010a447 <rsttst>
		return 0;
f010a832:	b8 00 00 00 00       	mov    $0x0,%eax
f010a837:	eb 76                	jmp    f010a8af <syscall+0x303>
	case SYS_inctst:
		inctst();
f010a839:	e8 19 fc ff ff       	call   f010a457 <inctst>
		return 0;
f010a83e:	b8 00 00 00 00       	mov    $0x0,%eax
f010a843:	eb 6a                	jmp    f010a8af <syscall+0x303>
	case SYS_chktst:
		chktst(a1);
f010a845:	83 ec 0c             	sub    $0xc,%esp
f010a848:	ff 75 0c             	pushl  0xc(%ebp)
f010a84b:	e8 09 fd ff ff       	call   f010a559 <chktst>
f010a850:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a853:	b8 00 00 00 00       	mov    $0x0,%eax
f010a858:	eb 55                	jmp    f010a8af <syscall+0x303>
	case SYS_gettst:
		return gettst();
f010a85a:	e8 09 fc ff ff       	call   f010a468 <gettst>
f010a85f:	eb 4e                	jmp    f010a8af <syscall+0x303>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010a861:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010a864:	8b 45 18             	mov    0x18(%ebp),%eax
f010a867:	0f be c0             	movsbl %al,%eax
f010a86a:	83 ec 0c             	sub    $0xc,%esp
f010a86d:	52                   	push   %edx
f010a86e:	50                   	push   %eax
f010a86f:	ff 75 14             	pushl  0x14(%ebp)
f010a872:	ff 75 10             	pushl  0x10(%ebp)
f010a875:	ff 75 0c             	pushl  0xc(%ebp)
f010a878:	e8 f5 fb ff ff       	call   f010a472 <tst>
f010a87d:	83 c4 20             	add    $0x20,%esp
		return 0;
f010a880:	b8 00 00 00 00       	mov    $0x0,%eax
f010a885:	eb 28                	jmp    f010a8af <syscall+0x303>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010a887:	e8 08 fd ff ff       	call   f010a594 <sys_get_heap_strategy>
f010a88c:	eb 21                	jmp    f010a8af <syscall+0x303>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010a88e:	83 ec 0c             	sub    $0xc,%esp
f010a891:	ff 75 0c             	pushl  0xc(%ebp)
f010a894:	e8 05 fd ff ff       	call   f010a59e <sys_set_uheap_strategy>
f010a899:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a89c:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8a1:	eb 0c                	jmp    f010a8af <syscall+0x303>

	case NSYSCALLS:
		return 	-E_INVAL;
f010a8a3:	b8 03 00 00 00       	mov    $0x3,%eax
f010a8a8:	eb 05                	jmp    f010a8af <syscall+0x303>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010a8aa:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010a8af:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010a8b2:	5b                   	pop    %ebx
f010a8b3:	5e                   	pop    %esi
f010a8b4:	5d                   	pop    %ebp
f010a8b5:	c3                   	ret    

f010a8b6 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010a8b6:	55                   	push   %ebp
f010a8b7:	89 e5                	mov    %esp,%ebp
f010a8b9:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010a8bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8bf:	8b 00                	mov    (%eax),%eax
f010a8c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010a8c4:	8b 45 10             	mov    0x10(%ebp),%eax
f010a8c7:	8b 00                	mov    (%eax),%eax
f010a8c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010a8cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010a8d3:	e9 ca 00 00 00       	jmp    f010a9a2 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010a8d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010a8db:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010a8de:	01 d0                	add    %edx,%eax
f010a8e0:	89 c2                	mov    %eax,%edx
f010a8e2:	c1 ea 1f             	shr    $0x1f,%edx
f010a8e5:	01 d0                	add    %edx,%eax
f010a8e7:	d1 f8                	sar    %eax
f010a8e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010a8ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010a8f2:	eb 03                	jmp    f010a8f7 <stab_binsearch+0x41>
			m--;
f010a8f4:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010a8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a8fa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010a8fd:	7c 1e                	jl     f010a91d <stab_binsearch+0x67>
f010a8ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a902:	89 d0                	mov    %edx,%eax
f010a904:	01 c0                	add    %eax,%eax
f010a906:	01 d0                	add    %edx,%eax
f010a908:	c1 e0 02             	shl    $0x2,%eax
f010a90b:	89 c2                	mov    %eax,%edx
f010a90d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a910:	01 d0                	add    %edx,%eax
f010a912:	8a 40 04             	mov    0x4(%eax),%al
f010a915:	0f b6 c0             	movzbl %al,%eax
f010a918:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a91b:	75 d7                	jne    f010a8f4 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010a91d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a920:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010a923:	7d 09                	jge    f010a92e <stab_binsearch+0x78>
			l = true_m + 1;
f010a925:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a928:	40                   	inc    %eax
f010a929:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010a92c:	eb 74                	jmp    f010a9a2 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010a92e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010a935:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a938:	89 d0                	mov    %edx,%eax
f010a93a:	01 c0                	add    %eax,%eax
f010a93c:	01 d0                	add    %edx,%eax
f010a93e:	c1 e0 02             	shl    $0x2,%eax
f010a941:	89 c2                	mov    %eax,%edx
f010a943:	8b 45 08             	mov    0x8(%ebp),%eax
f010a946:	01 d0                	add    %edx,%eax
f010a948:	8b 40 08             	mov    0x8(%eax),%eax
f010a94b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010a94e:	73 11                	jae    f010a961 <stab_binsearch+0xab>
			*region_left = m;
f010a950:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a953:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a956:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010a958:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a95b:	40                   	inc    %eax
f010a95c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010a95f:	eb 41                	jmp    f010a9a2 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010a961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a964:	89 d0                	mov    %edx,%eax
f010a966:	01 c0                	add    %eax,%eax
f010a968:	01 d0                	add    %edx,%eax
f010a96a:	c1 e0 02             	shl    $0x2,%eax
f010a96d:	89 c2                	mov    %eax,%edx
f010a96f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a972:	01 d0                	add    %edx,%eax
f010a974:	8b 40 08             	mov    0x8(%eax),%eax
f010a977:	3b 45 18             	cmp    0x18(%ebp),%eax
f010a97a:	76 14                	jbe    f010a990 <stab_binsearch+0xda>
			*region_right = m - 1;
f010a97c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a97f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a982:	8b 45 10             	mov    0x10(%ebp),%eax
f010a985:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010a987:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a98a:	48                   	dec    %eax
f010a98b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010a98e:	eb 12                	jmp    f010a9a2 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010a990:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a993:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a996:	89 10                	mov    %edx,(%eax)
			l = m;
f010a998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a99b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010a99e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010a9a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010a9a5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010a9a8:	0f 8e 2a ff ff ff    	jle    f010a8d8 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010a9ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9b2:	75 0f                	jne    f010a9c3 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010a9b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9b7:	8b 00                	mov    (%eax),%eax
f010a9b9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a9bc:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9bf:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010a9c1:	eb 3d                	jmp    f010aa00 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010a9c3:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9c6:	8b 00                	mov    (%eax),%eax
f010a9c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010a9cb:	eb 03                	jmp    f010a9d0 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010a9cd:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010a9d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9d3:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010a9d5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010a9d8:	7d 1e                	jge    f010a9f8 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010a9da:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010a9dd:	89 d0                	mov    %edx,%eax
f010a9df:	01 c0                	add    %eax,%eax
f010a9e1:	01 d0                	add    %edx,%eax
f010a9e3:	c1 e0 02             	shl    $0x2,%eax
f010a9e6:	89 c2                	mov    %eax,%edx
f010a9e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9eb:	01 d0                	add    %edx,%eax
f010a9ed:	8a 40 04             	mov    0x4(%eax),%al
f010a9f0:	0f b6 c0             	movzbl %al,%eax
f010a9f3:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a9f6:	75 d5                	jne    f010a9cd <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010a9f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9fb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010a9fe:	89 10                	mov    %edx,(%eax)
	}
}
f010aa00:	90                   	nop
f010aa01:	c9                   	leave  
f010aa02:	c3                   	ret    

f010aa03 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010aa03:	55                   	push   %ebp
f010aa04:	89 e5                	mov    %esp,%ebp
f010aa06:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010aa09:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa0c:	c7 00 f4 aa 11 f0    	movl   $0xf011aaf4,(%eax)
	info->eip_line = 0;
f010aa12:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa15:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010aa1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa1f:	c7 40 08 f4 aa 11 f0 	movl   $0xf011aaf4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010aa26:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa29:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010aa30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa33:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa36:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010aa39:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa3c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010aa43:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa46:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010aa4b:	76 1e                	jbe    f010aa6b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010aa4d:	c7 45 f4 f0 c2 11 f0 	movl   $0xf011c2f0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010aa54:	c7 45 f0 88 c5 13 f0 	movl   $0xf013c588,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010aa5b:	c7 45 ec 89 c5 13 f0 	movl   $0xf013c589,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010aa62:	c7 45 e8 a0 46 14 f0 	movl   $0xf01446a0,-0x18(%ebp)
f010aa69:	eb 2a                	jmp    f010aa95 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010aa6b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010aa72:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa75:	8b 00                	mov    (%eax),%eax
f010aa77:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010aa7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa7d:	8b 40 04             	mov    0x4(%eax),%eax
f010aa80:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010aa83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa86:	8b 40 08             	mov    0x8(%eax),%eax
f010aa89:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010aa8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa8f:	8b 40 0c             	mov    0xc(%eax),%eax
f010aa92:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010aa95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa98:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010aa9b:	76 0a                	jbe    f010aaa7 <debuginfo_eip+0xa4>
f010aa9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aaa0:	48                   	dec    %eax
f010aaa1:	8a 00                	mov    (%eax),%al
f010aaa3:	84 c0                	test   %al,%al
f010aaa5:	74 0a                	je     f010aab1 <debuginfo_eip+0xae>
		return -1;
f010aaa7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010aaac:	e9 01 02 00 00       	jmp    f010acb2 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010aab1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010aab8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aabb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aabe:	29 c2                	sub    %eax,%edx
f010aac0:	89 d0                	mov    %edx,%eax
f010aac2:	c1 f8 02             	sar    $0x2,%eax
f010aac5:	89 c2                	mov    %eax,%edx
f010aac7:	89 d0                	mov    %edx,%eax
f010aac9:	c1 e0 02             	shl    $0x2,%eax
f010aacc:	01 d0                	add    %edx,%eax
f010aace:	c1 e0 02             	shl    $0x2,%eax
f010aad1:	01 d0                	add    %edx,%eax
f010aad3:	c1 e0 02             	shl    $0x2,%eax
f010aad6:	01 d0                	add    %edx,%eax
f010aad8:	89 c1                	mov    %eax,%ecx
f010aada:	c1 e1 08             	shl    $0x8,%ecx
f010aadd:	01 c8                	add    %ecx,%eax
f010aadf:	89 c1                	mov    %eax,%ecx
f010aae1:	c1 e1 10             	shl    $0x10,%ecx
f010aae4:	01 c8                	add    %ecx,%eax
f010aae6:	01 c0                	add    %eax,%eax
f010aae8:	01 d0                	add    %edx,%eax
f010aaea:	48                   	dec    %eax
f010aaeb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010aaee:	ff 75 08             	pushl  0x8(%ebp)
f010aaf1:	6a 64                	push   $0x64
f010aaf3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010aaf6:	50                   	push   %eax
f010aaf7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010aafa:	50                   	push   %eax
f010aafb:	ff 75 f4             	pushl  -0xc(%ebp)
f010aafe:	e8 b3 fd ff ff       	call   f010a8b6 <stab_binsearch>
f010ab03:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010ab06:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ab09:	85 c0                	test   %eax,%eax
f010ab0b:	75 0a                	jne    f010ab17 <debuginfo_eip+0x114>
		return -1;
f010ab0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010ab12:	e9 9b 01 00 00       	jmp    f010acb2 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010ab17:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ab1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010ab1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ab20:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010ab23:	ff 75 08             	pushl  0x8(%ebp)
f010ab26:	6a 24                	push   $0x24
f010ab28:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010ab2b:	50                   	push   %eax
f010ab2c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010ab2f:	50                   	push   %eax
f010ab30:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab33:	e8 7e fd ff ff       	call   f010a8b6 <stab_binsearch>
f010ab38:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010ab3b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010ab3e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ab41:	39 c2                	cmp    %eax,%edx
f010ab43:	0f 8f 86 00 00 00    	jg     f010abcf <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010ab49:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ab4c:	89 c2                	mov    %eax,%edx
f010ab4e:	89 d0                	mov    %edx,%eax
f010ab50:	01 c0                	add    %eax,%eax
f010ab52:	01 d0                	add    %edx,%eax
f010ab54:	c1 e0 02             	shl    $0x2,%eax
f010ab57:	89 c2                	mov    %eax,%edx
f010ab59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5c:	01 d0                	add    %edx,%eax
f010ab5e:	8b 00                	mov    (%eax),%eax
f010ab60:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010ab63:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ab66:	29 d1                	sub    %edx,%ecx
f010ab68:	89 ca                	mov    %ecx,%edx
f010ab6a:	39 d0                	cmp    %edx,%eax
f010ab6c:	73 22                	jae    f010ab90 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010ab6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ab71:	89 c2                	mov    %eax,%edx
f010ab73:	89 d0                	mov    %edx,%eax
f010ab75:	01 c0                	add    %eax,%eax
f010ab77:	01 d0                	add    %edx,%eax
f010ab79:	c1 e0 02             	shl    $0x2,%eax
f010ab7c:	89 c2                	mov    %eax,%edx
f010ab7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab81:	01 d0                	add    %edx,%eax
f010ab83:	8b 10                	mov    (%eax),%edx
f010ab85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab88:	01 c2                	add    %eax,%edx
f010ab8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab8d:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010ab90:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ab93:	89 c2                	mov    %eax,%edx
f010ab95:	89 d0                	mov    %edx,%eax
f010ab97:	01 c0                	add    %eax,%eax
f010ab99:	01 d0                	add    %edx,%eax
f010ab9b:	c1 e0 02             	shl    $0x2,%eax
f010ab9e:	89 c2                	mov    %eax,%edx
f010aba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aba3:	01 d0                	add    %edx,%eax
f010aba5:	8b 50 08             	mov    0x8(%eax),%edx
f010aba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abab:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010abae:	8b 55 08             	mov    0x8(%ebp),%edx
f010abb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abb4:	8b 40 10             	mov    0x10(%eax),%eax
f010abb7:	29 c2                	sub    %eax,%edx
f010abb9:	89 d0                	mov    %edx,%eax
f010abbb:	c1 f8 02             	sar    $0x2,%eax
f010abbe:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010abc1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010abc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010abc7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010abca:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010abcd:	eb 15                	jmp    f010abe4 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010abcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abd2:	8b 55 08             	mov    0x8(%ebp),%edx
f010abd5:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010abd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010abde:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010abe1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010abe4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abe7:	8b 40 08             	mov    0x8(%eax),%eax
f010abea:	83 ec 08             	sub    $0x8,%esp
f010abed:	6a 3a                	push   $0x3a
f010abef:	50                   	push   %eax
f010abf0:	e8 a2 c4 00 00       	call   f0117097 <strfind>
f010abf5:	83 c4 10             	add    $0x10,%esp
f010abf8:	89 c2                	mov    %eax,%edx
f010abfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abfd:	8b 40 08             	mov    0x8(%eax),%eax
f010ac00:	29 c2                	sub    %eax,%edx
f010ac02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac05:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ac08:	eb 03                	jmp    f010ac0d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010ac0a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ac0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac10:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ac13:	7c 4e                	jl     f010ac63 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010ac15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ac18:	89 d0                	mov    %edx,%eax
f010ac1a:	01 c0                	add    %eax,%eax
f010ac1c:	01 d0                	add    %edx,%eax
f010ac1e:	c1 e0 02             	shl    $0x2,%eax
f010ac21:	89 c2                	mov    %eax,%edx
f010ac23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac26:	01 d0                	add    %edx,%eax
f010ac28:	8a 40 04             	mov    0x4(%eax),%al
f010ac2b:	3c 84                	cmp    $0x84,%al
f010ac2d:	74 34                	je     f010ac63 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010ac2f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ac32:	89 d0                	mov    %edx,%eax
f010ac34:	01 c0                	add    %eax,%eax
f010ac36:	01 d0                	add    %edx,%eax
f010ac38:	c1 e0 02             	shl    $0x2,%eax
f010ac3b:	89 c2                	mov    %eax,%edx
f010ac3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac40:	01 d0                	add    %edx,%eax
f010ac42:	8a 40 04             	mov    0x4(%eax),%al
f010ac45:	3c 64                	cmp    $0x64,%al
f010ac47:	75 c1                	jne    f010ac0a <debuginfo_eip+0x207>
f010ac49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ac4c:	89 d0                	mov    %edx,%eax
f010ac4e:	01 c0                	add    %eax,%eax
f010ac50:	01 d0                	add    %edx,%eax
f010ac52:	c1 e0 02             	shl    $0x2,%eax
f010ac55:	89 c2                	mov    %eax,%edx
f010ac57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac5a:	01 d0                	add    %edx,%eax
f010ac5c:	8b 40 08             	mov    0x8(%eax),%eax
f010ac5f:	85 c0                	test   %eax,%eax
f010ac61:	74 a7                	je     f010ac0a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010ac63:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac66:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ac69:	7c 42                	jl     f010acad <debuginfo_eip+0x2aa>
f010ac6b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ac6e:	89 d0                	mov    %edx,%eax
f010ac70:	01 c0                	add    %eax,%eax
f010ac72:	01 d0                	add    %edx,%eax
f010ac74:	c1 e0 02             	shl    $0x2,%eax
f010ac77:	89 c2                	mov    %eax,%edx
f010ac79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac7c:	01 d0                	add    %edx,%eax
f010ac7e:	8b 00                	mov    (%eax),%eax
f010ac80:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010ac83:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ac86:	29 d1                	sub    %edx,%ecx
f010ac88:	89 ca                	mov    %ecx,%edx
f010ac8a:	39 d0                	cmp    %edx,%eax
f010ac8c:	73 1f                	jae    f010acad <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010ac8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ac91:	89 d0                	mov    %edx,%eax
f010ac93:	01 c0                	add    %eax,%eax
f010ac95:	01 d0                	add    %edx,%eax
f010ac97:	c1 e0 02             	shl    $0x2,%eax
f010ac9a:	89 c2                	mov    %eax,%edx
f010ac9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac9f:	01 d0                	add    %edx,%eax
f010aca1:	8b 10                	mov    (%eax),%edx
f010aca3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aca6:	01 c2                	add    %eax,%edx
f010aca8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acab:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010acad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010acb2:	c9                   	leave  
f010acb3:	c3                   	ret    

f010acb4 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010acb4:	55                   	push   %ebp
f010acb5:	89 e5                	mov    %esp,%ebp
f010acb7:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010acba:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbd:	05 00 14 00 00       	add    $0x1400,%eax
f010acc2:	c1 e0 03             	shl    $0x3,%eax
f010acc5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010acc8:	83 ec 04             	sub    $0x4,%esp
f010accb:	6a 08                	push   $0x8
f010accd:	ff 75 0c             	pushl  0xc(%ebp)
f010acd0:	ff 75 f4             	pushl  -0xc(%ebp)
f010acd3:	e8 50 c9 00 00       	call   f0117628 <ide_read>
f010acd8:	83 c4 10             	add    $0x10,%esp
f010acdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010acde:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010ace1:	c9                   	leave  
f010ace2:	c3                   	ret    

f010ace3 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010ace3:	55                   	push   %ebp
f010ace4:	89 e5                	mov    %esp,%ebp
f010ace6:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010ace9:	8b 45 08             	mov    0x8(%ebp),%eax
f010acec:	05 00 14 00 00       	add    $0x1400,%eax
f010acf1:	c1 e0 03             	shl    $0x3,%eax
f010acf4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010acf7:	83 ec 04             	sub    $0x4,%esp
f010acfa:	6a 08                	push   $0x8
f010acfc:	ff 75 0c             	pushl  0xc(%ebp)
f010acff:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad02:	e8 61 ca 00 00       	call   f0117768 <ide_write>
f010ad07:	83 c4 10             	add    $0x10,%esp
f010ad0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010ad0d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ad11:	74 14                	je     f010ad27 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010ad13:	83 ec 04             	sub    $0x4,%esp
f010ad16:	68 00 ab 11 f0       	push   $0xf011ab00
f010ad1b:	6a 37                	push   $0x37
f010ad1d:	68 17 ab 11 f0       	push   $0xf011ab17
f010ad22:	e8 4f 54 ff ff       	call   f0100176 <_panic>
	return success;
f010ad27:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010ad2a:	c9                   	leave  
f010ad2b:	c3                   	ret    

f010ad2c <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010ad2c:	55                   	push   %ebp
f010ad2d:	89 e5                	mov    %esp,%ebp
f010ad2f:	53                   	push   %ebx
f010ad30:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010ad33:	c7 05 e4 b6 54 f0 00 	movl   $0x0,0xf054b6e4
f010ad3a:	00 00 00 
f010ad3d:	c7 05 e8 b6 54 f0 00 	movl   $0x0,0xf054b6e8
f010ad44:	00 00 00 
f010ad47:	c7 05 f0 b6 54 f0 00 	movl   $0x0,0xf054b6f0
f010ad4e:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010ad51:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010ad58:	e9 bc 00 00 00       	jmp    f010ae19 <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010ad5d:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010ad63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad66:	89 d0                	mov    %edx,%eax
f010ad68:	01 c0                	add    %eax,%eax
f010ad6a:	01 d0                	add    %edx,%eax
f010ad6c:	c1 e0 03             	shl    $0x3,%eax
f010ad6f:	01 c8                	add    %ecx,%eax
f010ad71:	83 ec 0c             	sub    $0xc,%esp
f010ad74:	50                   	push   %eax
f010ad75:	e8 01 8c ff ff       	call   f010397b <initialize_frame_info>
f010ad7a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010ad7d:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010ad83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad86:	89 d0                	mov    %edx,%eax
f010ad88:	01 c0                	add    %eax,%eax
f010ad8a:	01 d0                	add    %edx,%eax
f010ad8c:	c1 e0 03             	shl    $0x3,%eax
f010ad8f:	01 c8                	add    %ecx,%eax
f010ad91:	8b 15 e4 b6 54 f0    	mov    0xf054b6e4,%edx
f010ad97:	89 10                	mov    %edx,(%eax)
f010ad99:	8b 00                	mov    (%eax),%eax
f010ad9b:	85 c0                	test   %eax,%eax
f010ad9d:	74 1f                	je     f010adbe <initialize_disk_page_file+0x92>
f010ad9f:	8b 15 e4 b6 54 f0    	mov    0xf054b6e4,%edx
f010ada5:	8b 1d b0 b6 54 f0    	mov    0xf054b6b0,%ebx
f010adab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010adae:	89 c8                	mov    %ecx,%eax
f010adb0:	01 c0                	add    %eax,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	c1 e0 03             	shl    $0x3,%eax
f010adb7:	01 d8                	add    %ebx,%eax
f010adb9:	89 42 04             	mov    %eax,0x4(%edx)
f010adbc:	eb 19                	jmp    f010add7 <initialize_disk_page_file+0xab>
f010adbe:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010adc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adc7:	89 d0                	mov    %edx,%eax
f010adc9:	01 c0                	add    %eax,%eax
f010adcb:	01 d0                	add    %edx,%eax
f010adcd:	c1 e0 03             	shl    $0x3,%eax
f010add0:	01 c8                	add    %ecx,%eax
f010add2:	a3 e8 b6 54 f0       	mov    %eax,0xf054b6e8
f010add7:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010addd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ade0:	89 d0                	mov    %edx,%eax
f010ade2:	01 c0                	add    %eax,%eax
f010ade4:	01 d0                	add    %edx,%eax
f010ade6:	c1 e0 03             	shl    $0x3,%eax
f010ade9:	01 c8                	add    %ecx,%eax
f010adeb:	a3 e4 b6 54 f0       	mov    %eax,0xf054b6e4
f010adf0:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010adf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adf9:	89 d0                	mov    %edx,%eax
f010adfb:	01 c0                	add    %eax,%eax
f010adfd:	01 d0                	add    %edx,%eax
f010adff:	c1 e0 03             	shl    $0x3,%eax
f010ae02:	01 c8                	add    %ecx,%eax
f010ae04:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae0b:	a1 f0 b6 54 f0       	mov    0xf054b6f0,%eax
f010ae10:	40                   	inc    %eax
f010ae11:	a3 f0 b6 54 f0       	mov    %eax,0xf054b6f0
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010ae16:	ff 45 f4             	incl   -0xc(%ebp)
f010ae19:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010ae20:	0f 8e 37 ff ff ff    	jle    f010ad5d <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010ae26:	90                   	nop
f010ae27:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ae2a:	c9                   	leave  
f010ae2b:	c3                   	ret    

f010ae2c <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010ae2c:	55                   	push   %ebp
f010ae2d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010ae2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae32:	8b 15 b0 b6 54 f0    	mov    0xf054b6b0,%edx
f010ae38:	29 d0                	sub    %edx,%eax
f010ae3a:	c1 f8 03             	sar    $0x3,%eax
f010ae3d:	89 c2                	mov    %eax,%edx
f010ae3f:	89 d0                	mov    %edx,%eax
f010ae41:	c1 e0 02             	shl    $0x2,%eax
f010ae44:	01 d0                	add    %edx,%eax
f010ae46:	c1 e0 02             	shl    $0x2,%eax
f010ae49:	01 d0                	add    %edx,%eax
f010ae4b:	c1 e0 02             	shl    $0x2,%eax
f010ae4e:	01 d0                	add    %edx,%eax
f010ae50:	89 c1                	mov    %eax,%ecx
f010ae52:	c1 e1 08             	shl    $0x8,%ecx
f010ae55:	01 c8                	add    %ecx,%eax
f010ae57:	89 c1                	mov    %eax,%ecx
f010ae59:	c1 e1 10             	shl    $0x10,%ecx
f010ae5c:	01 c8                	add    %ecx,%eax
f010ae5e:	01 c0                	add    %eax,%eax
f010ae60:	01 d0                	add    %edx,%eax
}
f010ae62:	5d                   	pop    %ebp
f010ae63:	c3                   	ret    

f010ae64 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010ae64:	55                   	push   %ebp
f010ae65:	89 e5                	mov    %esp,%ebp
f010ae67:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010ae6a:	a1 e4 b6 54 f0       	mov    0xf054b6e4,%eax
f010ae6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010ae72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae76:	75 0a                	jne    f010ae82 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010ae78:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010ae7d:	e9 8d 00 00 00       	jmp    f010af0f <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010ae82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae85:	8b 00                	mov    (%eax),%eax
f010ae87:	85 c0                	test   %eax,%eax
f010ae89:	74 10                	je     f010ae9b <allocate_disk_frame+0x37>
f010ae8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae8e:	8b 00                	mov    (%eax),%eax
f010ae90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae93:	8b 52 04             	mov    0x4(%edx),%edx
f010ae96:	89 50 04             	mov    %edx,0x4(%eax)
f010ae99:	eb 0b                	jmp    f010aea6 <allocate_disk_frame+0x42>
f010ae9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae9e:	8b 40 04             	mov    0x4(%eax),%eax
f010aea1:	a3 e8 b6 54 f0       	mov    %eax,0xf054b6e8
f010aea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aea9:	8b 40 04             	mov    0x4(%eax),%eax
f010aeac:	85 c0                	test   %eax,%eax
f010aeae:	74 0f                	je     f010aebf <allocate_disk_frame+0x5b>
f010aeb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aeb3:	8b 40 04             	mov    0x4(%eax),%eax
f010aeb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeb9:	8b 12                	mov    (%edx),%edx
f010aebb:	89 10                	mov    %edx,(%eax)
f010aebd:	eb 0a                	jmp    f010aec9 <allocate_disk_frame+0x65>
f010aebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aec2:	8b 00                	mov    (%eax),%eax
f010aec4:	a3 e4 b6 54 f0       	mov    %eax,0xf054b6e4
f010aec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aecc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010aed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aed5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010aedc:	a1 f0 b6 54 f0       	mov    0xf054b6f0,%eax
f010aee1:	48                   	dec    %eax
f010aee2:	a3 f0 b6 54 f0       	mov    %eax,0xf054b6f0
	initialize_frame_info(ptr_frame_info);
f010aee7:	83 ec 0c             	sub    $0xc,%esp
f010aeea:	ff 75 f4             	pushl  -0xc(%ebp)
f010aeed:	e8 89 8a ff ff       	call   f010397b <initialize_frame_info>
f010aef2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010aef5:	83 ec 0c             	sub    $0xc,%esp
f010aef8:	ff 75 f4             	pushl  -0xc(%ebp)
f010aefb:	e8 2c ff ff ff       	call   f010ae2c <to_disk_frame_number>
f010af00:	83 c4 10             	add    $0x10,%esp
f010af03:	89 c2                	mov    %eax,%edx
f010af05:	8b 45 08             	mov    0x8(%ebp),%eax
f010af08:	89 10                	mov    %edx,(%eax)
	return 0;
f010af0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010af0f:	c9                   	leave  
f010af10:	c3                   	ret    

f010af11 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010af11:	55                   	push   %ebp
f010af12:	89 e5                	mov    %esp,%ebp
f010af14:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010af15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af19:	0f 84 9b 00 00 00    	je     f010afba <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010af1f:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010af25:	8b 55 08             	mov    0x8(%ebp),%edx
f010af28:	89 d0                	mov    %edx,%eax
f010af2a:	01 c0                	add    %eax,%eax
f010af2c:	01 d0                	add    %edx,%eax
f010af2e:	c1 e0 03             	shl    $0x3,%eax
f010af31:	01 c8                	add    %ecx,%eax
f010af33:	8b 15 e4 b6 54 f0    	mov    0xf054b6e4,%edx
f010af39:	89 10                	mov    %edx,(%eax)
f010af3b:	8b 00                	mov    (%eax),%eax
f010af3d:	85 c0                	test   %eax,%eax
f010af3f:	74 1f                	je     f010af60 <free_disk_frame+0x4f>
f010af41:	8b 15 e4 b6 54 f0    	mov    0xf054b6e4,%edx
f010af47:	8b 1d b0 b6 54 f0    	mov    0xf054b6b0,%ebx
f010af4d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af50:	89 c8                	mov    %ecx,%eax
f010af52:	01 c0                	add    %eax,%eax
f010af54:	01 c8                	add    %ecx,%eax
f010af56:	c1 e0 03             	shl    $0x3,%eax
f010af59:	01 d8                	add    %ebx,%eax
f010af5b:	89 42 04             	mov    %eax,0x4(%edx)
f010af5e:	eb 19                	jmp    f010af79 <free_disk_frame+0x68>
f010af60:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010af66:	8b 55 08             	mov    0x8(%ebp),%edx
f010af69:	89 d0                	mov    %edx,%eax
f010af6b:	01 c0                	add    %eax,%eax
f010af6d:	01 d0                	add    %edx,%eax
f010af6f:	c1 e0 03             	shl    $0x3,%eax
f010af72:	01 c8                	add    %ecx,%eax
f010af74:	a3 e8 b6 54 f0       	mov    %eax,0xf054b6e8
f010af79:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010af7f:	8b 55 08             	mov    0x8(%ebp),%edx
f010af82:	89 d0                	mov    %edx,%eax
f010af84:	01 c0                	add    %eax,%eax
f010af86:	01 d0                	add    %edx,%eax
f010af88:	c1 e0 03             	shl    $0x3,%eax
f010af8b:	01 c8                	add    %ecx,%eax
f010af8d:	a3 e4 b6 54 f0       	mov    %eax,0xf054b6e4
f010af92:	8b 0d b0 b6 54 f0    	mov    0xf054b6b0,%ecx
f010af98:	8b 55 08             	mov    0x8(%ebp),%edx
f010af9b:	89 d0                	mov    %edx,%eax
f010af9d:	01 c0                	add    %eax,%eax
f010af9f:	01 d0                	add    %edx,%eax
f010afa1:	c1 e0 03             	shl    $0x3,%eax
f010afa4:	01 c8                	add    %ecx,%eax
f010afa6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010afad:	a1 f0 b6 54 f0       	mov    0xf054b6f0,%eax
f010afb2:	40                   	inc    %eax
f010afb3:	a3 f0 b6 54 f0       	mov    %eax,0xf054b6f0
f010afb8:	eb 01                	jmp    f010afbb <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010afba:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010afbb:	5b                   	pop    %ebx
f010afbc:	5d                   	pop    %ebp
f010afbd:	c3                   	ret    

f010afbe <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010afbe:	55                   	push   %ebp
f010afbf:	89 e5                	mov    %esp,%ebp
f010afc1:	53                   	push   %ebx
f010afc2:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010afc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc8:	c1 e8 16             	shr    $0x16,%eax
f010afcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010afd2:	8b 45 08             	mov    0x8(%ebp),%eax
f010afd5:	01 d0                	add    %edx,%eax
f010afd7:	8b 00                	mov    (%eax),%eax
f010afd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010afdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afdf:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010afe4:	77 1d                	ja     f010b003 <get_disk_page_table+0x45>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010afe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afe9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010afee:	83 ec 0c             	sub    $0xc,%esp
f010aff1:	50                   	push   %eax
f010aff2:	e8 a0 0b 00 00       	call   f010bb97 <kheap_virtual_address>
f010aff7:	83 c4 10             	add    $0x10,%esp
f010affa:	89 c2                	mov    %eax,%edx
f010affc:	8b 45 14             	mov    0x14(%ebp),%eax
f010afff:	89 10                	mov    %edx,(%eax)
f010b001:	eb 44                	jmp    f010b047 <get_disk_page_table+0x89>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010b003:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b006:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b00b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010b00e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b011:	c1 e8 0c             	shr    $0xc,%eax
f010b014:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b017:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f010b01c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010b01f:	72 17                	jb     f010b038 <get_disk_page_table+0x7a>
f010b021:	ff 75 f0             	pushl  -0x10(%ebp)
f010b024:	68 2c ab 11 f0       	push   $0xf011ab2c
f010b029:	68 9b 00 00 00       	push   $0x9b
f010b02e:	68 17 ab 11 f0       	push   $0xf011ab17
f010b033:	e8 3e 51 ff ff       	call   f0100176 <_panic>
f010b038:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b03b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010b040:	89 c2                	mov    %eax,%edx
f010b042:	8b 45 14             	mov    0x14(%ebp),%eax
f010b045:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010b047:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b04b:	0f 85 80 00 00 00    	jne    f010b0d1 <get_disk_page_table+0x113>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010b051:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010b055:	74 6a                	je     f010b0c1 <get_disk_page_table+0x103>
		{

			if(USE_KHEAP)
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010b057:	83 ec 0c             	sub    $0xc,%esp
f010b05a:	68 00 10 00 00       	push   $0x1000
f010b05f:	e8 8b 09 00 00       	call   f010b9ef <kmalloc>
f010b064:	83 c4 10             	add    $0x10,%esp
f010b067:	89 c2                	mov    %eax,%edx
f010b069:	8b 45 14             	mov    0x14(%ebp),%eax
f010b06c:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f010b06e:	8b 45 14             	mov    0x14(%ebp),%eax
f010b071:	8b 00                	mov    (%eax),%eax
f010b073:	85 c0                	test   %eax,%eax
f010b075:	75 07                	jne    f010b07e <get_disk_page_table+0xc0>
				{
					return E_NO_VM;
f010b077:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b07c:	eb 58                	jmp    f010b0d6 <get_disk_page_table+0x118>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f010b07e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b081:	c1 e8 16             	shr    $0x16,%eax
f010b084:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010b091:	8b 45 14             	mov    0x14(%ebp),%eax
f010b094:	8b 00                	mov    (%eax),%eax
f010b096:	83 ec 0c             	sub    $0xc,%esp
f010b099:	50                   	push   %eax
f010b09a:	e8 5a 0b 00 00       	call   f010bbf9 <kheap_physical_address>
f010b09f:	83 c4 10             	add    $0x10,%esp
f010b0a2:	83 c8 01             	or     $0x1,%eax
f010b0a5:	89 03                	mov    %eax,(%ebx)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010b0a7:	8b 45 14             	mov    0x14(%ebp),%eax
f010b0aa:	8b 00                	mov    (%eax),%eax
f010b0ac:	83 ec 04             	sub    $0x4,%esp
f010b0af:	68 00 10 00 00       	push   $0x1000
f010b0b4:	6a 00                	push   $0x0
f010b0b6:	50                   	push   %eax
f010b0b7:	e8 07 c0 00 00       	call   f01170c3 <memset>
f010b0bc:	83 c4 10             	add    $0x10,%esp
f010b0bf:	eb 10                	jmp    f010b0d1 <get_disk_page_table+0x113>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010b0c1:	8b 45 14             	mov    0x14(%ebp),%eax
f010b0c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010b0ca:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0cf:	eb 05                	jmp    f010b0d6 <get_disk_page_table+0x118>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010b0d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b0d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b0d9:	c9                   	leave  
f010b0da:	c3                   	ret    

f010b0db <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010b0db:	55                   	push   %ebp
f010b0dc:	89 e5                	mov    %esp,%ebp
f010b0de:	83 ec 28             	sub    $0x28,%esp
f010b0e1:	8b 45 10             	mov    0x10(%ebp),%eax
f010b0e4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010b0e7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010b0eb:	74 1c                	je     f010b109 <pf_add_empty_env_page+0x2e>
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010b0ed:	a1 c8 b6 54 f0       	mov    0xf054b6c8,%eax
f010b0f2:	83 ec 04             	sub    $0x4,%esp
f010b0f5:	50                   	push   %eax
f010b0f6:	ff 75 0c             	pushl  0xc(%ebp)
f010b0f9:	ff 75 08             	pushl  0x8(%ebp)
f010b0fc:	e8 b3 00 00 00       	call   f010b1b4 <pf_add_env_page>
f010b101:	83 c4 10             	add    $0x10,%esp
f010b104:	e9 a9 00 00 00       	jmp    f010b1b2 <pf_add_empty_env_page+0xd7>

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b109:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b110:	76 19                	jbe    f010b12b <pf_add_empty_env_page+0x50>
f010b112:	68 5c ab 11 f0       	push   $0xf011ab5c
f010b117:	68 82 ab 11 f0       	push   $0xf011ab82
f010b11c:	68 d3 00 00 00       	push   $0xd3
f010b121:	68 17 ab 11 f0       	push   $0xf011ab17
f010b126:	e8 4b 50 ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b12b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12e:	83 c0 64             	add    $0x64,%eax
f010b131:	83 ec 08             	sub    $0x8,%esp
f010b134:	50                   	push   %eax
f010b135:	ff 75 08             	pushl  0x8(%ebp)
f010b138:	e8 96 04 00 00       	call   f010b5d3 <get_disk_page_directory>
f010b13d:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b140:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b143:	8b 45 08             	mov    0x8(%ebp),%eax
f010b146:	8b 40 64             	mov    0x64(%eax),%eax
f010b149:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010b14c:	51                   	push   %ecx
f010b14d:	6a 01                	push   $0x1
f010b14f:	52                   	push   %edx
f010b150:	50                   	push   %eax
f010b151:	e8 68 fe ff ff       	call   f010afbe <get_disk_page_table>
f010b156:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b159:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b15c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b15f:	c1 ea 0c             	shr    $0xc,%edx
f010b162:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b168:	c1 e2 02             	shl    $0x2,%edx
f010b16b:	01 d0                	add    %edx,%eax
f010b16d:	8b 00                	mov    (%eax),%eax
f010b16f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010b172:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b175:	85 c0                	test   %eax,%eax
f010b177:	75 34                	jne    f010b1ad <pf_add_empty_env_page+0xd2>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b179:	83 ec 0c             	sub    $0xc,%esp
f010b17c:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b17f:	50                   	push   %eax
f010b180:	e8 df fc ff ff       	call   f010ae64 <allocate_disk_frame>
f010b185:	83 c4 10             	add    $0x10,%esp
f010b188:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b18b:	75 07                	jne    f010b194 <pf_add_empty_env_page+0xb9>
f010b18d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b192:	eb 1e                	jmp    f010b1b2 <pf_add_empty_env_page+0xd7>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b194:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b197:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b19a:	c1 ea 0c             	shr    $0xc,%edx
f010b19d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b1a3:	c1 e2 02             	shl    $0x2,%edx
f010b1a6:	01 c2                	add    %eax,%edx
f010b1a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1ab:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010b1ad:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010b1b2:	c9                   	leave  
f010b1b3:	c3                   	ret    

f010b1b4 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010b1b4:	55                   	push   %ebp
f010b1b5:	89 e5                	mov    %esp,%ebp
f010b1b7:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b1ba:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b1c1:	76 19                	jbe    f010b1dc <pf_add_env_page+0x28>
f010b1c3:	68 5c ab 11 f0       	push   $0xf011ab5c
f010b1c8:	68 82 ab 11 f0       	push   $0xf011ab82
f010b1cd:	68 e8 00 00 00       	push   $0xe8
f010b1d2:	68 17 ab 11 f0       	push   $0xf011ab17
f010b1d7:	e8 9a 4f ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b1dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1df:	83 c0 64             	add    $0x64,%eax
f010b1e2:	83 ec 08             	sub    $0x8,%esp
f010b1e5:	50                   	push   %eax
f010b1e6:	ff 75 08             	pushl  0x8(%ebp)
f010b1e9:	e8 e5 03 00 00       	call   f010b5d3 <get_disk_page_directory>
f010b1ee:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b1f1:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1f7:	8b 40 64             	mov    0x64(%eax),%eax
f010b1fa:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010b1fd:	51                   	push   %ecx
f010b1fe:	6a 01                	push   $0x1
f010b200:	52                   	push   %edx
f010b201:	50                   	push   %eax
f010b202:	e8 b7 fd ff ff       	call   f010afbe <get_disk_page_table>
f010b207:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b20a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b20d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b210:	c1 ea 0c             	shr    $0xc,%edx
f010b213:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b219:	c1 e2 02             	shl    $0x2,%edx
f010b21c:	01 d0                	add    %edx,%eax
f010b21e:	8b 00                	mov    (%eax),%eax
f010b220:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010b223:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b226:	85 c0                	test   %eax,%eax
f010b228:	75 34                	jne    f010b25e <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b22a:	83 ec 0c             	sub    $0xc,%esp
f010b22d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b230:	50                   	push   %eax
f010b231:	e8 2e fc ff ff       	call   f010ae64 <allocate_disk_frame>
f010b236:	83 c4 10             	add    $0x10,%esp
f010b239:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b23c:	75 07                	jne    f010b245 <pf_add_env_page+0x91>
f010b23e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b243:	eb 31                	jmp    f010b276 <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b245:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b248:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b24b:	c1 ea 0c             	shr    $0xc,%edx
f010b24e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b254:	c1 e2 02             	shl    $0x2,%edx
f010b257:	01 c2                	add    %eax,%edx
f010b259:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b25c:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010b25e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b261:	83 ec 08             	sub    $0x8,%esp
f010b264:	ff 75 10             	pushl  0x10(%ebp)
f010b267:	50                   	push   %eax
f010b268:	e8 76 fa ff ff       	call   f010ace3 <write_disk_page>
f010b26d:	83 c4 10             	add    $0x10,%esp
f010b270:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010b273:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b276:	c9                   	leave  
f010b277:	c3                   	ret    

f010b278 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010b278:	55                   	push   %ebp
f010b279:	89 e5                	mov    %esp,%ebp
f010b27b:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010b27e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b281:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010b286:	76 19                	jbe    f010b2a1 <pf_update_env_page+0x29>
f010b288:	68 5c ab 11 f0       	push   $0xf011ab5c
f010b28d:	68 82 ab 11 f0       	push   $0xf011ab82
f010b292:	68 09 01 00 00       	push   $0x109
f010b297:	68 17 ab 11 f0       	push   $0xf011ab17
f010b29c:	e8 d5 4e ff ff       	call   f0100176 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2a4:	83 c0 64             	add    $0x64,%eax
f010b2a7:	83 ec 08             	sub    $0x8,%esp
f010b2aa:	50                   	push   %eax
f010b2ab:	ff 75 08             	pushl  0x8(%ebp)
f010b2ae:	e8 20 03 00 00       	call   f010b5d3 <get_disk_page_directory>
f010b2b3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010b2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2b9:	8b 40 64             	mov    0x64(%eax),%eax
f010b2bc:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010b2bf:	52                   	push   %edx
f010b2c0:	6a 00                	push   $0x0
f010b2c2:	ff 75 0c             	pushl  0xc(%ebp)
f010b2c5:	50                   	push   %eax
f010b2c6:	e8 f3 fc ff ff       	call   f010afbe <get_disk_page_table>
f010b2cb:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b2ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b2d1:	85 c0                	test   %eax,%eax
f010b2d3:	75 0a                	jne    f010b2df <pf_update_env_page+0x67>
f010b2d5:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b2da:	e9 96 00 00 00       	jmp    f010b375 <pf_update_env_page+0xfd>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b2df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b2e2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b2e5:	c1 ea 0c             	shr    $0xc,%edx
f010b2e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b2ee:	c1 e2 02             	shl    $0x2,%edx
f010b2f1:	01 d0                	add    %edx,%eax
f010b2f3:	8b 00                	mov    (%eax),%eax
f010b2f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b2f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2fc:	75 07                	jne    f010b305 <pf_update_env_page+0x8d>
f010b2fe:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b303:	eb 70                	jmp    f010b375 <pf_update_env_page+0xfd>
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
			//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
			//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, (void*)USER_LIMIT, 0);
f010b305:	8b 45 08             	mov    0x8(%ebp),%eax
f010b308:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b30b:	6a 00                	push   $0x0
f010b30d:	68 00 00 80 ef       	push   $0xef800000
f010b312:	ff 75 10             	pushl  0x10(%ebp)
f010b315:	50                   	push   %eax
f010b316:	e8 ef 89 ff ff       	call   f0103d0a <map_frame>
f010b31b:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f010b31e:	c7 45 f0 00 00 80 ef 	movl   $0xef800000,-0x10(%ebp)
f010b325:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b328:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b32d:	83 ec 08             	sub    $0x8,%esp
f010b330:	50                   	push   %eax
f010b331:	ff 75 f4             	pushl  -0xc(%ebp)
f010b334:	e8 aa f9 ff ff       	call   f010ace3 <write_disk_page>
f010b339:	83 c4 10             	add    $0x10,%esp
f010b33c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f010b33f:	8b 45 10             	mov    0x10(%ebp),%eax
f010b342:	8b 40 08             	mov    0x8(%eax),%eax
f010b345:	40                   	inc    %eax
f010b346:	8b 55 10             	mov    0x10(%ebp),%edx
f010b349:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, (void*)USER_LIMIT);
f010b34d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b350:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b353:	83 ec 08             	sub    $0x8,%esp
f010b356:	68 00 00 80 ef       	push   $0xef800000
f010b35b:	50                   	push   %eax
f010b35c:	e8 d8 8a ff ff       	call   f0103e39 <unmap_frame>
f010b361:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f010b364:	8b 45 10             	mov    0x10(%ebp),%eax
f010b367:	8b 40 08             	mov    0x8(%eax),%eax
f010b36a:	48                   	dec    %eax
f010b36b:	8b 55 10             	mov    0x10(%ebp),%edx
f010b36e:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
	return ret;
f010b372:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010b375:	c9                   	leave  
f010b376:	c3                   	ret    

f010b377 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010b377:	55                   	push   %ebp
f010b378:	89 e5                	mov    %esp,%ebp
f010b37a:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010b37d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b380:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b383:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b386:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b38b:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b38e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b391:	8b 40 64             	mov    0x64(%eax),%eax
f010b394:	85 c0                	test   %eax,%eax
f010b396:	75 07                	jne    f010b39f <pf_read_env_page+0x28>
f010b398:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b39d:	eb 79                	jmp    f010b418 <pf_read_env_page+0xa1>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010b39f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3a2:	8b 40 64             	mov    0x64(%eax),%eax
f010b3a5:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010b3a8:	52                   	push   %edx
f010b3a9:	6a 00                	push   $0x0
f010b3ab:	ff 75 0c             	pushl  0xc(%ebp)
f010b3ae:	50                   	push   %eax
f010b3af:	e8 0a fc ff ff       	call   f010afbe <get_disk_page_table>
f010b3b4:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b3b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3ba:	85 c0                	test   %eax,%eax
f010b3bc:	75 07                	jne    f010b3c5 <pf_read_env_page+0x4e>
f010b3be:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b3c3:	eb 53                	jmp    f010b418 <pf_read_env_page+0xa1>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b3c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3c8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b3cb:	c1 ea 0c             	shr    $0xc,%edx
f010b3ce:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b3d4:	c1 e2 02             	shl    $0x2,%edx
f010b3d7:	01 d0                	add    %edx,%eax
f010b3d9:	8b 00                	mov    (%eax),%eax
f010b3db:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010b3de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b3e2:	75 07                	jne    f010b3eb <pf_read_env_page+0x74>
f010b3e4:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010b3e9:	eb 2d                	jmp    f010b418 <pf_read_env_page+0xa1>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010b3eb:	83 ec 08             	sub    $0x8,%esp
f010b3ee:	ff 75 0c             	pushl  0xc(%ebp)
f010b3f1:	ff 75 f0             	pushl  -0x10(%ebp)
f010b3f4:	e8 bb f8 ff ff       	call   f010acb4 <read_disk_page>
f010b3f9:	83 c4 10             	add    $0x10,%esp
f010b3fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
f010b3ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b402:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f010b407:	6a 40                	push   $0x40
f010b409:	6a 00                	push   $0x0
f010b40b:	52                   	push   %edx
f010b40c:	50                   	push   %eax
f010b40d:	e8 95 98 ff ff       	call   f0104ca7 <pt_set_page_permissions>
f010b412:	83 c4 10             	add    $0x10,%esp

	return disk_read_error;
f010b415:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010b418:	c9                   	leave  
f010b419:	c3                   	ret    

f010b41a <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010b41a:	55                   	push   %ebp
f010b41b:	89 e5                	mov    %esp,%ebp
f010b41d:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010b420:	8b 45 08             	mov    0x8(%ebp),%eax
f010b423:	8b 40 64             	mov    0x64(%eax),%eax
f010b426:	85 c0                	test   %eax,%eax
f010b428:	74 63                	je     f010b48d <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010b42a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b42d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b430:	8b 40 64             	mov    0x64(%eax),%eax
f010b433:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010b436:	51                   	push   %ecx
f010b437:	6a 00                	push   $0x0
f010b439:	52                   	push   %edx
f010b43a:	50                   	push   %eax
f010b43b:	e8 7e fb ff ff       	call   f010afbe <get_disk_page_table>
f010b440:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010b443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b446:	85 c0                	test   %eax,%eax
f010b448:	74 46                	je     f010b490 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b44a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b44d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b450:	c1 ea 0c             	shr    $0xc,%edx
f010b453:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b459:	c1 e2 02             	shl    $0x2,%edx
f010b45c:	01 d0                	add    %edx,%eax
f010b45e:	8b 00                	mov    (%eax),%eax
f010b460:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010b463:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b466:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b469:	c1 ea 0c             	shr    $0xc,%edx
f010b46c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b472:	c1 e2 02             	shl    $0x2,%edx
f010b475:	01 d0                	add    %edx,%eax
f010b477:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010b47d:	83 ec 0c             	sub    $0xc,%esp
f010b480:	ff 75 f4             	pushl  -0xc(%ebp)
f010b483:	e8 89 fa ff ff       	call   f010af11 <free_disk_frame>
f010b488:	83 c4 10             	add    $0x10,%esp
f010b48b:	eb 04                	jmp    f010b491 <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010b48d:	90                   	nop
f010b48e:	eb 01                	jmp    f010b491 <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010b490:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010b491:	c9                   	leave  
f010b492:	c3                   	ret    

f010b493 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010b493:	55                   	push   %ebp
f010b494:	89 e5                	mov    %esp,%ebp
f010b496:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b499:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4a0:	e9 b8 00 00 00       	jmp    f010b55d <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010b4a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4a8:	8b 40 64             	mov    0x64(%eax),%eax
f010b4ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4ae:	c1 e2 02             	shl    $0x2,%edx
f010b4b1:	01 d0                	add    %edx,%eax
f010b4b3:	8b 00                	mov    (%eax),%eax
f010b4b5:	83 e0 01             	and    $0x1,%eax
f010b4b8:	85 c0                	test   %eax,%eax
f010b4ba:	0f 84 99 00 00 00    	je     f010b559 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010b4c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4c3:	8b 40 64             	mov    0x64(%eax),%eax
f010b4c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4c9:	c1 e2 02             	shl    $0x2,%edx
f010b4cc:	01 d0                	add    %edx,%eax
f010b4ce:	8b 00                	mov    (%eax),%eax
f010b4d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b4d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010b4d8:	83 ec 0c             	sub    $0xc,%esp
f010b4db:	ff 75 ec             	pushl  -0x14(%ebp)
f010b4de:	e8 b4 06 00 00       	call   f010bb97 <kheap_virtual_address>
f010b4e3:	83 c4 10             	add    $0x10,%esp
f010b4e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010b4e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b4f0:	eb 3a                	jmp    f010b52c <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010b4f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b4f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b4fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b4ff:	01 d0                	add    %edx,%eax
f010b501:	8b 00                	mov    (%eax),%eax
f010b503:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f010b506:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b509:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b513:	01 d0                	add    %edx,%eax
f010b515:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010b51b:	83 ec 0c             	sub    $0xc,%esp
f010b51e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010b521:	e8 eb f9 ff ff       	call   f010af11 <free_disk_frame>
f010b526:	83 c4 10             	add    $0x10,%esp
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010b529:	ff 45 f0             	incl   -0x10(%ebp)
f010b52c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010b533:	76 bd                	jbe    f010b4f2 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010b535:	8b 45 08             	mov    0x8(%ebp),%eax
f010b538:	8b 40 64             	mov    0x64(%eax),%eax
f010b53b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b53e:	c1 e2 02             	shl    $0x2,%edx
f010b541:	01 d0                	add    %edx,%eax
f010b543:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(USE_KHEAP)
		{
			kfree(pt);
f010b549:	83 ec 0c             	sub    $0xc,%esp
f010b54c:	ff 75 e8             	pushl  -0x18(%ebp)
f010b54f:	e8 b4 05 00 00       	call   f010bb08 <kfree>
f010b554:	83 c4 10             	add    $0x10,%esp
f010b557:	eb 01                	jmp    f010b55a <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010b559:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b55a:	ff 45 f4             	incl   -0xc(%ebp)
f010b55d:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010b564:	0f 86 3b ff ff ff    	jbe    f010b4a5 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_pgdir);
f010b56a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b56d:	8b 40 64             	mov    0x64(%eax),%eax
f010b570:	83 ec 0c             	sub    $0xc,%esp
f010b573:	50                   	push   %eax
f010b574:	e8 8f 05 00 00       	call   f010bb08 <kfree>
f010b579:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
	ptr_env->disk_env_pgdir = 0;
f010b57c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b57f:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010b586:	8b 45 08             	mov    0x8(%ebp),%eax
f010b589:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010b590:	8b 45 08             	mov    0x8(%ebp),%eax
f010b593:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b596:	85 c0                	test   %eax,%eax
f010b598:	74 36                	je     f010b5d0 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010b59a:	83 ec 0c             	sub    $0xc,%esp
f010b59d:	ff 75 08             	pushl  0x8(%ebp)
f010b5a0:	e8 05 03 00 00       	call   f010b8aa <__pf_remove_env_all_tables>
f010b5a5:	83 c4 10             	add    $0x10,%esp


	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_tabledir);
f010b5a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5ab:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b5ae:	83 ec 0c             	sub    $0xc,%esp
f010b5b1:	50                   	push   %eax
f010b5b2:	e8 51 05 00 00       	call   f010bb08 <kfree>
f010b5b7:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
f010b5ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5bd:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010b5c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5c7:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010b5ce:	eb 01                	jmp    f010b5d1 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010b5d0:	90                   	nop
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010b5d1:	c9                   	leave  
f010b5d2:	c3                   	ret    

f010b5d3 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010b5d3:	55                   	push   %ebp
f010b5d4:	89 e5                	mov    %esp,%ebp
f010b5d6:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010b5d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5dc:	8b 50 64             	mov    0x64(%eax),%edx
f010b5df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b5e2:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010b5e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b5e7:	8b 00                	mov    (%eax),%eax
f010b5e9:	85 c0                	test   %eax,%eax
f010b5eb:	75 58                	jne    f010b645 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f010b5ed:	83 ec 0c             	sub    $0xc,%esp
f010b5f0:	68 00 10 00 00       	push   $0x1000
f010b5f5:	e8 f5 03 00 00       	call   f010b9ef <kmalloc>
f010b5fa:	83 c4 10             	add    $0x10,%esp
f010b5fd:	89 c2                	mov    %eax,%edx
f010b5ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b602:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f010b604:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b607:	8b 00                	mov    (%eax),%eax
f010b609:	85 c0                	test   %eax,%eax
f010b60b:	75 07                	jne    f010b614 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f010b60d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b612:	eb 36                	jmp    f010b64a <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f010b614:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b617:	8b 00                	mov    (%eax),%eax
f010b619:	83 ec 0c             	sub    $0xc,%esp
f010b61c:	50                   	push   %eax
f010b61d:	e8 d7 05 00 00       	call   f010bbf9 <kheap_physical_address>
f010b622:	83 c4 10             	add    $0x10,%esp
f010b625:	89 c2                	mov    %eax,%edx
f010b627:	8b 45 08             	mov    0x8(%ebp),%eax
f010b62a:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010b62d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b630:	8b 00                	mov    (%eax),%eax
f010b632:	83 ec 04             	sub    $0x4,%esp
f010b635:	68 00 10 00 00       	push   $0x1000
f010b63a:	6a 00                	push   $0x0
f010b63c:	50                   	push   %eax
f010b63d:	e8 81 ba 00 00       	call   f01170c3 <memset>
f010b642:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010b645:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b64a:	c9                   	leave  
f010b64b:	c3                   	ret    

f010b64c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010b64c:	55                   	push   %ebp
f010b64d:	89 e5                	mov    %esp,%ebp
f010b64f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010b652:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010b659:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b660:	eb 78                	jmp    f010b6da <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010b662:	8b 45 08             	mov    0x8(%ebp),%eax
f010b665:	8b 40 64             	mov    0x64(%eax),%eax
f010b668:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b66b:	c1 e2 02             	shl    $0x2,%edx
f010b66e:	01 d0                	add    %edx,%eax
f010b670:	8b 00                	mov    (%eax),%eax
f010b672:	83 e0 01             	and    $0x1,%eax
f010b675:	85 c0                	test   %eax,%eax
f010b677:	74 5d                	je     f010b6d6 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010b679:	8b 45 08             	mov    0x8(%ebp),%eax
f010b67c:	8b 40 64             	mov    0x64(%eax),%eax
f010b67f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b682:	c1 e2 02             	shl    $0x2,%edx
f010b685:	01 d0                	add    %edx,%eax
f010b687:	8b 00                	mov    (%eax),%eax
f010b689:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b68e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010b691:	83 ec 0c             	sub    $0xc,%esp
f010b694:	ff 75 e8             	pushl  -0x18(%ebp)
f010b697:	e8 fb 04 00 00       	call   f010bb97 <kheap_virtual_address>
f010b69c:	83 c4 10             	add    $0x10,%esp
f010b69f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010b6a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010b6a9:	eb 20                	jmp    f010b6cb <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010b6ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b6ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b6b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b6b8:	01 d0                	add    %edx,%eax
f010b6ba:	8b 00                	mov    (%eax),%eax
f010b6bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f010b6bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010b6c3:	74 03                	je     f010b6c8 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f010b6c5:	ff 45 f0             	incl   -0x10(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010b6c8:	ff 45 ec             	incl   -0x14(%ebp)
f010b6cb:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010b6d2:	76 d7                	jbe    f010b6ab <pf_calculate_allocated_pages+0x5f>
f010b6d4:	eb 01                	jmp    f010b6d7 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010b6d6:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010b6d7:	ff 45 f4             	incl   -0xc(%ebp)
f010b6da:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010b6e1:	0f 86 7b ff ff ff    	jbe    f010b662 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010b6e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b6ea:	c9                   	leave  
f010b6eb:	c3                   	ret    

f010b6ec <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010b6ec:	55                   	push   %ebp
f010b6ed:	89 e5                	mov    %esp,%ebp
f010b6ef:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010b6f2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010b6f9:	a1 e4 b6 54 f0       	mov    0xf054b6e4,%eax
f010b6fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b701:	eb 0b                	jmp    f010b70e <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010b703:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010b706:	a1 ec b6 54 f0       	mov    0xf054b6ec,%eax
f010b70b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b70e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b712:	74 07                	je     f010b71b <pf_calculate_free_frames+0x2f>
f010b714:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b717:	8b 00                	mov    (%eax),%eax
f010b719:	eb 05                	jmp    f010b720 <pf_calculate_free_frames+0x34>
f010b71b:	b8 00 00 00 00       	mov    $0x0,%eax
f010b720:	a3 ec b6 54 f0       	mov    %eax,0xf054b6ec
f010b725:	a1 ec b6 54 f0       	mov    0xf054b6ec,%eax
f010b72a:	85 c0                	test   %eax,%eax
f010b72c:	75 d5                	jne    f010b703 <pf_calculate_free_frames+0x17>
f010b72e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b732:	75 cf                	jne    f010b703 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010b734:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010b737:	c9                   	leave  
f010b738:	c3                   	ret    

f010b739 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010b739:	55                   	push   %ebp
f010b73a:	89 e5                	mov    %esp,%ebp
f010b73c:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010b73f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b742:	8b 50 6c             	mov    0x6c(%eax),%edx
f010b745:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b748:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010b74a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b74d:	8b 00                	mov    (%eax),%eax
f010b74f:	85 c0                	test   %eax,%eax
f010b751:	75 58                	jne    f010b7ab <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f010b753:	83 ec 0c             	sub    $0xc,%esp
f010b756:	68 00 10 00 00       	push   $0x1000
f010b75b:	e8 8f 02 00 00       	call   f010b9ef <kmalloc>
f010b760:	83 c4 10             	add    $0x10,%esp
f010b763:	89 c2                	mov    %eax,%edx
f010b765:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b768:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f010b76a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b76d:	8b 00                	mov    (%eax),%eax
f010b76f:	85 c0                	test   %eax,%eax
f010b771:	75 07                	jne    f010b77a <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f010b773:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b778:	eb 36                	jmp    f010b7b0 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f010b77a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b77d:	8b 00                	mov    (%eax),%eax
f010b77f:	83 ec 0c             	sub    $0xc,%esp
f010b782:	50                   	push   %eax
f010b783:	e8 71 04 00 00       	call   f010bbf9 <kheap_physical_address>
f010b788:	83 c4 10             	add    $0x10,%esp
f010b78b:	89 c2                	mov    %eax,%edx
f010b78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b790:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010b793:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b796:	8b 00                	mov    (%eax),%eax
f010b798:	83 ec 04             	sub    $0x4,%esp
f010b79b:	68 00 10 00 00       	push   $0x1000
f010b7a0:	6a 00                	push   $0x0
f010b7a2:	50                   	push   %eax
f010b7a3:	e8 1b b9 00 00       	call   f01170c3 <memset>
f010b7a8:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010b7ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b7b0:	c9                   	leave  
f010b7b1:	c3                   	ret    

f010b7b2 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010b7b2:	55                   	push   %ebp
f010b7b3:	89 e5                	mov    %esp,%ebp
f010b7b5:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010b7b8:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b7bf:	76 19                	jbe    f010b7da <__pf_write_env_table+0x28>
f010b7c1:	68 5c ab 11 f0       	push   $0xf011ab5c
f010b7c6:	68 82 ab 11 f0       	push   $0xf011ab82
f010b7cb:	68 3d 02 00 00       	push   $0x23d
f010b7d0:	68 17 ab 11 f0       	push   $0xf011ab17
f010b7d5:	e8 9c 49 ff ff       	call   f0100176 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010b7da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7dd:	83 c0 6c             	add    $0x6c,%eax
f010b7e0:	83 ec 08             	sub    $0x8,%esp
f010b7e3:	50                   	push   %eax
f010b7e4:	ff 75 08             	pushl  0x8(%ebp)
f010b7e7:	e8 4d ff ff ff       	call   f010b739 <get_disk_table_directory>
f010b7ec:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010b7ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7f2:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b7f5:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b7f8:	c1 ea 16             	shr    $0x16,%edx
f010b7fb:	c1 e2 02             	shl    $0x2,%edx
f010b7fe:	01 d0                	add    %edx,%eax
f010b800:	8b 00                	mov    (%eax),%eax
f010b802:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010b805:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b808:	85 c0                	test   %eax,%eax
f010b80a:	75 31                	jne    f010b83d <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b80c:	83 ec 0c             	sub    $0xc,%esp
f010b80f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b812:	50                   	push   %eax
f010b813:	e8 4c f6 ff ff       	call   f010ae64 <allocate_disk_frame>
f010b818:	83 c4 10             	add    $0x10,%esp
f010b81b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b81e:	75 07                	jne    f010b827 <__pf_write_env_table+0x75>
f010b820:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b825:	eb 2e                	jmp    f010b855 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010b827:	8b 45 08             	mov    0x8(%ebp),%eax
f010b82a:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b82d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b830:	c1 ea 16             	shr    $0x16,%edx
f010b833:	c1 e2 02             	shl    $0x2,%edx
f010b836:	01 c2                	add    %eax,%edx
f010b838:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b83b:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010b83d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b840:	83 ec 08             	sub    $0x8,%esp
f010b843:	ff 75 10             	pushl  0x10(%ebp)
f010b846:	50                   	push   %eax
f010b847:	e8 97 f4 ff ff       	call   f010ace3 <write_disk_page>
f010b84c:	83 c4 10             	add    $0x10,%esp
f010b84f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010b852:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b855:	c9                   	leave  
f010b856:	c3                   	ret    

f010b857 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010b857:	55                   	push   %ebp
f010b858:	89 e5                	mov    %esp,%ebp
f010b85a:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010b85d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b860:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b863:	85 c0                	test   %eax,%eax
f010b865:	75 07                	jne    f010b86e <__pf_read_env_table+0x17>
f010b867:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010b86c:	eb 3a                	jmp    f010b8a8 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010b86e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b871:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b874:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b877:	c1 ea 16             	shr    $0x16,%edx
f010b87a:	c1 e2 02             	shl    $0x2,%edx
f010b87d:	01 d0                	add    %edx,%eax
f010b87f:	8b 00                	mov    (%eax),%eax
f010b881:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010b884:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b888:	75 07                	jne    f010b891 <__pf_read_env_table+0x3a>
f010b88a:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010b88f:	eb 17                	jmp    f010b8a8 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010b891:	83 ec 08             	sub    $0x8,%esp
f010b894:	ff 75 10             	pushl  0x10(%ebp)
f010b897:	ff 75 f4             	pushl  -0xc(%ebp)
f010b89a:	e8 15 f4 ff ff       	call   f010acb4 <read_disk_page>
f010b89f:	83 c4 10             	add    $0x10,%esp
f010b8a2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010b8a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b8a8:	c9                   	leave  
f010b8a9:	c3                   	ret    

f010b8aa <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010b8aa:	55                   	push   %ebp
f010b8ab:	89 e5                	mov    %esp,%ebp
f010b8ad:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010b8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8b3:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b8b6:	85 c0                	test   %eax,%eax
f010b8b8:	74 49                	je     f010b903 <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b8ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010b8c1:	eb 35                	jmp    f010b8f8 <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010b8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8c6:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b8c9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b8cc:	c1 e2 02             	shl    $0x2,%edx
f010b8cf:	01 d0                	add    %edx,%eax
f010b8d1:	8b 00                	mov    (%eax),%eax
f010b8d3:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010b8d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8d9:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b8dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b8df:	c1 e2 02             	shl    $0x2,%edx
f010b8e2:	01 d0                	add    %edx,%eax
f010b8e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010b8ea:	ff 75 f8             	pushl  -0x8(%ebp)
f010b8ed:	e8 1f f6 ff ff       	call   f010af11 <free_disk_frame>
f010b8f2:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010b8f5:	ff 45 fc             	incl   -0x4(%ebp)
f010b8f8:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010b8ff:	76 c2                	jbe    f010b8c3 <__pf_remove_env_all_tables+0x19>
f010b901:	eb 01                	jmp    f010b904 <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010b903:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010b904:	c9                   	leave  
f010b905:	c3                   	ret    

f010b906 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010b906:	55                   	push   %ebp
f010b907:	89 e5                	mov    %esp,%ebp
f010b909:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010b90c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b910:	75 10                	jne    f010b922 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010b912:	83 ec 0c             	sub    $0xc,%esp
f010b915:	68 98 ab 11 f0       	push   $0xf011ab98
f010b91a:	e8 76 b4 ff ff       	call   f0106d95 <cprintf>
f010b91f:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010b922:	8b 45 08             	mov    0x8(%ebp),%eax
f010b925:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b928:	85 c0                	test   %eax,%eax
f010b92a:	74 3d                	je     f010b969 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010b92c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92f:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b932:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b935:	c1 ea 16             	shr    $0x16,%edx
f010b938:	c1 e2 02             	shl    $0x2,%edx
f010b93b:	01 d0                	add    %edx,%eax
f010b93d:	8b 00                	mov    (%eax),%eax
f010b93f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010b942:	8b 45 08             	mov    0x8(%ebp),%eax
f010b945:	8b 40 6c             	mov    0x6c(%eax),%eax
f010b948:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b94b:	c1 ea 16             	shr    $0x16,%edx
f010b94e:	c1 e2 02             	shl    $0x2,%edx
f010b951:	01 d0                	add    %edx,%eax
f010b953:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010b959:	83 ec 0c             	sub    $0xc,%esp
f010b95c:	ff 75 f4             	pushl  -0xc(%ebp)
f010b95f:	e8 ad f5 ff ff       	call   f010af11 <free_disk_frame>
f010b964:	83 c4 10             	add    $0x10,%esp
f010b967:	eb 01                	jmp    f010b96a <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010b969:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010b96a:	c9                   	leave  
f010b96b:	c3                   	ret    

f010b96c <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010b96c:	55                   	push   %ebp
f010b96d:	89 e5                	mov    %esp,%ebp
f010b96f:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010b972:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010b979:	eb 1f                	jmp    f010b99a <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010b97b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b97e:	83 ec 04             	sub    $0x4,%esp
f010b981:	6a 08                	push   $0x8
f010b983:	ff 75 08             	pushl  0x8(%ebp)
f010b986:	50                   	push   %eax
f010b987:	e8 dc bd 00 00       	call   f0117768 <ide_write>
f010b98c:	83 c4 10             	add    $0x10,%esp
f010b98f:	85 c0                	test   %eax,%eax
f010b991:	75 12                	jne    f010b9a5 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010b993:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010b99a:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010b9a1:	7e d8                	jle    f010b97b <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010b9a3:	eb 01                	jmp    f010b9a6 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010b9a5:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010b9a6:	90                   	nop
f010b9a7:	c9                   	leave  
f010b9a8:	c3                   	ret    

f010b9a9 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010b9a9:	55                   	push   %ebp
f010b9aa:	89 e5                	mov    %esp,%ebp
f010b9ac:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010b9af:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9b2:	c1 e8 0c             	shr    $0xc,%eax
f010b9b5:	89 c2                	mov    %eax,%edx
f010b9b7:	a1 2c d2 52 f0       	mov    0xf052d22c,%eax
f010b9bc:	39 c2                	cmp    %eax,%edx
f010b9be:	72 14                	jb     f010b9d4 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010b9c0:	83 ec 04             	sub    $0x4,%esp
f010b9c3:	68 bc ab 11 f0       	push   $0xf011abbc
f010b9c8:	6a 75                	push   $0x75
f010b9ca:	68 e1 ab 11 f0       	push   $0xf011abe1
f010b9cf:	e8 a2 47 ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f010b9d4:	8b 15 c4 b6 54 f0    	mov    0xf054b6c4,%edx
f010b9da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9dd:	c1 e8 0c             	shr    $0xc,%eax
f010b9e0:	89 c1                	mov    %eax,%ecx
f010b9e2:	89 c8                	mov    %ecx,%eax
f010b9e4:	01 c0                	add    %eax,%eax
f010b9e6:	01 c8                	add    %ecx,%eax
f010b9e8:	c1 e0 03             	shl    $0x3,%eax
f010b9eb:	01 d0                	add    %edx,%eax
}
f010b9ed:	c9                   	leave  
f010b9ee:	c3                   	ret    

f010b9ef <kmalloc>:
struct KernelHEAP {
	uint32 first;
	int size;
} kHeapArr[Mega];

void* kmalloc(unsigned int size) {
f010b9ef:	55                   	push   %ebp
f010b9f0:	89 e5                	mov    %esp,%ebp
f010b9f2:	83 ec 28             	sub    $0x28,%esp

	//NOTE: Allocation using NEXTFIT strategy
	//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)
	//refer to the project presentation and documentation for details

	if(isKHeapPlacementStrategyNEXTFIT()) {
f010b9f5:	e8 b6 99 ff ff       	call   f01053b0 <isKHeapPlacementStrategyNEXTFIT>
f010b9fa:	85 c0                	test   %eax,%eax
f010b9fc:	0f 84 fa 00 00 00    	je     f010bafc <kmalloc+0x10d>
		uint32 newStart = startAdd;
f010ba02:	a1 28 da 14 f0       	mov    0xf014da28,%eax
f010ba07:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kHeapArr[idx].size = ROUNDUP(size, PAGE_SIZE);
f010ba0a:	8b 0d 08 d2 52 f0    	mov    0xf052d208,%ecx
f010ba10:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010ba17:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ba1d:	01 d0                	add    %edx,%eax
f010ba1f:	48                   	dec    %eax
f010ba20:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ba23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba26:	ba 00 00 00 00       	mov    $0x0,%edx
f010ba2b:	f7 75 ec             	divl   -0x14(%ebp)
f010ba2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba31:	29 d0                	sub    %edx,%eax
f010ba33:	89 04 cd 04 b7 54 f0 	mov    %eax,-0xfab48fc(,%ecx,8)
		uint32 maxSize = startAdd+size;
f010ba3a:	8b 15 28 da 14 f0    	mov    0xf014da28,%edx
f010ba40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba43:	01 d0                	add    %edx,%eax
f010ba45:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if(KERNEL_HEAP_MAX-startAdd > size) {
f010ba48:	a1 28 da 14 f0       	mov    0xf014da28,%eax
f010ba4d:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010ba52:	29 c2                	sub    %eax,%edx
f010ba54:	89 d0                	mov    %edx,%eax
f010ba56:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ba59:	0f 86 9d 00 00 00    	jbe    f010bafc <kmalloc+0x10d>
			for(uint32 i = startAdd; i < maxSize; i += PAGE_SIZE) {
f010ba5f:	a1 28 da 14 f0       	mov    0xf014da28,%eax
f010ba64:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ba67:	eb 6c                	jmp    f010bad5 <kmalloc+0xe6>
				struct Frame_Info* ptrFrameInfo;
				int tmp = allocate_frame(&ptrFrameInfo);
f010ba69:	83 ec 0c             	sub    $0xc,%esp
f010ba6c:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010ba6f:	50                   	push   %eax
f010ba70:	e8 21 7f ff ff       	call   f0103996 <allocate_frame>
f010ba75:	83 c4 10             	add    $0x10,%esp
f010ba78:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if(tmp == E_NO_MEM) return NULL;
f010ba7b:	83 7d e0 fc          	cmpl   $0xfffffffc,-0x20(%ebp)
f010ba7f:	75 07                	jne    f010ba88 <kmalloc+0x99>
f010ba81:	b8 00 00 00 00       	mov    $0x0,%eax
f010ba86:	eb 7e                	jmp    f010bb06 <kmalloc+0x117>

				tmp = map_frame(ptr_page_directory, ptrFrameInfo, (void*)i, PERM_PRESENT|PERM_WRITEABLE);
f010ba88:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010ba8b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ba8e:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010ba93:	6a 03                	push   $0x3
f010ba95:	51                   	push   %ecx
f010ba96:	52                   	push   %edx
f010ba97:	50                   	push   %eax
f010ba98:	e8 6d 82 ff ff       	call   f0103d0a <map_frame>
f010ba9d:	83 c4 10             	add    $0x10,%esp
f010baa0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if(tmp == E_NO_MEM) {
f010baa3:	83 7d e0 fc          	cmpl   $0xfffffffc,-0x20(%ebp)
f010baa7:	75 16                	jne    f010babf <kmalloc+0xd0>
					free_frame(ptrFrameInfo);
f010baa9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010baac:	83 ec 0c             	sub    $0xc,%esp
f010baaf:	50                   	push   %eax
f010bab0:	e8 d3 7f ff ff       	call   f0103a88 <free_frame>
f010bab5:	83 c4 10             	add    $0x10,%esp
					return NULL;
f010bab8:	b8 00 00 00 00       	mov    $0x0,%eax
f010babd:	eb 47                	jmp    f010bb06 <kmalloc+0x117>
				}

				startAdd += PAGE_SIZE;   //Moving Forward
f010babf:	a1 28 da 14 f0       	mov    0xf014da28,%eax
f010bac4:	05 00 10 00 00       	add    $0x1000,%eax
f010bac9:	a3 28 da 14 f0       	mov    %eax,0xf014da28
		uint32 newStart = startAdd;
		kHeapArr[idx].size = ROUNDUP(size, PAGE_SIZE);
		uint32 maxSize = startAdd+size;

		if(KERNEL_HEAP_MAX-startAdd > size) {
			for(uint32 i = startAdd; i < maxSize; i += PAGE_SIZE) {
f010bace:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010bad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bad8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010badb:	72 8c                	jb     f010ba69 <kmalloc+0x7a>
				}

				startAdd += PAGE_SIZE;   //Moving Forward
			}

			kHeapArr[idx].first = newStart;
f010badd:	a1 08 d2 52 f0       	mov    0xf052d208,%eax
f010bae2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010bae5:	89 14 c5 00 b7 54 f0 	mov    %edx,-0xfab4900(,%eax,8)

			idx++;
f010baec:	a1 08 d2 52 f0       	mov    0xf052d208,%eax
f010baf1:	40                   	inc    %eax
f010baf2:	a3 08 d2 52 f0       	mov    %eax,0xf052d208
			return (void*)newStart;
f010baf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bafa:	eb 0a                	jmp    f010bb06 <kmalloc+0x117>
	// use "isKHeapPlacementStrategyBESTFIT() ..."
	// and "isKHeapPlacementStrategyNEXTFIT() ..."
	//functions to check the current strategy
	//change this "return" according to your answer

	if(isKHeapPlacementStrategyBESTFIT()) {
f010bafc:	e8 94 98 ff ff       	call   f0105395 <isKHeapPlacementStrategyBESTFIT>
		// BEST FIT strategy
	}

	return NULL;
f010bb01:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bb06:	c9                   	leave  
f010bb07:	c3                   	ret    

f010bb08 <kfree>:

void kfree(void* virtual_address) {
f010bb08:	55                   	push   %ebp
f010bb09:	89 e5                	mov    %esp,%ebp
f010bb0b:	83 ec 18             	sub    $0x18,%esp
	//panic("kfree() is not implemented yet...!!");

	//you need to get the size of the given allocation using its address
	//refer to the project presentation and documentation for details

	for(int i=0; i<idx; i++) {
f010bb0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bb15:	eb 73                	jmp    f010bb8a <kfree+0x82>
		if (virtual_address == (void*)kHeapArr[i].first) {
f010bb17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb1a:	8b 04 c5 00 b7 54 f0 	mov    -0xfab4900(,%eax,8),%eax
f010bb21:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bb24:	75 61                	jne    f010bb87 <kfree+0x7f>
			uint32 finalAdd = kHeapArr[i].first + kHeapArr[i].size;
f010bb26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb29:	8b 14 c5 00 b7 54 f0 	mov    -0xfab4900(,%eax,8),%edx
f010bb30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb33:	8b 04 c5 04 b7 54 f0 	mov    -0xfab48fc(,%eax,8),%eax
f010bb3a:	01 d0                	add    %edx,%eax
f010bb3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(uint32 j = (uint32)virtual_address; j<finalAdd; j+=PAGE_SIZE) {
f010bb3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb42:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010bb45:	eb 1c                	jmp    f010bb63 <kfree+0x5b>
				unmap_frame(ptr_page_directory, (uint32*)j);
f010bb47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010bb4a:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010bb4f:	83 ec 08             	sub    $0x8,%esp
f010bb52:	52                   	push   %edx
f010bb53:	50                   	push   %eax
f010bb54:	e8 e0 82 ff ff       	call   f0103e39 <unmap_frame>
f010bb59:	83 c4 10             	add    $0x10,%esp
	//refer to the project presentation and documentation for details

	for(int i=0; i<idx; i++) {
		if (virtual_address == (void*)kHeapArr[i].first) {
			uint32 finalAdd = kHeapArr[i].first + kHeapArr[i].size;
			for(uint32 j = (uint32)virtual_address; j<finalAdd; j+=PAGE_SIZE) {
f010bb5c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010bb63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bb66:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010bb69:	72 dc                	jb     f010bb47 <kfree+0x3f>
				unmap_frame(ptr_page_directory, (uint32*)j);
			}

			kHeapArr[i].first = kHeapArr[i].size = 0;
f010bb6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb6e:	c7 04 c5 04 b7 54 f0 	movl   $0x0,-0xfab48fc(,%eax,8)
f010bb75:	00 00 00 00 
f010bb79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb7c:	c7 04 c5 00 b7 54 f0 	movl   $0x0,-0xfab4900(,%eax,8)
f010bb83:	00 00 00 00 
	//panic("kfree() is not implemented yet...!!");

	//you need to get the size of the given allocation using its address
	//refer to the project presentation and documentation for details

	for(int i=0; i<idx; i++) {
f010bb87:	ff 45 f4             	incl   -0xc(%ebp)
f010bb8a:	a1 08 d2 52 f0       	mov    0xf052d208,%eax
f010bb8f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bb92:	7c 83                	jl     f010bb17 <kfree+0xf>
			}

			kHeapArr[i].first = kHeapArr[i].size = 0;
		}
	}
}
f010bb94:	90                   	nop
f010bb95:	c9                   	leave  
f010bb96:	c3                   	ret    

f010bb97 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address) {
f010bb97:	55                   	push   %ebp
f010bb98:	89 e5                	mov    %esp,%ebp
f010bb9a:	83 ec 18             	sub    $0x18,%esp
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	struct Frame_Info* phyAddFrame = to_frame_info(physical_address);
f010bb9d:	83 ec 0c             	sub    $0xc,%esp
f010bba0:	ff 75 08             	pushl  0x8(%ebp)
f010bba3:	e8 01 fe ff ff       	call   f010b9a9 <to_frame_info>
f010bba8:	83 c4 10             	add    $0x10,%esp
f010bbab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for(uint32 i = KERNEL_HEAP_START; i < startAdd; i += PAGE_SIZE) {
f010bbae:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
f010bbb5:	eb 31                	jmp    f010bbe8 <kheap_virtual_address+0x51>
		uint32* framePTR = NULL;
f010bbb7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		if(phyAddFrame == get_frame_info(ptr_page_directory,(void*)i,&framePTR)) {
f010bbbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bbc1:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010bbc6:	83 ec 04             	sub    $0x4,%esp
f010bbc9:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f010bbcc:	51                   	push   %ecx
f010bbcd:	52                   	push   %edx
f010bbce:	50                   	push   %eax
f010bbcf:	e8 f5 81 ff ff       	call   f0103dc9 <get_frame_info>
f010bbd4:	83 c4 10             	add    $0x10,%esp
f010bbd7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010bbda:	75 05                	jne    f010bbe1 <kheap_virtual_address+0x4a>
			return i;
f010bbdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbdf:	eb 16                	jmp    f010bbf7 <kheap_virtual_address+0x60>
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	struct Frame_Info* phyAddFrame = to_frame_info(physical_address);
	for(uint32 i = KERNEL_HEAP_START; i < startAdd; i += PAGE_SIZE) {
f010bbe1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010bbe8:	a1 28 da 14 f0       	mov    0xf014da28,%eax
f010bbed:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bbf0:	72 c5                	jb     f010bbb7 <kheap_virtual_address+0x20>
		if(phyAddFrame == get_frame_info(ptr_page_directory,(void*)i,&framePTR)) {
			return i;
		}
	}

	return 0;
f010bbf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bbf7:	c9                   	leave  
f010bbf8:	c3                   	ret    

f010bbf9 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address) {
f010bbf9:	55                   	push   %ebp
f010bbfa:	89 e5                	mov    %esp,%ebp
f010bbfc:	83 ec 18             	sub    $0x18,%esp
	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	uint32 *ptPTR = NULL;
f010bbff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(ptr_page_directory,(uint32*)virtual_address,&ptPTR);
f010bc06:	8b 55 08             	mov    0x8(%ebp),%edx
f010bc09:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010bc0e:	83 ec 04             	sub    $0x4,%esp
f010bc11:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010bc14:	51                   	push   %ecx
f010bc15:	52                   	push   %edx
f010bc16:	50                   	push   %eax
f010bc17:	e8 f9 7e ff ff       	call   f0103b15 <get_page_table>
f010bc1c:	83 c4 10             	add    $0x10,%esp

	if((ptPTR != NULL) && ((ptPTR[PTX(virtual_address)] & PERM_PRESENT) != 0)) {
f010bc1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc22:	85 c0                	test   %eax,%eax
f010bc24:	74 46                	je     f010bc6c <kheap_physical_address+0x73>
f010bc26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc29:	8b 55 08             	mov    0x8(%ebp),%edx
f010bc2c:	c1 ea 0c             	shr    $0xc,%edx
f010bc2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bc35:	c1 e2 02             	shl    $0x2,%edx
f010bc38:	01 d0                	add    %edx,%eax
f010bc3a:	8b 00                	mov    (%eax),%eax
f010bc3c:	83 e0 01             	and    $0x1,%eax
f010bc3f:	85 c0                	test   %eax,%eax
f010bc41:	74 29                	je     f010bc6c <kheap_physical_address+0x73>
		return ((ptPTR[PTX(virtual_address)] & 0xFFFFF000) + (virtual_address & 0x00000FFF));
f010bc43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc46:	8b 55 08             	mov    0x8(%ebp),%edx
f010bc49:	c1 ea 0c             	shr    $0xc,%edx
f010bc4c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bc52:	c1 e2 02             	shl    $0x2,%edx
f010bc55:	01 d0                	add    %edx,%eax
f010bc57:	8b 00                	mov    (%eax),%eax
f010bc59:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bc5e:	89 c2                	mov    %eax,%edx
f010bc60:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc63:	25 ff 0f 00 00       	and    $0xfff,%eax
f010bc68:	01 d0                	add    %edx,%eax
f010bc6a:	eb 05                	jmp    f010bc71 <kheap_physical_address+0x78>
	}

	return 0;
f010bc6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bc71:	c9                   	leave  
f010bc72:	c3                   	ret    

f010bc73 <test_kmalloc>:
	char a;
	short b;
	int c;
};
int test_kmalloc()
{
f010bc73:	55                   	push   %ebp
f010bc74:	89 e5                	mov    %esp,%ebp
f010bc76:	57                   	push   %edi
f010bc77:	53                   	push   %ebx
f010bc78:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010bc7e:	83 ec 0c             	sub    $0xc,%esp
f010bc81:	68 fc ab 11 f0       	push   $0xf011abfc
f010bc86:	e8 0a b1 ff ff       	call   f0106d95 <cprintf>
f010bc8b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010bc8e:	83 ec 0c             	sub    $0xc,%esp
f010bc91:	68 2c ac 11 f0       	push   $0xf011ac2c
f010bc96:	e8 fa b0 ff ff       	call   f0106d95 <cprintf>
f010bc9b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010bc9e:	83 ec 0c             	sub    $0xc,%esp
f010bca1:	68 fc ab 11 f0       	push   $0xf011abfc
f010bca6:	e8 ea b0 ff ff       	call   f0106d95 <cprintf>
f010bcab:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010bcae:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010bcb2:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010bcb6:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010bcbc:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010bcc2:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010bcc9:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010bcd0:	e8 54 e5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bcd5:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010bcd8:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010bcde:	b9 14 00 00 00       	mov    $0x14,%ecx
f010bce3:	b8 00 00 00 00       	mov    $0x0,%eax
f010bce8:	89 d7                	mov    %edx,%edi
f010bcea:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010bcec:	e8 38 e5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bcf1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010bcf4:	e8 f3 f9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bcf9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010bcfc:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010bd03:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010bd08:	0f b6 d0             	movzbl %al,%edx
f010bd0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010bd0e:	01 d0                	add    %edx,%eax
f010bd10:	48                   	dec    %eax
f010bd11:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010bd14:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010bd17:	ba 00 00 00 00       	mov    $0x0,%edx
f010bd1c:	f7 75 d4             	divl   -0x2c(%ebp)
f010bd1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010bd22:	29 d0                	sub    %edx,%eax
f010bd24:	89 c1                	mov    %eax,%ecx
f010bd26:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010bd2d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010bd32:	0f b6 c0             	movzbl %al,%eax
f010bd35:	c1 e0 04             	shl    $0x4,%eax
f010bd38:	89 c2                	mov    %eax,%edx
f010bd3a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010bd3d:	01 d0                	add    %edx,%eax
f010bd3f:	48                   	dec    %eax
f010bd40:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010bd43:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010bd46:	ba 00 00 00 00       	mov    $0x0,%edx
f010bd4b:	f7 75 cc             	divl   -0x34(%ebp)
f010bd4e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010bd51:	29 d0                	sub    %edx,%eax
f010bd53:	01 c8                	add    %ecx,%eax
f010bd55:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010bd5a:	29 c2                	sub    %eax,%edx
f010bd5c:	89 d0                	mov    %edx,%eax
f010bd5e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010bd61:	83 ec 0c             	sub    $0xc,%esp
f010bd64:	ff 75 c4             	pushl  -0x3c(%ebp)
f010bd67:	e8 83 fc ff ff       	call   f010b9ef <kmalloc>
f010bd6c:	83 c4 10             	add    $0x10,%esp
f010bd6f:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010bd75:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010bd7b:	85 c0                	test   %eax,%eax
f010bd7d:	74 14                	je     f010bd93 <test_kmalloc+0x120>
f010bd7f:	83 ec 04             	sub    $0x4,%esp
f010bd82:	68 88 ac 11 f0       	push   $0xf011ac88
f010bd87:	6a 37                	push   $0x37
f010bd89:	68 ba ac 11 f0       	push   $0xf011acba
f010bd8e:	e8 e3 43 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010bd93:	e8 54 f9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bd98:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010bd9b:	74 14                	je     f010bdb1 <test_kmalloc+0x13e>
f010bd9d:	83 ec 04             	sub    $0x4,%esp
f010bda0:	68 cc ac 11 f0       	push   $0xf011accc
f010bda5:	6a 38                	push   $0x38
f010bda7:	68 ba ac 11 f0       	push   $0xf011acba
f010bdac:	e8 c5 43 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010bdb1:	e8 73 e4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bdb6:	89 c2                	mov    %eax,%edx
f010bdb8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bdbb:	39 c2                	cmp    %eax,%edx
f010bdbd:	74 14                	je     f010bdd3 <test_kmalloc+0x160>
f010bdbf:	83 ec 04             	sub    $0x4,%esp
f010bdc2:	68 34 ad 11 f0       	push   $0xf011ad34
f010bdc7:	6a 39                	push   $0x39
f010bdc9:	68 ba ac 11 f0       	push   $0xf011acba
f010bdce:	e8 a3 43 ff ff       	call   f0100176 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010bdd3:	83 ec 0c             	sub    $0xc,%esp
f010bdd6:	68 74 ad 11 f0       	push   $0xf011ad74
f010bddb:	e8 b5 af ff ff       	call   f0106d95 <cprintf>
f010bde0:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010bde3:	e8 41 e4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bde8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010bdeb:	e8 fc f8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bdf0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010bdf3:	83 ec 0c             	sub    $0xc,%esp
f010bdf6:	68 00 fc 1f 00       	push   $0x1ffc00
f010bdfb:	e8 ef fb ff ff       	call   f010b9ef <kmalloc>
f010be00:	83 c4 10             	add    $0x10,%esp
f010be03:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010be09:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010be0f:	89 c1                	mov    %eax,%ecx
f010be11:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010be18:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010be1d:	0f b6 d0             	movzbl %al,%edx
f010be20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010be23:	01 d0                	add    %edx,%eax
f010be25:	48                   	dec    %eax
f010be26:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010be29:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010be2c:	ba 00 00 00 00       	mov    $0x0,%edx
f010be31:	f7 75 c0             	divl   -0x40(%ebp)
f010be34:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010be37:	29 d0                	sub    %edx,%eax
f010be39:	89 c3                	mov    %eax,%ebx
f010be3b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010be42:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010be47:	0f b6 c0             	movzbl %al,%eax
f010be4a:	c1 e0 04             	shl    $0x4,%eax
f010be4d:	89 c2                	mov    %eax,%edx
f010be4f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010be52:	01 d0                	add    %edx,%eax
f010be54:	48                   	dec    %eax
f010be55:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010be58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010be5b:	ba 00 00 00 00       	mov    $0x0,%edx
f010be60:	f7 75 b8             	divl   -0x48(%ebp)
f010be63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010be66:	29 d0                	sub    %edx,%eax
f010be68:	01 d8                	add    %ebx,%eax
f010be6a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010be6f:	39 c1                	cmp    %eax,%ecx
f010be71:	74 14                	je     f010be87 <test_kmalloc+0x214>
f010be73:	83 ec 04             	sub    $0x4,%esp
f010be76:	68 98 ad 11 f0       	push   $0xf011ad98
f010be7b:	6a 40                	push   $0x40
f010be7d:	68 ba ac 11 f0       	push   $0xf011acba
f010be82:	e8 ef 42 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010be87:	e8 60 f8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010be8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010be8f:	74 14                	je     f010bea5 <test_kmalloc+0x232>
f010be91:	83 ec 04             	sub    $0x4,%esp
f010be94:	68 cc ac 11 f0       	push   $0xf011accc
f010be99:	6a 41                	push   $0x41
f010be9b:	68 ba ac 11 f0       	push   $0xf011acba
f010bea0:	e8 d1 42 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010bea5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010bea8:	e8 7c e3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bead:	29 c3                	sub    %eax,%ebx
f010beaf:	89 d8                	mov    %ebx,%eax
f010beb1:	3d 00 02 00 00       	cmp    $0x200,%eax
f010beb6:	74 14                	je     f010becc <test_kmalloc+0x259>
f010beb8:	83 ec 04             	sub    $0x4,%esp
f010bebb:	68 34 ad 11 f0       	push   $0xf011ad34
f010bec0:	6a 42                	push   $0x42
f010bec2:	68 ba ac 11 f0       	push   $0xf011acba
f010bec7:	e8 aa 42 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010becc:	e8 58 e3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bed1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010bed4:	e8 13 f8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bed9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010bedc:	83 ec 0c             	sub    $0xc,%esp
f010bedf:	68 00 fc 1f 00       	push   $0x1ffc00
f010bee4:	e8 06 fb ff ff       	call   f010b9ef <kmalloc>
f010bee9:	83 c4 10             	add    $0x10,%esp
f010beec:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010bef2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010bef8:	89 c1                	mov    %eax,%ecx
f010befa:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010bf01:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010bf06:	0f b6 d0             	movzbl %al,%edx
f010bf09:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010bf0c:	01 d0                	add    %edx,%eax
f010bf0e:	48                   	dec    %eax
f010bf0f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010bf12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010bf15:	ba 00 00 00 00       	mov    $0x0,%edx
f010bf1a:	f7 75 b0             	divl   -0x50(%ebp)
f010bf1d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010bf20:	29 d0                	sub    %edx,%eax
f010bf22:	89 c3                	mov    %eax,%ebx
f010bf24:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010bf2b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010bf30:	0f b6 c0             	movzbl %al,%eax
f010bf33:	c1 e0 04             	shl    $0x4,%eax
f010bf36:	89 c2                	mov    %eax,%edx
f010bf38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010bf3b:	01 d0                	add    %edx,%eax
f010bf3d:	48                   	dec    %eax
f010bf3e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010bf41:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010bf44:	ba 00 00 00 00       	mov    $0x0,%edx
f010bf49:	f7 75 a8             	divl   -0x58(%ebp)
f010bf4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010bf4f:	29 d0                	sub    %edx,%eax
f010bf51:	01 d8                	add    %ebx,%eax
f010bf53:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010bf58:	39 c1                	cmp    %eax,%ecx
f010bf5a:	74 14                	je     f010bf70 <test_kmalloc+0x2fd>
f010bf5c:	83 ec 04             	sub    $0x4,%esp
f010bf5f:	68 98 ad 11 f0       	push   $0xf011ad98
f010bf64:	6a 48                	push   $0x48
f010bf66:	68 ba ac 11 f0       	push   $0xf011acba
f010bf6b:	e8 06 42 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010bf70:	e8 77 f7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bf75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010bf78:	74 14                	je     f010bf8e <test_kmalloc+0x31b>
f010bf7a:	83 ec 04             	sub    $0x4,%esp
f010bf7d:	68 cc ac 11 f0       	push   $0xf011accc
f010bf82:	6a 49                	push   $0x49
f010bf84:	68 ba ac 11 f0       	push   $0xf011acba
f010bf89:	e8 e8 41 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010bf8e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010bf91:	e8 93 e2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bf96:	29 c3                	sub    %eax,%ebx
f010bf98:	89 d8                	mov    %ebx,%eax
f010bf9a:	3d 00 02 00 00       	cmp    $0x200,%eax
f010bf9f:	74 14                	je     f010bfb5 <test_kmalloc+0x342>
f010bfa1:	83 ec 04             	sub    $0x4,%esp
f010bfa4:	68 34 ad 11 f0       	push   $0xf011ad34
f010bfa9:	6a 4a                	push   $0x4a
f010bfab:	68 ba ac 11 f0       	push   $0xf011acba
f010bfb0:	e8 c1 41 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010bfb5:	e8 6f e2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010bfba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010bfbd:	e8 2a f7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010bfc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010bfc5:	83 ec 0c             	sub    $0xc,%esp
f010bfc8:	68 00 08 00 00       	push   $0x800
f010bfcd:	e8 1d fa ff ff       	call   f010b9ef <kmalloc>
f010bfd2:	83 c4 10             	add    $0x10,%esp
f010bfd5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010bfdb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010bfe1:	89 c1                	mov    %eax,%ecx
f010bfe3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010bfea:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010bfef:	0f b6 d0             	movzbl %al,%edx
f010bff2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010bff5:	01 d0                	add    %edx,%eax
f010bff7:	48                   	dec    %eax
f010bff8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010bffb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010bffe:	ba 00 00 00 00       	mov    $0x0,%edx
f010c003:	f7 75 a0             	divl   -0x60(%ebp)
f010c006:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010c009:	29 d0                	sub    %edx,%eax
f010c00b:	89 c3                	mov    %eax,%ebx
f010c00d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010c014:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c019:	0f b6 c0             	movzbl %al,%eax
f010c01c:	c1 e0 04             	shl    $0x4,%eax
f010c01f:	89 c2                	mov    %eax,%edx
f010c021:	8b 45 98             	mov    -0x68(%ebp),%eax
f010c024:	01 d0                	add    %edx,%eax
f010c026:	48                   	dec    %eax
f010c027:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010c02a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c02d:	ba 00 00 00 00       	mov    $0x0,%edx
f010c032:	f7 75 98             	divl   -0x68(%ebp)
f010c035:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c038:	29 d0                	sub    %edx,%eax
f010c03a:	01 d8                	add    %ebx,%eax
f010c03c:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010c041:	39 c1                	cmp    %eax,%ecx
f010c043:	74 14                	je     f010c059 <test_kmalloc+0x3e6>
f010c045:	83 ec 04             	sub    $0x4,%esp
f010c048:	68 98 ad 11 f0       	push   $0xf011ad98
f010c04d:	6a 50                	push   $0x50
f010c04f:	68 ba ac 11 f0       	push   $0xf011acba
f010c054:	e8 1d 41 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c059:	e8 8e f6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c05e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c061:	74 14                	je     f010c077 <test_kmalloc+0x404>
f010c063:	83 ec 04             	sub    $0x4,%esp
f010c066:	68 cc ac 11 f0       	push   $0xf011accc
f010c06b:	6a 51                	push   $0x51
f010c06d:	68 ba ac 11 f0       	push   $0xf011acba
f010c072:	e8 ff 40 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c077:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c07a:	e8 aa e1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c07f:	29 c3                	sub    %eax,%ebx
f010c081:	89 d8                	mov    %ebx,%eax
f010c083:	83 f8 01             	cmp    $0x1,%eax
f010c086:	74 14                	je     f010c09c <test_kmalloc+0x429>
f010c088:	83 ec 04             	sub    $0x4,%esp
f010c08b:	68 34 ad 11 f0       	push   $0xf011ad34
f010c090:	6a 52                	push   $0x52
f010c092:	68 ba ac 11 f0       	push   $0xf011acba
f010c097:	e8 da 40 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010c09c:	e8 88 e1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c0a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c0a4:	e8 43 f6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c0a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010c0ac:	83 ec 0c             	sub    $0xc,%esp
f010c0af:	68 00 08 00 00       	push   $0x800
f010c0b4:	e8 36 f9 ff ff       	call   f010b9ef <kmalloc>
f010c0b9:	83 c4 10             	add    $0x10,%esp
f010c0bc:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c0c2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010c0c8:	89 c1                	mov    %eax,%ecx
f010c0ca:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010c0d1:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c0d6:	0f b6 d0             	movzbl %al,%edx
f010c0d9:	8b 45 90             	mov    -0x70(%ebp),%eax
f010c0dc:	01 d0                	add    %edx,%eax
f010c0de:	48                   	dec    %eax
f010c0df:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010c0e2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c0e5:	ba 00 00 00 00       	mov    $0x0,%edx
f010c0ea:	f7 75 90             	divl   -0x70(%ebp)
f010c0ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c0f0:	29 d0                	sub    %edx,%eax
f010c0f2:	89 c3                	mov    %eax,%ebx
f010c0f4:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010c0fb:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c100:	0f b6 c0             	movzbl %al,%eax
f010c103:	c1 e0 04             	shl    $0x4,%eax
f010c106:	89 c2                	mov    %eax,%edx
f010c108:	8b 45 88             	mov    -0x78(%ebp),%eax
f010c10b:	01 d0                	add    %edx,%eax
f010c10d:	48                   	dec    %eax
f010c10e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010c111:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010c114:	ba 00 00 00 00       	mov    $0x0,%edx
f010c119:	f7 75 88             	divl   -0x78(%ebp)
f010c11c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010c11f:	29 d0                	sub    %edx,%eax
f010c121:	01 d8                	add    %ebx,%eax
f010c123:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010c128:	39 c1                	cmp    %eax,%ecx
f010c12a:	74 14                	je     f010c140 <test_kmalloc+0x4cd>
f010c12c:	83 ec 04             	sub    $0x4,%esp
f010c12f:	68 98 ad 11 f0       	push   $0xf011ad98
f010c134:	6a 58                	push   $0x58
f010c136:	68 ba ac 11 f0       	push   $0xf011acba
f010c13b:	e8 36 40 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c140:	e8 a7 f5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c145:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c148:	74 14                	je     f010c15e <test_kmalloc+0x4eb>
f010c14a:	83 ec 04             	sub    $0x4,%esp
f010c14d:	68 cc ac 11 f0       	push   $0xf011accc
f010c152:	6a 59                	push   $0x59
f010c154:	68 ba ac 11 f0       	push   $0xf011acba
f010c159:	e8 18 40 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c15e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c161:	e8 c3 e0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c166:	29 c3                	sub    %eax,%ebx
f010c168:	89 d8                	mov    %ebx,%eax
f010c16a:	83 f8 01             	cmp    $0x1,%eax
f010c16d:	74 14                	je     f010c183 <test_kmalloc+0x510>
f010c16f:	83 ec 04             	sub    $0x4,%esp
f010c172:	68 34 ad 11 f0       	push   $0xf011ad34
f010c177:	6a 5a                	push   $0x5a
f010c179:	68 ba ac 11 f0       	push   $0xf011acba
f010c17e:	e8 f3 3f ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010c183:	e8 a1 e0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c188:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c18b:	e8 5c f5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c190:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010c193:	83 ec 0c             	sub    $0xc,%esp
f010c196:	68 00 1c 00 00       	push   $0x1c00
f010c19b:	e8 4f f8 ff ff       	call   f010b9ef <kmalloc>
f010c1a0:	83 c4 10             	add    $0x10,%esp
f010c1a3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c1a9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010c1af:	89 c1                	mov    %eax,%ecx
f010c1b1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010c1b8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c1bd:	0f b6 d0             	movzbl %al,%edx
f010c1c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f010c1c3:	01 d0                	add    %edx,%eax
f010c1c5:	48                   	dec    %eax
f010c1c6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010c1cc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010c1d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010c1d7:	f7 75 80             	divl   -0x80(%ebp)
f010c1da:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010c1e0:	29 d0                	sub    %edx,%eax
f010c1e2:	89 c3                	mov    %eax,%ebx
f010c1e4:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010c1eb:	10 00 00 
f010c1ee:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c1f3:	0f b6 c0             	movzbl %al,%eax
f010c1f6:	c1 e0 04             	shl    $0x4,%eax
f010c1f9:	89 c2                	mov    %eax,%edx
f010c1fb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010c201:	01 d0                	add    %edx,%eax
f010c203:	48                   	dec    %eax
f010c204:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010c20a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010c210:	ba 00 00 00 00       	mov    $0x0,%edx
f010c215:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010c21b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010c221:	29 d0                	sub    %edx,%eax
f010c223:	01 d8                	add    %ebx,%eax
f010c225:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010c22a:	39 c1                	cmp    %eax,%ecx
f010c22c:	74 14                	je     f010c242 <test_kmalloc+0x5cf>
f010c22e:	83 ec 04             	sub    $0x4,%esp
f010c231:	68 98 ad 11 f0       	push   $0xf011ad98
f010c236:	6a 60                	push   $0x60
f010c238:	68 ba ac 11 f0       	push   $0xf011acba
f010c23d:	e8 34 3f ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c242:	e8 a5 f4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c247:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c24a:	74 14                	je     f010c260 <test_kmalloc+0x5ed>
f010c24c:	83 ec 04             	sub    $0x4,%esp
f010c24f:	68 cc ac 11 f0       	push   $0xf011accc
f010c254:	6a 61                	push   $0x61
f010c256:	68 ba ac 11 f0       	push   $0xf011acba
f010c25b:	e8 16 3f ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c260:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c263:	e8 c1 df ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c268:	29 c3                	sub    %eax,%ebx
f010c26a:	89 d8                	mov    %ebx,%eax
f010c26c:	83 f8 02             	cmp    $0x2,%eax
f010c26f:	74 14                	je     f010c285 <test_kmalloc+0x612>
f010c271:	83 ec 04             	sub    $0x4,%esp
f010c274:	68 34 ad 11 f0       	push   $0xf011ad34
f010c279:	6a 62                	push   $0x62
f010c27b:	68 ba ac 11 f0       	push   $0xf011acba
f010c280:	e8 f1 3e ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010c285:	e8 9f df ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c28a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c28d:	e8 5a f4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c292:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010c295:	83 ec 0c             	sub    $0xc,%esp
f010c298:	68 00 fc 2f 00       	push   $0x2ffc00
f010c29d:	e8 4d f7 ff ff       	call   f010b9ef <kmalloc>
f010c2a2:	83 c4 10             	add    $0x10,%esp
f010c2a5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c2ab:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010c2b1:	89 c1                	mov    %eax,%ecx
f010c2b3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010c2ba:	10 00 00 
f010c2bd:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c2c2:	0f b6 d0             	movzbl %al,%edx
f010c2c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010c2cb:	01 d0                	add    %edx,%eax
f010c2cd:	48                   	dec    %eax
f010c2ce:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010c2d4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010c2da:	ba 00 00 00 00       	mov    $0x0,%edx
f010c2df:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010c2e5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010c2eb:	29 d0                	sub    %edx,%eax
f010c2ed:	89 c3                	mov    %eax,%ebx
f010c2ef:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010c2f6:	10 00 00 
f010c2f9:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c2fe:	0f b6 c0             	movzbl %al,%eax
f010c301:	c1 e0 04             	shl    $0x4,%eax
f010c304:	89 c2                	mov    %eax,%edx
f010c306:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010c30c:	01 d0                	add    %edx,%eax
f010c30e:	48                   	dec    %eax
f010c30f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010c315:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010c31b:	ba 00 00 00 00       	mov    $0x0,%edx
f010c320:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010c326:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010c32c:	29 d0                	sub    %edx,%eax
f010c32e:	01 d8                	add    %ebx,%eax
f010c330:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010c335:	39 c1                	cmp    %eax,%ecx
f010c337:	74 14                	je     f010c34d <test_kmalloc+0x6da>
f010c339:	83 ec 04             	sub    $0x4,%esp
f010c33c:	68 98 ad 11 f0       	push   $0xf011ad98
f010c341:	6a 68                	push   $0x68
f010c343:	68 ba ac 11 f0       	push   $0xf011acba
f010c348:	e8 29 3e ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c34d:	e8 9a f3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c352:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c355:	74 14                	je     f010c36b <test_kmalloc+0x6f8>
f010c357:	83 ec 04             	sub    $0x4,%esp
f010c35a:	68 cc ac 11 f0       	push   $0xf011accc
f010c35f:	6a 69                	push   $0x69
f010c361:	68 ba ac 11 f0       	push   $0xf011acba
f010c366:	e8 0b 3e ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c36b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c36e:	e8 b6 de ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c373:	29 c3                	sub    %eax,%ebx
f010c375:	89 d8                	mov    %ebx,%eax
f010c377:	3d 00 03 00 00       	cmp    $0x300,%eax
f010c37c:	74 14                	je     f010c392 <test_kmalloc+0x71f>
f010c37e:	83 ec 04             	sub    $0x4,%esp
f010c381:	68 34 ad 11 f0       	push   $0xf011ad34
f010c386:	6a 6a                	push   $0x6a
f010c388:	68 ba ac 11 f0       	push   $0xf011acba
f010c38d:	e8 e4 3d ff ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010c392:	e8 92 de ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c397:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c39a:	e8 4d f3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c39f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010c3a2:	83 ec 0c             	sub    $0xc,%esp
f010c3a5:	68 00 fc 5f 00       	push   $0x5ffc00
f010c3aa:	e8 40 f6 ff ff       	call   f010b9ef <kmalloc>
f010c3af:	83 c4 10             	add    $0x10,%esp
f010c3b2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c3b8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010c3be:	89 c1                	mov    %eax,%ecx
f010c3c0:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010c3c7:	10 00 00 
f010c3ca:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c3cf:	0f b6 d0             	movzbl %al,%edx
f010c3d2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010c3d8:	01 d0                	add    %edx,%eax
f010c3da:	48                   	dec    %eax
f010c3db:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010c3e1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010c3e7:	ba 00 00 00 00       	mov    $0x0,%edx
f010c3ec:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010c3f2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010c3f8:	29 d0                	sub    %edx,%eax
f010c3fa:	89 c3                	mov    %eax,%ebx
f010c3fc:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010c403:	10 00 00 
f010c406:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c40b:	0f b6 c0             	movzbl %al,%eax
f010c40e:	c1 e0 04             	shl    $0x4,%eax
f010c411:	89 c2                	mov    %eax,%edx
f010c413:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010c419:	01 d0                	add    %edx,%eax
f010c41b:	48                   	dec    %eax
f010c41c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010c422:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010c428:	ba 00 00 00 00       	mov    $0x0,%edx
f010c42d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010c433:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010c439:	29 d0                	sub    %edx,%eax
f010c43b:	01 d8                	add    %ebx,%eax
f010c43d:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010c442:	39 c1                	cmp    %eax,%ecx
f010c444:	74 14                	je     f010c45a <test_kmalloc+0x7e7>
f010c446:	83 ec 04             	sub    $0x4,%esp
f010c449:	68 98 ad 11 f0       	push   $0xf011ad98
f010c44e:	6a 70                	push   $0x70
f010c450:	68 ba ac 11 f0       	push   $0xf011acba
f010c455:	e8 1c 3d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c45a:	e8 8d f2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c45f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c462:	74 14                	je     f010c478 <test_kmalloc+0x805>
f010c464:	83 ec 04             	sub    $0x4,%esp
f010c467:	68 cc ac 11 f0       	push   $0xf011accc
f010c46c:	6a 71                	push   $0x71
f010c46e:	68 ba ac 11 f0       	push   $0xf011acba
f010c473:	e8 fe 3c ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c478:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c47b:	e8 a9 dd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c480:	29 c3                	sub    %eax,%ebx
f010c482:	89 d8                	mov    %ebx,%eax
f010c484:	3d 00 06 00 00       	cmp    $0x600,%eax
f010c489:	74 14                	je     f010c49f <test_kmalloc+0x82c>
f010c48b:	83 ec 04             	sub    $0x4,%esp
f010c48e:	68 34 ad 11 f0       	push   $0xf011ad34
f010c493:	6a 72                	push   $0x72
f010c495:	68 ba ac 11 f0       	push   $0xf011acba
f010c49a:	e8 d7 3c ff ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010c49f:	e8 85 dd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c4a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c4a7:	e8 40 f2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c4ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010c4af:	83 ec 0c             	sub    $0xc,%esp
f010c4b2:	68 00 38 00 00       	push   $0x3800
f010c4b7:	e8 33 f5 ff ff       	call   f010b9ef <kmalloc>
f010c4bc:	83 c4 10             	add    $0x10,%esp
f010c4bf:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c4c5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010c4cb:	89 c1                	mov    %eax,%ecx
f010c4cd:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010c4d4:	10 00 00 
f010c4d7:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c4dc:	0f b6 d0             	movzbl %al,%edx
f010c4df:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010c4e5:	01 d0                	add    %edx,%eax
f010c4e7:	48                   	dec    %eax
f010c4e8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010c4ee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010c4f4:	ba 00 00 00 00       	mov    $0x0,%edx
f010c4f9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010c4ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010c505:	29 d0                	sub    %edx,%eax
f010c507:	89 c3                	mov    %eax,%ebx
f010c509:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010c510:	10 00 00 
f010c513:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010c518:	0f b6 c0             	movzbl %al,%eax
f010c51b:	c1 e0 04             	shl    $0x4,%eax
f010c51e:	89 c2                	mov    %eax,%edx
f010c520:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010c526:	01 d0                	add    %edx,%eax
f010c528:	48                   	dec    %eax
f010c529:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010c52f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010c535:	ba 00 00 00 00       	mov    $0x0,%edx
f010c53a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010c540:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010c546:	29 d0                	sub    %edx,%eax
f010c548:	01 d8                	add    %ebx,%eax
f010c54a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f010c54f:	39 c1                	cmp    %eax,%ecx
f010c551:	74 14                	je     f010c567 <test_kmalloc+0x8f4>
f010c553:	83 ec 04             	sub    $0x4,%esp
f010c556:	68 98 ad 11 f0       	push   $0xf011ad98
f010c55b:	6a 78                	push   $0x78
f010c55d:	68 ba ac 11 f0       	push   $0xf011acba
f010c562:	e8 0f 3c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c567:	e8 80 f1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c56c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c56f:	74 14                	je     f010c585 <test_kmalloc+0x912>
f010c571:	83 ec 04             	sub    $0x4,%esp
f010c574:	68 cc ac 11 f0       	push   $0xf011accc
f010c579:	6a 79                	push   $0x79
f010c57b:	68 ba ac 11 f0       	push   $0xf011acba
f010c580:	e8 f1 3b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c585:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c588:	e8 9c dc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c58d:	29 c3                	sub    %eax,%ebx
f010c58f:	89 d8                	mov    %ebx,%eax
f010c591:	83 f8 04             	cmp    $0x4,%eax
f010c594:	74 14                	je     f010c5aa <test_kmalloc+0x937>
f010c596:	83 ec 04             	sub    $0x4,%esp
f010c599:	68 34 ad 11 f0       	push   $0xf011ad34
f010c59e:	6a 7a                	push   $0x7a
f010c5a0:	68 ba ac 11 f0       	push   $0xf011acba
f010c5a5:	e8 cc 3b ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b50%");
f010c5aa:	83 ec 0c             	sub    $0xc,%esp
f010c5ad:	68 fe ad 11 f0       	push   $0xf011adfe
f010c5b2:	e8 de a7 ff ff       	call   f0106d95 <cprintf>
f010c5b7:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010c5ba:	e8 6a dc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c5bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010c5c2:	e8 25 f1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c5c7:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010c5ca:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010c5d1:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010c5d4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010c5da:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010c5e0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010c5e6:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010c5e9:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010c5eb:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010c5f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010c5f7:	01 c2                	add    %eax,%edx
f010c5f9:	8a 45 f2             	mov    -0xe(%ebp),%al
f010c5fc:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010c5fe:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010c604:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010c60a:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010c611:	fd 0f 00 
			shortArr[0] = minShort;
f010c614:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010c61a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c61d:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010c620:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010c626:	01 c0                	add    %eax,%eax
f010c628:	89 c2                	mov    %eax,%edx
f010c62a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010c630:	01 c2                	add    %eax,%edx
f010c632:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010c636:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010c639:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010c63f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010c645:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010c64c:	01 00 00 
			intArr[0] = minInt;
f010c64f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010c655:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c658:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010c65a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010c660:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c667:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010c66d:	01 c2                	add    %eax,%edx
f010c66f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c672:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010c674:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010c67a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010c680:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010c687:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010c68a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c690:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010c693:	88 10                	mov    %dl,(%eax)
f010c695:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010c69b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c69e:	66 89 42 02          	mov    %ax,0x2(%edx)
f010c6a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c6a8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c6ab:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010c6ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c6b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c6bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c6c1:	01 c2                	add    %eax,%edx
f010c6c3:	8a 45 f2             	mov    -0xe(%ebp),%al
f010c6c6:	88 02                	mov    %al,(%edx)
f010c6c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c6ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c6d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c6db:	01 c2                	add    %eax,%edx
f010c6dd:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010c6e1:	66 89 42 02          	mov    %ax,0x2(%edx)
f010c6e5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c6eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c6f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c6f8:	01 c2                	add    %eax,%edx
f010c6fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c6fd:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010c700:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010c707:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010c70a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010c710:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010c716:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c71c:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010c71f:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010c721:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010c727:	89 c2                	mov    %eax,%edx
f010c729:	c1 ea 1f             	shr    $0x1f,%edx
f010c72c:	01 d0                	add    %edx,%eax
f010c72e:	d1 f8                	sar    %eax
f010c730:	89 c2                	mov    %eax,%edx
f010c732:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c738:	01 c2                	add    %eax,%edx
f010c73a:	8a 45 f2             	mov    -0xe(%ebp),%al
f010c73d:	88 c1                	mov    %al,%cl
f010c73f:	c0 e9 07             	shr    $0x7,%cl
f010c742:	01 c8                	add    %ecx,%eax
f010c744:	d0 f8                	sar    %al
f010c746:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010c748:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010c74e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c754:	01 c2                	add    %eax,%edx
f010c756:	8a 45 f2             	mov    -0xe(%ebp),%al
f010c759:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010c75b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010c761:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010c767:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010c76e:	1b 00 00 
			shortArr2[0] = minShort;
f010c771:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010c777:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c77a:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010c77d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010c783:	01 c0                	add    %eax,%eax
f010c785:	89 c2                	mov    %eax,%edx
f010c787:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010c78d:	01 c2                	add    %eax,%edx
f010c78f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010c793:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010c796:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010c79c:	8a 00                	mov    (%eax),%al
f010c79e:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010c7a1:	75 15                	jne    f010c7b8 <test_kmalloc+0xb45>
f010c7a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010c7a9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010c7af:	01 d0                	add    %edx,%eax
f010c7b1:	8a 00                	mov    (%eax),%al
f010c7b3:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010c7b6:	74 17                	je     f010c7cf <test_kmalloc+0xb5c>
f010c7b8:	83 ec 04             	sub    $0x4,%esp
f010c7bb:	68 08 ae 11 f0       	push   $0xf011ae08
f010c7c0:	68 a9 00 00 00       	push   $0xa9
f010c7c5:	68 ba ac 11 f0       	push   $0xf011acba
f010c7ca:	e8 a7 39 ff ff       	call   f0100176 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010c7cf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010c7d5:	66 8b 00             	mov    (%eax),%ax
f010c7d8:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010c7dc:	75 1b                	jne    f010c7f9 <test_kmalloc+0xb86>
f010c7de:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010c7e4:	01 c0                	add    %eax,%eax
f010c7e6:	89 c2                	mov    %eax,%edx
f010c7e8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010c7ee:	01 d0                	add    %edx,%eax
f010c7f0:	66 8b 00             	mov    (%eax),%ax
f010c7f3:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010c7f7:	74 17                	je     f010c810 <test_kmalloc+0xb9d>
f010c7f9:	83 ec 04             	sub    $0x4,%esp
f010c7fc:	68 08 ae 11 f0       	push   $0xf011ae08
f010c801:	68 aa 00 00 00       	push   $0xaa
f010c806:	68 ba ac 11 f0       	push   $0xf011acba
f010c80b:	e8 66 39 ff ff       	call   f0100176 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010c810:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010c816:	8b 00                	mov    (%eax),%eax
f010c818:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010c81b:	75 1c                	jne    f010c839 <test_kmalloc+0xbc6>
f010c81d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010c823:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c82a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010c830:	01 d0                	add    %edx,%eax
f010c832:	8b 00                	mov    (%eax),%eax
f010c834:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010c837:	74 17                	je     f010c850 <test_kmalloc+0xbdd>
f010c839:	83 ec 04             	sub    $0x4,%esp
f010c83c:	68 08 ae 11 f0       	push   $0xf011ae08
f010c841:	68 ab 00 00 00       	push   $0xab
f010c846:	68 ba ac 11 f0       	push   $0xf011acba
f010c84b:	e8 26 39 ff ff       	call   f0100176 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010c850:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c856:	8a 00                	mov    (%eax),%al
f010c858:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010c85b:	75 1c                	jne    f010c879 <test_kmalloc+0xc06>
f010c85d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c863:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c86a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c870:	01 d0                	add    %edx,%eax
f010c872:	8a 00                	mov    (%eax),%al
f010c874:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010c877:	74 17                	je     f010c890 <test_kmalloc+0xc1d>
f010c879:	83 ec 04             	sub    $0x4,%esp
f010c87c:	68 08 ae 11 f0       	push   $0xf011ae08
f010c881:	68 ad 00 00 00       	push   $0xad
f010c886:	68 ba ac 11 f0       	push   $0xf011acba
f010c88b:	e8 e6 38 ff ff       	call   f0100176 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010c890:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c896:	66 8b 40 02          	mov    0x2(%eax),%ax
f010c89a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010c89e:	75 1f                	jne    f010c8bf <test_kmalloc+0xc4c>
f010c8a0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c8a6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c8ad:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c8b3:	01 d0                	add    %edx,%eax
f010c8b5:	66 8b 40 02          	mov    0x2(%eax),%ax
f010c8b9:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010c8bd:	74 17                	je     f010c8d6 <test_kmalloc+0xc63>
f010c8bf:	83 ec 04             	sub    $0x4,%esp
f010c8c2:	68 08 ae 11 f0       	push   $0xf011ae08
f010c8c7:	68 ae 00 00 00       	push   $0xae
f010c8cc:	68 ba ac 11 f0       	push   $0xf011acba
f010c8d1:	e8 a0 38 ff ff       	call   f0100176 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010c8d6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c8dc:	8b 40 04             	mov    0x4(%eax),%eax
f010c8df:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010c8e2:	75 1d                	jne    f010c901 <test_kmalloc+0xc8e>
f010c8e4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010c8ea:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c8f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010c8f7:	01 d0                	add    %edx,%eax
f010c8f9:	8b 40 04             	mov    0x4(%eax),%eax
f010c8fc:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010c8ff:	74 17                	je     f010c918 <test_kmalloc+0xca5>
f010c901:	83 ec 04             	sub    $0x4,%esp
f010c904:	68 08 ae 11 f0       	push   $0xf011ae08
f010c909:	68 af 00 00 00       	push   $0xaf
f010c90e:	68 ba ac 11 f0       	push   $0xf011acba
f010c913:	e8 5e 38 ff ff       	call   f0100176 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010c918:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c91e:	8a 00                	mov    (%eax),%al
f010c920:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010c923:	75 40                	jne    f010c965 <test_kmalloc+0xcf2>
f010c925:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010c92b:	89 c2                	mov    %eax,%edx
f010c92d:	c1 ea 1f             	shr    $0x1f,%edx
f010c930:	01 d0                	add    %edx,%eax
f010c932:	d1 f8                	sar    %eax
f010c934:	89 c2                	mov    %eax,%edx
f010c936:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c93c:	01 d0                	add    %edx,%eax
f010c93e:	8a 10                	mov    (%eax),%dl
f010c940:	8a 45 f2             	mov    -0xe(%ebp),%al
f010c943:	88 c1                	mov    %al,%cl
f010c945:	c0 e9 07             	shr    $0x7,%cl
f010c948:	01 c8                	add    %ecx,%eax
f010c94a:	d0 f8                	sar    %al
f010c94c:	38 c2                	cmp    %al,%dl
f010c94e:	75 15                	jne    f010c965 <test_kmalloc+0xcf2>
f010c950:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010c956:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010c95c:	01 d0                	add    %edx,%eax
f010c95e:	8a 00                	mov    (%eax),%al
f010c960:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010c963:	74 17                	je     f010c97c <test_kmalloc+0xd09>
f010c965:	83 ec 04             	sub    $0x4,%esp
f010c968:	68 08 ae 11 f0       	push   $0xf011ae08
f010c96d:	68 b1 00 00 00       	push   $0xb1
f010c972:	68 ba ac 11 f0       	push   $0xf011acba
f010c977:	e8 fa 37 ff ff       	call   f0100176 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010c97c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010c982:	66 8b 00             	mov    (%eax),%ax
f010c985:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010c989:	75 1b                	jne    f010c9a6 <test_kmalloc+0xd33>
f010c98b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010c991:	01 c0                	add    %eax,%eax
f010c993:	89 c2                	mov    %eax,%edx
f010c995:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010c99b:	01 d0                	add    %edx,%eax
f010c99d:	66 8b 00             	mov    (%eax),%ax
f010c9a0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010c9a4:	74 17                	je     f010c9bd <test_kmalloc+0xd4a>
f010c9a6:	83 ec 04             	sub    $0x4,%esp
f010c9a9:	68 08 ae 11 f0       	push   $0xf011ae08
f010c9ae:	68 b2 00 00 00       	push   $0xb2
f010c9b3:	68 ba ac 11 f0       	push   $0xf011acba
f010c9b8:	e8 b9 37 ff ff       	call   f0100176 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c9bd:	e8 67 d8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010c9c2:	89 c2                	mov    %eax,%edx
f010c9c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c9c7:	39 c2                	cmp    %eax,%edx
f010c9c9:	74 17                	je     f010c9e2 <test_kmalloc+0xd6f>
f010c9cb:	83 ec 04             	sub    $0x4,%esp
f010c9ce:	68 34 ad 11 f0       	push   $0xf011ad34
f010c9d3:	68 b4 00 00 00       	push   $0xb4
f010c9d8:	68 ba ac 11 f0       	push   $0xf011acba
f010c9dd:	e8 94 37 ff ff       	call   f0100176 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c9e2:	e8 05 ed ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010c9e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c9ea:	74 17                	je     f010ca03 <test_kmalloc+0xd90>
f010c9ec:	83 ec 04             	sub    $0x4,%esp
f010c9ef:	68 cc ac 11 f0       	push   $0xf011accc
f010c9f4:	68 b5 00 00 00       	push   $0xb5
f010c9f9:	68 ba ac 11 f0       	push   $0xf011acba
f010c9fe:	e8 73 37 ff ff       	call   f0100176 <_panic>
		}

		cprintf("\b\b\b80%");
f010ca03:	83 ec 0c             	sub    $0xc,%esp
f010ca06:	68 3d ae 11 f0       	push   $0xf011ae3d
f010ca0b:	e8 85 a3 ff ff       	call   f0106d95 <cprintf>
f010ca10:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010ca13:	e8 11 d8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ca18:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ca1b:	e8 cc ec ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ca20:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010ca23:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010ca2a:	10 00 00 
f010ca2d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ca32:	0f b6 d0             	movzbl %al,%edx
f010ca35:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ca3b:	01 d0                	add    %edx,%eax
f010ca3d:	48                   	dec    %eax
f010ca3e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010ca44:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010ca4a:	ba 00 00 00 00       	mov    $0x0,%edx
f010ca4f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010ca55:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010ca5b:	29 d0                	sub    %edx,%eax
f010ca5d:	89 c1                	mov    %eax,%ecx
f010ca5f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010ca66:	10 00 00 
f010ca69:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ca6e:	0f b6 c0             	movzbl %al,%eax
f010ca71:	c1 e0 04             	shl    $0x4,%eax
f010ca74:	89 c2                	mov    %eax,%edx
f010ca76:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010ca7c:	01 d0                	add    %edx,%eax
f010ca7e:	48                   	dec    %eax
f010ca7f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010ca85:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010ca8b:	ba 00 00 00 00       	mov    $0x0,%edx
f010ca90:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010ca96:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010ca9c:	29 d0                	sub    %edx,%eax
f010ca9e:	01 c8                	add    %ecx,%eax
f010caa0:	ba 00 90 2f 09       	mov    $0x92f9000,%edx
f010caa5:	29 c2                	sub    %eax,%edx
f010caa7:	89 d0                	mov    %edx,%eax
f010caa9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010caaf:	83 ec 0c             	sub    $0xc,%esp
f010cab2:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010cab8:	e8 32 ef ff ff       	call   f010b9ef <kmalloc>
f010cabd:	83 c4 10             	add    $0x10,%esp
f010cac0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010cac6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010cacc:	85 c0                	test   %eax,%eax
f010cace:	74 17                	je     f010cae7 <test_kmalloc+0xe74>
f010cad0:	83 ec 04             	sub    $0x4,%esp
f010cad3:	68 88 ac 11 f0       	push   $0xf011ac88
f010cad8:	68 bf 00 00 00       	push   $0xbf
f010cadd:	68 ba ac 11 f0       	push   $0xf011acba
f010cae2:	e8 8f 36 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010cae7:	e8 00 ec ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010caec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010caef:	74 17                	je     f010cb08 <test_kmalloc+0xe95>
f010caf1:	83 ec 04             	sub    $0x4,%esp
f010caf4:	68 cc ac 11 f0       	push   $0xf011accc
f010caf9:	68 c0 00 00 00       	push   $0xc0
f010cafe:	68 ba ac 11 f0       	push   $0xf011acba
f010cb03:	e8 6e 36 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cb08:	e8 1c d7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010cb0d:	89 c2                	mov    %eax,%edx
f010cb0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cb12:	39 c2                	cmp    %eax,%edx
f010cb14:	74 17                	je     f010cb2d <test_kmalloc+0xeba>
f010cb16:	83 ec 04             	sub    $0x4,%esp
f010cb19:	68 34 ad 11 f0       	push   $0xf011ad34
f010cb1e:	68 c1 00 00 00       	push   $0xc1
f010cb23:	68 ba ac 11 f0       	push   $0xf011acba
f010cb28:	e8 49 36 ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b90%");
f010cb2d:	83 ec 0c             	sub    $0xc,%esp
f010cb30:	68 44 ae 11 f0       	push   $0xf011ae44
f010cb35:	e8 5b a2 ff ff       	call   f0106d95 <cprintf>
f010cb3a:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010cb3d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010cb43:	05 00 40 00 00       	add    $0x4000,%eax
f010cb48:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010cb4e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010cb55:	10 00 00 
f010cb58:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cb5d:	0f b6 d0             	movzbl %al,%edx
f010cb60:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010cb66:	01 d0                	add    %edx,%eax
f010cb68:	48                   	dec    %eax
f010cb69:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010cb6f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010cb75:	ba 00 00 00 00       	mov    $0x0,%edx
f010cb7a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010cb80:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010cb86:	29 d0                	sub    %edx,%eax
f010cb88:	89 c1                	mov    %eax,%ecx
f010cb8a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010cb91:	10 00 00 
f010cb94:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cb99:	0f b6 c0             	movzbl %al,%eax
f010cb9c:	c1 e0 04             	shl    $0x4,%eax
f010cb9f:	89 c2                	mov    %eax,%edx
f010cba1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010cba7:	01 d0                	add    %edx,%eax
f010cba9:	48                   	dec    %eax
f010cbaa:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010cbb0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010cbb6:	ba 00 00 00 00       	mov    $0x0,%edx
f010cbbb:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010cbc1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010cbc7:	29 d0                	sub    %edx,%eax
f010cbc9:	01 c8                	add    %ecx,%eax
f010cbcb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010cbd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cbd3:	eb 6b                	jmp    f010cc40 <test_kmalloc+0xfcd>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010cbd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cbd8:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f010cbdd:	83 ec 04             	sub    $0x4,%esp
f010cbe0:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010cbe6:	51                   	push   %ecx
f010cbe7:	52                   	push   %edx
f010cbe8:	50                   	push   %eax
f010cbe9:	e8 27 6f ff ff       	call   f0103b15 <get_page_table>
f010cbee:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010cbf1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010cbf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cbfa:	c1 ea 0c             	shr    $0xc,%edx
f010cbfd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010cc03:	c1 e2 02             	shl    $0x2,%edx
f010cc06:	01 d0                	add    %edx,%eax
f010cc08:	8b 00                	mov    (%eax),%eax
f010cc0a:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cc0f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010cc15:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010cc1b:	83 e0 04             	and    $0x4,%eax
f010cc1e:	85 c0                	test   %eax,%eax
f010cc20:	74 17                	je     f010cc39 <test_kmalloc+0xfc6>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010cc22:	83 ec 04             	sub    $0x4,%esp
f010cc25:	68 4c ae 11 f0       	push   $0xf011ae4c
f010cc2a:	68 ce 00 00 00       	push   $0xce
f010cc2f:	68 ba ac 11 f0       	push   $0xf011acba
f010cc34:	e8 3d 35 ff ff       	call   f0100176 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010cc39:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010cc40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc43:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010cc49:	72 8a                	jb     f010cbd5 <test_kmalloc+0xf62>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010cc4b:	83 ec 0c             	sub    $0xc,%esp
f010cc4e:	68 96 ae 11 f0       	push   $0xf011ae96
f010cc53:	e8 3d a1 ff ff       	call   f0106d95 <cprintf>
f010cc58:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010cc5b:	83 ec 0c             	sub    $0xc,%esp
f010cc5e:	68 a0 ae 11 f0       	push   $0xf011aea0
f010cc63:	e8 2d a1 ff ff       	call   f0106d95 <cprintf>
f010cc68:	83 c4 10             	add    $0x10,%esp

	return 1;
f010cc6b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010cc70:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010cc73:	5b                   	pop    %ebx
f010cc74:	5f                   	pop    %edi
f010cc75:	5d                   	pop    %ebp
f010cc76:	c3                   	ret    

f010cc77 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010cc77:	55                   	push   %ebp
f010cc78:	89 e5                	mov    %esp,%ebp
f010cc7a:	57                   	push   %edi
f010cc7b:	53                   	push   %ebx
f010cc7c:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010cc82:	83 ec 0c             	sub    $0xc,%esp
f010cc85:	68 fc ab 11 f0       	push   $0xf011abfc
f010cc8a:	e8 06 a1 ff ff       	call   f0106d95 <cprintf>
f010cc8f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010cc92:	83 ec 0c             	sub    $0xc,%esp
f010cc95:	68 2c ac 11 f0       	push   $0xf011ac2c
f010cc9a:	e8 f6 a0 ff ff       	call   f0106d95 <cprintf>
f010cc9f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010cca2:	83 ec 0c             	sub    $0xc,%esp
f010cca5:	68 fc ab 11 f0       	push   $0xf011abfc
f010ccaa:	e8 e6 a0 ff ff       	call   f0106d95 <cprintf>
f010ccaf:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010ccb2:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010ccb8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010ccbd:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccc2:	89 d7                	mov    %edx,%edi
f010ccc4:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010ccc6:	83 ec 0c             	sub    $0xc,%esp
f010ccc9:	68 dc ae 11 f0       	push   $0xf011aedc
f010ccce:	e8 c2 a0 ff ff       	call   f0106d95 <cprintf>
f010ccd3:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010ccd6:	e8 4e d5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ccdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010ccde:	e8 09 ea ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010cce3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010cce6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010cced:	eb 1f                	jmp    f010cd0e <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010ccef:	83 ec 0c             	sub    $0xc,%esp
f010ccf2:	68 00 00 20 00       	push   $0x200000
f010ccf7:	e8 f3 ec ff ff       	call   f010b9ef <kmalloc>
f010ccfc:	83 c4 10             	add    $0x10,%esp
f010ccff:	89 c2                	mov    %eax,%edx
f010cd01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd04:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010cd0b:	ff 45 f4             	incl   -0xc(%ebp)
f010cd0e:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010cd12:	7e db                	jle    f010ccef <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f010cd14:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010cd1b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cd20:	0f b6 d0             	movzbl %al,%edx
f010cd23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd26:	01 d0                	add    %edx,%eax
f010cd28:	48                   	dec    %eax
f010cd29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cd2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cd2f:	ba 00 00 00 00       	mov    $0x0,%edx
f010cd34:	f7 75 e8             	divl   -0x18(%ebp)
f010cd37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cd3a:	29 d0                	sub    %edx,%eax
f010cd3c:	89 c1                	mov    %eax,%ecx
f010cd3e:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010cd45:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cd4a:	0f b6 c0             	movzbl %al,%eax
f010cd4d:	c1 e0 04             	shl    $0x4,%eax
f010cd50:	89 c2                	mov    %eax,%edx
f010cd52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd55:	01 d0                	add    %edx,%eax
f010cd57:	48                   	dec    %eax
f010cd58:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cd5b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cd5e:	ba 00 00 00 00       	mov    $0x0,%edx
f010cd63:	f7 75 e0             	divl   -0x20(%ebp)
f010cd66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cd69:	29 d0                	sub    %edx,%eax
f010cd6b:	01 c8                	add    %ecx,%eax
f010cd6d:	ba 00 f0 1f 00       	mov    $0x1ff000,%edx
f010cd72:	29 c2                	sub    %eax,%edx
f010cd74:	89 d0                	mov    %edx,%eax
f010cd76:	83 ec 0c             	sub    $0xc,%esp
f010cd79:	50                   	push   %eax
f010cd7a:	e8 70 ec ff ff       	call   f010b9ef <kmalloc>
f010cd7f:	83 c4 10             	add    $0x10,%esp
f010cd82:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010cd88:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010cd8e:	89 c1                	mov    %eax,%ecx
f010cd90:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010cd97:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cd9c:	0f b6 d0             	movzbl %al,%edx
f010cd9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cda2:	01 d0                	add    %edx,%eax
f010cda4:	48                   	dec    %eax
f010cda5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010cda8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cdab:	ba 00 00 00 00       	mov    $0x0,%edx
f010cdb0:	f7 75 d8             	divl   -0x28(%ebp)
f010cdb3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cdb6:	29 d0                	sub    %edx,%eax
f010cdb8:	89 c3                	mov    %eax,%ebx
f010cdba:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010cdc1:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cdc6:	0f b6 c0             	movzbl %al,%eax
f010cdc9:	c1 e0 04             	shl    $0x4,%eax
f010cdcc:	89 c2                	mov    %eax,%edx
f010cdce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cdd1:	01 d0                	add    %edx,%eax
f010cdd3:	48                   	dec    %eax
f010cdd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010cdd7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cdda:	ba 00 00 00 00       	mov    $0x0,%edx
f010cddf:	f7 75 d0             	divl   -0x30(%ebp)
f010cde2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cde5:	29 d0                	sub    %edx,%eax
f010cde7:	01 d8                	add    %ebx,%eax
f010cde9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010cdee:	39 c1                	cmp    %eax,%ecx
f010cdf0:	0f 85 4f 03 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010cdf6:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010cdfc:	89 c1                	mov    %eax,%ecx
f010cdfe:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010ce05:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ce0a:	0f b6 d0             	movzbl %al,%edx
f010ce0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ce10:	01 d0                	add    %edx,%eax
f010ce12:	48                   	dec    %eax
f010ce13:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ce16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ce19:	ba 00 00 00 00       	mov    $0x0,%edx
f010ce1e:	f7 75 c8             	divl   -0x38(%ebp)
f010ce21:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ce24:	29 d0                	sub    %edx,%eax
f010ce26:	89 c3                	mov    %eax,%ebx
f010ce28:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010ce2f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ce34:	0f b6 c0             	movzbl %al,%eax
f010ce37:	c1 e0 04             	shl    $0x4,%eax
f010ce3a:	89 c2                	mov    %eax,%edx
f010ce3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ce3f:	01 d0                	add    %edx,%eax
f010ce41:	48                   	dec    %eax
f010ce42:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010ce45:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ce48:	ba 00 00 00 00       	mov    $0x0,%edx
f010ce4d:	f7 75 c0             	divl   -0x40(%ebp)
f010ce50:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ce53:	29 d0                	sub    %edx,%eax
f010ce55:	01 d8                	add    %ebx,%eax
f010ce57:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010ce5c:	39 c1                	cmp    %eax,%ecx
f010ce5e:	0f 85 e1 02 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010ce64:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010ce6a:	89 c1                	mov    %eax,%ecx
f010ce6c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010ce73:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ce78:	0f b6 d0             	movzbl %al,%edx
f010ce7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ce7e:	01 d0                	add    %edx,%eax
f010ce80:	48                   	dec    %eax
f010ce81:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010ce84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010ce87:	ba 00 00 00 00       	mov    $0x0,%edx
f010ce8c:	f7 75 b8             	divl   -0x48(%ebp)
f010ce8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010ce92:	29 d0                	sub    %edx,%eax
f010ce94:	89 c3                	mov    %eax,%ebx
f010ce96:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010ce9d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cea2:	0f b6 c0             	movzbl %al,%eax
f010cea5:	c1 e0 04             	shl    $0x4,%eax
f010cea8:	89 c2                	mov    %eax,%edx
f010ceaa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010cead:	01 d0                	add    %edx,%eax
f010ceaf:	48                   	dec    %eax
f010ceb0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010ceb3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ceb6:	ba 00 00 00 00       	mov    $0x0,%edx
f010cebb:	f7 75 b0             	divl   -0x50(%ebp)
f010cebe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010cec1:	29 d0                	sub    %edx,%eax
f010cec3:	01 d8                	add    %ebx,%eax
f010cec5:	2d 00 00 00 09       	sub    $0x9000000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010ceca:	39 c1                	cmp    %eax,%ecx
f010cecc:	0f 85 73 02 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010ced2:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010ced8:	89 c1                	mov    %eax,%ecx
f010ceda:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010cee1:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cee6:	0f b6 d0             	movzbl %al,%edx
f010cee9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010ceec:	01 d0                	add    %edx,%eax
f010ceee:	48                   	dec    %eax
f010ceef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010cef2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010cef5:	ba 00 00 00 00       	mov    $0x0,%edx
f010cefa:	f7 75 a8             	divl   -0x58(%ebp)
f010cefd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010cf00:	29 d0                	sub    %edx,%eax
f010cf02:	89 c3                	mov    %eax,%ebx
f010cf04:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010cf0b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cf10:	0f b6 c0             	movzbl %al,%eax
f010cf13:	c1 e0 04             	shl    $0x4,%eax
f010cf16:	89 c2                	mov    %eax,%edx
f010cf18:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010cf1b:	01 d0                	add    %edx,%eax
f010cf1d:	48                   	dec    %eax
f010cf1e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010cf21:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010cf24:	ba 00 00 00 00       	mov    $0x0,%edx
f010cf29:	f7 75 a0             	divl   -0x60(%ebp)
f010cf2c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010cf2f:	29 d0                	sub    %edx,%eax
f010cf31:	01 d8                	add    %ebx,%eax
f010cf33:	2d 00 00 c0 08       	sub    $0x8c00000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010cf38:	39 c1                	cmp    %eax,%ecx
f010cf3a:	0f 85 05 02 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010cf40:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010cf46:	89 c1                	mov    %eax,%ecx
f010cf48:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010cf4f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cf54:	0f b6 d0             	movzbl %al,%edx
f010cf57:	8b 45 98             	mov    -0x68(%ebp),%eax
f010cf5a:	01 d0                	add    %edx,%eax
f010cf5c:	48                   	dec    %eax
f010cf5d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010cf60:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010cf63:	ba 00 00 00 00       	mov    $0x0,%edx
f010cf68:	f7 75 98             	divl   -0x68(%ebp)
f010cf6b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010cf6e:	29 d0                	sub    %edx,%eax
f010cf70:	89 c3                	mov    %eax,%ebx
f010cf72:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010cf79:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cf7e:	0f b6 c0             	movzbl %al,%eax
f010cf81:	c1 e0 04             	shl    $0x4,%eax
f010cf84:	89 c2                	mov    %eax,%edx
f010cf86:	8b 45 90             	mov    -0x70(%ebp),%eax
f010cf89:	01 d0                	add    %edx,%eax
f010cf8b:	48                   	dec    %eax
f010cf8c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010cf8f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010cf92:	ba 00 00 00 00       	mov    $0x0,%edx
f010cf97:	f7 75 90             	divl   -0x70(%ebp)
f010cf9a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010cf9d:	29 d0                	sub    %edx,%eax
f010cf9f:	01 d8                	add    %ebx,%eax
f010cfa1:	2d 00 00 20 08       	sub    $0x8200000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010cfa6:	39 c1                	cmp    %eax,%ecx
f010cfa8:	0f 85 97 01 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010cfae:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010cfb4:	89 c1                	mov    %eax,%ecx
f010cfb6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010cfbd:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cfc2:	0f b6 d0             	movzbl %al,%edx
f010cfc5:	8b 45 88             	mov    -0x78(%ebp),%eax
f010cfc8:	01 d0                	add    %edx,%eax
f010cfca:	48                   	dec    %eax
f010cfcb:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010cfce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010cfd1:	ba 00 00 00 00       	mov    $0x0,%edx
f010cfd6:	f7 75 88             	divl   -0x78(%ebp)
f010cfd9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010cfdc:	29 d0                	sub    %edx,%eax
f010cfde:	89 c3                	mov    %eax,%ebx
f010cfe0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010cfe7:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010cfec:	0f b6 c0             	movzbl %al,%eax
f010cfef:	c1 e0 04             	shl    $0x4,%eax
f010cff2:	89 c2                	mov    %eax,%edx
f010cff4:	8b 45 80             	mov    -0x80(%ebp),%eax
f010cff7:	01 d0                	add    %edx,%eax
f010cff9:	48                   	dec    %eax
f010cffa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010d000:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d006:	ba 00 00 00 00       	mov    $0x0,%edx
f010d00b:	f7 75 80             	divl   -0x80(%ebp)
f010d00e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d014:	29 d0                	sub    %edx,%eax
f010d016:	01 d8                	add    %ebx,%eax
f010d018:	2d 00 00 80 07       	sub    $0x7800000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010d01d:	39 c1                	cmp    %eax,%ecx
f010d01f:	0f 85 20 01 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010d025:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010d02b:	89 c1                	mov    %eax,%ecx
f010d02d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010d034:	10 00 00 
f010d037:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d03c:	0f b6 d0             	movzbl %al,%edx
f010d03f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010d045:	01 d0                	add    %edx,%eax
f010d047:	48                   	dec    %eax
f010d048:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010d04e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d054:	ba 00 00 00 00       	mov    $0x0,%edx
f010d059:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010d05f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d065:	29 d0                	sub    %edx,%eax
f010d067:	89 c3                	mov    %eax,%ebx
f010d069:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010d070:	10 00 00 
f010d073:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d078:	0f b6 c0             	movzbl %al,%eax
f010d07b:	c1 e0 04             	shl    $0x4,%eax
f010d07e:	89 c2                	mov    %eax,%edx
f010d080:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010d086:	01 d0                	add    %edx,%eax
f010d088:	48                   	dec    %eax
f010d089:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010d08f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d095:	ba 00 00 00 00       	mov    $0x0,%edx
f010d09a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010d0a0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d0a6:	29 d0                	sub    %edx,%eax
f010d0a8:	01 d8                	add    %ebx,%eax
f010d0aa:	2d 00 00 e0 06       	sub    $0x6e00000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010d0af:	39 c1                	cmp    %eax,%ecx
f010d0b1:	0f 85 8e 00 00 00    	jne    f010d145 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010d0b7:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010d0bd:	89 c1                	mov    %eax,%ecx
f010d0bf:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010d0c6:	10 00 00 
f010d0c9:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d0ce:	0f b6 d0             	movzbl %al,%edx
f010d0d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010d0d7:	01 d0                	add    %edx,%eax
f010d0d9:	48                   	dec    %eax
f010d0da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010d0e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d0e6:	ba 00 00 00 00       	mov    $0x0,%edx
f010d0eb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010d0f1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d0f7:	29 d0                	sub    %edx,%eax
f010d0f9:	89 c3                	mov    %eax,%ebx
f010d0fb:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010d102:	10 00 00 
f010d105:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d10a:	0f b6 c0             	movzbl %al,%eax
f010d10d:	c1 e0 04             	shl    $0x4,%eax
f010d110:	89 c2                	mov    %eax,%edx
f010d112:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010d118:	01 d0                	add    %edx,%eax
f010d11a:	48                   	dec    %eax
f010d11b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010d121:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d127:	ba 00 00 00 00       	mov    $0x0,%edx
f010d12c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010d132:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d138:	29 d0                	sub    %edx,%eax
f010d13a:	01 d8                	add    %ebx,%eax
f010d13c:	2d 00 00 20 00       	sub    $0x200000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010d141:	39 c1                	cmp    %eax,%ecx
f010d143:	74 17                	je     f010d15c <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010d145:	83 ec 04             	sub    $0x4,%esp
f010d148:	68 2c af 11 f0       	push   $0xf011af2c
f010d14d:	68 fa 00 00 00       	push   $0xfa
f010d152:	68 ba ac 11 f0       	push   $0xf011acba
f010d157:	e8 1a 30 ff ff       	call   f0100176 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d15c:	e8 8b e5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d161:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d164:	74 17                	je     f010d17d <test_kmalloc_nextfit+0x506>
f010d166:	83 ec 04             	sub    $0x4,%esp
f010d169:	68 cc ac 11 f0       	push   $0xf011accc
f010d16e:	68 fc 00 00 00       	push   $0xfc
f010d173:	68 ba ac 11 f0       	push   $0xf011acba
f010d178:	e8 f9 2f ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010d17d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d180:	e8 a4 d0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d185:	29 c3                	sub    %eax,%ebx
f010d187:	89 d9                	mov    %ebx,%ecx
f010d189:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010d190:	10 00 00 
f010d193:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d198:	0f b6 d0             	movzbl %al,%edx
f010d19b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010d1a1:	01 d0                	add    %edx,%eax
f010d1a3:	48                   	dec    %eax
f010d1a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010d1aa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d1b0:	ba 00 00 00 00       	mov    $0x0,%edx
f010d1b5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010d1bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d1c1:	29 d0                	sub    %edx,%eax
f010d1c3:	89 c3                	mov    %eax,%ebx
f010d1c5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010d1cc:	10 00 00 
f010d1cf:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d1d4:	0f b6 c0             	movzbl %al,%eax
f010d1d7:	c1 e0 04             	shl    $0x4,%eax
f010d1da:	89 c2                	mov    %eax,%edx
f010d1dc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010d1e2:	01 d0                	add    %edx,%eax
f010d1e4:	48                   	dec    %eax
f010d1e5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010d1eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d1f1:	ba 00 00 00 00       	mov    $0x0,%edx
f010d1f6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010d1fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d202:	29 d0                	sub    %edx,%eax
f010d204:	01 d8                	add    %ebx,%eax
f010d206:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f010d20b:	29 c2                	sub    %eax,%edx
f010d20d:	89 d0                	mov    %edx,%eax
f010d20f:	c1 e8 0c             	shr    $0xc,%eax
f010d212:	39 c1                	cmp    %eax,%ecx
f010d214:	74 17                	je     f010d22d <test_kmalloc_nextfit+0x5b6>
f010d216:	83 ec 04             	sub    $0x4,%esp
f010d219:	68 6f af 11 f0       	push   $0xf011af6f
f010d21e:	68 fd 00 00 00       	push   $0xfd
f010d223:	68 ba ac 11 f0       	push   $0xf011acba
f010d228:	e8 49 2f ff ff       	call   f0100176 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f010d22d:	e8 ba e4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d232:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d235:	e8 ef cf ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d23a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f010d23d:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010d243:	83 ec 0c             	sub    $0xc,%esp
f010d246:	50                   	push   %eax
f010d247:	e8 bc e8 ff ff       	call   f010bb08 <kfree>
f010d24c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f010d24f:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010d255:	83 ec 0c             	sub    $0xc,%esp
f010d258:	50                   	push   %eax
f010d259:	e8 aa e8 ff ff       	call   f010bb08 <kfree>
f010d25e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f010d261:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f010d267:	83 ec 0c             	sub    $0xc,%esp
f010d26a:	50                   	push   %eax
f010d26b:	e8 98 e8 ff ff       	call   f010bb08 <kfree>
f010d270:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f010d273:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f010d279:	83 ec 0c             	sub    $0xc,%esp
f010d27c:	50                   	push   %eax
f010d27d:	e8 86 e8 ff ff       	call   f010bb08 <kfree>
f010d282:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f010d285:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010d28b:	83 ec 0c             	sub    $0xc,%esp
f010d28e:	50                   	push   %eax
f010d28f:	e8 74 e8 ff ff       	call   f010bb08 <kfree>
f010d294:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f010d297:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f010d29d:	83 ec 0c             	sub    $0xc,%esp
f010d2a0:	50                   	push   %eax
f010d2a1:	e8 62 e8 ff ff       	call   f010bb08 <kfree>
f010d2a6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f010d2a9:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f010d2af:	83 ec 0c             	sub    $0xc,%esp
f010d2b2:	50                   	push   %eax
f010d2b3:	e8 50 e8 ff ff       	call   f010bb08 <kfree>
f010d2b8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f010d2bb:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010d2c1:	83 ec 0c             	sub    $0xc,%esp
f010d2c4:	50                   	push   %eax
f010d2c5:	e8 3e e8 ff ff       	call   f010bb08 <kfree>
f010d2ca:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f010d2cd:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010d2d3:	83 ec 0c             	sub    $0xc,%esp
f010d2d6:	50                   	push   %eax
f010d2d7:	e8 2c e8 ff ff       	call   f010bb08 <kfree>
f010d2dc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f010d2df:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010d2e5:	83 ec 0c             	sub    $0xc,%esp
f010d2e8:	50                   	push   %eax
f010d2e9:	e8 1a e8 ff ff       	call   f010bb08 <kfree>
f010d2ee:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d2f1:	e8 f6 e3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d2f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d2f9:	74 17                	je     f010d312 <test_kmalloc_nextfit+0x69b>
f010d2fb:	83 ec 04             	sub    $0x4,%esp
f010d2fe:	68 cc ac 11 f0       	push   $0xf011accc
f010d303:	68 0e 01 00 00       	push   $0x10e
f010d308:	68 ba ac 11 f0       	push   $0xf011acba
f010d30d:	e8 64 2e ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010d312:	e8 12 cf ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d317:	89 c2                	mov    %eax,%edx
f010d319:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d31c:	89 d1                	mov    %edx,%ecx
f010d31e:	29 c1                	sub    %eax,%ecx
f010d320:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010d327:	10 00 00 
f010d32a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d32f:	0f b6 d0             	movzbl %al,%edx
f010d332:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010d338:	01 d0                	add    %edx,%eax
f010d33a:	48                   	dec    %eax
f010d33b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010d341:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d347:	ba 00 00 00 00       	mov    $0x0,%edx
f010d34c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010d352:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d358:	29 d0                	sub    %edx,%eax
f010d35a:	89 c3                	mov    %eax,%ebx
f010d35c:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f010d363:	10 00 00 
f010d366:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d36b:	0f b6 c0             	movzbl %al,%eax
f010d36e:	c1 e0 04             	shl    $0x4,%eax
f010d371:	89 c2                	mov    %eax,%edx
f010d373:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010d379:	01 d0                	add    %edx,%eax
f010d37b:	48                   	dec    %eax
f010d37c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f010d382:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d388:	ba 00 00 00 00       	mov    $0x0,%edx
f010d38d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f010d393:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d399:	29 d0                	sub    %edx,%eax
f010d39b:	01 d8                	add    %ebx,%eax
f010d39d:	ba 00 f0 3f 01       	mov    $0x13ff000,%edx
f010d3a2:	29 c2                	sub    %eax,%edx
f010d3a4:	89 d0                	mov    %edx,%eax
f010d3a6:	c1 e8 0c             	shr    $0xc,%eax
f010d3a9:	39 c1                	cmp    %eax,%ecx
f010d3ab:	74 17                	je     f010d3c4 <test_kmalloc_nextfit+0x74d>
f010d3ad:	83 ec 04             	sub    $0x4,%esp
f010d3b0:	68 80 af 11 f0       	push   $0xf011af80
f010d3b5:	68 0f 01 00 00       	push   $0x10f
f010d3ba:	68 ba ac 11 f0       	push   $0xf011acba
f010d3bf:	e8 b2 2d ff ff       	call   f0100176 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f010d3c4:	e8 23 e3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d3c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d3cc:	e8 58 ce ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d3d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f010d3d4:	83 ec 0c             	sub    $0xc,%esp
f010d3d7:	68 00 fc 0f 00       	push   $0xffc00
f010d3dc:	e8 0e e6 ff ff       	call   f010b9ef <kmalloc>
f010d3e1:	83 c4 10             	add    $0x10,%esp
f010d3e4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f010d3ea:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010d3f1:	10 00 00 
f010d3f4:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d3f9:	0f b6 d0             	movzbl %al,%edx
f010d3fc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010d402:	01 d0                	add    %edx,%eax
f010d404:	48                   	dec    %eax
f010d405:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010d40b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d411:	ba 00 00 00 00       	mov    $0x0,%edx
f010d416:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010d41c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d422:	29 d0                	sub    %edx,%eax
f010d424:	89 c1                	mov    %eax,%ecx
f010d426:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010d42d:	10 00 00 
f010d430:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d435:	0f b6 c0             	movzbl %al,%eax
f010d438:	c1 e0 04             	shl    $0x4,%eax
f010d43b:	89 c2                	mov    %eax,%edx
f010d43d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010d443:	01 d0                	add    %edx,%eax
f010d445:	48                   	dec    %eax
f010d446:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010d44c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d452:	ba 00 00 00 00       	mov    $0x0,%edx
f010d457:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010d45d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d463:	29 d0                	sub    %edx,%eax
f010d465:	01 c8                	add    %ecx,%eax
f010d467:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010d46d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d473:	39 c2                	cmp    %eax,%edx
f010d475:	74 17                	je     f010d48e <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f010d477:	83 ec 04             	sub    $0x4,%esp
f010d47a:	68 c0 af 11 f0       	push   $0xf011afc0
f010d47f:	68 16 01 00 00       	push   $0x116
f010d484:	68 ba ac 11 f0       	push   $0xf011acba
f010d489:	e8 e8 2c ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d48e:	e8 59 e2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d493:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d496:	74 17                	je     f010d4af <test_kmalloc_nextfit+0x838>
f010d498:	83 ec 04             	sub    $0x4,%esp
f010d49b:	68 cc ac 11 f0       	push   $0xf011accc
f010d4a0:	68 17 01 00 00       	push   $0x117
f010d4a5:	68 ba ac 11 f0       	push   $0xf011acba
f010d4aa:	e8 c7 2c ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010d4af:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d4b2:	e8 72 cd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d4b7:	29 c3                	sub    %eax,%ebx
f010d4b9:	89 d8                	mov    %ebx,%eax
f010d4bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f010d4c0:	74 17                	je     f010d4d9 <test_kmalloc_nextfit+0x862>
f010d4c2:	83 ec 04             	sub    $0x4,%esp
f010d4c5:	68 6f af 11 f0       	push   $0xf011af6f
f010d4ca:	68 18 01 00 00       	push   $0x118
f010d4cf:	68 ba ac 11 f0       	push   $0xf011acba
f010d4d4:	e8 9d 2c ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d4d9:	e8 0e e2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d4de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d4e1:	e8 43 cd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d4e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f010d4e9:	83 ec 0c             	sub    $0xc,%esp
f010d4ec:	68 00 04 00 00       	push   $0x400
f010d4f1:	e8 f9 e4 ff ff       	call   f010b9ef <kmalloc>
f010d4f6:	83 c4 10             	add    $0x10,%esp
f010d4f9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f010d4ff:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010d506:	10 00 00 
f010d509:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d50e:	0f b6 d0             	movzbl %al,%edx
f010d511:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010d517:	01 d0                	add    %edx,%eax
f010d519:	48                   	dec    %eax
f010d51a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010d520:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010d526:	ba 00 00 00 00       	mov    $0x0,%edx
f010d52b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010d531:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010d537:	29 d0                	sub    %edx,%eax
f010d539:	89 c1                	mov    %eax,%ecx
f010d53b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010d542:	10 00 00 
f010d545:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d54a:	0f b6 c0             	movzbl %al,%eax
f010d54d:	c1 e0 04             	shl    $0x4,%eax
f010d550:	89 c2                	mov    %eax,%edx
f010d552:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d558:	01 d0                	add    %edx,%eax
f010d55a:	48                   	dec    %eax
f010d55b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010d561:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010d567:	ba 00 00 00 00       	mov    $0x0,%edx
f010d56c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010d572:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010d578:	29 d0                	sub    %edx,%eax
f010d57a:	01 c8                	add    %ecx,%eax
f010d57c:	8d 90 00 00 10 f6    	lea    -0x9f00000(%eax),%edx
f010d582:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d588:	39 c2                	cmp    %eax,%edx
f010d58a:	74 17                	je     f010d5a3 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f010d58c:	83 ec 04             	sub    $0x4,%esp
f010d58f:	68 c0 af 11 f0       	push   $0xf011afc0
f010d594:	68 1e 01 00 00       	push   $0x11e
f010d599:	68 ba ac 11 f0       	push   $0xf011acba
f010d59e:	e8 d3 2b ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d5a3:	e8 44 e1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d5a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d5ab:	74 17                	je     f010d5c4 <test_kmalloc_nextfit+0x94d>
f010d5ad:	83 ec 04             	sub    $0x4,%esp
f010d5b0:	68 cc ac 11 f0       	push   $0xf011accc
f010d5b5:	68 1f 01 00 00       	push   $0x11f
f010d5ba:	68 ba ac 11 f0       	push   $0xf011acba
f010d5bf:	e8 b2 2b ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010d5c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d5c7:	e8 5d cc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d5cc:	29 c3                	sub    %eax,%ebx
f010d5ce:	89 d8                	mov    %ebx,%eax
f010d5d0:	83 f8 01             	cmp    $0x1,%eax
f010d5d3:	74 17                	je     f010d5ec <test_kmalloc_nextfit+0x975>
f010d5d5:	83 ec 04             	sub    $0x4,%esp
f010d5d8:	68 6f af 11 f0       	push   $0xf011af6f
f010d5dd:	68 20 01 00 00       	push   $0x120
f010d5e2:	68 ba ac 11 f0       	push   $0xf011acba
f010d5e7:	e8 8a 2b ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d5ec:	e8 fb e0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d5f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d5f4:	e8 30 cc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d5f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f010d5fc:	83 ec 0c             	sub    $0xc,%esp
f010d5ff:	68 00 00 50 00       	push   $0x500000
f010d604:	e8 e6 e3 ff ff       	call   f010b9ef <kmalloc>
f010d609:	83 c4 10             	add    $0x10,%esp
f010d60c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f010d612:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010d619:	10 00 00 
f010d61c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d621:	0f b6 d0             	movzbl %al,%edx
f010d624:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010d62a:	01 d0                	add    %edx,%eax
f010d62c:	48                   	dec    %eax
f010d62d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010d633:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010d639:	ba 00 00 00 00       	mov    $0x0,%edx
f010d63e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010d644:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010d64a:	29 d0                	sub    %edx,%eax
f010d64c:	89 c1                	mov    %eax,%ecx
f010d64e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f010d655:	10 00 00 
f010d658:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d65d:	0f b6 c0             	movzbl %al,%eax
f010d660:	c1 e0 04             	shl    $0x4,%eax
f010d663:	89 c2                	mov    %eax,%edx
f010d665:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010d66b:	01 d0                	add    %edx,%eax
f010d66d:	48                   	dec    %eax
f010d66e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f010d674:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010d67a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d67f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f010d685:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010d68b:	29 d0                	sub    %edx,%eax
f010d68d:	01 c8                	add    %ecx,%eax
f010d68f:	8d 90 00 00 40 f7    	lea    -0x8c00000(%eax),%edx
f010d695:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d69b:	39 c2                	cmp    %eax,%edx
f010d69d:	74 17                	je     f010d6b6 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f010d69f:	83 ec 04             	sub    $0x4,%esp
f010d6a2:	68 c0 af 11 f0       	push   $0xf011afc0
f010d6a7:	68 26 01 00 00       	push   $0x126
f010d6ac:	68 ba ac 11 f0       	push   $0xf011acba
f010d6b1:	e8 c0 2a ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d6b6:	e8 31 e0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d6bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d6be:	74 17                	je     f010d6d7 <test_kmalloc_nextfit+0xa60>
f010d6c0:	83 ec 04             	sub    $0x4,%esp
f010d6c3:	68 cc ac 11 f0       	push   $0xf011accc
f010d6c8:	68 27 01 00 00       	push   $0x127
f010d6cd:	68 ba ac 11 f0       	push   $0xf011acba
f010d6d2:	e8 9f 2a ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010d6d7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d6da:	e8 4a cb ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d6df:	29 c3                	sub    %eax,%ebx
f010d6e1:	89 d8                	mov    %ebx,%eax
f010d6e3:	3d 00 05 00 00       	cmp    $0x500,%eax
f010d6e8:	74 17                	je     f010d701 <test_kmalloc_nextfit+0xa8a>
f010d6ea:	83 ec 04             	sub    $0x4,%esp
f010d6ed:	68 6f af 11 f0       	push   $0xf011af6f
f010d6f2:	68 28 01 00 00       	push   $0x128
f010d6f7:	68 ba ac 11 f0       	push   $0xf011acba
f010d6fc:	e8 75 2a ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d701:	e8 e6 df ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d706:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d709:	e8 1b cb ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d70e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f010d711:	83 ec 0c             	sub    $0xc,%esp
f010d714:	68 00 00 10 00       	push   $0x100000
f010d719:	e8 d1 e2 ff ff       	call   f010b9ef <kmalloc>
f010d71e:	83 c4 10             	add    $0x10,%esp
f010d721:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f010d727:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f010d72e:	10 00 00 
f010d731:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d736:	0f b6 d0             	movzbl %al,%edx
f010d739:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010d73f:	01 d0                	add    %edx,%eax
f010d741:	48                   	dec    %eax
f010d742:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f010d748:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010d74e:	ba 00 00 00 00       	mov    $0x0,%edx
f010d753:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f010d759:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010d75f:	29 d0                	sub    %edx,%eax
f010d761:	89 c1                	mov    %eax,%ecx
f010d763:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f010d76a:	10 00 00 
f010d76d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d772:	0f b6 c0             	movzbl %al,%eax
f010d775:	c1 e0 04             	shl    $0x4,%eax
f010d778:	89 c2                	mov    %eax,%edx
f010d77a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010d780:	01 d0                	add    %edx,%eax
f010d782:	48                   	dec    %eax
f010d783:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f010d789:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010d78f:	ba 00 00 00 00       	mov    $0x0,%edx
f010d794:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f010d79a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010d7a0:	29 d0                	sub    %edx,%eax
f010d7a2:	01 c8                	add    %ecx,%eax
f010d7a4:	8d 90 00 00 90 f7    	lea    -0x8700000(%eax),%edx
f010d7aa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d7b0:	39 c2                	cmp    %eax,%edx
f010d7b2:	74 17                	je     f010d7cb <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f010d7b4:	83 ec 04             	sub    $0x4,%esp
f010d7b7:	68 c0 af 11 f0       	push   $0xf011afc0
f010d7bc:	68 2e 01 00 00       	push   $0x12e
f010d7c1:	68 ba ac 11 f0       	push   $0xf011acba
f010d7c6:	e8 ab 29 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d7cb:	e8 1c df ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d7d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d7d3:	74 17                	je     f010d7ec <test_kmalloc_nextfit+0xb75>
f010d7d5:	83 ec 04             	sub    $0x4,%esp
f010d7d8:	68 cc ac 11 f0       	push   $0xf011accc
f010d7dd:	68 2f 01 00 00       	push   $0x12f
f010d7e2:	68 ba ac 11 f0       	push   $0xf011acba
f010d7e7:	e8 8a 29 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010d7ec:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d7ef:	e8 35 ca ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d7f4:	29 c3                	sub    %eax,%ebx
f010d7f6:	89 d8                	mov    %ebx,%eax
f010d7f8:	3d 00 01 00 00       	cmp    $0x100,%eax
f010d7fd:	74 17                	je     f010d816 <test_kmalloc_nextfit+0xb9f>
f010d7ff:	83 ec 04             	sub    $0x4,%esp
f010d802:	68 6f af 11 f0       	push   $0xf011af6f
f010d807:	68 30 01 00 00       	push   $0x130
f010d80c:	68 ba ac 11 f0       	push   $0xf011acba
f010d811:	e8 60 29 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d816:	e8 d1 de ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d81b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d81e:	e8 06 ca ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d823:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f010d826:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010d82c:	83 ec 0c             	sub    $0xc,%esp
f010d82f:	50                   	push   %eax
f010d830:	e8 d3 e2 ff ff       	call   f010bb08 <kfree>
f010d835:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d838:	e8 af de ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d83d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d840:	74 17                	je     f010d859 <test_kmalloc_nextfit+0xbe2>
f010d842:	83 ec 04             	sub    $0x4,%esp
f010d845:	68 cc ac 11 f0       	push   $0xf011accc
f010d84a:	68 35 01 00 00       	push   $0x135
f010d84f:	68 ba ac 11 f0       	push   $0xf011acba
f010d854:	e8 1d 29 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010d859:	e8 cb c9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d85e:	89 c2                	mov    %eax,%edx
f010d860:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d863:	29 c2                	sub    %eax,%edx
f010d865:	89 d0                	mov    %edx,%eax
f010d867:	3d 00 02 00 00       	cmp    $0x200,%eax
f010d86c:	74 17                	je     f010d885 <test_kmalloc_nextfit+0xc0e>
f010d86e:	83 ec 04             	sub    $0x4,%esp
f010d871:	68 80 af 11 f0       	push   $0xf011af80
f010d876:	68 36 01 00 00       	push   $0x136
f010d87b:	68 ba ac 11 f0       	push   $0xf011acba
f010d880:	e8 f1 28 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d885:	e8 62 de ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d88a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d88d:	e8 97 c9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f010d895:	83 ec 0c             	sub    $0xc,%esp
f010d898:	68 00 04 00 00       	push   $0x400
f010d89d:	e8 4d e1 ff ff       	call   f010b9ef <kmalloc>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f010d8ab:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f010d8b2:	10 00 00 
f010d8b5:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d8ba:	0f b6 d0             	movzbl %al,%edx
f010d8bd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010d8c3:	01 d0                	add    %edx,%eax
f010d8c5:	48                   	dec    %eax
f010d8c6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f010d8cc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010d8d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010d8d7:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f010d8dd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010d8e3:	29 d0                	sub    %edx,%eax
f010d8e5:	89 c1                	mov    %eax,%ecx
f010d8e7:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f010d8ee:	10 00 00 
f010d8f1:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d8f6:	0f b6 c0             	movzbl %al,%eax
f010d8f9:	c1 e0 04             	shl    $0x4,%eax
f010d8fc:	89 c2                	mov    %eax,%edx
f010d8fe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010d904:	01 d0                	add    %edx,%eax
f010d906:	48                   	dec    %eax
f010d907:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f010d90d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010d913:	ba 00 00 00 00       	mov    $0x0,%edx
f010d918:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f010d91e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010d924:	29 d0                	sub    %edx,%eax
f010d926:	01 c8                	add    %ecx,%eax
f010d928:	8d 90 00 00 e0 f7    	lea    -0x8200000(%eax),%edx
f010d92e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d934:	39 c2                	cmp    %eax,%edx
f010d936:	74 17                	je     f010d94f <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f010d938:	83 ec 04             	sub    $0x4,%esp
f010d93b:	68 c0 af 11 f0       	push   $0xf011afc0
f010d940:	68 3c 01 00 00       	push   $0x13c
f010d945:	68 ba ac 11 f0       	push   $0xf011acba
f010d94a:	e8 27 28 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d94f:	e8 98 dd ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d954:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d957:	74 17                	je     f010d970 <test_kmalloc_nextfit+0xcf9>
f010d959:	83 ec 04             	sub    $0x4,%esp
f010d95c:	68 cc ac 11 f0       	push   $0xf011accc
f010d961:	68 3d 01 00 00       	push   $0x13d
f010d966:	68 ba ac 11 f0       	push   $0xf011acba
f010d96b:	e8 06 28 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010d970:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010d973:	e8 b1 c8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d978:	29 c3                	sub    %eax,%ebx
f010d97a:	89 d8                	mov    %ebx,%eax
f010d97c:	83 f8 01             	cmp    $0x1,%eax
f010d97f:	74 17                	je     f010d998 <test_kmalloc_nextfit+0xd21>
f010d981:	83 ec 04             	sub    $0x4,%esp
f010d984:	68 6f af 11 f0       	push   $0xf011af6f
f010d989:	68 3e 01 00 00       	push   $0x13e
f010d98e:	68 ba ac 11 f0       	push   $0xf011acba
f010d993:	e8 de 27 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010d998:	e8 4f dd ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010d99d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010d9a0:	e8 84 c8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010d9a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f010d9a8:	83 ec 0c             	sub    $0xc,%esp
f010d9ab:	68 00 e0 1f 00       	push   $0x1fe000
f010d9b0:	e8 3a e0 ff ff       	call   f010b9ef <kmalloc>
f010d9b5:	83 c4 10             	add    $0x10,%esp
f010d9b8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f010d9be:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f010d9c5:	10 00 00 
f010d9c8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010d9cd:	0f b6 d0             	movzbl %al,%edx
f010d9d0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010d9d6:	01 d0                	add    %edx,%eax
f010d9d8:	48                   	dec    %eax
f010d9d9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f010d9df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010d9e5:	ba 00 00 00 00       	mov    $0x0,%edx
f010d9ea:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f010d9f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010d9f6:	29 d0                	sub    %edx,%eax
f010d9f8:	89 c1                	mov    %eax,%ecx
f010d9fa:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f010da01:	10 00 00 
f010da04:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010da09:	0f b6 c0             	movzbl %al,%eax
f010da0c:	c1 e0 04             	shl    $0x4,%eax
f010da0f:	89 c2                	mov    %eax,%edx
f010da11:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010da17:	01 d0                	add    %edx,%eax
f010da19:	48                   	dec    %eax
f010da1a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f010da20:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010da26:	ba 00 00 00 00       	mov    $0x0,%edx
f010da2b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f010da31:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010da37:	29 d0                	sub    %edx,%eax
f010da39:	01 c8                	add    %ecx,%eax
f010da3b:	8d 90 00 10 e0 f7    	lea    -0x81ff000(%eax),%edx
f010da41:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010da47:	39 c2                	cmp    %eax,%edx
f010da49:	74 17                	je     f010da62 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f010da4b:	83 ec 04             	sub    $0x4,%esp
f010da4e:	68 c0 af 11 f0       	push   $0xf011afc0
f010da53:	68 44 01 00 00       	push   $0x144
f010da58:	68 ba ac 11 f0       	push   $0xf011acba
f010da5d:	e8 14 27 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010da62:	e8 85 dc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010da67:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da6a:	74 17                	je     f010da83 <test_kmalloc_nextfit+0xe0c>
f010da6c:	83 ec 04             	sub    $0x4,%esp
f010da6f:	68 cc ac 11 f0       	push   $0xf011accc
f010da74:	68 45 01 00 00       	push   $0x145
f010da79:	68 ba ac 11 f0       	push   $0xf011acba
f010da7e:	e8 f3 26 ff ff       	call   f0100176 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010da83:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010da86:	e8 9e c7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010da8b:	29 c3                	sub    %eax,%ebx
f010da8d:	89 d8                	mov    %ebx,%eax
f010da8f:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f010da94:	74 17                	je     f010daad <test_kmalloc_nextfit+0xe36>
f010da96:	83 ec 04             	sub    $0x4,%esp
f010da99:	68 6f af 11 f0       	push   $0xf011af6f
f010da9e:	68 47 01 00 00       	push   $0x147
f010daa3:	68 ba ac 11 f0       	push   $0xf011acba
f010daa8:	e8 c9 26 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010daad:	e8 3a dc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dab2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dab5:	e8 6f c7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010daba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f010dabd:	83 ec 0c             	sub    $0xc,%esp
f010dac0:	68 00 00 08 00       	push   $0x80000
f010dac5:	e8 25 df ff ff       	call   f010b9ef <kmalloc>
f010daca:	83 c4 10             	add    $0x10,%esp
f010dacd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f010dad3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f010dada:	10 00 00 
f010dadd:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dae2:	0f b6 d0             	movzbl %al,%edx
f010dae5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010daeb:	01 d0                	add    %edx,%eax
f010daed:	48                   	dec    %eax
f010daee:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f010daf4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010dafa:	ba 00 00 00 00       	mov    $0x0,%edx
f010daff:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f010db05:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010db0b:	29 d0                	sub    %edx,%eax
f010db0d:	89 c1                	mov    %eax,%ecx
f010db0f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f010db16:	10 00 00 
f010db19:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010db1e:	0f b6 c0             	movzbl %al,%eax
f010db21:	c1 e0 04             	shl    $0x4,%eax
f010db24:	89 c2                	mov    %eax,%edx
f010db26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010db2c:	01 d0                	add    %edx,%eax
f010db2e:	48                   	dec    %eax
f010db2f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f010db35:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010db3b:	ba 00 00 00 00       	mov    $0x0,%edx
f010db40:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f010db46:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010db4c:	29 d0                	sub    %edx,%eax
f010db4e:	01 c8                	add    %ecx,%eax
f010db50:	8d 90 00 00 80 f8    	lea    -0x7800000(%eax),%edx
f010db56:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010db5c:	39 c2                	cmp    %eax,%edx
f010db5e:	74 17                	je     f010db77 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f010db60:	83 ec 04             	sub    $0x4,%esp
f010db63:	68 c0 af 11 f0       	push   $0xf011afc0
f010db68:	68 4d 01 00 00       	push   $0x14d
f010db6d:	68 ba ac 11 f0       	push   $0xf011acba
f010db72:	e8 ff 25 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010db77:	e8 70 db ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010db7c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010db7f:	74 17                	je     f010db98 <test_kmalloc_nextfit+0xf21>
f010db81:	83 ec 04             	sub    $0x4,%esp
f010db84:	68 cc ac 11 f0       	push   $0xf011accc
f010db89:	68 4e 01 00 00       	push   $0x14e
f010db8e:	68 ba ac 11 f0       	push   $0xf011acba
f010db93:	e8 de 25 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010db98:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010db9b:	e8 89 c6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dba0:	29 c3                	sub    %eax,%ebx
f010dba2:	89 d8                	mov    %ebx,%eax
f010dba4:	3d 80 00 00 00       	cmp    $0x80,%eax
f010dba9:	74 17                	je     f010dbc2 <test_kmalloc_nextfit+0xf4b>
f010dbab:	83 ec 04             	sub    $0x4,%esp
f010dbae:	68 6f af 11 f0       	push   $0xf011af6f
f010dbb3:	68 4f 01 00 00       	push   $0x14f
f010dbb8:	68 ba ac 11 f0       	push   $0xf011acba
f010dbbd:	e8 b4 25 ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE1: (next fit without looping back) succeeded...\n") ;
f010dbc2:	83 ec 0c             	sub    $0xc,%esp
f010dbc5:	68 e0 af 11 f0       	push   $0xf011afe0
f010dbca:	e8 c6 91 ff ff       	call   f0106d95 <cprintf>
f010dbcf:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f010dbd2:	e8 15 db ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dbd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dbda:	e8 4a c6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dbdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f010dbe2:	83 ec 0c             	sub    $0xc,%esp
f010dbe5:	68 00 00 38 00       	push   $0x380000
f010dbea:	e8 00 de ff ff       	call   f010b9ef <kmalloc>
f010dbef:	83 c4 10             	add    $0x10,%esp
f010dbf2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f010dbf8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f010dbff:	10 00 00 
f010dc02:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dc07:	0f b6 d0             	movzbl %al,%edx
f010dc0a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010dc10:	01 d0                	add    %edx,%eax
f010dc12:	48                   	dec    %eax
f010dc13:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f010dc19:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010dc1f:	ba 00 00 00 00       	mov    $0x0,%edx
f010dc24:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f010dc2a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010dc30:	29 d0                	sub    %edx,%eax
f010dc32:	89 c1                	mov    %eax,%ecx
f010dc34:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f010dc3b:	10 00 00 
f010dc3e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dc43:	0f b6 c0             	movzbl %al,%eax
f010dc46:	c1 e0 04             	shl    $0x4,%eax
f010dc49:	89 c2                	mov    %eax,%edx
f010dc4b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f010dc51:	01 d0                	add    %edx,%eax
f010dc53:	48                   	dec    %eax
f010dc54:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f010dc5a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010dc60:	ba 00 00 00 00       	mov    $0x0,%edx
f010dc65:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f010dc6b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010dc71:	29 d0                	sub    %edx,%eax
f010dc73:	01 c8                	add    %ecx,%eax
f010dc75:	8d 90 00 00 40 f6    	lea    -0x9c00000(%eax),%edx
f010dc7b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dc81:	39 c2                	cmp    %eax,%edx
f010dc83:	74 17                	je     f010dc9c <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f010dc85:	83 ec 04             	sub    $0x4,%esp
f010dc88:	68 c0 af 11 f0       	push   $0xf011afc0
f010dc8d:	68 59 01 00 00       	push   $0x159
f010dc92:	68 ba ac 11 f0       	push   $0xf011acba
f010dc97:	e8 da 24 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dc9c:	e8 4b da ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dca1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dca4:	74 17                	je     f010dcbd <test_kmalloc_nextfit+0x1046>
f010dca6:	83 ec 04             	sub    $0x4,%esp
f010dca9:	68 cc ac 11 f0       	push   $0xf011accc
f010dcae:	68 5a 01 00 00       	push   $0x15a
f010dcb3:	68 ba ac 11 f0       	push   $0xf011acba
f010dcb8:	e8 b9 24 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010dcbd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dcc0:	e8 64 c5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dcc5:	29 c3                	sub    %eax,%ebx
f010dcc7:	89 d8                	mov    %ebx,%eax
f010dcc9:	3d 80 03 00 00       	cmp    $0x380,%eax
f010dcce:	74 17                	je     f010dce7 <test_kmalloc_nextfit+0x1070>
f010dcd0:	83 ec 04             	sub    $0x4,%esp
f010dcd3:	68 6f af 11 f0       	push   $0xf011af6f
f010dcd8:	68 5b 01 00 00       	push   $0x15b
f010dcdd:	68 ba ac 11 f0       	push   $0xf011acba
f010dce2:	e8 8f 24 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dce7:	e8 00 da ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dcec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dcef:	e8 35 c5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dcf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f010dcf7:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f010dcfd:	83 ec 0c             	sub    $0xc,%esp
f010dd00:	50                   	push   %eax
f010dd01:	e8 02 de ff ff       	call   f010bb08 <kfree>
f010dd06:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dd09:	e8 de d9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dd0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dd11:	74 17                	je     f010dd2a <test_kmalloc_nextfit+0x10b3>
f010dd13:	83 ec 04             	sub    $0x4,%esp
f010dd16:	68 cc ac 11 f0       	push   $0xf011accc
f010dd1b:	68 60 01 00 00       	push   $0x160
f010dd20:	68 ba ac 11 f0       	push   $0xf011acba
f010dd25:	e8 4c 24 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010dd2a:	e8 fa c4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dd2f:	89 c2                	mov    %eax,%edx
f010dd31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd34:	29 c2                	sub    %eax,%edx
f010dd36:	89 d0                	mov    %edx,%eax
f010dd38:	3d 00 02 00 00       	cmp    $0x200,%eax
f010dd3d:	74 17                	je     f010dd56 <test_kmalloc_nextfit+0x10df>
f010dd3f:	83 ec 04             	sub    $0x4,%esp
f010dd42:	68 80 af 11 f0       	push   $0xf011af80
f010dd47:	68 61 01 00 00       	push   $0x161
f010dd4c:	68 ba ac 11 f0       	push   $0xf011acba
f010dd51:	e8 20 24 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dd56:	e8 91 d9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dd5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dd5e:	e8 c6 c4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dd63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f010dd66:	83 ec 0c             	sub    $0xc,%esp
f010dd69:	68 00 fc 3f 00       	push   $0x3ffc00
f010dd6e:	e8 7c dc ff ff       	call   f010b9ef <kmalloc>
f010dd73:	83 c4 10             	add    $0x10,%esp
f010dd76:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f010dd7c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f010dd83:	10 00 00 
f010dd86:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dd8b:	0f b6 d0             	movzbl %al,%edx
f010dd8e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010dd94:	01 d0                	add    %edx,%eax
f010dd96:	48                   	dec    %eax
f010dd97:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f010dd9d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010dda3:	ba 00 00 00 00       	mov    $0x0,%edx
f010dda8:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f010ddae:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010ddb4:	29 d0                	sub    %edx,%eax
f010ddb6:	89 c1                	mov    %eax,%ecx
f010ddb8:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f010ddbf:	10 00 00 
f010ddc2:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ddc7:	0f b6 c0             	movzbl %al,%eax
f010ddca:	c1 e0 04             	shl    $0x4,%eax
f010ddcd:	89 c2                	mov    %eax,%edx
f010ddcf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010ddd5:	01 d0                	add    %edx,%eax
f010ddd7:	48                   	dec    %eax
f010ddd8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f010ddde:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010dde4:	ba 00 00 00 00       	mov    $0x0,%edx
f010dde9:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f010ddef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010ddf5:	29 d0                	sub    %edx,%eax
f010ddf7:	01 c8                	add    %ecx,%eax
f010ddf9:	8d 90 00 00 00 f9    	lea    -0x7000000(%eax),%edx
f010ddff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010de05:	39 c2                	cmp    %eax,%edx
f010de07:	74 17                	je     f010de20 <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f010de09:	83 ec 04             	sub    $0x4,%esp
f010de0c:	68 c0 af 11 f0       	push   $0xf011afc0
f010de11:	68 67 01 00 00       	push   $0x167
f010de16:	68 ba ac 11 f0       	push   $0xf011acba
f010de1b:	e8 56 23 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010de20:	e8 c7 d8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010de25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010de28:	74 17                	je     f010de41 <test_kmalloc_nextfit+0x11ca>
f010de2a:	83 ec 04             	sub    $0x4,%esp
f010de2d:	68 cc ac 11 f0       	push   $0xf011accc
f010de32:	68 68 01 00 00       	push   $0x168
f010de37:	68 ba ac 11 f0       	push   $0xf011acba
f010de3c:	e8 35 23 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010de41:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010de44:	e8 e0 c3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010de49:	29 c3                	sub    %eax,%ebx
f010de4b:	89 d8                	mov    %ebx,%eax
f010de4d:	3d 00 04 00 00       	cmp    $0x400,%eax
f010de52:	74 17                	je     f010de6b <test_kmalloc_nextfit+0x11f4>
f010de54:	83 ec 04             	sub    $0x4,%esp
f010de57:	68 6f af 11 f0       	push   $0xf011af6f
f010de5c:	68 69 01 00 00       	push   $0x169
f010de61:	68 ba ac 11 f0       	push   $0xf011acba
f010de66:	e8 0b 23 ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) succeeded...\n") ;
f010de6b:	83 ec 0c             	sub    $0xc,%esp
f010de6e:	68 18 b0 11 f0       	push   $0xf011b018
f010de73:	e8 1d 8f ff ff       	call   f0106d95 <cprintf>
f010de78:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f010de7b:	e8 6c d8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010de80:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010de83:	e8 a1 c3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010de88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f010de8b:	83 ec 0c             	sub    $0xc,%esp
f010de8e:	68 00 00 60 00       	push   $0x600000
f010de93:	e8 57 db ff ff       	call   f010b9ef <kmalloc>
f010de98:	83 c4 10             	add    $0x10,%esp
f010de9b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f010dea1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dea7:	85 c0                	test   %eax,%eax
f010dea9:	74 17                	je     f010dec2 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f010deab:	83 ec 04             	sub    $0x4,%esp
f010deae:	68 c0 af 11 f0       	push   $0xf011afc0
f010deb3:	68 73 01 00 00       	push   $0x173
f010deb8:	68 ba ac 11 f0       	push   $0xf011acba
f010debd:	e8 b4 22 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dec2:	e8 25 d8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010dec7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010deca:	74 17                	je     f010dee3 <test_kmalloc_nextfit+0x126c>
f010decc:	83 ec 04             	sub    $0x4,%esp
f010decf:	68 cc ac 11 f0       	push   $0xf011accc
f010ded4:	68 74 01 00 00       	push   $0x174
f010ded9:	68 ba ac 11 f0       	push   $0xf011acba
f010dede:	e8 93 22 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f010dee3:	e8 41 c3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010dee8:	89 c2                	mov    %eax,%edx
f010deea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010deed:	39 c2                	cmp    %eax,%edx
f010deef:	74 17                	je     f010df08 <test_kmalloc_nextfit+0x1291>
f010def1:	83 ec 04             	sub    $0x4,%esp
f010def4:	68 6f af 11 f0       	push   $0xf011af6f
f010def9:	68 75 01 00 00       	push   $0x175
f010defe:	68 ba ac 11 f0       	push   $0xf011acba
f010df03:	e8 6e 22 ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) succeeded...\n") ;
f010df08:	83 ec 0c             	sub    $0xc,%esp
f010df0b:	68 4c b0 11 f0       	push   $0xf011b04c
f010df10:	e8 80 8e ff ff       	call   f0106d95 <cprintf>
f010df15:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f010df18:	83 ec 0c             	sub    $0xc,%esp
f010df1b:	68 88 b0 11 f0       	push   $0xf011b088
f010df20:	e8 70 8e ff ff       	call   f0106d95 <cprintf>
f010df25:	83 c4 10             	add    $0x10,%esp
	return 1;
f010df28:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010df2d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010df30:	5b                   	pop    %ebx
f010df31:	5f                   	pop    %edi
f010df32:	5d                   	pop    %ebp
f010df33:	c3                   	ret    

f010df34 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f010df34:	55                   	push   %ebp
f010df35:	89 e5                	mov    %esp,%ebp
f010df37:	57                   	push   %edi
f010df38:	53                   	push   %ebx
f010df39:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f010df3f:	83 ec 0c             	sub    $0xc,%esp
f010df42:	68 fc ab 11 f0       	push   $0xf011abfc
f010df47:	e8 49 8e ff ff       	call   f0106d95 <cprintf>
f010df4c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010df4f:	83 ec 0c             	sub    $0xc,%esp
f010df52:	68 2c ac 11 f0       	push   $0xf011ac2c
f010df57:	e8 39 8e ff ff       	call   f0106d95 <cprintf>
f010df5c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010df5f:	83 ec 0c             	sub    $0xc,%esp
f010df62:	68 fc ab 11 f0       	push   $0xf011abfc
f010df67:	e8 29 8e ff ff       	call   f0106d95 <cprintf>
f010df6c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010df6f:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010df75:	b9 14 00 00 00       	mov    $0x14,%ecx
f010df7a:	b8 00 00 00 00       	mov    $0x0,%eax
f010df7f:	89 d7                	mov    %edx,%edi
f010df81:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010df83:	e8 a1 c2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010df88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010df8b:	e8 5c d7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010df90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f010df93:	83 ec 0c             	sub    $0xc,%esp
f010df96:	68 00 fc 2f 00       	push   $0x2ffc00
f010df9b:	e8 4f da ff ff       	call   f010b9ef <kmalloc>
f010dfa0:	83 c4 10             	add    $0x10,%esp
f010dfa3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010dfa9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010dfaf:	89 c1                	mov    %eax,%ecx
f010dfb1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010dfb8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dfbd:	0f b6 d0             	movzbl %al,%edx
f010dfc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dfc3:	01 d0                	add    %edx,%eax
f010dfc5:	48                   	dec    %eax
f010dfc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010dfc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dfcc:	ba 00 00 00 00       	mov    $0x0,%edx
f010dfd1:	f7 75 ec             	divl   -0x14(%ebp)
f010dfd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dfd7:	29 d0                	sub    %edx,%eax
f010dfd9:	89 c3                	mov    %eax,%ebx
f010dfdb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010dfe2:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010dfe7:	0f b6 c0             	movzbl %al,%eax
f010dfea:	c1 e0 04             	shl    $0x4,%eax
f010dfed:	89 c2                	mov    %eax,%edx
f010dfef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dff2:	01 d0                	add    %edx,%eax
f010dff4:	48                   	dec    %eax
f010dff5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010dff8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dffb:	ba 00 00 00 00       	mov    $0x0,%edx
f010e000:	f7 75 e4             	divl   -0x1c(%ebp)
f010e003:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e006:	29 d0                	sub    %edx,%eax
f010e008:	01 d8                	add    %ebx,%eax
f010e00a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010e00f:	39 c1                	cmp    %eax,%ecx
f010e011:	74 17                	je     f010e02a <test_kmalloc_bestfit1+0xf6>
f010e013:	83 ec 04             	sub    $0x4,%esp
f010e016:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e01b:	68 8f 01 00 00       	push   $0x18f
f010e020:	68 ba ac 11 f0       	push   $0xf011acba
f010e025:	e8 4c 21 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e02a:	e8 bd d6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e02f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e032:	74 17                	je     f010e04b <test_kmalloc_bestfit1+0x117>
f010e034:	83 ec 04             	sub    $0x4,%esp
f010e037:	68 cc ac 11 f0       	push   $0xf011accc
f010e03c:	68 90 01 00 00       	push   $0x190
f010e041:	68 ba ac 11 f0       	push   $0xf011acba
f010e046:	e8 2b 21 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e04b:	e8 d9 c1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e050:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e053:	29 c2                	sub    %eax,%edx
f010e055:	89 d0                	mov    %edx,%eax
f010e057:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e05c:	74 17                	je     f010e075 <test_kmalloc_bestfit1+0x141>
f010e05e:	83 ec 04             	sub    $0x4,%esp
f010e061:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e066:	68 91 01 00 00       	push   $0x191
f010e06b:	68 ba ac 11 f0       	push   $0xf011acba
f010e070:	e8 01 21 ff ff       	call   f0100176 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010e075:	e8 af c1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e07a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e07d:	e8 6a d6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e082:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f010e085:	83 ec 0c             	sub    $0xc,%esp
f010e088:	68 00 fc 2f 00       	push   $0x2ffc00
f010e08d:	e8 5d d9 ff ff       	call   f010b9ef <kmalloc>
f010e092:	83 c4 10             	add    $0x10,%esp
f010e095:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f010e09b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e0a1:	89 c1                	mov    %eax,%ecx
f010e0a3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e0aa:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e0af:	0f b6 d0             	movzbl %al,%edx
f010e0b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e0b5:	01 d0                	add    %edx,%eax
f010e0b7:	48                   	dec    %eax
f010e0b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e0bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0be:	ba 00 00 00 00       	mov    $0x0,%edx
f010e0c3:	f7 75 dc             	divl   -0x24(%ebp)
f010e0c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0c9:	29 d0                	sub    %edx,%eax
f010e0cb:	89 c3                	mov    %eax,%ebx
f010e0cd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010e0d4:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e0d9:	0f b6 c0             	movzbl %al,%eax
f010e0dc:	c1 e0 04             	shl    $0x4,%eax
f010e0df:	89 c2                	mov    %eax,%edx
f010e0e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e0e4:	01 d0                	add    %edx,%eax
f010e0e6:	48                   	dec    %eax
f010e0e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010e0ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e0ed:	ba 00 00 00 00       	mov    $0x0,%edx
f010e0f2:	f7 75 d4             	divl   -0x2c(%ebp)
f010e0f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e0f8:	29 d0                	sub    %edx,%eax
f010e0fa:	01 d8                	add    %ebx,%eax
f010e0fc:	2d 00 00 d0 09       	sub    $0x9d00000,%eax
f010e101:	39 c1                	cmp    %eax,%ecx
f010e103:	74 17                	je     f010e11c <test_kmalloc_bestfit1+0x1e8>
f010e105:	83 ec 04             	sub    $0x4,%esp
f010e108:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e10d:	68 97 01 00 00       	push   $0x197
f010e112:	68 ba ac 11 f0       	push   $0xf011acba
f010e117:	e8 5a 20 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e11c:	e8 cb d5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e121:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e124:	74 17                	je     f010e13d <test_kmalloc_bestfit1+0x209>
f010e126:	83 ec 04             	sub    $0x4,%esp
f010e129:	68 cc ac 11 f0       	push   $0xf011accc
f010e12e:	68 98 01 00 00       	push   $0x198
f010e133:	68 ba ac 11 f0       	push   $0xf011acba
f010e138:	e8 39 20 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e13d:	e8 e7 c0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e145:	29 c2                	sub    %eax,%edx
f010e147:	89 d0                	mov    %edx,%eax
f010e149:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e14e:	74 17                	je     f010e167 <test_kmalloc_bestfit1+0x233>
f010e150:	83 ec 04             	sub    $0x4,%esp
f010e153:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e158:	68 99 01 00 00       	push   $0x199
f010e15d:	68 ba ac 11 f0       	push   $0xf011acba
f010e162:	e8 0f 20 ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010e167:	e8 bd c0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e16c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e16f:	e8 78 d5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e174:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f010e177:	83 ec 0c             	sub    $0xc,%esp
f010e17a:	68 00 fc 1f 00       	push   $0x1ffc00
f010e17f:	e8 6b d8 ff ff       	call   f010b9ef <kmalloc>
f010e184:	83 c4 10             	add    $0x10,%esp
f010e187:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f010e18d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010e193:	89 c1                	mov    %eax,%ecx
f010e195:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010e19c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e1a1:	0f b6 d0             	movzbl %al,%edx
f010e1a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e1a7:	01 d0                	add    %edx,%eax
f010e1a9:	48                   	dec    %eax
f010e1aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010e1ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e1b0:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1b5:	f7 75 cc             	divl   -0x34(%ebp)
f010e1b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e1bb:	29 d0                	sub    %edx,%eax
f010e1bd:	89 c3                	mov    %eax,%ebx
f010e1bf:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010e1c6:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e1cb:	0f b6 c0             	movzbl %al,%eax
f010e1ce:	c1 e0 04             	shl    $0x4,%eax
f010e1d1:	89 c2                	mov    %eax,%edx
f010e1d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e1d6:	01 d0                	add    %edx,%eax
f010e1d8:	48                   	dec    %eax
f010e1d9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010e1dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e1df:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1e4:	f7 75 c4             	divl   -0x3c(%ebp)
f010e1e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e1ea:	29 d0                	sub    %edx,%eax
f010e1ec:	01 d8                	add    %ebx,%eax
f010e1ee:	2d 00 00 a0 09       	sub    $0x9a00000,%eax
f010e1f3:	39 c1                	cmp    %eax,%ecx
f010e1f5:	74 17                	je     f010e20e <test_kmalloc_bestfit1+0x2da>
f010e1f7:	83 ec 04             	sub    $0x4,%esp
f010e1fa:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e1ff:	68 9f 01 00 00       	push   $0x19f
f010e204:	68 ba ac 11 f0       	push   $0xf011acba
f010e209:	e8 68 1f ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e20e:	e8 d9 d4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e213:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e216:	74 17                	je     f010e22f <test_kmalloc_bestfit1+0x2fb>
f010e218:	83 ec 04             	sub    $0x4,%esp
f010e21b:	68 cc ac 11 f0       	push   $0xf011accc
f010e220:	68 a0 01 00 00       	push   $0x1a0
f010e225:	68 ba ac 11 f0       	push   $0xf011acba
f010e22a:	e8 47 1f ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e22f:	e8 f5 bf ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e234:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e237:	29 c2                	sub    %eax,%edx
f010e239:	89 d0                	mov    %edx,%eax
f010e23b:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e240:	74 17                	je     f010e259 <test_kmalloc_bestfit1+0x325>
f010e242:	83 ec 04             	sub    $0x4,%esp
f010e245:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e24a:	68 a1 01 00 00       	push   $0x1a1
f010e24f:	68 ba ac 11 f0       	push   $0xf011acba
f010e254:	e8 1d 1f ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010e259:	e8 cb bf ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e25e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e261:	e8 86 d4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e266:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f010e269:	83 ec 0c             	sub    $0xc,%esp
f010e26c:	68 00 fc 1f 00       	push   $0x1ffc00
f010e271:	e8 79 d7 ff ff       	call   f010b9ef <kmalloc>
f010e276:	83 c4 10             	add    $0x10,%esp
f010e279:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010e27f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010e285:	89 c1                	mov    %eax,%ecx
f010e287:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010e28e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e293:	0f b6 d0             	movzbl %al,%edx
f010e296:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e299:	01 d0                	add    %edx,%eax
f010e29b:	48                   	dec    %eax
f010e29c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010e29f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e2a2:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2a7:	f7 75 bc             	divl   -0x44(%ebp)
f010e2aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e2ad:	29 d0                	sub    %edx,%eax
f010e2af:	89 c3                	mov    %eax,%ebx
f010e2b1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010e2b8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e2bd:	0f b6 c0             	movzbl %al,%eax
f010e2c0:	c1 e0 04             	shl    $0x4,%eax
f010e2c3:	89 c2                	mov    %eax,%edx
f010e2c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e2c8:	01 d0                	add    %edx,%eax
f010e2ca:	48                   	dec    %eax
f010e2cb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010e2ce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e2d1:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2d6:	f7 75 b4             	divl   -0x4c(%ebp)
f010e2d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e2dc:	29 d0                	sub    %edx,%eax
f010e2de:	01 d8                	add    %ebx,%eax
f010e2e0:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010e2e5:	39 c1                	cmp    %eax,%ecx
f010e2e7:	74 17                	je     f010e300 <test_kmalloc_bestfit1+0x3cc>
f010e2e9:	83 ec 04             	sub    $0x4,%esp
f010e2ec:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e2f1:	68 a7 01 00 00       	push   $0x1a7
f010e2f6:	68 ba ac 11 f0       	push   $0xf011acba
f010e2fb:	e8 76 1e ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e300:	e8 e7 d3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e305:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e308:	74 17                	je     f010e321 <test_kmalloc_bestfit1+0x3ed>
f010e30a:	83 ec 04             	sub    $0x4,%esp
f010e30d:	68 cc ac 11 f0       	push   $0xf011accc
f010e312:	68 a8 01 00 00       	push   $0x1a8
f010e317:	68 ba ac 11 f0       	push   $0xf011acba
f010e31c:	e8 55 1e ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e321:	e8 03 bf ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e326:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e329:	29 c2                	sub    %eax,%edx
f010e32b:	89 d0                	mov    %edx,%eax
f010e32d:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e332:	74 17                	je     f010e34b <test_kmalloc_bestfit1+0x417>
f010e334:	83 ec 04             	sub    $0x4,%esp
f010e337:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e33c:	68 a9 01 00 00       	push   $0x1a9
f010e341:	68 ba ac 11 f0       	push   $0xf011acba
f010e346:	e8 2b 1e ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e34b:	e8 d9 be ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e350:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e353:	e8 94 d3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e358:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f010e35b:	83 ec 0c             	sub    $0xc,%esp
f010e35e:	68 00 fc 0f 00       	push   $0xffc00
f010e363:	e8 87 d6 ff ff       	call   f010b9ef <kmalloc>
f010e368:	83 c4 10             	add    $0x10,%esp
f010e36b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f010e371:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010e377:	89 c1                	mov    %eax,%ecx
f010e379:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010e380:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e385:	0f b6 d0             	movzbl %al,%edx
f010e388:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e38b:	01 d0                	add    %edx,%eax
f010e38d:	48                   	dec    %eax
f010e38e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010e391:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e394:	ba 00 00 00 00       	mov    $0x0,%edx
f010e399:	f7 75 ac             	divl   -0x54(%ebp)
f010e39c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e39f:	29 d0                	sub    %edx,%eax
f010e3a1:	89 c3                	mov    %eax,%ebx
f010e3a3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010e3aa:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e3af:	0f b6 c0             	movzbl %al,%eax
f010e3b2:	c1 e0 04             	shl    $0x4,%eax
f010e3b5:	89 c2                	mov    %eax,%edx
f010e3b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e3ba:	01 d0                	add    %edx,%eax
f010e3bc:	48                   	dec    %eax
f010e3bd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010e3c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e3c3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3c8:	f7 75 a4             	divl   -0x5c(%ebp)
f010e3cb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e3ce:	29 d0                	sub    %edx,%eax
f010e3d0:	01 d8                	add    %ebx,%eax
f010e3d2:	2d 00 00 60 09       	sub    $0x9600000,%eax
f010e3d7:	39 c1                	cmp    %eax,%ecx
f010e3d9:	74 17                	je     f010e3f2 <test_kmalloc_bestfit1+0x4be>
f010e3db:	83 ec 04             	sub    $0x4,%esp
f010e3de:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e3e3:	68 af 01 00 00       	push   $0x1af
f010e3e8:	68 ba ac 11 f0       	push   $0xf011acba
f010e3ed:	e8 84 1d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e3f2:	e8 f5 d2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e3f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e3fa:	74 17                	je     f010e413 <test_kmalloc_bestfit1+0x4df>
f010e3fc:	83 ec 04             	sub    $0x4,%esp
f010e3ff:	68 cc ac 11 f0       	push   $0xf011accc
f010e404:	68 b0 01 00 00       	push   $0x1b0
f010e409:	68 ba ac 11 f0       	push   $0xf011acba
f010e40e:	e8 63 1d ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010e413:	e8 11 be ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e41b:	29 c2                	sub    %eax,%edx
f010e41d:	89 d0                	mov    %edx,%eax
f010e41f:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e424:	74 17                	je     f010e43d <test_kmalloc_bestfit1+0x509>
f010e426:	83 ec 04             	sub    $0x4,%esp
f010e429:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e42e:	68 b1 01 00 00       	push   $0x1b1
f010e433:	68 ba ac 11 f0       	push   $0xf011acba
f010e438:	e8 39 1d ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e43d:	e8 e7 bd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e442:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e445:	e8 a2 d2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e44a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f010e44d:	83 ec 0c             	sub    $0xc,%esp
f010e450:	68 00 fc 0f 00       	push   $0xffc00
f010e455:	e8 95 d5 ff ff       	call   f010b9ef <kmalloc>
f010e45a:	83 c4 10             	add    $0x10,%esp
f010e45d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010e463:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010e469:	89 c1                	mov    %eax,%ecx
f010e46b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010e472:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e477:	0f b6 d0             	movzbl %al,%edx
f010e47a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e47d:	01 d0                	add    %edx,%eax
f010e47f:	48                   	dec    %eax
f010e480:	89 45 98             	mov    %eax,-0x68(%ebp)
f010e483:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e486:	ba 00 00 00 00       	mov    $0x0,%edx
f010e48b:	f7 75 9c             	divl   -0x64(%ebp)
f010e48e:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e491:	29 d0                	sub    %edx,%eax
f010e493:	89 c3                	mov    %eax,%ebx
f010e495:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010e49c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e4a1:	0f b6 c0             	movzbl %al,%eax
f010e4a4:	c1 e0 04             	shl    $0x4,%eax
f010e4a7:	89 c2                	mov    %eax,%edx
f010e4a9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e4ac:	01 d0                	add    %edx,%eax
f010e4ae:	48                   	dec    %eax
f010e4af:	89 45 90             	mov    %eax,-0x70(%ebp)
f010e4b2:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f010e4ba:	f7 75 94             	divl   -0x6c(%ebp)
f010e4bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e4c0:	29 d0                	sub    %edx,%eax
f010e4c2:	01 d8                	add    %ebx,%eax
f010e4c4:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010e4c9:	39 c1                	cmp    %eax,%ecx
f010e4cb:	74 17                	je     f010e4e4 <test_kmalloc_bestfit1+0x5b0>
f010e4cd:	83 ec 04             	sub    $0x4,%esp
f010e4d0:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e4d5:	68 b7 01 00 00       	push   $0x1b7
f010e4da:	68 ba ac 11 f0       	push   $0xf011acba
f010e4df:	e8 92 1c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e4e4:	e8 03 d2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e4e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e4ec:	74 17                	je     f010e505 <test_kmalloc_bestfit1+0x5d1>
f010e4ee:	83 ec 04             	sub    $0x4,%esp
f010e4f1:	68 cc ac 11 f0       	push   $0xf011accc
f010e4f6:	68 b8 01 00 00       	push   $0x1b8
f010e4fb:	68 ba ac 11 f0       	push   $0xf011acba
f010e500:	e8 71 1c ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010e505:	e8 1f bd ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e50a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e50d:	29 c2                	sub    %eax,%edx
f010e50f:	89 d0                	mov    %edx,%eax
f010e511:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e516:	74 17                	je     f010e52f <test_kmalloc_bestfit1+0x5fb>
f010e518:	83 ec 04             	sub    $0x4,%esp
f010e51b:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e520:	68 b9 01 00 00       	push   $0x1b9
f010e525:	68 ba ac 11 f0       	push   $0xf011acba
f010e52a:	e8 47 1c ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e52f:	e8 f5 bc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e534:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e537:	e8 b0 d1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e53c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f010e53f:	83 ec 0c             	sub    $0xc,%esp
f010e542:	68 00 fc 0f 00       	push   $0xffc00
f010e547:	e8 a3 d4 ff ff       	call   f010b9ef <kmalloc>
f010e54c:	83 c4 10             	add    $0x10,%esp
f010e54f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f010e555:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010e55b:	89 c1                	mov    %eax,%ecx
f010e55d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010e564:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e569:	0f b6 d0             	movzbl %al,%edx
f010e56c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010e56f:	01 d0                	add    %edx,%eax
f010e571:	48                   	dec    %eax
f010e572:	89 45 88             	mov    %eax,-0x78(%ebp)
f010e575:	8b 45 88             	mov    -0x78(%ebp),%eax
f010e578:	ba 00 00 00 00       	mov    $0x0,%edx
f010e57d:	f7 75 8c             	divl   -0x74(%ebp)
f010e580:	8b 45 88             	mov    -0x78(%ebp),%eax
f010e583:	29 d0                	sub    %edx,%eax
f010e585:	89 c3                	mov    %eax,%ebx
f010e587:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010e58e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e593:	0f b6 c0             	movzbl %al,%eax
f010e596:	c1 e0 04             	shl    $0x4,%eax
f010e599:	89 c2                	mov    %eax,%edx
f010e59b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010e59e:	01 d0                	add    %edx,%eax
f010e5a0:	48                   	dec    %eax
f010e5a1:	89 45 80             	mov    %eax,-0x80(%ebp)
f010e5a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e5a7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e5ac:	f7 75 84             	divl   -0x7c(%ebp)
f010e5af:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e5b2:	29 d0                	sub    %edx,%eax
f010e5b4:	01 d8                	add    %ebx,%eax
f010e5b6:	2d 00 00 40 09       	sub    $0x9400000,%eax
f010e5bb:	39 c1                	cmp    %eax,%ecx
f010e5bd:	74 17                	je     f010e5d6 <test_kmalloc_bestfit1+0x6a2>
f010e5bf:	83 ec 04             	sub    $0x4,%esp
f010e5c2:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e5c7:	68 bf 01 00 00       	push   $0x1bf
f010e5cc:	68 ba ac 11 f0       	push   $0xf011acba
f010e5d1:	e8 a0 1b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e5d6:	e8 11 d1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e5db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5de:	74 17                	je     f010e5f7 <test_kmalloc_bestfit1+0x6c3>
f010e5e0:	83 ec 04             	sub    $0x4,%esp
f010e5e3:	68 cc ac 11 f0       	push   $0xf011accc
f010e5e8:	68 c0 01 00 00       	push   $0x1c0
f010e5ed:	68 ba ac 11 f0       	push   $0xf011acba
f010e5f2:	e8 7f 1b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010e5f7:	e8 2d bc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e5fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5ff:	29 c2                	sub    %eax,%edx
f010e601:	89 d0                	mov    %edx,%eax
f010e603:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e608:	74 17                	je     f010e621 <test_kmalloc_bestfit1+0x6ed>
f010e60a:	83 ec 04             	sub    $0x4,%esp
f010e60d:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e612:	68 c1 01 00 00       	push   $0x1c1
f010e617:	68 ba ac 11 f0       	push   $0xf011acba
f010e61c:	e8 55 1b ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010e621:	e8 03 bc ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e626:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e629:	e8 be d0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e62e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f010e631:	83 ec 0c             	sub    $0xc,%esp
f010e634:	68 00 fc 0f 00       	push   $0xffc00
f010e639:	e8 b1 d3 ff ff       	call   f010b9ef <kmalloc>
f010e63e:	83 c4 10             	add    $0x10,%esp
f010e641:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f010e647:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010e64d:	89 c1                	mov    %eax,%ecx
f010e64f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010e656:	10 00 00 
f010e659:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e65e:	0f b6 d0             	movzbl %al,%edx
f010e661:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010e667:	01 d0                	add    %edx,%eax
f010e669:	48                   	dec    %eax
f010e66a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010e670:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010e676:	ba 00 00 00 00       	mov    $0x0,%edx
f010e67b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010e681:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010e687:	29 d0                	sub    %edx,%eax
f010e689:	89 c3                	mov    %eax,%ebx
f010e68b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010e692:	10 00 00 
f010e695:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e69a:	0f b6 c0             	movzbl %al,%eax
f010e69d:	c1 e0 04             	shl    $0x4,%eax
f010e6a0:	89 c2                	mov    %eax,%edx
f010e6a2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010e6a8:	01 d0                	add    %edx,%eax
f010e6aa:	48                   	dec    %eax
f010e6ab:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010e6b1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010e6b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e6bc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010e6c2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010e6c8:	29 d0                	sub    %edx,%eax
f010e6ca:	01 d8                	add    %ebx,%eax
f010e6cc:	2d 00 00 30 09       	sub    $0x9300000,%eax
f010e6d1:	39 c1                	cmp    %eax,%ecx
f010e6d3:	74 17                	je     f010e6ec <test_kmalloc_bestfit1+0x7b8>
f010e6d5:	83 ec 04             	sub    $0x4,%esp
f010e6d8:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e6dd:	68 c7 01 00 00       	push   $0x1c7
f010e6e2:	68 ba ac 11 f0       	push   $0xf011acba
f010e6e7:	e8 8a 1a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e6ec:	e8 fb cf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e6f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e6f4:	74 17                	je     f010e70d <test_kmalloc_bestfit1+0x7d9>
f010e6f6:	83 ec 04             	sub    $0x4,%esp
f010e6f9:	68 cc ac 11 f0       	push   $0xf011accc
f010e6fe:	68 c8 01 00 00       	push   $0x1c8
f010e703:	68 ba ac 11 f0       	push   $0xf011acba
f010e708:	e8 69 1a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010e70d:	e8 17 bb ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e715:	29 c2                	sub    %eax,%edx
f010e717:	89 d0                	mov    %edx,%eax
f010e719:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e71e:	74 17                	je     f010e737 <test_kmalloc_bestfit1+0x803>
f010e720:	83 ec 04             	sub    $0x4,%esp
f010e723:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e728:	68 c9 01 00 00       	push   $0x1c9
f010e72d:	68 ba ac 11 f0       	push   $0xf011acba
f010e732:	e8 3f 1a ff ff       	call   f0100176 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010e737:	e8 ed ba ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e73c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e73f:	e8 a8 cf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e744:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f010e747:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e74d:	83 ec 0c             	sub    $0xc,%esp
f010e750:	50                   	push   %eax
f010e751:	e8 b2 d3 ff ff       	call   f010bb08 <kfree>
f010e756:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e759:	e8 8e cf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e75e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e761:	74 17                	je     f010e77a <test_kmalloc_bestfit1+0x846>
f010e763:	83 ec 04             	sub    $0x4,%esp
f010e766:	68 cc ac 11 f0       	push   $0xf011accc
f010e76b:	68 d2 01 00 00       	push   $0x1d2
f010e770:	68 ba ac 11 f0       	push   $0xf011acba
f010e775:	e8 fc 19 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010e77a:	e8 aa ba ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e77f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010e782:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e787:	74 17                	je     f010e7a0 <test_kmalloc_bestfit1+0x86c>
f010e789:	83 ec 04             	sub    $0x4,%esp
f010e78c:	68 07 b1 11 f0       	push   $0xf011b107
f010e791:	68 d3 01 00 00       	push   $0x1d3
f010e796:	68 ba ac 11 f0       	push   $0xf011acba
f010e79b:	e8 d6 19 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010e7a0:	e8 84 ba ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e7a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e7a8:	e8 3f cf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e7ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f010e7b0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010e7b6:	83 ec 0c             	sub    $0xc,%esp
f010e7b9:	50                   	push   %eax
f010e7ba:	e8 49 d3 ff ff       	call   f010bb08 <kfree>
f010e7bf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e7c2:	e8 25 cf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e7c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e7ca:	74 17                	je     f010e7e3 <test_kmalloc_bestfit1+0x8af>
f010e7cc:	83 ec 04             	sub    $0x4,%esp
f010e7cf:	68 cc ac 11 f0       	push   $0xf011accc
f010e7d4:	68 d9 01 00 00       	push   $0x1d9
f010e7d9:	68 ba ac 11 f0       	push   $0xf011acba
f010e7de:	e8 93 19 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010e7e3:	e8 41 ba ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e7e8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010e7eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e7f0:	74 17                	je     f010e809 <test_kmalloc_bestfit1+0x8d5>
f010e7f2:	83 ec 04             	sub    $0x4,%esp
f010e7f5:	68 07 b1 11 f0       	push   $0xf011b107
f010e7fa:	68 da 01 00 00       	push   $0x1da
f010e7ff:	68 ba ac 11 f0       	push   $0xf011acba
f010e804:	e8 6d 19 ff ff       	call   f0100176 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010e809:	e8 1b ba ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e80e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e811:	e8 d6 ce ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e816:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f010e819:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010e81f:	83 ec 0c             	sub    $0xc,%esp
f010e822:	50                   	push   %eax
f010e823:	e8 e0 d2 ff ff       	call   f010bb08 <kfree>
f010e828:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e82b:	e8 bc ce ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e830:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e833:	74 17                	je     f010e84c <test_kmalloc_bestfit1+0x918>
f010e835:	83 ec 04             	sub    $0x4,%esp
f010e838:	68 cc ac 11 f0       	push   $0xf011accc
f010e83d:	68 e0 01 00 00       	push   $0x1e0
f010e842:	68 ba ac 11 f0       	push   $0xf011acba
f010e847:	e8 2a 19 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010e84c:	e8 d8 b9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e851:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010e854:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e859:	74 17                	je     f010e872 <test_kmalloc_bestfit1+0x93e>
f010e85b:	83 ec 04             	sub    $0x4,%esp
f010e85e:	68 07 b1 11 f0       	push   $0xf011b107
f010e863:	68 e1 01 00 00       	push   $0x1e1
f010e868:	68 ba ac 11 f0       	push   $0xf011acba
f010e86d:	e8 04 19 ff ff       	call   f0100176 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010e872:	e8 b2 b9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e877:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e87a:	e8 6d ce ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e87f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f010e882:	83 ec 0c             	sub    $0xc,%esp
f010e885:	68 00 00 08 00       	push   $0x80000
f010e88a:	e8 60 d1 ff ff       	call   f010b9ef <kmalloc>
f010e88f:	83 c4 10             	add    $0x10,%esp
f010e892:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010e898:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010e89e:	89 c1                	mov    %eax,%ecx
f010e8a0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010e8a7:	10 00 00 
f010e8aa:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e8af:	0f b6 d0             	movzbl %al,%edx
f010e8b2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010e8b8:	01 d0                	add    %edx,%eax
f010e8ba:	48                   	dec    %eax
f010e8bb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010e8c1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010e8c7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8cc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010e8d2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010e8d8:	29 d0                	sub    %edx,%eax
f010e8da:	89 c3                	mov    %eax,%ebx
f010e8dc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010e8e3:	10 00 00 
f010e8e6:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e8eb:	0f b6 c0             	movzbl %al,%eax
f010e8ee:	c1 e0 04             	shl    $0x4,%eax
f010e8f1:	89 c2                	mov    %eax,%edx
f010e8f3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010e8f9:	01 d0                	add    %edx,%eax
f010e8fb:	48                   	dec    %eax
f010e8fc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010e902:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010e908:	ba 00 00 00 00       	mov    $0x0,%edx
f010e90d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010e913:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010e919:	29 d0                	sub    %edx,%eax
f010e91b:	01 d8                	add    %ebx,%eax
f010e91d:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010e922:	39 c1                	cmp    %eax,%ecx
f010e924:	74 17                	je     f010e93d <test_kmalloc_bestfit1+0xa09>
f010e926:	83 ec 04             	sub    $0x4,%esp
f010e929:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010e92e:	68 ea 01 00 00       	push   $0x1ea
f010e933:	68 ba ac 11 f0       	push   $0xf011acba
f010e938:	e8 39 18 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e93d:	e8 aa cd ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e942:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e945:	74 17                	je     f010e95e <test_kmalloc_bestfit1+0xa2a>
f010e947:	83 ec 04             	sub    $0x4,%esp
f010e94a:	68 cc ac 11 f0       	push   $0xf011accc
f010e94f:	68 eb 01 00 00       	push   $0x1eb
f010e954:	68 ba ac 11 f0       	push   $0xf011acba
f010e959:	e8 18 18 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f010e95e:	e8 c6 b8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e963:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e966:	29 c2                	sub    %eax,%edx
f010e968:	89 d0                	mov    %edx,%eax
f010e96a:	3d 80 00 00 00       	cmp    $0x80,%eax
f010e96f:	74 17                	je     f010e988 <test_kmalloc_bestfit1+0xa54>
f010e971:	83 ec 04             	sub    $0x4,%esp
f010e974:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010e979:	68 ec 01 00 00       	push   $0x1ec
f010e97e:	68 ba ac 11 f0       	push   $0xf011acba
f010e983:	e8 ee 17 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f010e988:	e8 9c b8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010e98d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e990:	e8 57 cd ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010e995:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f010e998:	83 ec 0c             	sub    $0xc,%esp
f010e99b:	68 00 fc 0f 00       	push   $0xffc00
f010e9a0:	e8 4a d0 ff ff       	call   f010b9ef <kmalloc>
f010e9a5:	83 c4 10             	add    $0x10,%esp
f010e9a8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010e9ae:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010e9b4:	89 c1                	mov    %eax,%ecx
f010e9b6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010e9bd:	10 00 00 
f010e9c0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010e9c5:	0f b6 d0             	movzbl %al,%edx
f010e9c8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010e9ce:	01 d0                	add    %edx,%eax
f010e9d0:	48                   	dec    %eax
f010e9d1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010e9d7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010e9dd:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9e2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010e9e8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010e9ee:	29 d0                	sub    %edx,%eax
f010e9f0:	89 c3                	mov    %eax,%ebx
f010e9f2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010e9f9:	10 00 00 
f010e9fc:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ea01:	0f b6 c0             	movzbl %al,%eax
f010ea04:	c1 e0 04             	shl    $0x4,%eax
f010ea07:	89 c2                	mov    %eax,%edx
f010ea09:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010ea0f:	01 d0                	add    %edx,%eax
f010ea11:	48                   	dec    %eax
f010ea12:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010ea18:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010ea1e:	ba 00 00 00 00       	mov    $0x0,%edx
f010ea23:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010ea29:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010ea2f:	29 d0                	sub    %edx,%eax
f010ea31:	01 d8                	add    %ebx,%eax
f010ea33:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010ea38:	39 c1                	cmp    %eax,%ecx
f010ea3a:	74 17                	je     f010ea53 <test_kmalloc_bestfit1+0xb1f>
f010ea3c:	83 ec 04             	sub    $0x4,%esp
f010ea3f:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010ea44:	68 f2 01 00 00       	push   $0x1f2
f010ea49:	68 ba ac 11 f0       	push   $0xf011acba
f010ea4e:	e8 23 17 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ea53:	e8 94 cc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ea58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea5b:	74 17                	je     f010ea74 <test_kmalloc_bestfit1+0xb40>
f010ea5d:	83 ec 04             	sub    $0x4,%esp
f010ea60:	68 cc ac 11 f0       	push   $0xf011accc
f010ea65:	68 f3 01 00 00       	push   $0x1f3
f010ea6a:	68 ba ac 11 f0       	push   $0xf011acba
f010ea6f:	e8 02 17 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010ea74:	e8 b0 b7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ea79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea7c:	29 c2                	sub    %eax,%edx
f010ea7e:	89 d0                	mov    %edx,%eax
f010ea80:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ea85:	74 17                	je     f010ea9e <test_kmalloc_bestfit1+0xb6a>
f010ea87:	83 ec 04             	sub    $0x4,%esp
f010ea8a:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010ea8f:	68 f4 01 00 00       	push   $0x1f4
f010ea94:	68 ba ac 11 f0       	push   $0xf011acba
f010ea99:	e8 d8 16 ff ff       	call   f0100176 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010ea9e:	e8 86 b7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010eaa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eaa6:	e8 41 cc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010eaab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f010eaae:	83 ec 0c             	sub    $0xc,%esp
f010eab1:	68 00 fc 03 00       	push   $0x3fc00
f010eab6:	e8 34 cf ff ff       	call   f010b9ef <kmalloc>
f010eabb:	83 c4 10             	add    $0x10,%esp
f010eabe:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f010eac4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010eaca:	89 c1                	mov    %eax,%ecx
f010eacc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010ead3:	10 00 00 
f010ead6:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010eadb:	0f b6 d0             	movzbl %al,%edx
f010eade:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010eae4:	01 d0                	add    %edx,%eax
f010eae6:	48                   	dec    %eax
f010eae7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010eaed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010eaf3:	ba 00 00 00 00       	mov    $0x0,%edx
f010eaf8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010eafe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010eb04:	29 d0                	sub    %edx,%eax
f010eb06:	89 c3                	mov    %eax,%ebx
f010eb08:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010eb0f:	10 00 00 
f010eb12:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010eb17:	0f b6 c0             	movzbl %al,%eax
f010eb1a:	c1 e0 04             	shl    $0x4,%eax
f010eb1d:	89 c2                	mov    %eax,%edx
f010eb1f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010eb25:	01 d0                	add    %edx,%eax
f010eb27:	48                   	dec    %eax
f010eb28:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010eb2e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010eb34:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb39:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010eb3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010eb45:	29 d0                	sub    %edx,%eax
f010eb47:	01 d8                	add    %ebx,%eax
f010eb49:	2d 00 00 48 09       	sub    $0x9480000,%eax
f010eb4e:	39 c1                	cmp    %eax,%ecx
f010eb50:	74 17                	je     f010eb69 <test_kmalloc_bestfit1+0xc35>
f010eb52:	83 ec 04             	sub    $0x4,%esp
f010eb55:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010eb5a:	68 fa 01 00 00       	push   $0x1fa
f010eb5f:	68 ba ac 11 f0       	push   $0xf011acba
f010eb64:	e8 0d 16 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eb69:	e8 7e cb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010eb6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb71:	74 17                	je     f010eb8a <test_kmalloc_bestfit1+0xc56>
f010eb73:	83 ec 04             	sub    $0x4,%esp
f010eb76:	68 cc ac 11 f0       	push   $0xf011accc
f010eb7b:	68 fb 01 00 00       	push   $0x1fb
f010eb80:	68 ba ac 11 f0       	push   $0xf011acba
f010eb85:	e8 ec 15 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f010eb8a:	e8 9a b6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010eb8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb92:	29 c2                	sub    %eax,%edx
f010eb94:	89 d0                	mov    %edx,%eax
f010eb96:	83 f8 40             	cmp    $0x40,%eax
f010eb99:	74 17                	je     f010ebb2 <test_kmalloc_bestfit1+0xc7e>
f010eb9b:	83 ec 04             	sub    $0x4,%esp
f010eb9e:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010eba3:	68 fc 01 00 00       	push   $0x1fc
f010eba8:	68 ba ac 11 f0       	push   $0xf011acba
f010ebad:	e8 c4 15 ff ff       	call   f0100176 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f010ebb2:	e8 72 b6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ebb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ebba:	e8 2d cb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ebbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f010ebc2:	83 ec 0c             	sub    $0xc,%esp
f010ebc5:	68 00 fc 3f 00       	push   $0x3ffc00
f010ebca:	e8 20 ce ff ff       	call   f010b9ef <kmalloc>
f010ebcf:	83 c4 10             	add    $0x10,%esp
f010ebd2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f010ebd8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010ebde:	89 c1                	mov    %eax,%ecx
f010ebe0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f010ebe7:	10 00 00 
f010ebea:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ebef:	0f b6 d0             	movzbl %al,%edx
f010ebf2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010ebf8:	01 d0                	add    %edx,%eax
f010ebfa:	48                   	dec    %eax
f010ebfb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f010ec01:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ec07:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec0c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f010ec12:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ec18:	29 d0                	sub    %edx,%eax
f010ec1a:	89 c3                	mov    %eax,%ebx
f010ec1c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010ec23:	10 00 00 
f010ec26:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ec2b:	0f b6 c0             	movzbl %al,%eax
f010ec2e:	c1 e0 04             	shl    $0x4,%eax
f010ec31:	89 c2                	mov    %eax,%edx
f010ec33:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010ec39:	01 d0                	add    %edx,%eax
f010ec3b:	48                   	dec    %eax
f010ec3c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010ec42:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010ec48:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec4d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010ec53:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010ec59:	29 d0                	sub    %edx,%eax
f010ec5b:	01 d8                	add    %ebx,%eax
f010ec5d:	2d 00 00 20 09       	sub    $0x9200000,%eax
f010ec62:	39 c1                	cmp    %eax,%ecx
f010ec64:	74 17                	je     f010ec7d <test_kmalloc_bestfit1+0xd49>
f010ec66:	83 ec 04             	sub    $0x4,%esp
f010ec69:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010ec6e:	68 02 02 00 00       	push   $0x202
f010ec73:	68 ba ac 11 f0       	push   $0xf011acba
f010ec78:	e8 f9 14 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ec7d:	e8 6a ca ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ec82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec85:	74 17                	je     f010ec9e <test_kmalloc_bestfit1+0xd6a>
f010ec87:	83 ec 04             	sub    $0x4,%esp
f010ec8a:	68 cc ac 11 f0       	push   $0xf011accc
f010ec8f:	68 03 02 00 00       	push   $0x203
f010ec94:	68 ba ac 11 f0       	push   $0xf011acba
f010ec99:	e8 d8 14 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f010ec9e:	e8 86 b5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010eca3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eca6:	29 c2                	sub    %eax,%edx
f010eca8:	89 d0                	mov    %edx,%eax
f010ecaa:	3d 00 04 00 00       	cmp    $0x400,%eax
f010ecaf:	74 17                	je     f010ecc8 <test_kmalloc_bestfit1+0xd94>
f010ecb1:	83 ec 04             	sub    $0x4,%esp
f010ecb4:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010ecb9:	68 04 02 00 00       	push   $0x204
f010ecbe:	68 ba ac 11 f0       	push   $0xf011acba
f010ecc3:	e8 ae 14 ff ff       	call   f0100176 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f010ecc8:	e8 5c b5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010eccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ecd0:	e8 17 ca ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ecd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f010ecd8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010ecde:	83 ec 0c             	sub    $0xc,%esp
f010ece1:	50                   	push   %eax
f010ece2:	e8 21 ce ff ff       	call   f010bb08 <kfree>
f010ece7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ecea:	e8 fd c9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ecef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecf2:	74 17                	je     f010ed0b <test_kmalloc_bestfit1+0xdd7>
f010ecf4:	83 ec 04             	sub    $0x4,%esp
f010ecf7:	68 cc ac 11 f0       	push   $0xf011accc
f010ecfc:	68 0d 02 00 00       	push   $0x20d
f010ed01:	68 ba ac 11 f0       	push   $0xf011acba
f010ed06:	e8 6b 14 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010ed0b:	e8 19 b5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ed10:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010ed13:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ed18:	74 17                	je     f010ed31 <test_kmalloc_bestfit1+0xdfd>
f010ed1a:	83 ec 04             	sub    $0x4,%esp
f010ed1d:	68 07 b1 11 f0       	push   $0xf011b107
f010ed22:	68 0e 02 00 00       	push   $0x20e
f010ed27:	68 ba ac 11 f0       	push   $0xf011acba
f010ed2c:	e8 45 14 ff ff       	call   f0100176 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f010ed31:	e8 f3 b4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ed36:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ed39:	e8 ae c9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ed3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f010ed41:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010ed47:	83 ec 0c             	sub    $0xc,%esp
f010ed4a:	50                   	push   %eax
f010ed4b:	e8 b8 cd ff ff       	call   f010bb08 <kfree>
f010ed50:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ed53:	e8 94 c9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ed58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed5b:	74 17                	je     f010ed74 <test_kmalloc_bestfit1+0xe40>
f010ed5d:	83 ec 04             	sub    $0x4,%esp
f010ed60:	68 cc ac 11 f0       	push   $0xf011accc
f010ed65:	68 14 02 00 00       	push   $0x214
f010ed6a:	68 ba ac 11 f0       	push   $0xf011acba
f010ed6f:	e8 02 14 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f010ed74:	e8 b0 b4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ed79:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010ed7c:	3d 80 00 00 00       	cmp    $0x80,%eax
f010ed81:	74 17                	je     f010ed9a <test_kmalloc_bestfit1+0xe66>
f010ed83:	83 ec 04             	sub    $0x4,%esp
f010ed86:	68 07 b1 11 f0       	push   $0xf011b107
f010ed8b:	68 15 02 00 00       	push   $0x215
f010ed90:	68 ba ac 11 f0       	push   $0xf011acba
f010ed95:	e8 dc 13 ff ff       	call   f0100176 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f010ed9a:	e8 8a b4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ed9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eda2:	e8 45 c9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010eda7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f010edaa:	83 ec 0c             	sub    $0xc,%esp
f010edad:	68 00 fc 1f 00       	push   $0x1ffc00
f010edb2:	e8 38 cc ff ff       	call   f010b9ef <kmalloc>
f010edb7:	83 c4 10             	add    $0x10,%esp
f010edba:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f010edc0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010edc6:	89 c1                	mov    %eax,%ecx
f010edc8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010edcf:	10 00 00 
f010edd2:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010edd7:	0f b6 d0             	movzbl %al,%edx
f010edda:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010ede0:	01 d0                	add    %edx,%eax
f010ede2:	48                   	dec    %eax
f010ede3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010ede9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010edef:	ba 00 00 00 00       	mov    $0x0,%edx
f010edf4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010edfa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ee00:	29 d0                	sub    %edx,%eax
f010ee02:	89 c3                	mov    %eax,%ebx
f010ee04:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010ee0b:	10 00 00 
f010ee0e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ee13:	0f b6 c0             	movzbl %al,%eax
f010ee16:	c1 e0 04             	shl    $0x4,%eax
f010ee19:	89 c2                	mov    %eax,%edx
f010ee1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010ee21:	01 d0                	add    %edx,%eax
f010ee23:	48                   	dec    %eax
f010ee24:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010ee2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010ee30:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee35:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010ee3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010ee41:	29 d0                	sub    %edx,%eax
f010ee43:	01 d8                	add    %ebx,%eax
f010ee45:	2d 00 00 70 09       	sub    $0x9700000,%eax
f010ee4a:	39 c1                	cmp    %eax,%ecx
f010ee4c:	74 17                	je     f010ee65 <test_kmalloc_bestfit1+0xf31>
f010ee4e:	83 ec 04             	sub    $0x4,%esp
f010ee51:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010ee56:	68 1e 02 00 00       	push   $0x21e
f010ee5b:	68 ba ac 11 f0       	push   $0xf011acba
f010ee60:	e8 11 13 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ee65:	e8 82 c8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ee6a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee6d:	74 17                	je     f010ee86 <test_kmalloc_bestfit1+0xf52>
f010ee6f:	83 ec 04             	sub    $0x4,%esp
f010ee72:	68 cc ac 11 f0       	push   $0xf011accc
f010ee77:	68 1f 02 00 00       	push   $0x21f
f010ee7c:	68 ba ac 11 f0       	push   $0xf011acba
f010ee81:	e8 f0 12 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f010ee86:	e8 9e b3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ee8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ee8e:	29 c2                	sub    %eax,%edx
f010ee90:	89 d0                	mov    %edx,%eax
f010ee92:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ee97:	74 17                	je     f010eeb0 <test_kmalloc_bestfit1+0xf7c>
f010ee99:	83 ec 04             	sub    $0x4,%esp
f010ee9c:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010eea1:	68 20 02 00 00       	push   $0x220
f010eea6:	68 ba ac 11 f0       	push   $0xf011acba
f010eeab:	e8 c6 12 ff ff       	call   f0100176 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f010eeb0:	83 ec 0c             	sub    $0xc,%esp
f010eeb3:	68 14 b1 11 f0       	push   $0xf011b114
f010eeb8:	e8 d8 7e ff ff       	call   f0106d95 <cprintf>
f010eebd:	83 c4 10             	add    $0x10,%esp

	return 1;
f010eec0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010eec5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010eec8:	5b                   	pop    %ebx
f010eec9:	5f                   	pop    %edi
f010eeca:	5d                   	pop    %ebp
f010eecb:	c3                   	ret    

f010eecc <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f010eecc:	55                   	push   %ebp
f010eecd:	89 e5                	mov    %esp,%ebp
f010eecf:	57                   	push   %edi
f010eed0:	53                   	push   %ebx
f010eed1:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f010eed7:	83 ec 0c             	sub    $0xc,%esp
f010eeda:	68 fc ab 11 f0       	push   $0xf011abfc
f010eedf:	e8 b1 7e ff ff       	call   f0106d95 <cprintf>
f010eee4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010eee7:	83 ec 0c             	sub    $0xc,%esp
f010eeea:	68 2c ac 11 f0       	push   $0xf011ac2c
f010eeef:	e8 a1 7e ff ff       	call   f0106d95 <cprintf>
f010eef4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010eef7:	83 ec 0c             	sub    $0xc,%esp
f010eefa:	68 fc ab 11 f0       	push   $0xf011abfc
f010eeff:	e8 91 7e ff ff       	call   f0106d95 <cprintf>
f010ef04:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010ef07:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f010ef0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f010ef12:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef17:	89 d7                	mov    %edx,%edi
f010ef19:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f010ef1b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010ef22:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ef27:	0f b6 d0             	movzbl %al,%edx
f010ef2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ef2d:	01 d0                	add    %edx,%eax
f010ef2f:	48                   	dec    %eax
f010ef30:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ef33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ef36:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef3b:	f7 75 f4             	divl   -0xc(%ebp)
f010ef3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ef41:	29 d0                	sub    %edx,%eax
f010ef43:	89 c1                	mov    %eax,%ecx
f010ef45:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010ef4c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ef51:	0f b6 c0             	movzbl %al,%eax
f010ef54:	c1 e0 04             	shl    $0x4,%eax
f010ef57:	89 c2                	mov    %eax,%edx
f010ef59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef5c:	01 d0                	add    %edx,%eax
f010ef5e:	48                   	dec    %eax
f010ef5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ef62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ef65:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef6a:	f7 75 ec             	divl   -0x14(%ebp)
f010ef6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ef70:	29 d0                	sub    %edx,%eax
f010ef72:	01 c8                	add    %ecx,%eax
f010ef74:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010ef79:	29 c2                	sub    %eax,%edx
f010ef7b:	89 d0                	mov    %edx,%eax
f010ef7d:	83 ec 0c             	sub    $0xc,%esp
f010ef80:	50                   	push   %eax
f010ef81:	e8 69 ca ff ff       	call   f010b9ef <kmalloc>
f010ef86:	83 c4 10             	add    $0x10,%esp
f010ef89:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f010ef8f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010ef95:	85 c0                	test   %eax,%eax
f010ef97:	74 17                	je     f010efb0 <test_kmalloc_bestfit2+0xe4>
f010ef99:	83 ec 04             	sub    $0x4,%esp
f010ef9c:	68 5c b1 11 f0       	push   $0xf011b15c
f010efa1:	68 36 02 00 00       	push   $0x236
f010efa6:	68 ba ac 11 f0       	push   $0xf011acba
f010efab:	e8 c6 11 ff ff       	call   f0100176 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010efb0:	e8 74 b2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010efb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010efb8:	e8 2f c7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010efbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010efc0:	83 ec 0c             	sub    $0xc,%esp
f010efc3:	68 00 fc 1f 00       	push   $0x1ffc00
f010efc8:	e8 22 ca ff ff       	call   f010b9ef <kmalloc>
f010efcd:	83 c4 10             	add    $0x10,%esp
f010efd0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010efd6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010efdc:	89 c1                	mov    %eax,%ecx
f010efde:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010efe5:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010efea:	0f b6 d0             	movzbl %al,%edx
f010efed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eff0:	01 d0                	add    %edx,%eax
f010eff2:	48                   	dec    %eax
f010eff3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010eff6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010eff9:	ba 00 00 00 00       	mov    $0x0,%edx
f010effe:	f7 75 dc             	divl   -0x24(%ebp)
f010f001:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f004:	29 d0                	sub    %edx,%eax
f010f006:	89 c3                	mov    %eax,%ebx
f010f008:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010f00f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f014:	0f b6 c0             	movzbl %al,%eax
f010f017:	c1 e0 04             	shl    $0x4,%eax
f010f01a:	89 c2                	mov    %eax,%edx
f010f01c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f01f:	01 d0                	add    %edx,%eax
f010f021:	48                   	dec    %eax
f010f022:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f025:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f028:	ba 00 00 00 00       	mov    $0x0,%edx
f010f02d:	f7 75 d4             	divl   -0x2c(%ebp)
f010f030:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f033:	29 d0                	sub    %edx,%eax
f010f035:	01 d8                	add    %ebx,%eax
f010f037:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010f03c:	39 c1                	cmp    %eax,%ecx
f010f03e:	74 17                	je     f010f057 <test_kmalloc_bestfit2+0x18b>
f010f040:	83 ec 04             	sub    $0x4,%esp
f010f043:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f048:	68 40 02 00 00       	push   $0x240
f010f04d:	68 ba ac 11 f0       	push   $0xf011acba
f010f052:	e8 1f 11 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f057:	e8 90 c6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f05c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f05f:	74 17                	je     f010f078 <test_kmalloc_bestfit2+0x1ac>
f010f061:	83 ec 04             	sub    $0x4,%esp
f010f064:	68 cc ac 11 f0       	push   $0xf011accc
f010f069:	68 41 02 00 00       	push   $0x241
f010f06e:	68 ba ac 11 f0       	push   $0xf011acba
f010f073:	e8 fe 10 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010f078:	e8 ac b1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f07d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f080:	29 c2                	sub    %eax,%edx
f010f082:	89 d0                	mov    %edx,%eax
f010f084:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f089:	74 17                	je     f010f0a2 <test_kmalloc_bestfit2+0x1d6>
f010f08b:	83 ec 04             	sub    $0x4,%esp
f010f08e:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f093:	68 42 02 00 00       	push   $0x242
f010f098:	68 ba ac 11 f0       	push   $0xf011acba
f010f09d:	e8 d4 10 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f0a2:	e8 82 b1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f0a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f0aa:	e8 3d c6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f0af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010f0b2:	83 ec 0c             	sub    $0xc,%esp
f010f0b5:	68 00 fc 1f 00       	push   $0x1ffc00
f010f0ba:	e8 30 c9 ff ff       	call   f010b9ef <kmalloc>
f010f0bf:	83 c4 10             	add    $0x10,%esp
f010f0c2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f010f0c8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010f0ce:	89 c1                	mov    %eax,%ecx
f010f0d0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010f0d7:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f0dc:	0f b6 d0             	movzbl %al,%edx
f010f0df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f0e2:	01 d0                	add    %edx,%eax
f010f0e4:	48                   	dec    %eax
f010f0e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f0e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0eb:	ba 00 00 00 00       	mov    $0x0,%edx
f010f0f0:	f7 75 cc             	divl   -0x34(%ebp)
f010f0f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0f6:	29 d0                	sub    %edx,%eax
f010f0f8:	89 c3                	mov    %eax,%ebx
f010f0fa:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010f101:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f106:	0f b6 c0             	movzbl %al,%eax
f010f109:	c1 e0 04             	shl    $0x4,%eax
f010f10c:	89 c2                	mov    %eax,%edx
f010f10e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f111:	01 d0                	add    %edx,%eax
f010f113:	48                   	dec    %eax
f010f114:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f117:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f11a:	ba 00 00 00 00       	mov    $0x0,%edx
f010f11f:	f7 75 c4             	divl   -0x3c(%ebp)
f010f122:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f125:	29 d0                	sub    %edx,%eax
f010f127:	01 d8                	add    %ebx,%eax
f010f129:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010f12e:	39 c1                	cmp    %eax,%ecx
f010f130:	74 17                	je     f010f149 <test_kmalloc_bestfit2+0x27d>
f010f132:	83 ec 04             	sub    $0x4,%esp
f010f135:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f13a:	68 48 02 00 00       	push   $0x248
f010f13f:	68 ba ac 11 f0       	push   $0xf011acba
f010f144:	e8 2d 10 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f149:	e8 9e c5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f14e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f151:	74 17                	je     f010f16a <test_kmalloc_bestfit2+0x29e>
f010f153:	83 ec 04             	sub    $0x4,%esp
f010f156:	68 cc ac 11 f0       	push   $0xf011accc
f010f15b:	68 49 02 00 00       	push   $0x249
f010f160:	68 ba ac 11 f0       	push   $0xf011acba
f010f165:	e8 0c 10 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010f16a:	e8 ba b0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f16f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f172:	29 c2                	sub    %eax,%edx
f010f174:	89 d0                	mov    %edx,%eax
f010f176:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f17b:	74 17                	je     f010f194 <test_kmalloc_bestfit2+0x2c8>
f010f17d:	83 ec 04             	sub    $0x4,%esp
f010f180:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f185:	68 4a 02 00 00       	push   $0x24a
f010f18a:	68 ba ac 11 f0       	push   $0xf011acba
f010f18f:	e8 e2 0f ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010f194:	e8 90 b0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f19c:	e8 4b c5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f1a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010f1a4:	83 ec 0c             	sub    $0xc,%esp
f010f1a7:	68 00 08 00 00       	push   $0x800
f010f1ac:	e8 3e c8 ff ff       	call   f010b9ef <kmalloc>
f010f1b1:	83 c4 10             	add    $0x10,%esp
f010f1b4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f010f1ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010f1c0:	89 c1                	mov    %eax,%ecx
f010f1c2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010f1c9:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f1ce:	0f b6 d0             	movzbl %al,%edx
f010f1d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f1d4:	01 d0                	add    %edx,%eax
f010f1d6:	48                   	dec    %eax
f010f1d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010f1da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f1dd:	ba 00 00 00 00       	mov    $0x0,%edx
f010f1e2:	f7 75 bc             	divl   -0x44(%ebp)
f010f1e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f1e8:	29 d0                	sub    %edx,%eax
f010f1ea:	89 c3                	mov    %eax,%ebx
f010f1ec:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010f1f3:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f1f8:	0f b6 c0             	movzbl %al,%eax
f010f1fb:	c1 e0 04             	shl    $0x4,%eax
f010f1fe:	89 c2                	mov    %eax,%edx
f010f200:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010f203:	01 d0                	add    %edx,%eax
f010f205:	48                   	dec    %eax
f010f206:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010f209:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f20c:	ba 00 00 00 00       	mov    $0x0,%edx
f010f211:	f7 75 b4             	divl   -0x4c(%ebp)
f010f214:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f217:	29 d0                	sub    %edx,%eax
f010f219:	01 d8                	add    %ebx,%eax
f010f21b:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010f220:	39 c1                	cmp    %eax,%ecx
f010f222:	74 17                	je     f010f23b <test_kmalloc_bestfit2+0x36f>
f010f224:	83 ec 04             	sub    $0x4,%esp
f010f227:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f22c:	68 50 02 00 00       	push   $0x250
f010f231:	68 ba ac 11 f0       	push   $0xf011acba
f010f236:	e8 3b 0f ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f23b:	e8 ac c4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f240:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f243:	74 17                	je     f010f25c <test_kmalloc_bestfit2+0x390>
f010f245:	83 ec 04             	sub    $0x4,%esp
f010f248:	68 cc ac 11 f0       	push   $0xf011accc
f010f24d:	68 51 02 00 00       	push   $0x251
f010f252:	68 ba ac 11 f0       	push   $0xf011acba
f010f257:	e8 1a 0f ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010f25c:	e8 c8 af ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f261:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f264:	29 c2                	sub    %eax,%edx
f010f266:	89 d0                	mov    %edx,%eax
f010f268:	83 f8 01             	cmp    $0x1,%eax
f010f26b:	74 17                	je     f010f284 <test_kmalloc_bestfit2+0x3b8>
f010f26d:	83 ec 04             	sub    $0x4,%esp
f010f270:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f275:	68 52 02 00 00       	push   $0x252
f010f27a:	68 ba ac 11 f0       	push   $0xf011acba
f010f27f:	e8 f2 0e ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010f284:	e8 a0 af ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f28c:	e8 5b c4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f291:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010f294:	83 ec 0c             	sub    $0xc,%esp
f010f297:	68 00 08 00 00       	push   $0x800
f010f29c:	e8 4e c7 ff ff       	call   f010b9ef <kmalloc>
f010f2a1:	83 c4 10             	add    $0x10,%esp
f010f2a4:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f010f2aa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010f2b0:	89 c1                	mov    %eax,%ecx
f010f2b2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010f2b9:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f2be:	0f b6 d0             	movzbl %al,%edx
f010f2c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f2c4:	01 d0                	add    %edx,%eax
f010f2c6:	48                   	dec    %eax
f010f2c7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010f2ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f2cd:	ba 00 00 00 00       	mov    $0x0,%edx
f010f2d2:	f7 75 ac             	divl   -0x54(%ebp)
f010f2d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f2d8:	29 d0                	sub    %edx,%eax
f010f2da:	89 c3                	mov    %eax,%ebx
f010f2dc:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010f2e3:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f2e8:	0f b6 c0             	movzbl %al,%eax
f010f2eb:	c1 e0 04             	shl    $0x4,%eax
f010f2ee:	89 c2                	mov    %eax,%edx
f010f2f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f2f3:	01 d0                	add    %edx,%eax
f010f2f5:	48                   	dec    %eax
f010f2f6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010f2f9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f2fc:	ba 00 00 00 00       	mov    $0x0,%edx
f010f301:	f7 75 a4             	divl   -0x5c(%ebp)
f010f304:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f307:	29 d0                	sub    %edx,%eax
f010f309:	01 d8                	add    %ebx,%eax
f010f30b:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010f310:	39 c1                	cmp    %eax,%ecx
f010f312:	74 17                	je     f010f32b <test_kmalloc_bestfit2+0x45f>
f010f314:	83 ec 04             	sub    $0x4,%esp
f010f317:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f31c:	68 58 02 00 00       	push   $0x258
f010f321:	68 ba ac 11 f0       	push   $0xf011acba
f010f326:	e8 4b 0e ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f32b:	e8 bc c3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f330:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f333:	74 17                	je     f010f34c <test_kmalloc_bestfit2+0x480>
f010f335:	83 ec 04             	sub    $0x4,%esp
f010f338:	68 cc ac 11 f0       	push   $0xf011accc
f010f33d:	68 59 02 00 00       	push   $0x259
f010f342:	68 ba ac 11 f0       	push   $0xf011acba
f010f347:	e8 2a 0e ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010f34c:	e8 d8 ae ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f351:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f354:	29 c2                	sub    %eax,%edx
f010f356:	89 d0                	mov    %edx,%eax
f010f358:	83 f8 01             	cmp    $0x1,%eax
f010f35b:	74 17                	je     f010f374 <test_kmalloc_bestfit2+0x4a8>
f010f35d:	83 ec 04             	sub    $0x4,%esp
f010f360:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f365:	68 5a 02 00 00       	push   $0x25a
f010f36a:	68 ba ac 11 f0       	push   $0xf011acba
f010f36f:	e8 02 0e ff ff       	call   f0100176 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f374:	e8 b0 ae ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f379:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f37c:	e8 6b c3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f381:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f010f384:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010f38a:	83 ec 0c             	sub    $0xc,%esp
f010f38d:	50                   	push   %eax
f010f38e:	e8 75 c7 ff ff       	call   f010bb08 <kfree>
f010f393:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f396:	e8 51 c3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f39b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f39e:	74 17                	je     f010f3b7 <test_kmalloc_bestfit2+0x4eb>
f010f3a0:	83 ec 04             	sub    $0x4,%esp
f010f3a3:	68 cc ac 11 f0       	push   $0xf011accc
f010f3a8:	68 60 02 00 00       	push   $0x260
f010f3ad:	68 ba ac 11 f0       	push   $0xf011acba
f010f3b2:	e8 bf 0d ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f010f3b7:	e8 6d ae ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f3bc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010f3bf:	83 f8 01             	cmp    $0x1,%eax
f010f3c2:	74 17                	je     f010f3db <test_kmalloc_bestfit2+0x50f>
f010f3c4:	83 ec 04             	sub    $0x4,%esp
f010f3c7:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f3cc:	68 61 02 00 00       	push   $0x261
f010f3d1:	68 ba ac 11 f0       	push   $0xf011acba
f010f3d6:	e8 9b 0d ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010f3db:	e8 49 ae ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f3e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f3e3:	e8 04 c3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f3e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010f3eb:	83 ec 0c             	sub    $0xc,%esp
f010f3ee:	68 00 1c 00 00       	push   $0x1c00
f010f3f3:	e8 f7 c5 ff ff       	call   f010b9ef <kmalloc>
f010f3f8:	83 c4 10             	add    $0x10,%esp
f010f3fb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f010f401:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010f407:	89 c1                	mov    %eax,%ecx
f010f409:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010f410:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f415:	0f b6 d0             	movzbl %al,%edx
f010f418:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010f41b:	01 d0                	add    %edx,%eax
f010f41d:	48                   	dec    %eax
f010f41e:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f421:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f424:	ba 00 00 00 00       	mov    $0x0,%edx
f010f429:	f7 75 9c             	divl   -0x64(%ebp)
f010f42c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f42f:	29 d0                	sub    %edx,%eax
f010f431:	89 c3                	mov    %eax,%ebx
f010f433:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010f43a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f43f:	0f b6 c0             	movzbl %al,%eax
f010f442:	c1 e0 04             	shl    $0x4,%eax
f010f445:	89 c2                	mov    %eax,%edx
f010f447:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f44a:	01 d0                	add    %edx,%eax
f010f44c:	48                   	dec    %eax
f010f44d:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f450:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f453:	ba 00 00 00 00       	mov    $0x0,%edx
f010f458:	f7 75 94             	divl   -0x6c(%ebp)
f010f45b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f45e:	29 d0                	sub    %edx,%eax
f010f460:	01 d8                	add    %ebx,%eax
f010f462:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010f467:	39 c1                	cmp    %eax,%ecx
f010f469:	74 17                	je     f010f482 <test_kmalloc_bestfit2+0x5b6>
f010f46b:	83 ec 04             	sub    $0x4,%esp
f010f46e:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f473:	68 67 02 00 00       	push   $0x267
f010f478:	68 ba ac 11 f0       	push   $0xf011acba
f010f47d:	e8 f4 0c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f482:	e8 65 c2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f487:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f48a:	74 17                	je     f010f4a3 <test_kmalloc_bestfit2+0x5d7>
f010f48c:	83 ec 04             	sub    $0x4,%esp
f010f48f:	68 cc ac 11 f0       	push   $0xf011accc
f010f494:	68 68 02 00 00       	push   $0x268
f010f499:	68 ba ac 11 f0       	push   $0xf011acba
f010f49e:	e8 d3 0c ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f010f4a3:	e8 81 ad ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f4a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4ab:	29 c2                	sub    %eax,%edx
f010f4ad:	89 d0                	mov    %edx,%eax
f010f4af:	83 f8 02             	cmp    $0x2,%eax
f010f4b2:	74 17                	je     f010f4cb <test_kmalloc_bestfit2+0x5ff>
f010f4b4:	83 ec 04             	sub    $0x4,%esp
f010f4b7:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f4bc:	68 69 02 00 00       	push   $0x269
f010f4c1:	68 ba ac 11 f0       	push   $0xf011acba
f010f4c6:	e8 ab 0c ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f4cb:	e8 59 ad ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f4d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f4d3:	e8 14 c2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f4d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f010f4db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f4e1:	83 ec 0c             	sub    $0xc,%esp
f010f4e4:	50                   	push   %eax
f010f4e5:	e8 1e c6 ff ff       	call   f010bb08 <kfree>
f010f4ea:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f4ed:	e8 fa c1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f4f2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f4f5:	74 17                	je     f010f50e <test_kmalloc_bestfit2+0x642>
f010f4f7:	83 ec 04             	sub    $0x4,%esp
f010f4fa:	68 cc ac 11 f0       	push   $0xf011accc
f010f4ff:	68 6f 02 00 00       	push   $0x26f
f010f504:	68 ba ac 11 f0       	push   $0xf011acba
f010f509:	e8 68 0c ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f010f50e:	e8 16 ad ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f513:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010f516:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f51b:	74 17                	je     f010f534 <test_kmalloc_bestfit2+0x668>
f010f51d:	83 ec 04             	sub    $0x4,%esp
f010f520:	68 80 af 11 f0       	push   $0xf011af80
f010f525:	68 70 02 00 00       	push   $0x270
f010f52a:	68 ba ac 11 f0       	push   $0xf011acba
f010f52f:	e8 42 0c ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f534:	e8 f0 ac ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f539:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f53c:	e8 ab c1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f541:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010f544:	83 ec 0c             	sub    $0xc,%esp
f010f547:	68 00 fc 2f 00       	push   $0x2ffc00
f010f54c:	e8 9e c4 ff ff       	call   f010b9ef <kmalloc>
f010f551:	83 c4 10             	add    $0x10,%esp
f010f554:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010f55a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010f560:	89 c1                	mov    %eax,%ecx
f010f562:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010f569:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f56e:	0f b6 d0             	movzbl %al,%edx
f010f571:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010f574:	01 d0                	add    %edx,%eax
f010f576:	48                   	dec    %eax
f010f577:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f57a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f57d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f582:	f7 75 8c             	divl   -0x74(%ebp)
f010f585:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f588:	29 d0                	sub    %edx,%eax
f010f58a:	89 c3                	mov    %eax,%ebx
f010f58c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010f593:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f598:	0f b6 c0             	movzbl %al,%eax
f010f59b:	c1 e0 04             	shl    $0x4,%eax
f010f59e:	89 c2                	mov    %eax,%edx
f010f5a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010f5a3:	01 d0                	add    %edx,%eax
f010f5a5:	48                   	dec    %eax
f010f5a6:	89 45 80             	mov    %eax,-0x80(%ebp)
f010f5a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f010f5ac:	ba 00 00 00 00       	mov    $0x0,%edx
f010f5b1:	f7 75 84             	divl   -0x7c(%ebp)
f010f5b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f010f5b7:	29 d0                	sub    %edx,%eax
f010f5b9:	01 d8                	add    %ebx,%eax
f010f5bb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010f5c0:	39 c1                	cmp    %eax,%ecx
f010f5c2:	74 17                	je     f010f5db <test_kmalloc_bestfit2+0x70f>
f010f5c4:	83 ec 04             	sub    $0x4,%esp
f010f5c7:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f5cc:	68 76 02 00 00       	push   $0x276
f010f5d1:	68 ba ac 11 f0       	push   $0xf011acba
f010f5d6:	e8 9b 0b ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f5db:	e8 0c c1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f5e0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f5e3:	74 17                	je     f010f5fc <test_kmalloc_bestfit2+0x730>
f010f5e5:	83 ec 04             	sub    $0x4,%esp
f010f5e8:	68 cc ac 11 f0       	push   $0xf011accc
f010f5ed:	68 77 02 00 00       	push   $0x277
f010f5f2:	68 ba ac 11 f0       	push   $0xf011acba
f010f5f7:	e8 7a 0b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f010f5fc:	e8 28 ac ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f601:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f604:	29 c2                	sub    %eax,%edx
f010f606:	89 d0                	mov    %edx,%eax
f010f608:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f60d:	74 17                	je     f010f626 <test_kmalloc_bestfit2+0x75a>
f010f60f:	83 ec 04             	sub    $0x4,%esp
f010f612:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f617:	68 78 02 00 00       	push   $0x278
f010f61c:	68 ba ac 11 f0       	push   $0xf011acba
f010f621:	e8 50 0b ff ff       	call   f0100176 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f010f626:	e8 fe ab ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f62b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f62e:	e8 b9 c0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f633:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f010f636:	83 ec 0c             	sub    $0xc,%esp
f010f639:	68 00 18 20 00       	push   $0x201800
f010f63e:	e8 ac c3 ff ff       	call   f010b9ef <kmalloc>
f010f643:	83 c4 10             	add    $0x10,%esp
f010f646:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010f64c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010f652:	89 c1                	mov    %eax,%ecx
f010f654:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010f65b:	10 00 00 
f010f65e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f663:	0f b6 d0             	movzbl %al,%edx
f010f666:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010f66c:	01 d0                	add    %edx,%eax
f010f66e:	48                   	dec    %eax
f010f66f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010f675:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010f67b:	ba 00 00 00 00       	mov    $0x0,%edx
f010f680:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010f686:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010f68c:	29 d0                	sub    %edx,%eax
f010f68e:	89 c3                	mov    %eax,%ebx
f010f690:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010f697:	10 00 00 
f010f69a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f69f:	0f b6 c0             	movzbl %al,%eax
f010f6a2:	c1 e0 04             	shl    $0x4,%eax
f010f6a5:	89 c2                	mov    %eax,%edx
f010f6a7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010f6ad:	01 d0                	add    %edx,%eax
f010f6af:	48                   	dec    %eax
f010f6b0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010f6b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f6bc:	ba 00 00 00 00       	mov    $0x0,%edx
f010f6c1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010f6c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f6cd:	29 d0                	sub    %edx,%eax
f010f6cf:	01 d8                	add    %ebx,%eax
f010f6d1:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010f6d6:	39 c1                	cmp    %eax,%ecx
f010f6d8:	74 17                	je     f010f6f1 <test_kmalloc_bestfit2+0x825>
f010f6da:	83 ec 04             	sub    $0x4,%esp
f010f6dd:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f6e2:	68 7e 02 00 00       	push   $0x27e
f010f6e7:	68 ba ac 11 f0       	push   $0xf011acba
f010f6ec:	e8 85 0a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f6f1:	e8 f6 bf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f6f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f6f9:	74 17                	je     f010f712 <test_kmalloc_bestfit2+0x846>
f010f6fb:	83 ec 04             	sub    $0x4,%esp
f010f6fe:	68 cc ac 11 f0       	push   $0xf011accc
f010f703:	68 7f 02 00 00       	push   $0x27f
f010f708:	68 ba ac 11 f0       	push   $0xf011acba
f010f70d:	e8 64 0a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f010f712:	e8 12 ab ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f717:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f71a:	29 c2                	sub    %eax,%edx
f010f71c:	89 d0                	mov    %edx,%eax
f010f71e:	3d 02 02 00 00       	cmp    $0x202,%eax
f010f723:	74 17                	je     f010f73c <test_kmalloc_bestfit2+0x870>
f010f725:	83 ec 04             	sub    $0x4,%esp
f010f728:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f72d:	68 80 02 00 00       	push   $0x280
f010f732:	68 ba ac 11 f0       	push   $0xf011acba
f010f737:	e8 3a 0a ff ff       	call   f0100176 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f010f73c:	e8 e8 aa ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f741:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f744:	e8 a3 bf ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f749:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f010f74c:	83 ec 0c             	sub    $0xc,%esp
f010f74f:	68 00 fc 4f 00       	push   $0x4ffc00
f010f754:	e8 96 c2 ff ff       	call   f010b9ef <kmalloc>
f010f759:	83 c4 10             	add    $0x10,%esp
f010f75c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f010f762:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010f768:	89 c1                	mov    %eax,%ecx
f010f76a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010f771:	10 00 00 
f010f774:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f779:	0f b6 d0             	movzbl %al,%edx
f010f77c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010f782:	01 d0                	add    %edx,%eax
f010f784:	48                   	dec    %eax
f010f785:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010f78b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010f791:	ba 00 00 00 00       	mov    $0x0,%edx
f010f796:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010f79c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010f7a2:	29 d0                	sub    %edx,%eax
f010f7a4:	89 c3                	mov    %eax,%ebx
f010f7a6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010f7ad:	10 00 00 
f010f7b0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f7b5:	0f b6 c0             	movzbl %al,%eax
f010f7b8:	c1 e0 04             	shl    $0x4,%eax
f010f7bb:	89 c2                	mov    %eax,%edx
f010f7bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010f7c3:	01 d0                	add    %edx,%eax
f010f7c5:	48                   	dec    %eax
f010f7c6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010f7cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010f7d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010f7d7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010f7dd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010f7e3:	29 d0                	sub    %edx,%eax
f010f7e5:	01 d8                	add    %ebx,%eax
f010f7e7:	2d 00 a0 6f 09       	sub    $0x96fa000,%eax
f010f7ec:	39 c1                	cmp    %eax,%ecx
f010f7ee:	74 17                	je     f010f807 <test_kmalloc_bestfit2+0x93b>
f010f7f0:	83 ec 04             	sub    $0x4,%esp
f010f7f3:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f7f8:	68 86 02 00 00       	push   $0x286
f010f7fd:	68 ba ac 11 f0       	push   $0xf011acba
f010f802:	e8 6f 09 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f807:	e8 e0 be ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f80c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f80f:	74 17                	je     f010f828 <test_kmalloc_bestfit2+0x95c>
f010f811:	83 ec 04             	sub    $0x4,%esp
f010f814:	68 cc ac 11 f0       	push   $0xf011accc
f010f819:	68 87 02 00 00       	push   $0x287
f010f81e:	68 ba ac 11 f0       	push   $0xf011acba
f010f823:	e8 4e 09 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f828:	e8 fc a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f82d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f830:	29 c2                	sub    %eax,%edx
f010f832:	89 d0                	mov    %edx,%eax
f010f834:	3d 00 05 00 00       	cmp    $0x500,%eax
f010f839:	74 17                	je     f010f852 <test_kmalloc_bestfit2+0x986>
f010f83b:	83 ec 04             	sub    $0x4,%esp
f010f83e:	68 f4 b0 11 f0       	push   $0xf011b0f4
f010f843:	68 88 02 00 00       	push   $0x288
f010f848:	68 ba ac 11 f0       	push   $0xf011acba
f010f84d:	e8 24 09 ff ff       	call   f0100176 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f852:	e8 d2 a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f857:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f85a:	e8 8d be ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f85f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f010f862:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010f868:	83 ec 0c             	sub    $0xc,%esp
f010f86b:	50                   	push   %eax
f010f86c:	e8 97 c2 ff ff       	call   f010bb08 <kfree>
f010f871:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f874:	e8 73 be ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f879:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f87c:	74 17                	je     f010f895 <test_kmalloc_bestfit2+0x9c9>
f010f87e:	83 ec 04             	sub    $0x4,%esp
f010f881:	68 cc ac 11 f0       	push   $0xf011accc
f010f886:	68 8e 02 00 00       	push   $0x28e
f010f88b:	68 ba ac 11 f0       	push   $0xf011acba
f010f890:	e8 e1 08 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f010f895:	e8 8f a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f89a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010f89d:	3d 02 02 00 00       	cmp    $0x202,%eax
f010f8a2:	74 17                	je     f010f8bb <test_kmalloc_bestfit2+0x9ef>
f010f8a4:	83 ec 04             	sub    $0x4,%esp
f010f8a7:	68 80 af 11 f0       	push   $0xf011af80
f010f8ac:	68 8f 02 00 00       	push   $0x28f
f010f8b1:	68 ba ac 11 f0       	push   $0xf011acba
f010f8b6:	e8 bb 08 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f8bb:	e8 69 a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f8c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f8c3:	e8 24 be ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f8c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f010f8cb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010f8d1:	83 ec 0c             	sub    $0xc,%esp
f010f8d4:	50                   	push   %eax
f010f8d5:	e8 2e c2 ff ff       	call   f010bb08 <kfree>
f010f8da:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f8dd:	e8 0a be ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f8e2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f8e5:	74 17                	je     f010f8fe <test_kmalloc_bestfit2+0xa32>
f010f8e7:	83 ec 04             	sub    $0x4,%esp
f010f8ea:	68 cc ac 11 f0       	push   $0xf011accc
f010f8ef:	68 95 02 00 00       	push   $0x295
f010f8f4:	68 ba ac 11 f0       	push   $0xf011acba
f010f8f9:	e8 78 08 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f010f8fe:	e8 26 a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f903:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010f906:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f90b:	74 17                	je     f010f924 <test_kmalloc_bestfit2+0xa58>
f010f90d:	83 ec 04             	sub    $0x4,%esp
f010f910:	68 a4 b1 11 f0       	push   $0xf011b1a4
f010f915:	68 96 02 00 00       	push   $0x296
f010f91a:	68 ba ac 11 f0       	push   $0xf011acba
f010f91f:	e8 52 08 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f924:	e8 00 a9 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010f929:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f92c:	e8 bb bd ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f931:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f010f934:	83 ec 0c             	sub    $0xc,%esp
f010f937:	68 00 fc 1f 00       	push   $0x1ffc00
f010f93c:	e8 ae c0 ff ff       	call   f010b9ef <kmalloc>
f010f941:	83 c4 10             	add    $0x10,%esp
f010f944:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010f94a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010f950:	89 c1                	mov    %eax,%ecx
f010f952:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010f959:	10 00 00 
f010f95c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f961:	0f b6 d0             	movzbl %al,%edx
f010f964:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010f96a:	01 d0                	add    %edx,%eax
f010f96c:	48                   	dec    %eax
f010f96d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010f973:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f979:	ba 00 00 00 00       	mov    $0x0,%edx
f010f97e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010f984:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f98a:	29 d0                	sub    %edx,%eax
f010f98c:	89 c3                	mov    %eax,%ebx
f010f98e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010f995:	10 00 00 
f010f998:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010f99d:	0f b6 c0             	movzbl %al,%eax
f010f9a0:	c1 e0 04             	shl    $0x4,%eax
f010f9a3:	89 c2                	mov    %eax,%edx
f010f9a5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010f9ab:	01 d0                	add    %edx,%eax
f010f9ad:	48                   	dec    %eax
f010f9ae:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010f9b4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010f9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f010f9bf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010f9c5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010f9cb:	29 d0                	sub    %edx,%eax
f010f9cd:	01 d8                	add    %ebx,%eax
f010f9cf:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010f9d4:	39 c1                	cmp    %eax,%ecx
f010f9d6:	74 17                	je     f010f9ef <test_kmalloc_bestfit2+0xb23>
f010f9d8:	83 ec 04             	sub    $0x4,%esp
f010f9db:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010f9e0:	68 9c 02 00 00       	push   $0x29c
f010f9e5:	68 ba ac 11 f0       	push   $0xf011acba
f010f9ea:	e8 87 07 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f9ef:	e8 f8 bc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010f9f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f9f7:	74 17                	je     f010fa10 <test_kmalloc_bestfit2+0xb44>
f010f9f9:	83 ec 04             	sub    $0x4,%esp
f010f9fc:	68 cc ac 11 f0       	push   $0xf011accc
f010fa01:	68 9d 02 00 00       	push   $0x29d
f010fa06:	68 ba ac 11 f0       	push   $0xf011acba
f010fa0b:	e8 66 07 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f010fa10:	e8 14 a8 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fa15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa18:	29 c2                	sub    %eax,%edx
f010fa1a:	89 d0                	mov    %edx,%eax
f010fa1c:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fa21:	74 17                	je     f010fa3a <test_kmalloc_bestfit2+0xb6e>
f010fa23:	83 ec 04             	sub    $0x4,%esp
f010fa26:	68 e2 b1 11 f0       	push   $0xf011b1e2
f010fa2b:	68 9e 02 00 00       	push   $0x29e
f010fa30:	68 ba ac 11 f0       	push   $0xf011acba
f010fa35:	e8 3c 07 ff ff       	call   f0100176 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f010fa3a:	e8 ea a7 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fa3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fa42:	e8 a5 bc ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fa47:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f010fa4a:	83 ec 0c             	sub    $0xc,%esp
f010fa4d:	68 00 18 00 00       	push   $0x1800
f010fa52:	e8 98 bf ff ff       	call   f010b9ef <kmalloc>
f010fa57:	83 c4 10             	add    $0x10,%esp
f010fa5a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fa60:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010fa66:	89 c1                	mov    %eax,%ecx
f010fa68:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010fa6f:	10 00 00 
f010fa72:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fa77:	0f b6 d0             	movzbl %al,%edx
f010fa7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010fa80:	01 d0                	add    %edx,%eax
f010fa82:	48                   	dec    %eax
f010fa83:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010fa89:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010fa8f:	ba 00 00 00 00       	mov    $0x0,%edx
f010fa94:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010fa9a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010faa0:	29 d0                	sub    %edx,%eax
f010faa2:	89 c3                	mov    %eax,%ebx
f010faa4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010faab:	10 00 00 
f010faae:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fab3:	0f b6 c0             	movzbl %al,%eax
f010fab6:	c1 e0 04             	shl    $0x4,%eax
f010fab9:	89 c2                	mov    %eax,%edx
f010fabb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010fac1:	01 d0                	add    %edx,%eax
f010fac3:	48                   	dec    %eax
f010fac4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010faca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010fad0:	ba 00 00 00 00       	mov    $0x0,%edx
f010fad5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010fadb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010fae1:	29 d0                	sub    %edx,%eax
f010fae3:	01 d8                	add    %ebx,%eax
f010fae5:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f010faea:	39 c1                	cmp    %eax,%ecx
f010faec:	74 17                	je     f010fb05 <test_kmalloc_bestfit2+0xc39>
f010faee:	83 ec 04             	sub    $0x4,%esp
f010faf1:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010faf6:	68 a4 02 00 00       	push   $0x2a4
f010fafb:	68 ba ac 11 f0       	push   $0xf011acba
f010fb00:	e8 71 06 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb05:	e8 e2 bb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fb0a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fb0d:	74 17                	je     f010fb26 <test_kmalloc_bestfit2+0xc5a>
f010fb0f:	83 ec 04             	sub    $0x4,%esp
f010fb12:	68 cc ac 11 f0       	push   $0xf011accc
f010fb17:	68 a5 02 00 00       	push   $0x2a5
f010fb1c:	68 ba ac 11 f0       	push   $0xf011acba
f010fb21:	e8 50 06 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f010fb26:	e8 fe a6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fb2b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb2e:	29 c2                	sub    %eax,%edx
f010fb30:	89 d0                	mov    %edx,%eax
f010fb32:	83 f8 02             	cmp    $0x2,%eax
f010fb35:	74 17                	je     f010fb4e <test_kmalloc_bestfit2+0xc82>
f010fb37:	83 ec 04             	sub    $0x4,%esp
f010fb3a:	68 e2 b1 11 f0       	push   $0xf011b1e2
f010fb3f:	68 a6 02 00 00       	push   $0x2a6
f010fb44:	68 ba ac 11 f0       	push   $0xf011acba
f010fb49:	e8 28 06 ff ff       	call   f0100176 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fb4e:	e8 d6 a6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fb53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fb56:	e8 91 bb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fb5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f010fb5e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010fb64:	83 ec 0c             	sub    $0xc,%esp
f010fb67:	50                   	push   %eax
f010fb68:	e8 9b bf ff ff       	call   f010bb08 <kfree>
f010fb6d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb70:	e8 77 bb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fb75:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fb78:	74 17                	je     f010fb91 <test_kmalloc_bestfit2+0xcc5>
f010fb7a:	83 ec 04             	sub    $0x4,%esp
f010fb7d:	68 cc ac 11 f0       	push   $0xf011accc
f010fb82:	68 ac 02 00 00       	push   $0x2ac
f010fb87:	68 ba ac 11 f0       	push   $0xf011acba
f010fb8c:	e8 e5 05 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f010fb91:	e8 93 a6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fb96:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fb99:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fb9e:	74 17                	je     f010fbb7 <test_kmalloc_bestfit2+0xceb>
f010fba0:	83 ec 04             	sub    $0x4,%esp
f010fba3:	68 a4 b1 11 f0       	push   $0xf011b1a4
f010fba8:	68 ad 02 00 00       	push   $0x2ad
f010fbad:	68 ba ac 11 f0       	push   $0xf011acba
f010fbb2:	e8 bf 05 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010fbb7:	e8 6d a6 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fbbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fbbf:	e8 28 bb ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fbc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f010fbc7:	83 ec 0c             	sub    $0xc,%esp
f010fbca:	68 00 fc 2f 00       	push   $0x2ffc00
f010fbcf:	e8 1b be ff ff       	call   f010b9ef <kmalloc>
f010fbd4:	83 c4 10             	add    $0x10,%esp
f010fbd7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fbdd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010fbe3:	89 c1                	mov    %eax,%ecx
f010fbe5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f010fbec:	10 00 00 
f010fbef:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fbf4:	0f b6 d0             	movzbl %al,%edx
f010fbf7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010fbfd:	01 d0                	add    %edx,%eax
f010fbff:	48                   	dec    %eax
f010fc00:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f010fc06:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010fc0c:	ba 00 00 00 00       	mov    $0x0,%edx
f010fc11:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f010fc17:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010fc1d:	29 d0                	sub    %edx,%eax
f010fc1f:	89 c3                	mov    %eax,%ebx
f010fc21:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010fc28:	10 00 00 
f010fc2b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fc30:	0f b6 c0             	movzbl %al,%eax
f010fc33:	c1 e0 04             	shl    $0x4,%eax
f010fc36:	89 c2                	mov    %eax,%edx
f010fc38:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010fc3e:	01 d0                	add    %edx,%eax
f010fc40:	48                   	dec    %eax
f010fc41:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010fc47:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010fc4d:	ba 00 00 00 00       	mov    $0x0,%edx
f010fc52:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010fc58:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010fc5e:	29 d0                	sub    %edx,%eax
f010fc60:	01 d8                	add    %ebx,%eax
f010fc62:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010fc67:	39 c1                	cmp    %eax,%ecx
f010fc69:	74 17                	je     f010fc82 <test_kmalloc_bestfit2+0xdb6>
f010fc6b:	83 ec 04             	sub    $0x4,%esp
f010fc6e:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010fc73:	68 b3 02 00 00       	push   $0x2b3
f010fc78:	68 ba ac 11 f0       	push   $0xf011acba
f010fc7d:	e8 f4 04 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc82:	e8 65 ba ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fc87:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc8a:	74 17                	je     f010fca3 <test_kmalloc_bestfit2+0xdd7>
f010fc8c:	83 ec 04             	sub    $0x4,%esp
f010fc8f:	68 cc ac 11 f0       	push   $0xf011accc
f010fc94:	68 b4 02 00 00       	push   $0x2b4
f010fc99:	68 ba ac 11 f0       	push   $0xf011acba
f010fc9e:	e8 d3 04 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f010fca3:	e8 81 a5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fca8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcab:	29 c2                	sub    %eax,%edx
f010fcad:	89 d0                	mov    %edx,%eax
f010fcaf:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fcb4:	74 17                	je     f010fccd <test_kmalloc_bestfit2+0xe01>
f010fcb6:	83 ec 04             	sub    $0x4,%esp
f010fcb9:	68 a4 b1 11 f0       	push   $0xf011b1a4
f010fcbe:	68 b5 02 00 00       	push   $0x2b5
f010fcc3:	68 ba ac 11 f0       	push   $0xf011acba
f010fcc8:	e8 a9 04 ff ff       	call   f0100176 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f010fccd:	e8 57 a5 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fcd2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fcd5:	e8 12 ba ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fcda:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f010fcdd:	83 ec 0c             	sub    $0xc,%esp
f010fce0:	68 00 fc 3f 00       	push   $0x3ffc00
f010fce5:	e8 05 bd ff ff       	call   f010b9ef <kmalloc>
f010fcea:	83 c4 10             	add    $0x10,%esp
f010fced:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010fcf3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010fcf9:	89 c1                	mov    %eax,%ecx
f010fcfb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010fd02:	10 00 00 
f010fd05:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fd0a:	0f b6 d0             	movzbl %al,%edx
f010fd0d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010fd13:	01 d0                	add    %edx,%eax
f010fd15:	48                   	dec    %eax
f010fd16:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010fd1c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd22:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd27:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010fd2d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd33:	29 d0                	sub    %edx,%eax
f010fd35:	89 c3                	mov    %eax,%ebx
f010fd37:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010fd3e:	10 00 00 
f010fd41:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fd46:	0f b6 c0             	movzbl %al,%eax
f010fd49:	c1 e0 04             	shl    $0x4,%eax
f010fd4c:	89 c2                	mov    %eax,%edx
f010fd4e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010fd54:	01 d0                	add    %edx,%eax
f010fd56:	48                   	dec    %eax
f010fd57:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010fd5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010fd63:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd68:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010fd6e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010fd74:	29 d0                	sub    %edx,%eax
f010fd76:	01 d8                	add    %ebx,%eax
f010fd78:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010fd7d:	39 c1                	cmp    %eax,%ecx
f010fd7f:	74 17                	je     f010fd98 <test_kmalloc_bestfit2+0xecc>
f010fd81:	83 ec 04             	sub    $0x4,%esp
f010fd84:	68 c4 b0 11 f0       	push   $0xf011b0c4
f010fd89:	68 bb 02 00 00       	push   $0x2bb
f010fd8e:	68 ba ac 11 f0       	push   $0xf011acba
f010fd93:	e8 de 03 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fd98:	e8 4f b9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010fd9d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fda0:	74 17                	je     f010fdb9 <test_kmalloc_bestfit2+0xeed>
f010fda2:	83 ec 04             	sub    $0x4,%esp
f010fda5:	68 cc ac 11 f0       	push   $0xf011accc
f010fdaa:	68 bc 02 00 00       	push   $0x2bc
f010fdaf:	68 ba ac 11 f0       	push   $0xf011acba
f010fdb4:	e8 bd 03 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f010fdb9:	e8 6b a4 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010fdbe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fdc1:	29 c2                	sub    %eax,%edx
f010fdc3:	89 d0                	mov    %edx,%eax
f010fdc5:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fdca:	74 17                	je     f010fde3 <test_kmalloc_bestfit2+0xf17>
f010fdcc:	83 ec 04             	sub    $0x4,%esp
f010fdcf:	68 a4 b1 11 f0       	push   $0xf011b1a4
f010fdd4:	68 bd 02 00 00       	push   $0x2bd
f010fdd9:	68 ba ac 11 f0       	push   $0xf011acba
f010fdde:	e8 93 03 ff ff       	call   f0100176 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f010fde3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010fdea:	10 00 00 
f010fded:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fdf2:	0f b6 d0             	movzbl %al,%edx
f010fdf5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010fdfb:	01 d0                	add    %edx,%eax
f010fdfd:	48                   	dec    %eax
f010fdfe:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010fe04:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010fe0a:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe0f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010fe15:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010fe1b:	29 d0                	sub    %edx,%eax
f010fe1d:	89 c1                	mov    %eax,%ecx
f010fe1f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010fe26:	10 00 00 
f010fe29:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010fe2e:	0f b6 c0             	movzbl %al,%eax
f010fe31:	c1 e0 04             	shl    $0x4,%eax
f010fe34:	89 c2                	mov    %eax,%edx
f010fe36:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010fe3c:	01 d0                	add    %edx,%eax
f010fe3e:	48                   	dec    %eax
f010fe3f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010fe45:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fe4b:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe50:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010fe56:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fe5c:	29 d0                	sub    %edx,%eax
f010fe5e:	01 c8                	add    %ecx,%eax
f010fe60:	ba 00 f0 1f 09       	mov    $0x91ff000,%edx
f010fe65:	29 c2                	sub    %eax,%edx
f010fe67:	89 d0                	mov    %edx,%eax
f010fe69:	83 ec 0c             	sub    $0xc,%esp
f010fe6c:	50                   	push   %eax
f010fe6d:	e8 7d bb ff ff       	call   f010b9ef <kmalloc>
f010fe72:	83 c4 10             	add    $0x10,%esp
f010fe75:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f010fe7b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010fe81:	85 c0                	test   %eax,%eax
f010fe83:	74 17                	je     f010fe9c <test_kmalloc_bestfit2+0xfd0>
f010fe85:	83 ec 04             	sub    $0x4,%esp
f010fe88:	68 f4 b1 11 f0       	push   $0xf011b1f4
f010fe8d:	68 c5 02 00 00       	push   $0x2c5
f010fe92:	68 ba ac 11 f0       	push   $0xf011acba
f010fe97:	e8 da 02 ff ff       	call   f0100176 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f010fe9c:	83 ec 0c             	sub    $0xc,%esp
f010fe9f:	68 58 b2 11 f0       	push   $0xf011b258
f010fea4:	e8 ec 6e ff ff       	call   f0106d95 <cprintf>
f010fea9:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f010feac:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010feb1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010feb4:	5b                   	pop    %ebx
f010feb5:	5f                   	pop    %edi
f010feb6:	5d                   	pop    %ebp
f010feb7:	c3                   	ret    

f010feb8 <test_kfree>:

int test_kfree()
{
f010feb8:	55                   	push   %ebp
f010feb9:	89 e5                	mov    %esp,%ebp
f010febb:	57                   	push   %edi
f010febc:	53                   	push   %ebx
f010febd:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f010fec3:	83 ec 0c             	sub    $0xc,%esp
f010fec6:	68 fc ab 11 f0       	push   $0xf011abfc
f010fecb:	e8 c5 6e ff ff       	call   f0106d95 <cprintf>
f010fed0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010fed3:	83 ec 0c             	sub    $0xc,%esp
f010fed6:	68 2c ac 11 f0       	push   $0xf011ac2c
f010fedb:	e8 b5 6e ff ff       	call   f0106d95 <cprintf>
f010fee0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010fee3:	83 ec 0c             	sub    $0xc,%esp
f010fee6:	68 fc ab 11 f0       	push   $0xf011abfc
f010feeb:	e8 a5 6e ff ff       	call   f0106d95 <cprintf>
f010fef0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010fef3:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f010fef7:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f010fefb:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f010ff01:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f010ff07:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f010ff0e:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010ff15:	e8 0f a3 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ff1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f010ff1d:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010ff23:	b9 14 00 00 00       	mov    $0x14,%ecx
f010ff28:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff2d:	89 d7                	mov    %edx,%edi
f010ff2f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f010ff31:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f010ff37:	b9 14 00 00 00       	mov    $0x14,%ecx
f010ff3c:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff41:	89 d7                	mov    %edx,%edi
f010ff43:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f010ff45:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f010ff4b:	b9 14 00 00 00       	mov    $0x14,%ecx
f010ff50:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff55:	89 d7                	mov    %edx,%edi
f010ff57:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010ff59:	e8 cb a2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f010ff5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ff61:	e8 86 b7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f010ff66:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010ff69:	83 ec 0c             	sub    $0xc,%esp
f010ff6c:	68 00 fc 1f 00       	push   $0x1ffc00
f010ff71:	e8 79 ba ff ff       	call   f010b9ef <kmalloc>
f010ff76:	83 c4 10             	add    $0x10,%esp
f010ff79:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010ff7f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f010ff85:	89 c1                	mov    %eax,%ecx
f010ff87:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010ff8e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ff93:	0f b6 d0             	movzbl %al,%edx
f010ff96:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ff99:	01 d0                	add    %edx,%eax
f010ff9b:	48                   	dec    %eax
f010ff9c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ff9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ffa2:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffa7:	f7 75 c8             	divl   -0x38(%ebp)
f010ffaa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ffad:	29 d0                	sub    %edx,%eax
f010ffaf:	89 c3                	mov    %eax,%ebx
f010ffb1:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010ffb8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f010ffbd:	0f b6 c0             	movzbl %al,%eax
f010ffc0:	c1 e0 04             	shl    $0x4,%eax
f010ffc3:	89 c2                	mov    %eax,%edx
f010ffc5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ffc8:	01 d0                	add    %edx,%eax
f010ffca:	48                   	dec    %eax
f010ffcb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010ffce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ffd1:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffd6:	f7 75 c0             	divl   -0x40(%ebp)
f010ffd9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ffdc:	29 d0                	sub    %edx,%eax
f010ffde:	01 d8                	add    %ebx,%eax
f010ffe0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010ffe5:	39 c1                	cmp    %eax,%ecx
f010ffe7:	74 17                	je     f0110000 <test_kfree+0x148>
f010ffe9:	83 ec 04             	sub    $0x4,%esp
f010ffec:	68 98 ad 11 f0       	push   $0xf011ad98
f010fff1:	68 ec 02 00 00       	push   $0x2ec
f010fff6:	68 ba ac 11 f0       	push   $0xf011acba
f010fffb:	e8 76 01 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110000:	e8 e7 b6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110005:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110008:	74 17                	je     f0110021 <test_kfree+0x169>
f011000a:	83 ec 04             	sub    $0x4,%esp
f011000d:	68 cc ac 11 f0       	push   $0xf011accc
f0110012:	68 ed 02 00 00       	push   $0x2ed
f0110017:	68 ba ac 11 f0       	push   $0xf011acba
f011001c:	e8 55 01 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110021:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110024:	e8 00 a2 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110029:	29 c3                	sub    %eax,%ebx
f011002b:	89 d8                	mov    %ebx,%eax
f011002d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110032:	74 17                	je     f011004b <test_kfree+0x193>
f0110034:	83 ec 04             	sub    $0x4,%esp
f0110037:	68 34 ad 11 f0       	push   $0xf011ad34
f011003c:	68 ee 02 00 00       	push   $0x2ee
f0110041:	68 ba ac 11 f0       	push   $0xf011acba
f0110046:	e8 2b 01 ff ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011004b:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0110052:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110055:	e8 cf a1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011005a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011005d:	e8 8a b6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110062:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0110065:	83 ec 0c             	sub    $0xc,%esp
f0110068:	68 00 fc 1f 00       	push   $0x1ffc00
f011006d:	e8 7d b9 ff ff       	call   f010b9ef <kmalloc>
f0110072:	83 c4 10             	add    $0x10,%esp
f0110075:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011007b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0110081:	89 c1                	mov    %eax,%ecx
f0110083:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011008a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011008f:	0f b6 d0             	movzbl %al,%edx
f0110092:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110095:	01 d0                	add    %edx,%eax
f0110097:	48                   	dec    %eax
f0110098:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011009b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011009e:	ba 00 00 00 00       	mov    $0x0,%edx
f01100a3:	f7 75 b8             	divl   -0x48(%ebp)
f01100a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01100a9:	29 d0                	sub    %edx,%eax
f01100ab:	89 c3                	mov    %eax,%ebx
f01100ad:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01100b4:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01100b9:	0f b6 c0             	movzbl %al,%eax
f01100bc:	c1 e0 04             	shl    $0x4,%eax
f01100bf:	89 c2                	mov    %eax,%edx
f01100c1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01100c4:	01 d0                	add    %edx,%eax
f01100c6:	48                   	dec    %eax
f01100c7:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01100ca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01100cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01100d2:	f7 75 b0             	divl   -0x50(%ebp)
f01100d5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01100d8:	29 d0                	sub    %edx,%eax
f01100da:	01 d8                	add    %ebx,%eax
f01100dc:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f01100e1:	39 c1                	cmp    %eax,%ecx
f01100e3:	74 17                	je     f01100fc <test_kfree+0x244>
f01100e5:	83 ec 04             	sub    $0x4,%esp
f01100e8:	68 98 ad 11 f0       	push   $0xf011ad98
f01100ed:	68 f5 02 00 00       	push   $0x2f5
f01100f2:	68 ba ac 11 f0       	push   $0xf011acba
f01100f7:	e8 7a 00 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01100fc:	e8 eb b5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110101:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110104:	74 17                	je     f011011d <test_kfree+0x265>
f0110106:	83 ec 04             	sub    $0x4,%esp
f0110109:	68 cc ac 11 f0       	push   $0xf011accc
f011010e:	68 f6 02 00 00       	push   $0x2f6
f0110113:	68 ba ac 11 f0       	push   $0xf011acba
f0110118:	e8 59 00 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011011d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110120:	e8 04 a1 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110125:	29 c3                	sub    %eax,%ebx
f0110127:	89 d8                	mov    %ebx,%eax
f0110129:	3d 00 02 00 00       	cmp    $0x200,%eax
f011012e:	74 17                	je     f0110147 <test_kfree+0x28f>
f0110130:	83 ec 04             	sub    $0x4,%esp
f0110133:	68 34 ad 11 f0       	push   $0xf011ad34
f0110138:	68 f7 02 00 00       	push   $0x2f7
f011013d:	68 ba ac 11 f0       	push   $0xf011acba
f0110142:	e8 2f 00 ff ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0110147:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f011014e:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110151:	e8 d3 a0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110156:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110159:	e8 8e b5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011015e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0110161:	83 ec 0c             	sub    $0xc,%esp
f0110164:	68 00 08 00 00       	push   $0x800
f0110169:	e8 81 b8 ff ff       	call   f010b9ef <kmalloc>
f011016e:	83 c4 10             	add    $0x10,%esp
f0110171:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110177:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011017d:	89 c1                	mov    %eax,%ecx
f011017f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0110186:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011018b:	0f b6 d0             	movzbl %al,%edx
f011018e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110191:	01 d0                	add    %edx,%eax
f0110193:	48                   	dec    %eax
f0110194:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110197:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011019a:	ba 00 00 00 00       	mov    $0x0,%edx
f011019f:	f7 75 a8             	divl   -0x58(%ebp)
f01101a2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01101a5:	29 d0                	sub    %edx,%eax
f01101a7:	89 c3                	mov    %eax,%ebx
f01101a9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01101b0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01101b5:	0f b6 c0             	movzbl %al,%eax
f01101b8:	c1 e0 04             	shl    $0x4,%eax
f01101bb:	89 c2                	mov    %eax,%edx
f01101bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01101c0:	01 d0                	add    %edx,%eax
f01101c2:	48                   	dec    %eax
f01101c3:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01101c6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01101c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01101ce:	f7 75 a0             	divl   -0x60(%ebp)
f01101d1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01101d4:	29 d0                	sub    %edx,%eax
f01101d6:	01 d8                	add    %ebx,%eax
f01101d8:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f01101dd:	39 c1                	cmp    %eax,%ecx
f01101df:	74 17                	je     f01101f8 <test_kfree+0x340>
f01101e1:	83 ec 04             	sub    $0x4,%esp
f01101e4:	68 98 ad 11 f0       	push   $0xf011ad98
f01101e9:	68 fe 02 00 00       	push   $0x2fe
f01101ee:	68 ba ac 11 f0       	push   $0xf011acba
f01101f3:	e8 7e ff fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01101f8:	e8 ef b4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01101fd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110200:	74 17                	je     f0110219 <test_kfree+0x361>
f0110202:	83 ec 04             	sub    $0x4,%esp
f0110205:	68 cc ac 11 f0       	push   $0xf011accc
f011020a:	68 ff 02 00 00       	push   $0x2ff
f011020f:	68 ba ac 11 f0       	push   $0xf011acba
f0110214:	e8 5d ff fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110219:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011021c:	e8 08 a0 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110221:	29 c3                	sub    %eax,%ebx
f0110223:	89 d8                	mov    %ebx,%eax
f0110225:	83 f8 01             	cmp    $0x1,%eax
f0110228:	74 17                	je     f0110241 <test_kfree+0x389>
f011022a:	83 ec 04             	sub    $0x4,%esp
f011022d:	68 34 ad 11 f0       	push   $0xf011ad34
f0110232:	68 00 03 00 00       	push   $0x300
f0110237:	68 ba ac 11 f0       	push   $0xf011acba
f011023c:	e8 35 ff fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0110241:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0110248:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011024b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110251:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0110254:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011025b:	eb 0e                	jmp    f011026b <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011025d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110260:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110263:	01 d0                	add    %edx,%eax
f0110265:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0110268:	ff 45 f4             	incl   -0xc(%ebp)
f011026b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110271:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110274:	7f e7                	jg     f011025d <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110276:	e8 ae 9f ff ff       	call   f010a229 <sys_calculate_free_frames>
f011027b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011027e:	e8 69 b4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110283:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0110286:	83 ec 0c             	sub    $0xc,%esp
f0110289:	68 00 08 00 00       	push   $0x800
f011028e:	e8 5c b7 ff ff       	call   f010b9ef <kmalloc>
f0110293:	83 c4 10             	add    $0x10,%esp
f0110296:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011029c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01102a2:	89 c1                	mov    %eax,%ecx
f01102a4:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01102ab:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01102b0:	0f b6 d0             	movzbl %al,%edx
f01102b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01102b6:	01 d0                	add    %edx,%eax
f01102b8:	48                   	dec    %eax
f01102b9:	89 45 90             	mov    %eax,-0x70(%ebp)
f01102bc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01102bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01102c4:	f7 75 94             	divl   -0x6c(%ebp)
f01102c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01102ca:	29 d0                	sub    %edx,%eax
f01102cc:	89 c3                	mov    %eax,%ebx
f01102ce:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01102d5:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01102da:	0f b6 c0             	movzbl %al,%eax
f01102dd:	c1 e0 04             	shl    $0x4,%eax
f01102e0:	89 c2                	mov    %eax,%edx
f01102e2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01102e5:	01 d0                	add    %edx,%eax
f01102e7:	48                   	dec    %eax
f01102e8:	89 45 88             	mov    %eax,-0x78(%ebp)
f01102eb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01102ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01102f3:	f7 75 8c             	divl   -0x74(%ebp)
f01102f6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01102f9:	29 d0                	sub    %edx,%eax
f01102fb:	01 d8                	add    %ebx,%eax
f01102fd:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0110302:	39 c1                	cmp    %eax,%ecx
f0110304:	74 17                	je     f011031d <test_kfree+0x465>
f0110306:	83 ec 04             	sub    $0x4,%esp
f0110309:	68 98 ad 11 f0       	push   $0xf011ad98
f011030e:	68 0c 03 00 00       	push   $0x30c
f0110313:	68 ba ac 11 f0       	push   $0xf011acba
f0110318:	e8 59 fe fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011031d:	e8 ca b3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110322:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110325:	74 17                	je     f011033e <test_kfree+0x486>
f0110327:	83 ec 04             	sub    $0x4,%esp
f011032a:	68 cc ac 11 f0       	push   $0xf011accc
f011032f:	68 0d 03 00 00       	push   $0x30d
f0110334:	68 ba ac 11 f0       	push   $0xf011acba
f0110339:	e8 38 fe fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011033e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110341:	e8 e3 9e ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110346:	29 c3                	sub    %eax,%ebx
f0110348:	89 d8                	mov    %ebx,%eax
f011034a:	83 f8 01             	cmp    $0x1,%eax
f011034d:	74 17                	je     f0110366 <test_kfree+0x4ae>
f011034f:	83 ec 04             	sub    $0x4,%esp
f0110352:	68 34 ad 11 f0       	push   $0xf011ad34
f0110357:	68 0e 03 00 00       	push   $0x30e
f011035c:	68 ba ac 11 f0       	push   $0xf011acba
f0110361:	e8 10 fe fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0110366:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f011036d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0110370:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0110376:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0110379:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110380:	eb 0e                	jmp    f0110390 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f0110382:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110385:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110388:	01 d0                	add    %edx,%eax
f011038a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011038d:	ff 45 f4             	incl   -0xc(%ebp)
f0110390:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110396:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110399:	7f e7                	jg     f0110382 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011039b:	e8 89 9e ff ff       	call   f010a229 <sys_calculate_free_frames>
f01103a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01103a3:	e8 44 b3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01103a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01103ab:	83 ec 0c             	sub    $0xc,%esp
f01103ae:	68 00 1c 00 00       	push   $0x1c00
f01103b3:	e8 37 b6 ff ff       	call   f010b9ef <kmalloc>
f01103b8:	83 c4 10             	add    $0x10,%esp
f01103bb:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01103c1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01103c7:	89 c1                	mov    %eax,%ecx
f01103c9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01103d0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01103d5:	0f b6 d0             	movzbl %al,%edx
f01103d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01103db:	01 d0                	add    %edx,%eax
f01103dd:	48                   	dec    %eax
f01103de:	89 45 80             	mov    %eax,-0x80(%ebp)
f01103e1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01103e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01103e9:	f7 75 84             	divl   -0x7c(%ebp)
f01103ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01103ef:	29 d0                	sub    %edx,%eax
f01103f1:	89 c3                	mov    %eax,%ebx
f01103f3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01103fa:	10 00 00 
f01103fd:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110402:	0f b6 c0             	movzbl %al,%eax
f0110405:	c1 e0 04             	shl    $0x4,%eax
f0110408:	89 c2                	mov    %eax,%edx
f011040a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110410:	01 d0                	add    %edx,%eax
f0110412:	48                   	dec    %eax
f0110413:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0110419:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011041f:	ba 00 00 00 00       	mov    $0x0,%edx
f0110424:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011042a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110430:	29 d0                	sub    %edx,%eax
f0110432:	01 d8                	add    %ebx,%eax
f0110434:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0110439:	39 c1                	cmp    %eax,%ecx
f011043b:	74 17                	je     f0110454 <test_kfree+0x59c>
f011043d:	83 ec 04             	sub    $0x4,%esp
f0110440:	68 98 ad 11 f0       	push   $0xf011ad98
f0110445:	68 1a 03 00 00       	push   $0x31a
f011044a:	68 ba ac 11 f0       	push   $0xf011acba
f011044f:	e8 22 fd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110454:	e8 93 b2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110459:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011045c:	74 17                	je     f0110475 <test_kfree+0x5bd>
f011045e:	83 ec 04             	sub    $0x4,%esp
f0110461:	68 cc ac 11 f0       	push   $0xf011accc
f0110466:	68 1b 03 00 00       	push   $0x31b
f011046b:	68 ba ac 11 f0       	push   $0xf011acba
f0110470:	e8 01 fd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110475:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110478:	e8 ac 9d ff ff       	call   f010a229 <sys_calculate_free_frames>
f011047d:	29 c3                	sub    %eax,%ebx
f011047f:	89 d8                	mov    %ebx,%eax
f0110481:	83 f8 02             	cmp    $0x2,%eax
f0110484:	74 17                	je     f011049d <test_kfree+0x5e5>
f0110486:	83 ec 04             	sub    $0x4,%esp
f0110489:	68 34 ad 11 f0       	push   $0xf011ad34
f011048e:	68 1c 03 00 00       	push   $0x31c
f0110493:	68 ba ac 11 f0       	push   $0xf011acba
f0110498:	e8 d9 fc fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011049d:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f01104a4:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01104a7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01104ad:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01104b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01104b7:	eb 0e                	jmp    f01104c7 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f01104b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01104bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01104bf:	01 d0                	add    %edx,%eax
f01104c1:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01104c4:	ff 45 f4             	incl   -0xc(%ebp)
f01104c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01104cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01104d0:	7f e7                	jg     f01104b9 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01104d2:	e8 52 9d ff ff       	call   f010a229 <sys_calculate_free_frames>
f01104d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01104da:	e8 0d b2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01104df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01104e2:	83 ec 0c             	sub    $0xc,%esp
f01104e5:	68 00 fc 2f 00       	push   $0x2ffc00
f01104ea:	e8 00 b5 ff ff       	call   f010b9ef <kmalloc>
f01104ef:	83 c4 10             	add    $0x10,%esp
f01104f2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01104f8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01104fe:	89 c1                	mov    %eax,%ecx
f0110500:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0110507:	10 00 00 
f011050a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011050f:	0f b6 d0             	movzbl %al,%edx
f0110512:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110518:	01 d0                	add    %edx,%eax
f011051a:	48                   	dec    %eax
f011051b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0110521:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110527:	ba 00 00 00 00       	mov    $0x0,%edx
f011052c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0110532:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110538:	29 d0                	sub    %edx,%eax
f011053a:	89 c3                	mov    %eax,%ebx
f011053c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110543:	10 00 00 
f0110546:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011054b:	0f b6 c0             	movzbl %al,%eax
f011054e:	c1 e0 04             	shl    $0x4,%eax
f0110551:	89 c2                	mov    %eax,%edx
f0110553:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110559:	01 d0                	add    %edx,%eax
f011055b:	48                   	dec    %eax
f011055c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110562:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110568:	ba 00 00 00 00       	mov    $0x0,%edx
f011056d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110573:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110579:	29 d0                	sub    %edx,%eax
f011057b:	01 d8                	add    %ebx,%eax
f011057d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0110582:	39 c1                	cmp    %eax,%ecx
f0110584:	74 17                	je     f011059d <test_kfree+0x6e5>
f0110586:	83 ec 04             	sub    $0x4,%esp
f0110589:	68 98 ad 11 f0       	push   $0xf011ad98
f011058e:	68 28 03 00 00       	push   $0x328
f0110593:	68 ba ac 11 f0       	push   $0xf011acba
f0110598:	e8 d9 fb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011059d:	e8 4a b1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01105a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01105a5:	74 17                	je     f01105be <test_kfree+0x706>
f01105a7:	83 ec 04             	sub    $0x4,%esp
f01105aa:	68 cc ac 11 f0       	push   $0xf011accc
f01105af:	68 29 03 00 00       	push   $0x329
f01105b4:	68 ba ac 11 f0       	push   $0xf011acba
f01105b9:	e8 b8 fb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01105be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01105c1:	e8 63 9c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01105c6:	29 c3                	sub    %eax,%ebx
f01105c8:	89 d8                	mov    %ebx,%eax
f01105ca:	3d 00 03 00 00       	cmp    $0x300,%eax
f01105cf:	74 17                	je     f01105e8 <test_kfree+0x730>
f01105d1:	83 ec 04             	sub    $0x4,%esp
f01105d4:	68 34 ad 11 f0       	push   $0xf011ad34
f01105d9:	68 2a 03 00 00       	push   $0x32a
f01105de:	68 ba ac 11 f0       	push   $0xf011acba
f01105e3:	e8 8e fb fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01105e8:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f01105ef:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01105f2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01105f8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01105fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110602:	eb 0e                	jmp    f0110612 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0110604:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110607:	8b 45 98             	mov    -0x68(%ebp),%eax
f011060a:	01 d0                	add    %edx,%eax
f011060c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011060f:	ff 45 f4             	incl   -0xc(%ebp)
f0110612:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110618:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011061b:	7f e7                	jg     f0110604 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011061d:	e8 07 9c ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110622:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110625:	e8 c2 b0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011062a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011062d:	83 ec 0c             	sub    $0xc,%esp
f0110630:	68 00 fc 5f 00       	push   $0x5ffc00
f0110635:	e8 b5 b3 ff ff       	call   f010b9ef <kmalloc>
f011063a:	83 c4 10             	add    $0x10,%esp
f011063d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110643:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110649:	89 c1                	mov    %eax,%ecx
f011064b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110652:	10 00 00 
f0110655:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011065a:	0f b6 d0             	movzbl %al,%edx
f011065d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110663:	01 d0                	add    %edx,%eax
f0110665:	48                   	dec    %eax
f0110666:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011066c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110672:	ba 00 00 00 00       	mov    $0x0,%edx
f0110677:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011067d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110683:	29 d0                	sub    %edx,%eax
f0110685:	89 c3                	mov    %eax,%ebx
f0110687:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011068e:	10 00 00 
f0110691:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110696:	0f b6 c0             	movzbl %al,%eax
f0110699:	c1 e0 04             	shl    $0x4,%eax
f011069c:	89 c2                	mov    %eax,%edx
f011069e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01106a4:	01 d0                	add    %edx,%eax
f01106a6:	48                   	dec    %eax
f01106a7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01106ad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01106b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01106b8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01106be:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01106c4:	29 d0                	sub    %edx,%eax
f01106c6:	01 d8                	add    %ebx,%eax
f01106c8:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01106cd:	39 c1                	cmp    %eax,%ecx
f01106cf:	74 17                	je     f01106e8 <test_kfree+0x830>
f01106d1:	83 ec 04             	sub    $0x4,%esp
f01106d4:	68 98 ad 11 f0       	push   $0xf011ad98
f01106d9:	68 36 03 00 00       	push   $0x336
f01106de:	68 ba ac 11 f0       	push   $0xf011acba
f01106e3:	e8 8e fa fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01106e8:	e8 ff af ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01106ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01106f0:	74 17                	je     f0110709 <test_kfree+0x851>
f01106f2:	83 ec 04             	sub    $0x4,%esp
f01106f5:	68 cc ac 11 f0       	push   $0xf011accc
f01106fa:	68 37 03 00 00       	push   $0x337
f01106ff:	68 ba ac 11 f0       	push   $0xf011acba
f0110704:	e8 6d fa fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110709:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011070c:	e8 18 9b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110711:	29 c3                	sub    %eax,%ebx
f0110713:	89 d8                	mov    %ebx,%eax
f0110715:	3d 00 06 00 00       	cmp    $0x600,%eax
f011071a:	74 17                	je     f0110733 <test_kfree+0x87b>
f011071c:	83 ec 04             	sub    $0x4,%esp
f011071f:	68 34 ad 11 f0       	push   $0xf011ad34
f0110724:	68 38 03 00 00       	push   $0x338
f0110729:	68 ba ac 11 f0       	push   $0xf011acba
f011072e:	e8 43 fa fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0110733:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f011073a:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011073d:	e8 e7 9a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110742:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110745:	e8 a2 af ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011074a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011074d:	83 ec 0c             	sub    $0xc,%esp
f0110750:	68 00 38 00 00       	push   $0x3800
f0110755:	e8 95 b2 ff ff       	call   f010b9ef <kmalloc>
f011075a:	83 c4 10             	add    $0x10,%esp
f011075d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110763:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110769:	89 c1                	mov    %eax,%ecx
f011076b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0110772:	10 00 00 
f0110775:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011077a:	0f b6 d0             	movzbl %al,%edx
f011077d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0110783:	01 d0                	add    %edx,%eax
f0110785:	48                   	dec    %eax
f0110786:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011078c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110792:	ba 00 00 00 00       	mov    $0x0,%edx
f0110797:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011079d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01107a3:	29 d0                	sub    %edx,%eax
f01107a5:	89 c3                	mov    %eax,%ebx
f01107a7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01107ae:	10 00 00 
f01107b1:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01107b6:	0f b6 c0             	movzbl %al,%eax
f01107b9:	c1 e0 04             	shl    $0x4,%eax
f01107bc:	89 c2                	mov    %eax,%edx
f01107be:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01107c4:	01 d0                	add    %edx,%eax
f01107c6:	48                   	dec    %eax
f01107c7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01107cd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01107d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01107d8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01107de:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01107e4:	29 d0                	sub    %edx,%eax
f01107e6:	01 d8                	add    %ebx,%eax
f01107e8:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f01107ed:	39 c1                	cmp    %eax,%ecx
f01107ef:	74 17                	je     f0110808 <test_kfree+0x950>
f01107f1:	83 ec 04             	sub    $0x4,%esp
f01107f4:	68 98 ad 11 f0       	push   $0xf011ad98
f01107f9:	68 3f 03 00 00       	push   $0x33f
f01107fe:	68 ba ac 11 f0       	push   $0xf011acba
f0110803:	e8 6e f9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110808:	e8 df ae ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011080d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110810:	74 17                	je     f0110829 <test_kfree+0x971>
f0110812:	83 ec 04             	sub    $0x4,%esp
f0110815:	68 cc ac 11 f0       	push   $0xf011accc
f011081a:	68 40 03 00 00       	push   $0x340
f011081f:	68 ba ac 11 f0       	push   $0xf011acba
f0110824:	e8 4d f9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110829:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011082c:	e8 f8 99 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110831:	29 c3                	sub    %eax,%ebx
f0110833:	89 d8                	mov    %ebx,%eax
f0110835:	83 f8 04             	cmp    $0x4,%eax
f0110838:	74 17                	je     f0110851 <test_kfree+0x999>
f011083a:	83 ec 04             	sub    $0x4,%esp
f011083d:	68 34 ad 11 f0       	push   $0xf011ad34
f0110842:	68 41 03 00 00       	push   $0x341
f0110847:	68 ba ac 11 f0       	push   $0xf011acba
f011084c:	e8 25 f9 fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0110851:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0110858:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011085b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110861:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0110864:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011086b:	eb 0e                	jmp    f011087b <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011086d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110870:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110873:	01 d0                	add    %edx,%eax
f0110875:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0110878:	ff 45 f4             	incl   -0xc(%ebp)
f011087b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0110881:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110884:	7f e7                	jg     f011086d <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0110886:	e8 9e 99 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011088b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0110891:	e8 56 ae ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110896:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011089c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01108a2:	83 ec 0c             	sub    $0xc,%esp
f01108a5:	50                   	push   %eax
f01108a6:	e8 5d b2 ff ff       	call   f010bb08 <kfree>
f01108ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01108ae:	e8 39 ae ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01108b3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01108b9:	74 17                	je     f01108d2 <test_kfree+0xa1a>
f01108bb:	83 ec 04             	sub    $0x4,%esp
f01108be:	68 cc ac 11 f0       	push   $0xf011accc
f01108c3:	68 50 03 00 00       	push   $0x350
f01108c8:	68 ba ac 11 f0       	push   $0xf011acba
f01108cd:	e8 a4 f8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01108d2:	e8 52 99 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01108d7:	89 c2                	mov    %eax,%edx
f01108d9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01108df:	29 c2                	sub    %eax,%edx
f01108e1:	89 d0                	mov    %edx,%eax
f01108e3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01108e8:	74 17                	je     f0110901 <test_kfree+0xa49>
f01108ea:	83 ec 04             	sub    $0x4,%esp
f01108ed:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01108f2:	68 51 03 00 00       	push   $0x351
f01108f7:	68 ba ac 11 f0       	push   $0xf011acba
f01108fc:	e8 75 f8 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110901:	e8 23 99 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110906:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011090c:	e8 db ad ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110911:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0110917:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011091d:	83 ec 0c             	sub    $0xc,%esp
f0110920:	50                   	push   %eax
f0110921:	e8 e2 b1 ff ff       	call   f010bb08 <kfree>
f0110926:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110929:	e8 be ad ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011092e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0110934:	74 17                	je     f011094d <test_kfree+0xa95>
f0110936:	83 ec 04             	sub    $0x4,%esp
f0110939:	68 cc ac 11 f0       	push   $0xf011accc
f011093e:	68 57 03 00 00       	push   $0x357
f0110943:	68 ba ac 11 f0       	push   $0xf011acba
f0110948:	e8 29 f8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011094d:	e8 d7 98 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110952:	89 c2                	mov    %eax,%edx
f0110954:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011095a:	29 c2                	sub    %eax,%edx
f011095c:	89 d0                	mov    %edx,%eax
f011095e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110963:	74 17                	je     f011097c <test_kfree+0xac4>
f0110965:	83 ec 04             	sub    $0x4,%esp
f0110968:	68 a0 b2 11 f0       	push   $0xf011b2a0
f011096d:	68 58 03 00 00       	push   $0x358
f0110972:	68 ba ac 11 f0       	push   $0xf011acba
f0110977:	e8 fa f7 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011097c:	e8 a8 98 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110981:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110987:	e8 60 ad ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011098c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0110992:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110998:	83 ec 0c             	sub    $0xc,%esp
f011099b:	50                   	push   %eax
f011099c:	e8 67 b1 ff ff       	call   f010bb08 <kfree>
f01109a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01109a4:	e8 43 ad ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01109a9:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01109af:	74 17                	je     f01109c8 <test_kfree+0xb10>
f01109b1:	83 ec 04             	sub    $0x4,%esp
f01109b4:	68 cc ac 11 f0       	push   $0xf011accc
f01109b9:	68 5e 03 00 00       	push   $0x35e
f01109be:	68 ba ac 11 f0       	push   $0xf011acba
f01109c3:	e8 ae f7 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01109c8:	e8 5c 98 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01109cd:	89 c2                	mov    %eax,%edx
f01109cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01109d5:	29 c2                	sub    %eax,%edx
f01109d7:	89 d0                	mov    %edx,%eax
f01109d9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01109de:	74 17                	je     f01109f7 <test_kfree+0xb3f>
f01109e0:	83 ec 04             	sub    $0x4,%esp
f01109e3:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01109e8:	68 5f 03 00 00       	push   $0x35f
f01109ed:	68 ba ac 11 f0       	push   $0xf011acba
f01109f2:	e8 7f f7 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01109f7:	83 ec 0c             	sub    $0xc,%esp
f01109fa:	68 d8 b2 11 f0       	push   $0xf011b2d8
f01109ff:	e8 91 63 ff ff       	call   f0106d95 <cprintf>
f0110a04:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0110a07:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110a0d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0110a10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110a17:	eb 1e                	jmp    f0110a37 <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f0110a19:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0110a1f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110a22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110a25:	01 c8                	add    %ecx,%eax
f0110a27:	8a 00                	mov    (%eax),%al
f0110a29:	0f be c0             	movsbl %al,%eax
f0110a2c:	01 d0                	add    %edx,%eax
f0110a2e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0110a34:	ff 45 f4             	incl   -0xc(%ebp)
f0110a37:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110a3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110a40:	7f d7                	jg     f0110a19 <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0110a42:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0110a48:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110a4e:	01 c0                	add    %eax,%eax
f0110a50:	39 c2                	cmp    %eax,%edx
f0110a52:	74 17                	je     f0110a6b <test_kfree+0xbb3>
f0110a54:	83 ec 04             	sub    $0x4,%esp
f0110a57:	68 fc b2 11 f0       	push   $0xf011b2fc
f0110a5c:	68 6c 03 00 00       	push   $0x36c
f0110a61:	68 ba ac 11 f0       	push   $0xf011acba
f0110a66:	e8 0b f7 fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0110a6b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0110a71:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0110a74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110a7b:	eb 1e                	jmp    f0110a9b <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f0110a7d:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0110a83:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110a86:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110a89:	01 c8                	add    %ecx,%eax
f0110a8b:	8a 00                	mov    (%eax),%al
f0110a8d:	0f be c0             	movsbl %al,%eax
f0110a90:	01 d0                	add    %edx,%eax
f0110a92:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0110a98:	ff 45 f4             	incl   -0xc(%ebp)
f0110a9b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110aa1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110aa4:	7f d7                	jg     f0110a7d <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0110aa6:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0110aac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110ab2:	89 c1                	mov    %eax,%ecx
f0110ab4:	01 c9                	add    %ecx,%ecx
f0110ab6:	01 c8                	add    %ecx,%eax
f0110ab8:	39 c2                	cmp    %eax,%edx
f0110aba:	74 17                	je     f0110ad3 <test_kfree+0xc1b>
f0110abc:	83 ec 04             	sub    $0x4,%esp
f0110abf:	68 fc b2 11 f0       	push   $0xf011b2fc
f0110ac4:	68 74 03 00 00       	push   $0x374
f0110ac9:	68 ba ac 11 f0       	push   $0xf011acba
f0110ace:	e8 a3 f6 fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0110ad3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110ad9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0110adc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110ae3:	eb 1e                	jmp    f0110b03 <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f0110ae5:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0110aeb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110aee:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110af1:	01 c8                	add    %ecx,%eax
f0110af3:	8a 00                	mov    (%eax),%al
f0110af5:	0f be c0             	movsbl %al,%eax
f0110af8:	01 d0                	add    %edx,%eax
f0110afa:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0110b00:	ff 45 f4             	incl   -0xc(%ebp)
f0110b03:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110b09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b0c:	7f d7                	jg     f0110ae5 <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0110b0e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0110b14:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0110b1a:	c1 e2 02             	shl    $0x2,%edx
f0110b1d:	39 d0                	cmp    %edx,%eax
f0110b1f:	74 17                	je     f0110b38 <test_kfree+0xc80>
f0110b21:	83 ec 04             	sub    $0x4,%esp
f0110b24:	68 fc b2 11 f0       	push   $0xf011b2fc
f0110b29:	68 7c 03 00 00       	push   $0x37c
f0110b2e:	68 ba ac 11 f0       	push   $0xf011acba
f0110b33:	e8 3e f6 fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0110b38:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110b3e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0110b41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110b48:	eb 1e                	jmp    f0110b68 <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f0110b4a:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0110b50:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110b53:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110b56:	01 c8                	add    %ecx,%eax
f0110b58:	8a 00                	mov    (%eax),%al
f0110b5a:	0f be c0             	movsbl %al,%eax
f0110b5d:	01 d0                	add    %edx,%eax
f0110b5f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0110b65:	ff 45 f4             	incl   -0xc(%ebp)
f0110b68:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110b6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b71:	7f d7                	jg     f0110b4a <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0110b73:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0110b79:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0110b7f:	89 d0                	mov    %edx,%eax
f0110b81:	c1 e0 02             	shl    $0x2,%eax
f0110b84:	01 d0                	add    %edx,%eax
f0110b86:	39 c1                	cmp    %eax,%ecx
f0110b88:	74 17                	je     f0110ba1 <test_kfree+0xce9>
f0110b8a:	83 ec 04             	sub    $0x4,%esp
f0110b8d:	68 fc b2 11 f0       	push   $0xf011b2fc
f0110b92:	68 84 03 00 00       	push   $0x384
f0110b97:	68 ba ac 11 f0       	push   $0xf011acba
f0110b9c:	e8 d5 f5 fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0110ba1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110ba7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0110baa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110bb1:	eb 1e                	jmp    f0110bd1 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f0110bb3:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0110bb9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0110bbc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110bbf:	01 c8                	add    %ecx,%eax
f0110bc1:	8a 00                	mov    (%eax),%al
f0110bc3:	0f be c0             	movsbl %al,%eax
f0110bc6:	01 d0                	add    %edx,%eax
f0110bc8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0110bce:	ff 45 f4             	incl   -0xc(%ebp)
f0110bd1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0110bd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110bda:	7f d7                	jg     f0110bb3 <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0110bdc:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0110be2:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0110be8:	89 d0                	mov    %edx,%eax
f0110bea:	01 c0                	add    %eax,%eax
f0110bec:	01 d0                	add    %edx,%eax
f0110bee:	01 c0                	add    %eax,%eax
f0110bf0:	01 d0                	add    %edx,%eax
f0110bf2:	39 c1                	cmp    %eax,%ecx
f0110bf4:	74 17                	je     f0110c0d <test_kfree+0xd55>
f0110bf6:	83 ec 04             	sub    $0x4,%esp
f0110bf9:	68 fc b2 11 f0       	push   $0xf011b2fc
f0110bfe:	68 8c 03 00 00       	push   $0x38c
f0110c03:	68 ba ac 11 f0       	push   $0xf011acba
f0110c08:	e8 69 f5 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f0110c0d:	83 ec 0c             	sub    $0xc,%esp
f0110c10:	68 2f b3 11 f0       	push   $0xf011b32f
f0110c15:	e8 7b 61 ff ff       	call   f0106d95 <cprintf>
f0110c1a:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0110c1d:	e8 07 96 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110c22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110c25:	e8 c2 aa ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110c2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0110c2d:	83 ec 0c             	sub    $0xc,%esp
f0110c30:	68 00 50 00 00       	push   $0x5000
f0110c35:	e8 b5 ad ff ff       	call   f010b9ef <kmalloc>
f0110c3a:	83 c4 10             	add    $0x10,%esp
f0110c3d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110c43:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0110c49:	89 c1                	mov    %eax,%ecx
f0110c4b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0110c52:	10 00 00 
f0110c55:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110c5a:	0f b6 d0             	movzbl %al,%edx
f0110c5d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0110c63:	01 d0                	add    %edx,%eax
f0110c65:	48                   	dec    %eax
f0110c66:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0110c6c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110c72:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c77:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0110c7d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110c83:	29 d0                	sub    %edx,%eax
f0110c85:	89 c3                	mov    %eax,%ebx
f0110c87:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0110c8e:	10 00 00 
f0110c91:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110c96:	0f b6 c0             	movzbl %al,%eax
f0110c99:	c1 e0 04             	shl    $0x4,%eax
f0110c9c:	89 c2                	mov    %eax,%edx
f0110c9e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0110ca4:	01 d0                	add    %edx,%eax
f0110ca6:	48                   	dec    %eax
f0110ca7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0110cad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110cb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0110cb8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0110cbe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110cc4:	29 d0                	sub    %edx,%eax
f0110cc6:	01 d8                	add    %ebx,%eax
f0110cc8:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0110ccd:	39 c1                	cmp    %eax,%ecx
f0110ccf:	74 17                	je     f0110ce8 <test_kfree+0xe30>
f0110cd1:	83 ec 04             	sub    $0x4,%esp
f0110cd4:	68 98 ad 11 f0       	push   $0xf011ad98
f0110cd9:	68 96 03 00 00       	push   $0x396
f0110cde:	68 ba ac 11 f0       	push   $0xf011acba
f0110ce3:	e8 8e f4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ce8:	e8 ff a9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110ced:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110cf0:	74 17                	je     f0110d09 <test_kfree+0xe51>
f0110cf2:	83 ec 04             	sub    $0x4,%esp
f0110cf5:	68 cc ac 11 f0       	push   $0xf011accc
f0110cfa:	68 97 03 00 00       	push   $0x397
f0110cff:	68 ba ac 11 f0       	push   $0xf011acba
f0110d04:	e8 6d f4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110d09:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110d0c:	e8 18 95 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110d11:	29 c3                	sub    %eax,%ebx
f0110d13:	89 d8                	mov    %ebx,%eax
f0110d15:	83 f8 05             	cmp    $0x5,%eax
f0110d18:	74 17                	je     f0110d31 <test_kfree+0xe79>
f0110d1a:	83 ec 04             	sub    $0x4,%esp
f0110d1d:	68 34 ad 11 f0       	push   $0xf011ad34
f0110d22:	68 98 03 00 00       	push   $0x398
f0110d27:	68 ba ac 11 f0       	push   $0xf011acba
f0110d2c:	e8 45 f4 fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0110d31:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0110d38:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0110d3b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0110d41:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0110d44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110d4b:	eb 0e                	jmp    f0110d5b <test_kfree+0xea3>
		{
			ptr[i] = 8 ;
f0110d4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110d50:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110d53:	01 d0                	add    %edx,%eax
f0110d55:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0110d58:	ff 45 f4             	incl   -0xc(%ebp)
f0110d5b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0110d61:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110d64:	7f e7                	jg     f0110d4d <test_kfree+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0110d66:	e8 be 94 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110d6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110d6e:	e8 79 a9 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110d73:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0110d76:	83 ec 0c             	sub    $0xc,%esp
f0110d79:	68 00 00 10 00       	push   $0x100000
f0110d7e:	e8 6c ac ff ff       	call   f010b9ef <kmalloc>
f0110d83:	83 c4 10             	add    $0x10,%esp
f0110d86:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110d8c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0110d92:	89 c1                	mov    %eax,%ecx
f0110d94:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0110d9b:	10 00 00 
f0110d9e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110da3:	0f b6 d0             	movzbl %al,%edx
f0110da6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0110dac:	01 d0                	add    %edx,%eax
f0110dae:	48                   	dec    %eax
f0110daf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0110db5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110dbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0110dc0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0110dc6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110dcc:	29 d0                	sub    %edx,%eax
f0110dce:	89 c3                	mov    %eax,%ebx
f0110dd0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0110dd7:	10 00 00 
f0110dda:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0110ddf:	0f b6 c0             	movzbl %al,%eax
f0110de2:	c1 e0 04             	shl    $0x4,%eax
f0110de5:	89 c2                	mov    %eax,%edx
f0110de7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0110ded:	01 d0                	add    %edx,%eax
f0110def:	48                   	dec    %eax
f0110df0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0110df6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110dfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e01:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0110e07:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110e0d:	29 d0                	sub    %edx,%eax
f0110e0f:	01 d8                	add    %ebx,%eax
f0110e11:	2d 00 30 2f 09       	sub    $0x92f3000,%eax
f0110e16:	39 c1                	cmp    %eax,%ecx
f0110e18:	74 17                	je     f0110e31 <test_kfree+0xf79>
f0110e1a:	83 ec 04             	sub    $0x4,%esp
f0110e1d:	68 98 ad 11 f0       	push   $0xf011ad98
f0110e22:	68 a4 03 00 00       	push   $0x3a4
f0110e27:	68 ba ac 11 f0       	push   $0xf011acba
f0110e2c:	e8 45 f3 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110e31:	e8 b6 a8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110e36:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110e39:	74 17                	je     f0110e52 <test_kfree+0xf9a>
f0110e3b:	83 ec 04             	sub    $0x4,%esp
f0110e3e:	68 cc ac 11 f0       	push   $0xf011accc
f0110e43:	68 a5 03 00 00       	push   $0x3a5
f0110e48:	68 ba ac 11 f0       	push   $0xf011acba
f0110e4d:	e8 24 f3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110e52:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110e55:	e8 cf 93 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110e5a:	29 c3                	sub    %eax,%ebx
f0110e5c:	89 d8                	mov    %ebx,%eax
f0110e5e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0110e63:	74 17                	je     f0110e7c <test_kfree+0xfc4>
f0110e65:	83 ec 04             	sub    $0x4,%esp
f0110e68:	68 34 ad 11 f0       	push   $0xf011ad34
f0110e6d:	68 a6 03 00 00       	push   $0x3a6
f0110e72:	68 ba ac 11 f0       	push   $0xf011acba
f0110e77:	e8 fa f2 fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0110e7c:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0110e83:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0110e86:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0110e8c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0110e8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110e96:	eb 0e                	jmp    f0110ea6 <test_kfree+0xfee>
		{
			ptr[i] = 9 ;
f0110e98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110e9b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110e9e:	01 d0                	add    %edx,%eax
f0110ea0:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0110ea3:	ff 45 f4             	incl   -0xc(%ebp)
f0110ea6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0110eac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110eaf:	7f e7                	jg     f0110e98 <test_kfree+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0110eb1:	83 ec 0c             	sub    $0xc,%esp
f0110eb4:	68 36 b3 11 f0       	push   $0xf011b336
f0110eb9:	e8 d7 5e ff ff       	call   f0106d95 <cprintf>
f0110ebe:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0110ec1:	e8 63 93 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110ec6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110ec9:	e8 1e a8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110ece:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0110ed1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110ed7:	83 ec 0c             	sub    $0xc,%esp
f0110eda:	50                   	push   %eax
f0110edb:	e8 28 ac ff ff       	call   f010bb08 <kfree>
f0110ee0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ee3:	e8 04 a8 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110ee8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110eeb:	74 17                	je     f0110f04 <test_kfree+0x104c>
f0110eed:	83 ec 04             	sub    $0x4,%esp
f0110ef0:	68 cc ac 11 f0       	push   $0xf011accc
f0110ef5:	68 b6 03 00 00       	push   $0x3b6
f0110efa:	68 ba ac 11 f0       	push   $0xf011acba
f0110eff:	e8 72 f2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0110f04:	e8 20 93 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110f09:	89 c2                	mov    %eax,%edx
f0110f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110f0e:	29 c2                	sub    %eax,%edx
f0110f10:	89 d0                	mov    %edx,%eax
f0110f12:	83 f8 02             	cmp    $0x2,%eax
f0110f15:	74 17                	je     f0110f2e <test_kfree+0x1076>
f0110f17:	83 ec 04             	sub    $0x4,%esp
f0110f1a:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0110f1f:	68 b7 03 00 00       	push   $0x3b7
f0110f24:	68 ba ac 11 f0       	push   $0xf011acba
f0110f29:	e8 48 f2 fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110f2e:	e8 f6 92 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110f33:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110f36:	e8 b1 a7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110f3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0110f3e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110f44:	83 ec 0c             	sub    $0xc,%esp
f0110f47:	50                   	push   %eax
f0110f48:	e8 bb ab ff ff       	call   f010bb08 <kfree>
f0110f4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110f50:	e8 97 a7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110f55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110f58:	74 17                	je     f0110f71 <test_kfree+0x10b9>
f0110f5a:	83 ec 04             	sub    $0x4,%esp
f0110f5d:	68 cc ac 11 f0       	push   $0xf011accc
f0110f62:	68 bd 03 00 00       	push   $0x3bd
f0110f67:	68 ba ac 11 f0       	push   $0xf011acba
f0110f6c:	e8 05 f2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0110f71:	e8 b3 92 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110f76:	89 c2                	mov    %eax,%edx
f0110f78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110f7b:	29 c2                	sub    %eax,%edx
f0110f7d:	89 d0                	mov    %edx,%eax
f0110f7f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110f84:	74 17                	je     f0110f9d <test_kfree+0x10e5>
f0110f86:	83 ec 04             	sub    $0x4,%esp
f0110f89:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0110f8e:	68 be 03 00 00       	push   $0x3be
f0110f93:	68 ba ac 11 f0       	push   $0xf011acba
f0110f98:	e8 d9 f1 fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110f9d:	e8 87 92 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110fa2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110fa5:	e8 42 a7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110faa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0110fad:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110fb3:	83 ec 0c             	sub    $0xc,%esp
f0110fb6:	50                   	push   %eax
f0110fb7:	e8 4c ab ff ff       	call   f010bb08 <kfree>
f0110fbc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110fbf:	e8 28 a7 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0110fc4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fc7:	74 17                	je     f0110fe0 <test_kfree+0x1128>
f0110fc9:	83 ec 04             	sub    $0x4,%esp
f0110fcc:	68 cc ac 11 f0       	push   $0xf011accc
f0110fd1:	68 c4 03 00 00       	push   $0x3c4
f0110fd6:	68 ba ac 11 f0       	push   $0xf011acba
f0110fdb:	e8 96 f1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0110fe0:	e8 44 92 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0110fe5:	89 c2                	mov    %eax,%edx
f0110fe7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110fea:	29 c2                	sub    %eax,%edx
f0110fec:	89 d0                	mov    %edx,%eax
f0110fee:	83 f8 01             	cmp    $0x1,%eax
f0110ff1:	74 17                	je     f011100a <test_kfree+0x1152>
f0110ff3:	83 ec 04             	sub    $0x4,%esp
f0110ff6:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0110ffb:	68 c5 03 00 00       	push   $0x3c5
f0111000:	68 ba ac 11 f0       	push   $0xf011acba
f0111005:	e8 6c f1 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011100a:	e8 1a 92 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011100f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111012:	e8 d5 a6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111017:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f011101a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111020:	83 ec 0c             	sub    $0xc,%esp
f0111023:	50                   	push   %eax
f0111024:	e8 df aa ff ff       	call   f010bb08 <kfree>
f0111029:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011102c:	e8 bb a6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111031:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111034:	74 17                	je     f011104d <test_kfree+0x1195>
f0111036:	83 ec 04             	sub    $0x4,%esp
f0111039:	68 cc ac 11 f0       	push   $0xf011accc
f011103e:	68 cb 03 00 00       	push   $0x3cb
f0111043:	68 ba ac 11 f0       	push   $0xf011acba
f0111048:	e8 29 f1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011104d:	e8 d7 91 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111052:	89 c2                	mov    %eax,%edx
f0111054:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111057:	29 c2                	sub    %eax,%edx
f0111059:	89 d0                	mov    %edx,%eax
f011105b:	83 f8 01             	cmp    $0x1,%eax
f011105e:	74 17                	je     f0111077 <test_kfree+0x11bf>
f0111060:	83 ec 04             	sub    $0x4,%esp
f0111063:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0111068:	68 cc 03 00 00       	push   $0x3cc
f011106d:	68 ba ac 11 f0       	push   $0xf011acba
f0111072:	e8 ff f0 fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0111077:	e8 ad 91 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011107c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011107f:	e8 68 a6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111084:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0111087:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011108d:	83 ec 0c             	sub    $0xc,%esp
f0111090:	50                   	push   %eax
f0111091:	e8 72 aa ff ff       	call   f010bb08 <kfree>
f0111096:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111099:	e8 4e a6 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011109e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01110a1:	74 17                	je     f01110ba <test_kfree+0x1202>
f01110a3:	83 ec 04             	sub    $0x4,%esp
f01110a6:	68 cc ac 11 f0       	push   $0xf011accc
f01110ab:	68 d2 03 00 00       	push   $0x3d2
f01110b0:	68 ba ac 11 f0       	push   $0xf011acba
f01110b5:	e8 bc f0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01110ba:	e8 6a 91 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01110bf:	89 c2                	mov    %eax,%edx
f01110c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01110c4:	29 c2                	sub    %eax,%edx
f01110c6:	89 d0                	mov    %edx,%eax
f01110c8:	83 f8 04             	cmp    $0x4,%eax
f01110cb:	74 17                	je     f01110e4 <test_kfree+0x122c>
f01110cd:	83 ec 04             	sub    $0x4,%esp
f01110d0:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01110d5:	68 d3 03 00 00       	push   $0x3d3
f01110da:	68 ba ac 11 f0       	push   $0xf011acba
f01110df:	e8 92 f0 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01110e4:	e8 40 91 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01110e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01110ec:	e8 fb a5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01110f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01110f4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01110fa:	83 ec 0c             	sub    $0xc,%esp
f01110fd:	50                   	push   %eax
f01110fe:	e8 05 aa ff ff       	call   f010bb08 <kfree>
f0111103:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111106:	e8 e1 a5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011110b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011110e:	74 17                	je     f0111127 <test_kfree+0x126f>
f0111110:	83 ec 04             	sub    $0x4,%esp
f0111113:	68 cc ac 11 f0       	push   $0xf011accc
f0111118:	68 d9 03 00 00       	push   $0x3d9
f011111d:	68 ba ac 11 f0       	push   $0xf011acba
f0111122:	e8 4f f0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0111127:	e8 fd 90 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011112c:	89 c2                	mov    %eax,%edx
f011112e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111131:	29 c2                	sub    %eax,%edx
f0111133:	89 d0                	mov    %edx,%eax
f0111135:	83 f8 05             	cmp    $0x5,%eax
f0111138:	74 17                	je     f0111151 <test_kfree+0x1299>
f011113a:	83 ec 04             	sub    $0x4,%esp
f011113d:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0111142:	68 da 03 00 00       	push   $0x3da
f0111147:	68 ba ac 11 f0       	push   $0xf011acba
f011114c:	e8 25 f0 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111151:	e8 d3 90 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111156:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111159:	e8 8e a5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011115e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0111161:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111167:	83 ec 0c             	sub    $0xc,%esp
f011116a:	50                   	push   %eax
f011116b:	e8 98 a9 ff ff       	call   f010bb08 <kfree>
f0111170:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111173:	e8 74 a5 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111178:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011117b:	74 17                	je     f0111194 <test_kfree+0x12dc>
f011117d:	83 ec 04             	sub    $0x4,%esp
f0111180:	68 cc ac 11 f0       	push   $0xf011accc
f0111185:	68 e0 03 00 00       	push   $0x3e0
f011118a:	68 ba ac 11 f0       	push   $0xf011acba
f011118f:	e8 e2 ef fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0111194:	e8 90 90 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111199:	89 c2                	mov    %eax,%edx
f011119b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011119e:	29 c2                	sub    %eax,%edx
f01111a0:	89 d0                	mov    %edx,%eax
f01111a2:	3d 00 01 00 00       	cmp    $0x100,%eax
f01111a7:	74 17                	je     f01111c0 <test_kfree+0x1308>
f01111a9:	83 ec 04             	sub    $0x4,%esp
f01111ac:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01111b1:	68 e1 03 00 00       	push   $0x3e1
f01111b6:	68 ba ac 11 f0       	push   $0xf011acba
f01111bb:	e8 b6 ef fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01111c0:	e8 64 90 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01111c5:	89 c2                	mov    %eax,%edx
f01111c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111ca:	39 c2                	cmp    %eax,%edx
f01111cc:	74 17                	je     f01111e5 <test_kfree+0x132d>
f01111ce:	83 ec 04             	sub    $0x4,%esp
f01111d1:	68 40 b3 11 f0       	push   $0xf011b340
f01111d6:	68 e3 03 00 00       	push   $0x3e3
f01111db:	68 ba ac 11 f0       	push   $0xf011acba
f01111e0:	e8 91 ef fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f01111e5:	83 ec 0c             	sub    $0xc,%esp
f01111e8:	68 74 b3 11 f0       	push   $0xf011b374
f01111ed:	e8 a3 5b ff ff       	call   f0106d95 <cprintf>
f01111f2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01111f5:	83 ec 0c             	sub    $0xc,%esp
f01111f8:	6a 03                	push   $0x3
f01111fa:	e8 31 92 ff ff       	call   f010a430 <sys_bypassPageFault>
f01111ff:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0111202:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111209:	e9 82 00 00 00       	jmp    f0111290 <test_kfree+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f011120e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111211:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0111218:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f011121b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011121e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0111221:	e8 f8 91 ff ff       	call   f010a41e <sys_rcr2>
f0111226:	89 c2                	mov    %eax,%edx
f0111228:	8b 45 98             	mov    -0x68(%ebp),%eax
f011122b:	39 c2                	cmp    %eax,%edx
f011122d:	74 17                	je     f0111246 <test_kfree+0x138e>
f011122f:	83 ec 04             	sub    $0x4,%esp
f0111232:	68 7c b3 11 f0       	push   $0xf011b37c
f0111237:	68 f2 03 00 00       	push   $0x3f2
f011123c:	68 ba ac 11 f0       	push   $0xf011acba
f0111241:	e8 30 ef fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f0111246:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111249:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0111250:	89 c2                	mov    %eax,%edx
f0111252:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111255:	01 d0                	add    %edx,%eax
f0111257:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011125a:	e8 bf 91 ff ff       	call   f010a41e <sys_rcr2>
f011125f:	89 c2                	mov    %eax,%edx
f0111261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111264:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011126b:	89 c1                	mov    %eax,%ecx
f011126d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111270:	01 c8                	add    %ecx,%eax
f0111272:	39 c2                	cmp    %eax,%edx
f0111274:	74 17                	je     f011128d <test_kfree+0x13d5>
f0111276:	83 ec 04             	sub    $0x4,%esp
f0111279:	68 7c b3 11 f0       	push   $0xf011b37c
f011127e:	68 f4 03 00 00       	push   $0x3f4
f0111283:	68 ba ac 11 f0       	push   $0xf011acba
f0111288:	e8 e9 ee fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011128d:	ff 45 f4             	incl   -0xc(%ebp)
f0111290:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0111294:	0f 8e 74 ff ff ff    	jle    f011120e <test_kfree+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011129a:	83 ec 0c             	sub    $0xc,%esp
f011129d:	6a 00                	push   $0x0
f011129f:	e8 8c 91 ff ff       	call   f010a430 <sys_bypassPageFault>
f01112a4:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01112a7:	83 ec 0c             	sub    $0xc,%esp
f01112aa:	68 c1 b3 11 f0       	push   $0xf011b3c1
f01112af:	e8 e1 5a ff ff       	call   f0106d95 <cprintf>
f01112b4:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01112b7:	e8 6d 8f ff ff       	call   f010a229 <sys_calculate_free_frames>
f01112bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01112bf:	e8 28 a4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01112c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01112c7:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01112cd:	83 ec 0c             	sub    $0xc,%esp
f01112d0:	50                   	push   %eax
f01112d1:	e8 32 a8 ff ff       	call   f010bb08 <kfree>
f01112d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01112d9:	e8 0e a4 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01112de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01112e1:	74 17                	je     f01112fa <test_kfree+0x1442>
f01112e3:	83 ec 04             	sub    $0x4,%esp
f01112e6:	68 cc ac 11 f0       	push   $0xf011accc
f01112eb:	68 02 04 00 00       	push   $0x402
f01112f0:	68 ba ac 11 f0       	push   $0xf011acba
f01112f5:	e8 7c ee fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01112fa:	e8 2a 8f ff ff       	call   f010a229 <sys_calculate_free_frames>
f01112ff:	89 c2                	mov    %eax,%edx
f0111301:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111304:	39 c2                	cmp    %eax,%edx
f0111306:	74 17                	je     f011131f <test_kfree+0x1467>
f0111308:	83 ec 04             	sub    $0x4,%esp
f011130b:	68 c8 b3 11 f0       	push   $0xf011b3c8
f0111310:	68 03 04 00 00       	push   $0x403
f0111315:	68 ba ac 11 f0       	push   $0xf011acba
f011131a:	e8 57 ee fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011131f:	e8 05 8f ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111324:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111327:	e8 c0 a3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011132c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011132f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111335:	83 ec 0c             	sub    $0xc,%esp
f0111338:	50                   	push   %eax
f0111339:	e8 ca a7 ff ff       	call   f010bb08 <kfree>
f011133e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111341:	e8 a6 a3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111346:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111349:	74 17                	je     f0111362 <test_kfree+0x14aa>
f011134b:	83 ec 04             	sub    $0x4,%esp
f011134e:	68 cc ac 11 f0       	push   $0xf011accc
f0111353:	68 09 04 00 00       	push   $0x409
f0111358:	68 ba ac 11 f0       	push   $0xf011acba
f011135d:	e8 14 ee fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111362:	e8 c2 8e ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111367:	89 c2                	mov    %eax,%edx
f0111369:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011136c:	39 c2                	cmp    %eax,%edx
f011136e:	74 17                	je     f0111387 <test_kfree+0x14cf>
f0111370:	83 ec 04             	sub    $0x4,%esp
f0111373:	68 c8 b3 11 f0       	push   $0xf011b3c8
f0111378:	68 0a 04 00 00       	push   $0x40a
f011137d:	68 ba ac 11 f0       	push   $0xf011acba
f0111382:	e8 ef ed fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0111387:	e8 9d 8e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011138c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011138f:	e8 58 a3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111394:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0111397:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011139d:	83 ec 0c             	sub    $0xc,%esp
f01113a0:	50                   	push   %eax
f01113a1:	e8 62 a7 ff ff       	call   f010bb08 <kfree>
f01113a6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01113a9:	e8 3e a3 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01113ae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01113b1:	74 17                	je     f01113ca <test_kfree+0x1512>
f01113b3:	83 ec 04             	sub    $0x4,%esp
f01113b6:	68 cc ac 11 f0       	push   $0xf011accc
f01113bb:	68 10 04 00 00       	push   $0x410
f01113c0:	68 ba ac 11 f0       	push   $0xf011acba
f01113c5:	e8 ac ed fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01113ca:	e8 5a 8e ff ff       	call   f010a229 <sys_calculate_free_frames>
f01113cf:	89 c2                	mov    %eax,%edx
f01113d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01113d4:	39 c2                	cmp    %eax,%edx
f01113d6:	74 17                	je     f01113ef <test_kfree+0x1537>
f01113d8:	83 ec 04             	sub    $0x4,%esp
f01113db:	68 c8 b3 11 f0       	push   $0xf011b3c8
f01113e0:	68 11 04 00 00       	push   $0x411
f01113e5:	68 ba ac 11 f0       	push   $0xf011acba
f01113ea:	e8 87 ed fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01113ef:	e8 35 8e ff ff       	call   f010a229 <sys_calculate_free_frames>
f01113f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01113f7:	e8 f0 a2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01113fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01113ff:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111405:	83 ec 0c             	sub    $0xc,%esp
f0111408:	50                   	push   %eax
f0111409:	e8 fa a6 ff ff       	call   f010bb08 <kfree>
f011140e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111411:	e8 d6 a2 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111416:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111419:	74 17                	je     f0111432 <test_kfree+0x157a>
f011141b:	83 ec 04             	sub    $0x4,%esp
f011141e:	68 cc ac 11 f0       	push   $0xf011accc
f0111423:	68 17 04 00 00       	push   $0x417
f0111428:	68 ba ac 11 f0       	push   $0xf011acba
f011142d:	e8 44 ed fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111432:	e8 f2 8d ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111437:	89 c2                	mov    %eax,%edx
f0111439:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011143c:	39 c2                	cmp    %eax,%edx
f011143e:	74 17                	je     f0111457 <test_kfree+0x159f>
f0111440:	83 ec 04             	sub    $0x4,%esp
f0111443:	68 c8 b3 11 f0       	push   $0xf011b3c8
f0111448:	68 18 04 00 00       	push   $0x418
f011144d:	68 ba ac 11 f0       	push   $0xf011acba
f0111452:	e8 1f ed fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f0111457:	83 ec 0c             	sub    $0xc,%esp
f011145a:	68 0f b4 11 f0       	push   $0xf011b40f
f011145f:	e8 31 59 ff ff       	call   f0106d95 <cprintf>
f0111464:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0111467:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011146e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0111475:	eb 4a                	jmp    f01114c1 <test_kfree+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0111477:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011147a:	89 c1                	mov    %eax,%ecx
f011147c:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0111481:	83 ec 04             	sub    $0x4,%esp
f0111484:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f011148a:	52                   	push   %edx
f011148b:	51                   	push   %ecx
f011148c:	50                   	push   %eax
f011148d:	e8 83 26 ff ff       	call   f0103b15 <get_page_table>
f0111492:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0111495:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011149b:	85 c0                	test   %eax,%eax
f011149d:	75 17                	jne    f01114b6 <test_kfree+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011149f:	83 ec 04             	sub    $0x4,%esp
f01114a2:	68 18 b4 11 f0       	push   $0xf011b418
f01114a7:	68 26 04 00 00       	push   $0x426
f01114ac:	68 ba ac 11 f0       	push   $0xf011acba
f01114b1:	e8 c0 ec fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01114b6:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01114bd:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01114c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01114c5:	78 b0                	js     f0111477 <test_kfree+0x15bf>
f01114c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01114cb:	7f 09                	jg     f01114d6 <test_kfree+0x161e>
f01114cd:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01114d4:	76 a1                	jbe    f0111477 <test_kfree+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01114d6:	83 ec 0c             	sub    $0xc,%esp
f01114d9:	68 96 ae 11 f0       	push   $0xf011ae96
f01114de:	e8 b2 58 ff ff       	call   f0106d95 <cprintf>
f01114e3:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01114e6:	83 ec 0c             	sub    $0xc,%esp
f01114e9:	68 80 b4 11 f0       	push   $0xf011b480
f01114ee:	e8 a2 58 ff ff       	call   f0106d95 <cprintf>
f01114f3:	83 c4 10             	add    $0x10,%esp

	return 1;
f01114f6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01114fb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01114fe:	5b                   	pop    %ebx
f01114ff:	5f                   	pop    %edi
f0111500:	5d                   	pop    %ebp
f0111501:	c3                   	ret    

f0111502 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f0111502:	55                   	push   %ebp
f0111503:	89 e5                	mov    %esp,%ebp
f0111505:	57                   	push   %edi
f0111506:	53                   	push   %ebx
f0111507:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f011150d:	83 ec 0c             	sub    $0xc,%esp
f0111510:	68 fc ab 11 f0       	push   $0xf011abfc
f0111515:	e8 7b 58 ff ff       	call   f0106d95 <cprintf>
f011151a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011151d:	83 ec 0c             	sub    $0xc,%esp
f0111520:	68 2c ac 11 f0       	push   $0xf011ac2c
f0111525:	e8 6b 58 ff ff       	call   f0106d95 <cprintf>
f011152a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011152d:	83 ec 0c             	sub    $0xc,%esp
f0111530:	68 fc ab 11 f0       	push   $0xf011abfc
f0111535:	e8 5b 58 ff ff       	call   f0106d95 <cprintf>
f011153a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011153d:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0111541:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0111545:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011154b:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0111551:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0111558:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011155f:	e8 c5 8c ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111564:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0111567:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011156d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111572:	b8 00 00 00 00       	mov    $0x0,%eax
f0111577:	89 d7                	mov    %edx,%edi
f0111579:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011157b:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0111581:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111586:	b8 00 00 00 00       	mov    $0x0,%eax
f011158b:	89 d7                	mov    %edx,%edi
f011158d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011158f:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0111595:	b9 14 00 00 00       	mov    $0x14,%ecx
f011159a:	b8 00 00 00 00       	mov    $0x0,%eax
f011159f:	89 d7                	mov    %edx,%edi
f01115a1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01115a3:	e8 81 8c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01115a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01115ab:	e8 3c a1 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01115b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01115b3:	83 ec 0c             	sub    $0xc,%esp
f01115b6:	68 00 fc 1f 00       	push   $0x1ffc00
f01115bb:	e8 2f a4 ff ff       	call   f010b9ef <kmalloc>
f01115c0:	83 c4 10             	add    $0x10,%esp
f01115c3:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01115c9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01115cf:	89 c1                	mov    %eax,%ecx
f01115d1:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01115d8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01115dd:	0f b6 d0             	movzbl %al,%edx
f01115e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01115e3:	01 d0                	add    %edx,%eax
f01115e5:	48                   	dec    %eax
f01115e6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01115e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01115ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01115f1:	f7 75 c8             	divl   -0x38(%ebp)
f01115f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01115f7:	29 d0                	sub    %edx,%eax
f01115f9:	89 c3                	mov    %eax,%ebx
f01115fb:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0111602:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111607:	0f b6 c0             	movzbl %al,%eax
f011160a:	c1 e0 04             	shl    $0x4,%eax
f011160d:	89 c2                	mov    %eax,%edx
f011160f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111612:	01 d0                	add    %edx,%eax
f0111614:	48                   	dec    %eax
f0111615:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0111618:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011161b:	ba 00 00 00 00       	mov    $0x0,%edx
f0111620:	f7 75 c0             	divl   -0x40(%ebp)
f0111623:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111626:	29 d0                	sub    %edx,%eax
f0111628:	01 d8                	add    %ebx,%eax
f011162a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011162f:	39 c1                	cmp    %eax,%ecx
f0111631:	74 17                	je     f011164a <test_kfree_bestfit+0x148>
f0111633:	83 ec 04             	sub    $0x4,%esp
f0111636:	68 98 ad 11 f0       	push   $0xf011ad98
f011163b:	68 53 04 00 00       	push   $0x453
f0111640:	68 ba ac 11 f0       	push   $0xf011acba
f0111645:	e8 2c eb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011164a:	e8 9d a0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011164f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111652:	74 17                	je     f011166b <test_kfree_bestfit+0x169>
f0111654:	83 ec 04             	sub    $0x4,%esp
f0111657:	68 cc ac 11 f0       	push   $0xf011accc
f011165c:	68 54 04 00 00       	push   $0x454
f0111661:	68 ba ac 11 f0       	push   $0xf011acba
f0111666:	e8 0b eb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011166b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011166e:	e8 b6 8b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111673:	29 c3                	sub    %eax,%ebx
f0111675:	89 d8                	mov    %ebx,%eax
f0111677:	3d 00 02 00 00       	cmp    $0x200,%eax
f011167c:	74 17                	je     f0111695 <test_kfree_bestfit+0x193>
f011167e:	83 ec 04             	sub    $0x4,%esp
f0111681:	68 34 ad 11 f0       	push   $0xf011ad34
f0111686:	68 55 04 00 00       	push   $0x455
f011168b:	68 ba ac 11 f0       	push   $0xf011acba
f0111690:	e8 e1 ea fe ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0111695:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f011169c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011169f:	e8 85 8b ff ff       	call   f010a229 <sys_calculate_free_frames>
f01116a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01116a7:	e8 40 a0 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01116ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01116af:	83 ec 0c             	sub    $0xc,%esp
f01116b2:	68 00 fc 1f 00       	push   $0x1ffc00
f01116b7:	e8 33 a3 ff ff       	call   f010b9ef <kmalloc>
f01116bc:	83 c4 10             	add    $0x10,%esp
f01116bf:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01116c5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01116cb:	89 c1                	mov    %eax,%ecx
f01116cd:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01116d4:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01116d9:	0f b6 d0             	movzbl %al,%edx
f01116dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116df:	01 d0                	add    %edx,%eax
f01116e1:	48                   	dec    %eax
f01116e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01116e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01116e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01116ed:	f7 75 b8             	divl   -0x48(%ebp)
f01116f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01116f3:	29 d0                	sub    %edx,%eax
f01116f5:	89 c3                	mov    %eax,%ebx
f01116f7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01116fe:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111703:	0f b6 c0             	movzbl %al,%eax
f0111706:	c1 e0 04             	shl    $0x4,%eax
f0111709:	89 c2                	mov    %eax,%edx
f011170b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011170e:	01 d0                	add    %edx,%eax
f0111710:	48                   	dec    %eax
f0111711:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111714:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111717:	ba 00 00 00 00       	mov    $0x0,%edx
f011171c:	f7 75 b0             	divl   -0x50(%ebp)
f011171f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111722:	29 d0                	sub    %edx,%eax
f0111724:	01 d8                	add    %ebx,%eax
f0111726:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f011172b:	39 c1                	cmp    %eax,%ecx
f011172d:	74 17                	je     f0111746 <test_kfree_bestfit+0x244>
f011172f:	83 ec 04             	sub    $0x4,%esp
f0111732:	68 98 ad 11 f0       	push   $0xf011ad98
f0111737:	68 5c 04 00 00       	push   $0x45c
f011173c:	68 ba ac 11 f0       	push   $0xf011acba
f0111741:	e8 30 ea fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111746:	e8 a1 9f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011174b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011174e:	74 17                	je     f0111767 <test_kfree_bestfit+0x265>
f0111750:	83 ec 04             	sub    $0x4,%esp
f0111753:	68 cc ac 11 f0       	push   $0xf011accc
f0111758:	68 5d 04 00 00       	push   $0x45d
f011175d:	68 ba ac 11 f0       	push   $0xf011acba
f0111762:	e8 0f ea fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111767:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011176a:	e8 ba 8a ff ff       	call   f010a229 <sys_calculate_free_frames>
f011176f:	29 c3                	sub    %eax,%ebx
f0111771:	89 d8                	mov    %ebx,%eax
f0111773:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111778:	74 17                	je     f0111791 <test_kfree_bestfit+0x28f>
f011177a:	83 ec 04             	sub    $0x4,%esp
f011177d:	68 34 ad 11 f0       	push   $0xf011ad34
f0111782:	68 5e 04 00 00       	push   $0x45e
f0111787:	68 ba ac 11 f0       	push   $0xf011acba
f011178c:	e8 e5 e9 fe ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0111791:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0111798:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011179b:	e8 89 8a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01117a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01117a3:	e8 44 9f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01117a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01117ab:	83 ec 0c             	sub    $0xc,%esp
f01117ae:	68 00 08 00 00       	push   $0x800
f01117b3:	e8 37 a2 ff ff       	call   f010b9ef <kmalloc>
f01117b8:	83 c4 10             	add    $0x10,%esp
f01117bb:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01117c1:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01117c7:	89 c1                	mov    %eax,%ecx
f01117c9:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01117d0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01117d5:	0f b6 d0             	movzbl %al,%edx
f01117d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117db:	01 d0                	add    %edx,%eax
f01117dd:	48                   	dec    %eax
f01117de:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01117e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01117e9:	f7 75 a8             	divl   -0x58(%ebp)
f01117ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117ef:	29 d0                	sub    %edx,%eax
f01117f1:	89 c3                	mov    %eax,%ebx
f01117f3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01117fa:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01117ff:	0f b6 c0             	movzbl %al,%eax
f0111802:	c1 e0 04             	shl    $0x4,%eax
f0111805:	89 c2                	mov    %eax,%edx
f0111807:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011180a:	01 d0                	add    %edx,%eax
f011180c:	48                   	dec    %eax
f011180d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0111810:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111813:	ba 00 00 00 00       	mov    $0x0,%edx
f0111818:	f7 75 a0             	divl   -0x60(%ebp)
f011181b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011181e:	29 d0                	sub    %edx,%eax
f0111820:	01 d8                	add    %ebx,%eax
f0111822:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0111827:	39 c1                	cmp    %eax,%ecx
f0111829:	74 17                	je     f0111842 <test_kfree_bestfit+0x340>
f011182b:	83 ec 04             	sub    $0x4,%esp
f011182e:	68 98 ad 11 f0       	push   $0xf011ad98
f0111833:	68 65 04 00 00       	push   $0x465
f0111838:	68 ba ac 11 f0       	push   $0xf011acba
f011183d:	e8 34 e9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111842:	e8 a5 9e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111847:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011184a:	74 17                	je     f0111863 <test_kfree_bestfit+0x361>
f011184c:	83 ec 04             	sub    $0x4,%esp
f011184f:	68 cc ac 11 f0       	push   $0xf011accc
f0111854:	68 66 04 00 00       	push   $0x466
f0111859:	68 ba ac 11 f0       	push   $0xf011acba
f011185e:	e8 13 e9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111863:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111866:	e8 be 89 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011186b:	29 c3                	sub    %eax,%ebx
f011186d:	89 d8                	mov    %ebx,%eax
f011186f:	83 f8 01             	cmp    $0x1,%eax
f0111872:	74 17                	je     f011188b <test_kfree_bestfit+0x389>
f0111874:	83 ec 04             	sub    $0x4,%esp
f0111877:	68 34 ad 11 f0       	push   $0xf011ad34
f011187c:	68 67 04 00 00       	push   $0x467
f0111881:	68 ba ac 11 f0       	push   $0xf011acba
f0111886:	e8 eb e8 fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011188b:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0111892:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0111895:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011189b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011189e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01118a5:	eb 0e                	jmp    f01118b5 <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f01118a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01118aa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01118ad:	01 d0                	add    %edx,%eax
f01118af:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01118b2:	ff 45 f4             	incl   -0xc(%ebp)
f01118b5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01118bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01118be:	7f e7                	jg     f01118a7 <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01118c0:	e8 64 89 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01118c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01118c8:	e8 1f 9e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01118cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01118d0:	83 ec 0c             	sub    $0xc,%esp
f01118d3:	68 00 08 00 00       	push   $0x800
f01118d8:	e8 12 a1 ff ff       	call   f010b9ef <kmalloc>
f01118dd:	83 c4 10             	add    $0x10,%esp
f01118e0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01118e6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01118ec:	89 c1                	mov    %eax,%ecx
f01118ee:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01118f5:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01118fa:	0f b6 d0             	movzbl %al,%edx
f01118fd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111900:	01 d0                	add    %edx,%eax
f0111902:	48                   	dec    %eax
f0111903:	89 45 90             	mov    %eax,-0x70(%ebp)
f0111906:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111909:	ba 00 00 00 00       	mov    $0x0,%edx
f011190e:	f7 75 94             	divl   -0x6c(%ebp)
f0111911:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111914:	29 d0                	sub    %edx,%eax
f0111916:	89 c3                	mov    %eax,%ebx
f0111918:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011191f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111924:	0f b6 c0             	movzbl %al,%eax
f0111927:	c1 e0 04             	shl    $0x4,%eax
f011192a:	89 c2                	mov    %eax,%edx
f011192c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011192f:	01 d0                	add    %edx,%eax
f0111931:	48                   	dec    %eax
f0111932:	89 45 88             	mov    %eax,-0x78(%ebp)
f0111935:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111938:	ba 00 00 00 00       	mov    $0x0,%edx
f011193d:	f7 75 8c             	divl   -0x74(%ebp)
f0111940:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111943:	29 d0                	sub    %edx,%eax
f0111945:	01 d8                	add    %ebx,%eax
f0111947:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f011194c:	39 c1                	cmp    %eax,%ecx
f011194e:	74 17                	je     f0111967 <test_kfree_bestfit+0x465>
f0111950:	83 ec 04             	sub    $0x4,%esp
f0111953:	68 98 ad 11 f0       	push   $0xf011ad98
f0111958:	68 73 04 00 00       	push   $0x473
f011195d:	68 ba ac 11 f0       	push   $0xf011acba
f0111962:	e8 0f e8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111967:	e8 80 9d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011196c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011196f:	74 17                	je     f0111988 <test_kfree_bestfit+0x486>
f0111971:	83 ec 04             	sub    $0x4,%esp
f0111974:	68 cc ac 11 f0       	push   $0xf011accc
f0111979:	68 74 04 00 00       	push   $0x474
f011197e:	68 ba ac 11 f0       	push   $0xf011acba
f0111983:	e8 ee e7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111988:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011198b:	e8 99 88 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111990:	29 c3                	sub    %eax,%ebx
f0111992:	89 d8                	mov    %ebx,%eax
f0111994:	83 f8 01             	cmp    $0x1,%eax
f0111997:	74 17                	je     f01119b0 <test_kfree_bestfit+0x4ae>
f0111999:	83 ec 04             	sub    $0x4,%esp
f011199c:	68 34 ad 11 f0       	push   $0xf011ad34
f01119a1:	68 75 04 00 00       	push   $0x475
f01119a6:	68 ba ac 11 f0       	push   $0xf011acba
f01119ab:	e8 c6 e7 fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01119b0:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f01119b7:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01119ba:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01119c0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01119c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01119ca:	eb 0e                	jmp    f01119da <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f01119cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01119cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01119d2:	01 d0                	add    %edx,%eax
f01119d4:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01119d7:	ff 45 f4             	incl   -0xc(%ebp)
f01119da:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01119e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01119e3:	7f e7                	jg     f01119cc <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01119e5:	e8 3f 88 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01119ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01119ed:	e8 fa 9c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01119f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01119f5:	83 ec 0c             	sub    $0xc,%esp
f01119f8:	68 00 1c 00 00       	push   $0x1c00
f01119fd:	e8 ed 9f ff ff       	call   f010b9ef <kmalloc>
f0111a02:	83 c4 10             	add    $0x10,%esp
f0111a05:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111a0b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0111a11:	89 c1                	mov    %eax,%ecx
f0111a13:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0111a1a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111a1f:	0f b6 d0             	movzbl %al,%edx
f0111a22:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0111a25:	01 d0                	add    %edx,%eax
f0111a27:	48                   	dec    %eax
f0111a28:	89 45 80             	mov    %eax,-0x80(%ebp)
f0111a2b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111a2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a33:	f7 75 84             	divl   -0x7c(%ebp)
f0111a36:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111a39:	29 d0                	sub    %edx,%eax
f0111a3b:	89 c3                	mov    %eax,%ebx
f0111a3d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0111a44:	10 00 00 
f0111a47:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111a4c:	0f b6 c0             	movzbl %al,%eax
f0111a4f:	c1 e0 04             	shl    $0x4,%eax
f0111a52:	89 c2                	mov    %eax,%edx
f0111a54:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0111a5a:	01 d0                	add    %edx,%eax
f0111a5c:	48                   	dec    %eax
f0111a5d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0111a63:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111a69:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a6e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0111a74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111a7a:	29 d0                	sub    %edx,%eax
f0111a7c:	01 d8                	add    %ebx,%eax
f0111a7e:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0111a83:	39 c1                	cmp    %eax,%ecx
f0111a85:	74 17                	je     f0111a9e <test_kfree_bestfit+0x59c>
f0111a87:	83 ec 04             	sub    $0x4,%esp
f0111a8a:	68 98 ad 11 f0       	push   $0xf011ad98
f0111a8f:	68 81 04 00 00       	push   $0x481
f0111a94:	68 ba ac 11 f0       	push   $0xf011acba
f0111a99:	e8 d8 e6 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111a9e:	e8 49 9c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111aa3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111aa6:	74 17                	je     f0111abf <test_kfree_bestfit+0x5bd>
f0111aa8:	83 ec 04             	sub    $0x4,%esp
f0111aab:	68 cc ac 11 f0       	push   $0xf011accc
f0111ab0:	68 82 04 00 00       	push   $0x482
f0111ab5:	68 ba ac 11 f0       	push   $0xf011acba
f0111aba:	e8 b7 e6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111abf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111ac2:	e8 62 87 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111ac7:	29 c3                	sub    %eax,%ebx
f0111ac9:	89 d8                	mov    %ebx,%eax
f0111acb:	83 f8 02             	cmp    $0x2,%eax
f0111ace:	74 17                	je     f0111ae7 <test_kfree_bestfit+0x5e5>
f0111ad0:	83 ec 04             	sub    $0x4,%esp
f0111ad3:	68 34 ad 11 f0       	push   $0xf011ad34
f0111ad8:	68 83 04 00 00       	push   $0x483
f0111add:	68 ba ac 11 f0       	push   $0xf011acba
f0111ae2:	e8 8f e6 fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0111ae7:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0111aee:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0111af1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0111af7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0111afa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111b01:	eb 0e                	jmp    f0111b11 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f0111b03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111b06:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b09:	01 d0                	add    %edx,%eax
f0111b0b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0111b0e:	ff 45 f4             	incl   -0xc(%ebp)
f0111b11:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111b17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111b1a:	7f e7                	jg     f0111b03 <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111b1c:	e8 08 87 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111b21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111b24:	e8 c3 9b ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111b29:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0111b2c:	83 ec 0c             	sub    $0xc,%esp
f0111b2f:	68 00 fc 2f 00       	push   $0x2ffc00
f0111b34:	e8 b6 9e ff ff       	call   f010b9ef <kmalloc>
f0111b39:	83 c4 10             	add    $0x10,%esp
f0111b3c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111b42:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111b48:	89 c1                	mov    %eax,%ecx
f0111b4a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0111b51:	10 00 00 
f0111b54:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111b59:	0f b6 d0             	movzbl %al,%edx
f0111b5c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111b62:	01 d0                	add    %edx,%eax
f0111b64:	48                   	dec    %eax
f0111b65:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0111b6b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111b71:	ba 00 00 00 00       	mov    $0x0,%edx
f0111b76:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0111b7c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111b82:	29 d0                	sub    %edx,%eax
f0111b84:	89 c3                	mov    %eax,%ebx
f0111b86:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0111b8d:	10 00 00 
f0111b90:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111b95:	0f b6 c0             	movzbl %al,%eax
f0111b98:	c1 e0 04             	shl    $0x4,%eax
f0111b9b:	89 c2                	mov    %eax,%edx
f0111b9d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0111ba3:	01 d0                	add    %edx,%eax
f0111ba5:	48                   	dec    %eax
f0111ba6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0111bac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111bb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0111bb7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0111bbd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111bc3:	29 d0                	sub    %edx,%eax
f0111bc5:	01 d8                	add    %ebx,%eax
f0111bc7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0111bcc:	39 c1                	cmp    %eax,%ecx
f0111bce:	74 17                	je     f0111be7 <test_kfree_bestfit+0x6e5>
f0111bd0:	83 ec 04             	sub    $0x4,%esp
f0111bd3:	68 98 ad 11 f0       	push   $0xf011ad98
f0111bd8:	68 8f 04 00 00       	push   $0x48f
f0111bdd:	68 ba ac 11 f0       	push   $0xf011acba
f0111be2:	e8 8f e5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111be7:	e8 00 9b ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111bec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111bef:	74 17                	je     f0111c08 <test_kfree_bestfit+0x706>
f0111bf1:	83 ec 04             	sub    $0x4,%esp
f0111bf4:	68 cc ac 11 f0       	push   $0xf011accc
f0111bf9:	68 90 04 00 00       	push   $0x490
f0111bfe:	68 ba ac 11 f0       	push   $0xf011acba
f0111c03:	e8 6e e5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111c08:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111c0b:	e8 19 86 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111c10:	29 c3                	sub    %eax,%ebx
f0111c12:	89 d8                	mov    %ebx,%eax
f0111c14:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111c19:	74 17                	je     f0111c32 <test_kfree_bestfit+0x730>
f0111c1b:	83 ec 04             	sub    $0x4,%esp
f0111c1e:	68 34 ad 11 f0       	push   $0xf011ad34
f0111c23:	68 91 04 00 00       	push   $0x491
f0111c28:	68 ba ac 11 f0       	push   $0xf011acba
f0111c2d:	e8 44 e5 fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0111c32:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0111c39:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0111c3c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111c42:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0111c45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111c4c:	eb 0e                	jmp    f0111c5c <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f0111c4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111c51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111c54:	01 d0                	add    %edx,%eax
f0111c56:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0111c59:	ff 45 f4             	incl   -0xc(%ebp)
f0111c5c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111c62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111c65:	7f e7                	jg     f0111c4e <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0111c67:	e8 bd 85 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111c6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111c6f:	e8 78 9a ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111c74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0111c77:	83 ec 0c             	sub    $0xc,%esp
f0111c7a:	68 00 fc 5f 00       	push   $0x5ffc00
f0111c7f:	e8 6b 9d ff ff       	call   f010b9ef <kmalloc>
f0111c84:	83 c4 10             	add    $0x10,%esp
f0111c87:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111c8d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0111c93:	89 c1                	mov    %eax,%ecx
f0111c95:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0111c9c:	10 00 00 
f0111c9f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111ca4:	0f b6 d0             	movzbl %al,%edx
f0111ca7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0111cad:	01 d0                	add    %edx,%eax
f0111caf:	48                   	dec    %eax
f0111cb0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0111cb6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111cbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0111cc1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0111cc7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111ccd:	29 d0                	sub    %edx,%eax
f0111ccf:	89 c3                	mov    %eax,%ebx
f0111cd1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0111cd8:	10 00 00 
f0111cdb:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111ce0:	0f b6 c0             	movzbl %al,%eax
f0111ce3:	c1 e0 04             	shl    $0x4,%eax
f0111ce6:	89 c2                	mov    %eax,%edx
f0111ce8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0111cee:	01 d0                	add    %edx,%eax
f0111cf0:	48                   	dec    %eax
f0111cf1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0111cf7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111cfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d02:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0111d08:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111d0e:	29 d0                	sub    %edx,%eax
f0111d10:	01 d8                	add    %ebx,%eax
f0111d12:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f0111d17:	39 c1                	cmp    %eax,%ecx
f0111d19:	74 17                	je     f0111d32 <test_kfree_bestfit+0x830>
f0111d1b:	83 ec 04             	sub    $0x4,%esp
f0111d1e:	68 98 ad 11 f0       	push   $0xf011ad98
f0111d23:	68 9d 04 00 00       	push   $0x49d
f0111d28:	68 ba ac 11 f0       	push   $0xf011acba
f0111d2d:	e8 44 e4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111d32:	e8 b5 99 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111d37:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111d3a:	74 17                	je     f0111d53 <test_kfree_bestfit+0x851>
f0111d3c:	83 ec 04             	sub    $0x4,%esp
f0111d3f:	68 cc ac 11 f0       	push   $0xf011accc
f0111d44:	68 9e 04 00 00       	push   $0x49e
f0111d49:	68 ba ac 11 f0       	push   $0xf011acba
f0111d4e:	e8 23 e4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111d53:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111d56:	e8 ce 84 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111d5b:	29 c3                	sub    %eax,%ebx
f0111d5d:	89 d8                	mov    %ebx,%eax
f0111d5f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0111d64:	74 17                	je     f0111d7d <test_kfree_bestfit+0x87b>
f0111d66:	83 ec 04             	sub    $0x4,%esp
f0111d69:	68 34 ad 11 f0       	push   $0xf011ad34
f0111d6e:	68 9f 04 00 00       	push   $0x49f
f0111d73:	68 ba ac 11 f0       	push   $0xf011acba
f0111d78:	e8 f9 e3 fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0111d7d:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0111d84:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0111d87:	e8 9d 84 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111d8c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111d8f:	e8 58 99 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111d94:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0111d97:	83 ec 0c             	sub    $0xc,%esp
f0111d9a:	68 00 38 00 00       	push   $0x3800
f0111d9f:	e8 4b 9c ff ff       	call   f010b9ef <kmalloc>
f0111da4:	83 c4 10             	add    $0x10,%esp
f0111da7:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111dad:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0111db3:	89 c1                	mov    %eax,%ecx
f0111db5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0111dbc:	10 00 00 
f0111dbf:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111dc4:	0f b6 d0             	movzbl %al,%edx
f0111dc7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0111dcd:	01 d0                	add    %edx,%eax
f0111dcf:	48                   	dec    %eax
f0111dd0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0111dd6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111ddc:	ba 00 00 00 00       	mov    $0x0,%edx
f0111de1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0111de7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111ded:	29 d0                	sub    %edx,%eax
f0111def:	89 c3                	mov    %eax,%ebx
f0111df1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0111df8:	10 00 00 
f0111dfb:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0111e00:	0f b6 c0             	movzbl %al,%eax
f0111e03:	c1 e0 04             	shl    $0x4,%eax
f0111e06:	89 c2                	mov    %eax,%edx
f0111e08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0111e0e:	01 d0                	add    %edx,%eax
f0111e10:	48                   	dec    %eax
f0111e11:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0111e17:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111e1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e22:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0111e28:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111e2e:	29 d0                	sub    %edx,%eax
f0111e30:	01 d8                	add    %ebx,%eax
f0111e32:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0111e37:	39 c1                	cmp    %eax,%ecx
f0111e39:	74 17                	je     f0111e52 <test_kfree_bestfit+0x950>
f0111e3b:	83 ec 04             	sub    $0x4,%esp
f0111e3e:	68 98 ad 11 f0       	push   $0xf011ad98
f0111e43:	68 a6 04 00 00       	push   $0x4a6
f0111e48:	68 ba ac 11 f0       	push   $0xf011acba
f0111e4d:	e8 24 e3 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111e52:	e8 95 98 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111e57:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111e5a:	74 17                	je     f0111e73 <test_kfree_bestfit+0x971>
f0111e5c:	83 ec 04             	sub    $0x4,%esp
f0111e5f:	68 cc ac 11 f0       	push   $0xf011accc
f0111e64:	68 a7 04 00 00       	push   $0x4a7
f0111e69:	68 ba ac 11 f0       	push   $0xf011acba
f0111e6e:	e8 03 e3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111e73:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111e76:	e8 ae 83 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111e7b:	29 c3                	sub    %eax,%ebx
f0111e7d:	89 d8                	mov    %ebx,%eax
f0111e7f:	83 f8 04             	cmp    $0x4,%eax
f0111e82:	74 17                	je     f0111e9b <test_kfree_bestfit+0x999>
f0111e84:	83 ec 04             	sub    $0x4,%esp
f0111e87:	68 34 ad 11 f0       	push   $0xf011ad34
f0111e8c:	68 a8 04 00 00       	push   $0x4a8
f0111e91:	68 ba ac 11 f0       	push   $0xf011acba
f0111e96:	e8 db e2 fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0111e9b:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0111ea2:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0111ea5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0111eab:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0111eae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111eb5:	eb 0e                	jmp    f0111ec5 <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f0111eb7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111eba:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111ebd:	01 d0                	add    %edx,%eax
f0111ebf:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0111ec2:	ff 45 f4             	incl   -0xc(%ebp)
f0111ec5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111ecb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111ece:	7f e7                	jg     f0111eb7 <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0111ed0:	e8 54 83 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111ed5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0111edb:	e8 0c 98 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111ee0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0111ee6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111eec:	83 ec 0c             	sub    $0xc,%esp
f0111eef:	50                   	push   %eax
f0111ef0:	e8 13 9c ff ff       	call   f010bb08 <kfree>
f0111ef5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111ef8:	e8 ef 97 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111efd:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0111f03:	74 17                	je     f0111f1c <test_kfree_bestfit+0xa1a>
f0111f05:	83 ec 04             	sub    $0x4,%esp
f0111f08:	68 cc ac 11 f0       	push   $0xf011accc
f0111f0d:	68 b7 04 00 00       	push   $0x4b7
f0111f12:	68 ba ac 11 f0       	push   $0xf011acba
f0111f17:	e8 5a e2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0111f1c:	e8 08 83 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111f21:	89 c2                	mov    %eax,%edx
f0111f23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111f29:	29 c2                	sub    %eax,%edx
f0111f2b:	89 d0                	mov    %edx,%eax
f0111f2d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111f32:	74 17                	je     f0111f4b <test_kfree_bestfit+0xa49>
f0111f34:	83 ec 04             	sub    $0x4,%esp
f0111f37:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0111f3c:	68 b8 04 00 00       	push   $0x4b8
f0111f41:	68 ba ac 11 f0       	push   $0xf011acba
f0111f46:	e8 2b e2 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111f4b:	e8 d9 82 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111f50:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111f56:	e8 91 97 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111f5b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0111f61:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0111f67:	83 ec 0c             	sub    $0xc,%esp
f0111f6a:	50                   	push   %eax
f0111f6b:	e8 98 9b ff ff       	call   f010bb08 <kfree>
f0111f70:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111f73:	e8 74 97 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111f78:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0111f7e:	74 17                	je     f0111f97 <test_kfree_bestfit+0xa95>
f0111f80:	83 ec 04             	sub    $0x4,%esp
f0111f83:	68 cc ac 11 f0       	push   $0xf011accc
f0111f88:	68 be 04 00 00       	push   $0x4be
f0111f8d:	68 ba ac 11 f0       	push   $0xf011acba
f0111f92:	e8 df e1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0111f97:	e8 8d 82 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111f9c:	89 c2                	mov    %eax,%edx
f0111f9e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111fa4:	29 c2                	sub    %eax,%edx
f0111fa6:	89 d0                	mov    %edx,%eax
f0111fa8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111fad:	74 17                	je     f0111fc6 <test_kfree_bestfit+0xac4>
f0111faf:	83 ec 04             	sub    $0x4,%esp
f0111fb2:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0111fb7:	68 bf 04 00 00       	push   $0x4bf
f0111fbc:	68 ba ac 11 f0       	push   $0xf011acba
f0111fc1:	e8 b0 e1 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0111fc6:	e8 5e 82 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0111fcb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111fd1:	e8 16 97 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111fd6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0111fdc:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0111fe2:	83 ec 0c             	sub    $0xc,%esp
f0111fe5:	50                   	push   %eax
f0111fe6:	e8 1d 9b ff ff       	call   f010bb08 <kfree>
f0111feb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111fee:	e8 f9 96 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0111ff3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0111ff9:	74 17                	je     f0112012 <test_kfree_bestfit+0xb10>
f0111ffb:	83 ec 04             	sub    $0x4,%esp
f0111ffe:	68 cc ac 11 f0       	push   $0xf011accc
f0112003:	68 c5 04 00 00       	push   $0x4c5
f0112008:	68 ba ac 11 f0       	push   $0xf011acba
f011200d:	e8 64 e1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0112012:	e8 12 82 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112017:	89 c2                	mov    %eax,%edx
f0112019:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011201f:	29 c2                	sub    %eax,%edx
f0112021:	89 d0                	mov    %edx,%eax
f0112023:	3d 00 06 00 00       	cmp    $0x600,%eax
f0112028:	74 17                	je     f0112041 <test_kfree_bestfit+0xb3f>
f011202a:	83 ec 04             	sub    $0x4,%esp
f011202d:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0112032:	68 c6 04 00 00       	push   $0x4c6
f0112037:	68 ba ac 11 f0       	push   $0xf011acba
f011203c:	e8 35 e1 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0112041:	83 ec 0c             	sub    $0xc,%esp
f0112044:	68 d8 b2 11 f0       	push   $0xf011b2d8
f0112049:	e8 47 4d ff ff       	call   f0106d95 <cprintf>
f011204e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0112051:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112057:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011205a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112061:	eb 1e                	jmp    f0112081 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0112063:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0112069:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011206c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011206f:	01 c8                	add    %ecx,%eax
f0112071:	8a 00                	mov    (%eax),%al
f0112073:	0f be c0             	movsbl %al,%eax
f0112076:	01 d0                	add    %edx,%eax
f0112078:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011207e:	ff 45 f4             	incl   -0xc(%ebp)
f0112081:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0112087:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011208a:	7f d7                	jg     f0112063 <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011208c:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0112092:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0112098:	01 c0                	add    %eax,%eax
f011209a:	39 c2                	cmp    %eax,%edx
f011209c:	74 17                	je     f01120b5 <test_kfree_bestfit+0xbb3>
f011209e:	83 ec 04             	sub    $0x4,%esp
f01120a1:	68 fc b2 11 f0       	push   $0xf011b2fc
f01120a6:	68 d3 04 00 00       	push   $0x4d3
f01120ab:	68 ba ac 11 f0       	push   $0xf011acba
f01120b0:	e8 c1 e0 fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01120b5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01120bb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01120be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01120c5:	eb 1e                	jmp    f01120e5 <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f01120c7:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01120cd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01120d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01120d3:	01 c8                	add    %ecx,%eax
f01120d5:	8a 00                	mov    (%eax),%al
f01120d7:	0f be c0             	movsbl %al,%eax
f01120da:	01 d0                	add    %edx,%eax
f01120dc:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01120e2:	ff 45 f4             	incl   -0xc(%ebp)
f01120e5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01120eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01120ee:	7f d7                	jg     f01120c7 <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01120f0:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01120f6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01120fc:	89 c1                	mov    %eax,%ecx
f01120fe:	01 c9                	add    %ecx,%ecx
f0112100:	01 c8                	add    %ecx,%eax
f0112102:	39 c2                	cmp    %eax,%edx
f0112104:	74 17                	je     f011211d <test_kfree_bestfit+0xc1b>
f0112106:	83 ec 04             	sub    $0x4,%esp
f0112109:	68 fc b2 11 f0       	push   $0xf011b2fc
f011210e:	68 db 04 00 00       	push   $0x4db
f0112113:	68 ba ac 11 f0       	push   $0xf011acba
f0112118:	e8 59 e0 fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011211d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112123:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0112126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011212d:	eb 1e                	jmp    f011214d <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f011212f:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0112135:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112138:	8b 45 98             	mov    -0x68(%ebp),%eax
f011213b:	01 c8                	add    %ecx,%eax
f011213d:	8a 00                	mov    (%eax),%al
f011213f:	0f be c0             	movsbl %al,%eax
f0112142:	01 d0                	add    %edx,%eax
f0112144:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011214a:	ff 45 f4             	incl   -0xc(%ebp)
f011214d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112153:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112156:	7f d7                	jg     f011212f <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0112158:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011215e:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0112164:	c1 e2 02             	shl    $0x2,%edx
f0112167:	39 d0                	cmp    %edx,%eax
f0112169:	74 17                	je     f0112182 <test_kfree_bestfit+0xc80>
f011216b:	83 ec 04             	sub    $0x4,%esp
f011216e:	68 fc b2 11 f0       	push   $0xf011b2fc
f0112173:	68 e3 04 00 00       	push   $0x4e3
f0112178:	68 ba ac 11 f0       	push   $0xf011acba
f011217d:	e8 f4 df fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0112182:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112188:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011218b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112192:	eb 1e                	jmp    f01121b2 <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f0112194:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f011219a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011219d:	8b 45 98             	mov    -0x68(%ebp),%eax
f01121a0:	01 c8                	add    %ecx,%eax
f01121a2:	8a 00                	mov    (%eax),%al
f01121a4:	0f be c0             	movsbl %al,%eax
f01121a7:	01 d0                	add    %edx,%eax
f01121a9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01121af:	ff 45 f4             	incl   -0xc(%ebp)
f01121b2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01121b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01121bb:	7f d7                	jg     f0112194 <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01121bd:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f01121c3:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f01121c9:	89 d0                	mov    %edx,%eax
f01121cb:	c1 e0 02             	shl    $0x2,%eax
f01121ce:	01 d0                	add    %edx,%eax
f01121d0:	39 c1                	cmp    %eax,%ecx
f01121d2:	74 17                	je     f01121eb <test_kfree_bestfit+0xce9>
f01121d4:	83 ec 04             	sub    $0x4,%esp
f01121d7:	68 fc b2 11 f0       	push   $0xf011b2fc
f01121dc:	68 eb 04 00 00       	push   $0x4eb
f01121e1:	68 ba ac 11 f0       	push   $0xf011acba
f01121e6:	e8 8b df fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01121eb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01121f1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01121f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01121fb:	eb 1e                	jmp    f011221b <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f01121fd:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0112203:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112206:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112209:	01 c8                	add    %ecx,%eax
f011220b:	8a 00                	mov    (%eax),%al
f011220d:	0f be c0             	movsbl %al,%eax
f0112210:	01 d0                	add    %edx,%eax
f0112212:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0112218:	ff 45 f4             	incl   -0xc(%ebp)
f011221b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0112221:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112224:	7f d7                	jg     f01121fd <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0112226:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f011222c:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0112232:	89 d0                	mov    %edx,%eax
f0112234:	01 c0                	add    %eax,%eax
f0112236:	01 d0                	add    %edx,%eax
f0112238:	01 c0                	add    %eax,%eax
f011223a:	01 d0                	add    %edx,%eax
f011223c:	39 c1                	cmp    %eax,%ecx
f011223e:	74 17                	je     f0112257 <test_kfree_bestfit+0xd55>
f0112240:	83 ec 04             	sub    $0x4,%esp
f0112243:	68 fc b2 11 f0       	push   $0xf011b2fc
f0112248:	68 f3 04 00 00       	push   $0x4f3
f011224d:	68 ba ac 11 f0       	push   $0xf011acba
f0112252:	e8 1f df fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f0112257:	83 ec 0c             	sub    $0xc,%esp
f011225a:	68 2f b3 11 f0       	push   $0xf011b32f
f011225f:	e8 31 4b ff ff       	call   f0106d95 <cprintf>
f0112264:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0112267:	e8 bd 7f ff ff       	call   f010a229 <sys_calculate_free_frames>
f011226c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011226f:	e8 78 94 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112274:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0112277:	83 ec 0c             	sub    $0xc,%esp
f011227a:	68 00 50 00 00       	push   $0x5000
f011227f:	e8 6b 97 ff ff       	call   f010b9ef <kmalloc>
f0112284:	83 c4 10             	add    $0x10,%esp
f0112287:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011228d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112293:	89 c1                	mov    %eax,%ecx
f0112295:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011229c:	10 00 00 
f011229f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01122a4:	0f b6 d0             	movzbl %al,%edx
f01122a7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01122ad:	01 d0                	add    %edx,%eax
f01122af:	48                   	dec    %eax
f01122b0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01122b6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01122bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01122c1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01122c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01122cd:	29 d0                	sub    %edx,%eax
f01122cf:	89 c3                	mov    %eax,%ebx
f01122d1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01122d8:	10 00 00 
f01122db:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01122e0:	0f b6 c0             	movzbl %al,%eax
f01122e3:	c1 e0 04             	shl    $0x4,%eax
f01122e6:	89 c2                	mov    %eax,%edx
f01122e8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01122ee:	01 d0                	add    %edx,%eax
f01122f0:	48                   	dec    %eax
f01122f1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01122f7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01122fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0112302:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0112308:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011230e:	29 d0                	sub    %edx,%eax
f0112310:	01 d8                	add    %ebx,%eax
f0112312:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0112317:	39 c1                	cmp    %eax,%ecx
f0112319:	74 17                	je     f0112332 <test_kfree_bestfit+0xe30>
f011231b:	83 ec 04             	sub    $0x4,%esp
f011231e:	68 98 ad 11 f0       	push   $0xf011ad98
f0112323:	68 fd 04 00 00       	push   $0x4fd
f0112328:	68 ba ac 11 f0       	push   $0xf011acba
f011232d:	e8 44 de fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112332:	e8 b5 93 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112337:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011233a:	74 17                	je     f0112353 <test_kfree_bestfit+0xe51>
f011233c:	83 ec 04             	sub    $0x4,%esp
f011233f:	68 cc ac 11 f0       	push   $0xf011accc
f0112344:	68 fe 04 00 00       	push   $0x4fe
f0112349:	68 ba ac 11 f0       	push   $0xf011acba
f011234e:	e8 23 de fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112353:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0112356:	e8 ce 7e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011235b:	29 c3                	sub    %eax,%ebx
f011235d:	89 d8                	mov    %ebx,%eax
f011235f:	83 f8 05             	cmp    $0x5,%eax
f0112362:	74 17                	je     f011237b <test_kfree_bestfit+0xe79>
f0112364:	83 ec 04             	sub    $0x4,%esp
f0112367:	68 34 ad 11 f0       	push   $0xf011ad34
f011236c:	68 ff 04 00 00       	push   $0x4ff
f0112371:	68 ba ac 11 f0       	push   $0xf011acba
f0112376:	e8 fb dd fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011237b:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0112382:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0112385:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011238b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011238e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112395:	eb 0e                	jmp    f01123a5 <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f0112397:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011239a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011239d:	01 d0                	add    %edx,%eax
f011239f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01123a2:	ff 45 f4             	incl   -0xc(%ebp)
f01123a5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01123ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01123ae:	7f e7                	jg     f0112397 <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01123b0:	e8 74 7e ff ff       	call   f010a229 <sys_calculate_free_frames>
f01123b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01123b8:	e8 2f 93 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01123bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01123c0:	83 ec 0c             	sub    $0xc,%esp
f01123c3:	68 00 00 10 00       	push   $0x100000
f01123c8:	e8 22 96 ff ff       	call   f010b9ef <kmalloc>
f01123cd:	83 c4 10             	add    $0x10,%esp
f01123d0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01123d6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01123dc:	89 c1                	mov    %eax,%ecx
f01123de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01123e5:	10 00 00 
f01123e8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01123ed:	0f b6 d0             	movzbl %al,%edx
f01123f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01123f6:	01 d0                	add    %edx,%eax
f01123f8:	48                   	dec    %eax
f01123f9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01123ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112405:	ba 00 00 00 00       	mov    $0x0,%edx
f011240a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112410:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112416:	29 d0                	sub    %edx,%eax
f0112418:	89 c3                	mov    %eax,%ebx
f011241a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0112421:	10 00 00 
f0112424:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112429:	0f b6 c0             	movzbl %al,%eax
f011242c:	c1 e0 04             	shl    $0x4,%eax
f011242f:	89 c2                	mov    %eax,%edx
f0112431:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0112437:	01 d0                	add    %edx,%eax
f0112439:	48                   	dec    %eax
f011243a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0112440:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112446:	ba 00 00 00 00       	mov    $0x0,%edx
f011244b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0112451:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112457:	29 d0                	sub    %edx,%eax
f0112459:	01 d8                	add    %ebx,%eax
f011245b:	2d 00 b0 ff 09       	sub    $0x9ffb000,%eax
f0112460:	39 c1                	cmp    %eax,%ecx
f0112462:	74 17                	je     f011247b <test_kfree_bestfit+0xf79>
f0112464:	83 ec 04             	sub    $0x4,%esp
f0112467:	68 98 ad 11 f0       	push   $0xf011ad98
f011246c:	68 0b 05 00 00       	push   $0x50b
f0112471:	68 ba ac 11 f0       	push   $0xf011acba
f0112476:	e8 fb dc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011247b:	e8 6c 92 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112480:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112483:	74 17                	je     f011249c <test_kfree_bestfit+0xf9a>
f0112485:	83 ec 04             	sub    $0x4,%esp
f0112488:	68 cc ac 11 f0       	push   $0xf011accc
f011248d:	68 0c 05 00 00       	push   $0x50c
f0112492:	68 ba ac 11 f0       	push   $0xf011acba
f0112497:	e8 da dc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011249c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011249f:	e8 85 7d ff ff       	call   f010a229 <sys_calculate_free_frames>
f01124a4:	29 c3                	sub    %eax,%ebx
f01124a6:	89 d8                	mov    %ebx,%eax
f01124a8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01124ad:	74 17                	je     f01124c6 <test_kfree_bestfit+0xfc4>
f01124af:	83 ec 04             	sub    $0x4,%esp
f01124b2:	68 34 ad 11 f0       	push   $0xf011ad34
f01124b7:	68 0d 05 00 00       	push   $0x50d
f01124bc:	68 ba ac 11 f0       	push   $0xf011acba
f01124c1:	e8 b0 dc fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01124c6:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f01124cd:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01124d0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01124d6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01124d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01124e0:	eb 0e                	jmp    f01124f0 <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f01124e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01124e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124e8:	01 d0                	add    %edx,%eax
f01124ea:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01124ed:	ff 45 f4             	incl   -0xc(%ebp)
f01124f0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01124f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01124f9:	7f e7                	jg     f01124e2 <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f01124fb:	83 ec 0c             	sub    $0xc,%esp
f01124fe:	68 36 b3 11 f0       	push   $0xf011b336
f0112503:	e8 8d 48 ff ff       	call   f0106d95 <cprintf>
f0112508:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011250b:	e8 19 7d ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112510:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112513:	e8 d4 91 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112518:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f011251b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112521:	83 ec 0c             	sub    $0xc,%esp
f0112524:	50                   	push   %eax
f0112525:	e8 de 95 ff ff       	call   f010bb08 <kfree>
f011252a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011252d:	e8 ba 91 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112532:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112535:	74 17                	je     f011254e <test_kfree_bestfit+0x104c>
f0112537:	83 ec 04             	sub    $0x4,%esp
f011253a:	68 cc ac 11 f0       	push   $0xf011accc
f011253f:	68 1d 05 00 00       	push   $0x51d
f0112544:	68 ba ac 11 f0       	push   $0xf011acba
f0112549:	e8 28 dc fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f011254e:	e8 d6 7c ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112553:	89 c2                	mov    %eax,%edx
f0112555:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112558:	29 c2                	sub    %eax,%edx
f011255a:	89 d0                	mov    %edx,%eax
f011255c:	83 f8 02             	cmp    $0x2,%eax
f011255f:	74 17                	je     f0112578 <test_kfree_bestfit+0x1076>
f0112561:	83 ec 04             	sub    $0x4,%esp
f0112564:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0112569:	68 1e 05 00 00       	push   $0x51e
f011256e:	68 ba ac 11 f0       	push   $0xf011acba
f0112573:	e8 fe db fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112578:	e8 ac 7c ff ff       	call   f010a229 <sys_calculate_free_frames>
f011257d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112580:	e8 67 91 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112585:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0112588:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011258e:	83 ec 0c             	sub    $0xc,%esp
f0112591:	50                   	push   %eax
f0112592:	e8 71 95 ff ff       	call   f010bb08 <kfree>
f0112597:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011259a:	e8 4d 91 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011259f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01125a2:	74 17                	je     f01125bb <test_kfree_bestfit+0x10b9>
f01125a4:	83 ec 04             	sub    $0x4,%esp
f01125a7:	68 cc ac 11 f0       	push   $0xf011accc
f01125ac:	68 24 05 00 00       	push   $0x524
f01125b1:	68 ba ac 11 f0       	push   $0xf011acba
f01125b6:	e8 bb db fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01125bb:	e8 69 7c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01125c0:	89 c2                	mov    %eax,%edx
f01125c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01125c5:	29 c2                	sub    %eax,%edx
f01125c7:	89 d0                	mov    %edx,%eax
f01125c9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01125ce:	74 17                	je     f01125e7 <test_kfree_bestfit+0x10e5>
f01125d0:	83 ec 04             	sub    $0x4,%esp
f01125d3:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01125d8:	68 25 05 00 00       	push   $0x525
f01125dd:	68 ba ac 11 f0       	push   $0xf011acba
f01125e2:	e8 8f db fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01125e7:	e8 3d 7c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01125ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01125ef:	e8 f8 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01125f4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01125f7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01125fd:	83 ec 0c             	sub    $0xc,%esp
f0112600:	50                   	push   %eax
f0112601:	e8 02 95 ff ff       	call   f010bb08 <kfree>
f0112606:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112609:	e8 de 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011260e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112611:	74 17                	je     f011262a <test_kfree_bestfit+0x1128>
f0112613:	83 ec 04             	sub    $0x4,%esp
f0112616:	68 cc ac 11 f0       	push   $0xf011accc
f011261b:	68 2b 05 00 00       	push   $0x52b
f0112620:	68 ba ac 11 f0       	push   $0xf011acba
f0112625:	e8 4c db fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011262a:	e8 fa 7b ff ff       	call   f010a229 <sys_calculate_free_frames>
f011262f:	89 c2                	mov    %eax,%edx
f0112631:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112634:	29 c2                	sub    %eax,%edx
f0112636:	89 d0                	mov    %edx,%eax
f0112638:	83 f8 01             	cmp    $0x1,%eax
f011263b:	74 17                	je     f0112654 <test_kfree_bestfit+0x1152>
f011263d:	83 ec 04             	sub    $0x4,%esp
f0112640:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0112645:	68 2c 05 00 00       	push   $0x52c
f011264a:	68 ba ac 11 f0       	push   $0xf011acba
f011264f:	e8 22 db fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112654:	e8 d0 7b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112659:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011265c:	e8 8b 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112661:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0112664:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011266a:	83 ec 0c             	sub    $0xc,%esp
f011266d:	50                   	push   %eax
f011266e:	e8 95 94 ff ff       	call   f010bb08 <kfree>
f0112673:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112676:	e8 71 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011267b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011267e:	74 17                	je     f0112697 <test_kfree_bestfit+0x1195>
f0112680:	83 ec 04             	sub    $0x4,%esp
f0112683:	68 cc ac 11 f0       	push   $0xf011accc
f0112688:	68 32 05 00 00       	push   $0x532
f011268d:	68 ba ac 11 f0       	push   $0xf011acba
f0112692:	e8 df da fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0112697:	e8 8d 7b ff ff       	call   f010a229 <sys_calculate_free_frames>
f011269c:	89 c2                	mov    %eax,%edx
f011269e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01126a1:	29 c2                	sub    %eax,%edx
f01126a3:	89 d0                	mov    %edx,%eax
f01126a5:	83 f8 01             	cmp    $0x1,%eax
f01126a8:	74 17                	je     f01126c1 <test_kfree_bestfit+0x11bf>
f01126aa:	83 ec 04             	sub    $0x4,%esp
f01126ad:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01126b2:	68 33 05 00 00       	push   $0x533
f01126b7:	68 ba ac 11 f0       	push   $0xf011acba
f01126bc:	e8 b5 da fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01126c1:	e8 63 7b ff ff       	call   f010a229 <sys_calculate_free_frames>
f01126c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01126c9:	e8 1e 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01126ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01126d1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01126d7:	83 ec 0c             	sub    $0xc,%esp
f01126da:	50                   	push   %eax
f01126db:	e8 28 94 ff ff       	call   f010bb08 <kfree>
f01126e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01126e3:	e8 04 90 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01126e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01126eb:	74 17                	je     f0112704 <test_kfree_bestfit+0x1202>
f01126ed:	83 ec 04             	sub    $0x4,%esp
f01126f0:	68 cc ac 11 f0       	push   $0xf011accc
f01126f5:	68 39 05 00 00       	push   $0x539
f01126fa:	68 ba ac 11 f0       	push   $0xf011acba
f01126ff:	e8 72 da fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0112704:	e8 20 7b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112709:	89 c2                	mov    %eax,%edx
f011270b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011270e:	29 c2                	sub    %eax,%edx
f0112710:	89 d0                	mov    %edx,%eax
f0112712:	83 f8 04             	cmp    $0x4,%eax
f0112715:	74 17                	je     f011272e <test_kfree_bestfit+0x122c>
f0112717:	83 ec 04             	sub    $0x4,%esp
f011271a:	68 a0 b2 11 f0       	push   $0xf011b2a0
f011271f:	68 3a 05 00 00       	push   $0x53a
f0112724:	68 ba ac 11 f0       	push   $0xf011acba
f0112729:	e8 48 da fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011272e:	e8 f6 7a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112733:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112736:	e8 b1 8f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011273b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011273e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112744:	83 ec 0c             	sub    $0xc,%esp
f0112747:	50                   	push   %eax
f0112748:	e8 bb 93 ff ff       	call   f010bb08 <kfree>
f011274d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112750:	e8 97 8f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112755:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112758:	74 17                	je     f0112771 <test_kfree_bestfit+0x126f>
f011275a:	83 ec 04             	sub    $0x4,%esp
f011275d:	68 cc ac 11 f0       	push   $0xf011accc
f0112762:	68 40 05 00 00       	push   $0x540
f0112767:	68 ba ac 11 f0       	push   $0xf011acba
f011276c:	e8 05 da fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0112771:	e8 b3 7a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112776:	89 c2                	mov    %eax,%edx
f0112778:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011277b:	29 c2                	sub    %eax,%edx
f011277d:	89 d0                	mov    %edx,%eax
f011277f:	83 f8 05             	cmp    $0x5,%eax
f0112782:	74 17                	je     f011279b <test_kfree_bestfit+0x1299>
f0112784:	83 ec 04             	sub    $0x4,%esp
f0112787:	68 a0 b2 11 f0       	push   $0xf011b2a0
f011278c:	68 41 05 00 00       	push   $0x541
f0112791:	68 ba ac 11 f0       	push   $0xf011acba
f0112796:	e8 db d9 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011279b:	e8 89 7a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01127a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01127a3:	e8 44 8f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01127a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01127ab:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01127b1:	83 ec 0c             	sub    $0xc,%esp
f01127b4:	50                   	push   %eax
f01127b5:	e8 4e 93 ff ff       	call   f010bb08 <kfree>
f01127ba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01127bd:	e8 2a 8f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01127c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01127c5:	74 17                	je     f01127de <test_kfree_bestfit+0x12dc>
f01127c7:	83 ec 04             	sub    $0x4,%esp
f01127ca:	68 cc ac 11 f0       	push   $0xf011accc
f01127cf:	68 47 05 00 00       	push   $0x547
f01127d4:	68 ba ac 11 f0       	push   $0xf011acba
f01127d9:	e8 98 d9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01127de:	e8 46 7a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01127e3:	89 c2                	mov    %eax,%edx
f01127e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01127e8:	29 c2                	sub    %eax,%edx
f01127ea:	89 d0                	mov    %edx,%eax
f01127ec:	3d 00 01 00 00       	cmp    $0x100,%eax
f01127f1:	74 17                	je     f011280a <test_kfree_bestfit+0x1308>
f01127f3:	83 ec 04             	sub    $0x4,%esp
f01127f6:	68 a0 b2 11 f0       	push   $0xf011b2a0
f01127fb:	68 48 05 00 00       	push   $0x548
f0112800:	68 ba ac 11 f0       	push   $0xf011acba
f0112805:	e8 6c d9 fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f011280a:	e8 1a 7a ff ff       	call   f010a229 <sys_calculate_free_frames>
f011280f:	89 c2                	mov    %eax,%edx
f0112811:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112814:	39 c2                	cmp    %eax,%edx
f0112816:	74 17                	je     f011282f <test_kfree_bestfit+0x132d>
f0112818:	83 ec 04             	sub    $0x4,%esp
f011281b:	68 40 b3 11 f0       	push   $0xf011b340
f0112820:	68 4a 05 00 00       	push   $0x54a
f0112825:	68 ba ac 11 f0       	push   $0xf011acba
f011282a:	e8 47 d9 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f011282f:	83 ec 0c             	sub    $0xc,%esp
f0112832:	68 74 b3 11 f0       	push   $0xf011b374
f0112837:	e8 59 45 ff ff       	call   f0106d95 <cprintf>
f011283c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011283f:	83 ec 0c             	sub    $0xc,%esp
f0112842:	6a 03                	push   $0x3
f0112844:	e8 e7 7b ff ff       	call   f010a430 <sys_bypassPageFault>
f0112849:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f011284c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112853:	e9 82 00 00 00       	jmp    f01128da <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0112858:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011285b:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0112862:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0112865:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112868:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011286b:	e8 ae 7b ff ff       	call   f010a41e <sys_rcr2>
f0112870:	89 c2                	mov    %eax,%edx
f0112872:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112875:	39 c2                	cmp    %eax,%edx
f0112877:	74 17                	je     f0112890 <test_kfree_bestfit+0x138e>
f0112879:	83 ec 04             	sub    $0x4,%esp
f011287c:	68 7c b3 11 f0       	push   $0xf011b37c
f0112881:	68 59 05 00 00       	push   $0x559
f0112886:	68 ba ac 11 f0       	push   $0xf011acba
f011288b:	e8 e6 d8 fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f0112890:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112893:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011289a:	89 c2                	mov    %eax,%edx
f011289c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011289f:	01 d0                	add    %edx,%eax
f01128a1:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01128a4:	e8 75 7b ff ff       	call   f010a41e <sys_rcr2>
f01128a9:	89 c2                	mov    %eax,%edx
f01128ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01128ae:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f01128b5:	89 c1                	mov    %eax,%ecx
f01128b7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128ba:	01 c8                	add    %ecx,%eax
f01128bc:	39 c2                	cmp    %eax,%edx
f01128be:	74 17                	je     f01128d7 <test_kfree_bestfit+0x13d5>
f01128c0:	83 ec 04             	sub    $0x4,%esp
f01128c3:	68 7c b3 11 f0       	push   $0xf011b37c
f01128c8:	68 5b 05 00 00       	push   $0x55b
f01128cd:	68 ba ac 11 f0       	push   $0xf011acba
f01128d2:	e8 9f d8 fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01128d7:	ff 45 f4             	incl   -0xc(%ebp)
f01128da:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01128de:	0f 8e 74 ff ff ff    	jle    f0112858 <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01128e4:	83 ec 0c             	sub    $0xc,%esp
f01128e7:	6a 00                	push   $0x0
f01128e9:	e8 42 7b ff ff       	call   f010a430 <sys_bypassPageFault>
f01128ee:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01128f1:	83 ec 0c             	sub    $0xc,%esp
f01128f4:	68 c1 b3 11 f0       	push   $0xf011b3c1
f01128f9:	e8 97 44 ff ff       	call   f0106d95 <cprintf>
f01128fe:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112901:	e8 23 79 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112906:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112909:	e8 de 8d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011290e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0112911:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0112917:	83 ec 0c             	sub    $0xc,%esp
f011291a:	50                   	push   %eax
f011291b:	e8 e8 91 ff ff       	call   f010bb08 <kfree>
f0112920:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112923:	e8 c4 8d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112928:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011292b:	74 17                	je     f0112944 <test_kfree_bestfit+0x1442>
f011292d:	83 ec 04             	sub    $0x4,%esp
f0112930:	68 cc ac 11 f0       	push   $0xf011accc
f0112935:	68 69 05 00 00       	push   $0x569
f011293a:	68 ba ac 11 f0       	push   $0xf011acba
f011293f:	e8 32 d8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112944:	e8 e0 78 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112949:	89 c2                	mov    %eax,%edx
f011294b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011294e:	39 c2                	cmp    %eax,%edx
f0112950:	74 17                	je     f0112969 <test_kfree_bestfit+0x1467>
f0112952:	83 ec 04             	sub    $0x4,%esp
f0112955:	68 c8 b3 11 f0       	push   $0xf011b3c8
f011295a:	68 6a 05 00 00       	push   $0x56a
f011295f:	68 ba ac 11 f0       	push   $0xf011acba
f0112964:	e8 0d d8 fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112969:	e8 bb 78 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011296e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112971:	e8 76 8d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112976:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0112979:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011297f:	83 ec 0c             	sub    $0xc,%esp
f0112982:	50                   	push   %eax
f0112983:	e8 80 91 ff ff       	call   f010bb08 <kfree>
f0112988:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011298b:	e8 5c 8d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112990:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112993:	74 17                	je     f01129ac <test_kfree_bestfit+0x14aa>
f0112995:	83 ec 04             	sub    $0x4,%esp
f0112998:	68 cc ac 11 f0       	push   $0xf011accc
f011299d:	68 70 05 00 00       	push   $0x570
f01129a2:	68 ba ac 11 f0       	push   $0xf011acba
f01129a7:	e8 ca d7 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01129ac:	e8 78 78 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01129b1:	89 c2                	mov    %eax,%edx
f01129b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01129b6:	39 c2                	cmp    %eax,%edx
f01129b8:	74 17                	je     f01129d1 <test_kfree_bestfit+0x14cf>
f01129ba:	83 ec 04             	sub    $0x4,%esp
f01129bd:	68 c8 b3 11 f0       	push   $0xf011b3c8
f01129c2:	68 71 05 00 00       	push   $0x571
f01129c7:	68 ba ac 11 f0       	push   $0xf011acba
f01129cc:	e8 a5 d7 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01129d1:	e8 53 78 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01129d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01129d9:	e8 0e 8d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01129de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01129e1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01129e7:	83 ec 0c             	sub    $0xc,%esp
f01129ea:	50                   	push   %eax
f01129eb:	e8 18 91 ff ff       	call   f010bb08 <kfree>
f01129f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01129f3:	e8 f4 8c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01129f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01129fb:	74 17                	je     f0112a14 <test_kfree_bestfit+0x1512>
f01129fd:	83 ec 04             	sub    $0x4,%esp
f0112a00:	68 cc ac 11 f0       	push   $0xf011accc
f0112a05:	68 77 05 00 00       	push   $0x577
f0112a0a:	68 ba ac 11 f0       	push   $0xf011acba
f0112a0f:	e8 62 d7 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112a14:	e8 10 78 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112a19:	89 c2                	mov    %eax,%edx
f0112a1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112a1e:	39 c2                	cmp    %eax,%edx
f0112a20:	74 17                	je     f0112a39 <test_kfree_bestfit+0x1537>
f0112a22:	83 ec 04             	sub    $0x4,%esp
f0112a25:	68 c8 b3 11 f0       	push   $0xf011b3c8
f0112a2a:	68 78 05 00 00       	push   $0x578
f0112a2f:	68 ba ac 11 f0       	push   $0xf011acba
f0112a34:	e8 3d d7 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112a39:	e8 eb 77 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112a3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112a41:	e8 a6 8c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112a46:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0112a49:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112a4f:	83 ec 0c             	sub    $0xc,%esp
f0112a52:	50                   	push   %eax
f0112a53:	e8 b0 90 ff ff       	call   f010bb08 <kfree>
f0112a58:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112a5b:	e8 8c 8c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112a60:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112a63:	74 17                	je     f0112a7c <test_kfree_bestfit+0x157a>
f0112a65:	83 ec 04             	sub    $0x4,%esp
f0112a68:	68 cc ac 11 f0       	push   $0xf011accc
f0112a6d:	68 7e 05 00 00       	push   $0x57e
f0112a72:	68 ba ac 11 f0       	push   $0xf011acba
f0112a77:	e8 fa d6 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0112a7c:	e8 a8 77 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112a81:	89 c2                	mov    %eax,%edx
f0112a83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112a86:	39 c2                	cmp    %eax,%edx
f0112a88:	74 17                	je     f0112aa1 <test_kfree_bestfit+0x159f>
f0112a8a:	83 ec 04             	sub    $0x4,%esp
f0112a8d:	68 c8 b3 11 f0       	push   $0xf011b3c8
f0112a92:	68 7f 05 00 00       	push   $0x57f
f0112a97:	68 ba ac 11 f0       	push   $0xf011acba
f0112a9c:	e8 d5 d6 fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f0112aa1:	83 ec 0c             	sub    $0xc,%esp
f0112aa4:	68 0f b4 11 f0       	push   $0xf011b40f
f0112aa9:	e8 e7 42 ff ff       	call   f0106d95 <cprintf>
f0112aae:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0112ab1:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0112ab8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0112abf:	eb 4a                	jmp    f0112b0b <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0112ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112ac4:	89 c1                	mov    %eax,%ecx
f0112ac6:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0112acb:	83 ec 04             	sub    $0x4,%esp
f0112ace:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0112ad4:	52                   	push   %edx
f0112ad5:	51                   	push   %ecx
f0112ad6:	50                   	push   %eax
f0112ad7:	e8 39 10 ff ff       	call   f0103b15 <get_page_table>
f0112adc:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0112adf:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0112ae5:	85 c0                	test   %eax,%eax
f0112ae7:	75 17                	jne    f0112b00 <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0112ae9:	83 ec 04             	sub    $0x4,%esp
f0112aec:	68 18 b4 11 f0       	push   $0xf011b418
f0112af1:	68 8d 05 00 00       	push   $0x58d
f0112af6:	68 ba ac 11 f0       	push   $0xf011acba
f0112afb:	e8 76 d6 fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0112b00:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0112b07:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0112b0b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112b0f:	78 b0                	js     f0112ac1 <test_kfree_bestfit+0x15bf>
f0112b11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112b15:	7f 09                	jg     f0112b20 <test_kfree_bestfit+0x161e>
f0112b17:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0112b1e:	76 a1                	jbe    f0112ac1 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0112b20:	83 ec 0c             	sub    $0xc,%esp
f0112b23:	68 96 ae 11 f0       	push   $0xf011ae96
f0112b28:	e8 68 42 ff ff       	call   f0106d95 <cprintf>
f0112b2d:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0112b30:	83 ec 0c             	sub    $0xc,%esp
f0112b33:	68 80 b4 11 f0       	push   $0xf011b480
f0112b38:	e8 58 42 ff ff       	call   f0106d95 <cprintf>
f0112b3d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0112b40:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0112b45:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0112b48:	5b                   	pop    %ebx
f0112b49:	5f                   	pop    %edi
f0112b4a:	5d                   	pop    %ebp
f0112b4b:	c3                   	ret    

f0112b4c <test_kheap_phys_addr>:


int test_kheap_phys_addr()
{
f0112b4c:	55                   	push   %ebp
f0112b4d:	89 e5                	mov    %esp,%ebp
f0112b4f:	57                   	push   %edi
f0112b50:	56                   	push   %esi
f0112b51:	53                   	push   %ebx
f0112b52:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0112b58:	83 ec 0c             	sub    $0xc,%esp
f0112b5b:	68 fc ab 11 f0       	push   $0xf011abfc
f0112b60:	e8 30 42 ff ff       	call   f0106d95 <cprintf>
f0112b65:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0112b68:	83 ec 0c             	sub    $0xc,%esp
f0112b6b:	68 2c ac 11 f0       	push   $0xf011ac2c
f0112b70:	e8 20 42 ff ff       	call   f0106d95 <cprintf>
f0112b75:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0112b78:	83 ec 0c             	sub    $0xc,%esp
f0112b7b:	68 fc ab 11 f0       	push   $0xf011abfc
f0112b80:	e8 10 42 ff ff       	call   f0106d95 <cprintf>
f0112b85:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0112b88:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0112b8c:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0112b90:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0112b96:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0112b9c:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0112ba3:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0112baa:	e8 7a 76 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112baf:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0112bb2:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0112bb8:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112bbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0112bc2:	89 d7                	mov    %edx,%edi
f0112bc4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0112bc6:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0112bcc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112bd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0112bd6:	89 d7                	mov    %edx,%edi
f0112bd8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0112bda:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0112be0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112be5:	b8 00 00 00 00       	mov    $0x0,%eax
f0112bea:	89 d7                	mov    %edx,%edi
f0112bec:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112bee:	e8 36 76 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112bf3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112bf6:	e8 f1 8a ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112bfb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0112bfe:	83 ec 0c             	sub    $0xc,%esp
f0112c01:	68 00 fc 1f 00       	push   $0x1ffc00
f0112c06:	e8 e4 8d ff ff       	call   f010b9ef <kmalloc>
f0112c0b:	83 c4 10             	add    $0x10,%esp
f0112c0e:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112c14:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0112c1a:	89 c1                	mov    %eax,%ecx
f0112c1c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0112c23:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112c28:	0f b6 d0             	movzbl %al,%edx
f0112c2b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112c2e:	01 d0                	add    %edx,%eax
f0112c30:	48                   	dec    %eax
f0112c31:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0112c34:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c37:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c3c:	f7 75 a0             	divl   -0x60(%ebp)
f0112c3f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c42:	29 d0                	sub    %edx,%eax
f0112c44:	89 c3                	mov    %eax,%ebx
f0112c46:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0112c4d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112c52:	0f b6 c0             	movzbl %al,%eax
f0112c55:	c1 e0 04             	shl    $0x4,%eax
f0112c58:	89 c2                	mov    %eax,%edx
f0112c5a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c5d:	01 d0                	add    %edx,%eax
f0112c5f:	48                   	dec    %eax
f0112c60:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0112c63:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c66:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c6b:	f7 75 98             	divl   -0x68(%ebp)
f0112c6e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c71:	29 d0                	sub    %edx,%eax
f0112c73:	01 d8                	add    %ebx,%eax
f0112c75:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0112c7a:	39 c1                	cmp    %eax,%ecx
f0112c7c:	74 17                	je     f0112c95 <test_kheap_phys_addr+0x149>
f0112c7e:	83 ec 04             	sub    $0x4,%esp
f0112c81:	68 98 ad 11 f0       	push   $0xf011ad98
f0112c86:	68 bb 05 00 00       	push   $0x5bb
f0112c8b:	68 ba ac 11 f0       	push   $0xf011acba
f0112c90:	e8 e1 d4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c95:	e8 52 8a ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112c9a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0112c9d:	74 17                	je     f0112cb6 <test_kheap_phys_addr+0x16a>
f0112c9f:	83 ec 04             	sub    $0x4,%esp
f0112ca2:	68 cc ac 11 f0       	push   $0xf011accc
f0112ca7:	68 bc 05 00 00       	push   $0x5bc
f0112cac:	68 ba ac 11 f0       	push   $0xf011acba
f0112cb1:	e8 c0 d4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112cb6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0112cb9:	e8 6b 75 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112cbe:	29 c3                	sub    %eax,%ebx
f0112cc0:	89 d8                	mov    %ebx,%eax
f0112cc2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112cc7:	74 17                	je     f0112ce0 <test_kheap_phys_addr+0x194>
f0112cc9:	83 ec 04             	sub    $0x4,%esp
f0112ccc:	68 34 ad 11 f0       	push   $0xf011ad34
f0112cd1:	68 bd 05 00 00       	push   $0x5bd
f0112cd6:	68 ba ac 11 f0       	push   $0xf011acba
f0112cdb:	e8 96 d4 fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112ce0:	e8 44 75 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112ce5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ce8:	e8 ff 89 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112ced:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0112cf0:	83 ec 0c             	sub    $0xc,%esp
f0112cf3:	68 00 fc 1f 00       	push   $0x1ffc00
f0112cf8:	e8 f2 8c ff ff       	call   f010b9ef <kmalloc>
f0112cfd:	83 c4 10             	add    $0x10,%esp
f0112d00:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112d06:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0112d0c:	89 c1                	mov    %eax,%ecx
f0112d0e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0112d15:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112d1a:	0f b6 d0             	movzbl %al,%edx
f0112d1d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112d20:	01 d0                	add    %edx,%eax
f0112d22:	48                   	dec    %eax
f0112d23:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0112d26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d29:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d2e:	f7 75 90             	divl   -0x70(%ebp)
f0112d31:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d34:	29 d0                	sub    %edx,%eax
f0112d36:	89 c3                	mov    %eax,%ebx
f0112d38:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0112d3f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112d44:	0f b6 c0             	movzbl %al,%eax
f0112d47:	c1 e0 04             	shl    $0x4,%eax
f0112d4a:	89 c2                	mov    %eax,%edx
f0112d4c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112d4f:	01 d0                	add    %edx,%eax
f0112d51:	48                   	dec    %eax
f0112d52:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0112d55:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112d58:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d5d:	f7 75 88             	divl   -0x78(%ebp)
f0112d60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112d63:	29 d0                	sub    %edx,%eax
f0112d65:	01 d8                	add    %ebx,%eax
f0112d67:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0112d6c:	39 c1                	cmp    %eax,%ecx
f0112d6e:	74 17                	je     f0112d87 <test_kheap_phys_addr+0x23b>
f0112d70:	83 ec 04             	sub    $0x4,%esp
f0112d73:	68 98 ad 11 f0       	push   $0xf011ad98
f0112d78:	68 c3 05 00 00       	push   $0x5c3
f0112d7d:	68 ba ac 11 f0       	push   $0xf011acba
f0112d82:	e8 ef d3 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112d87:	e8 60 89 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112d8c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0112d8f:	74 17                	je     f0112da8 <test_kheap_phys_addr+0x25c>
f0112d91:	83 ec 04             	sub    $0x4,%esp
f0112d94:	68 cc ac 11 f0       	push   $0xf011accc
f0112d99:	68 c4 05 00 00       	push   $0x5c4
f0112d9e:	68 ba ac 11 f0       	push   $0xf011acba
f0112da3:	e8 ce d3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112da8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0112dab:	e8 79 74 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112db0:	29 c3                	sub    %eax,%ebx
f0112db2:	89 d8                	mov    %ebx,%eax
f0112db4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112db9:	74 17                	je     f0112dd2 <test_kheap_phys_addr+0x286>
f0112dbb:	83 ec 04             	sub    $0x4,%esp
f0112dbe:	68 34 ad 11 f0       	push   $0xf011ad34
f0112dc3:	68 c5 05 00 00       	push   $0x5c5
f0112dc8:	68 ba ac 11 f0       	push   $0xf011acba
f0112dcd:	e8 a4 d3 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112dd2:	e8 52 74 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112dd7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112dda:	e8 0d 89 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112ddf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0112de2:	83 ec 0c             	sub    $0xc,%esp
f0112de5:	68 00 08 00 00       	push   $0x800
f0112dea:	e8 00 8c ff ff       	call   f010b9ef <kmalloc>
f0112def:	83 c4 10             	add    $0x10,%esp
f0112df2:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112df8:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0112dfe:	89 c1                	mov    %eax,%ecx
f0112e00:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0112e07:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112e0c:	0f b6 d0             	movzbl %al,%edx
f0112e0f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112e12:	01 d0                	add    %edx,%eax
f0112e14:	48                   	dec    %eax
f0112e15:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0112e1b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112e21:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e26:	f7 75 80             	divl   -0x80(%ebp)
f0112e29:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112e2f:	29 d0                	sub    %edx,%eax
f0112e31:	89 c3                	mov    %eax,%ebx
f0112e33:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0112e3a:	10 00 00 
f0112e3d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112e42:	0f b6 c0             	movzbl %al,%eax
f0112e45:	c1 e0 04             	shl    $0x4,%eax
f0112e48:	89 c2                	mov    %eax,%edx
f0112e4a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112e50:	01 d0                	add    %edx,%eax
f0112e52:	48                   	dec    %eax
f0112e53:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112e59:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112e5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e64:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0112e6a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112e70:	29 d0                	sub    %edx,%eax
f0112e72:	01 d8                	add    %ebx,%eax
f0112e74:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0112e79:	39 c1                	cmp    %eax,%ecx
f0112e7b:	74 17                	je     f0112e94 <test_kheap_phys_addr+0x348>
f0112e7d:	83 ec 04             	sub    $0x4,%esp
f0112e80:	68 98 ad 11 f0       	push   $0xf011ad98
f0112e85:	68 cb 05 00 00       	push   $0x5cb
f0112e8a:	68 ba ac 11 f0       	push   $0xf011acba
f0112e8f:	e8 e2 d2 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e94:	e8 53 88 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112e99:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0112e9c:	74 17                	je     f0112eb5 <test_kheap_phys_addr+0x369>
f0112e9e:	83 ec 04             	sub    $0x4,%esp
f0112ea1:	68 cc ac 11 f0       	push   $0xf011accc
f0112ea6:	68 cc 05 00 00       	push   $0x5cc
f0112eab:	68 ba ac 11 f0       	push   $0xf011acba
f0112eb0:	e8 c1 d2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112eb5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0112eb8:	e8 6c 73 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112ebd:	29 c3                	sub    %eax,%ebx
f0112ebf:	89 d8                	mov    %ebx,%eax
f0112ec1:	83 f8 01             	cmp    $0x1,%eax
f0112ec4:	74 17                	je     f0112edd <test_kheap_phys_addr+0x391>
f0112ec6:	83 ec 04             	sub    $0x4,%esp
f0112ec9:	68 34 ad 11 f0       	push   $0xf011ad34
f0112ece:	68 cd 05 00 00       	push   $0x5cd
f0112ed3:	68 ba ac 11 f0       	push   $0xf011acba
f0112ed8:	e8 99 d2 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112edd:	e8 47 73 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112ee2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ee5:	e8 02 88 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112eea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0112eed:	83 ec 0c             	sub    $0xc,%esp
f0112ef0:	68 00 08 00 00       	push   $0x800
f0112ef5:	e8 f5 8a ff ff       	call   f010b9ef <kmalloc>
f0112efa:	83 c4 10             	add    $0x10,%esp
f0112efd:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112f03:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0112f09:	89 c1                	mov    %eax,%ecx
f0112f0b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0112f12:	10 00 00 
f0112f15:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112f1a:	0f b6 d0             	movzbl %al,%edx
f0112f1d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112f23:	01 d0                	add    %edx,%eax
f0112f25:	48                   	dec    %eax
f0112f26:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0112f2c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112f32:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f37:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0112f3d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112f43:	29 d0                	sub    %edx,%eax
f0112f45:	89 c3                	mov    %eax,%ebx
f0112f47:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0112f4e:	10 00 00 
f0112f51:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0112f56:	0f b6 c0             	movzbl %al,%eax
f0112f59:	c1 e0 04             	shl    $0x4,%eax
f0112f5c:	89 c2                	mov    %eax,%edx
f0112f5e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112f64:	01 d0                	add    %edx,%eax
f0112f66:	48                   	dec    %eax
f0112f67:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0112f6d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0112f73:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f78:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0112f7e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0112f84:	29 d0                	sub    %edx,%eax
f0112f86:	01 d8                	add    %ebx,%eax
f0112f88:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0112f8d:	39 c1                	cmp    %eax,%ecx
f0112f8f:	74 17                	je     f0112fa8 <test_kheap_phys_addr+0x45c>
f0112f91:	83 ec 04             	sub    $0x4,%esp
f0112f94:	68 98 ad 11 f0       	push   $0xf011ad98
f0112f99:	68 d3 05 00 00       	push   $0x5d3
f0112f9e:	68 ba ac 11 f0       	push   $0xf011acba
f0112fa3:	e8 ce d1 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112fa8:	e8 3f 87 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112fad:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0112fb0:	74 17                	je     f0112fc9 <test_kheap_phys_addr+0x47d>
f0112fb2:	83 ec 04             	sub    $0x4,%esp
f0112fb5:	68 cc ac 11 f0       	push   $0xf011accc
f0112fba:	68 d4 05 00 00       	push   $0x5d4
f0112fbf:	68 ba ac 11 f0       	push   $0xf011acba
f0112fc4:	e8 ad d1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112fc9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0112fcc:	e8 58 72 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112fd1:	29 c3                	sub    %eax,%ebx
f0112fd3:	89 d8                	mov    %ebx,%eax
f0112fd5:	83 f8 01             	cmp    $0x1,%eax
f0112fd8:	74 17                	je     f0112ff1 <test_kheap_phys_addr+0x4a5>
f0112fda:	83 ec 04             	sub    $0x4,%esp
f0112fdd:	68 34 ad 11 f0       	push   $0xf011ad34
f0112fe2:	68 d5 05 00 00       	push   $0x5d5
f0112fe7:	68 ba ac 11 f0       	push   $0xf011acba
f0112fec:	e8 85 d1 fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0112ff1:	e8 33 72 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0112ff6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ff9:	e8 ee 86 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0112ffe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0113001:	83 ec 0c             	sub    $0xc,%esp
f0113004:	68 00 1c 00 00       	push   $0x1c00
f0113009:	e8 e1 89 ff ff       	call   f010b9ef <kmalloc>
f011300e:	83 c4 10             	add    $0x10,%esp
f0113011:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113017:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011301d:	89 c1                	mov    %eax,%ecx
f011301f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0113026:	10 00 00 
f0113029:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011302e:	0f b6 d0             	movzbl %al,%edx
f0113031:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0113037:	01 d0                	add    %edx,%eax
f0113039:	48                   	dec    %eax
f011303a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0113040:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0113046:	ba 00 00 00 00       	mov    $0x0,%edx
f011304b:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0113051:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0113057:	29 d0                	sub    %edx,%eax
f0113059:	89 c3                	mov    %eax,%ebx
f011305b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0113062:	10 00 00 
f0113065:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011306a:	0f b6 c0             	movzbl %al,%eax
f011306d:	c1 e0 04             	shl    $0x4,%eax
f0113070:	89 c2                	mov    %eax,%edx
f0113072:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0113078:	01 d0                	add    %edx,%eax
f011307a:	48                   	dec    %eax
f011307b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0113081:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0113087:	ba 00 00 00 00       	mov    $0x0,%edx
f011308c:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0113092:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0113098:	29 d0                	sub    %edx,%eax
f011309a:	01 d8                	add    %ebx,%eax
f011309c:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f01130a1:	39 c1                	cmp    %eax,%ecx
f01130a3:	74 17                	je     f01130bc <test_kheap_phys_addr+0x570>
f01130a5:	83 ec 04             	sub    $0x4,%esp
f01130a8:	68 98 ad 11 f0       	push   $0xf011ad98
f01130ad:	68 db 05 00 00       	push   $0x5db
f01130b2:	68 ba ac 11 f0       	push   $0xf011acba
f01130b7:	e8 ba d0 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01130bc:	e8 2b 86 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01130c1:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01130c4:	74 17                	je     f01130dd <test_kheap_phys_addr+0x591>
f01130c6:	83 ec 04             	sub    $0x4,%esp
f01130c9:	68 cc ac 11 f0       	push   $0xf011accc
f01130ce:	68 dc 05 00 00       	push   $0x5dc
f01130d3:	68 ba ac 11 f0       	push   $0xf011acba
f01130d8:	e8 99 d0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01130dd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01130e0:	e8 44 71 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01130e5:	29 c3                	sub    %eax,%ebx
f01130e7:	89 d8                	mov    %ebx,%eax
f01130e9:	83 f8 02             	cmp    $0x2,%eax
f01130ec:	74 17                	je     f0113105 <test_kheap_phys_addr+0x5b9>
f01130ee:	83 ec 04             	sub    $0x4,%esp
f01130f1:	68 34 ad 11 f0       	push   $0xf011ad34
f01130f6:	68 dd 05 00 00       	push   $0x5dd
f01130fb:	68 ba ac 11 f0       	push   $0xf011acba
f0113100:	e8 71 d0 fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0113105:	e8 1f 71 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011310a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011310d:	e8 da 85 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113112:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0113115:	83 ec 0c             	sub    $0xc,%esp
f0113118:	68 00 fc 2f 00       	push   $0x2ffc00
f011311d:	e8 cd 88 ff ff       	call   f010b9ef <kmalloc>
f0113122:	83 c4 10             	add    $0x10,%esp
f0113125:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011312b:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0113131:	89 c1                	mov    %eax,%ecx
f0113133:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011313a:	10 00 00 
f011313d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113142:	0f b6 d0             	movzbl %al,%edx
f0113145:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011314b:	01 d0                	add    %edx,%eax
f011314d:	48                   	dec    %eax
f011314e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0113154:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011315a:	ba 00 00 00 00       	mov    $0x0,%edx
f011315f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0113165:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011316b:	29 d0                	sub    %edx,%eax
f011316d:	89 c3                	mov    %eax,%ebx
f011316f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0113176:	10 00 00 
f0113179:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011317e:	0f b6 c0             	movzbl %al,%eax
f0113181:	c1 e0 04             	shl    $0x4,%eax
f0113184:	89 c2                	mov    %eax,%edx
f0113186:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011318c:	01 d0                	add    %edx,%eax
f011318e:	48                   	dec    %eax
f011318f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0113195:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011319b:	ba 00 00 00 00       	mov    $0x0,%edx
f01131a0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01131a6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01131ac:	29 d0                	sub    %edx,%eax
f01131ae:	01 d8                	add    %ebx,%eax
f01131b0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01131b5:	39 c1                	cmp    %eax,%ecx
f01131b7:	74 17                	je     f01131d0 <test_kheap_phys_addr+0x684>
f01131b9:	83 ec 04             	sub    $0x4,%esp
f01131bc:	68 98 ad 11 f0       	push   $0xf011ad98
f01131c1:	68 e3 05 00 00       	push   $0x5e3
f01131c6:	68 ba ac 11 f0       	push   $0xf011acba
f01131cb:	e8 a6 cf fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01131d0:	e8 17 85 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01131d5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01131d8:	74 17                	je     f01131f1 <test_kheap_phys_addr+0x6a5>
f01131da:	83 ec 04             	sub    $0x4,%esp
f01131dd:	68 cc ac 11 f0       	push   $0xf011accc
f01131e2:	68 e4 05 00 00       	push   $0x5e4
f01131e7:	68 ba ac 11 f0       	push   $0xf011acba
f01131ec:	e8 85 cf fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01131f1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01131f4:	e8 30 70 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01131f9:	29 c3                	sub    %eax,%ebx
f01131fb:	89 d8                	mov    %ebx,%eax
f01131fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113202:	74 17                	je     f011321b <test_kheap_phys_addr+0x6cf>
f0113204:	83 ec 04             	sub    $0x4,%esp
f0113207:	68 34 ad 11 f0       	push   $0xf011ad34
f011320c:	68 e5 05 00 00       	push   $0x5e5
f0113211:	68 ba ac 11 f0       	push   $0xf011acba
f0113216:	e8 5b cf fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011321b:	e8 09 70 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113220:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113223:	e8 c4 84 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113228:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011322b:	83 ec 0c             	sub    $0xc,%esp
f011322e:	68 00 fc 5f 00       	push   $0x5ffc00
f0113233:	e8 b7 87 ff ff       	call   f010b9ef <kmalloc>
f0113238:	83 c4 10             	add    $0x10,%esp
f011323b:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113241:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0113247:	89 c1                	mov    %eax,%ecx
f0113249:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0113250:	10 00 00 
f0113253:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113258:	0f b6 d0             	movzbl %al,%edx
f011325b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113261:	01 d0                	add    %edx,%eax
f0113263:	48                   	dec    %eax
f0113264:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011326a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113270:	ba 00 00 00 00       	mov    $0x0,%edx
f0113275:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011327b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113281:	29 d0                	sub    %edx,%eax
f0113283:	89 c3                	mov    %eax,%ebx
f0113285:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011328c:	10 00 00 
f011328f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113294:	0f b6 c0             	movzbl %al,%eax
f0113297:	c1 e0 04             	shl    $0x4,%eax
f011329a:	89 c2                	mov    %eax,%edx
f011329c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01132a2:	01 d0                	add    %edx,%eax
f01132a4:	48                   	dec    %eax
f01132a5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01132ab:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01132b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01132b6:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01132bc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01132c2:	29 d0                	sub    %edx,%eax
f01132c4:	01 d8                	add    %ebx,%eax
f01132c6:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01132cb:	39 c1                	cmp    %eax,%ecx
f01132cd:	74 17                	je     f01132e6 <test_kheap_phys_addr+0x79a>
f01132cf:	83 ec 04             	sub    $0x4,%esp
f01132d2:	68 98 ad 11 f0       	push   $0xf011ad98
f01132d7:	68 eb 05 00 00       	push   $0x5eb
f01132dc:	68 ba ac 11 f0       	push   $0xf011acba
f01132e1:	e8 90 ce fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01132e6:	e8 01 84 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01132eb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01132ee:	74 17                	je     f0113307 <test_kheap_phys_addr+0x7bb>
f01132f0:	83 ec 04             	sub    $0x4,%esp
f01132f3:	68 cc ac 11 f0       	push   $0xf011accc
f01132f8:	68 ec 05 00 00       	push   $0x5ec
f01132fd:	68 ba ac 11 f0       	push   $0xf011acba
f0113302:	e8 6f ce fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113307:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011330a:	e8 1a 6f ff ff       	call   f010a229 <sys_calculate_free_frames>
f011330f:	29 c3                	sub    %eax,%ebx
f0113311:	89 d8                	mov    %ebx,%eax
f0113313:	3d 00 06 00 00       	cmp    $0x600,%eax
f0113318:	74 17                	je     f0113331 <test_kheap_phys_addr+0x7e5>
f011331a:	83 ec 04             	sub    $0x4,%esp
f011331d:	68 34 ad 11 f0       	push   $0xf011ad34
f0113322:	68 ed 05 00 00       	push   $0x5ed
f0113327:	68 ba ac 11 f0       	push   $0xf011acba
f011332c:	e8 45 ce fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0113331:	e8 f3 6e ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113336:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113339:	e8 ae 83 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011333e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0113341:	83 ec 0c             	sub    $0xc,%esp
f0113344:	68 00 38 00 00       	push   $0x3800
f0113349:	e8 a1 86 ff ff       	call   f010b9ef <kmalloc>
f011334e:	83 c4 10             	add    $0x10,%esp
f0113351:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113357:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011335d:	89 c1                	mov    %eax,%ecx
f011335f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0113366:	10 00 00 
f0113369:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011336e:	0f b6 d0             	movzbl %al,%edx
f0113371:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0113377:	01 d0                	add    %edx,%eax
f0113379:	48                   	dec    %eax
f011337a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0113380:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113386:	ba 00 00 00 00       	mov    $0x0,%edx
f011338b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0113391:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113397:	29 d0                	sub    %edx,%eax
f0113399:	89 c3                	mov    %eax,%ebx
f011339b:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01133a2:	10 00 00 
f01133a5:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01133aa:	0f b6 c0             	movzbl %al,%eax
f01133ad:	c1 e0 04             	shl    $0x4,%eax
f01133b0:	89 c2                	mov    %eax,%edx
f01133b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01133b8:	01 d0                	add    %edx,%eax
f01133ba:	48                   	dec    %eax
f01133bb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01133c1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01133c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01133cc:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01133d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01133d8:	29 d0                	sub    %edx,%eax
f01133da:	01 d8                	add    %ebx,%eax
f01133dc:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f01133e1:	39 c1                	cmp    %eax,%ecx
f01133e3:	74 17                	je     f01133fc <test_kheap_phys_addr+0x8b0>
f01133e5:	83 ec 04             	sub    $0x4,%esp
f01133e8:	68 98 ad 11 f0       	push   $0xf011ad98
f01133ed:	68 f3 05 00 00       	push   $0x5f3
f01133f2:	68 ba ac 11 f0       	push   $0xf011acba
f01133f7:	e8 7a cd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01133fc:	e8 eb 82 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113401:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113404:	74 17                	je     f011341d <test_kheap_phys_addr+0x8d1>
f0113406:	83 ec 04             	sub    $0x4,%esp
f0113409:	68 cc ac 11 f0       	push   $0xf011accc
f011340e:	68 f4 05 00 00       	push   $0x5f4
f0113413:	68 ba ac 11 f0       	push   $0xf011acba
f0113418:	e8 59 cd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011341d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113420:	e8 04 6e ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113425:	29 c3                	sub    %eax,%ebx
f0113427:	89 d8                	mov    %ebx,%eax
f0113429:	83 f8 04             	cmp    $0x4,%eax
f011342c:	74 17                	je     f0113445 <test_kheap_phys_addr+0x8f9>
f011342e:	83 ec 04             	sub    $0x4,%esp
f0113431:	68 34 ad 11 f0       	push   $0xf011ad34
f0113436:	68 f5 05 00 00       	push   $0x5f5
f011343b:	68 ba ac 11 f0       	push   $0xf011acba
f0113440:	e8 31 cd fe ff       	call   f0100176 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0113445:	89 e0                	mov    %esp,%eax
f0113447:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0113449:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0113450:	10 00 00 
f0113453:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113458:	0f b6 d0             	movzbl %al,%edx
f011345b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113461:	01 d0                	add    %edx,%eax
f0113463:	48                   	dec    %eax
f0113464:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011346a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113470:	ba 00 00 00 00       	mov    $0x0,%edx
f0113475:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011347b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113481:	29 d0                	sub    %edx,%eax
f0113483:	89 c1                	mov    %eax,%ecx
f0113485:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011348c:	10 00 00 
f011348f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113494:	0f b6 c0             	movzbl %al,%eax
f0113497:	c1 e0 04             	shl    $0x4,%eax
f011349a:	89 c2                	mov    %eax,%edx
f011349c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01134a2:	01 d0                	add    %edx,%eax
f01134a4:	48                   	dec    %eax
f01134a5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01134ab:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01134b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01134b6:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01134bc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01134c2:	29 d0                	sub    %edx,%eax
f01134c4:	01 c8                	add    %ecx,%eax
f01134c6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01134cb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01134d1:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01134d8:	10 00 00 
f01134db:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01134e0:	0f b6 d0             	movzbl %al,%edx
f01134e3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01134e9:	01 d0                	add    %edx,%eax
f01134eb:	48                   	dec    %eax
f01134ec:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01134f2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01134f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01134fd:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0113503:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113509:	29 d0                	sub    %edx,%eax
f011350b:	89 c1                	mov    %eax,%ecx
f011350d:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0113514:	10 00 00 
f0113517:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011351c:	0f b6 c0             	movzbl %al,%eax
f011351f:	c1 e0 04             	shl    $0x4,%eax
f0113522:	89 c2                	mov    %eax,%edx
f0113524:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011352a:	01 d0                	add    %edx,%eax
f011352c:	48                   	dec    %eax
f011352d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0113533:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113539:	ba 00 00 00 00       	mov    $0x0,%edx
f011353e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0113544:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011354a:	29 d0                	sub    %edx,%eax
f011354c:	01 c8                	add    %ecx,%eax
f011354e:	05 00 80 d0 00       	add    $0xd08000,%eax
f0113553:	c1 e8 0c             	shr    $0xc,%eax
f0113556:	89 c2                	mov    %eax,%edx
f0113558:	4a                   	dec    %edx
f0113559:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f011355f:	c1 e0 02             	shl    $0x2,%eax
f0113562:	8d 50 03             	lea    0x3(%eax),%edx
f0113565:	b8 10 00 00 00       	mov    $0x10,%eax
f011356a:	48                   	dec    %eax
f011356b:	01 d0                	add    %edx,%eax
f011356d:	bf 10 00 00 00       	mov    $0x10,%edi
f0113572:	ba 00 00 00 00       	mov    $0x0,%edx
f0113577:	f7 f7                	div    %edi
f0113579:	6b c0 10             	imul   $0x10,%eax,%eax
f011357c:	29 c4                	sub    %eax,%esp
f011357e:	89 e0                	mov    %esp,%eax
f0113580:	83 c0 03             	add    $0x3,%eax
f0113583:	c1 e8 02             	shr    $0x2,%eax
f0113586:	c1 e0 02             	shl    $0x2,%eax
f0113589:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f011358f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113596:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011359d:	eb 29                	jmp    f01135c8 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f011359f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01135a2:	8d 43 01             	lea    0x1(%ebx),%eax
f01135a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01135a8:	83 ec 0c             	sub    $0xc,%esp
f01135ab:	ff 75 e0             	pushl  -0x20(%ebp)
f01135ae:	e8 46 86 ff ff       	call   f010bbf9 <kheap_physical_address>
f01135b3:	83 c4 10             	add    $0x10,%esp
f01135b6:	89 c2                	mov    %eax,%edx
f01135b8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01135be:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01135c1:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01135c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01135cb:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01135d1:	72 cc                	jb     f011359f <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01135d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01135d6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f01135dc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01135e3:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01135ea:	e9 a5 00 00 00       	jmp    f0113694 <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f01135ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01135f2:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f01135f7:	83 ec 04             	sub    $0x4,%esp
f01135fa:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f0113600:	51                   	push   %ecx
f0113601:	52                   	push   %edx
f0113602:	50                   	push   %eax
f0113603:	e8 0d 05 ff ff       	call   f0103b15 <get_page_table>
f0113608:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011360b:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0113611:	85 c0                	test   %eax,%eax
f0113613:	75 17                	jne    f011362c <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0113615:	83 ec 04             	sub    $0x4,%esp
f0113618:	68 b8 b4 11 f0       	push   $0xf011b4b8
f011361d:	68 0a 06 00 00       	push   $0x60a
f0113622:	68 ba ac 11 f0       	push   $0xf011acba
f0113627:	e8 4a cb fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011362c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0113633:	eb 44                	jmp    f0113679 <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0113635:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f011363b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011363e:	c1 e2 02             	shl    $0x2,%edx
f0113641:	01 d0                	add    %edx,%eax
f0113643:	8b 00                	mov    (%eax),%eax
f0113645:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011364a:	89 c1                	mov    %eax,%ecx
f011364c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113652:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113655:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0113658:	39 c1                	cmp    %eax,%ecx
f011365a:	74 17                	je     f0113673 <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f011365c:	83 ec 04             	sub    $0x4,%esp
f011365f:	68 11 b5 11 f0       	push   $0xf011b511
f0113664:	68 11 06 00 00       	push   $0x611
f0113669:	68 ba ac 11 f0       	push   $0xf011acba
f011366e:	e8 03 cb fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113673:	ff 45 dc             	incl   -0x24(%ebp)
f0113676:	ff 45 e4             	incl   -0x1c(%ebp)
f0113679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011367c:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0113682:	7d 09                	jge    f011368d <test_kheap_phys_addr+0xb41>
f0113684:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011368b:	7e a8                	jle    f0113635 <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011368d:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f0113694:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113697:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f011369d:	0f 82 4c ff ff ff    	jb     f01135ef <test_kheap_phys_addr+0xaa3>
f01136a3:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01136a5:	83 ec 0c             	sub    $0xc,%esp
f01136a8:	68 30 b5 11 f0       	push   $0xf011b530
f01136ad:	e8 e3 36 ff ff       	call   f0106d95 <cprintf>
f01136b2:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01136b5:	e8 6f 6b ff ff       	call   f010a229 <sys_calculate_free_frames>
f01136ba:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01136c0:	e8 27 80 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01136c5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01136cb:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01136d1:	83 ec 0c             	sub    $0xc,%esp
f01136d4:	50                   	push   %eax
f01136d5:	e8 2e 84 ff ff       	call   f010bb08 <kfree>
f01136da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01136dd:	e8 0a 80 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01136e2:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01136e8:	74 17                	je     f0113701 <test_kheap_phys_addr+0xbb5>
f01136ea:	83 ec 04             	sub    $0x4,%esp
f01136ed:	68 cc ac 11 f0       	push   $0xf011accc
f01136f2:	68 1e 06 00 00       	push   $0x61e
f01136f7:	68 ba ac 11 f0       	push   $0xf011acba
f01136fc:	e8 75 ca fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0113701:	e8 23 6b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113706:	89 c2                	mov    %eax,%edx
f0113708:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011370e:	29 c2                	sub    %eax,%edx
f0113710:	89 d0                	mov    %edx,%eax
f0113712:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113717:	74 17                	je     f0113730 <test_kheap_phys_addr+0xbe4>
f0113719:	83 ec 04             	sub    $0x4,%esp
f011371c:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0113721:	68 1f 06 00 00       	push   $0x61f
f0113726:	68 ba ac 11 f0       	push   $0xf011acba
f011372b:	e8 46 ca fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113730:	e8 f4 6a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113735:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011373b:	e8 ac 7f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113740:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0113746:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f011374c:	83 ec 0c             	sub    $0xc,%esp
f011374f:	50                   	push   %eax
f0113750:	e8 b3 83 ff ff       	call   f010bb08 <kfree>
f0113755:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113758:	e8 8f 7f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011375d:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0113763:	74 17                	je     f011377c <test_kheap_phys_addr+0xc30>
f0113765:	83 ec 04             	sub    $0x4,%esp
f0113768:	68 cc ac 11 f0       	push   $0xf011accc
f011376d:	68 25 06 00 00       	push   $0x625
f0113772:	68 ba ac 11 f0       	push   $0xf011acba
f0113777:	e8 fa c9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011377c:	e8 a8 6a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113781:	89 c2                	mov    %eax,%edx
f0113783:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113789:	29 c2                	sub    %eax,%edx
f011378b:	89 d0                	mov    %edx,%eax
f011378d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113792:	74 17                	je     f01137ab <test_kheap_phys_addr+0xc5f>
f0113794:	83 ec 04             	sub    $0x4,%esp
f0113797:	68 a0 b2 11 f0       	push   $0xf011b2a0
f011379c:	68 26 06 00 00       	push   $0x626
f01137a1:	68 ba ac 11 f0       	push   $0xf011acba
f01137a6:	e8 cb c9 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01137ab:	e8 79 6a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01137b0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01137b6:	e8 31 7f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01137bb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01137c1:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01137c7:	83 ec 0c             	sub    $0xc,%esp
f01137ca:	50                   	push   %eax
f01137cb:	e8 38 83 ff ff       	call   f010bb08 <kfree>
f01137d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01137d3:	e8 14 7f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01137d8:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01137de:	74 17                	je     f01137f7 <test_kheap_phys_addr+0xcab>
f01137e0:	83 ec 04             	sub    $0x4,%esp
f01137e3:	68 cc ac 11 f0       	push   $0xf011accc
f01137e8:	68 2c 06 00 00       	push   $0x62c
f01137ed:	68 ba ac 11 f0       	push   $0xf011acba
f01137f2:	e8 7f c9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01137f7:	e8 2d 6a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01137fc:	89 c2                	mov    %eax,%edx
f01137fe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113804:	29 c2                	sub    %eax,%edx
f0113806:	89 d0                	mov    %edx,%eax
f0113808:	3d 00 06 00 00       	cmp    $0x600,%eax
f011380d:	74 17                	je     f0113826 <test_kheap_phys_addr+0xcda>
f011380f:	83 ec 04             	sub    $0x4,%esp
f0113812:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0113817:	68 2d 06 00 00       	push   $0x62d
f011381c:	68 ba ac 11 f0       	push   $0xf011acba
f0113821:	e8 50 c9 fe ff       	call   f0100176 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0113826:	89 e0                	mov    %esp,%eax
f0113828:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011382a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0113831:	10 00 00 
f0113834:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113839:	0f b6 d0             	movzbl %al,%edx
f011383c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0113842:	01 d0                	add    %edx,%eax
f0113844:	48                   	dec    %eax
f0113845:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011384b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113851:	ba 00 00 00 00       	mov    $0x0,%edx
f0113856:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011385c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113862:	29 d0                	sub    %edx,%eax
f0113864:	89 c1                	mov    %eax,%ecx
f0113866:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011386d:	10 00 00 
f0113870:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113875:	0f b6 c0             	movzbl %al,%eax
f0113878:	c1 e0 04             	shl    $0x4,%eax
f011387b:	89 c2                	mov    %eax,%edx
f011387d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113883:	01 d0                	add    %edx,%eax
f0113885:	48                   	dec    %eax
f0113886:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011388c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113892:	ba 00 00 00 00       	mov    $0x0,%edx
f0113897:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011389d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01138a3:	29 d0                	sub    %edx,%eax
f01138a5:	01 c8                	add    %ecx,%eax
f01138a7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01138ac:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01138b2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01138b9:	10 00 00 
f01138bc:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01138c1:	0f b6 d0             	movzbl %al,%edx
f01138c4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01138ca:	01 d0                	add    %edx,%eax
f01138cc:	48                   	dec    %eax
f01138cd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01138d3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01138d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01138de:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01138e4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01138ea:	29 d0                	sub    %edx,%eax
f01138ec:	89 c1                	mov    %eax,%ecx
f01138ee:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01138f5:	10 00 00 
f01138f8:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01138fd:	0f b6 c0             	movzbl %al,%eax
f0113900:	c1 e0 04             	shl    $0x4,%eax
f0113903:	89 c2                	mov    %eax,%edx
f0113905:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011390b:	01 d0                	add    %edx,%eax
f011390d:	48                   	dec    %eax
f011390e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0113914:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011391a:	ba 00 00 00 00       	mov    $0x0,%edx
f011391f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0113925:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011392b:	29 d0                	sub    %edx,%eax
f011392d:	01 c8                	add    %ecx,%eax
f011392f:	05 00 80 d0 00       	add    $0xd08000,%eax
f0113934:	c1 e8 0c             	shr    $0xc,%eax
f0113937:	89 c2                	mov    %eax,%edx
f0113939:	4a                   	dec    %edx
f011393a:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0113940:	c1 e0 02             	shl    $0x2,%eax
f0113943:	8d 50 03             	lea    0x3(%eax),%edx
f0113946:	b8 10 00 00 00       	mov    $0x10,%eax
f011394b:	48                   	dec    %eax
f011394c:	01 d0                	add    %edx,%eax
f011394e:	bf 10 00 00 00       	mov    $0x10,%edi
f0113953:	ba 00 00 00 00       	mov    $0x0,%edx
f0113958:	f7 f7                	div    %edi
f011395a:	6b c0 10             	imul   $0x10,%eax,%eax
f011395d:	29 c4                	sub    %eax,%esp
f011395f:	89 e0                	mov    %esp,%eax
f0113961:	83 c0 03             	add    $0x3,%eax
f0113964:	c1 e8 02             	shr    $0x2,%eax
f0113967:	c1 e0 02             	shl    $0x2,%eax
f011396a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0113970:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113977:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f011397e:	eb 29                	jmp    f01139a9 <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f0113980:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0113983:	8d 43 01             	lea    0x1(%ebx),%eax
f0113986:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0113989:	83 ec 0c             	sub    $0xc,%esp
f011398c:	ff 75 d8             	pushl  -0x28(%ebp)
f011398f:	e8 65 82 ff ff       	call   f010bbf9 <kheap_physical_address>
f0113994:	83 c4 10             	add    $0x10,%esp
f0113997:	89 c2                	mov    %eax,%edx
f0113999:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011399f:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01139a2:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01139a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01139ac:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01139b2:	72 cc                	jb     f0113980 <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01139b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01139b7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f01139bd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01139c4:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01139cb:	e9 a5 00 00 00       	jmp    f0113a75 <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f01139d0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01139d3:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f01139d8:	83 ec 04             	sub    $0x4,%esp
f01139db:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f01139e1:	51                   	push   %ecx
f01139e2:	52                   	push   %edx
f01139e3:	50                   	push   %eax
f01139e4:	e8 2c 01 ff ff       	call   f0103b15 <get_page_table>
f01139e9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01139ec:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01139f2:	85 c0                	test   %eax,%eax
f01139f4:	75 17                	jne    f0113a0d <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01139f6:	83 ec 04             	sub    $0x4,%esp
f01139f9:	68 b8 b4 11 f0       	push   $0xf011b4b8
f01139fe:	68 43 06 00 00       	push   $0x643
f0113a03:	68 ba ac 11 f0       	push   $0xf011acba
f0113a08:	e8 69 c7 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113a0d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0113a14:	eb 44                	jmp    f0113a5a <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0113a16:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0113a1c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0113a1f:	c1 e2 02             	shl    $0x2,%edx
f0113a22:	01 d0                	add    %edx,%eax
f0113a24:	8b 00                	mov    (%eax),%eax
f0113a26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113a2b:	89 c1                	mov    %eax,%ecx
f0113a2d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0113a33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113a36:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0113a39:	39 c1                	cmp    %eax,%ecx
f0113a3b:	74 17                	je     f0113a54 <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0113a3d:	83 ec 04             	sub    $0x4,%esp
f0113a40:	68 11 b5 11 f0       	push   $0xf011b511
f0113a45:	68 4a 06 00 00       	push   $0x64a
f0113a4a:	68 ba ac 11 f0       	push   $0xf011acba
f0113a4f:	e8 22 c7 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113a54:	ff 45 d4             	incl   -0x2c(%ebp)
f0113a57:	ff 45 e4             	incl   -0x1c(%ebp)
f0113a5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113a5d:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0113a63:	7d 09                	jge    f0113a6e <test_kheap_phys_addr+0xf22>
f0113a65:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0113a6c:	7e a8                	jle    f0113a16 <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113a6e:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f0113a75:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113a78:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0113a7e:	0f 82 4c ff ff ff    	jb     f01139d0 <test_kheap_phys_addr+0xe84>
f0113a84:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f0113a86:	83 ec 0c             	sub    $0xc,%esp
f0113a89:	68 3d ae 11 f0       	push   $0xf011ae3d
f0113a8e:	e8 02 33 ff ff       	call   f0106d95 <cprintf>
f0113a93:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0113a96:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0113a9d:	10 00 00 
f0113aa0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113aa5:	0f b6 d0             	movzbl %al,%edx
f0113aa8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0113aae:	01 d0                	add    %edx,%eax
f0113ab0:	48                   	dec    %eax
f0113ab1:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0113ab7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0113abd:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ac2:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0113ac8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0113ace:	29 d0                	sub    %edx,%eax
f0113ad0:	89 c1                	mov    %eax,%ecx
f0113ad2:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0113ad9:	10 00 00 
f0113adc:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113ae1:	0f b6 c0             	movzbl %al,%eax
f0113ae4:	c1 e0 04             	shl    $0x4,%eax
f0113ae7:	89 c2                	mov    %eax,%edx
f0113ae9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0113aef:	01 d0                	add    %edx,%eax
f0113af1:	48                   	dec    %eax
f0113af2:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0113af8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0113afe:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b03:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0113b09:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0113b0f:	29 d0                	sub    %edx,%eax
f0113b11:	01 c8                	add    %ecx,%eax
f0113b13:	2d 00 00 00 09       	sub    $0x9000000,%eax
f0113b18:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0113b1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0113b25:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0113b2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113b2e:	eb 0a                	jmp    f0113b3a <test_kheap_phys_addr+0xfee>
		{
			i++;
f0113b30:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0113b33:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0113b3a:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0113b41:	76 ed                	jbe    f0113b30 <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f0113b43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113b46:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0113b4c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0113b53:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0113b59:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113b5c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0113b63:	e9 ce 00 00 00       	jmp    f0113c36 <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f0113b68:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113b6b:	89 c1                	mov    %eax,%ecx
f0113b6d:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f0113b72:	83 ec 04             	sub    $0x4,%esp
f0113b75:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f0113b7b:	52                   	push   %edx
f0113b7c:	51                   	push   %ecx
f0113b7d:	50                   	push   %eax
f0113b7e:	e8 92 ff fe ff       	call   f0103b15 <get_page_table>
f0113b83:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0113b86:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0113b8c:	85 c0                	test   %eax,%eax
f0113b8e:	75 17                	jne    f0113ba7 <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0113b90:	83 ec 04             	sub    $0x4,%esp
f0113b93:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0113b98:	68 65 06 00 00       	push   $0x665
f0113b9d:	68 ba ac 11 f0       	push   $0xf011acba
f0113ba2:	e8 cf c5 fe ff       	call   f0100176 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113ba7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0113bae:	eb 67                	jmp    f0113c17 <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0113bb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113bb3:	c1 e0 0c             	shl    $0xc,%eax
f0113bb6:	89 c2                	mov    %eax,%edx
f0113bb8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0113bbe:	01 d0                	add    %edx,%eax
f0113bc0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0113bc6:	83 ec 0c             	sub    $0xc,%esp
f0113bc9:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0113bcf:	e8 25 80 ff ff       	call   f010bbf9 <kheap_physical_address>
f0113bd4:	83 c4 10             	add    $0x10,%esp
f0113bd7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0113bdd:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0113be3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113be6:	c1 e2 02             	shl    $0x2,%edx
f0113be9:	01 d0                	add    %edx,%eax
f0113beb:	8b 00                	mov    (%eax),%eax
f0113bed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113bf2:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0113bf8:	74 17                	je     f0113c11 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0113bfa:	83 ec 04             	sub    $0x4,%esp
f0113bfd:	68 11 b5 11 f0       	push   $0xf011b511
f0113c02:	68 6f 06 00 00       	push   $0x66f
f0113c07:	68 ba ac 11 f0       	push   $0xf011acba
f0113c0c:	e8 65 c5 fe ff       	call   f0100176 <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113c11:	ff 45 cc             	incl   -0x34(%ebp)
f0113c14:	ff 45 e4             	incl   -0x1c(%ebp)
f0113c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113c1a:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0113c20:	7d 09                	jge    f0113c2b <test_kheap_phys_addr+0x10df>
f0113c22:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0113c29:	7e 85                	jle    f0113bb0 <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0113c2b:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0113c32:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0113c36:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0113c3a:	0f 88 28 ff ff ff    	js     f0113b68 <test_kheap_phys_addr+0x101c>
f0113c40:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0113c44:	7f 0d                	jg     f0113c53 <test_kheap_phys_addr+0x1107>
f0113c46:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0113c4d:	0f 86 15 ff ff ff    	jbe    f0113b68 <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0113c53:	83 ec 0c             	sub    $0xc,%esp
f0113c56:	68 96 ae 11 f0       	push   $0xf011ae96
f0113c5b:	e8 35 31 ff ff       	call   f0106d95 <cprintf>
f0113c60:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0113c63:	83 ec 0c             	sub    $0xc,%esp
f0113c66:	68 64 b5 11 f0       	push   $0xf011b564
f0113c6b:	e8 25 31 ff ff       	call   f0106d95 <cprintf>
f0113c70:	83 c4 10             	add    $0x10,%esp

	return 1;
f0113c73:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0113c78:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113c7b:	5b                   	pop    %ebx
f0113c7c:	5e                   	pop    %esi
f0113c7d:	5f                   	pop    %edi
f0113c7e:	5d                   	pop    %ebp
f0113c7f:	c3                   	ret    

f0113c80 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0113c80:	55                   	push   %ebp
f0113c81:	89 e5                	mov    %esp,%ebp
f0113c83:	57                   	push   %edi
f0113c84:	56                   	push   %esi
f0113c85:	53                   	push   %ebx
f0113c86:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0113c8c:	89 e0                	mov    %esp,%eax
f0113c8e:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0113c90:	83 ec 0c             	sub    $0xc,%esp
f0113c93:	68 fc ab 11 f0       	push   $0xf011abfc
f0113c98:	e8 f8 30 ff ff       	call   f0106d95 <cprintf>
f0113c9d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0113ca0:	83 ec 0c             	sub    $0xc,%esp
f0113ca3:	68 2c ac 11 f0       	push   $0xf011ac2c
f0113ca8:	e8 e8 30 ff ff       	call   f0106d95 <cprintf>
f0113cad:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0113cb0:	83 ec 0c             	sub    $0xc,%esp
f0113cb3:	68 fc ab 11 f0       	push   $0xf011abfc
f0113cb8:	e8 d8 30 ff ff       	call   f0106d95 <cprintf>
f0113cbd:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0113cc0:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0113cc4:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0113cc8:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0113cce:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0113cd4:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0113cdb:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0113ce2:	e8 42 65 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113ce7:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0113cea:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0113cf0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113cf5:	b8 00 00 00 00       	mov    $0x0,%eax
f0113cfa:	89 d7                	mov    %edx,%edi
f0113cfc:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0113cfe:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0113d04:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113d09:	b8 00 00 00 00       	mov    $0x0,%eax
f0113d0e:	89 d7                	mov    %edx,%edi
f0113d10:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0113d12:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0113d18:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113d1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0113d22:	89 d7                	mov    %edx,%edi
f0113d24:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113d26:	e8 fe 64 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113d2b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113d2e:	e8 b9 79 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113d33:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0113d36:	83 ec 0c             	sub    $0xc,%esp
f0113d39:	68 00 fc 1f 00       	push   $0x1ffc00
f0113d3e:	e8 ac 7c ff ff       	call   f010b9ef <kmalloc>
f0113d43:	83 c4 10             	add    $0x10,%esp
f0113d46:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113d4c:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0113d52:	89 c1                	mov    %eax,%ecx
f0113d54:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0113d5b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113d60:	0f b6 d0             	movzbl %al,%edx
f0113d63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d66:	01 d0                	add    %edx,%eax
f0113d68:	48                   	dec    %eax
f0113d69:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0113d6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d74:	f7 75 b4             	divl   -0x4c(%ebp)
f0113d77:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d7a:	29 d0                	sub    %edx,%eax
f0113d7c:	89 c3                	mov    %eax,%ebx
f0113d7e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0113d85:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113d8a:	0f b6 c0             	movzbl %al,%eax
f0113d8d:	c1 e0 04             	shl    $0x4,%eax
f0113d90:	89 c2                	mov    %eax,%edx
f0113d92:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113d95:	01 d0                	add    %edx,%eax
f0113d97:	48                   	dec    %eax
f0113d98:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0113d9b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113da3:	f7 75 ac             	divl   -0x54(%ebp)
f0113da6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113da9:	29 d0                	sub    %edx,%eax
f0113dab:	01 d8                	add    %ebx,%eax
f0113dad:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0113db2:	39 c1                	cmp    %eax,%ecx
f0113db4:	74 17                	je     f0113dcd <test_kheap_virt_addr+0x14d>
f0113db6:	83 ec 04             	sub    $0x4,%esp
f0113db9:	68 98 ad 11 f0       	push   $0xf011ad98
f0113dbe:	68 9c 06 00 00       	push   $0x69c
f0113dc3:	68 ba ac 11 f0       	push   $0xf011acba
f0113dc8:	e8 a9 c3 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113dcd:	e8 1a 79 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113dd2:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0113dd5:	74 17                	je     f0113dee <test_kheap_virt_addr+0x16e>
f0113dd7:	83 ec 04             	sub    $0x4,%esp
f0113dda:	68 cc ac 11 f0       	push   $0xf011accc
f0113ddf:	68 9d 06 00 00       	push   $0x69d
f0113de4:	68 ba ac 11 f0       	push   $0xf011acba
f0113de9:	e8 88 c3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113dee:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0113df1:	e8 33 64 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113df6:	29 c3                	sub    %eax,%ebx
f0113df8:	89 d8                	mov    %ebx,%eax
f0113dfa:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113dff:	74 17                	je     f0113e18 <test_kheap_virt_addr+0x198>
f0113e01:	83 ec 04             	sub    $0x4,%esp
f0113e04:	68 34 ad 11 f0       	push   $0xf011ad34
f0113e09:	68 9e 06 00 00       	push   $0x69e
f0113e0e:	68 ba ac 11 f0       	push   $0xf011acba
f0113e13:	e8 5e c3 fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113e18:	e8 0c 64 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113e1d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113e20:	e8 c7 78 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113e25:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0113e28:	83 ec 0c             	sub    $0xc,%esp
f0113e2b:	68 00 fc 1f 00       	push   $0x1ffc00
f0113e30:	e8 ba 7b ff ff       	call   f010b9ef <kmalloc>
f0113e35:	83 c4 10             	add    $0x10,%esp
f0113e38:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113e3e:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0113e44:	89 c1                	mov    %eax,%ecx
f0113e46:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113e4d:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113e52:	0f b6 d0             	movzbl %al,%edx
f0113e55:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113e58:	01 d0                	add    %edx,%eax
f0113e5a:	48                   	dec    %eax
f0113e5b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0113e5e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113e61:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e66:	f7 75 a4             	divl   -0x5c(%ebp)
f0113e69:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113e6c:	29 d0                	sub    %edx,%eax
f0113e6e:	89 c3                	mov    %eax,%ebx
f0113e70:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0113e77:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113e7c:	0f b6 c0             	movzbl %al,%eax
f0113e7f:	c1 e0 04             	shl    $0x4,%eax
f0113e82:	89 c2                	mov    %eax,%edx
f0113e84:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113e87:	01 d0                	add    %edx,%eax
f0113e89:	48                   	dec    %eax
f0113e8a:	89 45 98             	mov    %eax,-0x68(%ebp)
f0113e8d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113e90:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e95:	f7 75 9c             	divl   -0x64(%ebp)
f0113e98:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113e9b:	29 d0                	sub    %edx,%eax
f0113e9d:	01 d8                	add    %ebx,%eax
f0113e9f:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0113ea4:	39 c1                	cmp    %eax,%ecx
f0113ea6:	74 17                	je     f0113ebf <test_kheap_virt_addr+0x23f>
f0113ea8:	83 ec 04             	sub    $0x4,%esp
f0113eab:	68 98 ad 11 f0       	push   $0xf011ad98
f0113eb0:	68 a4 06 00 00       	push   $0x6a4
f0113eb5:	68 ba ac 11 f0       	push   $0xf011acba
f0113eba:	e8 b7 c2 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113ebf:	e8 28 78 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113ec4:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0113ec7:	74 17                	je     f0113ee0 <test_kheap_virt_addr+0x260>
f0113ec9:	83 ec 04             	sub    $0x4,%esp
f0113ecc:	68 cc ac 11 f0       	push   $0xf011accc
f0113ed1:	68 a5 06 00 00       	push   $0x6a5
f0113ed6:	68 ba ac 11 f0       	push   $0xf011acba
f0113edb:	e8 96 c2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113ee0:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0113ee3:	e8 41 63 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113ee8:	29 c3                	sub    %eax,%ebx
f0113eea:	89 d8                	mov    %ebx,%eax
f0113eec:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113ef1:	74 17                	je     f0113f0a <test_kheap_virt_addr+0x28a>
f0113ef3:	83 ec 04             	sub    $0x4,%esp
f0113ef6:	68 34 ad 11 f0       	push   $0xf011ad34
f0113efb:	68 a6 06 00 00       	push   $0x6a6
f0113f00:	68 ba ac 11 f0       	push   $0xf011acba
f0113f05:	e8 6c c2 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0113f0a:	e8 1a 63 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113f0f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113f12:	e8 d5 77 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113f17:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0113f1a:	83 ec 0c             	sub    $0xc,%esp
f0113f1d:	68 00 08 00 00       	push   $0x800
f0113f22:	e8 c8 7a ff ff       	call   f010b9ef <kmalloc>
f0113f27:	83 c4 10             	add    $0x10,%esp
f0113f2a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113f30:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0113f36:	89 c1                	mov    %eax,%ecx
f0113f38:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0113f3f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113f44:	0f b6 d0             	movzbl %al,%edx
f0113f47:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113f4a:	01 d0                	add    %edx,%eax
f0113f4c:	48                   	dec    %eax
f0113f4d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113f50:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f53:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f58:	f7 75 94             	divl   -0x6c(%ebp)
f0113f5b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f5e:	29 d0                	sub    %edx,%eax
f0113f60:	89 c3                	mov    %eax,%ebx
f0113f62:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0113f69:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0113f6e:	0f b6 c0             	movzbl %al,%eax
f0113f71:	c1 e0 04             	shl    $0x4,%eax
f0113f74:	89 c2                	mov    %eax,%edx
f0113f76:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113f79:	01 d0                	add    %edx,%eax
f0113f7b:	48                   	dec    %eax
f0113f7c:	89 45 88             	mov    %eax,-0x78(%ebp)
f0113f7f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113f82:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f87:	f7 75 8c             	divl   -0x74(%ebp)
f0113f8a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113f8d:	29 d0                	sub    %edx,%eax
f0113f8f:	01 d8                	add    %ebx,%eax
f0113f91:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0113f96:	39 c1                	cmp    %eax,%ecx
f0113f98:	74 17                	je     f0113fb1 <test_kheap_virt_addr+0x331>
f0113f9a:	83 ec 04             	sub    $0x4,%esp
f0113f9d:	68 98 ad 11 f0       	push   $0xf011ad98
f0113fa2:	68 ac 06 00 00       	push   $0x6ac
f0113fa7:	68 ba ac 11 f0       	push   $0xf011acba
f0113fac:	e8 c5 c1 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113fb1:	e8 36 77 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0113fb6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0113fb9:	74 17                	je     f0113fd2 <test_kheap_virt_addr+0x352>
f0113fbb:	83 ec 04             	sub    $0x4,%esp
f0113fbe:	68 cc ac 11 f0       	push   $0xf011accc
f0113fc3:	68 ad 06 00 00       	push   $0x6ad
f0113fc8:	68 ba ac 11 f0       	push   $0xf011acba
f0113fcd:	e8 a4 c1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113fd2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0113fd5:	e8 4f 62 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113fda:	29 c3                	sub    %eax,%ebx
f0113fdc:	89 d8                	mov    %ebx,%eax
f0113fde:	83 f8 01             	cmp    $0x1,%eax
f0113fe1:	74 17                	je     f0113ffa <test_kheap_virt_addr+0x37a>
f0113fe3:	83 ec 04             	sub    $0x4,%esp
f0113fe6:	68 34 ad 11 f0       	push   $0xf011ad34
f0113feb:	68 ae 06 00 00       	push   $0x6ae
f0113ff0:	68 ba ac 11 f0       	push   $0xf011acba
f0113ff5:	e8 7c c1 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0113ffa:	e8 2a 62 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0113fff:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114002:	e8 e5 76 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114007:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011400a:	83 ec 0c             	sub    $0xc,%esp
f011400d:	68 00 08 00 00       	push   $0x800
f0114012:	e8 d8 79 ff ff       	call   f010b9ef <kmalloc>
f0114017:	83 c4 10             	add    $0x10,%esp
f011401a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114020:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0114026:	89 c1                	mov    %eax,%ecx
f0114028:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011402f:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114034:	0f b6 d0             	movzbl %al,%edx
f0114037:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011403a:	01 d0                	add    %edx,%eax
f011403c:	48                   	dec    %eax
f011403d:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114040:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114043:	ba 00 00 00 00       	mov    $0x0,%edx
f0114048:	f7 75 84             	divl   -0x7c(%ebp)
f011404b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011404e:	29 d0                	sub    %edx,%eax
f0114050:	89 c3                	mov    %eax,%ebx
f0114052:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0114059:	10 00 00 
f011405c:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114061:	0f b6 c0             	movzbl %al,%eax
f0114064:	c1 e0 04             	shl    $0x4,%eax
f0114067:	89 c2                	mov    %eax,%edx
f0114069:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011406f:	01 d0                	add    %edx,%eax
f0114071:	48                   	dec    %eax
f0114072:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0114078:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011407e:	ba 00 00 00 00       	mov    $0x0,%edx
f0114083:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0114089:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011408f:	29 d0                	sub    %edx,%eax
f0114091:	01 d8                	add    %ebx,%eax
f0114093:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0114098:	39 c1                	cmp    %eax,%ecx
f011409a:	74 17                	je     f01140b3 <test_kheap_virt_addr+0x433>
f011409c:	83 ec 04             	sub    $0x4,%esp
f011409f:	68 98 ad 11 f0       	push   $0xf011ad98
f01140a4:	68 b4 06 00 00       	push   $0x6b4
f01140a9:	68 ba ac 11 f0       	push   $0xf011acba
f01140ae:	e8 c3 c0 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01140b3:	e8 34 76 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01140b8:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01140bb:	74 17                	je     f01140d4 <test_kheap_virt_addr+0x454>
f01140bd:	83 ec 04             	sub    $0x4,%esp
f01140c0:	68 cc ac 11 f0       	push   $0xf011accc
f01140c5:	68 b5 06 00 00       	push   $0x6b5
f01140ca:	68 ba ac 11 f0       	push   $0xf011acba
f01140cf:	e8 a2 c0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01140d4:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01140d7:	e8 4d 61 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01140dc:	29 c3                	sub    %eax,%ebx
f01140de:	89 d8                	mov    %ebx,%eax
f01140e0:	83 f8 01             	cmp    $0x1,%eax
f01140e3:	74 17                	je     f01140fc <test_kheap_virt_addr+0x47c>
f01140e5:	83 ec 04             	sub    $0x4,%esp
f01140e8:	68 34 ad 11 f0       	push   $0xf011ad34
f01140ed:	68 b6 06 00 00       	push   $0x6b6
f01140f2:	68 ba ac 11 f0       	push   $0xf011acba
f01140f7:	e8 7a c0 fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01140fc:	e8 28 61 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114101:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114104:	e8 e3 75 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114109:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011410c:	83 ec 0c             	sub    $0xc,%esp
f011410f:	68 00 1c 00 00       	push   $0x1c00
f0114114:	e8 d6 78 ff ff       	call   f010b9ef <kmalloc>
f0114119:	83 c4 10             	add    $0x10,%esp
f011411c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114122:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0114128:	89 c1                	mov    %eax,%ecx
f011412a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114131:	10 00 00 
f0114134:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114139:	0f b6 d0             	movzbl %al,%edx
f011413c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114142:	01 d0                	add    %edx,%eax
f0114144:	48                   	dec    %eax
f0114145:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011414b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114151:	ba 00 00 00 00       	mov    $0x0,%edx
f0114156:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011415c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114162:	29 d0                	sub    %edx,%eax
f0114164:	89 c3                	mov    %eax,%ebx
f0114166:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011416d:	10 00 00 
f0114170:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114175:	0f b6 c0             	movzbl %al,%eax
f0114178:	c1 e0 04             	shl    $0x4,%eax
f011417b:	89 c2                	mov    %eax,%edx
f011417d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114183:	01 d0                	add    %edx,%eax
f0114185:	48                   	dec    %eax
f0114186:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011418c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114192:	ba 00 00 00 00       	mov    $0x0,%edx
f0114197:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011419d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01141a3:	29 d0                	sub    %edx,%eax
f01141a5:	01 d8                	add    %ebx,%eax
f01141a7:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f01141ac:	39 c1                	cmp    %eax,%ecx
f01141ae:	74 17                	je     f01141c7 <test_kheap_virt_addr+0x547>
f01141b0:	83 ec 04             	sub    $0x4,%esp
f01141b3:	68 98 ad 11 f0       	push   $0xf011ad98
f01141b8:	68 bc 06 00 00       	push   $0x6bc
f01141bd:	68 ba ac 11 f0       	push   $0xf011acba
f01141c2:	e8 af bf fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01141c7:	e8 20 75 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01141cc:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01141cf:	74 17                	je     f01141e8 <test_kheap_virt_addr+0x568>
f01141d1:	83 ec 04             	sub    $0x4,%esp
f01141d4:	68 cc ac 11 f0       	push   $0xf011accc
f01141d9:	68 bd 06 00 00       	push   $0x6bd
f01141de:	68 ba ac 11 f0       	push   $0xf011acba
f01141e3:	e8 8e bf fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01141e8:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01141eb:	e8 39 60 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01141f0:	29 c3                	sub    %eax,%ebx
f01141f2:	89 d8                	mov    %ebx,%eax
f01141f4:	83 f8 02             	cmp    $0x2,%eax
f01141f7:	74 17                	je     f0114210 <test_kheap_virt_addr+0x590>
f01141f9:	83 ec 04             	sub    $0x4,%esp
f01141fc:	68 34 ad 11 f0       	push   $0xf011ad34
f0114201:	68 be 06 00 00       	push   $0x6be
f0114206:	68 ba ac 11 f0       	push   $0xf011acba
f011420b:	e8 66 bf fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114210:	e8 14 60 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114215:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114218:	e8 cf 74 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011421d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114220:	83 ec 0c             	sub    $0xc,%esp
f0114223:	68 00 fc 2f 00       	push   $0x2ffc00
f0114228:	e8 c2 77 ff ff       	call   f010b9ef <kmalloc>
f011422d:	83 c4 10             	add    $0x10,%esp
f0114230:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114236:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011423c:	89 c1                	mov    %eax,%ecx
f011423e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114245:	10 00 00 
f0114248:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011424d:	0f b6 d0             	movzbl %al,%edx
f0114250:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114256:	01 d0                	add    %edx,%eax
f0114258:	48                   	dec    %eax
f0114259:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011425f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114265:	ba 00 00 00 00       	mov    $0x0,%edx
f011426a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0114270:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114276:	29 d0                	sub    %edx,%eax
f0114278:	89 c3                	mov    %eax,%ebx
f011427a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0114281:	10 00 00 
f0114284:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114289:	0f b6 c0             	movzbl %al,%eax
f011428c:	c1 e0 04             	shl    $0x4,%eax
f011428f:	89 c2                	mov    %eax,%edx
f0114291:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0114297:	01 d0                	add    %edx,%eax
f0114299:	48                   	dec    %eax
f011429a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01142a0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01142a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01142ab:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01142b1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01142b7:	29 d0                	sub    %edx,%eax
f01142b9:	01 d8                	add    %ebx,%eax
f01142bb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01142c0:	39 c1                	cmp    %eax,%ecx
f01142c2:	74 17                	je     f01142db <test_kheap_virt_addr+0x65b>
f01142c4:	83 ec 04             	sub    $0x4,%esp
f01142c7:	68 98 ad 11 f0       	push   $0xf011ad98
f01142cc:	68 c4 06 00 00       	push   $0x6c4
f01142d1:	68 ba ac 11 f0       	push   $0xf011acba
f01142d6:	e8 9b be fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01142db:	e8 0c 74 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01142e0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01142e3:	74 17                	je     f01142fc <test_kheap_virt_addr+0x67c>
f01142e5:	83 ec 04             	sub    $0x4,%esp
f01142e8:	68 cc ac 11 f0       	push   $0xf011accc
f01142ed:	68 c5 06 00 00       	push   $0x6c5
f01142f2:	68 ba ac 11 f0       	push   $0xf011acba
f01142f7:	e8 7a be fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01142fc:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01142ff:	e8 25 5f ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114304:	29 c3                	sub    %eax,%ebx
f0114306:	89 d8                	mov    %ebx,%eax
f0114308:	3d 00 03 00 00       	cmp    $0x300,%eax
f011430d:	74 17                	je     f0114326 <test_kheap_virt_addr+0x6a6>
f011430f:	83 ec 04             	sub    $0x4,%esp
f0114312:	68 34 ad 11 f0       	push   $0xf011ad34
f0114317:	68 c6 06 00 00       	push   $0x6c6
f011431c:	68 ba ac 11 f0       	push   $0xf011acba
f0114321:	e8 50 be fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114326:	e8 fe 5e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011432b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011432e:	e8 b9 73 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114333:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0114336:	83 ec 0c             	sub    $0xc,%esp
f0114339:	68 00 fc 5f 00       	push   $0x5ffc00
f011433e:	e8 ac 76 ff ff       	call   f010b9ef <kmalloc>
f0114343:	83 c4 10             	add    $0x10,%esp
f0114346:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011434c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0114352:	89 c1                	mov    %eax,%ecx
f0114354:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011435b:	10 00 00 
f011435e:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114363:	0f b6 d0             	movzbl %al,%edx
f0114366:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011436c:	01 d0                	add    %edx,%eax
f011436e:	48                   	dec    %eax
f011436f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114375:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011437b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114380:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114386:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011438c:	29 d0                	sub    %edx,%eax
f011438e:	89 c3                	mov    %eax,%ebx
f0114390:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0114397:	10 00 00 
f011439a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011439f:	0f b6 c0             	movzbl %al,%eax
f01143a2:	c1 e0 04             	shl    $0x4,%eax
f01143a5:	89 c2                	mov    %eax,%edx
f01143a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01143ad:	01 d0                	add    %edx,%eax
f01143af:	48                   	dec    %eax
f01143b0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01143b6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01143bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01143c1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01143c7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01143cd:	29 d0                	sub    %edx,%eax
f01143cf:	01 d8                	add    %ebx,%eax
f01143d1:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01143d6:	39 c1                	cmp    %eax,%ecx
f01143d8:	74 17                	je     f01143f1 <test_kheap_virt_addr+0x771>
f01143da:	83 ec 04             	sub    $0x4,%esp
f01143dd:	68 98 ad 11 f0       	push   $0xf011ad98
f01143e2:	68 cc 06 00 00       	push   $0x6cc
f01143e7:	68 ba ac 11 f0       	push   $0xf011acba
f01143ec:	e8 85 bd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01143f1:	e8 f6 72 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01143f6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01143f9:	74 17                	je     f0114412 <test_kheap_virt_addr+0x792>
f01143fb:	83 ec 04             	sub    $0x4,%esp
f01143fe:	68 cc ac 11 f0       	push   $0xf011accc
f0114403:	68 cd 06 00 00       	push   $0x6cd
f0114408:	68 ba ac 11 f0       	push   $0xf011acba
f011440d:	e8 64 bd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114412:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114415:	e8 0f 5e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011441a:	29 c3                	sub    %eax,%ebx
f011441c:	89 d8                	mov    %ebx,%eax
f011441e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114423:	74 17                	je     f011443c <test_kheap_virt_addr+0x7bc>
f0114425:	83 ec 04             	sub    $0x4,%esp
f0114428:	68 34 ad 11 f0       	push   $0xf011ad34
f011442d:	68 ce 06 00 00       	push   $0x6ce
f0114432:	68 ba ac 11 f0       	push   $0xf011acba
f0114437:	e8 3a bd fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011443c:	e8 e8 5d ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114441:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114444:	e8 a3 72 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114449:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011444c:	83 ec 0c             	sub    $0xc,%esp
f011444f:	68 00 38 00 00       	push   $0x3800
f0114454:	e8 96 75 ff ff       	call   f010b9ef <kmalloc>
f0114459:	83 c4 10             	add    $0x10,%esp
f011445c:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114462:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0114468:	89 c1                	mov    %eax,%ecx
f011446a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0114471:	10 00 00 
f0114474:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114479:	0f b6 d0             	movzbl %al,%edx
f011447c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114482:	01 d0                	add    %edx,%eax
f0114484:	48                   	dec    %eax
f0114485:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011448b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114491:	ba 00 00 00 00       	mov    $0x0,%edx
f0114496:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011449c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01144a2:	29 d0                	sub    %edx,%eax
f01144a4:	89 c3                	mov    %eax,%ebx
f01144a6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01144ad:	10 00 00 
f01144b0:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01144b5:	0f b6 c0             	movzbl %al,%eax
f01144b8:	c1 e0 04             	shl    $0x4,%eax
f01144bb:	89 c2                	mov    %eax,%edx
f01144bd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01144c3:	01 d0                	add    %edx,%eax
f01144c5:	48                   	dec    %eax
f01144c6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01144cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01144d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01144d7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01144dd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01144e3:	29 d0                	sub    %edx,%eax
f01144e5:	01 d8                	add    %ebx,%eax
f01144e7:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f01144ec:	39 c1                	cmp    %eax,%ecx
f01144ee:	74 17                	je     f0114507 <test_kheap_virt_addr+0x887>
f01144f0:	83 ec 04             	sub    $0x4,%esp
f01144f3:	68 98 ad 11 f0       	push   $0xf011ad98
f01144f8:	68 d4 06 00 00       	push   $0x6d4
f01144fd:	68 ba ac 11 f0       	push   $0xf011acba
f0114502:	e8 6f bc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114507:	e8 e0 71 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011450c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011450f:	74 17                	je     f0114528 <test_kheap_virt_addr+0x8a8>
f0114511:	83 ec 04             	sub    $0x4,%esp
f0114514:	68 cc ac 11 f0       	push   $0xf011accc
f0114519:	68 d5 06 00 00       	push   $0x6d5
f011451e:	68 ba ac 11 f0       	push   $0xf011acba
f0114523:	e8 4e bc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114528:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011452b:	e8 f9 5c ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114530:	29 c3                	sub    %eax,%ebx
f0114532:	89 d8                	mov    %ebx,%eax
f0114534:	83 f8 04             	cmp    $0x4,%eax
f0114537:	74 17                	je     f0114550 <test_kheap_virt_addr+0x8d0>
f0114539:	83 ec 04             	sub    $0x4,%esp
f011453c:	68 34 ad 11 f0       	push   $0xf011ad34
f0114541:	68 d6 06 00 00       	push   $0x6d6
f0114546:	68 ba ac 11 f0       	push   $0xf011acba
f011454b:	e8 26 bc fe ff       	call   f0100176 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0114550:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0114557:	10 00 00 
f011455a:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011455f:	0f b6 d0             	movzbl %al,%edx
f0114562:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0114568:	01 d0                	add    %edx,%eax
f011456a:	48                   	dec    %eax
f011456b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0114571:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114577:	ba 00 00 00 00       	mov    $0x0,%edx
f011457c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0114582:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114588:	29 d0                	sub    %edx,%eax
f011458a:	89 c1                	mov    %eax,%ecx
f011458c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0114593:	10 00 00 
f0114596:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011459b:	0f b6 c0             	movzbl %al,%eax
f011459e:	c1 e0 04             	shl    $0x4,%eax
f01145a1:	89 c2                	mov    %eax,%edx
f01145a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01145a9:	01 d0                	add    %edx,%eax
f01145ab:	48                   	dec    %eax
f01145ac:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01145b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01145b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01145bd:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01145c3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01145c9:	29 d0                	sub    %edx,%eax
f01145cb:	01 c8                	add    %ecx,%eax
f01145cd:	05 00 80 d0 00       	add    $0xd08000,%eax
f01145d2:	c1 e8 0c             	shr    $0xc,%eax
f01145d5:	89 c2                	mov    %eax,%edx
f01145d7:	4a                   	dec    %edx
f01145d8:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f01145de:	c1 e0 02             	shl    $0x2,%eax
f01145e1:	8d 50 03             	lea    0x3(%eax),%edx
f01145e4:	b8 10 00 00 00       	mov    $0x10,%eax
f01145e9:	48                   	dec    %eax
f01145ea:	01 d0                	add    %edx,%eax
f01145ec:	bf 10 00 00 00       	mov    $0x10,%edi
f01145f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01145f6:	f7 f7                	div    %edi
f01145f8:	6b c0 10             	imul   $0x10,%eax,%eax
f01145fb:	29 c4                	sub    %eax,%esp
f01145fd:	89 e0                	mov    %esp,%eax
f01145ff:	83 c0 03             	add    $0x3,%eax
f0114602:	c1 e8 02             	shr    $0x2,%eax
f0114605:	c1 e0 02             	shl    $0x2,%eax
f0114608:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE ;
f011460e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0114615:	10 00 00 
f0114618:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f011461d:	0f b6 d0             	movzbl %al,%edx
f0114620:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0114626:	01 d0                	add    %edx,%eax
f0114628:	48                   	dec    %eax
f0114629:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011462f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114635:	ba 00 00 00 00       	mov    $0x0,%edx
f011463a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0114640:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114646:	29 d0                	sub    %edx,%eax
f0114648:	89 c1                	mov    %eax,%ecx
f011464a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0114651:	10 00 00 
f0114654:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114659:	0f b6 c0             	movzbl %al,%eax
f011465c:	c1 e0 04             	shl    $0x4,%eax
f011465f:	89 c2                	mov    %eax,%edx
f0114661:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0114667:	01 d0                	add    %edx,%eax
f0114669:	48                   	dec    %eax
f011466a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0114670:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114676:	ba 00 00 00 00       	mov    $0x0,%edx
f011467b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0114681:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114687:	29 d0                	sub    %edx,%eax
f0114689:	01 c8                	add    %ecx,%eax
f011468b:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114690:	c1 e8 0c             	shr    $0xc,%eax
f0114693:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0114699:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01146a0:	10 00 00 
f01146a3:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01146a8:	0f b6 d0             	movzbl %al,%edx
f01146ab:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01146b1:	01 d0                	add    %edx,%eax
f01146b3:	48                   	dec    %eax
f01146b4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01146ba:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01146c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01146c5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01146cb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01146d1:	29 d0                	sub    %edx,%eax
f01146d3:	89 c1                	mov    %eax,%ecx
f01146d5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01146dc:	10 00 00 
f01146df:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01146e4:	0f b6 c0             	movzbl %al,%eax
f01146e7:	c1 e0 04             	shl    $0x4,%eax
f01146ea:	89 c2                	mov    %eax,%edx
f01146ec:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01146f2:	01 d0                	add    %edx,%eax
f01146f4:	48                   	dec    %eax
f01146f5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01146fb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114701:	ba 00 00 00 00       	mov    $0x0,%edx
f0114706:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011470c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114712:	29 d0                	sub    %edx,%eax
f0114714:	01 c8                	add    %ecx,%eax
f0114716:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011471b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0114721:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0114728:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f011472f:	e9 d8 00 00 00       	jmp    f011480c <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0114734:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0114737:	a1 d0 b6 54 f0       	mov    0xf054b6d0,%eax
f011473c:	83 ec 04             	sub    $0x4,%esp
f011473f:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f0114745:	51                   	push   %ecx
f0114746:	52                   	push   %edx
f0114747:	50                   	push   %eax
f0114748:	e8 c8 f3 fe ff       	call   f0103b15 <get_page_table>
f011474d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0114750:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0114756:	85 c0                	test   %eax,%eax
f0114758:	75 17                	jne    f0114771 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011475a:	83 ec 04             	sub    $0x4,%esp
f011475d:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0114762:	68 e7 06 00 00       	push   $0x6e7
f0114767:	68 ba ac 11 f0       	push   $0xf011acba
f011476c:	e8 05 ba fe ff       	call   f0100176 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0114771:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0114778:	eb 73                	jmp    f01147ed <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f011477a:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0114780:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114783:	c1 e2 02             	shl    $0x2,%edx
f0114786:	01 d0                	add    %edx,%eax
f0114788:	8b 00                	mov    (%eax),%eax
f011478a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011478f:	89 c1                	mov    %eax,%ecx
f0114791:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114797:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011479a:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011479d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01147a6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01147a9:	83 ec 0c             	sub    $0xc,%esp
f01147ac:	50                   	push   %eax
f01147ad:	e8 e5 73 ff ff       	call   f010bb97 <kheap_virtual_address>
f01147b2:	83 c4 10             	add    $0x10,%esp
f01147b5:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f01147bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01147be:	c1 e0 0c             	shl    $0xc,%eax
f01147c1:	89 c2                	mov    %eax,%edx
f01147c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01147c6:	01 d0                	add    %edx,%eax
f01147c8:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01147ce:	74 17                	je     f01147e7 <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f01147d0:	83 ec 04             	sub    $0x4,%esp
f01147d3:	68 ac b5 11 f0       	push   $0xf011b5ac
f01147d8:	68 f1 06 00 00       	push   $0x6f1
f01147dd:	68 ba ac 11 f0       	push   $0xf011acba
f01147e2:	e8 8f b9 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f01147e7:	ff 45 dc             	incl   -0x24(%ebp)
f01147ea:	ff 45 e0             	incl   -0x20(%ebp)
f01147ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01147f0:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f01147f6:	7d 0d                	jge    f0114805 <test_kheap_virt_addr+0xb85>
f01147f8:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01147ff:	0f 8e 75 ff ff ff    	jle    f011477a <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0114805:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f011480c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011480f:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0114815:	0f 82 19 ff ff ff    	jb     f0114734 <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f011481b:	83 ec 0c             	sub    $0xc,%esp
f011481e:	68 c8 b5 11 f0       	push   $0xf011b5c8
f0114823:	e8 6d 25 ff ff       	call   f0106d95 <cprintf>
f0114828:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011482b:	e8 f9 59 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114830:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0114836:	e8 b1 6e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011483b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0114841:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0114847:	83 ec 0c             	sub    $0xc,%esp
f011484a:	50                   	push   %eax
f011484b:	e8 b8 72 ff ff       	call   f010bb08 <kfree>
f0114850:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114853:	e8 94 6e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114858:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011485e:	74 17                	je     f0114877 <test_kheap_virt_addr+0xbf7>
f0114860:	83 ec 04             	sub    $0x4,%esp
f0114863:	68 cc ac 11 f0       	push   $0xf011accc
f0114868:	68 fe 06 00 00       	push   $0x6fe
f011486d:	68 ba ac 11 f0       	push   $0xf011acba
f0114872:	e8 ff b8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0114877:	e8 ad 59 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011487c:	89 c2                	mov    %eax,%edx
f011487e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0114884:	29 c2                	sub    %eax,%edx
f0114886:	89 d0                	mov    %edx,%eax
f0114888:	3d 00 02 00 00       	cmp    $0x200,%eax
f011488d:	74 17                	je     f01148a6 <test_kheap_virt_addr+0xc26>
f011488f:	83 ec 04             	sub    $0x4,%esp
f0114892:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0114897:	68 ff 06 00 00       	push   $0x6ff
f011489c:	68 ba ac 11 f0       	push   $0xf011acba
f01148a1:	e8 d0 b8 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01148a6:	e8 7e 59 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01148ab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01148b1:	e8 36 6e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01148b6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01148bc:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01148c2:	83 ec 0c             	sub    $0xc,%esp
f01148c5:	50                   	push   %eax
f01148c6:	e8 3d 72 ff ff       	call   f010bb08 <kfree>
f01148cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01148ce:	e8 19 6e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01148d3:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01148d9:	74 17                	je     f01148f2 <test_kheap_virt_addr+0xc72>
f01148db:	83 ec 04             	sub    $0x4,%esp
f01148de:	68 cc ac 11 f0       	push   $0xf011accc
f01148e3:	68 05 07 00 00       	push   $0x705
f01148e8:	68 ba ac 11 f0       	push   $0xf011acba
f01148ed:	e8 84 b8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01148f2:	e8 32 59 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01148f7:	89 c2                	mov    %eax,%edx
f01148f9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01148ff:	29 c2                	sub    %eax,%edx
f0114901:	89 d0                	mov    %edx,%eax
f0114903:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114908:	74 17                	je     f0114921 <test_kheap_virt_addr+0xca1>
f011490a:	83 ec 04             	sub    $0x4,%esp
f011490d:	68 a0 b2 11 f0       	push   $0xf011b2a0
f0114912:	68 06 07 00 00       	push   $0x706
f0114917:	68 ba ac 11 f0       	push   $0xf011acba
f011491c:	e8 55 b8 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114921:	e8 03 59 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114926:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011492c:	e8 bb 6d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114931:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0114937:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011493d:	83 ec 0c             	sub    $0xc,%esp
f0114940:	50                   	push   %eax
f0114941:	e8 c2 71 ff ff       	call   f010bb08 <kfree>
f0114946:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114949:	e8 9e 6d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011494e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0114954:	74 17                	je     f011496d <test_kheap_virt_addr+0xced>
f0114956:	83 ec 04             	sub    $0x4,%esp
f0114959:	68 cc ac 11 f0       	push   $0xf011accc
f011495e:	68 0c 07 00 00       	push   $0x70c
f0114963:	68 ba ac 11 f0       	push   $0xf011acba
f0114968:	e8 09 b8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011496d:	e8 b7 58 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114972:	89 c2                	mov    %eax,%edx
f0114974:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011497a:	29 c2                	sub    %eax,%edx
f011497c:	89 d0                	mov    %edx,%eax
f011497e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114983:	74 17                	je     f011499c <test_kheap_virt_addr+0xd1c>
f0114985:	83 ec 04             	sub    $0x4,%esp
f0114988:	68 a0 b2 11 f0       	push   $0xf011b2a0
f011498d:	68 0d 07 00 00       	push   $0x70d
f0114992:	68 ba ac 11 f0       	push   $0xf011acba
f0114997:	e8 da b7 fe ff       	call   f0100176 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011499c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01149a3:	10 00 00 
f01149a6:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01149ab:	0f b6 d0             	movzbl %al,%edx
f01149ae:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01149b4:	01 d0                	add    %edx,%eax
f01149b6:	48                   	dec    %eax
f01149b7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01149bd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01149c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01149c8:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01149ce:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01149d4:	29 d0                	sub    %edx,%eax
f01149d6:	89 c1                	mov    %eax,%ecx
f01149d8:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01149df:	10 00 00 
f01149e2:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01149e7:	0f b6 c0             	movzbl %al,%eax
f01149ea:	c1 e0 04             	shl    $0x4,%eax
f01149ed:	89 c2                	mov    %eax,%edx
f01149ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01149f5:	01 d0                	add    %edx,%eax
f01149f7:	48                   	dec    %eax
f01149f8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01149fe:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114a04:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a09:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0114a0f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114a15:	29 d0                	sub    %edx,%eax
f0114a17:	01 c8                	add    %ecx,%eax
f0114a19:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114a1e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0114a24:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f0114a2b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0114a32:	10 00 00 
f0114a35:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114a3a:	0f b6 d0             	movzbl %al,%edx
f0114a3d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0114a43:	01 d0                	add    %edx,%eax
f0114a45:	48                   	dec    %eax
f0114a46:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0114a4c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a57:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0114a5d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114a63:	29 d0                	sub    %edx,%eax
f0114a65:	89 c1                	mov    %eax,%ecx
f0114a67:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0114a6e:	10 00 00 
f0114a71:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114a76:	0f b6 c0             	movzbl %al,%eax
f0114a79:	c1 e0 04             	shl    $0x4,%eax
f0114a7c:	89 c2                	mov    %eax,%edx
f0114a7e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0114a84:	01 d0                	add    %edx,%eax
f0114a86:	48                   	dec    %eax
f0114a87:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0114a8d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a98:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0114a9e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114aa4:	29 d0                	sub    %edx,%eax
f0114aa6:	01 c8                	add    %ecx,%eax
f0114aa8:	c1 e8 0c             	shr    $0xc,%eax
f0114aab:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0114ab1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114ab7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114aba:	eb 41                	jmp    f0114afd <test_kheap_virt_addr+0xe7d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114abc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ac2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0114ac5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114ac8:	83 ec 0c             	sub    $0xc,%esp
f0114acb:	50                   	push   %eax
f0114acc:	e8 c6 70 ff ff       	call   f010bb97 <kheap_virtual_address>
f0114ad1:	83 c4 10             	add    $0x10,%esp
f0114ad4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0114ada:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0114ae1:	74 17                	je     f0114afa <test_kheap_virt_addr+0xe7a>
			{
				panic("Wrong kheap_virtual_address");
f0114ae3:	83 ec 04             	sub    $0x4,%esp
f0114ae6:	68 ac b5 11 f0       	push   $0xf011b5ac
f0114aeb:	68 1e 07 00 00       	push   $0x71e
f0114af0:	68 ba ac 11 f0       	push   $0xf011acba
f0114af5:	e8 7c b6 fe ff       	call   f0100176 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0114afa:	ff 45 d8             	incl   -0x28(%ebp)
f0114afd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114b03:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0114b09:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114b0c:	39 c2                	cmp    %eax,%edx
f0114b0e:	77 ac                	ja     f0114abc <test_kheap_virt_addr+0xe3c>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0114b10:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114b16:	05 00 04 00 00       	add    $0x400,%eax
f0114b1b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114b1e:	eb 4b                	jmp    f0114b6b <test_kheap_virt_addr+0xeeb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114b20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b26:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0114b29:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114b2c:	83 ec 0c             	sub    $0xc,%esp
f0114b2f:	50                   	push   %eax
f0114b30:	e8 62 70 ff ff       	call   f010bb97 <kheap_virtual_address>
f0114b35:	83 c4 10             	add    $0x10,%esp
f0114b38:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0114b3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114b41:	c1 e0 0c             	shl    $0xc,%eax
f0114b44:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0114b49:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0114b4f:	74 17                	je     f0114b68 <test_kheap_virt_addr+0xee8>
			{
				panic("Wrong kheap_virtual_address");
f0114b51:	83 ec 04             	sub    $0x4,%esp
f0114b54:	68 ac b5 11 f0       	push   $0xf011b5ac
f0114b59:	68 28 07 00 00       	push   $0x728
f0114b5e:	68 ba ac 11 f0       	push   $0xf011acba
f0114b63:	e8 0e b6 fe ff       	call   f0100176 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0114b68:	ff 45 d8             	incl   -0x28(%ebp)
f0114b6b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114b71:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0114b77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114b7a:	39 c2                	cmp    %eax,%edx
f0114b7c:	77 a2                	ja     f0114b20 <test_kheap_virt_addr+0xea0>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0114b7e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114b84:	05 04 07 00 00       	add    $0x704,%eax
f0114b89:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114b8c:	eb 41                	jmp    f0114bcf <test_kheap_virt_addr+0xf4f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114b8e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b94:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0114b97:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114b9a:	83 ec 0c             	sub    $0xc,%esp
f0114b9d:	50                   	push   %eax
f0114b9e:	e8 f4 6f ff ff       	call   f010bb97 <kheap_virtual_address>
f0114ba3:	83 c4 10             	add    $0x10,%esp
f0114ba6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0114bac:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0114bb3:	74 17                	je     f0114bcc <test_kheap_virt_addr+0xf4c>
			{
				panic("Wrong kheap_virtual_address");
f0114bb5:	83 ec 04             	sub    $0x4,%esp
f0114bb8:	68 ac b5 11 f0       	push   $0xf011b5ac
f0114bbd:	68 31 07 00 00       	push   $0x731
f0114bc2:	68 ba ac 11 f0       	push   $0xf011acba
f0114bc7:	e8 aa b5 fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0114bcc:	ff 45 d8             	incl   -0x28(%ebp)
f0114bcf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114bd5:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0114bdb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114bde:	39 c2                	cmp    %eax,%edx
f0114be0:	77 ac                	ja     f0114b8e <test_kheap_virt_addr+0xf0e>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0114be2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114be8:	05 04 0d 00 00       	add    $0xd04,%eax
f0114bed:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114bf0:	eb 4b                	jmp    f0114c3d <test_kheap_virt_addr+0xfbd>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0114bf2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114bf8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0114bfb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0114bfe:	83 ec 0c             	sub    $0xc,%esp
f0114c01:	50                   	push   %eax
f0114c02:	e8 90 6f ff ff       	call   f010bb97 <kheap_virtual_address>
f0114c07:	83 c4 10             	add    $0x10,%esp
f0114c0a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0114c10:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114c13:	c1 e0 0c             	shl    $0xc,%eax
f0114c16:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0114c1b:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0114c21:	74 17                	je     f0114c3a <test_kheap_virt_addr+0xfba>
			{
				panic("Wrong kheap_virtual_address");
f0114c23:	83 ec 04             	sub    $0x4,%esp
f0114c26:	68 ac b5 11 f0       	push   $0xf011b5ac
f0114c2b:	68 3a 07 00 00       	push   $0x73a
f0114c30:	68 ba ac 11 f0       	push   $0xf011acba
f0114c35:	e8 3c b5 fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0114c3a:	ff 45 d8             	incl   -0x28(%ebp)
f0114c3d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114c43:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0114c49:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114c4c:	39 c2                	cmp    %eax,%edx
f0114c4e:	77 a2                	ja     f0114bf2 <test_kheap_virt_addr+0xf72>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0114c50:	83 ec 0c             	sub    $0xc,%esp
f0114c53:	68 3d ae 11 f0       	push   $0xf011ae3d
f0114c58:	e8 38 21 ff ff       	call   f0106d95 <cprintf>
f0114c5d:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0114c60:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0114c67:	eb 54                	jmp    f0114cbd <test_kheap_virt_addr+0x103d>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0114c69:	83 ec 0c             	sub    $0xc,%esp
f0114c6c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114c6f:	e8 23 6f ff ff       	call   f010bb97 <kheap_virtual_address>
f0114c74:	83 c4 10             	add    $0x10,%esp
f0114c77:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0114c7d:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0114c84:	74 30                	je     f0114cb6 <test_kheap_virt_addr+0x1036>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0114c86:	83 ec 04             	sub    $0x4,%esp
f0114c89:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0114c8f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114c92:	68 f9 b5 11 f0       	push   $0xf011b5f9
f0114c97:	e8 f9 20 ff ff       	call   f0106d95 <cprintf>
f0114c9c:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0114c9f:	83 ec 04             	sub    $0x4,%esp
f0114ca2:	68 ac b5 11 f0       	push   $0xf011b5ac
f0114ca7:	68 4a 07 00 00       	push   $0x74a
f0114cac:	68 ba ac 11 f0       	push   $0xf011acba
f0114cb1:	e8 c0 b4 fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0114cb6:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0114cbd:	b8 08 b7 d4 00       	mov    $0xd4b708,%eax
f0114cc2:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0114cc5:	72 a2                	jb     f0114c69 <test_kheap_virt_addr+0xfe9>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0114cc7:	83 ec 0c             	sub    $0xc,%esp
f0114cca:	68 96 ae 11 f0       	push   $0xf011ae96
f0114ccf:	e8 c1 20 ff ff       	call   f0106d95 <cprintf>
f0114cd4:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0114cd7:	83 ec 0c             	sub    $0xc,%esp
f0114cda:	68 18 b6 11 f0       	push   $0xf011b618
f0114cdf:	e8 b1 20 ff ff       	call   f0106d95 <cprintf>
f0114ce4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0114ce7:	b8 01 00 00 00       	mov    $0x1,%eax
f0114cec:	89 f4                	mov    %esi,%esp

}
f0114cee:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114cf1:	5b                   	pop    %ebx
f0114cf2:	5e                   	pop    %esi
f0114cf3:	5f                   	pop    %edi
f0114cf4:	5d                   	pop    %ebp
f0114cf5:	c3                   	ret    

f0114cf6 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0114cf6:	55                   	push   %ebp
f0114cf7:	89 e5                	mov    %esp,%ebp
f0114cf9:	57                   	push   %edi
f0114cfa:	56                   	push   %esi
f0114cfb:	53                   	push   %ebx
f0114cfc:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0114d02:	a0 2c da 14 f0       	mov    0xf014da2c,%al
f0114d07:	84 c0                	test   %al,%al
f0114d09:	74 56                	je     f0114d61 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0114d0b:	c6 05 2c da 14 f0 00 	movb   $0x0,0xf014da2c
		initFreeFrames = sys_calculate_free_frames() ;
f0114d12:	e8 12 55 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114d17:	a3 04 b7 d4 f0       	mov    %eax,0xf0d4b704
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0114d1c:	e8 cb 69 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114d21:	a3 00 b7 d4 f0       	mov    %eax,0xf0d4b700
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0114d26:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0114d2c:	bb 72 b7 11 f0       	mov    $0xf011b772,%ebx
f0114d31:	ba 11 00 00 00       	mov    $0x11,%edx
f0114d36:	89 c7                	mov    %eax,%edi
f0114d38:	89 de                	mov    %ebx,%esi
f0114d3a:	89 d1                	mov    %edx,%ecx
f0114d3c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114d3e:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114d44:	b9 53 00 00 00       	mov    $0x53,%ecx
f0114d49:	b0 00                	mov    $0x0,%al
f0114d4b:	89 d7                	mov    %edx,%edi
f0114d4d:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0114d4f:	83 ec 0c             	sub    $0xc,%esp
f0114d52:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0114d58:	50                   	push   %eax
f0114d59:	e8 eb ca fe ff       	call   f0101849 <execute_command>
f0114d5e:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0114d61:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0114d68:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0114d6f:	a1 18 d2 52 f0       	mov    0xf052d218,%eax
f0114d74:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0114d77:	eb 2d                	jmp    f0114da6 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0114d79:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114d7c:	05 f4 02 00 00       	add    $0x2f4,%eax
f0114d81:	83 ec 08             	sub    $0x8,%esp
f0114d84:	68 5f b6 11 f0       	push   $0xf011b65f
f0114d89:	50                   	push   %eax
f0114d8a:	e8 52 22 00 00       	call   f0116fe1 <strcmp>
f0114d8f:	83 c4 10             	add    $0x10,%esp
f0114d92:	85 c0                	test   %eax,%eax
f0114d94:	75 08                	jne    f0114d9e <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0114d96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114d99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0114d9c:	eb 2f                	jmp    f0114dcd <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0114d9e:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0114da3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0114da6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114daa:	74 08                	je     f0114db4 <test_three_creation_functions+0xbe>
f0114dac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114daf:	8b 40 44             	mov    0x44(%eax),%eax
f0114db2:	eb 05                	jmp    f0114db9 <test_three_creation_functions+0xc3>
f0114db4:	b8 00 00 00 00       	mov    $0x0,%eax
f0114db9:	a3 20 d2 52 f0       	mov    %eax,0xf052d220
f0114dbe:	a1 20 d2 52 f0       	mov    0xf052d220,%eax
f0114dc3:	85 c0                	test   %eax,%eax
f0114dc5:	75 b2                	jne    f0114d79 <test_three_creation_functions+0x83>
f0114dc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114dcb:	75 ac                	jne    f0114d79 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0114dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114dd0:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f0114dd6:	85 c0                	test   %eax,%eax
f0114dd8:	74 17                	je     f0114df1 <test_three_creation_functions+0xfb>
			panic("Page fault occur while not expected. Review the three creation functions");
f0114dda:	83 ec 04             	sub    $0x4,%esp
f0114ddd:	68 68 b6 11 f0       	push   $0xf011b668
f0114de2:	68 74 07 00 00       	push   $0x774
f0114de7:	68 ba ac 11 f0       	push   $0xf011acba
f0114dec:	e8 85 b3 fe ff       	call   f0100176 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0114df1:	83 ec 0c             	sub    $0xc,%esp
f0114df4:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114df7:	e8 e7 f4 fe ff       	call   f01042e3 <env_page_ws_get_size>
f0114dfc:	83 c4 10             	add    $0x10,%esp
f0114dff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0114e02:	e8 22 54 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0114e07:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0114e0a:	e8 dd 68 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0114e0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e12:	a1 00 b7 d4 f0       	mov    0xf0d4b700,%eax
f0114e17:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0114e1a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0114e1d:	74 17                	je     f0114e36 <test_three_creation_functions+0x140>
f0114e1f:	83 ec 04             	sub    $0x4,%esp
f0114e22:	68 cc ac 11 f0       	push   $0xf011accc
f0114e27:	68 7a 07 00 00       	push   $0x77a
f0114e2c:	68 ba ac 11 f0       	push   $0xf011acba
f0114e31:	e8 40 b3 fe ff       	call   f0100176 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114e36:	a1 04 b7 d4 f0       	mov    0xf0d4b704,%eax
f0114e3b:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0114e3e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114e41:	83 c2 15             	add    $0x15,%edx
f0114e44:	39 d0                	cmp    %edx,%eax
f0114e46:	74 17                	je     f0114e5f <test_three_creation_functions+0x169>
f0114e48:	83 ec 04             	sub    $0x4,%esp
f0114e4b:	68 34 ad 11 f0       	push   $0xf011ad34
f0114e50:	68 7c 07 00 00       	push   $0x77c
f0114e55:	68 ba ac 11 f0       	push   $0xf011acba
f0114e5a:	e8 17 b3 fe ff       	call   f0100176 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0114e5f:	83 ec 0c             	sub    $0xc,%esp
f0114e62:	68 00 10 00 00       	push   $0x1000
f0114e67:	e8 83 6b ff ff       	call   f010b9ef <kmalloc>
f0114e6c:	83 c4 10             	add    $0x10,%esp
f0114e6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0114e72:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0114e79:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114e7e:	0f b6 d0             	movzbl %al,%edx
f0114e81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e84:	01 d0                	add    %edx,%eax
f0114e86:	48                   	dec    %eax
f0114e87:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114e8a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0114e92:	f7 75 cc             	divl   -0x34(%ebp)
f0114e95:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e98:	29 d0                	sub    %edx,%eax
f0114e9a:	89 c1                	mov    %eax,%ecx
f0114e9c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0114ea3:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114ea8:	0f b6 c0             	movzbl %al,%eax
f0114eab:	c1 e0 04             	shl    $0x4,%eax
f0114eae:	89 c2                	mov    %eax,%edx
f0114eb0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114eb3:	01 d0                	add    %edx,%eax
f0114eb5:	48                   	dec    %eax
f0114eb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114eb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ec1:	f7 75 c4             	divl   -0x3c(%ebp)
f0114ec4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ec7:	29 d0                	sub    %edx,%eax
f0114ec9:	01 c8                	add    %ecx,%eax
f0114ecb:	8d 90 00 50 01 f6    	lea    -0x9feb000(%eax),%edx
f0114ed1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ed4:	39 c2                	cmp    %eax,%edx
f0114ed6:	74 17                	je     f0114eef <test_three_creation_functions+0x1f9>
f0114ed8:	83 ec 04             	sub    $0x4,%esp
f0114edb:	68 b4 b6 11 f0       	push   $0xf011b6b4
f0114ee0:	68 80 07 00 00       	push   $0x780
f0114ee5:	68 ba ac 11 f0       	push   $0xf011acba
f0114eea:	e8 87 b2 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nCongratulations!! the 3 creation functions test has completed successfully.\n");
f0114eef:	83 ec 0c             	sub    $0xc,%esp
f0114ef2:	68 24 b7 11 f0       	push   $0xf011b724
f0114ef7:	e8 99 1e ff ff       	call   f0106d95 <cprintf>
f0114efc:	83 c4 10             	add    $0x10,%esp

	return 1;
f0114eff:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0114f04:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114f07:	5b                   	pop    %ebx
f0114f08:	5e                   	pop    %esi
f0114f09:	5f                   	pop    %edi
f0114f0a:	5d                   	pop    %ebp
f0114f0b:	c3                   	ret    

f0114f0c <schenv>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void schenv()
{
f0114f0c:	55                   	push   %ebp
f0114f0d:	89 e5                	mov    %esp,%ebp
f0114f0f:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0114f12:	c6 05 70 d2 52 f0 00 	movb   $0x0,0xf052d270
	__ne = NULL;
f0114f19:	c7 05 3c d2 52 f0 00 	movl   $0x0,0xf052d23c
f0114f20:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0114f23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114f2a:	eb 3f                	jmp    f0114f6b <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0114f2c:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0114f31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114f34:	c1 e2 04             	shl    $0x4,%edx
f0114f37:	01 d0                	add    %edx,%eax
f0114f39:	83 ec 0c             	sub    $0xc,%esp
f0114f3c:	50                   	push   %eax
f0114f3d:	e8 c7 39 ff ff       	call   f0108909 <queue_size>
f0114f42:	83 c4 10             	add    $0x10,%esp
f0114f45:	85 c0                	test   %eax,%eax
f0114f47:	74 1f                	je     f0114f68 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0114f49:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f0114f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114f51:	c1 e2 04             	shl    $0x4,%edx
f0114f54:	01 d0                	add    %edx,%eax
f0114f56:	8b 40 04             	mov    0x4(%eax),%eax
f0114f59:	a3 3c d2 52 f0       	mov    %eax,0xf052d23c
			__nl = i;
f0114f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114f61:	a2 70 d2 52 f0       	mov    %al,0xf052d270
			break;
f0114f66:	eb 10                	jmp    f0114f78 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0114f68:	ff 45 f4             	incl   -0xc(%ebp)
f0114f6b:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f0114f70:	0f b6 c0             	movzbl %al,%eax
f0114f73:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114f76:	7f b4                	jg     f0114f2c <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0114f78:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0114f7d:	85 c0                	test   %eax,%eax
f0114f7f:	0f 84 86 00 00 00    	je     f011500b <schenv+0xff>
	{
		if (__ne != NULL)
f0114f85:	a1 3c d2 52 f0       	mov    0xf052d23c,%eax
f0114f8a:	85 c0                	test   %eax,%eax
f0114f8c:	74 4b                	je     f0114fd9 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0114f8e:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114f93:	0f b6 c0             	movzbl %al,%eax
f0114f96:	8d 50 01             	lea    0x1(%eax),%edx
f0114f99:	a0 70 d2 52 f0       	mov    0xf052d270,%al
f0114f9e:	0f b6 c0             	movzbl %al,%eax
f0114fa1:	39 c2                	cmp    %eax,%edx
f0114fa3:	7d 66                	jge    f011500b <schenv+0xff>
			{
				__ne = curenv;
f0114fa5:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0114faa:	a3 3c d2 52 f0       	mov    %eax,0xf052d23c
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0114faf:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114fb4:	0f b6 c0             	movzbl %al,%eax
f0114fb7:	8a 15 60 d2 52 f0    	mov    0xf052d260,%dl
f0114fbd:	0f b6 d2             	movzbl %dl,%edx
f0114fc0:	4a                   	dec    %edx
f0114fc1:	39 d0                	cmp    %edx,%eax
f0114fc3:	7d 08                	jge    f0114fcd <schenv+0xc1>
f0114fc5:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114fca:	40                   	inc    %eax
f0114fcb:	eb 05                	jmp    f0114fd2 <schenv+0xc6>
f0114fcd:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114fd2:	a2 70 d2 52 f0       	mov    %al,0xf052d270
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0114fd7:	eb 32                	jmp    f011500b <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0114fd9:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f0114fde:	a3 3c d2 52 f0       	mov    %eax,0xf052d23c
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0114fe3:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114fe8:	0f b6 c0             	movzbl %al,%eax
f0114feb:	8a 15 60 d2 52 f0    	mov    0xf052d260,%dl
f0114ff1:	0f b6 d2             	movzbl %dl,%edx
f0114ff4:	4a                   	dec    %edx
f0114ff5:	39 d0                	cmp    %edx,%eax
f0114ff7:	7d 08                	jge    f0115001 <schenv+0xf5>
f0114ff9:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0114ffe:	40                   	inc    %eax
f0114fff:	eb 05                	jmp    f0115006 <schenv+0xfa>
f0115001:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0115006:	a2 70 d2 52 f0       	mov    %al,0xf052d270
		}
	}
}
f011500b:	90                   	nop
f011500c:	c9                   	leave  
f011500d:	c3                   	ret    

f011500e <chksch>:

void chksch(uint8 onoff)
{
f011500e:	55                   	push   %ebp
f011500f:	89 e5                	mov    %esp,%ebp
f0115011:	83 ec 04             	sub    $0x4,%esp
f0115014:	8b 45 08             	mov    0x8(%ebp),%eax
f0115017:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f011501a:	c7 05 6c d2 52 f0 00 	movl   $0x0,0xf052d26c
f0115021:	00 00 00 
	__ne = NULL;
f0115024:	c7 05 3c d2 52 f0 00 	movl   $0x0,0xf052d23c
f011502b:	00 00 00 
	__pl = 0 ;
f011502e:	c6 05 10 d2 52 f0 00 	movb   $0x0,0xf052d210
	__nl = 0 ;
f0115035:	c6 05 70 d2 52 f0 00 	movb   $0x0,0xf052d270
	__chkstatus = onoff;
f011503c:	8a 45 fc             	mov    -0x4(%ebp),%al
f011503f:	a2 38 d2 52 f0       	mov    %al,0xf052d238
}
f0115044:	90                   	nop
f0115045:	c9                   	leave  
f0115046:	c3                   	ret    

f0115047 <chk1>:
void chk1()
{
f0115047:	55                   	push   %ebp
f0115048:	89 e5                	mov    %esp,%ebp
f011504a:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f011504d:	a0 38 d2 52 f0       	mov    0xf052d238,%al
f0115052:	84 c0                	test   %al,%al
f0115054:	74 2b                	je     f0115081 <chk1+0x3a>
		return ;
	__pe = curenv;
f0115056:	a1 50 c9 52 f0       	mov    0xf052c950,%eax
f011505b:	a3 6c d2 52 f0       	mov    %eax,0xf052d26c
	__pl = __nl ;
f0115060:	a0 70 d2 52 f0       	mov    0xf052d270,%al
f0115065:	a2 10 d2 52 f0       	mov    %al,0xf052d210
	if (__pe == NULL)
f011506a:	a1 6c d2 52 f0       	mov    0xf052d26c,%eax
f011506f:	85 c0                	test   %eax,%eax
f0115071:	75 07                	jne    f011507a <chk1+0x33>
	{
		__pl = 0;
f0115073:	c6 05 10 d2 52 f0 00 	movb   $0x0,0xf052d210
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f011507a:	e8 8d fe ff ff       	call   f0114f0c <schenv>
f011507f:	eb 01                	jmp    f0115082 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0115081:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0115082:	c9                   	leave  
f0115083:	c3                   	ret    

f0115084 <chk2>:
void chk2(struct Env* __se)
{
f0115084:	55                   	push   %ebp
f0115085:	89 e5                	mov    %esp,%ebp
f0115087:	53                   	push   %ebx
f0115088:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f011508b:	a0 38 d2 52 f0       	mov    0xf052d238,%al
f0115090:	84 c0                	test   %al,%al
f0115092:	0f 84 19 02 00 00    	je     f01152b1 <chk2+0x22d>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0115098:	a1 3c d2 52 f0       	mov    0xf052d23c,%eax
f011509d:	39 45 08             	cmp    %eax,0x8(%ebp)
f01150a0:	74 16                	je     f01150b8 <chk2+0x34>
f01150a2:	68 d8 b7 11 f0       	push   $0xf011b7d8
f01150a7:	68 e5 b7 11 f0       	push   $0xf011b7e5
f01150ac:	6a 4b                	push   $0x4b
f01150ae:	68 fa b7 11 f0       	push   $0xf011b7fa
f01150b3:	e8 2d b1 fe ff       	call   f01001e5 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01150b8:	a1 3c d2 52 f0       	mov    0xf052d23c,%eax
f01150bd:	85 c0                	test   %eax,%eax
f01150bf:	0f 84 04 01 00 00    	je     f01151c9 <chk2+0x145>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01150c5:	8b 15 30 d2 52 f0    	mov    0xf052d230,%edx
f01150cb:	a0 70 d2 52 f0       	mov    0xf052d270,%al
f01150d0:	0f b6 c0             	movzbl %al,%eax
f01150d3:	01 d0                	add    %edx,%eax
f01150d5:	8a 00                	mov    (%eax),%al
f01150d7:	0f b6 d8             	movzbl %al,%ebx
f01150da:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01150df:	99                   	cltd   
f01150e0:	f7 fb                	idiv   %ebx
f01150e2:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01150e8:	8b 15 30 d2 52 f0    	mov    0xf052d230,%edx
f01150ee:	a0 70 d2 52 f0       	mov    0xf052d270,%al
f01150f3:	0f b6 c0             	movzbl %al,%eax
f01150f6:	01 d0                	add    %edx,%eax
f01150f8:	8a 00                	mov    (%eax),%al
f01150fa:	0f b6 d8             	movzbl %al,%ebx
f01150fd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0115102:	99                   	cltd   
f0115103:	f7 fb                	idiv   %ebx
f0115105:	89 c3                	mov    %eax,%ebx
f0115107:	89 c8                	mov    %ecx,%eax
f0115109:	99                   	cltd   
f011510a:	f7 fb                	idiv   %ebx
f011510c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0115110:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0115114:	89 d0                	mov    %edx,%eax
f0115116:	c1 e0 02             	shl    $0x2,%eax
f0115119:	01 d0                	add    %edx,%eax
f011511b:	01 c0                	add    %eax,%eax
f011511d:	01 d0                	add    %edx,%eax
f011511f:	c1 e0 02             	shl    $0x2,%eax
f0115122:	01 d0                	add    %edx,%eax
f0115124:	01 c0                	add    %eax,%eax
f0115126:	89 c1                	mov    %eax,%ecx
f0115128:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011512d:	f7 e9                	imul   %ecx
f011512f:	c1 fa 05             	sar    $0x5,%edx
f0115132:	89 c8                	mov    %ecx,%eax
f0115134:	c1 f8 1f             	sar    $0x1f,%eax
f0115137:	29 c2                	sub    %eax,%edx
f0115139:	89 d0                	mov    %edx,%eax
f011513b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0_latch();
f011513f:	e8 fb 19 ff ff       	call   f0106b3f <kclock_read_cnt0_latch>
f0115144:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0115148:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011514c:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0115150:	76 0a                	jbe    f011515c <chk2+0xd8>
f0115152:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0115156:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011515a:	76 16                	jbe    f0115172 <chk2+0xee>
f011515c:	68 0c b8 11 f0       	push   $0xf011b80c
f0115161:	68 e5 b7 11 f0       	push   $0xf011b7e5
f0115166:	6a 54                	push   $0x54
f0115168:	68 fa b7 11 f0       	push   $0xf011b7fa
f011516d:	e8 73 b0 fe ff       	call   f01001e5 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0115172:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115179:	eb 41                	jmp    f01151bc <chk2+0x138>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f011517b:	a1 3c d2 52 f0       	mov    0xf052d23c,%eax
f0115180:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115183:	89 c2                	mov    %eax,%edx
f0115185:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f011518a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011518d:	c1 e1 04             	shl    $0x4,%ecx
f0115190:	01 c8                	add    %ecx,%eax
f0115192:	83 ec 08             	sub    $0x8,%esp
f0115195:	52                   	push   %edx
f0115196:	50                   	push   %eax
f0115197:	e8 e3 38 ff ff       	call   f0108a7f <find_env_in_queue>
f011519c:	83 c4 10             	add    $0x10,%esp
f011519f:	85 c0                	test   %eax,%eax
f01151a1:	74 16                	je     f01151b9 <chk2+0x135>
f01151a3:	68 30 b8 11 f0       	push   $0xf011b830
f01151a8:	68 e5 b7 11 f0       	push   $0xf011b7e5
f01151ad:	6a 58                	push   $0x58
f01151af:	68 fa b7 11 f0       	push   $0xf011b7fa
f01151b4:	e8 2c b0 fe ff       	call   f01001e5 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0_latch();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01151b9:	ff 45 f4             	incl   -0xc(%ebp)
f01151bc:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01151c1:	0f b6 c0             	movzbl %al,%eax
f01151c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01151c7:	7f b2                	jg     f011517b <chk2+0xf7>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01151c9:	a1 6c d2 52 f0       	mov    0xf052d26c,%eax
f01151ce:	85 c0                	test   %eax,%eax
f01151d0:	0f 84 dc 00 00 00    	je     f01152b2 <chk2+0x22e>
f01151d6:	8b 15 6c d2 52 f0    	mov    0xf052d26c,%edx
f01151dc:	a1 3c d2 52 f0       	mov    0xf052d23c,%eax
f01151e1:	39 c2                	cmp    %eax,%edx
f01151e3:	0f 84 c9 00 00 00    	je     f01152b2 <chk2+0x22e>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f01151e9:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f01151ee:	0f b6 c0             	movzbl %al,%eax
f01151f1:	8a 15 60 d2 52 f0    	mov    0xf052d260,%dl
f01151f7:	0f b6 d2             	movzbl %dl,%edx
f01151fa:	4a                   	dec    %edx
f01151fb:	39 d0                	cmp    %edx,%eax
f01151fd:	74 08                	je     f0115207 <chk2+0x183>
f01151ff:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f0115204:	40                   	inc    %eax
f0115205:	eb 05                	jmp    f011520c <chk2+0x188>
f0115207:	a0 10 d2 52 f0       	mov    0xf052d210,%al
f011520c:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f011520f:	a1 6c d2 52 f0       	mov    0xf052d26c,%eax
f0115214:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115217:	89 c2                	mov    %eax,%edx
f0115219:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f011521e:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0115222:	c1 e1 04             	shl    $0x4,%ecx
f0115225:	01 c8                	add    %ecx,%eax
f0115227:	83 ec 08             	sub    $0x8,%esp
f011522a:	52                   	push   %edx
f011522b:	50                   	push   %eax
f011522c:	e8 4e 38 ff ff       	call   f0108a7f <find_env_in_queue>
f0115231:	83 c4 10             	add    $0x10,%esp
f0115234:	85 c0                	test   %eax,%eax
f0115236:	75 16                	jne    f011524e <chk2+0x1ca>
f0115238:	68 70 b8 11 f0       	push   $0xf011b870
f011523d:	68 e5 b7 11 f0       	push   $0xf011b7e5
f0115242:	6a 5e                	push   $0x5e
f0115244:	68 fa b7 11 f0       	push   $0xf011b7fa
f0115249:	e8 97 af fe ff       	call   f01001e5 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f011524e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115255:	eb 4b                	jmp    f01152a2 <chk2+0x21e>
		{
			if (i == __tl) continue;
f0115257:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011525b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011525e:	74 3e                	je     f011529e <chk2+0x21a>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0115260:	a1 6c d2 52 f0       	mov    0xf052d26c,%eax
f0115265:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115268:	89 c2                	mov    %eax,%edx
f011526a:	a1 14 d2 52 f0       	mov    0xf052d214,%eax
f011526f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0115272:	c1 e1 04             	shl    $0x4,%ecx
f0115275:	01 c8                	add    %ecx,%eax
f0115277:	83 ec 08             	sub    $0x8,%esp
f011527a:	52                   	push   %edx
f011527b:	50                   	push   %eax
f011527c:	e8 fe 37 ff ff       	call   f0108a7f <find_env_in_queue>
f0115281:	83 c4 10             	add    $0x10,%esp
f0115284:	85 c0                	test   %eax,%eax
f0115286:	74 17                	je     f011529f <chk2+0x21b>
f0115288:	68 b4 b8 11 f0       	push   $0xf011b8b4
f011528d:	68 e5 b7 11 f0       	push   $0xf011b7e5
f0115292:	6a 62                	push   $0x62
f0115294:	68 fa b7 11 f0       	push   $0xf011b7fa
f0115299:	e8 47 af fe ff       	call   f01001e5 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f011529e:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f011529f:	ff 45 f0             	incl   -0x10(%ebp)
f01152a2:	a0 60 d2 52 f0       	mov    0xf052d260,%al
f01152a7:	0f b6 c0             	movzbl %al,%eax
f01152aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01152ad:	7f a8                	jg     f0115257 <chk2+0x1d3>
f01152af:	eb 01                	jmp    f01152b2 <chk2+0x22e>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01152b1:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01152b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01152b5:	c9                   	leave  
f01152b6:	c3                   	ret    

f01152b7 <set_program_priority>:
#include <kern/priority_manager.h>
#include <inc/assert.h>
#include <kern/helpers.h>
#include <kern/user_environment.h>

void set_program_priority(struct Env* env, int priority) {
f01152b7:	55                   	push   %ebp
f01152b8:	89 e5                	mov    %esp,%ebp
f01152ba:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority�

	panic("This function is not implemented yet\n");
f01152bd:	83 ec 04             	sub    $0x4,%esp
f01152c0:	68 f4 b8 11 f0       	push   $0xf011b8f4
f01152c5:	6a 0a                	push   $0xa
f01152c7:	68 1a b9 11 f0       	push   $0xf011b91a
f01152cc:	e8 a5 ae fe ff       	call   f0100176 <_panic>

f01152d1 <test_priority_normal_and_higher>:
extern int pf_calculate_free_frames() ;
extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01152d1:	55                   	push   %ebp
f01152d2:	89 e5                	mov    %esp,%ebp
f01152d4:	57                   	push   %edi
f01152d5:	56                   	push   %esi
f01152d6:	53                   	push   %ebx
f01152d7:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01152dd:	a0 2d da 14 f0       	mov    0xf014da2d,%al
f01152e2:	84 c0                	test   %al,%al
f01152e4:	0f 84 b7 09 00 00    	je     f0115ca1 <test_priority_normal_and_higher+0x9d0>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01152ea:	c6 05 2d da 14 f0 00 	movb   $0x0,0xf014da2d
		char command[100] = "load fos_add 20";
f01152f1:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01152f7:	bb 90 bb 11 f0       	mov    $0xf011bb90,%ebx
f01152fc:	ba 04 00 00 00       	mov    $0x4,%edx
f0115301:	89 c7                	mov    %eax,%edi
f0115303:	89 de                	mov    %ebx,%esi
f0115305:	89 d1                	mov    %edx,%ecx
f0115307:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115309:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011530f:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115314:	b8 00 00 00 00       	mov    $0x0,%eax
f0115319:	89 d7                	mov    %edx,%edi
f011531b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011531d:	83 ec 0c             	sub    $0xc,%esp
f0115320:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115326:	50                   	push   %eax
f0115327:	e8 1d c5 fe ff       	call   f0101849 <execute_command>
f011532c:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011532f:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115335:	bb f4 bb 11 f0       	mov    $0xf011bbf4,%ebx
f011533a:	ba 0d 00 00 00       	mov    $0xd,%edx
f011533f:	89 c7                	mov    %eax,%edi
f0115341:	89 de                	mov    %ebx,%esi
f0115343:	89 d1                	mov    %edx,%ecx
f0115345:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115347:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011534d:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115352:	b0 00                	mov    $0x0,%al
f0115354:	89 d7                	mov    %edx,%edi
f0115356:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115358:	83 ec 0c             	sub    $0xc,%esp
f011535b:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115361:	50                   	push   %eax
f0115362:	e8 e2 c4 fe ff       	call   f0101849 <execute_command>
f0115367:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011536a:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115370:	bb 58 bc 11 f0       	mov    $0xf011bc58,%ebx
f0115375:	ba 17 00 00 00       	mov    $0x17,%edx
f011537a:	89 c7                	mov    %eax,%edi
f011537c:	89 de                	mov    %ebx,%esi
f011537e:	89 d1                	mov    %edx,%ecx
f0115380:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115382:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115388:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011538d:	b0 00                	mov    $0x0,%al
f011538f:	89 d7                	mov    %edx,%edi
f0115391:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115393:	83 ec 0c             	sub    $0xc,%esp
f0115396:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011539c:	50                   	push   %eax
f011539d:	e8 a7 c4 fe ff       	call   f0101849 <execute_command>
f01153a2:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01153a5:	83 ec 04             	sub    $0x4,%esp
f01153a8:	6a 00                	push   $0x0
f01153aa:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01153ad:	50                   	push   %eax
f01153ae:	68 00 10 00 00       	push   $0x1000
f01153b3:	e8 fa dc fe ff       	call   f01030b2 <envid2env>
f01153b8:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01153bb:	83 ec 04             	sub    $0x4,%esp
f01153be:	6a 00                	push   $0x0
f01153c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01153c3:	50                   	push   %eax
f01153c4:	68 01 10 00 00       	push   $0x1001
f01153c9:	e8 e4 dc fe ff       	call   f01030b2 <envid2env>
f01153ce:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01153d1:	83 ec 04             	sub    $0x4,%esp
f01153d4:	6a 00                	push   $0x0
f01153d6:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01153d9:	50                   	push   %eax
f01153da:	68 02 10 00 00       	push   $0x1002
f01153df:	e8 ce dc fe ff       	call   f01030b2 <envid2env>
f01153e4:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01153e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01153ea:	85 c0                	test   %eax,%eax
f01153ec:	74 0e                	je     f01153fc <test_priority_normal_and_higher+0x12b>
f01153ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01153f1:	85 c0                	test   %eax,%eax
f01153f3:	74 07                	je     f01153fc <test_priority_normal_and_higher+0x12b>
f01153f5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01153f8:	85 c0                	test   %eax,%eax
f01153fa:	75 14                	jne    f0115410 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01153fc:	83 ec 04             	sub    $0x4,%esp
f01153ff:	68 34 b9 11 f0       	push   $0xf011b934
f0115404:	6a 27                	push   $0x27
f0115406:	68 4d b9 11 f0       	push   $0xf011b94d
f011540b:	e8 66 ad fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115410:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115413:	8b 40 74             	mov    0x74(%eax),%eax
f0115416:	83 f8 14             	cmp    $0x14,%eax
f0115419:	75 16                	jne    f0115431 <test_priority_normal_and_higher+0x160>
f011541b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011541e:	8b 40 74             	mov    0x74(%eax),%eax
f0115421:	83 f8 0f             	cmp    $0xf,%eax
f0115424:	75 0b                	jne    f0115431 <test_priority_normal_and_higher+0x160>
f0115426:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115429:	8b 40 74             	mov    0x74(%eax),%eax
f011542c:	83 f8 0a             	cmp    $0xa,%eax
f011542f:	74 14                	je     f0115445 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115431:	83 ec 04             	sub    $0x4,%esp
f0115434:	68 64 b9 11 f0       	push   $0xf011b964
f0115439:	6a 2a                	push   $0x2a
f011543b:	68 4d b9 11 f0       	push   $0xf011b94d
f0115440:	e8 31 ad fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0115445:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011544c:	eb 44                	jmp    f0115492 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011544e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115451:	8b 48 78             	mov    0x78(%eax),%ecx
f0115454:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115457:	89 d0                	mov    %edx,%eax
f0115459:	01 c0                	add    %eax,%eax
f011545b:	01 d0                	add    %edx,%eax
f011545d:	c1 e0 02             	shl    $0x2,%eax
f0115460:	01 c8                	add    %ecx,%eax
f0115462:	8b 10                	mov    (%eax),%edx
f0115464:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115467:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011546e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115471:	8b 48 78             	mov    0x78(%eax),%ecx
f0115474:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115477:	89 d0                	mov    %edx,%eax
f0115479:	01 c0                	add    %eax,%eax
f011547b:	01 d0                	add    %edx,%eax
f011547d:	c1 e0 02             	shl    $0x2,%eax
f0115480:	01 c8                	add    %ecx,%eax
f0115482:	8b 50 08             	mov    0x8(%eax),%edx
f0115485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115488:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011548f:	ff 45 e4             	incl   -0x1c(%ebp)
f0115492:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115496:	7e b6                	jle    f011544e <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115498:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011549f:	eb 44                	jmp    f01154e5 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01154a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154a4:	8b 48 78             	mov    0x78(%eax),%ecx
f01154a7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01154aa:	89 d0                	mov    %edx,%eax
f01154ac:	01 c0                	add    %eax,%eax
f01154ae:	01 d0                	add    %edx,%eax
f01154b0:	c1 e0 02             	shl    $0x2,%eax
f01154b3:	01 c8                	add    %ecx,%eax
f01154b5:	8b 10                	mov    (%eax),%edx
f01154b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01154ba:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01154c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154c4:	8b 48 78             	mov    0x78(%eax),%ecx
f01154c7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01154ca:	89 d0                	mov    %edx,%eax
f01154cc:	01 c0                	add    %eax,%eax
f01154ce:	01 d0                	add    %edx,%eax
f01154d0:	c1 e0 02             	shl    $0x2,%eax
f01154d3:	01 c8                	add    %ecx,%eax
f01154d5:	8b 50 08             	mov    0x8(%eax),%edx
f01154d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01154db:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01154e2:	ff 45 e0             	incl   -0x20(%ebp)
f01154e5:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01154e9:	7e b6                	jle    f01154a1 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01154eb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01154f2:	eb 44                	jmp    f0115538 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01154f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154f7:	8b 48 78             	mov    0x78(%eax),%ecx
f01154fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01154fd:	89 d0                	mov    %edx,%eax
f01154ff:	01 c0                	add    %eax,%eax
f0115501:	01 d0                	add    %edx,%eax
f0115503:	c1 e0 02             	shl    $0x2,%eax
f0115506:	01 c8                	add    %ecx,%eax
f0115508:	8b 10                	mov    (%eax),%edx
f011550a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011550d:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115514:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115517:	8b 48 78             	mov    0x78(%eax),%ecx
f011551a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011551d:	89 d0                	mov    %edx,%eax
f011551f:	01 c0                	add    %eax,%eax
f0115521:	01 d0                	add    %edx,%eax
f0115523:	c1 e0 02             	shl    $0x2,%eax
f0115526:	01 c8                	add    %ecx,%eax
f0115528:	8b 50 08             	mov    0x8(%eax),%edx
f011552b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011552e:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115535:	ff 45 dc             	incl   -0x24(%ebp)
f0115538:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011553c:	7e b6                	jle    f01154f4 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011553e:	e8 e6 4c ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115543:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115546:	e8 a1 61 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011554b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011554e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115551:	83 ec 08             	sub    $0x8,%esp
f0115554:	6a 03                	push   $0x3
f0115556:	50                   	push   %eax
f0115557:	e8 5b fd ff ff       	call   f01152b7 <set_program_priority>
f011555c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011555f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115562:	83 ec 08             	sub    $0x8,%esp
f0115565:	6a 03                	push   $0x3
f0115567:	50                   	push   %eax
f0115568:	e8 4a fd ff ff       	call   f01152b7 <set_program_priority>
f011556d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115570:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115573:	83 ec 08             	sub    $0x8,%esp
f0115576:	6a 03                	push   $0x3
f0115578:	50                   	push   %eax
f0115579:	e8 39 fd ff ff       	call   f01152b7 <set_program_priority>
f011557e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115581:	e8 66 61 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115586:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115589:	74 14                	je     f011559f <test_priority_normal_and_higher+0x2ce>
f011558b:	83 ec 04             	sub    $0x4,%esp
f011558e:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115593:	6a 46                	push   $0x46
f0115595:	68 4d b9 11 f0       	push   $0xf011b94d
f011559a:	e8 d7 ab fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011559f:	e8 85 4c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01155a4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01155a7:	74 14                	je     f01155bd <test_priority_normal_and_higher+0x2ec>
f01155a9:	83 ec 04             	sub    $0x4,%esp
f01155ac:	68 b0 b9 11 f0       	push   $0xf011b9b0
f01155b1:	6a 47                	push   $0x47
f01155b3:	68 4d b9 11 f0       	push   $0xf011b94d
f01155b8:	e8 b9 ab fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01155bd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01155c0:	8b 40 74             	mov    0x74(%eax),%eax
f01155c3:	83 f8 14             	cmp    $0x14,%eax
f01155c6:	75 16                	jne    f01155de <test_priority_normal_and_higher+0x30d>
f01155c8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01155cb:	8b 40 74             	mov    0x74(%eax),%eax
f01155ce:	83 f8 0f             	cmp    $0xf,%eax
f01155d1:	75 0b                	jne    f01155de <test_priority_normal_and_higher+0x30d>
f01155d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01155d6:	8b 40 74             	mov    0x74(%eax),%eax
f01155d9:	83 f8 0a             	cmp    $0xa,%eax
f01155dc:	74 14                	je     f01155f2 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01155de:	83 ec 04             	sub    $0x4,%esp
f01155e1:	68 dc b9 11 f0       	push   $0xf011b9dc
f01155e6:	6a 4a                	push   $0x4a
f01155e8:	68 4d b9 11 f0       	push   $0xf011b94d
f01155ed:	e8 84 ab fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f01155f2:	e8 32 4c ff ff       	call   f010a229 <sys_calculate_free_frames>
f01155f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01155fa:	e8 ed 60 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01155ff:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115602:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115605:	83 ec 08             	sub    $0x8,%esp
f0115608:	6a 04                	push   $0x4
f011560a:	50                   	push   %eax
f011560b:	e8 a7 fc ff ff       	call   f01152b7 <set_program_priority>
f0115610:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115613:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115616:	83 ec 08             	sub    $0x8,%esp
f0115619:	6a 04                	push   $0x4
f011561b:	50                   	push   %eax
f011561c:	e8 96 fc ff ff       	call   f01152b7 <set_program_priority>
f0115621:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115624:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115627:	83 ec 08             	sub    $0x8,%esp
f011562a:	6a 04                	push   $0x4
f011562c:	50                   	push   %eax
f011562d:	e8 85 fc ff ff       	call   f01152b7 <set_program_priority>
f0115632:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115635:	e8 b2 60 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011563a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011563d:	74 14                	je     f0115653 <test_priority_normal_and_higher+0x382>
f011563f:	83 ec 04             	sub    $0x4,%esp
f0115642:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115647:	6a 54                	push   $0x54
f0115649:	68 4d b9 11 f0       	push   $0xf011b94d
f011564e:	e8 23 ab fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115653:	e8 d1 4b ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115658:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011565b:	74 14                	je     f0115671 <test_priority_normal_and_higher+0x3a0>
f011565d:	83 ec 04             	sub    $0x4,%esp
f0115660:	68 30 ba 11 f0       	push   $0xf011ba30
f0115665:	6a 55                	push   $0x55
f0115667:	68 4d b9 11 f0       	push   $0xf011b94d
f011566c:	e8 05 ab fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115671:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115674:	8b 40 74             	mov    0x74(%eax),%eax
f0115677:	83 f8 14             	cmp    $0x14,%eax
f011567a:	75 16                	jne    f0115692 <test_priority_normal_and_higher+0x3c1>
f011567c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011567f:	8b 40 74             	mov    0x74(%eax),%eax
f0115682:	83 f8 0f             	cmp    $0xf,%eax
f0115685:	75 0b                	jne    f0115692 <test_priority_normal_and_higher+0x3c1>
f0115687:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011568a:	8b 40 74             	mov    0x74(%eax),%eax
f011568d:	83 f8 14             	cmp    $0x14,%eax
f0115690:	74 14                	je     f01156a6 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115692:	83 ec 04             	sub    $0x4,%esp
f0115695:	68 60 ba 11 f0       	push   $0xf011ba60
f011569a:	6a 58                	push   $0x58
f011569c:	68 4d b9 11 f0       	push   $0xf011b94d
f01156a1:	e8 d0 aa fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f01156a6:	e8 7e 4b ff ff       	call   f010a229 <sys_calculate_free_frames>
f01156ab:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01156ae:	e8 39 60 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01156b3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01156b6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01156b9:	83 ec 08             	sub    $0x8,%esp
f01156bc:	6a 04                	push   $0x4
f01156be:	50                   	push   %eax
f01156bf:	e8 f3 fb ff ff       	call   f01152b7 <set_program_priority>
f01156c4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01156c7:	e8 20 60 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01156cc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01156cf:	74 14                	je     f01156e5 <test_priority_normal_and_higher+0x414>
f01156d1:	83 ec 04             	sub    $0x4,%esp
f01156d4:	68 b0 b9 11 f0       	push   $0xf011b9b0
f01156d9:	6a 60                	push   $0x60
f01156db:	68 4d b9 11 f0       	push   $0xf011b94d
f01156e0:	e8 91 aa fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01156e5:	e8 3f 4b ff ff       	call   f010a229 <sys_calculate_free_frames>
f01156ea:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01156ed:	74 14                	je     f0115703 <test_priority_normal_and_higher+0x432>
f01156ef:	83 ec 04             	sub    $0x4,%esp
f01156f2:	68 b0 b9 11 f0       	push   $0xf011b9b0
f01156f7:	6a 61                	push   $0x61
f01156f9:	68 4d b9 11 f0       	push   $0xf011b94d
f01156fe:	e8 73 aa fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115703:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115706:	8b 40 74             	mov    0x74(%eax),%eax
f0115709:	83 f8 14             	cmp    $0x14,%eax
f011570c:	75 16                	jne    f0115724 <test_priority_normal_and_higher+0x453>
f011570e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115711:	8b 40 74             	mov    0x74(%eax),%eax
f0115714:	83 f8 0f             	cmp    $0xf,%eax
f0115717:	75 0b                	jne    f0115724 <test_priority_normal_and_higher+0x453>
f0115719:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011571c:	8b 40 74             	mov    0x74(%eax),%eax
f011571f:	83 f8 14             	cmp    $0x14,%eax
f0115722:	74 14                	je     f0115738 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0115724:	83 ec 04             	sub    $0x4,%esp
f0115727:	68 a8 ba 11 f0       	push   $0xf011baa8
f011572c:	6a 64                	push   $0x64
f011572e:	68 4d b9 11 f0       	push   $0xf011b94d
f0115733:	e8 3e aa fe ff       	call   f0100176 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115738:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011573f:	eb 1b                	jmp    f011575c <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115741:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115744:	8b 48 78             	mov    0x78(%eax),%ecx
f0115747:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011574a:	89 d0                	mov    %edx,%eax
f011574c:	01 c0                	add    %eax,%eax
f011574e:	01 d0                	add    %edx,%eax
f0115750:	c1 e0 02             	shl    $0x2,%eax
f0115753:	01 c8                	add    %ecx,%eax
f0115755:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115759:	ff 45 d8             	incl   -0x28(%ebp)
f011575c:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115760:	7e df                	jle    f0115741 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115762:	e8 c2 4a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115767:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011576a:	e8 7d 5f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011576f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115772:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115775:	83 ec 08             	sub    $0x8,%esp
f0115778:	6a 04                	push   $0x4
f011577a:	50                   	push   %eax
f011577b:	e8 37 fb ff ff       	call   f01152b7 <set_program_priority>
f0115780:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115783:	e8 64 5f ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115788:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011578b:	74 14                	je     f01157a1 <test_priority_normal_and_higher+0x4d0>
f011578d:	83 ec 04             	sub    $0x4,%esp
f0115790:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115795:	6a 71                	push   $0x71
f0115797:	68 4d b9 11 f0       	push   $0xf011b94d
f011579c:	e8 d5 a9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01157a1:	e8 83 4a ff ff       	call   f010a229 <sys_calculate_free_frames>
f01157a6:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01157a9:	74 14                	je     f01157bf <test_priority_normal_and_higher+0x4ee>
f01157ab:	83 ec 04             	sub    $0x4,%esp
f01157ae:	68 b0 b9 11 f0       	push   $0xf011b9b0
f01157b3:	6a 72                	push   $0x72
f01157b5:	68 4d b9 11 f0       	push   $0xf011b94d
f01157ba:	e8 b7 a9 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01157bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01157c2:	8b 40 74             	mov    0x74(%eax),%eax
f01157c5:	83 f8 14             	cmp    $0x14,%eax
f01157c8:	75 16                	jne    f01157e0 <test_priority_normal_and_higher+0x50f>
f01157ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01157cd:	8b 40 74             	mov    0x74(%eax),%eax
f01157d0:	83 f8 0f             	cmp    $0xf,%eax
f01157d3:	75 0b                	jne    f01157e0 <test_priority_normal_and_higher+0x50f>
f01157d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01157d8:	8b 40 74             	mov    0x74(%eax),%eax
f01157db:	83 f8 14             	cmp    $0x14,%eax
f01157de:	74 14                	je     f01157f4 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f01157e0:	83 ec 04             	sub    $0x4,%esp
f01157e3:	68 a8 ba 11 f0       	push   $0xf011baa8
f01157e8:	6a 75                	push   $0x75
f01157ea:	68 4d b9 11 f0       	push   $0xf011b94d
f01157ef:	e8 82 a9 fe ff       	call   f0100176 <_panic>

		for(int i = 10; i < 15; i++)
f01157f4:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01157fb:	eb 1b                	jmp    f0115818 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01157fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115800:	8b 48 78             	mov    0x78(%eax),%ecx
f0115803:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115806:	89 d0                	mov    %edx,%eax
f0115808:	01 c0                	add    %eax,%eax
f011580a:	01 d0                	add    %edx,%eax
f011580c:	c1 e0 02             	shl    $0x2,%eax
f011580f:	01 c8                	add    %ecx,%eax
f0115811:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115815:	ff 45 d4             	incl   -0x2c(%ebp)
f0115818:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011581c:	7e df                	jle    f01157fd <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011581e:	e8 06 4a ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115823:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115826:	e8 c1 5e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011582b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011582e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115831:	83 ec 08             	sub    $0x8,%esp
f0115834:	6a 05                	push   $0x5
f0115836:	50                   	push   %eax
f0115837:	e8 7b fa ff ff       	call   f01152b7 <set_program_priority>
f011583c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011583f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115842:	83 ec 08             	sub    $0x8,%esp
f0115845:	6a 05                	push   $0x5
f0115847:	50                   	push   %eax
f0115848:	e8 6a fa ff ff       	call   f01152b7 <set_program_priority>
f011584d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115850:	e8 97 5e ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115855:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115858:	74 17                	je     f0115871 <test_priority_normal_and_higher+0x5a0>
f011585a:	83 ec 04             	sub    $0x4,%esp
f011585d:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115862:	68 80 00 00 00       	push   $0x80
f0115867:	68 4d b9 11 f0       	push   $0xf011b94d
f011586c:	e8 05 a9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115871:	e8 b3 49 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115876:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115879:	74 17                	je     f0115892 <test_priority_normal_and_higher+0x5c1>
f011587b:	83 ec 04             	sub    $0x4,%esp
f011587e:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115883:	68 81 00 00 00       	push   $0x81
f0115888:	68 4d b9 11 f0       	push   $0xf011b94d
f011588d:	e8 e4 a8 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115892:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115895:	8b 40 74             	mov    0x74(%eax),%eax
f0115898:	83 f8 14             	cmp    $0x14,%eax
f011589b:	75 16                	jne    f01158b3 <test_priority_normal_and_higher+0x5e2>
f011589d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01158a0:	8b 40 74             	mov    0x74(%eax),%eax
f01158a3:	83 f8 1e             	cmp    $0x1e,%eax
f01158a6:	75 0b                	jne    f01158b3 <test_priority_normal_and_higher+0x5e2>
f01158a8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158ab:	8b 40 74             	mov    0x74(%eax),%eax
f01158ae:	83 f8 28             	cmp    $0x28,%eax
f01158b1:	74 17                	je     f01158ca <test_priority_normal_and_higher+0x5f9>
			panic("The programs' working set size should be doubled if full\n");
f01158b3:	83 ec 04             	sub    $0x4,%esp
f01158b6:	68 e4 ba 11 f0       	push   $0xf011bae4
f01158bb:	68 84 00 00 00       	push   $0x84
f01158c0:	68 4d b9 11 f0       	push   $0xf011b94d
f01158c5:	e8 ac a8 fe ff       	call   f0100176 <_panic>

		for(int i = 20; i < 40; i++)
f01158ca:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01158d1:	eb 1b                	jmp    f01158ee <test_priority_normal_and_higher+0x61d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01158d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01158d9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01158dc:	89 d0                	mov    %edx,%eax
f01158de:	01 c0                	add    %eax,%eax
f01158e0:	01 d0                	add    %edx,%eax
f01158e2:	c1 e0 02             	shl    $0x2,%eax
f01158e5:	01 c8                	add    %ecx,%eax
f01158e7:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01158eb:	ff 45 d0             	incl   -0x30(%ebp)
f01158ee:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01158f2:	7e df                	jle    f01158d3 <test_priority_normal_and_higher+0x602>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01158f4:	e8 30 49 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01158f9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01158fc:	e8 eb 5d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115901:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115904:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115907:	83 ec 08             	sub    $0x8,%esp
f011590a:	6a 05                	push   $0x5
f011590c:	50                   	push   %eax
f011590d:	e8 a5 f9 ff ff       	call   f01152b7 <set_program_priority>
f0115912:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115915:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115918:	83 ec 08             	sub    $0x8,%esp
f011591b:	6a 04                	push   $0x4
f011591d:	50                   	push   %eax
f011591e:	e8 94 f9 ff ff       	call   f01152b7 <set_program_priority>
f0115923:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115926:	e8 c1 5d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011592b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011592e:	74 17                	je     f0115947 <test_priority_normal_and_higher+0x676>
f0115930:	83 ec 04             	sub    $0x4,%esp
f0115933:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115938:	68 8f 00 00 00       	push   $0x8f
f011593d:	68 4d b9 11 f0       	push   $0xf011b94d
f0115942:	e8 2f a8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115947:	e8 dd 48 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011594c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011594f:	74 17                	je     f0115968 <test_priority_normal_and_higher+0x697>
f0115951:	83 ec 04             	sub    $0x4,%esp
f0115954:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115959:	68 90 00 00 00       	push   $0x90
f011595e:	68 4d b9 11 f0       	push   $0xf011b94d
f0115963:	e8 0e a8 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115968:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011596b:	8b 40 74             	mov    0x74(%eax),%eax
f011596e:	83 f8 14             	cmp    $0x14,%eax
f0115971:	75 16                	jne    f0115989 <test_priority_normal_and_higher+0x6b8>
f0115973:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115976:	8b 40 74             	mov    0x74(%eax),%eax
f0115979:	83 f8 1e             	cmp    $0x1e,%eax
f011597c:	75 0b                	jne    f0115989 <test_priority_normal_and_higher+0x6b8>
f011597e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115981:	8b 40 74             	mov    0x74(%eax),%eax
f0115984:	83 f8 28             	cmp    $0x28,%eax
f0115987:	74 17                	je     f01159a0 <test_priority_normal_and_higher+0x6cf>
			panic("The programs' working set size should be doubled if full\n");
f0115989:	83 ec 04             	sub    $0x4,%esp
f011598c:	68 e4 ba 11 f0       	push   $0xf011bae4
f0115991:	68 93 00 00 00       	push   $0x93
f0115996:	68 4d b9 11 f0       	push   $0xf011b94d
f011599b:	e8 d6 a7 fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 30; i++)
f01159a0:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01159a7:	eb 1b                	jmp    f01159c4 <test_priority_normal_and_higher+0x6f3>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01159a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159ac:	8b 48 78             	mov    0x78(%eax),%ecx
f01159af:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01159b2:	89 d0                	mov    %edx,%eax
f01159b4:	01 c0                	add    %eax,%eax
f01159b6:	01 d0                	add    %edx,%eax
f01159b8:	c1 e0 02             	shl    $0x2,%eax
f01159bb:	01 c8                	add    %ecx,%eax
f01159bd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01159c1:	ff 45 cc             	incl   -0x34(%ebp)
f01159c4:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01159c8:	7e df                	jle    f01159a9 <test_priority_normal_and_higher+0x6d8>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01159ca:	e8 5a 48 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01159cf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01159d2:	e8 15 5d ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01159d7:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01159da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159dd:	83 ec 08             	sub    $0x8,%esp
f01159e0:	6a 05                	push   $0x5
f01159e2:	50                   	push   %eax
f01159e3:	e8 cf f8 ff ff       	call   f01152b7 <set_program_priority>
f01159e8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01159eb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01159ee:	83 ec 08             	sub    $0x8,%esp
f01159f1:	6a 04                	push   $0x4
f01159f3:	50                   	push   %eax
f01159f4:	e8 be f8 ff ff       	call   f01152b7 <set_program_priority>
f01159f9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01159fc:	e8 eb 5c ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115a01:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115a04:	74 17                	je     f0115a1d <test_priority_normal_and_higher+0x74c>
f0115a06:	83 ec 04             	sub    $0x4,%esp
f0115a09:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115a0e:	68 9e 00 00 00       	push   $0x9e
f0115a13:	68 4d b9 11 f0       	push   $0xf011b94d
f0115a18:	e8 59 a7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115a1d:	e8 07 48 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115a22:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115a25:	74 17                	je     f0115a3e <test_priority_normal_and_higher+0x76d>
f0115a27:	83 ec 04             	sub    $0x4,%esp
f0115a2a:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115a2f:	68 9f 00 00 00       	push   $0x9f
f0115a34:	68 4d b9 11 f0       	push   $0xf011b94d
f0115a39:	e8 38 a7 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115a3e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a41:	8b 40 74             	mov    0x74(%eax),%eax
f0115a44:	83 f8 14             	cmp    $0x14,%eax
f0115a47:	75 16                	jne    f0115a5f <test_priority_normal_and_higher+0x78e>
f0115a49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a4c:	8b 40 74             	mov    0x74(%eax),%eax
f0115a4f:	83 f8 3c             	cmp    $0x3c,%eax
f0115a52:	75 0b                	jne    f0115a5f <test_priority_normal_and_higher+0x78e>
f0115a54:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a57:	8b 40 74             	mov    0x74(%eax),%eax
f0115a5a:	83 f8 28             	cmp    $0x28,%eax
f0115a5d:	74 17                	je     f0115a76 <test_priority_normal_and_higher+0x7a5>
			panic("The programs' working set size should be doubled if full\n");
f0115a5f:	83 ec 04             	sub    $0x4,%esp
f0115a62:	68 e4 ba 11 f0       	push   $0xf011bae4
f0115a67:	68 a2 00 00 00       	push   $0xa2
f0115a6c:	68 4d b9 11 f0       	push   $0xf011b94d
f0115a71:	e8 00 a7 fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 60; i++)
f0115a76:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115a7d:	eb 1b                	jmp    f0115a9a <test_priority_normal_and_higher+0x7c9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115a7f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a82:	8b 48 78             	mov    0x78(%eax),%ecx
f0115a85:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115a88:	89 d0                	mov    %edx,%eax
f0115a8a:	01 c0                	add    %eax,%eax
f0115a8c:	01 d0                	add    %edx,%eax
f0115a8e:	c1 e0 02             	shl    $0x2,%eax
f0115a91:	01 c8                	add    %ecx,%eax
f0115a93:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115a97:	ff 45 c8             	incl   -0x38(%ebp)
f0115a9a:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115a9e:	7e df                	jle    f0115a7f <test_priority_normal_and_higher+0x7ae>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115aa0:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115aa7:	eb 1b                	jmp    f0115ac4 <test_priority_normal_and_higher+0x7f3>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115aa9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115aac:	8b 48 78             	mov    0x78(%eax),%ecx
f0115aaf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115ab2:	89 d0                	mov    %edx,%eax
f0115ab4:	01 c0                	add    %eax,%eax
f0115ab6:	01 d0                	add    %edx,%eax
f0115ab8:	c1 e0 02             	shl    $0x2,%eax
f0115abb:	01 c8                	add    %ecx,%eax
f0115abd:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115ac1:	ff 45 c4             	incl   -0x3c(%ebp)
f0115ac4:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115ac8:	7e df                	jle    f0115aa9 <test_priority_normal_and_higher+0x7d8>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115aca:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0115ad1:	eb 7a                	jmp    f0115b4d <test_priority_normal_and_higher+0x87c>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0115ad3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115ad6:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0115add:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ae0:	8b 58 78             	mov    0x78(%eax),%ebx
f0115ae3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115ae6:	89 d0                	mov    %edx,%eax
f0115ae8:	01 c0                	add    %eax,%eax
f0115aea:	01 d0                	add    %edx,%eax
f0115aec:	c1 e0 02             	shl    $0x2,%eax
f0115aef:	01 d8                	add    %ebx,%eax
f0115af1:	8b 00                	mov    (%eax),%eax
f0115af3:	39 c1                	cmp    %eax,%ecx
f0115af5:	74 17                	je     f0115b0e <test_priority_normal_and_higher+0x83d>
				panic("Working set should be moved properly to the new one");
f0115af7:	83 ec 04             	sub    $0x4,%esp
f0115afa:	68 20 bb 11 f0       	push   $0xf011bb20
f0115aff:	68 b0 00 00 00       	push   $0xb0
f0115b04:	68 4d b9 11 f0       	push   $0xf011b94d
f0115b09:	e8 68 a6 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0115b0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115b11:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0115b18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b1b:	8b 58 78             	mov    0x78(%eax),%ebx
f0115b1e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115b21:	89 d0                	mov    %edx,%eax
f0115b23:	01 c0                	add    %eax,%eax
f0115b25:	01 d0                	add    %edx,%eax
f0115b27:	c1 e0 02             	shl    $0x2,%eax
f0115b2a:	01 d8                	add    %ebx,%eax
f0115b2c:	8b 40 08             	mov    0x8(%eax),%eax
f0115b2f:	39 c1                	cmp    %eax,%ecx
f0115b31:	74 17                	je     f0115b4a <test_priority_normal_and_higher+0x879>
				panic("Working set should be moved properly to the new one");
f0115b33:	83 ec 04             	sub    $0x4,%esp
f0115b36:	68 20 bb 11 f0       	push   $0xf011bb20
f0115b3b:	68 b3 00 00 00       	push   $0xb3
f0115b40:	68 4d b9 11 f0       	push   $0xf011b94d
f0115b45:	e8 2c a6 fe ff       	call   f0100176 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115b4a:	ff 45 c0             	incl   -0x40(%ebp)
f0115b4d:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0115b51:	7e 80                	jle    f0115ad3 <test_priority_normal_and_higher+0x802>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115b53:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0115b5a:	eb 7a                	jmp    f0115bd6 <test_priority_normal_and_higher+0x905>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0115b5c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115b5f:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0115b66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b69:	8b 58 78             	mov    0x78(%eax),%ebx
f0115b6c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115b6f:	89 d0                	mov    %edx,%eax
f0115b71:	01 c0                	add    %eax,%eax
f0115b73:	01 d0                	add    %edx,%eax
f0115b75:	c1 e0 02             	shl    $0x2,%eax
f0115b78:	01 d8                	add    %ebx,%eax
f0115b7a:	8b 00                	mov    (%eax),%eax
f0115b7c:	39 c1                	cmp    %eax,%ecx
f0115b7e:	74 17                	je     f0115b97 <test_priority_normal_and_higher+0x8c6>
				panic("Working set should be moved properly to the new one");
f0115b80:	83 ec 04             	sub    $0x4,%esp
f0115b83:	68 20 bb 11 f0       	push   $0xf011bb20
f0115b88:	68 b9 00 00 00       	push   $0xb9
f0115b8d:	68 4d b9 11 f0       	push   $0xf011b94d
f0115b92:	e8 df a5 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0115b97:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115b9a:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0115ba1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ba4:	8b 58 78             	mov    0x78(%eax),%ebx
f0115ba7:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115baa:	89 d0                	mov    %edx,%eax
f0115bac:	01 c0                	add    %eax,%eax
f0115bae:	01 d0                	add    %edx,%eax
f0115bb0:	c1 e0 02             	shl    $0x2,%eax
f0115bb3:	01 d8                	add    %ebx,%eax
f0115bb5:	8b 40 08             	mov    0x8(%eax),%eax
f0115bb8:	39 c1                	cmp    %eax,%ecx
f0115bba:	74 17                	je     f0115bd3 <test_priority_normal_and_higher+0x902>
				panic("Working set should be moved properly to the new one");
f0115bbc:	83 ec 04             	sub    $0x4,%esp
f0115bbf:	68 20 bb 11 f0       	push   $0xf011bb20
f0115bc4:	68 bc 00 00 00       	push   $0xbc
f0115bc9:	68 4d b9 11 f0       	push   $0xf011b94d
f0115bce:	e8 a3 a5 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115bd3:	ff 45 bc             	incl   -0x44(%ebp)
f0115bd6:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0115bda:	7e 80                	jle    f0115b5c <test_priority_normal_and_higher+0x88b>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115bdc:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0115be3:	eb 7a                	jmp    f0115c5f <test_priority_normal_and_higher+0x98e>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0115be5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115be8:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0115bef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bf2:	8b 58 78             	mov    0x78(%eax),%ebx
f0115bf5:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115bf8:	89 d0                	mov    %edx,%eax
f0115bfa:	01 c0                	add    %eax,%eax
f0115bfc:	01 d0                	add    %edx,%eax
f0115bfe:	c1 e0 02             	shl    $0x2,%eax
f0115c01:	01 d8                	add    %ebx,%eax
f0115c03:	8b 00                	mov    (%eax),%eax
f0115c05:	39 c1                	cmp    %eax,%ecx
f0115c07:	74 17                	je     f0115c20 <test_priority_normal_and_higher+0x94f>
				panic("Working set should be moved properly to the new one");
f0115c09:	83 ec 04             	sub    $0x4,%esp
f0115c0c:	68 20 bb 11 f0       	push   $0xf011bb20
f0115c11:	68 c2 00 00 00       	push   $0xc2
f0115c16:	68 4d b9 11 f0       	push   $0xf011b94d
f0115c1b:	e8 56 a5 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0115c20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115c23:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0115c2a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c2d:	8b 58 78             	mov    0x78(%eax),%ebx
f0115c30:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115c33:	89 d0                	mov    %edx,%eax
f0115c35:	01 c0                	add    %eax,%eax
f0115c37:	01 d0                	add    %edx,%eax
f0115c39:	c1 e0 02             	shl    $0x2,%eax
f0115c3c:	01 d8                	add    %ebx,%eax
f0115c3e:	8b 40 08             	mov    0x8(%eax),%eax
f0115c41:	39 c1                	cmp    %eax,%ecx
f0115c43:	74 17                	je     f0115c5c <test_priority_normal_and_higher+0x98b>
				panic("Working set should be moved properly to the new one");
f0115c45:	83 ec 04             	sub    $0x4,%esp
f0115c48:	68 20 bb 11 f0       	push   $0xf011bb20
f0115c4d:	68 c5 00 00 00       	push   $0xc5
f0115c52:	68 4d b9 11 f0       	push   $0xf011b94d
f0115c57:	e8 1a a5 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115c5c:	ff 45 b8             	incl   -0x48(%ebp)
f0115c5f:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0115c63:	7e 80                	jle    f0115be5 <test_priority_normal_and_higher+0x914>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0115c65:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0115c6c:	75 6e 61 
f0115c6f:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0115c76:	6c 00 00 
f0115c79:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0115c7f:	b9 17 00 00 00       	mov    $0x17,%ecx
f0115c84:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c89:	89 d7                	mov    %edx,%edi
f0115c8b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0115c8d:	83 ec 0c             	sub    $0xc,%esp
f0115c90:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0115c96:	50                   	push   %eax
f0115c97:	e8 ad bb fe ff       	call   f0101849 <execute_command>
f0115c9c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0115c9f:	eb 10                	jmp    f0115cb1 <test_priority_normal_and_higher+0x9e0>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0115ca1:	83 ec 0c             	sub    $0xc,%esp
f0115ca4:	68 54 bb 11 f0       	push   $0xf011bb54
f0115ca9:	e8 e7 10 ff ff       	call   f0106d95 <cprintf>
f0115cae:	83 c4 10             	add    $0x10,%esp
	}
}
f0115cb1:	90                   	nop
f0115cb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115cb5:	5b                   	pop    %ebx
f0115cb6:	5e                   	pop    %esi
f0115cb7:	5f                   	pop    %edi
f0115cb8:	5d                   	pop    %ebp
f0115cb9:	c3                   	ret    

f0115cba <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0115cba:	55                   	push   %ebp
f0115cbb:	89 e5                	mov    %esp,%ebp
f0115cbd:	57                   	push   %edi
f0115cbe:	56                   	push   %esi
f0115cbf:	53                   	push   %ebx
f0115cc0:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0115cc6:	a0 2d da 14 f0       	mov    0xf014da2d,%al
f0115ccb:	84 c0                	test   %al,%al
f0115ccd:	0f 84 be 09 00 00    	je     f0116691 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0115cd3:	c6 05 2d da 14 f0 00 	movb   $0x0,0xf014da2d
		char command[100] = "load fos_add 20";
f0115cda:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115ce0:	bb 90 bb 11 f0       	mov    $0xf011bb90,%ebx
f0115ce5:	ba 04 00 00 00       	mov    $0x4,%edx
f0115cea:	89 c7                	mov    %eax,%edi
f0115cec:	89 de                	mov    %ebx,%esi
f0115cee:	89 d1                	mov    %edx,%ecx
f0115cf0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115cf2:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0115cf8:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115cfd:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d02:	89 d7                	mov    %edx,%edi
f0115d04:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115d06:	83 ec 0c             	sub    $0xc,%esp
f0115d09:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115d0f:	50                   	push   %eax
f0115d10:	e8 34 bb fe ff       	call   f0101849 <execute_command>
f0115d15:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0115d18:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115d1e:	bb 4c be 11 f0       	mov    $0xf011be4c,%ebx
f0115d23:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115d28:	89 c7                	mov    %eax,%edi
f0115d2a:	89 de                	mov    %ebx,%esi
f0115d2c:	89 d1                	mov    %edx,%ecx
f0115d2e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115d30:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0115d36:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115d3b:	b0 00                	mov    $0x0,%al
f0115d3d:	89 d7                	mov    %edx,%edi
f0115d3f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115d41:	83 ec 0c             	sub    $0xc,%esp
f0115d44:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115d4a:	50                   	push   %eax
f0115d4b:	e8 f9 ba fe ff       	call   f0101849 <execute_command>
f0115d50:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0115d53:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115d59:	bb b0 be 11 f0       	mov    $0xf011beb0,%ebx
f0115d5e:	ba 17 00 00 00       	mov    $0x17,%edx
f0115d63:	89 c7                	mov    %eax,%edi
f0115d65:	89 de                	mov    %ebx,%esi
f0115d67:	89 d1                	mov    %edx,%ecx
f0115d69:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115d6b:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0115d71:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115d76:	b0 00                	mov    $0x0,%al
f0115d78:	89 d7                	mov    %edx,%edi
f0115d7a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115d7c:	83 ec 0c             	sub    $0xc,%esp
f0115d7f:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115d85:	50                   	push   %eax
f0115d86:	e8 be ba fe ff       	call   f0101849 <execute_command>
f0115d8b:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115d8e:	83 ec 04             	sub    $0x4,%esp
f0115d91:	6a 00                	push   $0x0
f0115d93:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0115d96:	50                   	push   %eax
f0115d97:	68 00 10 00 00       	push   $0x1000
f0115d9c:	e8 11 d3 fe ff       	call   f01030b2 <envid2env>
f0115da1:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115da4:	83 ec 04             	sub    $0x4,%esp
f0115da7:	6a 00                	push   $0x0
f0115da9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0115dac:	50                   	push   %eax
f0115dad:	68 01 10 00 00       	push   $0x1001
f0115db2:	e8 fb d2 fe ff       	call   f01030b2 <envid2env>
f0115db7:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115dba:	83 ec 04             	sub    $0x4,%esp
f0115dbd:	6a 00                	push   $0x0
f0115dbf:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0115dc2:	50                   	push   %eax
f0115dc3:	68 02 10 00 00       	push   $0x1002
f0115dc8:	e8 e5 d2 fe ff       	call   f01030b2 <envid2env>
f0115dcd:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115dd0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115dd3:	85 c0                	test   %eax,%eax
f0115dd5:	74 0e                	je     f0115de5 <test_priority_normal_and_lower+0x12b>
f0115dd7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115dda:	85 c0                	test   %eax,%eax
f0115ddc:	74 07                	je     f0115de5 <test_priority_normal_and_lower+0x12b>
f0115dde:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115de1:	85 c0                	test   %eax,%eax
f0115de3:	75 17                	jne    f0115dfc <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0115de5:	83 ec 04             	sub    $0x4,%esp
f0115de8:	68 34 b9 11 f0       	push   $0xf011b934
f0115ded:	68 ec 00 00 00       	push   $0xec
f0115df2:	68 4d b9 11 f0       	push   $0xf011b94d
f0115df7:	e8 7a a3 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115dfc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115dff:	8b 40 74             	mov    0x74(%eax),%eax
f0115e02:	83 f8 14             	cmp    $0x14,%eax
f0115e05:	75 16                	jne    f0115e1d <test_priority_normal_and_lower+0x163>
f0115e07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115e0a:	8b 40 74             	mov    0x74(%eax),%eax
f0115e0d:	83 f8 1e             	cmp    $0x1e,%eax
f0115e10:	75 0b                	jne    f0115e1d <test_priority_normal_and_lower+0x163>
f0115e12:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115e15:	8b 40 74             	mov    0x74(%eax),%eax
f0115e18:	83 f8 28             	cmp    $0x28,%eax
f0115e1b:	74 17                	je     f0115e34 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0115e1d:	83 ec 04             	sub    $0x4,%esp
f0115e20:	68 64 b9 11 f0       	push   $0xf011b964
f0115e25:	68 ef 00 00 00       	push   $0xef
f0115e2a:	68 4d b9 11 f0       	push   $0xf011b94d
f0115e2f:	e8 42 a3 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0115e34:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115e3b:	eb 44                	jmp    f0115e81 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115e3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e40:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115e46:	89 d0                	mov    %edx,%eax
f0115e48:	01 c0                	add    %eax,%eax
f0115e4a:	01 d0                	add    %edx,%eax
f0115e4c:	c1 e0 02             	shl    $0x2,%eax
f0115e4f:	01 c8                	add    %ecx,%eax
f0115e51:	8b 10                	mov    (%eax),%edx
f0115e53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115e56:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115e5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e60:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115e66:	89 d0                	mov    %edx,%eax
f0115e68:	01 c0                	add    %eax,%eax
f0115e6a:	01 d0                	add    %edx,%eax
f0115e6c:	c1 e0 02             	shl    $0x2,%eax
f0115e6f:	01 c8                	add    %ecx,%eax
f0115e71:	8b 50 08             	mov    0x8(%eax),%edx
f0115e74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115e77:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115e7e:	ff 45 e4             	incl   -0x1c(%ebp)
f0115e81:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115e85:	7e b6                	jle    f0115e3d <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115e87:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115e8e:	eb 44                	jmp    f0115ed4 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115e90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115e93:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115e99:	89 d0                	mov    %edx,%eax
f0115e9b:	01 c0                	add    %eax,%eax
f0115e9d:	01 d0                	add    %edx,%eax
f0115e9f:	c1 e0 02             	shl    $0x2,%eax
f0115ea2:	01 c8                	add    %ecx,%eax
f0115ea4:	8b 10                	mov    (%eax),%edx
f0115ea6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115ea9:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115eb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115eb3:	8b 48 78             	mov    0x78(%eax),%ecx
f0115eb6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115eb9:	89 d0                	mov    %edx,%eax
f0115ebb:	01 c0                	add    %eax,%eax
f0115ebd:	01 d0                	add    %edx,%eax
f0115ebf:	c1 e0 02             	shl    $0x2,%eax
f0115ec2:	01 c8                	add    %ecx,%eax
f0115ec4:	8b 50 08             	mov    0x8(%eax),%edx
f0115ec7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115eca:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115ed1:	ff 45 e0             	incl   -0x20(%ebp)
f0115ed4:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0115ed8:	7e b6                	jle    f0115e90 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0115eda:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115ee1:	eb 44                	jmp    f0115f27 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115ee3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115ee6:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ee9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115eec:	89 d0                	mov    %edx,%eax
f0115eee:	01 c0                	add    %eax,%eax
f0115ef0:	01 d0                	add    %edx,%eax
f0115ef2:	c1 e0 02             	shl    $0x2,%eax
f0115ef5:	01 c8                	add    %ecx,%eax
f0115ef7:	8b 10                	mov    (%eax),%edx
f0115ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115efc:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f03:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115f06:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f09:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115f0c:	89 d0                	mov    %edx,%eax
f0115f0e:	01 c0                	add    %eax,%eax
f0115f10:	01 d0                	add    %edx,%eax
f0115f12:	c1 e0 02             	shl    $0x2,%eax
f0115f15:	01 c8                	add    %ecx,%eax
f0115f17:	8b 50 08             	mov    0x8(%eax),%edx
f0115f1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115f1d:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0115f24:	ff 45 dc             	incl   -0x24(%ebp)
f0115f27:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0115f2b:	7e b6                	jle    f0115ee3 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115f2d:	e8 f7 42 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115f32:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0115f35:	e8 b2 57 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115f3a:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115f3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115f40:	83 ec 08             	sub    $0x8,%esp
f0115f43:	6a 03                	push   $0x3
f0115f45:	50                   	push   %eax
f0115f46:	e8 6c f3 ff ff       	call   f01152b7 <set_program_priority>
f0115f4b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115f4e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f51:	83 ec 08             	sub    $0x8,%esp
f0115f54:	6a 03                	push   $0x3
f0115f56:	50                   	push   %eax
f0115f57:	e8 5b f3 ff ff       	call   f01152b7 <set_program_priority>
f0115f5c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115f5f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115f62:	83 ec 08             	sub    $0x8,%esp
f0115f65:	6a 03                	push   $0x3
f0115f67:	50                   	push   %eax
f0115f68:	e8 4a f3 ff ff       	call   f01152b7 <set_program_priority>
f0115f6d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115f70:	e8 77 57 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115f75:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0115f78:	74 17                	je     f0115f91 <test_priority_normal_and_lower+0x2d7>
f0115f7a:	83 ec 04             	sub    $0x4,%esp
f0115f7d:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115f82:	68 0b 01 00 00       	push   $0x10b
f0115f87:	68 4d b9 11 f0       	push   $0xf011b94d
f0115f8c:	e8 e5 a1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115f91:	e8 93 42 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115f96:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0115f99:	74 17                	je     f0115fb2 <test_priority_normal_and_lower+0x2f8>
f0115f9b:	83 ec 04             	sub    $0x4,%esp
f0115f9e:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0115fa3:	68 0c 01 00 00       	push   $0x10c
f0115fa8:	68 4d b9 11 f0       	push   $0xf011b94d
f0115fad:	e8 c4 a1 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115fb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115fb5:	8b 40 74             	mov    0x74(%eax),%eax
f0115fb8:	83 f8 14             	cmp    $0x14,%eax
f0115fbb:	75 16                	jne    f0115fd3 <test_priority_normal_and_lower+0x319>
f0115fbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115fc0:	8b 40 74             	mov    0x74(%eax),%eax
f0115fc3:	83 f8 1e             	cmp    $0x1e,%eax
f0115fc6:	75 0b                	jne    f0115fd3 <test_priority_normal_and_lower+0x319>
f0115fc8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115fcb:	8b 40 74             	mov    0x74(%eax),%eax
f0115fce:	83 f8 28             	cmp    $0x28,%eax
f0115fd1:	74 17                	je     f0115fea <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115fd3:	83 ec 04             	sub    $0x4,%esp
f0115fd6:	68 dc b9 11 f0       	push   $0xf011b9dc
f0115fdb:	68 0f 01 00 00       	push   $0x10f
f0115fe0:	68 4d b9 11 f0       	push   $0xf011b94d
f0115fe5:	e8 8c a1 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115fea:	e8 3a 42 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0115fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ff2:	e8 f5 56 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0115ff7:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0115ffa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ffd:	83 ec 08             	sub    $0x8,%esp
f0116000:	6a 02                	push   $0x2
f0116002:	50                   	push   %eax
f0116003:	e8 af f2 ff ff       	call   f01152b7 <set_program_priority>
f0116008:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011600b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011600e:	83 ec 08             	sub    $0x8,%esp
f0116011:	6a 02                	push   $0x2
f0116013:	50                   	push   %eax
f0116014:	e8 9e f2 ff ff       	call   f01152b7 <set_program_priority>
f0116019:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011601c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011601f:	83 ec 08             	sub    $0x8,%esp
f0116022:	6a 02                	push   $0x2
f0116024:	50                   	push   %eax
f0116025:	e8 8d f2 ff ff       	call   f01152b7 <set_program_priority>
f011602a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011602d:	e8 ba 56 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0116032:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116035:	74 17                	je     f011604e <test_priority_normal_and_lower+0x394>
f0116037:	83 ec 04             	sub    $0x4,%esp
f011603a:	68 b0 b9 11 f0       	push   $0xf011b9b0
f011603f:	68 19 01 00 00       	push   $0x119
f0116044:	68 4d b9 11 f0       	push   $0xf011b94d
f0116049:	e8 28 a1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011604e:	e8 d6 41 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0116053:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116056:	74 21                	je     f0116079 <test_priority_normal_and_lower+0x3bf>
f0116058:	e8 cc 41 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011605d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116060:	29 c2                	sub    %eax,%edx
f0116062:	89 d0                	mov    %edx,%eax
f0116064:	50                   	push   %eax
f0116065:	68 30 ba 11 f0       	push   $0xf011ba30
f011606a:	68 1a 01 00 00       	push   $0x11a
f011606f:	68 4d b9 11 f0       	push   $0xf011b94d
f0116074:	e8 fd a0 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116079:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011607c:	8b 40 74             	mov    0x74(%eax),%eax
f011607f:	83 f8 0a             	cmp    $0xa,%eax
f0116082:	75 16                	jne    f011609a <test_priority_normal_and_lower+0x3e0>
f0116084:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116087:	8b 40 74             	mov    0x74(%eax),%eax
f011608a:	83 f8 0f             	cmp    $0xf,%eax
f011608d:	75 0b                	jne    f011609a <test_priority_normal_and_lower+0x3e0>
f011608f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116092:	8b 40 74             	mov    0x74(%eax),%eax
f0116095:	83 f8 14             	cmp    $0x14,%eax
f0116098:	74 17                	je     f01160b1 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f011609a:	83 ec 04             	sub    $0x4,%esp
f011609d:	68 60 ba 11 f0       	push   $0xf011ba60
f01160a2:	68 1d 01 00 00       	push   $0x11d
f01160a7:	68 4d b9 11 f0       	push   $0xf011b94d
f01160ac:	e8 c5 a0 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f01160b1:	e8 73 41 ff ff       	call   f010a229 <sys_calculate_free_frames>
f01160b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160b9:	e8 2e 56 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01160be:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01160c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160c4:	83 ec 08             	sub    $0x8,%esp
f01160c7:	6a 02                	push   $0x2
f01160c9:	50                   	push   %eax
f01160ca:	e8 e8 f1 ff ff       	call   f01152b7 <set_program_priority>
f01160cf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01160d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01160d5:	83 ec 08             	sub    $0x8,%esp
f01160d8:	6a 02                	push   $0x2
f01160da:	50                   	push   %eax
f01160db:	e8 d7 f1 ff ff       	call   f01152b7 <set_program_priority>
f01160e0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01160e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01160e6:	83 ec 08             	sub    $0x8,%esp
f01160e9:	6a 02                	push   $0x2
f01160eb:	50                   	push   %eax
f01160ec:	e8 c6 f1 ff ff       	call   f01152b7 <set_program_priority>
f01160f1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160f4:	e8 f3 55 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01160f9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01160fc:	74 17                	je     f0116115 <test_priority_normal_and_lower+0x45b>
f01160fe:	83 ec 04             	sub    $0x4,%esp
f0116101:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0116106:	68 27 01 00 00       	push   $0x127
f011610b:	68 4d b9 11 f0       	push   $0xf011b94d
f0116110:	e8 61 a0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116115:	e8 0f 41 ff ff       	call   f010a229 <sys_calculate_free_frames>
f011611a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011611d:	74 21                	je     f0116140 <test_priority_normal_and_lower+0x486>
f011611f:	e8 05 41 ff ff       	call   f010a229 <sys_calculate_free_frames>
f0116124:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116127:	29 c2                	sub    %eax,%edx
f0116129:	89 d0                	mov    %edx,%eax
f011612b:	50                   	push   %eax
f011612c:	68 30 ba 11 f0       	push   $0xf011ba30
f0116131:	68 28 01 00 00       	push   $0x128
f0116136:	68 4d b9 11 f0       	push   $0xf011b94d
f011613b:	e8 36 a0 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116140:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116143:	8b 40 74             	mov    0x74(%eax),%eax
f0116146:	83 f8 0a             	cmp    $0xa,%eax
f0116149:	75 16                	jne    f0116161 <test_priority_normal_and_lower+0x4a7>
f011614b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011614e:	8b 40 74             	mov    0x74(%eax),%eax
f0116151:	83 f8 0f             	cmp    $0xf,%eax
f0116154:	75 0b                	jne    f0116161 <test_priority_normal_and_lower+0x4a7>
f0116156:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116159:	8b 40 74             	mov    0x74(%eax),%eax
f011615c:	83 f8 0a             	cmp    $0xa,%eax
f011615f:	74 17                	je     f0116178 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116161:	83 ec 04             	sub    $0x4,%esp
f0116164:	68 60 ba 11 f0       	push   $0xf011ba60
f0116169:	68 2b 01 00 00       	push   $0x12b
f011616e:	68 4d b9 11 f0       	push   $0xf011b94d
f0116173:	e8 fe 9f fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 10; i++)
f0116178:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011617f:	eb 7a                	jmp    f01161fb <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116181:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116184:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011618b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011618e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116191:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116194:	89 d0                	mov    %edx,%eax
f0116196:	01 c0                	add    %eax,%eax
f0116198:	01 d0                	add    %edx,%eax
f011619a:	c1 e0 02             	shl    $0x2,%eax
f011619d:	01 d8                	add    %ebx,%eax
f011619f:	8b 00                	mov    (%eax),%eax
f01161a1:	39 c1                	cmp    %eax,%ecx
f01161a3:	74 17                	je     f01161bc <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01161a5:	83 ec 04             	sub    $0x4,%esp
f01161a8:	68 20 bb 11 f0       	push   $0xf011bb20
f01161ad:	68 30 01 00 00       	push   $0x130
f01161b2:	68 4d b9 11 f0       	push   $0xf011b94d
f01161b7:	e8 ba 9f fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01161bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01161bf:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01161c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01161c9:	8b 58 78             	mov    0x78(%eax),%ebx
f01161cc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01161cf:	89 d0                	mov    %edx,%eax
f01161d1:	01 c0                	add    %eax,%eax
f01161d3:	01 d0                	add    %edx,%eax
f01161d5:	c1 e0 02             	shl    $0x2,%eax
f01161d8:	01 d8                	add    %ebx,%eax
f01161da:	8b 40 08             	mov    0x8(%eax),%eax
f01161dd:	39 c1                	cmp    %eax,%ecx
f01161df:	74 17                	je     f01161f8 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01161e1:	83 ec 04             	sub    $0x4,%esp
f01161e4:	68 20 bb 11 f0       	push   $0xf011bb20
f01161e9:	68 33 01 00 00       	push   $0x133
f01161ee:	68 4d b9 11 f0       	push   $0xf011b94d
f01161f3:	e8 7e 9f fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01161f8:	ff 45 d8             	incl   -0x28(%ebp)
f01161fb:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01161ff:	7e 80                	jle    f0116181 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116201:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116208:	eb 7a                	jmp    f0116284 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011620a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011620d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116214:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116217:	8b 58 78             	mov    0x78(%eax),%ebx
f011621a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011621d:	89 d0                	mov    %edx,%eax
f011621f:	01 c0                	add    %eax,%eax
f0116221:	01 d0                	add    %edx,%eax
f0116223:	c1 e0 02             	shl    $0x2,%eax
f0116226:	01 d8                	add    %ebx,%eax
f0116228:	8b 00                	mov    (%eax),%eax
f011622a:	39 c1                	cmp    %eax,%ecx
f011622c:	74 17                	je     f0116245 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f011622e:	83 ec 04             	sub    $0x4,%esp
f0116231:	68 20 bb 11 f0       	push   $0xf011bb20
f0116236:	68 39 01 00 00       	push   $0x139
f011623b:	68 4d b9 11 f0       	push   $0xf011b94d
f0116240:	e8 31 9f fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116245:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116248:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011624f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116252:	8b 58 78             	mov    0x78(%eax),%ebx
f0116255:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116258:	89 d0                	mov    %edx,%eax
f011625a:	01 c0                	add    %eax,%eax
f011625c:	01 d0                	add    %edx,%eax
f011625e:	c1 e0 02             	shl    $0x2,%eax
f0116261:	01 d8                	add    %ebx,%eax
f0116263:	8b 40 08             	mov    0x8(%eax),%eax
f0116266:	39 c1                	cmp    %eax,%ecx
f0116268:	74 17                	je     f0116281 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011626a:	83 ec 04             	sub    $0x4,%esp
f011626d:	68 20 bb 11 f0       	push   $0xf011bb20
f0116272:	68 3c 01 00 00       	push   $0x13c
f0116277:	68 4d b9 11 f0       	push   $0xf011b94d
f011627c:	e8 f5 9e fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116281:	ff 45 d4             	incl   -0x2c(%ebp)
f0116284:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116288:	7e 80                	jle    f011620a <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011628a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116291:	eb 7a                	jmp    f011630d <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116293:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116296:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011629d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01162a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01162a3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01162a6:	89 d0                	mov    %edx,%eax
f01162a8:	01 c0                	add    %eax,%eax
f01162aa:	01 d0                	add    %edx,%eax
f01162ac:	c1 e0 02             	shl    $0x2,%eax
f01162af:	01 d8                	add    %ebx,%eax
f01162b1:	8b 00                	mov    (%eax),%eax
f01162b3:	39 c1                	cmp    %eax,%ecx
f01162b5:	74 17                	je     f01162ce <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f01162b7:	83 ec 04             	sub    $0x4,%esp
f01162ba:	68 20 bb 11 f0       	push   $0xf011bb20
f01162bf:	68 42 01 00 00       	push   $0x142
f01162c4:	68 4d b9 11 f0       	push   $0xf011b94d
f01162c9:	e8 a8 9e fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01162ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01162d1:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01162d8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01162db:	8b 58 78             	mov    0x78(%eax),%ebx
f01162de:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01162e1:	89 d0                	mov    %edx,%eax
f01162e3:	01 c0                	add    %eax,%eax
f01162e5:	01 d0                	add    %edx,%eax
f01162e7:	c1 e0 02             	shl    $0x2,%eax
f01162ea:	01 d8                	add    %ebx,%eax
f01162ec:	8b 40 08             	mov    0x8(%eax),%eax
f01162ef:	39 c1                	cmp    %eax,%ecx
f01162f1:	74 17                	je     f011630a <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01162f3:	83 ec 04             	sub    $0x4,%esp
f01162f6:	68 20 bb 11 f0       	push   $0xf011bb20
f01162fb:	68 45 01 00 00       	push   $0x145
f0116300:	68 4d b9 11 f0       	push   $0xf011b94d
f0116305:	e8 6c 9e fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011630a:	ff 45 d0             	incl   -0x30(%ebp)
f011630d:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116311:	7e 80                	jle    f0116293 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116313:	e8 11 3f ff ff       	call   f010a229 <sys_calculate_free_frames>
f0116318:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011631b:	e8 cc 53 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f0116320:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116323:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116326:	83 ec 08             	sub    $0x8,%esp
f0116329:	6a 01                	push   $0x1
f011632b:	50                   	push   %eax
f011632c:	e8 86 ef ff ff       	call   f01152b7 <set_program_priority>
f0116331:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116334:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116337:	83 ec 08             	sub    $0x8,%esp
f011633a:	6a 01                	push   $0x1
f011633c:	50                   	push   %eax
f011633d:	e8 75 ef ff ff       	call   f01152b7 <set_program_priority>
f0116342:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116345:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116348:	83 ec 08             	sub    $0x8,%esp
f011634b:	6a 01                	push   $0x1
f011634d:	50                   	push   %eax
f011634e:	e8 64 ef ff ff       	call   f01152b7 <set_program_priority>
f0116353:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116356:	e8 91 53 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f011635b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011635e:	74 17                	je     f0116377 <test_priority_normal_and_lower+0x6bd>
f0116360:	83 ec 04             	sub    $0x4,%esp
f0116363:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0116368:	68 4e 01 00 00       	push   $0x14e
f011636d:	68 4d b9 11 f0       	push   $0xf011b94d
f0116372:	e8 ff 9d fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116377:	e8 ad 3e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011637c:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011637f:	83 f8 0d             	cmp    $0xd,%eax
f0116382:	74 17                	je     f011639b <test_priority_normal_and_lower+0x6e1>
f0116384:	83 ec 04             	sub    $0x4,%esp
f0116387:	68 bc bc 11 f0       	push   $0xf011bcbc
f011638c:	68 4f 01 00 00       	push   $0x14f
f0116391:	68 4d b9 11 f0       	push   $0xf011b94d
f0116396:	e8 db 9d fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011639b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011639e:	8b 40 74             	mov    0x74(%eax),%eax
f01163a1:	83 f8 05             	cmp    $0x5,%eax
f01163a4:	75 16                	jne    f01163bc <test_priority_normal_and_lower+0x702>
f01163a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163a9:	8b 40 74             	mov    0x74(%eax),%eax
f01163ac:	83 f8 07             	cmp    $0x7,%eax
f01163af:	75 0b                	jne    f01163bc <test_priority_normal_and_lower+0x702>
f01163b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01163b4:	8b 40 74             	mov    0x74(%eax),%eax
f01163b7:	83 f8 05             	cmp    $0x5,%eax
f01163ba:	74 17                	je     f01163d3 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f01163bc:	83 ec 04             	sub    $0x4,%esp
f01163bf:	68 04 bd 11 f0       	push   $0xf011bd04
f01163c4:	68 52 01 00 00       	push   $0x152
f01163c9:	68 4d b9 11 f0       	push   $0xf011b94d
f01163ce:	e8 a3 9d fe ff       	call   f0100176 <_panic>


		freeFrames = sys_calculate_free_frames();
f01163d3:	e8 51 3e ff ff       	call   f010a229 <sys_calculate_free_frames>
f01163d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163db:	e8 0c 53 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01163e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01163e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163e6:	83 ec 08             	sub    $0x8,%esp
f01163e9:	6a 01                	push   $0x1
f01163eb:	50                   	push   %eax
f01163ec:	e8 c6 ee ff ff       	call   f01152b7 <set_program_priority>
f01163f1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01163f4:	e8 f3 52 ff ff       	call   f010b6ec <pf_calculate_free_frames>
f01163f9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01163fc:	74 17                	je     f0116415 <test_priority_normal_and_lower+0x75b>
f01163fe:	83 ec 04             	sub    $0x4,%esp
f0116401:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0116406:	68 58 01 00 00       	push   $0x158
f011640b:	68 4d b9 11 f0       	push   $0xf011b94d
f0116410:	e8 61 9d fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116415:	e8 0f 3e ff ff       	call   f010a229 <sys_calculate_free_frames>
f011641a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011641d:	83 f8 03             	cmp    $0x3,%eax
f0116420:	74 17                	je     f0116439 <test_priority_normal_and_lower+0x77f>
f0116422:	83 ec 04             	sub    $0x4,%esp
f0116425:	68 b0 b9 11 f0       	push   $0xf011b9b0
f011642a:	68 59 01 00 00       	push   $0x159
f011642f:	68 4d b9 11 f0       	push   $0xf011b94d
f0116434:	e8 3d 9d fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116439:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011643c:	8b 40 74             	mov    0x74(%eax),%eax
f011643f:	83 f8 02             	cmp    $0x2,%eax
f0116442:	75 16                	jne    f011645a <test_priority_normal_and_lower+0x7a0>
f0116444:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116447:	8b 40 74             	mov    0x74(%eax),%eax
f011644a:	83 f8 07             	cmp    $0x7,%eax
f011644d:	75 0b                	jne    f011645a <test_priority_normal_and_lower+0x7a0>
f011644f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116452:	8b 40 74             	mov    0x74(%eax),%eax
f0116455:	83 f8 05             	cmp    $0x5,%eax
f0116458:	74 17                	je     f0116471 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011645a:	83 ec 04             	sub    $0x4,%esp
f011645d:	68 e4 ba 11 f0       	push   $0xf011bae4
f0116462:	68 5c 01 00 00       	push   $0x15c
f0116467:	68 4d b9 11 f0       	push   $0xf011b94d
f011646c:	e8 05 9d fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 2; i++)
f0116471:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116478:	e9 80 00 00 00       	jmp    f01164fd <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011647d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116480:	83 c0 08             	add    $0x8,%eax
f0116483:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011648a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011648d:	8b 58 78             	mov    0x78(%eax),%ebx
f0116490:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116493:	89 d0                	mov    %edx,%eax
f0116495:	01 c0                	add    %eax,%eax
f0116497:	01 d0                	add    %edx,%eax
f0116499:	c1 e0 02             	shl    $0x2,%eax
f011649c:	01 d8                	add    %ebx,%eax
f011649e:	8b 00                	mov    (%eax),%eax
f01164a0:	39 c1                	cmp    %eax,%ecx
f01164a2:	74 17                	je     f01164bb <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01164a4:	83 ec 04             	sub    $0x4,%esp
f01164a7:	68 34 bd 11 f0       	push   $0xf011bd34
f01164ac:	68 61 01 00 00       	push   $0x161
f01164b1:	68 4d b9 11 f0       	push   $0xf011b94d
f01164b6:	e8 bb 9c fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01164bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164be:	83 c0 08             	add    $0x8,%eax
f01164c1:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01164c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164cb:	8b 58 78             	mov    0x78(%eax),%ebx
f01164ce:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01164d1:	89 d0                	mov    %edx,%eax
f01164d3:	01 c0                	add    %eax,%eax
f01164d5:	01 d0                	add    %edx,%eax
f01164d7:	c1 e0 02             	shl    $0x2,%eax
f01164da:	01 d8                	add    %ebx,%eax
f01164dc:	8b 40 08             	mov    0x8(%eax),%eax
f01164df:	39 c1                	cmp    %eax,%ecx
f01164e1:	74 17                	je     f01164fa <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01164e3:	83 ec 04             	sub    $0x4,%esp
f01164e6:	68 34 bd 11 f0       	push   $0xf011bd34
f01164eb:	68 64 01 00 00       	push   $0x164
f01164f0:	68 4d b9 11 f0       	push   $0xf011b94d
f01164f5:	e8 7c 9c fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01164fa:	ff 45 cc             	incl   -0x34(%ebp)
f01164fd:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116501:	0f 8e 76 ff ff ff    	jle    f011647d <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116507:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f011650e:	e9 80 00 00 00       	jmp    f0116593 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116513:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116516:	83 c0 03             	add    $0x3,%eax
f0116519:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116520:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116523:	8b 58 78             	mov    0x78(%eax),%ebx
f0116526:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116529:	89 d0                	mov    %edx,%eax
f011652b:	01 c0                	add    %eax,%eax
f011652d:	01 d0                	add    %edx,%eax
f011652f:	c1 e0 02             	shl    $0x2,%eax
f0116532:	01 d8                	add    %ebx,%eax
f0116534:	8b 00                	mov    (%eax),%eax
f0116536:	39 c1                	cmp    %eax,%ecx
f0116538:	74 17                	je     f0116551 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f011653a:	ff 75 c8             	pushl  -0x38(%ebp)
f011653d:	68 a0 bd 11 f0       	push   $0xf011bda0
f0116542:	68 6a 01 00 00       	push   $0x16a
f0116547:	68 4d b9 11 f0       	push   $0xf011b94d
f011654c:	e8 25 9c fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116551:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116554:	83 c0 03             	add    $0x3,%eax
f0116557:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011655e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116561:	8b 58 78             	mov    0x78(%eax),%ebx
f0116564:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116567:	89 d0                	mov    %edx,%eax
f0116569:	01 c0                	add    %eax,%eax
f011656b:	01 d0                	add    %edx,%eax
f011656d:	c1 e0 02             	shl    $0x2,%eax
f0116570:	01 d8                	add    %ebx,%eax
f0116572:	8b 40 08             	mov    0x8(%eax),%eax
f0116575:	39 c1                	cmp    %eax,%ecx
f0116577:	74 17                	je     f0116590 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116579:	83 ec 04             	sub    $0x4,%esp
f011657c:	68 34 bd 11 f0       	push   $0xf011bd34
f0116581:	68 6d 01 00 00       	push   $0x16d
f0116586:	68 4d b9 11 f0       	push   $0xf011b94d
f011658b:	e8 e6 9b fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116590:	ff 45 c8             	incl   -0x38(%ebp)
f0116593:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116597:	0f 8e 76 ff ff ff    	jle    f0116513 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011659d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01165a4:	e9 80 00 00 00       	jmp    f0116629 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01165a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01165ac:	83 c0 05             	add    $0x5,%eax
f01165af:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01165b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01165b9:	8b 58 78             	mov    0x78(%eax),%ebx
f01165bc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01165bf:	89 d0                	mov    %edx,%eax
f01165c1:	01 c0                	add    %eax,%eax
f01165c3:	01 d0                	add    %edx,%eax
f01165c5:	c1 e0 02             	shl    $0x2,%eax
f01165c8:	01 d8                	add    %ebx,%eax
f01165ca:	8b 00                	mov    (%eax),%eax
f01165cc:	39 c1                	cmp    %eax,%ecx
f01165ce:	74 17                	je     f01165e7 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01165d0:	83 ec 04             	sub    $0x4,%esp
f01165d3:	68 34 bd 11 f0       	push   $0xf011bd34
f01165d8:	68 73 01 00 00       	push   $0x173
f01165dd:	68 4d b9 11 f0       	push   $0xf011b94d
f01165e2:	e8 8f 9b fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01165e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01165ea:	83 c0 05             	add    $0x5,%eax
f01165ed:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01165f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01165f7:	8b 58 78             	mov    0x78(%eax),%ebx
f01165fa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01165fd:	89 d0                	mov    %edx,%eax
f01165ff:	01 c0                	add    %eax,%eax
f0116601:	01 d0                	add    %edx,%eax
f0116603:	c1 e0 02             	shl    $0x2,%eax
f0116606:	01 d8                	add    %ebx,%eax
f0116608:	8b 40 08             	mov    0x8(%eax),%eax
f011660b:	39 c1                	cmp    %eax,%ecx
f011660d:	74 17                	je     f0116626 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011660f:	83 ec 04             	sub    $0x4,%esp
f0116612:	68 34 bd 11 f0       	push   $0xf011bd34
f0116617:	68 76 01 00 00       	push   $0x176
f011661c:	68 4d b9 11 f0       	push   $0xf011b94d
f0116621:	e8 50 9b fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116626:	ff 45 c4             	incl   -0x3c(%ebp)
f0116629:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f011662d:	0f 8e 76 ff ff ff    	jle    f01165a9 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116633:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116636:	83 ec 08             	sub    $0x8,%esp
f0116639:	6a 05                	push   $0x5
f011663b:	50                   	push   %eax
f011663c:	e8 76 ec ff ff       	call   f01152b7 <set_program_priority>
f0116641:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116644:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116647:	83 ec 08             	sub    $0x8,%esp
f011664a:	6a 05                	push   $0x5
f011664c:	50                   	push   %eax
f011664d:	e8 65 ec ff ff       	call   f01152b7 <set_program_priority>
f0116652:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116655:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011665c:	75 6e 61 
f011665f:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116666:	6c 00 00 
f0116669:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011666f:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116674:	b8 00 00 00 00       	mov    $0x0,%eax
f0116679:	89 d7                	mov    %edx,%edi
f011667b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011667d:	83 ec 0c             	sub    $0xc,%esp
f0116680:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116686:	50                   	push   %eax
f0116687:	e8 bd b1 fe ff       	call   f0101849 <execute_command>
f011668c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f011668f:	eb 10                	jmp    f01166a1 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116691:	83 ec 0c             	sub    $0xc,%esp
f0116694:	68 10 be 11 f0       	push   $0xf011be10
f0116699:	e8 f7 06 ff ff       	call   f0106d95 <cprintf>
f011669e:	83 c4 10             	add    $0x10,%esp
	}
}
f01166a1:	90                   	nop
f01166a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01166a5:	5b                   	pop    %ebx
f01166a6:	5e                   	pop    %esi
f01166a7:	5f                   	pop    %edi
f01166a8:	5d                   	pop    %ebp
f01166a9:	c3                   	ret    

f01166aa <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01166aa:	55                   	push   %ebp
f01166ab:	89 e5                	mov    %esp,%ebp
f01166ad:	53                   	push   %ebx
f01166ae:	83 ec 14             	sub    $0x14,%esp
f01166b1:	8b 45 10             	mov    0x10(%ebp),%eax
f01166b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01166b7:	8b 45 14             	mov    0x14(%ebp),%eax
f01166ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01166bd:	8b 45 18             	mov    0x18(%ebp),%eax
f01166c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01166c5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01166c8:	77 55                	ja     f011671f <printnum+0x75>
f01166ca:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01166cd:	72 05                	jb     f01166d4 <printnum+0x2a>
f01166cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01166d2:	77 4b                	ja     f011671f <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01166d4:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01166d7:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01166da:	8b 45 18             	mov    0x18(%ebp),%eax
f01166dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01166e2:	52                   	push   %edx
f01166e3:	50                   	push   %eax
f01166e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01166e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01166ea:	e8 b9 11 00 00       	call   f01178a8 <__udivdi3>
f01166ef:	83 c4 10             	add    $0x10,%esp
f01166f2:	83 ec 04             	sub    $0x4,%esp
f01166f5:	ff 75 20             	pushl  0x20(%ebp)
f01166f8:	53                   	push   %ebx
f01166f9:	ff 75 18             	pushl  0x18(%ebp)
f01166fc:	52                   	push   %edx
f01166fd:	50                   	push   %eax
f01166fe:	ff 75 0c             	pushl  0xc(%ebp)
f0116701:	ff 75 08             	pushl  0x8(%ebp)
f0116704:	e8 a1 ff ff ff       	call   f01166aa <printnum>
f0116709:	83 c4 20             	add    $0x20,%esp
f011670c:	eb 1a                	jmp    f0116728 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f011670e:	83 ec 08             	sub    $0x8,%esp
f0116711:	ff 75 0c             	pushl  0xc(%ebp)
f0116714:	ff 75 20             	pushl  0x20(%ebp)
f0116717:	8b 45 08             	mov    0x8(%ebp),%eax
f011671a:	ff d0                	call   *%eax
f011671c:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f011671f:	ff 4d 1c             	decl   0x1c(%ebp)
f0116722:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0116726:	7f e6                	jg     f011670e <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0116728:	8b 4d 18             	mov    0x18(%ebp),%ecx
f011672b:	bb 00 00 00 00       	mov    $0x0,%ebx
f0116730:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116733:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116736:	53                   	push   %ebx
f0116737:	51                   	push   %ecx
f0116738:	52                   	push   %edx
f0116739:	50                   	push   %eax
f011673a:	e8 79 12 00 00       	call   f01179b8 <__umoddi3>
f011673f:	83 c4 10             	add    $0x10,%esp
f0116742:	05 34 c1 11 f0       	add    $0xf011c134,%eax
f0116747:	8a 00                	mov    (%eax),%al
f0116749:	0f be c0             	movsbl %al,%eax
f011674c:	83 ec 08             	sub    $0x8,%esp
f011674f:	ff 75 0c             	pushl  0xc(%ebp)
f0116752:	50                   	push   %eax
f0116753:	8b 45 08             	mov    0x8(%ebp),%eax
f0116756:	ff d0                	call   *%eax
f0116758:	83 c4 10             	add    $0x10,%esp
}
f011675b:	90                   	nop
f011675c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011675f:	c9                   	leave  
f0116760:	c3                   	ret    

f0116761 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0116761:	55                   	push   %ebp
f0116762:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0116764:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0116768:	7e 1c                	jle    f0116786 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f011676a:	8b 45 08             	mov    0x8(%ebp),%eax
f011676d:	8b 00                	mov    (%eax),%eax
f011676f:	8d 50 08             	lea    0x8(%eax),%edx
f0116772:	8b 45 08             	mov    0x8(%ebp),%eax
f0116775:	89 10                	mov    %edx,(%eax)
f0116777:	8b 45 08             	mov    0x8(%ebp),%eax
f011677a:	8b 00                	mov    (%eax),%eax
f011677c:	83 e8 08             	sub    $0x8,%eax
f011677f:	8b 50 04             	mov    0x4(%eax),%edx
f0116782:	8b 00                	mov    (%eax),%eax
f0116784:	eb 40                	jmp    f01167c6 <getuint+0x65>
	else if (lflag)
f0116786:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011678a:	74 1e                	je     f01167aa <getuint+0x49>
		return va_arg(*ap, unsigned long);
f011678c:	8b 45 08             	mov    0x8(%ebp),%eax
f011678f:	8b 00                	mov    (%eax),%eax
f0116791:	8d 50 04             	lea    0x4(%eax),%edx
f0116794:	8b 45 08             	mov    0x8(%ebp),%eax
f0116797:	89 10                	mov    %edx,(%eax)
f0116799:	8b 45 08             	mov    0x8(%ebp),%eax
f011679c:	8b 00                	mov    (%eax),%eax
f011679e:	83 e8 04             	sub    $0x4,%eax
f01167a1:	8b 00                	mov    (%eax),%eax
f01167a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01167a8:	eb 1c                	jmp    f01167c6 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01167aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01167ad:	8b 00                	mov    (%eax),%eax
f01167af:	8d 50 04             	lea    0x4(%eax),%edx
f01167b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01167b5:	89 10                	mov    %edx,(%eax)
f01167b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01167ba:	8b 00                	mov    (%eax),%eax
f01167bc:	83 e8 04             	sub    $0x4,%eax
f01167bf:	8b 00                	mov    (%eax),%eax
f01167c1:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01167c6:	5d                   	pop    %ebp
f01167c7:	c3                   	ret    

f01167c8 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01167c8:	55                   	push   %ebp
f01167c9:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01167cb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01167cf:	7e 1c                	jle    f01167ed <getint+0x25>
		return va_arg(*ap, long long);
f01167d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01167d4:	8b 00                	mov    (%eax),%eax
f01167d6:	8d 50 08             	lea    0x8(%eax),%edx
f01167d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01167dc:	89 10                	mov    %edx,(%eax)
f01167de:	8b 45 08             	mov    0x8(%ebp),%eax
f01167e1:	8b 00                	mov    (%eax),%eax
f01167e3:	83 e8 08             	sub    $0x8,%eax
f01167e6:	8b 50 04             	mov    0x4(%eax),%edx
f01167e9:	8b 00                	mov    (%eax),%eax
f01167eb:	eb 38                	jmp    f0116825 <getint+0x5d>
	else if (lflag)
f01167ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01167f1:	74 1a                	je     f011680d <getint+0x45>
		return va_arg(*ap, long);
f01167f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01167f6:	8b 00                	mov    (%eax),%eax
f01167f8:	8d 50 04             	lea    0x4(%eax),%edx
f01167fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01167fe:	89 10                	mov    %edx,(%eax)
f0116800:	8b 45 08             	mov    0x8(%ebp),%eax
f0116803:	8b 00                	mov    (%eax),%eax
f0116805:	83 e8 04             	sub    $0x4,%eax
f0116808:	8b 00                	mov    (%eax),%eax
f011680a:	99                   	cltd   
f011680b:	eb 18                	jmp    f0116825 <getint+0x5d>
	else
		return va_arg(*ap, int);
f011680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116810:	8b 00                	mov    (%eax),%eax
f0116812:	8d 50 04             	lea    0x4(%eax),%edx
f0116815:	8b 45 08             	mov    0x8(%ebp),%eax
f0116818:	89 10                	mov    %edx,(%eax)
f011681a:	8b 45 08             	mov    0x8(%ebp),%eax
f011681d:	8b 00                	mov    (%eax),%eax
f011681f:	83 e8 04             	sub    $0x4,%eax
f0116822:	8b 00                	mov    (%eax),%eax
f0116824:	99                   	cltd   
}
f0116825:	5d                   	pop    %ebp
f0116826:	c3                   	ret    

f0116827 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0116827:	55                   	push   %ebp
f0116828:	89 e5                	mov    %esp,%ebp
f011682a:	56                   	push   %esi
f011682b:	53                   	push   %ebx
f011682c:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011682f:	eb 17                	jmp    f0116848 <vprintfmt+0x21>
			if (ch == '\0')
f0116831:	85 db                	test   %ebx,%ebx
f0116833:	0f 84 af 03 00 00    	je     f0116be8 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0116839:	83 ec 08             	sub    $0x8,%esp
f011683c:	ff 75 0c             	pushl  0xc(%ebp)
f011683f:	53                   	push   %ebx
f0116840:	8b 45 08             	mov    0x8(%ebp),%eax
f0116843:	ff d0                	call   *%eax
f0116845:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0116848:	8b 45 10             	mov    0x10(%ebp),%eax
f011684b:	8d 50 01             	lea    0x1(%eax),%edx
f011684e:	89 55 10             	mov    %edx,0x10(%ebp)
f0116851:	8a 00                	mov    (%eax),%al
f0116853:	0f b6 d8             	movzbl %al,%ebx
f0116856:	83 fb 25             	cmp    $0x25,%ebx
f0116859:	75 d6                	jne    f0116831 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f011685b:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f011685f:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0116866:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f011686d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0116874:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f011687b:	8b 45 10             	mov    0x10(%ebp),%eax
f011687e:	8d 50 01             	lea    0x1(%eax),%edx
f0116881:	89 55 10             	mov    %edx,0x10(%ebp)
f0116884:	8a 00                	mov    (%eax),%al
f0116886:	0f b6 d8             	movzbl %al,%ebx
f0116889:	8d 43 dd             	lea    -0x23(%ebx),%eax
f011688c:	83 f8 55             	cmp    $0x55,%eax
f011688f:	0f 87 2b 03 00 00    	ja     f0116bc0 <vprintfmt+0x399>
f0116895:	8b 04 85 58 c1 11 f0 	mov    -0xfee3ea8(,%eax,4),%eax
f011689c:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f011689e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01168a2:	eb d7                	jmp    f011687b <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01168a4:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01168a8:	eb d1                	jmp    f011687b <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01168aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01168b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168b4:	89 d0                	mov    %edx,%eax
f01168b6:	c1 e0 02             	shl    $0x2,%eax
f01168b9:	01 d0                	add    %edx,%eax
f01168bb:	01 c0                	add    %eax,%eax
f01168bd:	01 d8                	add    %ebx,%eax
f01168bf:	83 e8 30             	sub    $0x30,%eax
f01168c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01168c5:	8b 45 10             	mov    0x10(%ebp),%eax
f01168c8:	8a 00                	mov    (%eax),%al
f01168ca:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01168cd:	83 fb 2f             	cmp    $0x2f,%ebx
f01168d0:	7e 3e                	jle    f0116910 <vprintfmt+0xe9>
f01168d2:	83 fb 39             	cmp    $0x39,%ebx
f01168d5:	7f 39                	jg     f0116910 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01168d7:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01168da:	eb d5                	jmp    f01168b1 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01168dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01168df:	83 c0 04             	add    $0x4,%eax
f01168e2:	89 45 14             	mov    %eax,0x14(%ebp)
f01168e5:	8b 45 14             	mov    0x14(%ebp),%eax
f01168e8:	83 e8 04             	sub    $0x4,%eax
f01168eb:	8b 00                	mov    (%eax),%eax
f01168ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01168f0:	eb 1f                	jmp    f0116911 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01168f2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01168f6:	79 83                	jns    f011687b <vprintfmt+0x54>
				width = 0;
f01168f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01168ff:	e9 77 ff ff ff       	jmp    f011687b <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0116904:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f011690b:	e9 6b ff ff ff       	jmp    f011687b <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0116910:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0116911:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116915:	0f 89 60 ff ff ff    	jns    f011687b <vprintfmt+0x54>
				width = precision, precision = -1;
f011691b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011691e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116921:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0116928:	e9 4e ff ff ff       	jmp    f011687b <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f011692d:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0116930:	e9 46 ff ff ff       	jmp    f011687b <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0116935:	8b 45 14             	mov    0x14(%ebp),%eax
f0116938:	83 c0 04             	add    $0x4,%eax
f011693b:	89 45 14             	mov    %eax,0x14(%ebp)
f011693e:	8b 45 14             	mov    0x14(%ebp),%eax
f0116941:	83 e8 04             	sub    $0x4,%eax
f0116944:	8b 00                	mov    (%eax),%eax
f0116946:	83 ec 08             	sub    $0x8,%esp
f0116949:	ff 75 0c             	pushl  0xc(%ebp)
f011694c:	50                   	push   %eax
f011694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116950:	ff d0                	call   *%eax
f0116952:	83 c4 10             	add    $0x10,%esp
			break;
f0116955:	e9 89 02 00 00       	jmp    f0116be3 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f011695a:	8b 45 14             	mov    0x14(%ebp),%eax
f011695d:	83 c0 04             	add    $0x4,%eax
f0116960:	89 45 14             	mov    %eax,0x14(%ebp)
f0116963:	8b 45 14             	mov    0x14(%ebp),%eax
f0116966:	83 e8 04             	sub    $0x4,%eax
f0116969:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f011696b:	85 db                	test   %ebx,%ebx
f011696d:	79 02                	jns    f0116971 <vprintfmt+0x14a>
				err = -err;
f011696f:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0116971:	83 fb 64             	cmp    $0x64,%ebx
f0116974:	7f 0b                	jg     f0116981 <vprintfmt+0x15a>
f0116976:	8b 34 9d a0 bf 11 f0 	mov    -0xfee4060(,%ebx,4),%esi
f011697d:	85 f6                	test   %esi,%esi
f011697f:	75 19                	jne    f011699a <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0116981:	53                   	push   %ebx
f0116982:	68 45 c1 11 f0       	push   $0xf011c145
f0116987:	ff 75 0c             	pushl  0xc(%ebp)
f011698a:	ff 75 08             	pushl  0x8(%ebp)
f011698d:	e8 5e 02 00 00       	call   f0116bf0 <printfmt>
f0116992:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0116995:	e9 49 02 00 00       	jmp    f0116be3 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f011699a:	56                   	push   %esi
f011699b:	68 4e c1 11 f0       	push   $0xf011c14e
f01169a0:	ff 75 0c             	pushl  0xc(%ebp)
f01169a3:	ff 75 08             	pushl  0x8(%ebp)
f01169a6:	e8 45 02 00 00       	call   f0116bf0 <printfmt>
f01169ab:	83 c4 10             	add    $0x10,%esp
			break;
f01169ae:	e9 30 02 00 00       	jmp    f0116be3 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01169b3:	8b 45 14             	mov    0x14(%ebp),%eax
f01169b6:	83 c0 04             	add    $0x4,%eax
f01169b9:	89 45 14             	mov    %eax,0x14(%ebp)
f01169bc:	8b 45 14             	mov    0x14(%ebp),%eax
f01169bf:	83 e8 04             	sub    $0x4,%eax
f01169c2:	8b 30                	mov    (%eax),%esi
f01169c4:	85 f6                	test   %esi,%esi
f01169c6:	75 05                	jne    f01169cd <vprintfmt+0x1a6>
				p = "(null)";
f01169c8:	be 51 c1 11 f0       	mov    $0xf011c151,%esi
			if (width > 0 && padc != '-')
f01169cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01169d1:	7e 6d                	jle    f0116a40 <vprintfmt+0x219>
f01169d3:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01169d7:	74 67                	je     f0116a40 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01169d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01169dc:	83 ec 08             	sub    $0x8,%esp
f01169df:	50                   	push   %eax
f01169e0:	56                   	push   %esi
f01169e1:	e8 12 05 00 00       	call   f0116ef8 <strnlen>
f01169e6:	83 c4 10             	add    $0x10,%esp
f01169e9:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01169ec:	eb 16                	jmp    f0116a04 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01169ee:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01169f2:	83 ec 08             	sub    $0x8,%esp
f01169f5:	ff 75 0c             	pushl  0xc(%ebp)
f01169f8:	50                   	push   %eax
f01169f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01169fc:	ff d0                	call   *%eax
f01169fe:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0116a01:	ff 4d e4             	decl   -0x1c(%ebp)
f0116a04:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116a08:	7f e4                	jg     f01169ee <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0116a0a:	eb 34                	jmp    f0116a40 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0116a0c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0116a10:	74 1c                	je     f0116a2e <vprintfmt+0x207>
f0116a12:	83 fb 1f             	cmp    $0x1f,%ebx
f0116a15:	7e 05                	jle    f0116a1c <vprintfmt+0x1f5>
f0116a17:	83 fb 7e             	cmp    $0x7e,%ebx
f0116a1a:	7e 12                	jle    f0116a2e <vprintfmt+0x207>
					putch('?', putdat);
f0116a1c:	83 ec 08             	sub    $0x8,%esp
f0116a1f:	ff 75 0c             	pushl  0xc(%ebp)
f0116a22:	6a 3f                	push   $0x3f
f0116a24:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a27:	ff d0                	call   *%eax
f0116a29:	83 c4 10             	add    $0x10,%esp
f0116a2c:	eb 0f                	jmp    f0116a3d <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0116a2e:	83 ec 08             	sub    $0x8,%esp
f0116a31:	ff 75 0c             	pushl  0xc(%ebp)
f0116a34:	53                   	push   %ebx
f0116a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a38:	ff d0                	call   *%eax
f0116a3a:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0116a3d:	ff 4d e4             	decl   -0x1c(%ebp)
f0116a40:	89 f0                	mov    %esi,%eax
f0116a42:	8d 70 01             	lea    0x1(%eax),%esi
f0116a45:	8a 00                	mov    (%eax),%al
f0116a47:	0f be d8             	movsbl %al,%ebx
f0116a4a:	85 db                	test   %ebx,%ebx
f0116a4c:	74 24                	je     f0116a72 <vprintfmt+0x24b>
f0116a4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0116a52:	78 b8                	js     f0116a0c <vprintfmt+0x1e5>
f0116a54:	ff 4d e0             	decl   -0x20(%ebp)
f0116a57:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0116a5b:	79 af                	jns    f0116a0c <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0116a5d:	eb 13                	jmp    f0116a72 <vprintfmt+0x24b>
				putch(' ', putdat);
f0116a5f:	83 ec 08             	sub    $0x8,%esp
f0116a62:	ff 75 0c             	pushl  0xc(%ebp)
f0116a65:	6a 20                	push   $0x20
f0116a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a6a:	ff d0                	call   *%eax
f0116a6c:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0116a6f:	ff 4d e4             	decl   -0x1c(%ebp)
f0116a72:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0116a76:	7f e7                	jg     f0116a5f <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0116a78:	e9 66 01 00 00       	jmp    f0116be3 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0116a7d:	83 ec 08             	sub    $0x8,%esp
f0116a80:	ff 75 e8             	pushl  -0x18(%ebp)
f0116a83:	8d 45 14             	lea    0x14(%ebp),%eax
f0116a86:	50                   	push   %eax
f0116a87:	e8 3c fd ff ff       	call   f01167c8 <getint>
f0116a8c:	83 c4 10             	add    $0x10,%esp
f0116a8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116a92:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0116a95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116a9b:	85 d2                	test   %edx,%edx
f0116a9d:	79 23                	jns    f0116ac2 <vprintfmt+0x29b>
				putch('-', putdat);
f0116a9f:	83 ec 08             	sub    $0x8,%esp
f0116aa2:	ff 75 0c             	pushl  0xc(%ebp)
f0116aa5:	6a 2d                	push   $0x2d
f0116aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0116aaa:	ff d0                	call   *%eax
f0116aac:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0116aaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ab2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116ab5:	f7 d8                	neg    %eax
f0116ab7:	83 d2 00             	adc    $0x0,%edx
f0116aba:	f7 da                	neg    %edx
f0116abc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116abf:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0116ac2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0116ac9:	e9 bc 00 00 00       	jmp    f0116b8a <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0116ace:	83 ec 08             	sub    $0x8,%esp
f0116ad1:	ff 75 e8             	pushl  -0x18(%ebp)
f0116ad4:	8d 45 14             	lea    0x14(%ebp),%eax
f0116ad7:	50                   	push   %eax
f0116ad8:	e8 84 fc ff ff       	call   f0116761 <getuint>
f0116add:	83 c4 10             	add    $0x10,%esp
f0116ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ae3:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0116ae6:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0116aed:	e9 98 00 00 00       	jmp    f0116b8a <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0116af2:	83 ec 08             	sub    $0x8,%esp
f0116af5:	ff 75 0c             	pushl  0xc(%ebp)
f0116af8:	6a 58                	push   $0x58
f0116afa:	8b 45 08             	mov    0x8(%ebp),%eax
f0116afd:	ff d0                	call   *%eax
f0116aff:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0116b02:	83 ec 08             	sub    $0x8,%esp
f0116b05:	ff 75 0c             	pushl  0xc(%ebp)
f0116b08:	6a 58                	push   $0x58
f0116b0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b0d:	ff d0                	call   *%eax
f0116b0f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0116b12:	83 ec 08             	sub    $0x8,%esp
f0116b15:	ff 75 0c             	pushl  0xc(%ebp)
f0116b18:	6a 58                	push   $0x58
f0116b1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b1d:	ff d0                	call   *%eax
f0116b1f:	83 c4 10             	add    $0x10,%esp
			break;
f0116b22:	e9 bc 00 00 00       	jmp    f0116be3 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0116b27:	83 ec 08             	sub    $0x8,%esp
f0116b2a:	ff 75 0c             	pushl  0xc(%ebp)
f0116b2d:	6a 30                	push   $0x30
f0116b2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b32:	ff d0                	call   *%eax
f0116b34:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0116b37:	83 ec 08             	sub    $0x8,%esp
f0116b3a:	ff 75 0c             	pushl  0xc(%ebp)
f0116b3d:	6a 78                	push   $0x78
f0116b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b42:	ff d0                	call   *%eax
f0116b44:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0116b47:	8b 45 14             	mov    0x14(%ebp),%eax
f0116b4a:	83 c0 04             	add    $0x4,%eax
f0116b4d:	89 45 14             	mov    %eax,0x14(%ebp)
f0116b50:	8b 45 14             	mov    0x14(%ebp),%eax
f0116b53:	83 e8 04             	sub    $0x4,%eax
f0116b56:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0116b58:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0116b62:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0116b69:	eb 1f                	jmp    f0116b8a <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0116b6b:	83 ec 08             	sub    $0x8,%esp
f0116b6e:	ff 75 e8             	pushl  -0x18(%ebp)
f0116b71:	8d 45 14             	lea    0x14(%ebp),%eax
f0116b74:	50                   	push   %eax
f0116b75:	e8 e7 fb ff ff       	call   f0116761 <getuint>
f0116b7a:	83 c4 10             	add    $0x10,%esp
f0116b7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b80:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0116b83:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0116b8a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0116b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b91:	83 ec 04             	sub    $0x4,%esp
f0116b94:	52                   	push   %edx
f0116b95:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116b98:	50                   	push   %eax
f0116b99:	ff 75 f4             	pushl  -0xc(%ebp)
f0116b9c:	ff 75 f0             	pushl  -0x10(%ebp)
f0116b9f:	ff 75 0c             	pushl  0xc(%ebp)
f0116ba2:	ff 75 08             	pushl  0x8(%ebp)
f0116ba5:	e8 00 fb ff ff       	call   f01166aa <printnum>
f0116baa:	83 c4 20             	add    $0x20,%esp
			break;
f0116bad:	eb 34                	jmp    f0116be3 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0116baf:	83 ec 08             	sub    $0x8,%esp
f0116bb2:	ff 75 0c             	pushl  0xc(%ebp)
f0116bb5:	53                   	push   %ebx
f0116bb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bb9:	ff d0                	call   *%eax
f0116bbb:	83 c4 10             	add    $0x10,%esp
			break;
f0116bbe:	eb 23                	jmp    f0116be3 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0116bc0:	83 ec 08             	sub    $0x8,%esp
f0116bc3:	ff 75 0c             	pushl  0xc(%ebp)
f0116bc6:	6a 25                	push   $0x25
f0116bc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bcb:	ff d0                	call   *%eax
f0116bcd:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0116bd0:	ff 4d 10             	decl   0x10(%ebp)
f0116bd3:	eb 03                	jmp    f0116bd8 <vprintfmt+0x3b1>
f0116bd5:	ff 4d 10             	decl   0x10(%ebp)
f0116bd8:	8b 45 10             	mov    0x10(%ebp),%eax
f0116bdb:	48                   	dec    %eax
f0116bdc:	8a 00                	mov    (%eax),%al
f0116bde:	3c 25                	cmp    $0x25,%al
f0116be0:	75 f3                	jne    f0116bd5 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0116be2:	90                   	nop
		}
	}
f0116be3:	e9 47 fc ff ff       	jmp    f011682f <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0116be8:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0116be9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0116bec:	5b                   	pop    %ebx
f0116bed:	5e                   	pop    %esi
f0116bee:	5d                   	pop    %ebp
f0116bef:	c3                   	ret    

f0116bf0 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0116bf0:	55                   	push   %ebp
f0116bf1:	89 e5                	mov    %esp,%ebp
f0116bf3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0116bf6:	8d 45 10             	lea    0x10(%ebp),%eax
f0116bf9:	83 c0 04             	add    $0x4,%eax
f0116bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0116bff:	8b 45 10             	mov    0x10(%ebp),%eax
f0116c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0116c05:	50                   	push   %eax
f0116c06:	ff 75 0c             	pushl  0xc(%ebp)
f0116c09:	ff 75 08             	pushl  0x8(%ebp)
f0116c0c:	e8 16 fc ff ff       	call   f0116827 <vprintfmt>
f0116c11:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0116c14:	90                   	nop
f0116c15:	c9                   	leave  
f0116c16:	c3                   	ret    

f0116c17 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0116c17:	55                   	push   %ebp
f0116c18:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0116c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c1d:	8b 40 08             	mov    0x8(%eax),%eax
f0116c20:	8d 50 01             	lea    0x1(%eax),%edx
f0116c23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c26:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0116c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c2c:	8b 10                	mov    (%eax),%edx
f0116c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c31:	8b 40 04             	mov    0x4(%eax),%eax
f0116c34:	39 c2                	cmp    %eax,%edx
f0116c36:	73 12                	jae    f0116c4a <sprintputch+0x33>
		*b->buf++ = ch;
f0116c38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c3b:	8b 00                	mov    (%eax),%eax
f0116c3d:	8d 48 01             	lea    0x1(%eax),%ecx
f0116c40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116c43:	89 0a                	mov    %ecx,(%edx)
f0116c45:	8b 55 08             	mov    0x8(%ebp),%edx
f0116c48:	88 10                	mov    %dl,(%eax)
}
f0116c4a:	90                   	nop
f0116c4b:	5d                   	pop    %ebp
f0116c4c:	c3                   	ret    

f0116c4d <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0116c4d:	55                   	push   %ebp
f0116c4e:	89 e5                	mov    %esp,%ebp
f0116c50:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0116c53:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c56:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116c59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c5c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0116c5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c62:	01 d0                	add    %edx,%eax
f0116c64:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116c67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0116c6e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0116c72:	74 06                	je     f0116c7a <vsnprintf+0x2d>
f0116c74:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0116c78:	7f 07                	jg     f0116c81 <vsnprintf+0x34>
		return -E_INVAL;
f0116c7a:	b8 03 00 00 00       	mov    $0x3,%eax
f0116c7f:	eb 20                	jmp    f0116ca1 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0116c81:	ff 75 14             	pushl  0x14(%ebp)
f0116c84:	ff 75 10             	pushl  0x10(%ebp)
f0116c87:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0116c8a:	50                   	push   %eax
f0116c8b:	68 17 6c 11 f0       	push   $0xf0116c17
f0116c90:	e8 92 fb ff ff       	call   f0116827 <vprintfmt>
f0116c95:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0116c98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116c9b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0116c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0116ca1:	c9                   	leave  
f0116ca2:	c3                   	ret    

f0116ca3 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0116ca3:	55                   	push   %ebp
f0116ca4:	89 e5                	mov    %esp,%ebp
f0116ca6:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0116ca9:	8d 45 10             	lea    0x10(%ebp),%eax
f0116cac:	83 c0 04             	add    $0x4,%eax
f0116caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0116cb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0116cb5:	ff 75 f4             	pushl  -0xc(%ebp)
f0116cb8:	50                   	push   %eax
f0116cb9:	ff 75 0c             	pushl  0xc(%ebp)
f0116cbc:	ff 75 08             	pushl  0x8(%ebp)
f0116cbf:	e8 89 ff ff ff       	call   f0116c4d <vsnprintf>
f0116cc4:	83 c4 10             	add    $0x10,%esp
f0116cc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0116cca:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0116ccd:	c9                   	leave  
f0116cce:	c3                   	ret    

f0116ccf <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0116ccf:	55                   	push   %ebp
f0116cd0:	89 e5                	mov    %esp,%ebp
f0116cd2:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0116cd5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0116cd9:	74 13                	je     f0116cee <readline+0x1f>
		cprintf("%s", prompt);
f0116cdb:	83 ec 08             	sub    $0x8,%esp
f0116cde:	ff 75 08             	pushl  0x8(%ebp)
f0116ce1:	68 b0 c2 11 f0       	push   $0xf011c2b0
f0116ce6:	e8 aa 00 ff ff       	call   f0106d95 <cprintf>
f0116ceb:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0116cee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0116cf5:	83 ec 0c             	sub    $0xc,%esp
f0116cf8:	6a 00                	push   $0x0
f0116cfa:	e8 1f a0 fe ff       	call   f0100d1e <iscons>
f0116cff:	83 c4 10             	add    $0x10,%esp
f0116d02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0116d05:	e8 fb 9f fe ff       	call   f0100d05 <getchar>
f0116d0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0116d0d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116d11:	79 22                	jns    f0116d35 <readline+0x66>
			if (c != -E_EOF)
f0116d13:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0116d17:	0f 84 ad 00 00 00    	je     f0116dca <readline+0xfb>
				cprintf("read error: %e\n", c);
f0116d1d:	83 ec 08             	sub    $0x8,%esp
f0116d20:	ff 75 ec             	pushl  -0x14(%ebp)
f0116d23:	68 b3 c2 11 f0       	push   $0xf011c2b3
f0116d28:	e8 68 00 ff ff       	call   f0106d95 <cprintf>
f0116d2d:	83 c4 10             	add    $0x10,%esp
			return;
f0116d30:	e9 95 00 00 00       	jmp    f0116dca <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0116d35:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0116d39:	7e 34                	jle    f0116d6f <readline+0xa0>
f0116d3b:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0116d42:	7f 2b                	jg     f0116d6f <readline+0xa0>
			if (echoing)
f0116d44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116d48:	74 0e                	je     f0116d58 <readline+0x89>
				cputchar(c);
f0116d4a:	83 ec 0c             	sub    $0xc,%esp
f0116d4d:	ff 75 ec             	pushl  -0x14(%ebp)
f0116d50:	e8 99 9f fe ff       	call   f0100cee <cputchar>
f0116d55:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0116d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d5b:	8d 50 01             	lea    0x1(%eax),%edx
f0116d5e:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0116d61:	89 c2                	mov    %eax,%edx
f0116d63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d66:	01 d0                	add    %edx,%eax
f0116d68:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0116d6b:	88 10                	mov    %dl,(%eax)
f0116d6d:	eb 56                	jmp    f0116dc5 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0116d6f:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0116d73:	75 1f                	jne    f0116d94 <readline+0xc5>
f0116d75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0116d79:	7e 19                	jle    f0116d94 <readline+0xc5>
			if (echoing)
f0116d7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116d7f:	74 0e                	je     f0116d8f <readline+0xc0>
				cputchar(c);
f0116d81:	83 ec 0c             	sub    $0xc,%esp
f0116d84:	ff 75 ec             	pushl  -0x14(%ebp)
f0116d87:	e8 62 9f fe ff       	call   f0100cee <cputchar>
f0116d8c:	83 c4 10             	add    $0x10,%esp

			i--;
f0116d8f:	ff 4d f4             	decl   -0xc(%ebp)
f0116d92:	eb 31                	jmp    f0116dc5 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0116d94:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0116d98:	74 0a                	je     f0116da4 <readline+0xd5>
f0116d9a:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0116d9e:	0f 85 61 ff ff ff    	jne    f0116d05 <readline+0x36>
			if (echoing)
f0116da4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116da8:	74 0e                	je     f0116db8 <readline+0xe9>
				cputchar(c);
f0116daa:	83 ec 0c             	sub    $0xc,%esp
f0116dad:	ff 75 ec             	pushl  -0x14(%ebp)
f0116db0:	e8 39 9f fe ff       	call   f0100cee <cputchar>
f0116db5:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0116db8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116dbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116dbe:	01 d0                	add    %edx,%eax
f0116dc0:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0116dc3:	eb 06                	jmp    f0116dcb <readline+0xfc>
		}
	}
f0116dc5:	e9 3b ff ff ff       	jmp    f0116d05 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0116dca:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0116dcb:	c9                   	leave  
f0116dcc:	c3                   	ret    

f0116dcd <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0116dcd:	55                   	push   %ebp
f0116dce:	89 e5                	mov    %esp,%ebp
f0116dd0:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0116dd3:	e8 1f 35 ff ff       	call   f010a2f7 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0116dd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0116ddc:	74 13                	je     f0116df1 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0116dde:	83 ec 08             	sub    $0x8,%esp
f0116de1:	ff 75 08             	pushl  0x8(%ebp)
f0116de4:	68 b0 c2 11 f0       	push   $0xf011c2b0
f0116de9:	e8 a7 ff fe ff       	call   f0106d95 <cprintf>
f0116dee:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0116df1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0116df8:	83 ec 0c             	sub    $0xc,%esp
f0116dfb:	6a 00                	push   $0x0
f0116dfd:	e8 1c 9f fe ff       	call   f0100d1e <iscons>
f0116e02:	83 c4 10             	add    $0x10,%esp
f0116e05:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0116e08:	e8 f8 9e fe ff       	call   f0100d05 <getchar>
f0116e0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0116e10:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e14:	79 23                	jns    f0116e39 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0116e16:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0116e1a:	74 13                	je     f0116e2f <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0116e1c:	83 ec 08             	sub    $0x8,%esp
f0116e1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0116e22:	68 b3 c2 11 f0       	push   $0xf011c2b3
f0116e27:	e8 69 ff fe ff       	call   f0106d95 <cprintf>
f0116e2c:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0116e2f:	e8 dd 34 ff ff       	call   f010a311 <sys_enable_interrupt>
			return;
f0116e34:	e9 9a 00 00 00       	jmp    f0116ed3 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0116e39:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0116e3d:	7e 34                	jle    f0116e73 <atomic_readline+0xa6>
f0116e3f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0116e46:	7f 2b                	jg     f0116e73 <atomic_readline+0xa6>
			if (echoing)
f0116e48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116e4c:	74 0e                	je     f0116e5c <atomic_readline+0x8f>
				cputchar(c);
f0116e4e:	83 ec 0c             	sub    $0xc,%esp
f0116e51:	ff 75 ec             	pushl  -0x14(%ebp)
f0116e54:	e8 95 9e fe ff       	call   f0100cee <cputchar>
f0116e59:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0116e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116e5f:	8d 50 01             	lea    0x1(%eax),%edx
f0116e62:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0116e65:	89 c2                	mov    %eax,%edx
f0116e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e6a:	01 d0                	add    %edx,%eax
f0116e6c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0116e6f:	88 10                	mov    %dl,(%eax)
f0116e71:	eb 5b                	jmp    f0116ece <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0116e73:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0116e77:	75 1f                	jne    f0116e98 <atomic_readline+0xcb>
f0116e79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0116e7d:	7e 19                	jle    f0116e98 <atomic_readline+0xcb>
			if (echoing)
f0116e7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116e83:	74 0e                	je     f0116e93 <atomic_readline+0xc6>
				cputchar(c);
f0116e85:	83 ec 0c             	sub    $0xc,%esp
f0116e88:	ff 75 ec             	pushl  -0x14(%ebp)
f0116e8b:	e8 5e 9e fe ff       	call   f0100cee <cputchar>
f0116e90:	83 c4 10             	add    $0x10,%esp
			i--;
f0116e93:	ff 4d f4             	decl   -0xc(%ebp)
f0116e96:	eb 36                	jmp    f0116ece <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0116e98:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0116e9c:	74 0a                	je     f0116ea8 <atomic_readline+0xdb>
f0116e9e:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0116ea2:	0f 85 60 ff ff ff    	jne    f0116e08 <atomic_readline+0x3b>
			if (echoing)
f0116ea8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0116eac:	74 0e                	je     f0116ebc <atomic_readline+0xef>
				cputchar(c);
f0116eae:	83 ec 0c             	sub    $0xc,%esp
f0116eb1:	ff 75 ec             	pushl  -0x14(%ebp)
f0116eb4:	e8 35 9e fe ff       	call   f0100cee <cputchar>
f0116eb9:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0116ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ec2:	01 d0                	add    %edx,%eax
f0116ec4:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0116ec7:	e8 45 34 ff ff       	call   f010a311 <sys_enable_interrupt>
			return;
f0116ecc:	eb 05                	jmp    f0116ed3 <atomic_readline+0x106>
		}
	}
f0116ece:	e9 35 ff ff ff       	jmp    f0116e08 <atomic_readline+0x3b>
}
f0116ed3:	c9                   	leave  
f0116ed4:	c3                   	ret    

f0116ed5 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0116ed5:	55                   	push   %ebp
f0116ed6:	89 e5                	mov    %esp,%ebp
f0116ed8:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0116edb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116ee2:	eb 06                	jmp    f0116eea <strlen+0x15>
		n++;
f0116ee4:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0116ee7:	ff 45 08             	incl   0x8(%ebp)
f0116eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0116eed:	8a 00                	mov    (%eax),%al
f0116eef:	84 c0                	test   %al,%al
f0116ef1:	75 f1                	jne    f0116ee4 <strlen+0xf>
		n++;
	return n;
f0116ef3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0116ef6:	c9                   	leave  
f0116ef7:	c3                   	ret    

f0116ef8 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0116ef8:	55                   	push   %ebp
f0116ef9:	89 e5                	mov    %esp,%ebp
f0116efb:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0116efe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116f05:	eb 09                	jmp    f0116f10 <strnlen+0x18>
		n++;
f0116f07:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0116f0a:	ff 45 08             	incl   0x8(%ebp)
f0116f0d:	ff 4d 0c             	decl   0xc(%ebp)
f0116f10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0116f14:	74 09                	je     f0116f1f <strnlen+0x27>
f0116f16:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f19:	8a 00                	mov    (%eax),%al
f0116f1b:	84 c0                	test   %al,%al
f0116f1d:	75 e8                	jne    f0116f07 <strnlen+0xf>
		n++;
	return n;
f0116f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0116f22:	c9                   	leave  
f0116f23:	c3                   	ret    

f0116f24 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0116f24:	55                   	push   %ebp
f0116f25:	89 e5                	mov    %esp,%ebp
f0116f27:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0116f2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0116f30:	90                   	nop
f0116f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f34:	8d 50 01             	lea    0x1(%eax),%edx
f0116f37:	89 55 08             	mov    %edx,0x8(%ebp)
f0116f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116f3d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0116f40:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0116f43:	8a 12                	mov    (%edx),%dl
f0116f45:	88 10                	mov    %dl,(%eax)
f0116f47:	8a 00                	mov    (%eax),%al
f0116f49:	84 c0                	test   %al,%al
f0116f4b:	75 e4                	jne    f0116f31 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0116f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0116f50:	c9                   	leave  
f0116f51:	c3                   	ret    

f0116f52 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0116f52:	55                   	push   %ebp
f0116f53:	89 e5                	mov    %esp,%ebp
f0116f55:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0116f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0116f5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116f65:	eb 1f                	jmp    f0116f86 <strncpy+0x34>
		*dst++ = *src;
f0116f67:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f6a:	8d 50 01             	lea    0x1(%eax),%edx
f0116f6d:	89 55 08             	mov    %edx,0x8(%ebp)
f0116f70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116f73:	8a 12                	mov    (%edx),%dl
f0116f75:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0116f77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f7a:	8a 00                	mov    (%eax),%al
f0116f7c:	84 c0                	test   %al,%al
f0116f7e:	74 03                	je     f0116f83 <strncpy+0x31>
			src++;
f0116f80:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0116f83:	ff 45 fc             	incl   -0x4(%ebp)
f0116f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116f89:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116f8c:	72 d9                	jb     f0116f67 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0116f8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0116f91:	c9                   	leave  
f0116f92:	c3                   	ret    

f0116f93 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0116f93:	55                   	push   %ebp
f0116f94:	89 e5                	mov    %esp,%ebp
f0116f96:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0116f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0116f9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0116fa3:	74 30                	je     f0116fd5 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0116fa5:	eb 16                	jmp    f0116fbd <strlcpy+0x2a>
			*dst++ = *src++;
f0116fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0116faa:	8d 50 01             	lea    0x1(%eax),%edx
f0116fad:	89 55 08             	mov    %edx,0x8(%ebp)
f0116fb0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116fb3:	8d 4a 01             	lea    0x1(%edx),%ecx
f0116fb6:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0116fb9:	8a 12                	mov    (%edx),%dl
f0116fbb:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0116fbd:	ff 4d 10             	decl   0x10(%ebp)
f0116fc0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0116fc4:	74 09                	je     f0116fcf <strlcpy+0x3c>
f0116fc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116fc9:	8a 00                	mov    (%eax),%al
f0116fcb:	84 c0                	test   %al,%al
f0116fcd:	75 d8                	jne    f0116fa7 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0116fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0116fd2:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0116fd5:	8b 55 08             	mov    0x8(%ebp),%edx
f0116fd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116fdb:	29 c2                	sub    %eax,%edx
f0116fdd:	89 d0                	mov    %edx,%eax
}
f0116fdf:	c9                   	leave  
f0116fe0:	c3                   	ret    

f0116fe1 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0116fe1:	55                   	push   %ebp
f0116fe2:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0116fe4:	eb 06                	jmp    f0116fec <strcmp+0xb>
		p++, q++;
f0116fe6:	ff 45 08             	incl   0x8(%ebp)
f0116fe9:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0116fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0116fef:	8a 00                	mov    (%eax),%al
f0116ff1:	84 c0                	test   %al,%al
f0116ff3:	74 0e                	je     f0117003 <strcmp+0x22>
f0116ff5:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ff8:	8a 10                	mov    (%eax),%dl
f0116ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ffd:	8a 00                	mov    (%eax),%al
f0116fff:	38 c2                	cmp    %al,%dl
f0117001:	74 e3                	je     f0116fe6 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0117003:	8b 45 08             	mov    0x8(%ebp),%eax
f0117006:	8a 00                	mov    (%eax),%al
f0117008:	0f b6 d0             	movzbl %al,%edx
f011700b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011700e:	8a 00                	mov    (%eax),%al
f0117010:	0f b6 c0             	movzbl %al,%eax
f0117013:	29 c2                	sub    %eax,%edx
f0117015:	89 d0                	mov    %edx,%eax
}
f0117017:	5d                   	pop    %ebp
f0117018:	c3                   	ret    

f0117019 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0117019:	55                   	push   %ebp
f011701a:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f011701c:	eb 09                	jmp    f0117027 <strncmp+0xe>
		n--, p++, q++;
f011701e:	ff 4d 10             	decl   0x10(%ebp)
f0117021:	ff 45 08             	incl   0x8(%ebp)
f0117024:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0117027:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011702b:	74 17                	je     f0117044 <strncmp+0x2b>
f011702d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117030:	8a 00                	mov    (%eax),%al
f0117032:	84 c0                	test   %al,%al
f0117034:	74 0e                	je     f0117044 <strncmp+0x2b>
f0117036:	8b 45 08             	mov    0x8(%ebp),%eax
f0117039:	8a 10                	mov    (%eax),%dl
f011703b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011703e:	8a 00                	mov    (%eax),%al
f0117040:	38 c2                	cmp    %al,%dl
f0117042:	74 da                	je     f011701e <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0117044:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117048:	75 07                	jne    f0117051 <strncmp+0x38>
		return 0;
f011704a:	b8 00 00 00 00       	mov    $0x0,%eax
f011704f:	eb 14                	jmp    f0117065 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0117051:	8b 45 08             	mov    0x8(%ebp),%eax
f0117054:	8a 00                	mov    (%eax),%al
f0117056:	0f b6 d0             	movzbl %al,%edx
f0117059:	8b 45 0c             	mov    0xc(%ebp),%eax
f011705c:	8a 00                	mov    (%eax),%al
f011705e:	0f b6 c0             	movzbl %al,%eax
f0117061:	29 c2                	sub    %eax,%edx
f0117063:	89 d0                	mov    %edx,%eax
}
f0117065:	5d                   	pop    %ebp
f0117066:	c3                   	ret    

f0117067 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0117067:	55                   	push   %ebp
f0117068:	89 e5                	mov    %esp,%ebp
f011706a:	83 ec 04             	sub    $0x4,%esp
f011706d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117070:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0117073:	eb 12                	jmp    f0117087 <strchr+0x20>
		if (*s == c)
f0117075:	8b 45 08             	mov    0x8(%ebp),%eax
f0117078:	8a 00                	mov    (%eax),%al
f011707a:	3a 45 fc             	cmp    -0x4(%ebp),%al
f011707d:	75 05                	jne    f0117084 <strchr+0x1d>
			return (char *) s;
f011707f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117082:	eb 11                	jmp    f0117095 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0117084:	ff 45 08             	incl   0x8(%ebp)
f0117087:	8b 45 08             	mov    0x8(%ebp),%eax
f011708a:	8a 00                	mov    (%eax),%al
f011708c:	84 c0                	test   %al,%al
f011708e:	75 e5                	jne    f0117075 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0117090:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117095:	c9                   	leave  
f0117096:	c3                   	ret    

f0117097 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0117097:	55                   	push   %ebp
f0117098:	89 e5                	mov    %esp,%ebp
f011709a:	83 ec 04             	sub    $0x4,%esp
f011709d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01170a0:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01170a3:	eb 0d                	jmp    f01170b2 <strfind+0x1b>
		if (*s == c)
f01170a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01170a8:	8a 00                	mov    (%eax),%al
f01170aa:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01170ad:	74 0e                	je     f01170bd <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01170af:	ff 45 08             	incl   0x8(%ebp)
f01170b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01170b5:	8a 00                	mov    (%eax),%al
f01170b7:	84 c0                	test   %al,%al
f01170b9:	75 ea                	jne    f01170a5 <strfind+0xe>
f01170bb:	eb 01                	jmp    f01170be <strfind+0x27>
		if (*s == c)
			break;
f01170bd:	90                   	nop
	return (char *) s;
f01170be:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01170c1:	c9                   	leave  
f01170c2:	c3                   	ret    

f01170c3 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01170c3:	55                   	push   %ebp
f01170c4:	89 e5                	mov    %esp,%ebp
f01170c6:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01170c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01170cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01170cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01170d2:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01170d5:	eb 0e                	jmp    f01170e5 <memset+0x22>
		*p++ = c;
f01170d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01170da:	8d 50 01             	lea    0x1(%eax),%edx
f01170dd:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01170e0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01170e3:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01170e5:	ff 4d f8             	decl   -0x8(%ebp)
f01170e8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01170ec:	79 e9                	jns    f01170d7 <memset+0x14>
		*p++ = c;

	return v;
f01170ee:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01170f1:	c9                   	leave  
f01170f2:	c3                   	ret    

f01170f3 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01170f3:	55                   	push   %ebp
f01170f4:	89 e5                	mov    %esp,%ebp
f01170f6:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01170f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01170fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01170ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0117102:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0117105:	eb 16                	jmp    f011711d <memcpy+0x2a>
		*d++ = *s++;
f0117107:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011710a:	8d 50 01             	lea    0x1(%eax),%edx
f011710d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0117110:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117113:	8d 4a 01             	lea    0x1(%edx),%ecx
f0117116:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0117119:	8a 12                	mov    (%edx),%dl
f011711b:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f011711d:	8b 45 10             	mov    0x10(%ebp),%eax
f0117120:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117123:	89 55 10             	mov    %edx,0x10(%ebp)
f0117126:	85 c0                	test   %eax,%eax
f0117128:	75 dd                	jne    f0117107 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f011712a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011712d:	c9                   	leave  
f011712e:	c3                   	ret    

f011712f <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f011712f:	55                   	push   %ebp
f0117130:	89 e5                	mov    %esp,%ebp
f0117132:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;
	
	s = src;
f0117135:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117138:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011713b:	8b 45 08             	mov    0x8(%ebp),%eax
f011713e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0117141:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117144:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0117147:	73 50                	jae    f0117199 <memmove+0x6a>
f0117149:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011714c:	8b 45 10             	mov    0x10(%ebp),%eax
f011714f:	01 d0                	add    %edx,%eax
f0117151:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0117154:	76 43                	jbe    f0117199 <memmove+0x6a>
		s += n;
f0117156:	8b 45 10             	mov    0x10(%ebp),%eax
f0117159:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f011715c:	8b 45 10             	mov    0x10(%ebp),%eax
f011715f:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0117162:	eb 10                	jmp    f0117174 <memmove+0x45>
			*--d = *--s;
f0117164:	ff 4d f8             	decl   -0x8(%ebp)
f0117167:	ff 4d fc             	decl   -0x4(%ebp)
f011716a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011716d:	8a 10                	mov    (%eax),%dl
f011716f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117172:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0117174:	8b 45 10             	mov    0x10(%ebp),%eax
f0117177:	8d 50 ff             	lea    -0x1(%eax),%edx
f011717a:	89 55 10             	mov    %edx,0x10(%ebp)
f011717d:	85 c0                	test   %eax,%eax
f011717f:	75 e3                	jne    f0117164 <memmove+0x35>
	const char *s;
	char *d;
	
	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0117181:	eb 23                	jmp    f01171a6 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0117183:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117186:	8d 50 01             	lea    0x1(%eax),%edx
f0117189:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011718c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011718f:	8d 4a 01             	lea    0x1(%edx),%ecx
f0117192:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0117195:	8a 12                	mov    (%edx),%dl
f0117197:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0117199:	8b 45 10             	mov    0x10(%ebp),%eax
f011719c:	8d 50 ff             	lea    -0x1(%eax),%edx
f011719f:	89 55 10             	mov    %edx,0x10(%ebp)
f01171a2:	85 c0                	test   %eax,%eax
f01171a4:	75 dd                	jne    f0117183 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01171a6:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01171a9:	c9                   	leave  
f01171aa:	c3                   	ret    

f01171ab <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01171ab:	55                   	push   %ebp
f01171ac:	89 e5                	mov    %esp,%ebp
f01171ae:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01171b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01171b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01171b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01171ba:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f01171bd:	eb 2a                	jmp    f01171e9 <memcmp+0x3e>
		if (*s1 != *s2)
f01171bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01171c2:	8a 10                	mov    (%eax),%dl
f01171c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01171c7:	8a 00                	mov    (%eax),%al
f01171c9:	38 c2                	cmp    %al,%dl
f01171cb:	74 16                	je     f01171e3 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01171cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01171d0:	8a 00                	mov    (%eax),%al
f01171d2:	0f b6 d0             	movzbl %al,%edx
f01171d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01171d8:	8a 00                	mov    (%eax),%al
f01171da:	0f b6 c0             	movzbl %al,%eax
f01171dd:	29 c2                	sub    %eax,%edx
f01171df:	89 d0                	mov    %edx,%eax
f01171e1:	eb 18                	jmp    f01171fb <memcmp+0x50>
		s1++, s2++;
f01171e3:	ff 45 fc             	incl   -0x4(%ebp)
f01171e6:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01171e9:	8b 45 10             	mov    0x10(%ebp),%eax
f01171ec:	8d 50 ff             	lea    -0x1(%eax),%edx
f01171ef:	89 55 10             	mov    %edx,0x10(%ebp)
f01171f2:	85 c0                	test   %eax,%eax
f01171f4:	75 c9                	jne    f01171bf <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01171f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01171fb:	c9                   	leave  
f01171fc:	c3                   	ret    

f01171fd <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01171fd:	55                   	push   %ebp
f01171fe:	89 e5                	mov    %esp,%ebp
f0117200:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0117203:	8b 55 08             	mov    0x8(%ebp),%edx
f0117206:	8b 45 10             	mov    0x10(%ebp),%eax
f0117209:	01 d0                	add    %edx,%eax
f011720b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f011720e:	eb 15                	jmp    f0117225 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0117210:	8b 45 08             	mov    0x8(%ebp),%eax
f0117213:	8a 00                	mov    (%eax),%al
f0117215:	0f b6 d0             	movzbl %al,%edx
f0117218:	8b 45 0c             	mov    0xc(%ebp),%eax
f011721b:	0f b6 c0             	movzbl %al,%eax
f011721e:	39 c2                	cmp    %eax,%edx
f0117220:	74 0d                	je     f011722f <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0117222:	ff 45 08             	incl   0x8(%ebp)
f0117225:	8b 45 08             	mov    0x8(%ebp),%eax
f0117228:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011722b:	72 e3                	jb     f0117210 <memfind+0x13>
f011722d:	eb 01                	jmp    f0117230 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f011722f:	90                   	nop
	return (void *) s;
f0117230:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117233:	c9                   	leave  
f0117234:	c3                   	ret    

f0117235 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0117235:	55                   	push   %ebp
f0117236:	89 e5                	mov    %esp,%ebp
f0117238:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f011723b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0117242:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0117249:	eb 03                	jmp    f011724e <strtol+0x19>
		s++;
f011724b:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011724e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117251:	8a 00                	mov    (%eax),%al
f0117253:	3c 20                	cmp    $0x20,%al
f0117255:	74 f4                	je     f011724b <strtol+0x16>
f0117257:	8b 45 08             	mov    0x8(%ebp),%eax
f011725a:	8a 00                	mov    (%eax),%al
f011725c:	3c 09                	cmp    $0x9,%al
f011725e:	74 eb                	je     f011724b <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0117260:	8b 45 08             	mov    0x8(%ebp),%eax
f0117263:	8a 00                	mov    (%eax),%al
f0117265:	3c 2b                	cmp    $0x2b,%al
f0117267:	75 05                	jne    f011726e <strtol+0x39>
		s++;
f0117269:	ff 45 08             	incl   0x8(%ebp)
f011726c:	eb 13                	jmp    f0117281 <strtol+0x4c>
	else if (*s == '-')
f011726e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117271:	8a 00                	mov    (%eax),%al
f0117273:	3c 2d                	cmp    $0x2d,%al
f0117275:	75 0a                	jne    f0117281 <strtol+0x4c>
		s++, neg = 1;
f0117277:	ff 45 08             	incl   0x8(%ebp)
f011727a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0117281:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117285:	74 06                	je     f011728d <strtol+0x58>
f0117287:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f011728b:	75 20                	jne    f01172ad <strtol+0x78>
f011728d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117290:	8a 00                	mov    (%eax),%al
f0117292:	3c 30                	cmp    $0x30,%al
f0117294:	75 17                	jne    f01172ad <strtol+0x78>
f0117296:	8b 45 08             	mov    0x8(%ebp),%eax
f0117299:	40                   	inc    %eax
f011729a:	8a 00                	mov    (%eax),%al
f011729c:	3c 78                	cmp    $0x78,%al
f011729e:	75 0d                	jne    f01172ad <strtol+0x78>
		s += 2, base = 16;
f01172a0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01172a4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01172ab:	eb 28                	jmp    f01172d5 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01172ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01172b1:	75 15                	jne    f01172c8 <strtol+0x93>
f01172b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01172b6:	8a 00                	mov    (%eax),%al
f01172b8:	3c 30                	cmp    $0x30,%al
f01172ba:	75 0c                	jne    f01172c8 <strtol+0x93>
		s++, base = 8;
f01172bc:	ff 45 08             	incl   0x8(%ebp)
f01172bf:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01172c6:	eb 0d                	jmp    f01172d5 <strtol+0xa0>
	else if (base == 0)
f01172c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01172cc:	75 07                	jne    f01172d5 <strtol+0xa0>
		base = 10;
f01172ce:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01172d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01172d8:	8a 00                	mov    (%eax),%al
f01172da:	3c 2f                	cmp    $0x2f,%al
f01172dc:	7e 19                	jle    f01172f7 <strtol+0xc2>
f01172de:	8b 45 08             	mov    0x8(%ebp),%eax
f01172e1:	8a 00                	mov    (%eax),%al
f01172e3:	3c 39                	cmp    $0x39,%al
f01172e5:	7f 10                	jg     f01172f7 <strtol+0xc2>
			dig = *s - '0';
f01172e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01172ea:	8a 00                	mov    (%eax),%al
f01172ec:	0f be c0             	movsbl %al,%eax
f01172ef:	83 e8 30             	sub    $0x30,%eax
f01172f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01172f5:	eb 42                	jmp    f0117339 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01172f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01172fa:	8a 00                	mov    (%eax),%al
f01172fc:	3c 60                	cmp    $0x60,%al
f01172fe:	7e 19                	jle    f0117319 <strtol+0xe4>
f0117300:	8b 45 08             	mov    0x8(%ebp),%eax
f0117303:	8a 00                	mov    (%eax),%al
f0117305:	3c 7a                	cmp    $0x7a,%al
f0117307:	7f 10                	jg     f0117319 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0117309:	8b 45 08             	mov    0x8(%ebp),%eax
f011730c:	8a 00                	mov    (%eax),%al
f011730e:	0f be c0             	movsbl %al,%eax
f0117311:	83 e8 57             	sub    $0x57,%eax
f0117314:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117317:	eb 20                	jmp    f0117339 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0117319:	8b 45 08             	mov    0x8(%ebp),%eax
f011731c:	8a 00                	mov    (%eax),%al
f011731e:	3c 40                	cmp    $0x40,%al
f0117320:	7e 39                	jle    f011735b <strtol+0x126>
f0117322:	8b 45 08             	mov    0x8(%ebp),%eax
f0117325:	8a 00                	mov    (%eax),%al
f0117327:	3c 5a                	cmp    $0x5a,%al
f0117329:	7f 30                	jg     f011735b <strtol+0x126>
			dig = *s - 'A' + 10;
f011732b:	8b 45 08             	mov    0x8(%ebp),%eax
f011732e:	8a 00                	mov    (%eax),%al
f0117330:	0f be c0             	movsbl %al,%eax
f0117333:	83 e8 37             	sub    $0x37,%eax
f0117336:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0117339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011733c:	3b 45 10             	cmp    0x10(%ebp),%eax
f011733f:	7d 19                	jge    f011735a <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0117341:	ff 45 08             	incl   0x8(%ebp)
f0117344:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117347:	0f af 45 10          	imul   0x10(%ebp),%eax
f011734b:	89 c2                	mov    %eax,%edx
f011734d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117350:	01 d0                	add    %edx,%eax
f0117352:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0117355:	e9 7b ff ff ff       	jmp    f01172d5 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f011735a:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f011735b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011735f:	74 08                	je     f0117369 <strtol+0x134>
		*endptr = (char *) s;
f0117361:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117364:	8b 55 08             	mov    0x8(%ebp),%edx
f0117367:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0117369:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011736d:	74 07                	je     f0117376 <strtol+0x141>
f011736f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117372:	f7 d8                	neg    %eax
f0117374:	eb 03                	jmp    f0117379 <strtol+0x144>
f0117376:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0117379:	c9                   	leave  
f011737a:	c3                   	ret    

f011737b <ltostr>:

void
ltostr(long value, char *str)
{
f011737b:	55                   	push   %ebp
f011737c:	89 e5                	mov    %esp,%ebp
f011737e:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0117381:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0117388:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f011738f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117393:	79 13                	jns    f01173a8 <ltostr+0x2d>
	{
		neg = 1;
f0117395:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f011739c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011739f:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01173a2:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01173a5:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01173a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01173ab:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01173b0:	99                   	cltd   
f01173b1:	f7 f9                	idiv   %ecx
f01173b3:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01173b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01173b9:	8d 50 01             	lea    0x1(%eax),%edx
f01173bc:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01173bf:	89 c2                	mov    %eax,%edx
f01173c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01173c4:	01 d0                	add    %edx,%eax
f01173c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01173c9:	83 c2 30             	add    $0x30,%edx
f01173cc:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01173ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01173d1:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01173d6:	f7 e9                	imul   %ecx
f01173d8:	c1 fa 02             	sar    $0x2,%edx
f01173db:	89 c8                	mov    %ecx,%eax
f01173dd:	c1 f8 1f             	sar    $0x1f,%eax
f01173e0:	29 c2                	sub    %eax,%edx
f01173e2:	89 d0                	mov    %edx,%eax
f01173e4:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f01173e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01173ea:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01173ef:	f7 e9                	imul   %ecx
f01173f1:	c1 fa 02             	sar    $0x2,%edx
f01173f4:	89 c8                	mov    %ecx,%eax
f01173f6:	c1 f8 1f             	sar    $0x1f,%eax
f01173f9:	29 c2                	sub    %eax,%edx
f01173fb:	89 d0                	mov    %edx,%eax
f01173fd:	c1 e0 02             	shl    $0x2,%eax
f0117400:	01 d0                	add    %edx,%eax
f0117402:	01 c0                	add    %eax,%eax
f0117404:	29 c1                	sub    %eax,%ecx
f0117406:	89 ca                	mov    %ecx,%edx
f0117408:	85 d2                	test   %edx,%edx
f011740a:	75 9c                	jne    f01173a8 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f011740c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0117413:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117416:	48                   	dec    %eax
f0117417:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f011741a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011741e:	74 3d                	je     f011745d <ltostr+0xe2>
		start = 1 ;
f0117420:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0117427:	eb 34                	jmp    f011745d <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0117429:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011742c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011742f:	01 d0                	add    %edx,%eax
f0117431:	8a 00                	mov    (%eax),%al
f0117433:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0117436:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117439:	8b 45 0c             	mov    0xc(%ebp),%eax
f011743c:	01 c2                	add    %eax,%edx
f011743e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0117441:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117444:	01 c8                	add    %ecx,%eax
f0117446:	8a 00                	mov    (%eax),%al
f0117448:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f011744a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011744d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117450:	01 c2                	add    %eax,%edx
f0117452:	8a 45 eb             	mov    -0x15(%ebp),%al
f0117455:	88 02                	mov    %al,(%edx)
		start++ ;
f0117457:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f011745a:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f011745d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117460:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117463:	7c c4                	jl     f0117429 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0117465:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0117468:	8b 45 0c             	mov    0xc(%ebp),%eax
f011746b:	01 d0                	add    %edx,%eax
f011746d:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0117470:	90                   	nop
f0117471:	c9                   	leave  
f0117472:	c3                   	ret    

f0117473 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0117473:	55                   	push   %ebp
f0117474:	89 e5                	mov    %esp,%ebp
f0117476:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0117479:	ff 75 08             	pushl  0x8(%ebp)
f011747c:	e8 54 fa ff ff       	call   f0116ed5 <strlen>
f0117481:	83 c4 04             	add    $0x4,%esp
f0117484:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0117487:	ff 75 0c             	pushl  0xc(%ebp)
f011748a:	e8 46 fa ff ff       	call   f0116ed5 <strlen>
f011748f:	83 c4 04             	add    $0x4,%esp
f0117492:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0117495:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f011749c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01174a3:	eb 17                	jmp    f01174bc <strcconcat+0x49>
		final[s] = str1[s] ;
f01174a5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01174a8:	8b 45 10             	mov    0x10(%ebp),%eax
f01174ab:	01 c2                	add    %eax,%edx
f01174ad:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01174b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01174b3:	01 c8                	add    %ecx,%eax
f01174b5:	8a 00                	mov    (%eax),%al
f01174b7:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01174b9:	ff 45 fc             	incl   -0x4(%ebp)
f01174bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01174bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01174c2:	7c e1                	jl     f01174a5 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01174c4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01174cb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01174d2:	eb 1f                	jmp    f01174f3 <strcconcat+0x80>
		final[s++] = str2[i] ;
f01174d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01174d7:	8d 50 01             	lea    0x1(%eax),%edx
f01174da:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01174dd:	89 c2                	mov    %eax,%edx
f01174df:	8b 45 10             	mov    0x10(%ebp),%eax
f01174e2:	01 c2                	add    %eax,%edx
f01174e4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01174e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01174ea:	01 c8                	add    %ecx,%eax
f01174ec:	8a 00                	mov    (%eax),%al
f01174ee:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01174f0:	ff 45 f8             	incl   -0x8(%ebp)
f01174f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01174f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01174f9:	7c d9                	jl     f01174d4 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01174fb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01174fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0117501:	01 d0                	add    %edx,%eax
f0117503:	c6 00 00             	movb   $0x0,(%eax)
}
f0117506:	90                   	nop
f0117507:	c9                   	leave  
f0117508:	c3                   	ret    

f0117509 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0117509:	55                   	push   %ebp
f011750a:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f011750c:	8b 45 14             	mov    0x14(%ebp),%eax
f011750f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0117515:	8b 45 14             	mov    0x14(%ebp),%eax
f0117518:	8b 00                	mov    (%eax),%eax
f011751a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117521:	8b 45 10             	mov    0x10(%ebp),%eax
f0117524:	01 d0                	add    %edx,%eax
f0117526:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011752c:	eb 0c                	jmp    f011753a <strsplit+0x31>
			*string++ = 0;
f011752e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117531:	8d 50 01             	lea    0x1(%eax),%edx
f0117534:	89 55 08             	mov    %edx,0x8(%ebp)
f0117537:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011753a:	8b 45 08             	mov    0x8(%ebp),%eax
f011753d:	8a 00                	mov    (%eax),%al
f011753f:	84 c0                	test   %al,%al
f0117541:	74 18                	je     f011755b <strsplit+0x52>
f0117543:	8b 45 08             	mov    0x8(%ebp),%eax
f0117546:	8a 00                	mov    (%eax),%al
f0117548:	0f be c0             	movsbl %al,%eax
f011754b:	50                   	push   %eax
f011754c:	ff 75 0c             	pushl  0xc(%ebp)
f011754f:	e8 13 fb ff ff       	call   f0117067 <strchr>
f0117554:	83 c4 08             	add    $0x8,%esp
f0117557:	85 c0                	test   %eax,%eax
f0117559:	75 d3                	jne    f011752e <strsplit+0x25>
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
f011755b:	8b 45 08             	mov    0x8(%ebp),%eax
f011755e:	8a 00                	mov    (%eax),%al
f0117560:	84 c0                	test   %al,%al
f0117562:	74 5a                	je     f01175be <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1) 
f0117564:	8b 45 14             	mov    0x14(%ebp),%eax
f0117567:	8b 00                	mov    (%eax),%eax
f0117569:	83 f8 0f             	cmp    $0xf,%eax
f011756c:	75 07                	jne    f0117575 <strsplit+0x6c>
		{
			return 0;
f011756e:	b8 00 00 00 00       	mov    $0x0,%eax
f0117573:	eb 66                	jmp    f01175db <strsplit+0xd2>
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0117575:	8b 45 14             	mov    0x14(%ebp),%eax
f0117578:	8b 00                	mov    (%eax),%eax
f011757a:	8d 48 01             	lea    0x1(%eax),%ecx
f011757d:	8b 55 14             	mov    0x14(%ebp),%edx
f0117580:	89 0a                	mov    %ecx,(%edx)
f0117582:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117589:	8b 45 10             	mov    0x10(%ebp),%eax
f011758c:	01 c2                	add    %eax,%edx
f011758e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117591:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117593:	eb 03                	jmp    f0117598 <strsplit+0x8f>
			string++;
f0117595:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117598:	8b 45 08             	mov    0x8(%ebp),%eax
f011759b:	8a 00                	mov    (%eax),%al
f011759d:	84 c0                	test   %al,%al
f011759f:	74 8b                	je     f011752c <strsplit+0x23>
f01175a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01175a4:	8a 00                	mov    (%eax),%al
f01175a6:	0f be c0             	movsbl %al,%eax
f01175a9:	50                   	push   %eax
f01175aa:	ff 75 0c             	pushl  0xc(%ebp)
f01175ad:	e8 b5 fa ff ff       	call   f0117067 <strchr>
f01175b2:	83 c4 08             	add    $0x8,%esp
f01175b5:	85 c0                	test   %eax,%eax
f01175b7:	74 dc                	je     f0117595 <strsplit+0x8c>
			string++;
	}
f01175b9:	e9 6e ff ff ff       	jmp    f011752c <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01175be:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01175bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01175c2:	8b 00                	mov    (%eax),%eax
f01175c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01175cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01175ce:	01 d0                	add    %edx,%eax
f01175d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01175d6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01175db:	c9                   	leave  
f01175dc:	c3                   	ret    

f01175dd <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01175dd:	55                   	push   %ebp
f01175de:	89 e5                	mov    %esp,%ebp
f01175e0:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01175e3:	90                   	nop
f01175e4:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01175eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01175ee:	89 c2                	mov    %eax,%edx
f01175f0:	ec                   	in     (%dx),%al
f01175f1:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01175f4:	8a 45 f7             	mov    -0x9(%ebp),%al
f01175f7:	0f b6 c0             	movzbl %al,%eax
f01175fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01175fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117600:	25 c0 00 00 00       	and    $0xc0,%eax
f0117605:	83 f8 40             	cmp    $0x40,%eax
f0117608:	75 da                	jne    f01175e4 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f011760a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011760e:	74 11                	je     f0117621 <ide_wait_ready+0x44>
f0117610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117613:	83 e0 21             	and    $0x21,%eax
f0117616:	85 c0                	test   %eax,%eax
f0117618:	74 07                	je     f0117621 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f011761a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f011761f:	eb 05                	jmp    f0117626 <ide_wait_ready+0x49>
	}
	return 0;
f0117621:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117626:	c9                   	leave  
f0117627:	c3                   	ret    

f0117628 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0117628:	55                   	push   %ebp
f0117629:	89 e5                	mov    %esp,%ebp
f011762b:	57                   	push   %edi
f011762c:	53                   	push   %ebx
f011762d:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0117630:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0117637:	76 16                	jbe    f011764f <ide_read+0x27>
f0117639:	68 c3 c2 11 f0       	push   $0xf011c2c3
f011763e:	68 d0 c2 11 f0       	push   $0xf011c2d0
f0117643:	6a 25                	push   $0x25
f0117645:	68 e5 c2 11 f0       	push   $0xf011c2e5
f011764a:	e8 27 8b fe ff       	call   f0100176 <_panic>

	//TODOFUTUREWORK: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f011764f:	83 ec 0c             	sub    $0xc,%esp
f0117652:	6a 00                	push   $0x0
f0117654:	e8 84 ff ff ff       	call   f01175dd <ide_wait_ready>
f0117659:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f011765c:	8b 45 10             	mov    0x10(%ebp),%eax
f011765f:	0f b6 c0             	movzbl %al,%eax
f0117662:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0117669:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011766c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011766f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117672:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0117673:	8b 45 08             	mov    0x8(%ebp),%eax
f0117676:	0f b6 c0             	movzbl %al,%eax
f0117679:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0117680:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0117683:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0117686:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117689:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011768a:	8b 45 08             	mov    0x8(%ebp),%eax
f011768d:	c1 e8 08             	shr    $0x8,%eax
f0117690:	0f b6 c0             	movzbl %al,%eax
f0117693:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011769a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011769d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01176a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01176a3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01176a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01176a7:	c1 e8 10             	shr    $0x10,%eax
f01176aa:	0f b6 c0             	movzbl %al,%eax
f01176ad:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01176b4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01176b7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01176ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01176bd:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01176be:	a1 0c d2 52 f0       	mov    0xf052d20c,%eax
f01176c3:	83 e0 01             	and    $0x1,%eax
f01176c6:	c1 e0 04             	shl    $0x4,%eax
f01176c9:	88 c2                	mov    %al,%dl
f01176cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01176ce:	c1 e8 18             	shr    $0x18,%eax
f01176d1:	83 e0 0f             	and    $0xf,%eax
f01176d4:	09 d0                	or     %edx,%eax
f01176d6:	83 c8 e0             	or     $0xffffffe0,%eax
f01176d9:	0f b6 c0             	movzbl %al,%eax
f01176dc:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01176e3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01176e6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01176e9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176ec:	ee                   	out    %al,(%dx)
f01176ed:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01176f4:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01176f8:	8a 45 d7             	mov    -0x29(%ebp),%al
f01176fb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01176fe:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01176ff:	eb 55                	jmp    f0117756 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0117701:	83 ec 0c             	sub    $0xc,%esp
f0117704:	6a 01                	push   $0x1
f0117706:	e8 d2 fe ff ff       	call   f01175dd <ide_wait_ready>
f011770b:	83 c4 10             	add    $0x10,%esp
f011770e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117711:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0117715:	79 05                	jns    f011771c <ide_read+0xf4>
			return r;
f0117717:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011771a:	eb 45                	jmp    f0117761 <ide_read+0x139>
f011771c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0117723:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117726:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117729:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0117730:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117733:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0117736:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117739:	89 cb                	mov    %ecx,%ebx
f011773b:	89 df                	mov    %ebx,%edi
f011773d:	89 c1                	mov    %eax,%ecx
f011773f:	fc                   	cld    
f0117740:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0117742:	89 c8                	mov    %ecx,%eax
f0117744:	89 fb                	mov    %edi,%ebx
f0117746:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0117749:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011774c:	ff 4d 10             	decl   0x10(%ebp)
f011774f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0117756:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011775a:	75 a5                	jne    f0117701 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f011775c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117761:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117764:	5b                   	pop    %ebx
f0117765:	5f                   	pop    %edi
f0117766:	5d                   	pop    %ebp
f0117767:	c3                   	ret    

f0117768 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0117768:	55                   	push   %ebp
f0117769:	89 e5                	mov    %esp,%ebp
f011776b:	56                   	push   %esi
f011776c:	53                   	push   %ebx
f011776d:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0117770:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0117777:	76 16                	jbe    f011778f <ide_write+0x27>
f0117779:	68 c3 c2 11 f0       	push   $0xf011c2c3
f011777e:	68 d0 c2 11 f0       	push   $0xf011c2d0
f0117783:	6a 3f                	push   $0x3f
f0117785:	68 e5 c2 11 f0       	push   $0xf011c2e5
f011778a:	e8 e7 89 fe ff       	call   f0100176 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f011778f:	83 ec 0c             	sub    $0xc,%esp
f0117792:	6a 00                	push   $0x0
f0117794:	e8 44 fe ff ff       	call   f01175dd <ide_wait_ready>
f0117799:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f011779c:	8b 45 10             	mov    0x10(%ebp),%eax
f011779f:	0f b6 c0             	movzbl %al,%eax
f01177a2:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01177a9:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01177ac:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01177af:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01177b2:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01177b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01177b6:	0f b6 c0             	movzbl %al,%eax
f01177b9:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01177c0:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01177c3:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01177c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01177c9:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01177ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01177cd:	c1 e8 08             	shr    $0x8,%eax
f01177d0:	0f b6 c0             	movzbl %al,%eax
f01177d3:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01177da:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01177dd:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01177e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01177e3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01177e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01177e7:	c1 e8 10             	shr    $0x10,%eax
f01177ea:	0f b6 c0             	movzbl %al,%eax
f01177ed:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01177f4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01177f7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01177fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01177fd:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01177fe:	a1 0c d2 52 f0       	mov    0xf052d20c,%eax
f0117803:	83 e0 01             	and    $0x1,%eax
f0117806:	c1 e0 04             	shl    $0x4,%eax
f0117809:	88 c2                	mov    %al,%dl
f011780b:	8b 45 08             	mov    0x8(%ebp),%eax
f011780e:	c1 e8 18             	shr    $0x18,%eax
f0117811:	83 e0 0f             	and    $0xf,%eax
f0117814:	09 d0                	or     %edx,%eax
f0117816:	83 c8 e0             	or     $0xffffffe0,%eax
f0117819:	0f b6 c0             	movzbl %al,%eax
f011781c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0117823:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0117826:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0117829:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011782c:	ee                   	out    %al,(%dx)
f011782d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0117834:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0117838:	8a 45 d7             	mov    -0x29(%ebp),%al
f011783b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011783e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011783f:	eb 55                	jmp    f0117896 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0117841:	83 ec 0c             	sub    $0xc,%esp
f0117844:	6a 01                	push   $0x1
f0117846:	e8 92 fd ff ff       	call   f01175dd <ide_wait_ready>
f011784b:	83 c4 10             	add    $0x10,%esp
f011784e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117851:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0117855:	79 05                	jns    f011785c <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0117857:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011785a:	eb 45                	jmp    f01178a1 <ide_write+0x139>
f011785c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0117863:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117866:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117869:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0117870:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117873:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0117876:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117879:	89 cb                	mov    %ecx,%ebx
f011787b:	89 de                	mov    %ebx,%esi
f011787d:	89 c1                	mov    %eax,%ecx
f011787f:	fc                   	cld    
f0117880:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0117882:	89 c8                	mov    %ecx,%eax
f0117884:	89 f3                	mov    %esi,%ebx
f0117886:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0117889:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011788c:	ff 4d 10             	decl   0x10(%ebp)
f011788f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0117896:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011789a:	75 a5                	jne    f0117841 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f011789c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01178a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01178a4:	5b                   	pop    %ebx
f01178a5:	5e                   	pop    %esi
f01178a6:	5d                   	pop    %ebp
f01178a7:	c3                   	ret    

f01178a8 <__udivdi3>:
f01178a8:	55                   	push   %ebp
f01178a9:	57                   	push   %edi
f01178aa:	56                   	push   %esi
f01178ab:	53                   	push   %ebx
f01178ac:	83 ec 1c             	sub    $0x1c,%esp
f01178af:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01178b3:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01178b7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01178bb:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01178bf:	89 ca                	mov    %ecx,%edx
f01178c1:	89 f8                	mov    %edi,%eax
f01178c3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01178c7:	85 f6                	test   %esi,%esi
f01178c9:	75 2d                	jne    f01178f8 <__udivdi3+0x50>
f01178cb:	39 cf                	cmp    %ecx,%edi
f01178cd:	77 65                	ja     f0117934 <__udivdi3+0x8c>
f01178cf:	89 fd                	mov    %edi,%ebp
f01178d1:	85 ff                	test   %edi,%edi
f01178d3:	75 0b                	jne    f01178e0 <__udivdi3+0x38>
f01178d5:	b8 01 00 00 00       	mov    $0x1,%eax
f01178da:	31 d2                	xor    %edx,%edx
f01178dc:	f7 f7                	div    %edi
f01178de:	89 c5                	mov    %eax,%ebp
f01178e0:	31 d2                	xor    %edx,%edx
f01178e2:	89 c8                	mov    %ecx,%eax
f01178e4:	f7 f5                	div    %ebp
f01178e6:	89 c1                	mov    %eax,%ecx
f01178e8:	89 d8                	mov    %ebx,%eax
f01178ea:	f7 f5                	div    %ebp
f01178ec:	89 cf                	mov    %ecx,%edi
f01178ee:	89 fa                	mov    %edi,%edx
f01178f0:	83 c4 1c             	add    $0x1c,%esp
f01178f3:	5b                   	pop    %ebx
f01178f4:	5e                   	pop    %esi
f01178f5:	5f                   	pop    %edi
f01178f6:	5d                   	pop    %ebp
f01178f7:	c3                   	ret    
f01178f8:	39 ce                	cmp    %ecx,%esi
f01178fa:	77 28                	ja     f0117924 <__udivdi3+0x7c>
f01178fc:	0f bd fe             	bsr    %esi,%edi
f01178ff:	83 f7 1f             	xor    $0x1f,%edi
f0117902:	75 40                	jne    f0117944 <__udivdi3+0x9c>
f0117904:	39 ce                	cmp    %ecx,%esi
f0117906:	72 0a                	jb     f0117912 <__udivdi3+0x6a>
f0117908:	3b 44 24 08          	cmp    0x8(%esp),%eax
f011790c:	0f 87 9e 00 00 00    	ja     f01179b0 <__udivdi3+0x108>
f0117912:	b8 01 00 00 00       	mov    $0x1,%eax
f0117917:	89 fa                	mov    %edi,%edx
f0117919:	83 c4 1c             	add    $0x1c,%esp
f011791c:	5b                   	pop    %ebx
f011791d:	5e                   	pop    %esi
f011791e:	5f                   	pop    %edi
f011791f:	5d                   	pop    %ebp
f0117920:	c3                   	ret    
f0117921:	8d 76 00             	lea    0x0(%esi),%esi
f0117924:	31 ff                	xor    %edi,%edi
f0117926:	31 c0                	xor    %eax,%eax
f0117928:	89 fa                	mov    %edi,%edx
f011792a:	83 c4 1c             	add    $0x1c,%esp
f011792d:	5b                   	pop    %ebx
f011792e:	5e                   	pop    %esi
f011792f:	5f                   	pop    %edi
f0117930:	5d                   	pop    %ebp
f0117931:	c3                   	ret    
f0117932:	66 90                	xchg   %ax,%ax
f0117934:	89 d8                	mov    %ebx,%eax
f0117936:	f7 f7                	div    %edi
f0117938:	31 ff                	xor    %edi,%edi
f011793a:	89 fa                	mov    %edi,%edx
f011793c:	83 c4 1c             	add    $0x1c,%esp
f011793f:	5b                   	pop    %ebx
f0117940:	5e                   	pop    %esi
f0117941:	5f                   	pop    %edi
f0117942:	5d                   	pop    %ebp
f0117943:	c3                   	ret    
f0117944:	bd 20 00 00 00       	mov    $0x20,%ebp
f0117949:	89 eb                	mov    %ebp,%ebx
f011794b:	29 fb                	sub    %edi,%ebx
f011794d:	89 f9                	mov    %edi,%ecx
f011794f:	d3 e6                	shl    %cl,%esi
f0117951:	89 c5                	mov    %eax,%ebp
f0117953:	88 d9                	mov    %bl,%cl
f0117955:	d3 ed                	shr    %cl,%ebp
f0117957:	89 e9                	mov    %ebp,%ecx
f0117959:	09 f1                	or     %esi,%ecx
f011795b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f011795f:	89 f9                	mov    %edi,%ecx
f0117961:	d3 e0                	shl    %cl,%eax
f0117963:	89 c5                	mov    %eax,%ebp
f0117965:	89 d6                	mov    %edx,%esi
f0117967:	88 d9                	mov    %bl,%cl
f0117969:	d3 ee                	shr    %cl,%esi
f011796b:	89 f9                	mov    %edi,%ecx
f011796d:	d3 e2                	shl    %cl,%edx
f011796f:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117973:	88 d9                	mov    %bl,%cl
f0117975:	d3 e8                	shr    %cl,%eax
f0117977:	09 c2                	or     %eax,%edx
f0117979:	89 d0                	mov    %edx,%eax
f011797b:	89 f2                	mov    %esi,%edx
f011797d:	f7 74 24 0c          	divl   0xc(%esp)
f0117981:	89 d6                	mov    %edx,%esi
f0117983:	89 c3                	mov    %eax,%ebx
f0117985:	f7 e5                	mul    %ebp
f0117987:	39 d6                	cmp    %edx,%esi
f0117989:	72 19                	jb     f01179a4 <__udivdi3+0xfc>
f011798b:	74 0b                	je     f0117998 <__udivdi3+0xf0>
f011798d:	89 d8                	mov    %ebx,%eax
f011798f:	31 ff                	xor    %edi,%edi
f0117991:	e9 58 ff ff ff       	jmp    f01178ee <__udivdi3+0x46>
f0117996:	66 90                	xchg   %ax,%ax
f0117998:	8b 54 24 08          	mov    0x8(%esp),%edx
f011799c:	89 f9                	mov    %edi,%ecx
f011799e:	d3 e2                	shl    %cl,%edx
f01179a0:	39 c2                	cmp    %eax,%edx
f01179a2:	73 e9                	jae    f011798d <__udivdi3+0xe5>
f01179a4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01179a7:	31 ff                	xor    %edi,%edi
f01179a9:	e9 40 ff ff ff       	jmp    f01178ee <__udivdi3+0x46>
f01179ae:	66 90                	xchg   %ax,%ax
f01179b0:	31 c0                	xor    %eax,%eax
f01179b2:	e9 37 ff ff ff       	jmp    f01178ee <__udivdi3+0x46>
f01179b7:	90                   	nop

f01179b8 <__umoddi3>:
f01179b8:	55                   	push   %ebp
f01179b9:	57                   	push   %edi
f01179ba:	56                   	push   %esi
f01179bb:	53                   	push   %ebx
f01179bc:	83 ec 1c             	sub    $0x1c,%esp
f01179bf:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01179c3:	8b 74 24 34          	mov    0x34(%esp),%esi
f01179c7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01179cb:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01179cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01179d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01179d7:	89 f3                	mov    %esi,%ebx
f01179d9:	89 fa                	mov    %edi,%edx
f01179db:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01179df:	89 34 24             	mov    %esi,(%esp)
f01179e2:	85 c0                	test   %eax,%eax
f01179e4:	75 1a                	jne    f0117a00 <__umoddi3+0x48>
f01179e6:	39 f7                	cmp    %esi,%edi
f01179e8:	0f 86 a2 00 00 00    	jbe    f0117a90 <__umoddi3+0xd8>
f01179ee:	89 c8                	mov    %ecx,%eax
f01179f0:	89 f2                	mov    %esi,%edx
f01179f2:	f7 f7                	div    %edi
f01179f4:	89 d0                	mov    %edx,%eax
f01179f6:	31 d2                	xor    %edx,%edx
f01179f8:	83 c4 1c             	add    $0x1c,%esp
f01179fb:	5b                   	pop    %ebx
f01179fc:	5e                   	pop    %esi
f01179fd:	5f                   	pop    %edi
f01179fe:	5d                   	pop    %ebp
f01179ff:	c3                   	ret    
f0117a00:	39 f0                	cmp    %esi,%eax
f0117a02:	0f 87 ac 00 00 00    	ja     f0117ab4 <__umoddi3+0xfc>
f0117a08:	0f bd e8             	bsr    %eax,%ebp
f0117a0b:	83 f5 1f             	xor    $0x1f,%ebp
f0117a0e:	0f 84 ac 00 00 00    	je     f0117ac0 <__umoddi3+0x108>
f0117a14:	bf 20 00 00 00       	mov    $0x20,%edi
f0117a19:	29 ef                	sub    %ebp,%edi
f0117a1b:	89 fe                	mov    %edi,%esi
f0117a1d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0117a21:	89 e9                	mov    %ebp,%ecx
f0117a23:	d3 e0                	shl    %cl,%eax
f0117a25:	89 d7                	mov    %edx,%edi
f0117a27:	89 f1                	mov    %esi,%ecx
f0117a29:	d3 ef                	shr    %cl,%edi
f0117a2b:	09 c7                	or     %eax,%edi
f0117a2d:	89 e9                	mov    %ebp,%ecx
f0117a2f:	d3 e2                	shl    %cl,%edx
f0117a31:	89 14 24             	mov    %edx,(%esp)
f0117a34:	89 d8                	mov    %ebx,%eax
f0117a36:	d3 e0                	shl    %cl,%eax
f0117a38:	89 c2                	mov    %eax,%edx
f0117a3a:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117a3e:	d3 e0                	shl    %cl,%eax
f0117a40:	89 44 24 04          	mov    %eax,0x4(%esp)
f0117a44:	8b 44 24 08          	mov    0x8(%esp),%eax
f0117a48:	89 f1                	mov    %esi,%ecx
f0117a4a:	d3 e8                	shr    %cl,%eax
f0117a4c:	09 d0                	or     %edx,%eax
f0117a4e:	d3 eb                	shr    %cl,%ebx
f0117a50:	89 da                	mov    %ebx,%edx
f0117a52:	f7 f7                	div    %edi
f0117a54:	89 d3                	mov    %edx,%ebx
f0117a56:	f7 24 24             	mull   (%esp)
f0117a59:	89 c6                	mov    %eax,%esi
f0117a5b:	89 d1                	mov    %edx,%ecx
f0117a5d:	39 d3                	cmp    %edx,%ebx
f0117a5f:	0f 82 87 00 00 00    	jb     f0117aec <__umoddi3+0x134>
f0117a65:	0f 84 91 00 00 00    	je     f0117afc <__umoddi3+0x144>
f0117a6b:	8b 54 24 04          	mov    0x4(%esp),%edx
f0117a6f:	29 f2                	sub    %esi,%edx
f0117a71:	19 cb                	sbb    %ecx,%ebx
f0117a73:	89 d8                	mov    %ebx,%eax
f0117a75:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0117a79:	d3 e0                	shl    %cl,%eax
f0117a7b:	89 e9                	mov    %ebp,%ecx
f0117a7d:	d3 ea                	shr    %cl,%edx
f0117a7f:	09 d0                	or     %edx,%eax
f0117a81:	89 e9                	mov    %ebp,%ecx
f0117a83:	d3 eb                	shr    %cl,%ebx
f0117a85:	89 da                	mov    %ebx,%edx
f0117a87:	83 c4 1c             	add    $0x1c,%esp
f0117a8a:	5b                   	pop    %ebx
f0117a8b:	5e                   	pop    %esi
f0117a8c:	5f                   	pop    %edi
f0117a8d:	5d                   	pop    %ebp
f0117a8e:	c3                   	ret    
f0117a8f:	90                   	nop
f0117a90:	89 fd                	mov    %edi,%ebp
f0117a92:	85 ff                	test   %edi,%edi
f0117a94:	75 0b                	jne    f0117aa1 <__umoddi3+0xe9>
f0117a96:	b8 01 00 00 00       	mov    $0x1,%eax
f0117a9b:	31 d2                	xor    %edx,%edx
f0117a9d:	f7 f7                	div    %edi
f0117a9f:	89 c5                	mov    %eax,%ebp
f0117aa1:	89 f0                	mov    %esi,%eax
f0117aa3:	31 d2                	xor    %edx,%edx
f0117aa5:	f7 f5                	div    %ebp
f0117aa7:	89 c8                	mov    %ecx,%eax
f0117aa9:	f7 f5                	div    %ebp
f0117aab:	89 d0                	mov    %edx,%eax
f0117aad:	e9 44 ff ff ff       	jmp    f01179f6 <__umoddi3+0x3e>
f0117ab2:	66 90                	xchg   %ax,%ax
f0117ab4:	89 c8                	mov    %ecx,%eax
f0117ab6:	89 f2                	mov    %esi,%edx
f0117ab8:	83 c4 1c             	add    $0x1c,%esp
f0117abb:	5b                   	pop    %ebx
f0117abc:	5e                   	pop    %esi
f0117abd:	5f                   	pop    %edi
f0117abe:	5d                   	pop    %ebp
f0117abf:	c3                   	ret    
f0117ac0:	3b 04 24             	cmp    (%esp),%eax
f0117ac3:	72 06                	jb     f0117acb <__umoddi3+0x113>
f0117ac5:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0117ac9:	77 0f                	ja     f0117ada <__umoddi3+0x122>
f0117acb:	89 f2                	mov    %esi,%edx
f0117acd:	29 f9                	sub    %edi,%ecx
f0117acf:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0117ad3:	89 14 24             	mov    %edx,(%esp)
f0117ad6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0117ada:	8b 44 24 04          	mov    0x4(%esp),%eax
f0117ade:	8b 14 24             	mov    (%esp),%edx
f0117ae1:	83 c4 1c             	add    $0x1c,%esp
f0117ae4:	5b                   	pop    %ebx
f0117ae5:	5e                   	pop    %esi
f0117ae6:	5f                   	pop    %edi
f0117ae7:	5d                   	pop    %ebp
f0117ae8:	c3                   	ret    
f0117ae9:	8d 76 00             	lea    0x0(%esi),%esi
f0117aec:	2b 04 24             	sub    (%esp),%eax
f0117aef:	19 fa                	sbb    %edi,%edx
f0117af1:	89 d1                	mov    %edx,%ecx
f0117af3:	89 c6                	mov    %eax,%esi
f0117af5:	e9 71 ff ff ff       	jmp    f0117a6b <__umoddi3+0xb3>
f0117afa:	66 90                	xchg   %ax,%ax
f0117afc:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0117b00:	72 ea                	jb     f0117aec <__umoddi3+0x134>
f0117b02:	89 d9                	mov    %ebx,%ecx
f0117b04:	e9 62 ff ff ff       	jmp    f0117a6b <__umoddi3+0xb3>
