
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc df 14 f0       	mov    $0xf014dfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();


//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba 68 58 15 f1       	mov    $0xf1155868,%edx
f010004a:	b8 56 68 53 f0       	mov    $0xf0536856,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 56 68 53 f0       	push   $0xf0536856
f010005e:	e8 45 79 01 00       	call   f01179a8 <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 52 0c 00 00       	call   f0100cbd <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 8d 00 00 00       	call   f01000fd <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 3b 2b 00 00       	call   f0102bb0 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 80 31 00 00       	call   f01031fa <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 9d 35 00 00       	call   f010361c <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 40 61 00 00       	call   f01061c4 <env_init>
	idt_init();
f0100084:	e8 97 6d 00 00       	call   f0106e20 <idt_init>

	setPageReplacmentAlgorithmModifiedCLOCK();
f0100089:	e8 a0 82 00 00       	call   f010832e <setPageReplacmentAlgorithmModifiedCLOCK>
	setUHeapPlacementStrategyNEXTFIT();
f010008e:	e8 2b 52 00 00       	call   f01052be <setUHeapPlacementStrategyNEXTFIT>
	setKHeapPlacementStrategyNEXTFIT();
f0100093:	e8 e2 52 00 00       	call   f010537a <setKHeapPlacementStrategyNEXTFIT>
	enableBuffering(0);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 00                	push   $0x0
f010009d:	e8 20 83 00 00       	call   f01083c2 <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 00                	push   $0x0
f01000aa:	e8 fb 82 00 00       	call   f01083aa <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	//TODODONE: remove this line
	chksch(1);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	6a 01                	push   $0x1
f01000b7:	e8 37 58 01 00       	call   f01158f3 <chksch>
f01000bc:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000bf:	e8 3c 6b 00 00       	call   f0106c00 <pic_init>

	kclock_start(CLOCK_INTERVAL_IN_MS);
f01000c4:	83 ec 0c             	sub    $0xc,%esp
f01000c7:	6a 0a                	push   $0xa
f01000c9:	e8 07 69 00 00       	call   f01069d5 <kclock_start>
f01000ce:	83 c4 10             	add    $0x10,%esp
	sched_init() ;
f01000d1:	e8 88 93 00 00       	call   f010945e <sched_init>

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f01000d6:	83 ec 0c             	sub    $0xc,%esp
f01000d9:	68 00 84 11 f0       	push   $0xf0118400
f01000de:	e8 ec 6c 00 00       	call   f0106dcf <cprintf>
f01000e3:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f01000e6:	83 ec 0c             	sub    $0xc,%esp
f01000e9:	68 2c 84 11 f0       	push   $0xf011842c
f01000ee:	e8 dc 6c 00 00       	call   f0106dcf <cprintf>
f01000f3:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f01000f6:	e8 f9 16 00 00       	call   f01017f4 <run_command_prompt>
	}
f01000fb:	eb d9                	jmp    f01000d6 <FOS_initialize+0x97>

f01000fd <print_welcome_message>:
}


void print_welcome_message()
{
f01000fd:	55                   	push   %ebp
f01000fe:	89 e5                	mov    %esp,%ebp
f0100100:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	68 51 84 11 f0       	push   $0xf0118451
f010010b:	e8 bf 6c 00 00       	call   f0106dcf <cprintf>
f0100110:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100113:	83 ec 0c             	sub    $0xc,%esp
f0100116:	68 58 84 11 f0       	push   $0xf0118458
f010011b:	e8 af 6c 00 00       	call   f0106dcf <cprintf>
f0100120:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100123:	83 ec 0c             	sub    $0xc,%esp
f0100126:	68 a0 84 11 f0       	push   $0xf01184a0
f010012b:	e8 9f 6c 00 00       	call   f0106dcf <cprintf>
f0100130:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 e8 84 11 f0       	push   $0xf01184e8
f010013b:	e8 8f 6c 00 00       	call   f0106dcf <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 a0 84 11 f0       	push   $0xf01184a0
f010014b:	e8 7f 6c 00 00       	call   f0106dcf <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 58 84 11 f0       	push   $0xf0118458
f010015b:	e8 6f 6c 00 00       	call   f0106dcf <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 2d 85 11 f0       	push   $0xf011852d
f010016b:	e8 5f 6c 00 00       	call   f0106dcf <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
}
f0100173:	90                   	nop
f0100174:	c9                   	leave  
f0100175:	c3                   	ret    

f0100176 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100176:	55                   	push   %ebp
f0100177:	89 e5                	mov    %esp,%ebp
f0100179:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010017c:	8b 45 10             	mov    0x10(%ebp),%eax
f010017f:	a3 60 68 53 f0       	mov    %eax,0xf0536860

	va_start(ap, fmt);
f0100184:	8d 45 10             	lea    0x10(%ebp),%eax
f0100187:	83 c0 04             	add    $0x4,%eax
f010018a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010018d:	83 ec 04             	sub    $0x4,%esp
f0100190:	ff 75 0c             	pushl  0xc(%ebp)
f0100193:	ff 75 08             	pushl  0x8(%ebp)
f0100196:	68 32 85 11 f0       	push   $0xf0118532
f010019b:	e8 2f 6c 00 00       	call   f0106dcf <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001a6:	83 ec 08             	sub    $0x8,%esp
f01001a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001ac:	50                   	push   %eax
f01001ad:	e8 f4 6b 00 00       	call   f0106da6 <vcprintf>
f01001b2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001b5:	83 ec 0c             	sub    $0xc,%esp
f01001b8:	68 4b 85 11 f0       	push   $0xf011854b
f01001bd:	e8 0d 6c 00 00       	call   f0106dcf <cprintf>
f01001c2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001c5:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01001ca:	85 c0                	test   %eax,%eax
f01001cc:	74 12                	je     f01001e0 <_panic+0x6a>
f01001ce:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01001d3:	8b 40 54             	mov    0x54(%eax),%eax
f01001d6:	83 f8 02             	cmp    $0x2,%eax
f01001d9:	75 05                	jne    f01001e0 <_panic+0x6a>
	{
		//2015
		env_exit();
f01001db:	e8 7c 66 00 00       	call   f010685c <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f01001e0:	e8 02 91 00 00       	call   f01092e7 <fos_scheduler>

f01001e5 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all ready env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01001e5:	55                   	push   %ebp
f01001e6:	89 e5                	mov    %esp,%ebp
f01001e8:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001eb:	8b 45 10             	mov    0x10(%ebp),%eax
f01001ee:	a3 60 68 53 f0       	mov    %eax,0xf0536860

	va_start(ap, fmt);
f01001f3:	8d 45 10             	lea    0x10(%ebp),%eax
f01001f6:	83 c0 04             	add    $0x4,%eax
f01001f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001fc:	83 ec 04             	sub    $0x4,%esp
f01001ff:	ff 75 0c             	pushl  0xc(%ebp)
f0100202:	ff 75 08             	pushl  0x8(%ebp)
f0100205:	68 32 85 11 f0       	push   $0xf0118532
f010020a:	e8 c0 6b 00 00       	call   f0106dcf <cprintf>
f010020f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100212:	8b 45 10             	mov    0x10(%ebp),%eax
f0100215:	83 ec 08             	sub    $0x8,%esp
f0100218:	ff 75 f4             	pushl  -0xc(%ebp)
f010021b:	50                   	push   %eax
f010021c:	e8 85 6b 00 00       	call   f0106da6 <vcprintf>
f0100221:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100224:	83 ec 0c             	sub    $0xc,%esp
f0100227:	68 4b 85 11 f0       	push   $0xf011854b
f010022c:	e8 9e 6b 00 00       	call   f0106dcf <cprintf>
f0100231:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100234:	e8 71 9d 00 00       	call   f0109faa <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100239:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010023e:	85 c0                	test   %eax,%eax
f0100240:	74 14                	je     f0100256 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100242:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0100247:	8b 40 4c             	mov    0x4c(%eax),%eax
f010024a:	83 ec 0c             	sub    $0xc,%esp
f010024d:	50                   	push   %eax
f010024e:	e8 3e 9b 00 00       	call   f0109d91 <sched_exit_env>
f0100253:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100256:	e8 8c 90 00 00       	call   f01092e7 <fos_scheduler>

f010025b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010025b:	55                   	push   %ebp
f010025c:	89 e5                	mov    %esp,%ebp
f010025e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100261:	8b 45 10             	mov    0x10(%ebp),%eax
f0100264:	a3 60 68 53 f0       	mov    %eax,0xf0536860

	va_start(ap, fmt);
f0100269:	8d 45 10             	lea    0x10(%ebp),%eax
f010026c:	83 c0 04             	add    $0x4,%eax
f010026f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100272:	83 ec 04             	sub    $0x4,%esp
f0100275:	ff 75 0c             	pushl  0xc(%ebp)
f0100278:	ff 75 08             	pushl  0x8(%ebp)
f010027b:	68 32 85 11 f0       	push   $0xf0118532
f0100280:	e8 4a 6b 00 00       	call   f0106dcf <cprintf>
f0100285:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100288:	8b 45 10             	mov    0x10(%ebp),%eax
f010028b:	83 ec 08             	sub    $0x8,%esp
f010028e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100291:	50                   	push   %eax
f0100292:	e8 0f 6b 00 00       	call   f0106da6 <vcprintf>
f0100297:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010029a:	83 ec 0c             	sub    $0xc,%esp
f010029d:	68 4b 85 11 f0       	push   $0xf011854b
f01002a2:	e8 28 6b 00 00       	call   f0106dcf <cprintf>
f01002a7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002aa:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01002af:	85 c0                	test   %eax,%eax
f01002b1:	74 28                	je     f01002db <_panic_into_prompt+0x80>
f01002b3:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01002b8:	8b 40 54             	mov    0x54(%eax),%eax
f01002bb:	83 f8 02             	cmp    $0x2,%eax
f01002be:	75 1b                	jne    f01002db <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002c0:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01002c5:	83 ec 0c             	sub    $0xc,%esp
f01002c8:	50                   	push   %eax
f01002c9:	e8 ce 93 00 00       	call   f010969c <sched_insert_exit>
f01002ce:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01002d1:	c7 05 b0 6a 53 f0 00 	movl   $0x0,0xf0536ab0
f01002d8:	00 00 00 
	}

	lcr3(phys_page_directory);
f01002db:	a1 38 58 55 f0       	mov    0xf0555838,%eax
f01002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002e6:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f01002e9:	c7 05 b8 73 53 f0 00 	movl   $0x0,0xf05373b8
f01002f0:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f01002f3:	83 ec 0c             	sub    $0xc,%esp
f01002f6:	6a 00                	push   $0x0
f01002f8:	e8 f7 14 00 00       	call   f01017f4 <run_command_prompt>
f01002fd:	83 c4 10             	add    $0x10,%esp
f0100300:	eb f1                	jmp    f01002f3 <_panic_into_prompt+0x98>

f0100302 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100302:	55                   	push   %ebp
f0100303:	89 e5                	mov    %esp,%ebp
f0100305:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100308:	8d 45 10             	lea    0x10(%ebp),%eax
f010030b:	83 c0 04             	add    $0x4,%eax
f010030e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100311:	83 ec 04             	sub    $0x4,%esp
f0100314:	ff 75 0c             	pushl  0xc(%ebp)
f0100317:	ff 75 08             	pushl  0x8(%ebp)
f010031a:	68 4d 85 11 f0       	push   $0xf011854d
f010031f:	e8 ab 6a 00 00       	call   f0106dcf <cprintf>
f0100324:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100327:	8b 45 10             	mov    0x10(%ebp),%eax
f010032a:	83 ec 08             	sub    $0x8,%esp
f010032d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100330:	50                   	push   %eax
f0100331:	e8 70 6a 00 00       	call   f0106da6 <vcprintf>
f0100336:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100339:	83 ec 0c             	sub    $0xc,%esp
f010033c:	68 4b 85 11 f0       	push   $0xf011854b
f0100341:	e8 89 6a 00 00       	call   f0106dcf <cprintf>
f0100346:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100349:	90                   	nop
f010034a:	c9                   	leave  
f010034b:	c3                   	ret    

f010034c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010034c:	55                   	push   %ebp
f010034d:	89 e5                	mov    %esp,%ebp
f010034f:	83 ec 10             	sub    $0x10,%esp
f0100352:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100359:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010035c:	89 c2                	mov    %eax,%edx
f010035e:	ec                   	in     (%dx),%al
f010035f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100362:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100365:	0f b6 c0             	movzbl %al,%eax
f0100368:	83 e0 01             	and    $0x1,%eax
f010036b:	85 c0                	test   %eax,%eax
f010036d:	75 07                	jne    f0100376 <serial_proc_data+0x2a>
		return -1;
f010036f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100374:	eb 16                	jmp    f010038c <serial_proc_data+0x40>
f0100376:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010037d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100380:	89 c2                	mov    %eax,%edx
f0100382:	ec                   	in     (%dx),%al
f0100383:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100386:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100389:	0f b6 c0             	movzbl %al,%eax
}
f010038c:	c9                   	leave  
f010038d:	c3                   	ret    

f010038e <serial_intr>:

void
serial_intr(void)
{
f010038e:	55                   	push   %ebp
f010038f:	89 e5                	mov    %esp,%ebp
f0100391:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100394:	a1 84 68 53 f0       	mov    0xf0536884,%eax
f0100399:	85 c0                	test   %eax,%eax
f010039b:	74 10                	je     f01003ad <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f010039d:	83 ec 0c             	sub    $0xc,%esp
f01003a0:	68 4c 03 10 f0       	push   $0xf010034c
f01003a5:	e8 58 07 00 00       	call   f0100b02 <cons_intr>
f01003aa:	83 c4 10             	add    $0x10,%esp
}
f01003ad:	90                   	nop
f01003ae:	c9                   	leave  
f01003af:	c3                   	ret    

f01003b0 <serial_init>:

void
serial_init(void)
{
f01003b0:	55                   	push   %ebp
f01003b1:	89 e5                	mov    %esp,%ebp
f01003b3:	83 ec 40             	sub    $0x40,%esp
f01003b6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003bd:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003c1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003c7:	ee                   	out    %al,(%dx)
f01003c8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003cf:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01003d3:	8a 45 cf             	mov    -0x31(%ebp),%al
f01003d6:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01003d9:	ee                   	out    %al,(%dx)
f01003da:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01003e1:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01003e5:	8a 45 d0             	mov    -0x30(%ebp),%al
f01003e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01003eb:	ee                   	out    %al,(%dx)
f01003ec:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01003f3:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01003f7:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01003fd:	ee                   	out    %al,(%dx)
f01003fe:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100405:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100409:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010040c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010040f:	ee                   	out    %al,(%dx)
f0100410:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100417:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010041b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010041e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100421:	ee                   	out    %al,(%dx)
f0100422:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100429:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010042d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100430:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100433:	ee                   	out    %al,(%dx)
f0100434:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010043b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010043e:	89 c2                	mov    %eax,%edx
f0100440:	ec                   	in     (%dx),%al
f0100441:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100444:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100447:	3c ff                	cmp    $0xff,%al
f0100449:	0f 95 c0             	setne  %al
f010044c:	0f b6 c0             	movzbl %al,%eax
f010044f:	a3 84 68 53 f0       	mov    %eax,0xf0536884
f0100454:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010045b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010045e:	89 c2                	mov    %eax,%edx
f0100460:	ec                   	in     (%dx),%al
f0100461:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100464:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010046b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100474:	90                   	nop
f0100475:	c9                   	leave  
f0100476:	c3                   	ret    

f0100477 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100477:	55                   	push   %ebp
f0100478:	89 e5                	mov    %esp,%ebp
f010047a:	83 ec 20             	sub    $0x20,%esp
f010047d:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100484:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100487:	89 c2                	mov    %eax,%edx
f0100489:	ec                   	in     (%dx),%al
f010048a:	88 45 ec             	mov    %al,-0x14(%ebp)
f010048d:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100494:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100497:	89 c2                	mov    %eax,%edx
f0100499:	ec                   	in     (%dx),%al
f010049a:	88 45 ed             	mov    %al,-0x13(%ebp)
f010049d:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004a7:	89 c2                	mov    %eax,%edx
f01004a9:	ec                   	in     (%dx),%al
f01004aa:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004ad:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004bd:	90                   	nop
f01004be:	c9                   	leave  
f01004bf:	c3                   	ret    

f01004c0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004c0:	55                   	push   %ebp
f01004c1:	89 e5                	mov    %esp,%ebp
f01004c3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004cd:	eb 08                	jmp    f01004d7 <lpt_putc+0x17>
		delay();
f01004cf:	e8 a3 ff ff ff       	call   f0100477 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004d4:	ff 45 fc             	incl   -0x4(%ebp)
f01004d7:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01004de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01004e1:	89 c2                	mov    %eax,%edx
f01004e3:	ec                   	in     (%dx),%al
f01004e4:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01004e7:	8a 45 eb             	mov    -0x15(%ebp),%al
f01004ea:	84 c0                	test   %al,%al
f01004ec:	78 09                	js     f01004f7 <lpt_putc+0x37>
f01004ee:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01004f5:	7e d8                	jle    f01004cf <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01004f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01004fa:	0f b6 c0             	movzbl %al,%eax
f01004fd:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100504:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100507:	8a 45 e8             	mov    -0x18(%ebp),%al
f010050a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010050d:	ee                   	out    %al,(%dx)
f010050e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100515:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100519:	8a 45 e9             	mov    -0x17(%ebp),%al
f010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010051f:	ee                   	out    %al,(%dx)
f0100520:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100527:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010052b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010052e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100531:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100532:	90                   	nop
f0100533:	c9                   	leave  
f0100534:	c3                   	ret    

f0100535 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100535:	55                   	push   %ebp
f0100536:	89 e5                	mov    %esp,%ebp
f0100538:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010053b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100542:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100545:	66 8b 00             	mov    (%eax),%ax
f0100548:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010054c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010054f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100554:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100557:	66 8b 00             	mov    (%eax),%ax
f010055a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010055e:	74 13                	je     f0100573 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100560:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100567:	c7 05 88 68 53 f0 b4 	movl   $0x3b4,0xf0536888
f010056e:	03 00 00 
f0100571:	eb 14                	jmp    f0100587 <cga_init+0x52>
	} else {
		*cp = was;
f0100573:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100576:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010057a:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010057d:	c7 05 88 68 53 f0 d4 	movl   $0x3d4,0xf0536888
f0100584:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100587:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f010058c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010058f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100593:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100596:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100599:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010059a:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f010059f:	40                   	inc    %eax
f01005a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005a6:	89 c2                	mov    %eax,%edx
f01005a8:	ec                   	in     (%dx),%al
f01005a9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005ac:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005af:	0f b6 c0             	movzbl %al,%eax
f01005b2:	c1 e0 08             	shl    $0x8,%eax
f01005b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005b8:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f01005bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005c0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005ca:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005cb:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f01005d0:	40                   	inc    %eax
f01005d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01005d7:	89 c2                	mov    %eax,%edx
f01005d9:	ec                   	in     (%dx),%al
f01005da:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01005dd:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01005e0:	0f b6 c0             	movzbl %al,%eax
f01005e3:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01005e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005e9:	a3 8c 68 53 f0       	mov    %eax,0xf053688c
	crt_pos = pos;
f01005ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005f1:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
}
f01005f7:	90                   	nop
f01005f8:	c9                   	leave  
f01005f9:	c3                   	ret    

f01005fa <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01005fa:	55                   	push   %ebp
f01005fb:	89 e5                	mov    %esp,%ebp
f01005fd:	53                   	push   %ebx
f01005fe:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100601:	8b 45 08             	mov    0x8(%ebp),%eax
f0100604:	b0 00                	mov    $0x0,%al
f0100606:	85 c0                	test   %eax,%eax
f0100608:	75 07                	jne    f0100611 <cga_putc+0x17>
		c |= 0x0700;
f010060a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100611:	8b 45 08             	mov    0x8(%ebp),%eax
f0100614:	0f b6 c0             	movzbl %al,%eax
f0100617:	83 f8 0a             	cmp    $0xa,%eax
f010061a:	74 77                	je     f0100693 <cga_putc+0x99>
f010061c:	83 f8 0a             	cmp    $0xa,%eax
f010061f:	7f 13                	jg     f0100634 <cga_putc+0x3a>
f0100621:	83 f8 08             	cmp    $0x8,%eax
f0100624:	74 2e                	je     f0100654 <cga_putc+0x5a>
f0100626:	83 f8 09             	cmp    $0x9,%eax
f0100629:	0f 84 a8 00 00 00    	je     f01006d7 <cga_putc+0xdd>
f010062f:	e9 22 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
f0100634:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100639:	0f 84 de 00 00 00    	je     f010071d <cga_putc+0x123>
f010063f:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100644:	0f 84 f1 00 00 00    	je     f010073b <cga_putc+0x141>
f010064a:	83 f8 0d             	cmp    $0xd,%eax
f010064d:	74 5d                	je     f01006ac <cga_putc+0xb2>
f010064f:	e9 02 01 00 00       	jmp    f0100756 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100654:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f010065a:	66 85 c0             	test   %ax,%ax
f010065d:	0f 84 4f 01 00 00    	je     f01007b2 <cga_putc+0x1b8>
			crt_pos--;
f0100663:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100669:	48                   	dec    %eax
f010066a:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100670:	8b 15 8c 68 53 f0    	mov    0xf053688c,%edx
f0100676:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f010067c:	0f b7 c0             	movzwl %ax,%eax
f010067f:	01 c0                	add    %eax,%eax
f0100681:	01 c2                	add    %eax,%edx
f0100683:	8b 45 08             	mov    0x8(%ebp),%eax
f0100686:	b0 00                	mov    $0x0,%al
f0100688:	83 c8 20             	or     $0x20,%eax
f010068b:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010068e:	e9 1f 01 00 00       	jmp    f01007b2 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100693:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100699:	83 c0 50             	add    $0x50,%eax
f010069c:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
		text_length = 0;
f01006a2:	c7 05 80 68 53 f0 00 	movl   $0x0,0xf0536880
f01006a9:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006ac:	66 8b 0d 90 68 53 f0 	mov    0xf0536890,%cx
f01006b3:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f01006b9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006be:	ba 00 00 00 00       	mov    $0x0,%edx
f01006c3:	66 f7 f3             	div    %bx
f01006c6:	89 d0                	mov    %edx,%eax
f01006c8:	29 c1                	sub    %eax,%ecx
f01006ca:	89 c8                	mov    %ecx,%eax
f01006cc:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
		break;
f01006d2:	e9 e5 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01006d7:	83 ec 0c             	sub    $0xc,%esp
f01006da:	6a 20                	push   $0x20
f01006dc:	e8 ba 05 00 00       	call   f0100c9b <cons_putc>
f01006e1:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 ad 05 00 00       	call   f0100c9b <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 a0 05 00 00       	call   f0100c9b <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 93 05 00 00       	call   f0100c9b <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 86 05 00 00       	call   f0100c9b <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		break;
f0100718:	e9 9f 00 00 00       	jmp    f01007bc <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f010071d:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100723:	66 85 c0             	test   %ax,%ax
f0100726:	0f 84 89 00 00 00    	je     f01007b5 <cga_putc+0x1bb>
		     crt_pos--;
f010072c:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100732:	48                   	dec    %eax
f0100733:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
		     break;
f0100739:	eb 7a                	jmp    f01007b5 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f010073b:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100741:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100745:	77 71                	ja     f01007b8 <cga_putc+0x1be>
			     crt_pos++;
f0100747:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f010074d:	40                   	inc    %eax
f010074e:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
			     break;
f0100754:	eb 62                	jmp    f01007b8 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100756:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f010075d:	74 5c                	je     f01007bb <cga_putc+0x1c1>
f010075f:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100766:	74 53                	je     f01007bb <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100768:	8b 0d 8c 68 53 f0    	mov    0xf053688c,%ecx
f010076e:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100774:	8d 50 01             	lea    0x1(%eax),%edx
f0100777:	66 89 15 90 68 53 f0 	mov    %dx,0xf0536890
f010077e:	0f b7 c0             	movzwl %ax,%eax
f0100781:	01 c0                	add    %eax,%eax
f0100783:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100786:	8b 45 08             	mov    0x8(%ebp),%eax
f0100789:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f010078c:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	8b 15 80 68 53 f0    	mov    0xf0536880,%edx
f010079b:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007a1:	39 d0                	cmp    %edx,%eax
f01007a3:	7e 16                	jle    f01007bb <cga_putc+0x1c1>
				text_length++;
f01007a5:	a1 80 68 53 f0       	mov    0xf0536880,%eax
f01007aa:	40                   	inc    %eax
f01007ab:	a3 80 68 53 f0       	mov    %eax,0xf0536880
		}
		break;
f01007b0:	eb 09                	jmp    f01007bb <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007b2:	90                   	nop
f01007b3:	eb 07                	jmp    f01007bc <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007b5:	90                   	nop
f01007b6:	eb 04                	jmp    f01007bc <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007b8:	90                   	nop
f01007b9:	eb 01                	jmp    f01007bc <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007bb:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007bc:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f01007c2:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007c6:	76 58                	jbe    f0100820 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007c8:	a1 8c 68 53 f0       	mov    0xf053688c,%eax
f01007cd:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007d3:	a1 8c 68 53 f0       	mov    0xf053688c,%eax
f01007d8:	83 ec 04             	sub    $0x4,%esp
f01007db:	68 00 0f 00 00       	push   $0xf00
f01007e0:	52                   	push   %edx
f01007e1:	50                   	push   %eax
f01007e2:	e8 f1 71 01 00       	call   f01179d8 <memcpy>
f01007e7:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ea:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007f1:	eb 15                	jmp    f0100808 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01007f3:	8b 15 8c 68 53 f0    	mov    0xf053688c,%edx
f01007f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007fc:	01 c0                	add    %eax,%eax
f01007fe:	01 d0                	add    %edx,%eax
f0100800:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100805:	ff 45 f4             	incl   -0xc(%ebp)
f0100808:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f010080f:	7e e2                	jle    f01007f3 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100811:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100817:	83 e8 50             	sub    $0x50,%eax
f010081a:	66 a3 90 68 53 f0    	mov    %ax,0xf0536890
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100820:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f0100825:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100828:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010082c:	8a 45 e0             	mov    -0x20(%ebp),%al
f010082f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100832:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100833:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100839:	66 c1 e8 08          	shr    $0x8,%ax
f010083d:	0f b6 c0             	movzbl %al,%eax
f0100840:	8b 15 88 68 53 f0    	mov    0xf0536888,%edx
f0100846:	42                   	inc    %edx
f0100847:	89 55 ec             	mov    %edx,-0x14(%ebp)
f010084a:	88 45 e1             	mov    %al,-0x1f(%ebp)
f010084d:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100850:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100853:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100854:	a1 88 68 53 f0       	mov    0xf0536888,%eax
f0100859:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010085c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100860:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100863:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100866:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100867:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f010086d:	0f b6 c0             	movzbl %al,%eax
f0100870:	8b 15 88 68 53 f0    	mov    0xf0536888,%edx
f0100876:	42                   	inc    %edx
f0100877:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010087a:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010087d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100880:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100883:	ee                   	out    %al,(%dx)
}
f0100884:	90                   	nop
f0100885:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100888:	c9                   	leave  
f0100889:	c3                   	ret    

f010088a <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010088a:	55                   	push   %ebp
f010088b:	89 e5                	mov    %esp,%ebp
f010088d:	83 ec 28             	sub    $0x28,%esp
f0100890:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010089a:	89 c2                	mov    %eax,%edx
f010089c:	ec                   	in     (%dx),%al
f010089d:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008a0:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008a3:	0f b6 c0             	movzbl %al,%eax
f01008a6:	83 e0 01             	and    $0x1,%eax
f01008a9:	85 c0                	test   %eax,%eax
f01008ab:	75 0a                	jne    f01008b7 <kbd_proc_data+0x2d>
		return -1;
f01008ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008b2:	e9 2a 02 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
f01008b7:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008c1:	89 c2                	mov    %eax,%edx
f01008c3:	ec                   	in     (%dx),%al
f01008c4:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01008c7:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01008ca:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008cd:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008d1:	75 17                	jne    f01008ea <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008d3:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f01008d8:	83 c8 40             	or     $0x40,%eax
f01008db:	a3 a8 6a 53 f0       	mov    %eax,0xf0536aa8
		return 0;
f01008e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01008e5:	e9 f7 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01008ea:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ed:	84 c0                	test   %al,%al
f01008ef:	79 44                	jns    f0100935 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008f1:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f01008f6:	83 e0 40             	and    $0x40,%eax
f01008f9:	85 c0                	test   %eax,%eax
f01008fb:	75 08                	jne    f0100905 <kbd_proc_data+0x7b>
f01008fd:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100900:	83 e0 7f             	and    $0x7f,%eax
f0100903:	eb 03                	jmp    f0100908 <kbd_proc_data+0x7e>
f0100905:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100908:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010090b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010090f:	8a 80 20 e0 14 f0    	mov    -0xfeb1fe0(%eax),%al
f0100915:	83 c8 40             	or     $0x40,%eax
f0100918:	0f b6 c0             	movzbl %al,%eax
f010091b:	f7 d0                	not    %eax
f010091d:	89 c2                	mov    %eax,%edx
f010091f:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100924:	21 d0                	and    %edx,%eax
f0100926:	a3 a8 6a 53 f0       	mov    %eax,0xf0536aa8
		return 0;
f010092b:	b8 00 00 00 00       	mov    $0x0,%eax
f0100930:	e9 ac 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100935:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f010093a:	83 e0 40             	and    $0x40,%eax
f010093d:	85 c0                	test   %eax,%eax
f010093f:	74 11                	je     f0100952 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100941:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100945:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f010094a:	83 e0 bf             	and    $0xffffffbf,%eax
f010094d:	a3 a8 6a 53 f0       	mov    %eax,0xf0536aa8
	}

	shift |= shiftcode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 e0 14 f0    	mov    -0xfeb1fe0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100964:	09 d0                	or     %edx,%eax
f0100966:	a3 a8 6a 53 f0       	mov    %eax,0xf0536aa8
	shift ^= togglecode[data];
f010096b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010096f:	8a 80 20 e1 14 f0    	mov    -0xfeb1ee0(%eax),%al
f0100975:	0f b6 d0             	movzbl %al,%edx
f0100978:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f010097d:	31 d0                	xor    %edx,%eax
f010097f:	a3 a8 6a 53 f0       	mov    %eax,0xf0536aa8

	c = charcode[shift & (CTL | SHIFT)][data];
f0100984:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100989:	83 e0 03             	and    $0x3,%eax
f010098c:	8b 14 85 20 e5 14 f0 	mov    -0xfeb1ae0(,%eax,4),%edx
f0100993:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100997:	01 d0                	add    %edx,%eax
f0100999:	8a 00                	mov    (%eax),%al
f010099b:	0f b6 c0             	movzbl %al,%eax
f010099e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009a1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009a8:	0f 85 9c 00 00 00    	jne    f0100a4a <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009ae:	a1 80 68 53 f0       	mov    0xf0536880,%eax
f01009b3:	85 c0                	test   %eax,%eax
f01009b5:	0f 8e 85 00 00 00    	jle    f0100a40 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009bb:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f01009c1:	0f b7 c0             	movzwl %ax,%eax
f01009c4:	8b 15 80 68 53 f0    	mov    0xf0536880,%edx
f01009ca:	81 c2 80 07 00 00    	add    $0x780,%edx
f01009d0:	39 d0                	cmp    %edx,%eax
f01009d2:	75 0a                	jne    f01009de <kbd_proc_data+0x154>
				return 0;
f01009d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01009d9:	e9 03 01 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			else {
			text_length--;
f01009de:	a1 80 68 53 f0       	mov    0xf0536880,%eax
f01009e3:	48                   	dec    %eax
f01009e4:	a3 80 68 53 f0       	mov    %eax,0xf0536880
				int crt_pos_Length = crt_pos - 1925;
f01009e9:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f01009ef:	0f b7 c0             	movzwl %ax,%eax
f01009f2:	2d 85 07 00 00       	sub    $0x785,%eax
f01009f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f01009fa:	66 a1 90 68 53 f0    	mov    0xf0536890,%ax
f0100a00:	0f b7 c0             	movzwl %ax,%eax
f0100a03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a06:	eb 26                	jmp    f0100a2e <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a08:	8b 15 8c 68 53 f0    	mov    0xf053688c,%edx
f0100a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a11:	01 c0                	add    %eax,%eax
f0100a13:	01 c2                	add    %eax,%edx
f0100a15:	a1 8c 68 53 f0       	mov    0xf053688c,%eax
f0100a1a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a1d:	41                   	inc    %ecx
f0100a1e:	01 c9                	add    %ecx,%ecx
f0100a20:	01 c8                	add    %ecx,%eax
f0100a22:	66 8b 00             	mov    (%eax),%ax
f0100a25:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a28:	ff 45 e8             	incl   -0x18(%ebp)
f0100a2b:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a2e:	a1 80 68 53 f0       	mov    0xf0536880,%eax
f0100a33:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a36:	7e d0                	jle    f0100a08 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a3b:	e9 a1 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a45:	e9 97 00 00 00       	jmp    f0100ae1 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a4a:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100a4f:	83 e0 08             	and    $0x8,%eax
f0100a52:	85 c0                	test   %eax,%eax
f0100a54:	74 22                	je     f0100a78 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a56:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a5a:	7e 0c                	jle    f0100a68 <kbd_proc_data+0x1de>
f0100a5c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a60:	7f 06                	jg     f0100a68 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a62:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a66:	eb 10                	jmp    f0100a78 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100a68:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a6c:	7e 0a                	jle    f0100a78 <kbd_proc_data+0x1ee>
f0100a6e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a72:	7f 04                	jg     f0100a78 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100a74:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100a78:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100a7d:	83 f8 10             	cmp    $0x10,%eax
f0100a80:	75 13                	jne    f0100a95 <kbd_proc_data+0x20b>
f0100a82:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100a86:	7e 0d                	jle    f0100a95 <kbd_proc_data+0x20b>
f0100a88:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100a8c:	7f 07                	jg     f0100a95 <kbd_proc_data+0x20b>
		return 0;
f0100a8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a93:	eb 4c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	if (c == 255)
f0100a95:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100a9c:	75 07                	jne    f0100aa5 <kbd_proc_data+0x21b>
		return 0;
f0100a9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aa3:	eb 3c                	jmp    f0100ae1 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100aa5:	a1 a8 6a 53 f0       	mov    0xf0536aa8,%eax
f0100aaa:	f7 d0                	not    %eax
f0100aac:	83 e0 06             	and    $0x6,%eax
f0100aaf:	85 c0                	test   %eax,%eax
f0100ab1:	75 2b                	jne    f0100ade <kbd_proc_data+0x254>
f0100ab3:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100aba:	75 22                	jne    f0100ade <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100abc:	83 ec 0c             	sub    $0xc,%esp
f0100abf:	68 68 85 11 f0       	push   $0xf0118568
f0100ac4:	e8 06 63 00 00       	call   f0106dcf <cprintf>
f0100ac9:	83 c4 10             	add    $0x10,%esp
f0100acc:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100ad3:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100ad7:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100ada:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100add:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100ae1:	c9                   	leave  
f0100ae2:	c3                   	ret    

f0100ae3 <kbd_intr>:

void
kbd_intr(void)
{
f0100ae3:	55                   	push   %ebp
f0100ae4:	89 e5                	mov    %esp,%ebp
f0100ae6:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ae9:	83 ec 0c             	sub    $0xc,%esp
f0100aec:	68 8a 08 10 f0       	push   $0xf010088a
f0100af1:	e8 0c 00 00 00       	call   f0100b02 <cons_intr>
f0100af6:	83 c4 10             	add    $0x10,%esp
}
f0100af9:	90                   	nop
f0100afa:	c9                   	leave  
f0100afb:	c3                   	ret    

f0100afc <kbd_init>:

void
kbd_init(void)
{
f0100afc:	55                   	push   %ebp
f0100afd:	89 e5                	mov    %esp,%ebp
}
f0100aff:	90                   	nop
f0100b00:	5d                   	pop    %ebp
f0100b01:	c3                   	ret    

f0100b02 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b02:	55                   	push   %ebp
f0100b03:	89 e5                	mov    %esp,%ebp
f0100b05:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b08:	eb 35                	jmp    f0100b3f <cons_intr+0x3d>
		if (c == 0)
f0100b0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b0e:	75 02                	jne    f0100b12 <cons_intr+0x10>
			continue;
f0100b10:	eb 2d                	jmp    f0100b3f <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b12:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100b17:	8d 50 01             	lea    0x1(%eax),%edx
f0100b1a:	89 15 a4 6a 53 f0    	mov    %edx,0xf0536aa4
f0100b20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b23:	88 90 a0 68 53 f0    	mov    %dl,-0xfac9760(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b29:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100b2e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b33:	75 0a                	jne    f0100b3f <cons_intr+0x3d>
			cons.wpos = 0;
f0100b35:	c7 05 a4 6a 53 f0 00 	movl   $0x0,0xf0536aa4
f0100b3c:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b42:	ff d0                	call   *%eax
f0100b44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b47:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b4b:	75 bd                	jne    f0100b0a <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b4d:	90                   	nop
f0100b4e:	c9                   	leave  
f0100b4f:	c3                   	ret    

f0100b50 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b50:	55                   	push   %ebp
f0100b51:	89 e5                	mov    %esp,%ebp
f0100b53:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b56:	e8 33 f8 ff ff       	call   f010038e <serial_intr>
	kbd_intr();
f0100b5b:	e8 83 ff ff ff       	call   f0100ae3 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b60:	8b 15 a0 6a 53 f0    	mov    0xf0536aa0,%edx
f0100b66:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100b6b:	39 c2                	cmp    %eax,%edx
f0100b6d:	74 35                	je     f0100ba4 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b6f:	a1 a0 6a 53 f0       	mov    0xf0536aa0,%eax
f0100b74:	8d 50 01             	lea    0x1(%eax),%edx
f0100b77:	89 15 a0 6a 53 f0    	mov    %edx,0xf0536aa0
f0100b7d:	8a 80 a0 68 53 f0    	mov    -0xfac9760(%eax),%al
f0100b83:	0f b6 c0             	movzbl %al,%eax
f0100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b89:	a1 a0 6a 53 f0       	mov    0xf0536aa0,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc+0x4f>
			cons.rpos = 0;
f0100b95:	c7 05 a0 6a 53 f0 00 	movl   $0x0,0xf0536aa0
f0100b9c:	00 00 00 
		return c;
f0100b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ba2:	eb 05                	jmp    f0100ba9 <cons_getc+0x59>
	}
	return 0;
f0100ba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ba9:	c9                   	leave  
f0100baa:	c3                   	ret    

f0100bab <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100bab:	55                   	push   %ebp
f0100bac:	89 e5                	mov    %esp,%ebp
f0100bae:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bb8:	a1 84 68 53 f0       	mov    0xf0536884,%eax
f0100bbd:	85 c0                	test   %eax,%eax
f0100bbf:	74 41                	je     f0100c02 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bc1:	e8 86 f7 ff ff       	call   f010034c <serial_proc_data>
f0100bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bc9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100bcd:	74 33                	je     f0100c02 <cons_getc2+0x57>
				if (c1 == 0)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 2d                	je     f0100c02 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100bd5:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100bda:	8d 50 01             	lea    0x1(%eax),%edx
f0100bdd:	89 15 a4 6a 53 f0    	mov    %edx,0xf0536aa4
f0100be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100be6:	88 90 a0 68 53 f0    	mov    %dl,-0xfac9760(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100bec:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100bf1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bf6:	75 0a                	jne    f0100c02 <cons_getc2+0x57>
						cons.wpos = 0;
f0100bf8:	c7 05 a4 6a 53 f0 00 	movl   $0x0,0xf0536aa4
f0100bff:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c09:	e8 7c fc ff ff       	call   f010088a <kbd_proc_data>
f0100c0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c11:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c15:	74 33                	je     f0100c4a <cons_getc2+0x9f>
			if (c2 == 0)
f0100c17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c1b:	74 2d                	je     f0100c4a <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c1d:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100c22:	8d 50 01             	lea    0x1(%eax),%edx
f0100c25:	89 15 a4 6a 53 f0    	mov    %edx,0xf0536aa4
f0100c2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c2e:	88 90 a0 68 53 f0    	mov    %dl,-0xfac9760(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c34:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100c39:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c3e:	75 0a                	jne    f0100c4a <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c40:	c7 05 a4 6a 53 f0 00 	movl   $0x0,0xf0536aa4
f0100c47:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c4e:	7e 44                	jle    f0100c94 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c50:	8b 15 a0 6a 53 f0    	mov    0xf0536aa0,%edx
f0100c56:	a1 a4 6a 53 f0       	mov    0xf0536aa4,%eax
f0100c5b:	39 c2                	cmp    %eax,%edx
f0100c5d:	74 35                	je     f0100c94 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c5f:	a1 a0 6a 53 f0       	mov    0xf0536aa0,%eax
f0100c64:	8d 50 01             	lea    0x1(%eax),%edx
f0100c67:	89 15 a0 6a 53 f0    	mov    %edx,0xf0536aa0
f0100c6d:	8a 80 a0 68 53 f0    	mov    -0xfac9760(%eax),%al
f0100c73:	0f b6 c0             	movzbl %al,%eax
f0100c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c79:	a1 a0 6a 53 f0       	mov    0xf0536aa0,%eax
f0100c7e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c83:	75 0a                	jne    f0100c8f <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c85:	c7 05 a0 6a 53 f0 00 	movl   $0x0,0xf0536aa0
f0100c8c:	00 00 00 
			return c;
f0100c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c92:	eb 05                	jmp    f0100c99 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c99:	c9                   	leave  
f0100c9a:	c3                   	ret    

f0100c9b <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c9b:	55                   	push   %ebp
f0100c9c:	89 e5                	mov    %esp,%ebp
f0100c9e:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100ca1:	ff 75 08             	pushl  0x8(%ebp)
f0100ca4:	e8 17 f8 ff ff       	call   f01004c0 <lpt_putc>
f0100ca9:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100cac:	83 ec 0c             	sub    $0xc,%esp
f0100caf:	ff 75 08             	pushl  0x8(%ebp)
f0100cb2:	e8 43 f9 ff ff       	call   f01005fa <cga_putc>
f0100cb7:	83 c4 10             	add    $0x10,%esp
}
f0100cba:	90                   	nop
f0100cbb:	c9                   	leave  
f0100cbc:	c3                   	ret    

f0100cbd <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cbd:	55                   	push   %ebp
f0100cbe:	89 e5                	mov    %esp,%ebp
f0100cc0:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100cc3:	e8 6d f8 ff ff       	call   f0100535 <cga_init>
	kbd_init();
f0100cc8:	e8 2f fe ff ff       	call   f0100afc <kbd_init>
	serial_init();
f0100ccd:	e8 de f6 ff ff       	call   f01003b0 <serial_init>

	if (!serial_exists)
f0100cd2:	a1 84 68 53 f0       	mov    0xf0536884,%eax
f0100cd7:	85 c0                	test   %eax,%eax
f0100cd9:	75 10                	jne    f0100ceb <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100cdb:	83 ec 0c             	sub    $0xc,%esp
f0100cde:	68 74 85 11 f0       	push   $0xf0118574
f0100ce3:	e8 e7 60 00 00       	call   f0106dcf <cprintf>
f0100ce8:	83 c4 10             	add    $0x10,%esp
}
f0100ceb:	90                   	nop
f0100cec:	c9                   	leave  
f0100ced:	c3                   	ret    

f0100cee <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100cee:	55                   	push   %ebp
f0100cef:	89 e5                	mov    %esp,%ebp
f0100cf1:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100cf4:	83 ec 0c             	sub    $0xc,%esp
f0100cf7:	ff 75 08             	pushl  0x8(%ebp)
f0100cfa:	e8 9c ff ff ff       	call   f0100c9b <cons_putc>
f0100cff:	83 c4 10             	add    $0x10,%esp
}
f0100d02:	90                   	nop
f0100d03:	c9                   	leave  
f0100d04:	c3                   	ret    

f0100d05 <getchar>:

int
getchar(void)
{
f0100d05:	55                   	push   %ebp
f0100d06:	89 e5                	mov    %esp,%ebp
f0100d08:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d0b:	e8 40 fe ff ff       	call   f0100b50 <cons_getc>
f0100d10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d17:	74 f2                	je     f0100d0b <getchar+0x6>
		/* do nothing */;
	return c;
f0100d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d1c:	c9                   	leave  
f0100d1d:	c3                   	ret    

f0100d1e <iscons>:

int
iscons(int fdnum)
{
f0100d1e:	55                   	push   %ebp
f0100d1f:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d21:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d26:	5d                   	pop    %ebp
f0100d27:	c3                   	ret    

f0100d28 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d28:	55                   	push   %ebp
f0100d29:	89 e5                	mov    %esp,%ebp
f0100d2b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d31:	c1 e8 0c             	shr    $0xc,%eax
f0100d34:	89 c2                	mov    %eax,%edx
f0100d36:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0100d3b:	39 c2                	cmp    %eax,%edx
f0100d3d:	72 14                	jb     f0100d53 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d3f:	83 ec 04             	sub    $0x4,%esp
f0100d42:	68 94 85 11 f0       	push   $0xf0118594
f0100d47:	6a 75                	push   $0x75
f0100d49:	68 b9 85 11 f0       	push   $0xf01185b9
f0100d4e:	e8 23 f4 ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f0100d53:	8b 15 24 58 55 f0    	mov    0xf0555824,%edx
f0100d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d5c:	c1 e8 0c             	shr    $0xc,%eax
f0100d5f:	89 c1                	mov    %eax,%ecx
f0100d61:	89 c8                	mov    %ecx,%eax
f0100d63:	01 c0                	add    %eax,%eax
f0100d65:	01 c8                	add    %ecx,%eax
f0100d67:	c1 e0 03             	shl    $0x3,%eax
f0100d6a:	01 d0                	add    %edx,%eax
}
f0100d6c:	c9                   	leave  
f0100d6d:	c3                   	ret    

f0100d6e <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100d6e:	55                   	push   %ebp
f0100d6f:	89 e5                	mov    %esp,%ebp
f0100d71:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100d74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100d7b:	eb 10                	jmp    f0100d8d <clearandwritecommand+0x1f>
		cputchar('\b');
f0100d7d:	83 ec 0c             	sub    $0xc,%esp
f0100d80:	6a 08                	push   $0x8
f0100d82:	e8 67 ff ff ff       	call   f0100cee <cputchar>
f0100d87:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100d8a:	ff 45 f4             	incl   -0xc(%ebp)
f0100d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d90:	8b 00                	mov    (%eax),%eax
f0100d92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100d95:	7f e6                	jg     f0100d7d <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100d97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100d9a:	c1 e0 0a             	shl    $0xa,%eax
f0100d9d:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f0100da2:	83 ec 0c             	sub    $0xc,%esp
f0100da5:	50                   	push   %eax
f0100da6:	e8 0f 6a 01 00       	call   f01177ba <strlen>
f0100dab:	83 c4 10             	add    $0x10,%esp
f0100dae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100db1:	83 ec 04             	sub    $0x4,%esp
f0100db4:	68 00 04 00 00       	push   $0x400
f0100db9:	68 00 54 55 f0       	push   $0xf0555400
f0100dbe:	ff 75 10             	pushl  0x10(%ebp)
f0100dc1:	e8 12 6c 01 00       	call   f01179d8 <memcpy>
f0100dc6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dcc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100dd2:	eb 52                	jmp    f0100e26 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dd7:	8b 00                	mov    (%eax),%eax
f0100dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ddc:	c1 e2 0a             	shl    $0xa,%edx
f0100ddf:	01 d0                	add    %edx,%eax
f0100de1:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f0100de6:	8a 00                	mov    (%eax),%al
f0100de8:	0f be c0             	movsbl %al,%eax
f0100deb:	83 ec 0c             	sub    $0xc,%esp
f0100dee:	50                   	push   %eax
f0100def:	e8 fa fe ff ff       	call   f0100cee <cputchar>
f0100df4:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dfa:	8b 00                	mov    (%eax),%eax
f0100dfc:	89 c2                	mov    %eax,%edx
f0100dfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e01:	01 c2                	add    %eax,%edx
f0100e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e06:	8b 00                	mov    (%eax),%eax
f0100e08:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e0b:	c1 e1 0a             	shl    $0xa,%ecx
f0100e0e:	01 c8                	add    %ecx,%eax
f0100e10:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f0100e15:	8a 00                	mov    (%eax),%al
f0100e17:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e1c:	8b 00                	mov    (%eax),%eax
f0100e1e:	8d 50 01             	lea    0x1(%eax),%edx
f0100e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e24:	89 10                	mov    %edx,(%eax)
f0100e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e29:	8b 00                	mov    (%eax),%eax
f0100e2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e2e:	7c a4                	jl     f0100dd4 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e30:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e36:	89 10                	mov    %edx,(%eax)
}
f0100e38:	90                   	nop
f0100e39:	c9                   	leave  
f0100e3a:	c3                   	ret    

f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e3b:	55                   	push   %ebp
f0100e3c:	89 e5                	mov    %esp,%ebp
f0100e3e:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e48:	eb 10                	jmp    f0100e5a <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e4a:	83 ec 0c             	sub    $0xc,%esp
f0100e4d:	6a 08                	push   $0x8
f0100e4f:	e8 9a fe ff ff       	call   f0100cee <cputchar>
f0100e54:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e57:	ff 45 f4             	incl   -0xc(%ebp)
f0100e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e5d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e60:	7c e8                	jl     f0100e4a <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e62:	83 ec 0c             	sub    $0xc,%esp
f0100e65:	ff 75 0c             	pushl  0xc(%ebp)
f0100e68:	e8 4d 69 01 00       	call   f01177ba <strlen>
f0100e6d:	83 c4 10             	add    $0x10,%esp
f0100e70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e73:	83 ec 04             	sub    $0x4,%esp
f0100e76:	68 00 04 00 00       	push   $0x400
f0100e7b:	68 00 54 55 f0       	push   $0xf0555400
f0100e80:	ff 75 10             	pushl  0x10(%ebp)
f0100e83:	e8 50 6b 01 00       	call   f01179d8 <memcpy>
f0100e88:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100e8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100e94:	eb 46                	jmp    f0100edc <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100e96:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e99:	8b 00                	mov    (%eax),%eax
f0100e9b:	89 c2                	mov    %eax,%edx
f0100e9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ea0:	01 d0                	add    %edx,%eax
f0100ea2:	8a 00                	mov    (%eax),%al
f0100ea4:	0f be c0             	movsbl %al,%eax
f0100ea7:	83 ec 0c             	sub    $0xc,%esp
f0100eaa:	50                   	push   %eax
f0100eab:	e8 3e fe ff ff       	call   f0100cee <cputchar>
f0100eb0:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eb6:	8b 00                	mov    (%eax),%eax
f0100eb8:	89 c2                	mov    %eax,%edx
f0100eba:	8b 45 10             	mov    0x10(%ebp),%eax
f0100ebd:	01 c2                	add    %eax,%edx
f0100ebf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ec2:	8b 00                	mov    (%eax),%eax
f0100ec4:	89 c1                	mov    %eax,%ecx
f0100ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ec9:	01 c8                	add    %ecx,%eax
f0100ecb:	8a 00                	mov    (%eax),%al
f0100ecd:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100ecf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed2:	8b 00                	mov    (%eax),%eax
f0100ed4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ed7:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eda:	89 10                	mov    %edx,(%eax)
f0100edc:	8b 45 14             	mov    0x14(%ebp),%eax
f0100edf:	8b 00                	mov    (%eax),%eax
f0100ee1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100ee4:	7c b0                	jl     f0100e96 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100ee6:	8b 45 18             	mov    0x18(%ebp),%eax
f0100ee9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100eec:	89 10                	mov    %edx,(%eax)
}
f0100eee:	90                   	nop
f0100eef:	c9                   	leave  
f0100ef0:	c3                   	ret    

f0100ef1 <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100ef1:	55                   	push   %ebp
f0100ef2:	89 e5                	mov    %esp,%ebp
f0100ef4:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100efe:	eb 21                	jmp    f0100f21 <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f03:	c1 e0 0a             	shl    $0xa,%eax
f0100f06:	05 e0 73 53 f0       	add    $0xf05373e0,%eax
f0100f0b:	83 ec 04             	sub    $0x4,%esp
f0100f0e:	68 00 04 00 00       	push   $0x400
f0100f13:	6a 00                	push   $0x0
f0100f15:	50                   	push   %eax
f0100f16:	e8 8d 6a 01 00       	call   f01179a8 <memset>
f0100f1b:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0100f21:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f25:	7e d9                	jle    f0100f00 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f27:	90                   	nop
f0100f28:	c9                   	leave  
f0100f29:	c3                   	ret    

f0100f2a <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f2a:	55                   	push   %ebp
f0100f2b:	89 e5                	mov    %esp,%ebp
f0100f2d:	57                   	push   %edi
f0100f2e:	53                   	push   %ebx
f0100f2f:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f39:	74 13                	je     f0100f4e <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f3b:	83 ec 08             	sub    $0x8,%esp
f0100f3e:	ff 75 08             	pushl  0x8(%ebp)
f0100f41:	68 9d 8e 11 f0       	push   $0xf0118e9d
f0100f46:	e8 84 5e 00 00       	call   f0106dcf <cprintf>
f0100f4b:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f4e:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0100f53:	40                   	inc    %eax
f0100f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f57:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f5e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f61:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f64:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100f6a:	83 ec 0c             	sub    $0xc,%esp
f0100f6d:	6a 00                	push   $0x0
f0100f6f:	e8 aa fd ff ff       	call   f0100d1e <iscons>
f0100f74:	83 c4 10             	add    $0x10,%esp
f0100f77:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100f7a:	e8 86 fd ff ff       	call   f0100d05 <getchar>
f0100f7f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100f82:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100f85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f88:	39 c2                	cmp    %eax,%edx
f0100f8a:	7e 06                	jle    f0100f92 <command_prompt_readline+0x68>
			lastIndex = i;
f0100f8c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f8f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100f92:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100f96:	79 22                	jns    f0100fba <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100f98:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100f9c:	0f 84 47 08 00 00    	je     f01017e9 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fa2:	83 ec 08             	sub    $0x8,%esp
f0100fa5:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fa8:	68 a0 8e 11 f0       	push   $0xf0118ea0
f0100fad:	e8 1d 5e 00 00       	call   f0106dcf <cprintf>
f0100fb2:	83 c4 10             	add    $0x10,%esp
			return;
f0100fb5:	e9 2f 08 00 00       	jmp    f01017e9 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100fba:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100fc1:	75 24                	jne    f0100fe7 <command_prompt_readline+0xbd>
			if (commandidx)
f0100fc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100fc7:	74 03                	je     f0100fcc <command_prompt_readline+0xa2>
				commandidx--;
f0100fc9:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0100fcc:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0100fcf:	50                   	push   %eax
f0100fd0:	ff 75 0c             	pushl  0xc(%ebp)
f0100fd3:	ff 75 f4             	pushl  -0xc(%ebp)
f0100fd6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0100fd9:	50                   	push   %eax
f0100fda:	e8 8f fd ff ff       	call   f0100d6e <clearandwritecommand>
f0100fdf:	83 c4 10             	add    $0x10,%esp
f0100fe2:	e9 eb 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0100fe7:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f0100fee:	75 35                	jne    f0101025 <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f0100ff0:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0100ff5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0100ff8:	7d 03                	jge    f0100ffd <command_prompt_readline+0xd3>
				commandidx++;
f0100ffa:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0100ffd:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101002:	85 c0                	test   %eax,%eax
f0101004:	0f 88 c8 07 00 00    	js     f01017d2 <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010100a:	8d 45 8c             	lea    -0x74(%ebp),%eax
f010100d:	50                   	push   %eax
f010100e:	ff 75 0c             	pushl  0xc(%ebp)
f0101011:	ff 75 f4             	pushl  -0xc(%ebp)
f0101014:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101017:	50                   	push   %eax
f0101018:	e8 51 fd ff ff       	call   f0100d6e <clearandwritecommand>
f010101d:	83 c4 10             	add    $0x10,%esp
f0101020:	e9 ad 07 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f0101025:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101029:	0f 85 71 05 00 00    	jne    f01015a0 <command_prompt_readline+0x676>
			if (last_c != 9) {
f010102f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101033:	0f 84 0c 05 00 00    	je     f0101545 <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101039:	83 ec 08             	sub    $0x8,%esp
f010103c:	6a 64                	push   $0x64
f010103e:	68 e0 73 53 f0       	push   $0xf05373e0
f0101043:	e8 a9 fe ff ff       	call   f0100ef1 <clear_prefix_list>
f0101048:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f010104b:	83 ec 0c             	sub    $0xc,%esp
f010104e:	ff 75 0c             	pushl  0xc(%ebp)
f0101051:	e8 64 67 01 00       	call   f01177ba <strlen>
f0101056:	83 c4 10             	add    $0x10,%esp
f0101059:	85 c0                	test   %eax,%eax
f010105b:	0f 84 7c 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
f0101061:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101068:	0f 84 6f 07 00 00    	je     f01017dd <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f010106e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101075:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101078:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f010107b:	83 ec 08             	sub    $0x8,%esp
f010107e:	ff 75 0c             	pushl  0xc(%ebp)
f0101081:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101087:	50                   	push   %eax
f0101088:	e8 7c 67 01 00       	call   f0117809 <strcpy>
f010108d:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 1f 67 01 00       	call   f01177ba <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010a4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010aa:	01 d0                	add    %edx,%eax
f01010ac:	8a 00                	mov    (%eax),%al
f01010ae:	3c 20                	cmp    $0x20,%al
f01010b0:	0f 84 2d 07 00 00    	je     f01017e3 <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010b6:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010b9:	50                   	push   %eax
f01010ba:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010c0:	50                   	push   %eax
f01010c1:	68 b0 8e 11 f0       	push   $0xf0118eb0
f01010c6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010cc:	50                   	push   %eax
f01010cd:	e8 1c 6d 01 00       	call   f0117dee <strsplit>
f01010d2:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01010d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f01010dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01010df:	83 f8 01             	cmp    $0x1,%eax
f01010e2:	0f 8e dc 00 00 00    	jle    f01011c4 <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f01010e8:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f01010ee:	83 ec 08             	sub    $0x8,%esp
f01010f1:	68 6f 88 11 f0       	push   $0xf011886f
f01010f6:	50                   	push   %eax
f01010f7:	e8 ca 67 01 00       	call   f01178c6 <strcmp>
f01010fc:	83 c4 10             	add    $0x10,%esp
f01010ff:	85 c0                	test   %eax,%eax
f0101101:	74 21                	je     f0101124 <command_prompt_readline+0x1fa>
f0101103:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101109:	83 ec 08             	sub    $0x8,%esp
f010110c:	68 8e 88 11 f0       	push   $0xf011888e
f0101111:	50                   	push   %eax
f0101112:	e8 af 67 01 00       	call   f01178c6 <strcmp>
f0101117:	83 c4 10             	add    $0x10,%esp
f010111a:	85 c0                	test   %eax,%eax
f010111c:	74 06                	je     f0101124 <command_prompt_readline+0x1fa>
						continue;
f010111e:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010111f:	e9 b9 06 00 00       	jmp    f01017dd <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f0101124:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f010112b:	00 00 00 
f010112e:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101134:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101139:	b8 00 00 00 00       	mov    $0x0,%eax
f010113e:	89 d7                	mov    %edx,%edi
f0101140:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f0101142:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101145:	48                   	dec    %eax
f0101146:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f010114d:	83 ec 0c             	sub    $0xc,%esp
f0101150:	50                   	push   %eax
f0101151:	e8 64 66 01 00       	call   f01177ba <strlen>
f0101156:	83 c4 10             	add    $0x10,%esp
f0101159:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010115c:	29 c2                	sub    %eax,%edx
f010115e:	89 d0                	mov    %edx,%eax
f0101160:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101163:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010116a:	eb 1d                	jmp    f0101189 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f010116c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010116f:	8d 50 01             	lea    0x1(%eax),%edx
f0101172:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101175:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101178:	8b 55 0c             	mov    0xc(%ebp),%edx
f010117b:	01 ca                	add    %ecx,%edx
f010117d:	8a 12                	mov    (%edx),%dl
f010117f:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101186:	ff 45 e0             	incl   -0x20(%ebp)
f0101189:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010118c:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f010118f:	7c db                	jl     f010116c <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101191:	83 ec 08             	sub    $0x8,%esp
f0101194:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f010119a:	50                   	push   %eax
f010119b:	ff 75 0c             	pushl  0xc(%ebp)
f010119e:	e8 66 66 01 00       	call   f0117809 <strcpy>
f01011a3:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011a6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011a9:	48                   	dec    %eax
f01011aa:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011b1:	83 ec 08             	sub    $0x8,%esp
f01011b4:	50                   	push   %eax
f01011b5:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011bb:	50                   	push   %eax
f01011bc:	e8 48 66 01 00       	call   f0117809 <strcpy>
f01011c1:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f01011cb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011ce:	83 f8 01             	cmp    $0x1,%eax
f01011d1:	0f 85 2c 01 00 00    	jne    f0101303 <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01011d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01011de:	e9 0f 01 00 00       	jmp    f01012f2 <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f01011e3:	83 ec 0c             	sub    $0xc,%esp
f01011e6:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011ec:	50                   	push   %eax
f01011ed:	e8 c8 65 01 00       	call   f01177ba <strlen>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 c1                	mov    %eax,%ecx
f01011f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01011fa:	89 d0                	mov    %edx,%eax
f01011fc:	01 c0                	add    %eax,%eax
f01011fe:	01 d0                	add    %edx,%eax
f0101200:	c1 e0 02             	shl    $0x2,%eax
f0101203:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101208:	8b 00                	mov    (%eax),%eax
f010120a:	83 ec 04             	sub    $0x4,%esp
f010120d:	51                   	push   %ecx
f010120e:	50                   	push   %eax
f010120f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101215:	50                   	push   %eax
f0101216:	e8 e3 66 01 00       	call   f01178fe <strncmp>
f010121b:	83 c4 10             	add    $0x10,%esp
f010121e:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f0101221:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0101225:	0f 85 c4 00 00 00    	jne    f01012ef <command_prompt_readline+0x3c5>
							it_str = -1;
f010122b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101232:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101239:	00 00 00 
f010123c:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101242:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101247:	b8 00 00 00 00       	mov    $0x0,%eax
f010124c:	89 d7                	mov    %edx,%edi
f010124e:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101250:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101257:	eb 2d                	jmp    f0101286 <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101259:	ff 45 e4             	incl   -0x1c(%ebp)
f010125c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010125f:	89 d0                	mov    %edx,%eax
f0101261:	01 c0                	add    %eax,%eax
f0101263:	01 d0                	add    %edx,%eax
f0101265:	c1 e0 02             	shl    $0x2,%eax
f0101268:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f010126d:	8b 10                	mov    (%eax),%edx
f010126f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101272:	01 d0                	add    %edx,%eax
f0101274:	8a 00                	mov    (%eax),%al
f0101276:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f010127c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010127f:	01 ca                	add    %ecx,%edx
f0101281:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101283:	ff 45 d4             	incl   -0x2c(%ebp)
f0101286:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101289:	89 d0                	mov    %edx,%eax
f010128b:	01 c0                	add    %eax,%eax
f010128d:	01 d0                	add    %edx,%eax
f010128f:	c1 e0 02             	shl    $0x2,%eax
f0101292:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101297:	8b 00                	mov    (%eax),%eax
f0101299:	83 ec 0c             	sub    $0xc,%esp
f010129c:	50                   	push   %eax
f010129d:	e8 18 65 01 00       	call   f01177ba <strlen>
f01012a2:	83 c4 10             	add    $0x10,%esp
f01012a5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012a8:	7f af                	jg     f0101259 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012ad:	c1 e0 0a             	shl    $0xa,%eax
f01012b0:	05 e0 73 53 f0       	add    $0xf05373e0,%eax
f01012b5:	83 ec 04             	sub    $0x4,%esp
f01012b8:	68 00 04 00 00       	push   $0x400
f01012bd:	6a 00                	push   $0x0
f01012bf:	50                   	push   %eax
f01012c0:	e8 e3 66 01 00       	call   f01179a8 <memset>
f01012c5:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01012c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01012cb:	40                   	inc    %eax
f01012cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01012cf:	c1 e2 0a             	shl    $0xa,%edx
f01012d2:	81 c2 e0 73 53 f0    	add    $0xf05373e0,%edx
f01012d8:	83 ec 04             	sub    $0x4,%esp
f01012db:	50                   	push   %eax
f01012dc:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01012e2:	50                   	push   %eax
f01012e3:	52                   	push   %edx
f01012e4:	e8 4e 65 01 00       	call   f0117837 <strncpy>
f01012e9:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01012ec:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01012ef:	ff 45 d8             	incl   -0x28(%ebp)
f01012f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f5:	83 f8 30             	cmp    $0x30,%eax
f01012f8:	0f 86 e5 fe ff ff    	jbe    f01011e3 <command_prompt_readline+0x2b9>
f01012fe:	e9 73 01 00 00       	jmp    f0101476 <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101303:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010130a:	e9 59 01 00 00       	jmp    f0101468 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f010130f:	83 ec 0c             	sub    $0xc,%esp
f0101312:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101318:	50                   	push   %eax
f0101319:	e8 9c 64 01 00       	call   f01177ba <strlen>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 c1                	mov    %eax,%ecx
f0101323:	8b 1d 14 ea 14 f0    	mov    0xf014ea14,%ebx
f0101329:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010132c:	89 d0                	mov    %edx,%eax
f010132e:	01 c0                	add    %eax,%eax
f0101330:	01 d0                	add    %edx,%eax
f0101332:	c1 e0 02             	shl    $0x2,%eax
f0101335:	01 d8                	add    %ebx,%eax
f0101337:	8b 00                	mov    (%eax),%eax
f0101339:	83 ec 04             	sub    $0x4,%esp
f010133c:	51                   	push   %ecx
f010133d:	50                   	push   %eax
f010133e:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101344:	50                   	push   %eax
f0101345:	e8 b4 65 01 00       	call   f01178fe <strncmp>
f010134a:	83 c4 10             	add    $0x10,%esp
f010134d:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f0101350:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101354:	0f 85 0b 01 00 00    	jne    f0101465 <command_prompt_readline+0x53b>
							it_str = -1;
f010135a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f0101361:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101368:	00 00 00 
f010136b:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101371:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101376:	b8 00 00 00 00       	mov    $0x0,%eax
f010137b:	89 d7                	mov    %edx,%edi
f010137d:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f010137f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101382:	83 f8 01             	cmp    $0x1,%eax
f0101385:	7e 39                	jle    f01013c0 <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101387:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010138e:	eb 1d                	jmp    f01013ad <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f0101390:	ff 45 e4             	incl   -0x1c(%ebp)
f0101393:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0101396:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101399:	01 d0                	add    %edx,%eax
f010139b:	8a 00                	mov    (%eax),%al
f010139d:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013a6:	01 ca                	add    %ecx,%edx
f01013a8:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013aa:	ff 45 cc             	incl   -0x34(%ebp)
f01013ad:	83 ec 0c             	sub    $0xc,%esp
f01013b0:	ff 75 0c             	pushl  0xc(%ebp)
f01013b3:	e8 02 64 01 00       	call   f01177ba <strlen>
f01013b8:	83 c4 10             	add    $0x10,%esp
f01013bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013be:	7f d0                	jg     f0101390 <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013c0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01013c7:	eb 30                	jmp    f01013f9 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f01013c9:	ff 45 e4             	incl   -0x1c(%ebp)
f01013cc:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f01013d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d5:	89 d0                	mov    %edx,%eax
f01013d7:	01 c0                	add    %eax,%eax
f01013d9:	01 d0                	add    %edx,%eax
f01013db:	c1 e0 02             	shl    $0x2,%eax
f01013de:	01 c8                	add    %ecx,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013f6:	ff 45 c8             	incl   -0x38(%ebp)
f01013f9:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f01013ff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101402:	89 d0                	mov    %edx,%eax
f0101404:	01 c0                	add    %eax,%eax
f0101406:	01 d0                	add    %edx,%eax
f0101408:	c1 e0 02             	shl    $0x2,%eax
f010140b:	01 c8                	add    %ecx,%eax
f010140d:	8b 00                	mov    (%eax),%eax
f010140f:	83 ec 0c             	sub    $0xc,%esp
f0101412:	50                   	push   %eax
f0101413:	e8 a2 63 01 00       	call   f01177ba <strlen>
f0101418:	83 c4 10             	add    $0x10,%esp
f010141b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010141e:	7f a9                	jg     f01013c9 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101420:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101423:	c1 e0 0a             	shl    $0xa,%eax
f0101426:	05 e0 73 53 f0       	add    $0xf05373e0,%eax
f010142b:	83 ec 04             	sub    $0x4,%esp
f010142e:	68 00 04 00 00       	push   $0x400
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 6d 65 01 00       	call   f01179a8 <memset>
f010143b:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101441:	40                   	inc    %eax
f0101442:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101445:	c1 e2 0a             	shl    $0xa,%edx
f0101448:	81 c2 e0 73 53 f0    	add    $0xf05373e0,%edx
f010144e:	83 ec 04             	sub    $0x4,%esp
f0101451:	50                   	push   %eax
f0101452:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101458:	50                   	push   %eax
f0101459:	52                   	push   %edx
f010145a:	e8 d8 63 01 00       	call   f0117837 <strncpy>
f010145f:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101462:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101465:	ff 45 d0             	incl   -0x30(%ebp)
f0101468:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f010146d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f0101470:	0f 8c 99 fe ff ff    	jl     f010130f <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101476:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101479:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010147c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101480:	0f 84 4c 03 00 00    	je     f01017d2 <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f0101486:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010148d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101490:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101493:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f010149a:	eb 1f                	jmp    f01014bb <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f010149c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010149f:	8d 50 01             	lea    0x1(%eax),%edx
f01014a2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014a5:	89 c2                	mov    %eax,%edx
f01014a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014aa:	01 c2                	add    %eax,%edx
f01014ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014af:	05 e0 73 53 f0       	add    $0xf05373e0,%eax
f01014b4:	8a 00                	mov    (%eax),%al
f01014b6:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014b8:	ff 45 c4             	incl   -0x3c(%ebp)
f01014bb:	83 ec 0c             	sub    $0xc,%esp
f01014be:	68 e0 73 53 f0       	push   $0xf05373e0
f01014c3:	e8 f2 62 01 00       	call   f01177ba <strlen>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01014ce:	7f cc                	jg     f010149c <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014d0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01014d7:	eb 10                	jmp    f01014e9 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f01014d9:	83 ec 0c             	sub    $0xc,%esp
f01014dc:	6a 08                	push   $0x8
f01014de:	e8 0b f8 ff ff       	call   f0100cee <cputchar>
f01014e3:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014e6:	ff 45 c0             	incl   -0x40(%ebp)
f01014e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01014ec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01014ef:	7c e8                	jl     f01014d9 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01014f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01014f8:	eb 1c                	jmp    f0101516 <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f01014fa:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	01 d0                	add    %edx,%eax
f0101502:	8a 00                	mov    (%eax),%al
f0101504:	0f be c0             	movsbl %al,%eax
f0101507:	83 ec 0c             	sub    $0xc,%esp
f010150a:	50                   	push   %eax
f010150b:	e8 de f7 ff ff       	call   f0100cee <cputchar>
f0101510:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101513:	ff 45 bc             	incl   -0x44(%ebp)
f0101516:	83 ec 0c             	sub    $0xc,%esp
f0101519:	ff 75 0c             	pushl  0xc(%ebp)
f010151c:	e8 99 62 01 00       	call   f01177ba <strlen>
f0101521:	83 c4 10             	add    $0x10,%esp
f0101524:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101527:	7f d1                	jg     f01014fa <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101529:	83 ec 0c             	sub    $0xc,%esp
f010152c:	ff 75 0c             	pushl  0xc(%ebp)
f010152f:	e8 86 62 01 00       	call   f01177ba <strlen>
f0101534:	83 c4 10             	add    $0x10,%esp
f0101537:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010153a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010153d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0101540:	e9 8d 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101545:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101549:	0f 8e 83 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
f010154f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101552:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101555:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101558:	40                   	inc    %eax
f0101559:	99                   	cltd   
f010155a:	f7 7d ec             	idivl  -0x14(%ebp)
f010155d:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f0101560:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101563:	c1 e0 0a             	shl    $0xa,%eax
f0101566:	8d 98 e0 73 53 f0    	lea    -0xfac8c20(%eax),%ebx
f010156c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010156f:	c1 e0 0a             	shl    $0xa,%eax
f0101572:	05 e0 73 53 f0       	add    $0xf05373e0,%eax
f0101577:	83 ec 0c             	sub    $0xc,%esp
f010157a:	50                   	push   %eax
f010157b:	e8 3a 62 01 00       	call   f01177ba <strlen>
f0101580:	83 c4 10             	add    $0x10,%esp
f0101583:	83 ec 0c             	sub    $0xc,%esp
f0101586:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0101589:	52                   	push   %edx
f010158a:	8d 55 90             	lea    -0x70(%ebp),%edx
f010158d:	52                   	push   %edx
f010158e:	ff 75 0c             	pushl  0xc(%ebp)
f0101591:	53                   	push   %ebx
f0101592:	50                   	push   %eax
f0101593:	e8 a3 f8 ff ff       	call   f0100e3b <RoundAutoCompleteCommandWithTheSamePrefix>
f0101598:	83 c4 20             	add    $0x20,%esp
f010159b:	e9 32 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015a0:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015a7:	75 25                	jne    f01015ce <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015ac:	85 c0                	test   %eax,%eax
f01015ae:	0f 8e 1e 02 00 00    	jle    f01017d2 <command_prompt_readline+0x8a8>
				i--;
f01015b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015b7:	48                   	dec    %eax
f01015b8:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015bb:	83 ec 0c             	sub    $0xc,%esp
f01015be:	ff 75 a8             	pushl  -0x58(%ebp)
f01015c1:	e8 28 f7 ff ff       	call   f0100cee <cputchar>
f01015c6:	83 c4 10             	add    $0x10,%esp
f01015c9:	e9 04 02 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f01015ce:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f01015d5:	75 28                	jne    f01015ff <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f01015d7:	8b 55 90             	mov    -0x70(%ebp),%edx
f01015da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01015dd:	39 c2                	cmp    %eax,%edx
f01015df:	0f 8d ed 01 00 00    	jge    f01017d2 <command_prompt_readline+0x8a8>
				i++;
f01015e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015e8:	40                   	inc    %eax
f01015e9:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015ec:	83 ec 0c             	sub    $0xc,%esp
f01015ef:	ff 75 a8             	pushl  -0x58(%ebp)
f01015f2:	e8 f7 f6 ff ff       	call   f0100cee <cputchar>
f01015f7:	83 c4 10             	add    $0x10,%esp
f01015fa:	e9 d3 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f01015ff:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f0101606:	75 3d                	jne    f0101645 <command_prompt_readline+0x71b>
f0101608:	8b 45 90             	mov    -0x70(%ebp),%eax
f010160b:	85 c0                	test   %eax,%eax
f010160d:	7e 36                	jle    f0101645 <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f010160f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101612:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0101615:	eb 1a                	jmp    f0101631 <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101617:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010161a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010161d:	01 c2                	add    %eax,%edx
f010161f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0101622:	8d 48 01             	lea    0x1(%eax),%ecx
f0101625:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101628:	01 c8                	add    %ecx,%eax
f010162a:	8a 00                	mov    (%eax),%al
f010162c:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f010162e:	ff 45 b8             	incl   -0x48(%ebp)
f0101631:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101634:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101637:	7e de                	jle    f0101617 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101639:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010163c:	48                   	dec    %eax
f010163d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101640:	e9 8d 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101645:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101649:	7e 51                	jle    f010169c <command_prompt_readline+0x772>
f010164b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010164e:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101653:	7f 47                	jg     f010169c <command_prompt_readline+0x772>
f0101655:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f010165c:	74 3e                	je     f010169c <command_prompt_readline+0x772>
f010165e:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f0101665:	74 35                	je     f010169c <command_prompt_readline+0x772>
			if (echoing)
f0101667:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f010166b:	74 0e                	je     f010167b <command_prompt_readline+0x751>
				cputchar(c);
f010166d:	83 ec 0c             	sub    $0xc,%esp
f0101670:	ff 75 a8             	pushl  -0x58(%ebp)
f0101673:	e8 76 f6 ff ff       	call   f0100cee <cputchar>
f0101678:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f010167b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010167e:	8d 50 01             	lea    0x1(%eax),%edx
f0101681:	89 55 90             	mov    %edx,-0x70(%ebp)
f0101684:	89 c2                	mov    %eax,%edx
f0101686:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101689:	01 d0                	add    %edx,%eax
f010168b:	8b 55 a8             	mov    -0x58(%ebp),%edx
f010168e:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101690:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101693:	40                   	inc    %eax
f0101694:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101697:	e9 36 01 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f010169c:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016a0:	75 51                	jne    f01016f3 <command_prompt_readline+0x7c9>
f01016a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016a5:	85 c0                	test   %eax,%eax
f01016a7:	7e 4a                	jle    f01016f3 <command_prompt_readline+0x7c9>

			if (echoing)
f01016a9:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016ad:	74 0e                	je     f01016bd <command_prompt_readline+0x793>
				cputchar(c);
f01016af:	83 ec 0c             	sub    $0xc,%esp
f01016b2:	ff 75 a8             	pushl  -0x58(%ebp)
f01016b5:	e8 34 f6 ff ff       	call   f0100cee <cputchar>
f01016ba:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016c3:	eb 1a                	jmp    f01016df <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016c8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01016cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ce:	01 c2                	add    %eax,%edx
f01016d0:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01016d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016d6:	01 c8                	add    %ecx,%eax
f01016d8:	8a 00                	mov    (%eax),%al
f01016da:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f01016dc:	ff 45 b4             	incl   -0x4c(%ebp)
f01016df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016e2:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f01016e5:	7e de                	jle    f01016c5 <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f01016e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016ea:	48                   	dec    %eax
f01016eb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01016ee:	e9 df 00 00 00       	jmp    f01017d2 <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f01016f3:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f01016f7:	74 0a                	je     f0101703 <command_prompt_readline+0x7d9>
f01016f9:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f01016fd:	0f 85 cf 00 00 00    	jne    f01017d2 <command_prompt_readline+0x8a8>

			if (echoing)
f0101703:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101707:	74 0e                	je     f0101717 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101709:	83 ec 0c             	sub    $0xc,%esp
f010170c:	ff 75 a8             	pushl  -0x58(%ebp)
f010170f:	e8 da f5 ff ff       	call   f0100cee <cputchar>
f0101714:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101717:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010171a:	89 c2                	mov    %eax,%edx
f010171c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010171f:	01 d0                	add    %edx,%eax
f0101721:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101724:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101729:	83 f8 13             	cmp    $0x13,%eax
f010172c:	75 56                	jne    f0101784 <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010172e:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101735:	eb 2d                	jmp    f0101764 <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101737:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010173a:	40                   	inc    %eax
f010173b:	c1 e0 0a             	shl    $0xa,%eax
f010173e:	8d 90 e0 03 55 f0    	lea    -0xfaafc20(%eax),%edx
f0101744:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101747:	c1 e0 0a             	shl    $0xa,%eax
f010174a:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f010174f:	83 ec 04             	sub    $0x4,%esp
f0101752:	68 00 04 00 00       	push   $0x400
f0101757:	52                   	push   %edx
f0101758:	50                   	push   %eax
f0101759:	e8 7a 62 01 00       	call   f01179d8 <memcpy>
f010175e:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101761:	ff 45 b0             	incl   -0x50(%ebp)
f0101764:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f0101768:	7e cd                	jle    f0101737 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f010176a:	83 ec 04             	sub    $0x4,%esp
f010176d:	68 00 04 00 00       	push   $0x400
f0101772:	ff 75 0c             	pushl  0xc(%ebp)
f0101775:	68 e0 4f 55 f0       	push   $0xf0554fe0
f010177a:	e8 59 62 01 00       	call   f01179d8 <memcpy>
f010177f:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101782:	eb 68                	jmp    f01017ec <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101784:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f0101789:	c1 e0 0a             	shl    $0xa,%eax
f010178c:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f0101791:	83 ec 08             	sub    $0x8,%esp
f0101794:	ff 75 0c             	pushl  0xc(%ebp)
f0101797:	50                   	push   %eax
f0101798:	e8 29 61 01 00       	call   f01178c6 <strcmp>
f010179d:	83 c4 10             	add    $0x10,%esp
f01017a0:	85 c0                	test   %eax,%eax
f01017a2:	74 48                	je     f01017ec <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017a4:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f01017a9:	40                   	inc    %eax
f01017aa:	a3 8c e7 14 f0       	mov    %eax,0xf014e78c
f01017af:	a1 8c e7 14 f0       	mov    0xf014e78c,%eax
f01017b4:	c1 e0 0a             	shl    $0xa,%eax
f01017b7:	05 e0 03 55 f0       	add    $0xf05503e0,%eax
f01017bc:	83 ec 04             	sub    $0x4,%esp
f01017bf:	68 00 04 00 00       	push   $0x400
f01017c4:	ff 75 0c             	pushl  0xc(%ebp)
f01017c7:	50                   	push   %eax
f01017c8:	e8 0b 62 01 00       	call   f01179d8 <memcpy>
f01017cd:	83 c4 10             	add    $0x10,%esp
			}
			return;
f01017d0:	eb 1a                	jmp    f01017ec <command_prompt_readline+0x8c2>

		}
		last_c = c;
f01017d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01017d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01017d8:	e9 9d f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01017dd:	90                   	nop
f01017de:	e9 97 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f01017e3:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f01017e4:	e9 91 f7 ff ff       	jmp    f0100f7a <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01017e9:	90                   	nop
f01017ea:	eb 01                	jmp    f01017ed <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f01017ec:	90                   	nop

		}
		last_c = c;
	}
}
f01017ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01017f0:	5b                   	pop    %ebx
f01017f1:	5f                   	pop    %edi
f01017f2:	5d                   	pop    %ebp
f01017f3:	c3                   	ret    

f01017f4 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f01017f4:	55                   	push   %ebp
f01017f5:	89 e5                	mov    %esp,%ebp
f01017f7:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f01017fd:	83 ec 04             	sub    $0x4,%esp
f0101800:	68 00 04 00 00       	push   $0x400
f0101805:	6a 00                	push   $0x0
f0101807:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010180d:	50                   	push   %eax
f010180e:	e8 95 61 01 00       	call   f01179a8 <memset>
f0101813:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101816:	83 ec 08             	sub    $0x8,%esp
f0101819:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010181f:	50                   	push   %eax
f0101820:	68 b5 8e 11 f0       	push   $0xf0118eb5
f0101825:	e8 00 f7 ff ff       	call   f0100f2a <command_prompt_readline>
f010182a:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f010182d:	83 ec 0c             	sub    $0xc,%esp
f0101830:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101836:	50                   	push   %eax
f0101837:	e8 0d 00 00 00       	call   f0101849 <execute_command>
f010183c:	83 c4 10             	add    $0x10,%esp
f010183f:	85 c0                	test   %eax,%eax
f0101841:	78 02                	js     f0101845 <run_command_prompt+0x51>
				break;
	}
f0101843:	eb b8                	jmp    f01017fd <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101845:	90                   	nop
	}
}
f0101846:	90                   	nop
f0101847:	c9                   	leave  
f0101848:	c3                   	ret    

f0101849 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101849:	55                   	push   %ebp
f010184a:	89 e5                	mov    %esp,%ebp
f010184c:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f010184f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0101852:	50                   	push   %eax
f0101853:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0101856:	50                   	push   %eax
f0101857:	68 b0 8e 11 f0       	push   $0xf0118eb0
f010185c:	ff 75 08             	pushl  0x8(%ebp)
f010185f:	e8 8a 65 01 00       	call   f0117dee <strsplit>
f0101864:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101867:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010186a:	85 c0                	test   %eax,%eax
f010186c:	75 0a                	jne    f0101878 <execute_command+0x2f>
		return 0;
f010186e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101873:	e9 95 00 00 00       	jmp    f010190d <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0101878:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010187f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101886:	eb 33                	jmp    f01018bb <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0101888:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010188b:	89 d0                	mov    %edx,%eax
f010188d:	01 c0                	add    %eax,%eax
f010188f:	01 d0                	add    %edx,%eax
f0101891:	c1 e0 02             	shl    $0x2,%eax
f0101894:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101899:	8b 10                	mov    (%eax),%edx
f010189b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010189e:	83 ec 08             	sub    $0x8,%esp
f01018a1:	52                   	push   %edx
f01018a2:	50                   	push   %eax
f01018a3:	e8 1e 60 01 00       	call   f01178c6 <strcmp>
f01018a8:	83 c4 10             	add    $0x10,%esp
f01018ab:	85 c0                	test   %eax,%eax
f01018ad:	75 09                	jne    f01018b8 <execute_command+0x6f>
		{
			command_found = 1;
f01018af:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018b6:	eb 0b                	jmp    f01018c3 <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018b8:	ff 45 f0             	incl   -0x10(%ebp)
f01018bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018be:	83 f8 30             	cmp    $0x30,%eax
f01018c1:	76 c5                	jbe    f0101888 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018c7:	74 2b                	je     f01018f4 <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f01018c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018cc:	89 d0                	mov    %edx,%eax
f01018ce:	01 c0                	add    %eax,%eax
f01018d0:	01 d0                	add    %edx,%eax
f01018d2:	c1 e0 02             	shl    $0x2,%eax
f01018d5:	05 48 e5 14 f0       	add    $0xf014e548,%eax
f01018da:	8b 00                	mov    (%eax),%eax
f01018dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01018df:	83 ec 08             	sub    $0x8,%esp
f01018e2:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f01018e5:	51                   	push   %ecx
f01018e6:	52                   	push   %edx
f01018e7:	ff d0                	call   *%eax
f01018e9:	83 c4 10             	add    $0x10,%esp
f01018ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f01018ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01018f2:	eb 19                	jmp    f010190d <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f01018f4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018f7:	83 ec 08             	sub    $0x8,%esp
f01018fa:	50                   	push   %eax
f01018fb:	68 bb 8e 11 f0       	push   $0xf0118ebb
f0101900:	e8 ca 54 00 00       	call   f0106dcf <cprintf>
f0101905:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101908:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010190d:	c9                   	leave  
f010190e:	c3                   	ret    

f010190f <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010190f:	55                   	push   %ebp
f0101910:	89 e5                	mov    %esp,%ebp
f0101912:	53                   	push   %ebx
f0101913:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010191d:	eb 3b                	jmp    f010195a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010191f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101922:	89 d0                	mov    %edx,%eax
f0101924:	01 c0                	add    %eax,%eax
f0101926:	01 d0                	add    %edx,%eax
f0101928:	c1 e0 02             	shl    $0x2,%eax
f010192b:	05 44 e5 14 f0       	add    $0xf014e544,%eax
f0101930:	8b 10                	mov    (%eax),%edx
f0101932:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101935:	89 c8                	mov    %ecx,%eax
f0101937:	01 c0                	add    %eax,%eax
f0101939:	01 c8                	add    %ecx,%eax
f010193b:	c1 e0 02             	shl    $0x2,%eax
f010193e:	05 40 e5 14 f0       	add    $0xf014e540,%eax
f0101943:	8b 00                	mov    (%eax),%eax
f0101945:	83 ec 04             	sub    $0x4,%esp
f0101948:	52                   	push   %edx
f0101949:	50                   	push   %eax
f010194a:	68 d1 8e 11 f0       	push   $0xf0118ed1
f010194f:	e8 7b 54 00 00       	call   f0106dcf <cprintf>
f0101954:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101957:	ff 45 f4             	incl   -0xc(%ebp)
f010195a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010195d:	83 f8 30             	cmp    $0x30,%eax
f0101960:	76 bd                	jbe    f010191f <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101962:	83 ec 0c             	sub    $0xc,%esp
f0101965:	68 da 8e 11 f0       	push   $0xf0118eda
f010196a:	e8 60 54 00 00       	call   f0106dcf <cprintf>
f010196f:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101972:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101979:	eb 42                	jmp    f01019bd <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010197b:	8b 0d 14 ea 14 f0    	mov    0xf014ea14,%ecx
f0101981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101984:	89 d0                	mov    %edx,%eax
f0101986:	01 c0                	add    %eax,%eax
f0101988:	01 d0                	add    %edx,%eax
f010198a:	c1 e0 02             	shl    $0x2,%eax
f010198d:	01 c8                	add    %ecx,%eax
f010198f:	8b 50 04             	mov    0x4(%eax),%edx
f0101992:	8b 1d 14 ea 14 f0    	mov    0xf014ea14,%ebx
f0101998:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010199b:	89 c8                	mov    %ecx,%eax
f010199d:	01 c0                	add    %eax,%eax
f010199f:	01 c8                	add    %ecx,%eax
f01019a1:	c1 e0 02             	shl    $0x2,%eax
f01019a4:	01 d8                	add    %ebx,%eax
f01019a6:	8b 00                	mov    (%eax),%eax
f01019a8:	83 ec 04             	sub    $0x4,%esp
f01019ab:	52                   	push   %edx
f01019ac:	50                   	push   %eax
f01019ad:	68 ef 8e 11 f0       	push   $0xf0118eef
f01019b2:	e8 18 54 00 00       	call   f0106dcf <cprintf>
f01019b7:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019ba:	ff 45 f4             	incl   -0xc(%ebp)
f01019bd:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01019c2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019c5:	7c b4                	jl     f010197b <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f01019c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01019cf:	c9                   	leave  
f01019d0:	c3                   	ret    

f01019d1 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01019d1:	55                   	push   %ebp
f01019d2:	89 e5                	mov    %esp,%ebp
f01019d4:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01019d7:	83 ec 0c             	sub    $0xc,%esp
f01019da:	68 0b 8f 11 f0       	push   $0xf0118f0b
f01019df:	e8 eb 53 00 00       	call   f0106dcf <cprintf>
f01019e4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01019e7:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01019ec:	83 ec 04             	sub    $0x4,%esp
f01019ef:	50                   	push   %eax
f01019f0:	68 0c 00 10 f0       	push   $0xf010000c
f01019f5:	68 24 8f 11 f0       	push   $0xf0118f24
f01019fa:	e8 d0 53 00 00       	call   f0106dcf <cprintf>
f01019ff:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a02:	b8 f1 83 11 00       	mov    $0x1183f1,%eax
f0101a07:	83 ec 04             	sub    $0x4,%esp
f0101a0a:	50                   	push   %eax
f0101a0b:	68 f1 83 11 f0       	push   $0xf01183f1
f0101a10:	68 60 8f 11 f0       	push   $0xf0118f60
f0101a15:	e8 b5 53 00 00       	call   f0106dcf <cprintf>
f0101a1a:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a1d:	b8 56 68 53 00       	mov    $0x536856,%eax
f0101a22:	83 ec 04             	sub    $0x4,%esp
f0101a25:	50                   	push   %eax
f0101a26:	68 56 68 53 f0       	push   $0xf0536856
f0101a2b:	68 9c 8f 11 f0       	push   $0xf0118f9c
f0101a30:	e8 9a 53 00 00       	call   f0106dcf <cprintf>
f0101a35:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a38:	b8 68 58 15 01       	mov    $0x1155868,%eax
f0101a3d:	83 ec 04             	sub    $0x4,%esp
f0101a40:	50                   	push   %eax
f0101a41:	68 68 58 15 f1       	push   $0xf1155868
f0101a46:	68 e4 8f 11 f0       	push   $0xf0118fe4
f0101a4b:	e8 7f 53 00 00       	call   f0106dcf <cprintf>
f0101a50:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a53:	b8 68 58 15 f1       	mov    $0xf1155868,%eax
f0101a58:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a5e:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a63:	29 c2                	sub    %eax,%edx
f0101a65:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101a67:	85 c0                	test   %eax,%eax
f0101a69:	79 05                	jns    f0101a70 <command_kernel_info+0x9f>
f0101a6b:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101a70:	c1 f8 0a             	sar    $0xa,%eax
f0101a73:	83 ec 08             	sub    $0x8,%esp
f0101a76:	50                   	push   %eax
f0101a77:	68 20 90 11 f0       	push   $0xf0119020
f0101a7c:	e8 4e 53 00 00       	call   f0106dcf <cprintf>
f0101a81:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101a84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a89:	c9                   	leave  
f0101a8a:	c3                   	ret    

f0101a8b <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101a8b:	55                   	push   %ebp
f0101a8c:	89 e5                	mov    %esp,%ebp
f0101a8e:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	83 c0 04             	add    $0x4,%eax
f0101a97:	8b 00                	mov    (%eax),%eax
f0101a99:	83 ec 04             	sub    $0x4,%esp
f0101a9c:	6a 0a                	push   $0xa
f0101a9e:	6a 00                	push   $0x0
f0101aa0:	50                   	push   %eax
f0101aa1:	e8 74 60 01 00       	call   f0117b1a <strtol>
f0101aa6:	83 c4 10             	add    $0x10,%esp
f0101aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101aac:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101ab3:	83 ec 04             	sub    $0x4,%esp
f0101ab6:	6a 00                	push   $0x0
f0101ab8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101abb:	50                   	push   %eax
f0101abc:	ff 75 f4             	pushl  -0xc(%ebp)
f0101abf:	e8 ee 15 00 00       	call   f01030b2 <envid2env>
f0101ac4:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aca:	83 c0 0c             	add    $0xc,%eax
f0101acd:	8b 00                	mov    (%eax),%eax
f0101acf:	83 ec 04             	sub    $0x4,%esp
f0101ad2:	6a 10                	push   $0x10
f0101ad4:	6a 00                	push   $0x0
f0101ad6:	50                   	push   %eax
f0101ad7:	e8 3e 60 01 00       	call   f0117b1a <strtol>
f0101adc:	83 c4 10             	add    $0x10,%esp
f0101adf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101ae2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ae5:	85 c0                	test   %eax,%eax
f0101ae7:	75 07                	jne    f0101af0 <command_writeusermem+0x65>
f0101ae9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101aee:	eb 43                	jmp    f0101b33 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101af0:	0f 20 d8             	mov    %cr3,%eax
f0101af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101af6:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101af9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101afc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101aff:	8b 40 60             	mov    0x60(%eax),%eax
f0101b02:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b08:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b14:	83 c0 08             	add    $0x8,%eax
f0101b17:	8b 00                	mov    (%eax),%eax
f0101b19:	8a 00                	mov    (%eax),%al
f0101b1b:	88 c2                	mov    %al,%dl
f0101b1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b20:	88 10                	mov    %dl,(%eax)
f0101b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b25:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b2b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b33:	c9                   	leave  
f0101b34:	c3                   	ret    

f0101b35 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b35:	55                   	push   %ebp
f0101b36:	89 e5                	mov    %esp,%ebp
f0101b38:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b3e:	83 c0 04             	add    $0x4,%eax
f0101b41:	8b 00                	mov    (%eax),%eax
f0101b43:	83 ec 04             	sub    $0x4,%esp
f0101b46:	6a 10                	push   $0x10
f0101b48:	6a 00                	push   $0x0
f0101b4a:	50                   	push   %eax
f0101b4b:	e8 ca 5f 01 00       	call   f0117b1a <strtol>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5e:	83 c0 08             	add    $0x8,%eax
f0101b61:	8b 00                	mov    (%eax),%eax
f0101b63:	83 ec 04             	sub    $0x4,%esp
f0101b66:	6a 0a                	push   $0xa
f0101b68:	6a 00                	push   $0x0
f0101b6a:	50                   	push   %eax
f0101b6b:	e8 aa 5f 01 00       	call   f0117b1a <strtol>
f0101b70:	83 c4 10             	add    $0x10,%esp
f0101b73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101b76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 0c             	sub    $0xc,%esp
f0101b88:	50                   	push   %eax
f0101b89:	e8 2c 5c 01 00       	call   f01177ba <strlen>
f0101b8e:	83 c4 10             	add    $0x10,%esp
f0101b91:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101b94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101b9b:	eb 30                	jmp    f0101bcd <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101b9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ba4:	eb 1c                	jmp    f0101bc2 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ba9:	83 c0 0c             	add    $0xc,%eax
f0101bac:	8b 10                	mov    (%eax),%edx
f0101bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bb1:	01 d0                	add    %edx,%eax
f0101bb3:	8a 00                	mov    (%eax),%al
f0101bb5:	88 c2                	mov    %al,%dl
f0101bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bba:	88 10                	mov    %dl,(%eax)
			address++;
f0101bbc:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bbf:	ff 45 ec             	incl   -0x14(%ebp)
f0101bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bc5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101bc8:	7c dc                	jl     f0101ba6 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101bca:	ff 45 f0             	incl   -0x10(%ebp)
f0101bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101bd0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101bd3:	7c c8                	jl     f0101b9d <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101bd5:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101bda:	c9                   	leave  
f0101bdb:	c3                   	ret    

f0101bdc <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101bdc:	55                   	push   %ebp
f0101bdd:	89 e5                	mov    %esp,%ebp
f0101bdf:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101be2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be5:	83 c0 04             	add    $0x4,%eax
f0101be8:	8b 00                	mov    (%eax),%eax
f0101bea:	83 ec 04             	sub    $0x4,%esp
f0101bed:	6a 0a                	push   $0xa
f0101bef:	6a 00                	push   $0x0
f0101bf1:	50                   	push   %eax
f0101bf2:	e8 23 5f 01 00       	call   f0117b1a <strtol>
f0101bf7:	83 c4 10             	add    $0x10,%esp
f0101bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101bfd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c04:	83 ec 04             	sub    $0x4,%esp
f0101c07:	6a 00                	push   $0x0
f0101c09:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c0c:	50                   	push   %eax
f0101c0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c10:	e8 9d 14 00 00       	call   f01030b2 <envid2env>
f0101c15:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c1b:	83 c0 08             	add    $0x8,%eax
f0101c1e:	8b 00                	mov    (%eax),%eax
f0101c20:	83 ec 04             	sub    $0x4,%esp
f0101c23:	6a 10                	push   $0x10
f0101c25:	6a 00                	push   $0x0
f0101c27:	50                   	push   %eax
f0101c28:	e8 ed 5e 01 00       	call   f0117b1a <strtol>
f0101c2d:	83 c4 10             	add    $0x10,%esp
f0101c30:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c36:	85 c0                	test   %eax,%eax
f0101c38:	75 07                	jne    f0101c41 <command_readusermem+0x65>
f0101c3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3f:	eb 4e                	jmp    f0101c8f <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c41:	0f 20 d8             	mov    %cr3,%eax
f0101c44:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c47:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c50:	8b 40 60             	mov    0x60(%eax),%eax
f0101c53:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c59:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c65:	8a 00                	mov    (%eax),%al
f0101c67:	0f b6 c0             	movzbl %al,%eax
f0101c6a:	83 ec 04             	sub    $0x4,%esp
f0101c6d:	50                   	push   %eax
f0101c6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c71:	68 4b 90 11 f0       	push   $0xf011904b
f0101c76:	e8 54 51 00 00       	call   f0106dcf <cprintf>
f0101c7b:	83 c4 10             	add    $0x10,%esp
f0101c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101c81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101c84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101c87:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c8f:	c9                   	leave  
f0101c90:	c3                   	ret    

f0101c91 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101c91:	55                   	push   %ebp
f0101c92:	89 e5                	mov    %esp,%ebp
f0101c94:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c9a:	83 c0 04             	add    $0x4,%eax
f0101c9d:	8b 00                	mov    (%eax),%eax
f0101c9f:	83 ec 04             	sub    $0x4,%esp
f0101ca2:	6a 10                	push   $0x10
f0101ca4:	6a 00                	push   $0x0
f0101ca6:	50                   	push   %eax
f0101ca7:	e8 6e 5e 01 00       	call   f0117b1a <strtol>
f0101cac:	83 c4 10             	add    $0x10,%esp
f0101caf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cba:	83 c0 08             	add    $0x8,%eax
f0101cbd:	8b 00                	mov    (%eax),%eax
f0101cbf:	83 ec 04             	sub    $0x4,%esp
f0101cc2:	6a 0a                	push   $0xa
f0101cc4:	6a 00                	push   $0x0
f0101cc6:	50                   	push   %eax
f0101cc7:	e8 4e 5e 01 00       	call   f0117b1a <strtol>
f0101ccc:	83 c4 10             	add    $0x10,%esp
f0101ccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101cd2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101cd9:	eb 22                	jmp    f0101cfd <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cde:	8d 50 01             	lea    0x1(%eax),%edx
f0101ce1:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101ce4:	8a 00                	mov    (%eax),%al
f0101ce6:	0f b6 c0             	movzbl %al,%eax
f0101ce9:	83 ec 08             	sub    $0x8,%esp
f0101cec:	50                   	push   %eax
f0101ced:	68 65 90 11 f0       	push   $0xf0119065
f0101cf2:	e8 d8 50 00 00       	call   f0106dcf <cprintf>
f0101cf7:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101cfa:	ff 45 f0             	incl   -0x10(%ebp)
f0101cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d03:	7c d6                	jl     f0101cdb <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d05:	83 ec 0c             	sub    $0xc,%esp
f0101d08:	68 68 90 11 f0       	push   $0xf0119068
f0101d0d:	e8 bd 50 00 00       	call   f0106dcf <cprintf>
f0101d12:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d1a:	c9                   	leave  
f0101d1b:	c3                   	ret    

f0101d1c <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d1c:	55                   	push   %ebp
f0101d1d:	89 e5                	mov    %esp,%ebp
f0101d1f:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d25:	83 c0 04             	add    $0x4,%eax
f0101d28:	8b 00                	mov    (%eax),%eax
f0101d2a:	83 ec 04             	sub    $0x4,%esp
f0101d2d:	6a 0a                	push   $0xa
f0101d2f:	6a 00                	push   $0x0
f0101d31:	50                   	push   %eax
f0101d32:	e8 e3 5d 01 00       	call   f0117b1a <strtol>
f0101d37:	83 c4 10             	add    $0x10,%esp
f0101d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d3d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d44:	83 ec 04             	sub    $0x4,%esp
f0101d47:	6a 00                	push   $0x0
f0101d49:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d4c:	50                   	push   %eax
f0101d4d:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d50:	e8 5d 13 00 00       	call   f01030b2 <envid2env>
f0101d55:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d5b:	83 c0 08             	add    $0x8,%eax
f0101d5e:	8b 00                	mov    (%eax),%eax
f0101d60:	83 ec 04             	sub    $0x4,%esp
f0101d63:	6a 10                	push   $0x10
f0101d65:	6a 00                	push   $0x0
f0101d67:	50                   	push   %eax
f0101d68:	e8 ad 5d 01 00       	call   f0117b1a <strtol>
f0101d6d:	83 c4 10             	add    $0x10,%esp
f0101d70:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101d73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d76:	83 c0 0c             	add    $0xc,%eax
f0101d79:	8b 00                	mov    (%eax),%eax
f0101d7b:	83 ec 04             	sub    $0x4,%esp
f0101d7e:	6a 0a                	push   $0xa
f0101d80:	6a 00                	push   $0x0
f0101d82:	50                   	push   %eax
f0101d83:	e8 92 5d 01 00       	call   f0117b1a <strtol>
f0101d88:	83 c4 10             	add    $0x10,%esp
f0101d8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101d94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101d97:	85 c0                	test   %eax,%eax
f0101d99:	75 07                	jne    f0101da2 <command_readuserblock+0x86>
f0101d9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101da0:	eb 65                	jmp    f0101e07 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101da2:	0f 20 d8             	mov    %cr3,%eax
f0101da5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101da8:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101dab:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101dae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101db1:	8b 40 60             	mov    0x60(%eax),%eax
f0101db4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101db7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101dba:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101dbd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dc4:	eb 28                	jmp    f0101dee <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dc9:	8a 00                	mov    (%eax),%al
f0101dcb:	0f b6 d0             	movzbl %al,%edx
f0101dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dd1:	8a 00                	mov    (%eax),%al
f0101dd3:	0f b6 c0             	movzbl %al,%eax
f0101dd6:	52                   	push   %edx
f0101dd7:	50                   	push   %eax
f0101dd8:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ddb:	68 6a 90 11 f0       	push   $0xf011906a
f0101de0:	e8 ea 4f 00 00       	call   f0106dcf <cprintf>
f0101de5:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101de8:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101deb:	ff 45 f0             	incl   -0x10(%ebp)
f0101dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101df4:	7c d0                	jl     f0101dc6 <command_readuserblock+0xaa>
f0101df6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101df9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101dfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101dff:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e07:	c9                   	leave  
f0101e08:	c3                   	ret    

f0101e09 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e09:	55                   	push   %ebp
f0101e0a:	89 e5                	mov    %esp,%ebp
f0101e0c:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e12:	83 c0 04             	add    $0x4,%eax
f0101e15:	8b 00                	mov    (%eax),%eax
f0101e17:	83 ec 04             	sub    $0x4,%esp
f0101e1a:	6a 0a                	push   $0xa
f0101e1c:	6a 00                	push   $0x0
f0101e1e:	50                   	push   %eax
f0101e1f:	e8 f6 5c 01 00       	call   f0117b1a <strtol>
f0101e24:	83 c4 10             	add    $0x10,%esp
f0101e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e2a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e31:	83 ec 04             	sub    $0x4,%esp
f0101e34:	6a 00                	push   $0x0
f0101e36:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e39:	50                   	push   %eax
f0101e3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e3d:	e8 70 12 00 00       	call   f01030b2 <envid2env>
f0101e42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e45:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e48:	85 c0                	test   %eax,%eax
f0101e4a:	75 0a                	jne    f0101e56 <command_remove_table+0x4d>
f0101e4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e51:	e9 c7 00 00 00       	jmp    f0101f1d <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e59:	83 c0 08             	add    $0x8,%eax
f0101e5c:	8b 00                	mov    (%eax),%eax
f0101e5e:	83 ec 04             	sub    $0x4,%esp
f0101e61:	6a 10                	push   $0x10
f0101e63:	6a 00                	push   $0x0
f0101e65:	50                   	push   %eax
f0101e66:	e8 af 5c 01 00       	call   f0117b1a <strtol>
f0101e6b:	83 c4 10             	add    $0x10,%esp
f0101e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101e71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e74:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101e77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e7a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101e7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101e80:	c1 ea 16             	shr    $0x16,%edx
f0101e83:	c1 e2 02             	shl    $0x2,%edx
f0101e86:	01 d0                	add    %edx,%eax
f0101e88:	8b 00                	mov    (%eax),%eax
f0101e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101e8f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101e92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101e95:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101e9a:	77 1c                	ja     f0101eb8 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101e9c:	83 ec 0c             	sub    $0xc,%esp
f0101e9f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ea2:	e8 fe a5 00 00       	call   f010c4a5 <kheap_virtual_address>
f0101ea7:	83 c4 10             	add    $0x10,%esp
f0101eaa:	83 ec 0c             	sub    $0xc,%esp
f0101ead:	50                   	push   %eax
f0101eae:	e8 23 a5 00 00       	call   f010c3d6 <kfree>
f0101eb3:	83 c4 10             	add    $0x10,%esp
f0101eb6:	eb 28                	jmp    f0101ee0 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ebe:	e8 65 ee ff ff       	call   f0100d28 <to_frame_info>
f0101ec3:	83 c4 10             	add    $0x10,%esp
f0101ec6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101ec9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ecc:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101ed2:	83 ec 0c             	sub    $0xc,%esp
f0101ed5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101ed8:	e8 ab 1b 00 00       	call   f0103a88 <free_frame>
f0101edd:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ee3:	c1 e8 16             	shr    $0x16,%eax
f0101ee6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101ee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101eec:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101eef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ef2:	c1 e2 02             	shl    $0x2,%edx
f0101ef5:	01 c2                	add    %eax,%edx
f0101ef7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101efa:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101efd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101f00:	c1 e1 02             	shl    $0x2,%ecx
f0101f03:	01 c8                	add    %ecx,%eax
f0101f05:	8b 00                	mov    (%eax),%eax
f0101f07:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f0a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f0c:	0f 20 d8             	mov    %cr3,%eax
f0101f0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f15:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f18:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f1d:	c9                   	leave  
f0101f1e:	c3                   	ret    

f0101f1f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f1f:	55                   	push   %ebp
f0101f20:	89 e5                	mov    %esp,%ebp
f0101f22:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f28:	83 c0 04             	add    $0x4,%eax
f0101f2b:	8b 00                	mov    (%eax),%eax
f0101f2d:	83 ec 04             	sub    $0x4,%esp
f0101f30:	6a 0a                	push   $0xa
f0101f32:	6a 00                	push   $0x0
f0101f34:	50                   	push   %eax
f0101f35:	e8 e0 5b 01 00       	call   f0117b1a <strtol>
f0101f3a:	83 c4 10             	add    $0x10,%esp
f0101f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f47:	83 ec 04             	sub    $0x4,%esp
f0101f4a:	6a 00                	push   $0x0
f0101f4c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f4f:	50                   	push   %eax
f0101f50:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f53:	e8 5a 11 00 00       	call   f01030b2 <envid2env>
f0101f58:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f5e:	85 c0                	test   %eax,%eax
f0101f60:	75 07                	jne    f0101f69 <command_allocuserpage+0x4a>
f0101f62:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f67:	eb 6d                	jmp    f0101fd6 <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f6c:	83 c0 08             	add    $0x8,%eax
f0101f6f:	8b 00                	mov    (%eax),%eax
f0101f71:	83 ec 04             	sub    $0x4,%esp
f0101f74:	6a 10                	push   $0x10
f0101f76:	6a 00                	push   $0x0
f0101f78:	50                   	push   %eax
f0101f79:	e8 9c 5b 01 00       	call   f0117b1a <strtol>
f0101f7e:	83 c4 10             	add    $0x10,%esp
f0101f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f87:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101f8a:	83 ec 0c             	sub    $0xc,%esp
f0101f8d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101f90:	50                   	push   %eax
f0101f91:	e8 00 1a 00 00       	call   f0103996 <allocate_frame>
f0101f96:	83 c4 10             	add    $0x10,%esp
f0101f99:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101f9c:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101fa0:	75 17                	jne    f0101fb9 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	68 7b 90 11 f0       	push   $0xf011907b
f0101faa:	e8 20 4e 00 00       	call   f0106dcf <cprintf>
f0101faf:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101fb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fb7:	eb 1d                	jmp    f0101fd6 <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101fb9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101fbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101fbf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101fc2:	6a 06                	push   $0x6
f0101fc4:	ff 75 ec             	pushl  -0x14(%ebp)
f0101fc7:	52                   	push   %edx
f0101fc8:	50                   	push   %eax
f0101fc9:	e8 3c 1d 00 00       	call   f0103d0a <map_frame>
f0101fce:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd6:	c9                   	leave  
f0101fd7:	c3                   	ret    

f0101fd8 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101fd8:	55                   	push   %ebp
f0101fd9:	89 e5                	mov    %esp,%ebp
f0101fdb:	56                   	push   %esi
f0101fdc:	53                   	push   %ebx
f0101fdd:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101fe0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101fe3:	83 ec 0c             	sub    $0xc,%esp
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 50 22 00 00       	call   f010423c <calculate_available_frames>
f0101fec:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101fef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101ff2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101ff8:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101ffb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101ffe:	01 de                	add    %ebx,%esi
f0102000:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102003:	01 f3                	add    %esi,%ebx
f0102005:	83 ec 0c             	sub    $0xc,%esp
f0102008:	51                   	push   %ecx
f0102009:	52                   	push   %edx
f010200a:	50                   	push   %eax
f010200b:	53                   	push   %ebx
f010200c:	68 94 90 11 f0       	push   $0xf0119094
f0102011:	e8 b9 4d 00 00       	call   f0106dcf <cprintf>
f0102016:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102019:	a1 e0 53 55 f0       	mov    0xf05553e0,%eax
f010201e:	83 ec 08             	sub    $0x8,%esp
f0102021:	50                   	push   %eax
f0102022:	68 ec 90 11 f0       	push   $0xf01190ec
f0102027:	e8 a3 4d 00 00       	call   f0106dcf <cprintf>
f010202c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010202f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102034:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102037:	5b                   	pop    %ebx
f0102038:	5e                   	pop    %esi
f0102039:	5d                   	pop    %ebp
f010203a:	c3                   	ret    

f010203b <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010203b:	55                   	push   %ebp
f010203c:	89 e5                	mov    %esp,%ebp
f010203e:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102041:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102045:	7f 1a                	jg     f0102061 <command_run_program+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102047:	83 ec 0c             	sub    $0xc,%esp
f010204a:	68 28 91 11 f0       	push   $0xf0119128
f010204f:	e8 7b 4d 00 00       	call   f0106dcf <cprintf>
f0102054:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102057:	b8 00 00 00 00       	mov    $0x0,%eax
f010205c:	e9 b2 00 00 00       	jmp    f0102113 <command_run_program+0xd8>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102061:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102065:	75 1d                	jne    f0102084 <command_run_program+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102067:	8b 45 0c             	mov    0xc(%ebp),%eax
f010206a:	83 c0 0c             	add    $0xc,%eax
f010206d:	8b 00                	mov    (%eax),%eax
f010206f:	83 ec 04             	sub    $0x4,%esp
f0102072:	6a 0a                	push   $0xa
f0102074:	6a 00                	push   $0x0
f0102076:	50                   	push   %eax
f0102077:	e8 9e 5a 01 00       	call   f0117b1a <strtol>
f010207c:	83 c4 10             	add    $0x10,%esp
f010207f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102082:	eb 07                	jmp    f010208b <command_run_program+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102084:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010208b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010208e:	83 c0 08             	add    $0x8,%eax
f0102091:	8b 00                	mov    (%eax),%eax
f0102093:	83 ec 04             	sub    $0x4,%esp
f0102096:	6a 0a                	push   $0xa
f0102098:	6a 00                	push   $0x0
f010209a:	50                   	push   %eax
f010209b:	e8 7a 5a 01 00       	call   f0117b1a <strtol>
f01020a0:	83 c4 10             	add    $0x10,%esp
f01020a3:	89 c2                	mov    %eax,%edx
f01020a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020a8:	83 c0 04             	add    $0x4,%eax
f01020ab:	8b 00                	mov    (%eax),%eax
f01020ad:	83 ec 04             	sub    $0x4,%esp
f01020b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01020b3:	52                   	push   %edx
f01020b4:	50                   	push   %eax
f01020b5:	e8 9c 39 00 00       	call   f0105a56 <env_create>
f01020ba:	83 c4 10             	add    $0x10,%esp
f01020bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if(env == NULL) return 0;
f01020c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01020c4:	75 07                	jne    f01020cd <command_run_program+0x92>
f01020c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01020cb:	eb 46                	jmp    f0102113 <command_run_program+0xd8>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01020cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020d0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01020d3:	83 ec 08             	sub    $0x8,%esp
f01020d6:	50                   	push   %eax
f01020d7:	68 73 91 11 f0       	push   $0xf0119173
f01020dc:	e8 ee 4c 00 00       	call   f0106dcf <cprintf>
f01020e1:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f01020e4:	c7 05 e0 53 55 f0 00 	movl   $0x0,0xf05553e0
f01020eb:	00 00 00 

	sched_new_env(env);
f01020ee:	83 ec 0c             	sub    $0xc,%esp
f01020f1:	ff 75 f0             	pushl  -0x10(%ebp)
f01020f4:	e8 06 7c 00 00       	call   f0109cff <sched_new_env>
f01020f9:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f01020fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	50                   	push   %eax
f0102106:	e8 0b 7c 00 00       	call   f0109d16 <sched_run_env>
f010210b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010210e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102113:	c9                   	leave  
f0102114:	c3                   	ret    

f0102115 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102115:	55                   	push   %ebp
f0102116:	89 e5                	mov    %esp,%ebp
f0102118:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010211b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010211e:	83 c0 04             	add    $0x4,%eax
f0102121:	8b 00                	mov    (%eax),%eax
f0102123:	83 ec 04             	sub    $0x4,%esp
f0102126:	6a 0a                	push   $0xa
f0102128:	6a 00                	push   $0x0
f010212a:	50                   	push   %eax
f010212b:	e8 ea 59 01 00       	call   f0117b1a <strtol>
f0102130:	83 c4 10             	add    $0x10,%esp
f0102133:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102136:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	50                   	push   %eax
f010213d:	e8 af 7f 00 00       	call   f010a0f1 <sched_kill_env>
f0102142:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214a:	c9                   	leave  
f010214b:	c3                   	ret    

f010214c <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010214c:	55                   	push   %ebp
f010214d:	89 e5                	mov    %esp,%ebp
f010214f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f0102152:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102156:	7f 1a                	jg     f0102172 <commnad_load_env+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102158:	83 ec 0c             	sub    $0xc,%esp
f010215b:	68 28 91 11 f0       	push   $0xf0119128
f0102160:	e8 6a 4c 00 00       	call   f0106dcf <cprintf>
f0102165:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102168:	b8 00 00 00 00       	mov    $0x0,%eax
f010216d:	e9 96 00 00 00       	jmp    f0102208 <commnad_load_env+0xbc>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f0102172:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102176:	75 1d                	jne    f0102195 <commnad_load_env+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0102178:	8b 45 0c             	mov    0xc(%ebp),%eax
f010217b:	83 c0 0c             	add    $0xc,%eax
f010217e:	8b 00                	mov    (%eax),%eax
f0102180:	83 ec 04             	sub    $0x4,%esp
f0102183:	6a 0a                	push   $0xa
f0102185:	6a 00                	push   $0x0
f0102187:	50                   	push   %eax
f0102188:	e8 8d 59 01 00       	call   f0117b1a <strtol>
f010218d:	83 c4 10             	add    $0x10,%esp
f0102190:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102193:	eb 07                	jmp    f010219c <commnad_load_env+0x50>
		else
			percent_WS_pages_to_remove = 0;
f0102195:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f010219c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010219f:	83 c0 08             	add    $0x8,%eax
f01021a2:	8b 00                	mov    (%eax),%eax
f01021a4:	83 ec 04             	sub    $0x4,%esp
f01021a7:	6a 0a                	push   $0xa
f01021a9:	6a 00                	push   $0x0
f01021ab:	50                   	push   %eax
f01021ac:	e8 69 59 01 00       	call   f0117b1a <strtol>
f01021b1:	83 c4 10             	add    $0x10,%esp
f01021b4:	89 c2                	mov    %eax,%edx
f01021b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021b9:	83 c0 04             	add    $0x4,%eax
f01021bc:	8b 00                	mov    (%eax),%eax
f01021be:	83 ec 04             	sub    $0x4,%esp
f01021c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01021c4:	52                   	push   %edx
f01021c5:	50                   	push   %eax
f01021c6:	e8 8b 38 00 00       	call   f0105a56 <env_create>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if (env == NULL)
f01021d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01021d5:	75 07                	jne    f01021de <commnad_load_env+0x92>
		return 0 ;
f01021d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01021dc:	eb 2a                	jmp    f0102208 <commnad_load_env+0xbc>

	sched_new_env(env) ;
f01021de:	83 ec 0c             	sub    $0xc,%esp
f01021e1:	ff 75 f0             	pushl  -0x10(%ebp)
f01021e4:	e8 16 7b 00 00       	call   f0109cff <sched_new_env>
f01021e9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01021ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01021ef:	8b 40 4c             	mov    0x4c(%eax),%eax
f01021f2:	83 ec 08             	sub    $0x8,%esp
f01021f5:	50                   	push   %eax
f01021f6:	68 73 91 11 f0       	push   $0xf0119173
f01021fb:	e8 cf 4b 00 00       	call   f0106dcf <cprintf>
f0102200:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102203:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102208:	c9                   	leave  
f0102209:	c3                   	ret    

f010220a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f010220a:	55                   	push   %ebp
f010220b:	89 e5                	mov    %esp,%ebp
f010220d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102210:	c7 05 e0 53 55 f0 00 	movl   $0x0,0xf05553e0
f0102217:	00 00 00 
	sched_run_all();
f010221a:	e8 4b 77 00 00       	call   f010996a <sched_run_all>

	return 0 ;
f010221f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102224:	c9                   	leave  
f0102225:	c3                   	ret    

f0102226 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102226:	55                   	push   %ebp
f0102227:	89 e5                	mov    %esp,%ebp
f0102229:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f010222c:	e8 2f 75 00 00       	call   f0109760 <sched_print_all>

	return 0 ;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f010223e:	e8 94 77 00 00       	call   f01099d7 <sched_kill_all>

	return 0 ;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmLRU();
f0102250:	e8 a9 60 00 00       	call   f01082fe <setPageReplacmentAlgorithmLRU>
	cprintf("Page replacement algorithm is now LRU\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 88 91 11 f0       	push   $0xf0119188
f010225d:	e8 6d 4b 00 00       	call   f0106dcf <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102272:	e8 97 60 00 00       	call   f010830e <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102277:	83 ec 0c             	sub    $0xc,%esp
f010227a:	68 b0 91 11 f0       	push   $0xf01191b0
f010227f:	e8 4b 4b 00 00       	call   f0106dcf <cprintf>
f0102284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010228c:	c9                   	leave  
f010228d:	c3                   	ret    

f010228e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f010228e:	55                   	push   %ebp
f010228f:	89 e5                	mov    %esp,%ebp
f0102291:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102294:	e8 85 60 00 00       	call   f010831e <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102299:	83 ec 0c             	sub    $0xc,%esp
f010229c:	68 dc 91 11 f0       	push   $0xf01191dc
f01022a1:	e8 29 4b 00 00       	call   f0106dcf <cprintf>
f01022a6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ae:	c9                   	leave  
f01022af:	c3                   	ret    

f01022b0 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f01022b0:	55                   	push   %ebp
f01022b1:	89 e5                	mov    %esp,%ebp
f01022b3:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f01022b6:	e8 73 60 00 00       	call   f010832e <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f01022bb:	83 ec 0c             	sub    $0xc,%esp
f01022be:	68 04 92 11 f0       	push   $0xf0119204
f01022c3:	e8 07 4b 00 00       	call   f0106dcf <cprintf>
f01022c8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d0:	c9                   	leave  
f01022d1:	c3                   	ret    

f01022d2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f01022d2:	55                   	push   %ebp
f01022d3:	89 e5                	mov    %esp,%ebp
f01022d5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f01022d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022db:	83 c0 04             	add    $0x4,%eax
f01022de:	8b 00                	mov    (%eax),%eax
f01022e0:	83 ec 04             	sub    $0x4,%esp
f01022e3:	6a 0a                	push   $0xa
f01022e5:	6a 00                	push   $0x0
f01022e7:	50                   	push   %eax
f01022e8:	e8 2d 58 01 00       	call   f0117b1a <strtol>
f01022ed:	83 c4 10             	add    $0x10,%esp
f01022f0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f01022f3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01022f7:	83 ec 0c             	sub    $0xc,%esp
f01022fa:	50                   	push   %eax
f01022fb:	e8 d3 70 00 00       	call   f01093d3 <sched_init_RR>
f0102300:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102303:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f0102308:	8a 00                	mov    (%eax),%al
f010230a:	0f b6 c0             	movzbl %al,%eax
f010230d:	83 ec 08             	sub    $0x8,%esp
f0102310:	50                   	push   %eax
f0102311:	68 38 92 11 f0       	push   $0xf0119238
f0102316:	e8 b4 4a 00 00       	call   f0106dcf <cprintf>
f010231b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010231e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102323:	c9                   	leave  
f0102324:	c3                   	ret    

f0102325 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102325:	55                   	push   %ebp
f0102326:	89 e5                	mov    %esp,%ebp
f0102328:	53                   	push   %ebx
f0102329:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f010232c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010232f:	83 c0 04             	add    $0x4,%eax
f0102332:	8b 00                	mov    (%eax),%eax
f0102334:	83 ec 04             	sub    $0x4,%esp
f0102337:	6a 0a                	push   $0xa
f0102339:	6a 00                	push   $0x0
f010233b:	50                   	push   %eax
f010233c:	e8 d9 57 01 00       	call   f0117b1a <strtol>
f0102341:	83 c4 10             	add    $0x10,%esp
f0102344:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102347:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010234e:	eb 2e                	jmp    f010237e <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102350:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102353:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102359:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102360:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102363:	01 d0                	add    %edx,%eax
f0102365:	8b 00                	mov    (%eax),%eax
f0102367:	83 ec 04             	sub    $0x4,%esp
f010236a:	6a 0a                	push   $0xa
f010236c:	6a 00                	push   $0x0
f010236e:	50                   	push   %eax
f010236f:	e8 a6 57 01 00       	call   f0117b1a <strtol>
f0102374:	83 c4 10             	add    $0x10,%esp
f0102377:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010237b:	ff 45 f4             	incl   -0xc(%ebp)
f010237e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102381:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102384:	7c ca                	jl     f0102350 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102386:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010238a:	83 ec 08             	sub    $0x8,%esp
f010238d:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102390:	52                   	push   %edx
f0102391:	50                   	push   %eax
f0102392:	e8 44 6d 00 00       	call   f01090db <sched_init_MLFQ>
f0102397:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010239a:	83 ec 0c             	sub    $0xc,%esp
f010239d:	68 70 92 11 f0       	push   $0xf0119270
f01023a2:	e8 28 4a 00 00       	call   f0106dcf <cprintf>
f01023a7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01023b1:	eb 24                	jmp    f01023d7 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f01023b3:	8b 15 90 73 53 f0    	mov    0xf0537390,%edx
f01023b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01023bc:	01 d0                	add    %edx,%eax
f01023be:	8a 00                	mov    (%eax),%al
f01023c0:	0f b6 c0             	movzbl %al,%eax
f01023c3:	83 ec 08             	sub    $0x8,%esp
f01023c6:	50                   	push   %eax
f01023c7:	68 9d 92 11 f0       	push   $0xf011929d
f01023cc:	e8 fe 49 00 00       	call   f0106dcf <cprintf>
f01023d1:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023d4:	ff 45 f0             	incl   -0x10(%ebp)
f01023d7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01023dc:	0f b6 c0             	movzbl %al,%eax
f01023df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01023e2:	7f cf                	jg     f01023b3 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 68 90 11 f0       	push   $0xf0119068
f01023ec:	e8 de 49 00 00       	call   f0106dcf <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023fc:	c9                   	leave  
f01023fd:	c3                   	ret    

f01023fe <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01023fe:	55                   	push   %ebp
f01023ff:	89 e5                	mov    %esp,%ebp
f0102401:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102404:	e8 b8 6a 00 00       	call   f0108ec1 <isSchedMethodMLFQ>
f0102409:	85 c0                	test   %eax,%eax
f010240b:	74 5c                	je     f0102469 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010240d:	83 ec 0c             	sub    $0xc,%esp
f0102410:	68 a4 92 11 f0       	push   $0xf01192a4
f0102415:	e8 b5 49 00 00       	call   f0106dcf <cprintf>
f010241a:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010241d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102424:	eb 24                	jmp    f010244a <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102426:	8b 15 90 73 53 f0    	mov    0xf0537390,%edx
f010242c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010242f:	01 d0                	add    %edx,%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	0f b6 c0             	movzbl %al,%eax
f0102436:	83 ec 08             	sub    $0x8,%esp
f0102439:	50                   	push   %eax
f010243a:	68 9d 92 11 f0       	push   $0xf011929d
f010243f:	e8 8b 49 00 00       	call   f0106dcf <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102447:	ff 45 f4             	incl   -0xc(%ebp)
f010244a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010244f:	0f b6 c0             	movzbl %al,%eax
f0102452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102455:	7f cf                	jg     f0102426 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102457:	83 ec 0c             	sub    $0xc,%esp
f010245a:	68 68 90 11 f0       	push   $0xf0119068
f010245f:	e8 6b 49 00 00       	call   f0106dcf <cprintf>
f0102464:	83 c4 10             	add    $0x10,%esp
f0102467:	eb 36                	jmp    f010249f <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102469:	e8 39 6a 00 00       	call   f0108ea7 <isSchedMethodRR>
f010246e:	85 c0                	test   %eax,%eax
f0102470:	74 1d                	je     f010248f <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102472:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f0102477:	8a 00                	mov    (%eax),%al
f0102479:	0f b6 c0             	movzbl %al,%eax
f010247c:	83 ec 08             	sub    $0x8,%esp
f010247f:	50                   	push   %eax
f0102480:	68 d8 92 11 f0       	push   $0xf01192d8
f0102485:	e8 45 49 00 00       	call   f0106dcf <cprintf>
f010248a:	83 c4 10             	add    $0x10,%esp
f010248d:	eb 10                	jmp    f010249f <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010248f:	83 ec 0c             	sub    $0xc,%esp
f0102492:	68 14 93 11 f0       	push   $0xf0119314
f0102497:	e8 33 49 00 00       	call   f0106dcf <cprintf>
f010249c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010249f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a4:	c9                   	leave  
f01024a5:	c3                   	ret    

f01024a6 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01024a6:	55                   	push   %ebp
f01024a7:	89 e5                	mov    %esp,%ebp
f01024a9:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01024ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024af:	83 c0 04             	add    $0x4,%eax
f01024b2:	8b 00                	mov    (%eax),%eax
f01024b4:	83 ec 04             	sub    $0x4,%esp
f01024b7:	6a 0a                	push   $0xa
f01024b9:	6a 00                	push   $0x0
f01024bb:	50                   	push   %eax
f01024bc:	e8 59 56 01 00       	call   f0117b1a <strtol>
f01024c1:	83 c4 10             	add    $0x10,%esp
f01024c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01024c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01024ca:	0f b6 c0             	movzbl %al,%eax
f01024cd:	83 ec 0c             	sub    $0xc,%esp
f01024d0:	50                   	push   %eax
f01024d1:	e8 1d 34 01 00       	call   f01158f3 <chksch>
f01024d6:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01024d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024dd:	75 12                	jne    f01024f1 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01024df:	83 ec 0c             	sub    $0xc,%esp
f01024e2:	68 3c 93 11 f0       	push   $0xf011933c
f01024e7:	e8 e3 48 00 00       	call   f0106dcf <cprintf>
f01024ec:	83 c4 10             	add    $0x10,%esp
f01024ef:	eb 16                	jmp    f0102507 <command_sch_test+0x61>
	else if (status == 1)
f01024f1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024f5:	75 10                	jne    f0102507 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01024f7:	83 ec 0c             	sub    $0xc,%esp
f01024fa:	68 64 93 11 f0       	push   $0xf0119364
f01024ff:	e8 cb 48 00 00       	call   f0106dcf <cprintf>
f0102504:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102507:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010250c:	c9                   	leave  
f010250d:	c3                   	ret    

f010250e <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010250e:	55                   	push   %ebp
f010250f:	89 e5                	mov    %esp,%ebp
f0102511:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102514:	e8 40 5e 00 00       	call   f0108359 <isPageReplacmentAlgorithmCLOCK>
f0102519:	85 c0                	test   %eax,%eax
f010251b:	74 12                	je     f010252f <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f010251d:	83 ec 0c             	sub    $0xc,%esp
f0102520:	68 88 93 11 f0       	push   $0xf0119388
f0102525:	e8 a5 48 00 00       	call   f0106dcf <cprintf>
f010252a:	83 c4 10             	add    $0x10,%esp
f010252d:	eb 61                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmLRU())
f010252f:	e8 0a 5e 00 00       	call   f010833e <isPageReplacmentAlgorithmLRU>
f0102534:	85 c0                	test   %eax,%eax
f0102536:	74 12                	je     f010254a <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU\n");
f0102538:	83 ec 0c             	sub    $0xc,%esp
f010253b:	68 b0 93 11 f0       	push   $0xf01193b0
f0102540:	e8 8a 48 00 00       	call   f0106dcf <cprintf>
f0102545:	83 c4 10             	add    $0x10,%esp
f0102548:	eb 46                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmFIFO())
f010254a:	e8 25 5e 00 00       	call   f0108374 <isPageReplacmentAlgorithmFIFO>
f010254f:	85 c0                	test   %eax,%eax
f0102551:	74 12                	je     f0102565 <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is FIFO\n");
f0102553:	83 ec 0c             	sub    $0xc,%esp
f0102556:	68 d4 93 11 f0       	push   $0xf01193d4
f010255b:	e8 6f 48 00 00       	call   f0106dcf <cprintf>
f0102560:	83 c4 10             	add    $0x10,%esp
f0102563:	eb 2b                	jmp    f0102590 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102565:	e8 25 5e 00 00       	call   f010838f <isPageReplacmentAlgorithmModifiedCLOCK>
f010256a:	85 c0                	test   %eax,%eax
f010256c:	74 12                	je     f0102580 <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f010256e:	83 ec 0c             	sub    $0xc,%esp
f0102571:	68 f8 93 11 f0       	push   $0xf01193f8
f0102576:	e8 54 48 00 00       	call   f0106dcf <cprintf>
f010257b:	83 c4 10             	add    $0x10,%esp
f010257e:	eb 10                	jmp    f0102590 <command_print_page_rep+0x82>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102580:	83 ec 0c             	sub    $0xc,%esp
f0102583:	68 28 94 11 f0       	push   $0xf0119428
f0102588:	e8 42 48 00 00       	call   f0106dcf <cprintf>
f010258d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102590:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102595:	c9                   	leave  
f0102596:	c3                   	ret    

f0102597 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102597:	55                   	push   %ebp
f0102598:	89 e5                	mov    %esp,%ebp
f010259a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f010259d:	e8 fc 2c 00 00       	call   f010529e <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01025a2:	83 ec 0c             	sub    $0xc,%esp
f01025a5:	68 54 94 11 f0       	push   $0xf0119454
f01025aa:	e8 20 48 00 00       	call   f0106dcf <cprintf>
f01025af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025b7:	c9                   	leave  
f01025b8:	c3                   	ret    

f01025b9 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01025b9:	55                   	push   %ebp
f01025ba:	89 e5                	mov    %esp,%ebp
f01025bc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01025bf:	e8 ea 2c 00 00       	call   f01052ae <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01025c4:	83 ec 0c             	sub    $0xc,%esp
f01025c7:	68 84 94 11 f0       	push   $0xf0119484
f01025cc:	e8 fe 47 00 00       	call   f0106dcf <cprintf>
f01025d1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025d9:	c9                   	leave  
f01025da:	c3                   	ret    

f01025db <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01025e1:	e8 d8 2c 00 00       	call   f01052be <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01025e6:	83 ec 0c             	sub    $0xc,%esp
f01025e9:	68 b4 94 11 f0       	push   $0xf01194b4
f01025ee:	e8 dc 47 00 00       	call   f0106dcf <cprintf>
f01025f3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025fb:	c9                   	leave  
f01025fc:	c3                   	ret    

f01025fd <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01025fd:	55                   	push   %ebp
f01025fe:	89 e5                	mov    %esp,%ebp
f0102600:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102603:	e8 c6 2c 00 00       	call   f01052ce <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102608:	83 ec 0c             	sub    $0xc,%esp
f010260b:	68 e4 94 11 f0       	push   $0xf01194e4
f0102610:	e8 ba 47 00 00       	call   f0106dcf <cprintf>
f0102615:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102618:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261d:	c9                   	leave  
f010261e:	c3                   	ret    

f010261f <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010261f:	55                   	push   %ebp
f0102620:	89 e5                	mov    %esp,%ebp
f0102622:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102625:	e8 b4 2c 00 00       	call   f01052de <isUHeapPlacementStrategyFIRSTFIT>
f010262a:	85 c0                	test   %eax,%eax
f010262c:	74 12                	je     f0102640 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010262e:	83 ec 0c             	sub    $0xc,%esp
f0102631:	68 14 95 11 f0       	push   $0xf0119514
f0102636:	e8 94 47 00 00       	call   f0106dcf <cprintf>
f010263b:	83 c4 10             	add    $0x10,%esp
f010263e:	eb 61                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102640:	e8 b4 2c 00 00       	call   f01052f9 <isUHeapPlacementStrategyBESTFIT>
f0102645:	85 c0                	test   %eax,%eax
f0102647:	74 12                	je     f010265b <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102649:	83 ec 0c             	sub    $0xc,%esp
f010264c:	68 40 95 11 f0       	push   $0xf0119540
f0102651:	e8 79 47 00 00       	call   f0106dcf <cprintf>
f0102656:	83 c4 10             	add    $0x10,%esp
f0102659:	eb 46                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010265b:	e8 b4 2c 00 00       	call   f0105314 <isUHeapPlacementStrategyNEXTFIT>
f0102660:	85 c0                	test   %eax,%eax
f0102662:	74 12                	je     f0102676 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102664:	83 ec 0c             	sub    $0xc,%esp
f0102667:	68 6c 95 11 f0       	push   $0xf011956c
f010266c:	e8 5e 47 00 00       	call   f0106dcf <cprintf>
f0102671:	83 c4 10             	add    $0x10,%esp
f0102674:	eb 2b                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0102676:	e8 b4 2c 00 00       	call   f010532f <isUHeapPlacementStrategyWORSTFIT>
f010267b:	85 c0                	test   %eax,%eax
f010267d:	74 12                	je     f0102691 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f010267f:	83 ec 0c             	sub    $0xc,%esp
f0102682:	68 98 95 11 f0       	push   $0xf0119598
f0102687:	e8 43 47 00 00       	call   f0106dcf <cprintf>
f010268c:	83 c4 10             	add    $0x10,%esp
f010268f:	eb 10                	jmp    f01026a1 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102691:	83 ec 0c             	sub    $0xc,%esp
f0102694:	68 c4 95 11 f0       	push   $0xf01195c4
f0102699:	e8 31 47 00 00       	call   f0106dcf <cprintf>
f010269e:	83 c4 10             	add    $0x10,%esp

	return 0;
f01026a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a6:	c9                   	leave  
f01026a7:	c3                   	ret    

f01026a8 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01026a8:	55                   	push   %ebp
f01026a9:	89 e5                	mov    %esp,%ebp
f01026ab:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01026ae:	e8 97 2c 00 00       	call   f010534a <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 f0 95 11 f0       	push   $0xf01195f0
f01026bb:	e8 0f 47 00 00       	call   f0106dcf <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c8:	c9                   	leave  
f01026c9:	c3                   	ret    

f01026ca <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01026ca:	55                   	push   %ebp
f01026cb:	89 e5                	mov    %esp,%ebp
f01026cd:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01026d0:	e8 85 2c 00 00       	call   f010535a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026d5:	83 ec 0c             	sub    $0xc,%esp
f01026d8:	68 f0 95 11 f0       	push   $0xf01195f0
f01026dd:	e8 ed 46 00 00       	call   f0106dcf <cprintf>
f01026e2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026ea:	c9                   	leave  
f01026eb:	c3                   	ret    

f01026ec <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01026ec:	55                   	push   %ebp
f01026ed:	89 e5                	mov    %esp,%ebp
f01026ef:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01026f2:	e8 73 2c 00 00       	call   f010536a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01026f7:	83 ec 0c             	sub    $0xc,%esp
f01026fa:	68 24 96 11 f0       	push   $0xf0119624
f01026ff:	e8 cb 46 00 00       	call   f0106dcf <cprintf>
f0102704:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102707:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010270c:	c9                   	leave  
f010270d:	c3                   	ret    

f010270e <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010270e:	55                   	push   %ebp
f010270f:	89 e5                	mov    %esp,%ebp
f0102711:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102714:	e8 61 2c 00 00       	call   f010537a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102719:	83 ec 0c             	sub    $0xc,%esp
f010271c:	68 54 96 11 f0       	push   $0xf0119654
f0102721:	e8 a9 46 00 00       	call   f0106dcf <cprintf>
f0102726:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102729:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010272e:	c9                   	leave  
f010272f:	c3                   	ret    

f0102730 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102730:	55                   	push   %ebp
f0102731:	89 e5                	mov    %esp,%ebp
f0102733:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102736:	e8 4f 2c 00 00       	call   f010538a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010273b:	83 ec 0c             	sub    $0xc,%esp
f010273e:	68 84 96 11 f0       	push   $0xf0119684
f0102743:	e8 87 46 00 00       	call   f0106dcf <cprintf>
f0102748:	83 c4 10             	add    $0x10,%esp
	return 0;
f010274b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102750:	c9                   	leave  
f0102751:	c3                   	ret    

f0102752 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102752:	55                   	push   %ebp
f0102753:	89 e5                	mov    %esp,%ebp
f0102755:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102758:	e8 3d 2c 00 00       	call   f010539a <isKHeapPlacementStrategyCONTALLOC>
f010275d:	85 c0                	test   %eax,%eax
f010275f:	74 12                	je     f0102773 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 b8 96 11 f0       	push   $0xf01196b8
f0102769:	e8 61 46 00 00       	call   f0106dcf <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
f0102771:	eb 7c                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102773:	e8 3c 2c 00 00       	call   f01053b4 <isKHeapPlacementStrategyFIRSTFIT>
f0102778:	85 c0                	test   %eax,%eax
f010277a:	74 12                	je     f010278e <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010277c:	83 ec 0c             	sub    $0xc,%esp
f010277f:	68 f4 96 11 f0       	push   $0xf01196f4
f0102784:	e8 46 46 00 00       	call   f0106dcf <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
f010278c:	eb 61                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f010278e:	e8 3c 2c 00 00       	call   f01053cf <isKHeapPlacementStrategyBESTFIT>
f0102793:	85 c0                	test   %eax,%eax
f0102795:	74 12                	je     f01027a9 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102797:	83 ec 0c             	sub    $0xc,%esp
f010279a:	68 24 97 11 f0       	push   $0xf0119724
f010279f:	e8 2b 46 00 00       	call   f0106dcf <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
f01027a7:	eb 46                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027a9:	e8 3c 2c 00 00       	call   f01053ea <isKHeapPlacementStrategyNEXTFIT>
f01027ae:	85 c0                	test   %eax,%eax
f01027b0:	74 12                	je     f01027c4 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01027b2:	83 ec 0c             	sub    $0xc,%esp
f01027b5:	68 50 97 11 f0       	push   $0xf0119750
f01027ba:	e8 10 46 00 00       	call   f0106dcf <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
f01027c2:	eb 2b                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027c4:	e8 3c 2c 00 00       	call   f0105405 <isKHeapPlacementStrategyWORSTFIT>
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	74 12                	je     f01027df <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01027cd:	83 ec 0c             	sub    $0xc,%esp
f01027d0:	68 7c 97 11 f0       	push   $0xf011977c
f01027d5:	e8 f5 45 00 00       	call   f0106dcf <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
f01027dd:	eb 10                	jmp    f01027ef <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01027df:	83 ec 0c             	sub    $0xc,%esp
f01027e2:	68 ac 97 11 f0       	push   $0xf01197ac
f01027e7:	e8 e3 45 00 00       	call   f0106dcf <cprintf>
f01027ec:	83 c4 10             	add    $0x10,%esp

	return 0;
f01027ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027f4:	c9                   	leave  
f01027f5:	c3                   	ret    

f01027f6 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01027f6:	55                   	push   %ebp
f01027f7:	89 e5                	mov    %esp,%ebp
f01027f9:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01027fc:	e8 cf 5b 00 00       	call   f01083d0 <isBufferingEnabled>
f0102801:	85 c0                	test   %eax,%eax
f0102803:	75 12                	jne    f0102817 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102805:	83 ec 0c             	sub    $0xc,%esp
f0102808:	68 dc 97 11 f0       	push   $0xf01197dc
f010280d:	e8 bd 45 00 00       	call   f0106dcf <cprintf>
f0102812:	83 c4 10             	add    $0x10,%esp
f0102815:	eb 1d                	jmp    f0102834 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102817:	83 ec 0c             	sub    $0xc,%esp
f010281a:	6a 00                	push   $0x0
f010281c:	e8 89 5b 00 00       	call   f01083aa <enableModifiedBuffer>
f0102821:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102824:	83 ec 0c             	sub    $0xc,%esp
f0102827:	68 18 98 11 f0       	push   $0xf0119818
f010282c:	e8 9e 45 00 00       	call   f0106dcf <cprintf>
f0102831:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102834:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102839:	c9                   	leave  
f010283a:	c3                   	ret    

f010283b <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010283b:	55                   	push   %ebp
f010283c:	89 e5                	mov    %esp,%ebp
f010283e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102841:	e8 8a 5b 00 00       	call   f01083d0 <isBufferingEnabled>
f0102846:	85 c0                	test   %eax,%eax
f0102848:	75 12                	jne    f010285c <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010284a:	83 ec 0c             	sub    $0xc,%esp
f010284d:	68 dc 97 11 f0       	push   $0xf01197dc
f0102852:	e8 78 45 00 00       	call   f0106dcf <cprintf>
f0102857:	83 c4 10             	add    $0x10,%esp
f010285a:	eb 1d                	jmp    f0102879 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010285c:	83 ec 0c             	sub    $0xc,%esp
f010285f:	6a 01                	push   $0x1
f0102861:	e8 44 5b 00 00       	call   f01083aa <enableModifiedBuffer>
f0102866:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102869:	83 ec 0c             	sub    $0xc,%esp
f010286c:	68 3c 98 11 f0       	push   $0xf011983c
f0102871:	e8 59 45 00 00       	call   f0106dcf <cprintf>
f0102876:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102879:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010287e:	c9                   	leave  
f010287f:	c3                   	ret    

f0102880 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102880:	55                   	push   %ebp
f0102881:	89 e5                	mov    %esp,%ebp
f0102883:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102886:	83 ec 0c             	sub    $0xc,%esp
f0102889:	6a 00                	push   $0x0
f010288b:	e8 32 5b 00 00       	call   f01083c2 <enableBuffering>
f0102890:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102893:	83 ec 0c             	sub    $0xc,%esp
f0102896:	6a 00                	push   $0x0
f0102898:	e8 0d 5b 00 00       	call   f01083aa <enableModifiedBuffer>
f010289d:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01028a0:	83 ec 0c             	sub    $0xc,%esp
f01028a3:	68 5c 98 11 f0       	push   $0xf011985c
f01028a8:	e8 22 45 00 00       	call   f0106dcf <cprintf>
f01028ad:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01028bd:	83 ec 0c             	sub    $0xc,%esp
f01028c0:	6a 01                	push   $0x1
f01028c2:	e8 fb 5a 00 00       	call   f01083c2 <enableBuffering>
f01028c7:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01028ca:	83 ec 0c             	sub    $0xc,%esp
f01028cd:	6a 01                	push   $0x1
f01028cf:	e8 d6 5a 00 00       	call   f01083aa <enableModifiedBuffer>
f01028d4:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01028d7:	e8 0c 5b 00 00       	call   f01083e8 <getModifiedBufferLength>
f01028dc:	85 c0                	test   %eax,%eax
f01028de:	75 59                	jne    f0102939 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01028e0:	83 ec 0c             	sub    $0xc,%esp
f01028e3:	68 78 98 11 f0       	push   $0xf0119878
f01028e8:	e8 e2 44 00 00       	call   f0106dcf <cprintf>
f01028ed:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01028f0:	83 ec 08             	sub    $0x8,%esp
f01028f3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01028f6:	50                   	push   %eax
f01028f7:	68 a8 98 11 f0       	push   $0xf01198a8
f01028fc:	e8 b3 4c 01 00       	call   f01175b4 <readline>
f0102901:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102904:	83 ec 04             	sub    $0x4,%esp
f0102907:	6a 0a                	push   $0xa
f0102909:	6a 00                	push   $0x0
f010290b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010290e:	50                   	push   %eax
f010290f:	e8 06 52 01 00       	call   f0117b1a <strtol>
f0102914:	83 c4 10             	add    $0x10,%esp
f0102917:	83 ec 0c             	sub    $0xc,%esp
f010291a:	50                   	push   %eax
f010291b:	e8 ba 5a 00 00       	call   f01083da <setModifiedBufferLength>
f0102920:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102923:	e8 c0 5a 00 00       	call   f01083e8 <getModifiedBufferLength>
f0102928:	83 ec 08             	sub    $0x8,%esp
f010292b:	50                   	push   %eax
f010292c:	68 d4 98 11 f0       	push   $0xf01198d4
f0102931:	e8 99 44 00 00       	call   f0106dcf <cprintf>
f0102936:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102939:	83 ec 0c             	sub    $0xc,%esp
f010293c:	68 f9 98 11 f0       	push   $0xf01198f9
f0102941:	e8 89 44 00 00       	call   f0106dcf <cprintf>
f0102946:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010294e:	c9                   	leave  
f010294f:	c3                   	ret    

f0102950 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102950:	55                   	push   %ebp
f0102951:	89 e5                	mov    %esp,%ebp
f0102953:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102956:	e8 75 5a 00 00       	call   f01083d0 <isBufferingEnabled>
f010295b:	85 c0                	test   %eax,%eax
f010295d:	75 12                	jne    f0102971 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010295f:	83 ec 0c             	sub    $0xc,%esp
f0102962:	68 14 99 11 f0       	push   $0xf0119914
f0102967:	e8 63 44 00 00       	call   f0106dcf <cprintf>
f010296c:	83 c4 10             	add    $0x10,%esp
f010296f:	eb 19                	jmp    f010298a <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102971:	e8 42 5a 00 00       	call   f01083b8 <isModifiedBufferEnabled>
f0102976:	85 c0                	test   %eax,%eax
f0102978:	75 10                	jne    f010298a <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010297a:	83 ec 0c             	sub    $0xc,%esp
f010297d:	68 64 99 11 f0       	push   $0xf0119964
f0102982:	e8 48 44 00 00       	call   f0106dcf <cprintf>
f0102987:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010298a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298d:	83 c0 04             	add    $0x4,%eax
f0102990:	8b 00                	mov    (%eax),%eax
f0102992:	83 ec 04             	sub    $0x4,%esp
f0102995:	6a 0a                	push   $0xa
f0102997:	6a 00                	push   $0x0
f0102999:	50                   	push   %eax
f010299a:	e8 7b 51 01 00       	call   f0117b1a <strtol>
f010299f:	83 c4 10             	add    $0x10,%esp
f01029a2:	83 ec 0c             	sub    $0xc,%esp
f01029a5:	50                   	push   %eax
f01029a6:	e8 2f 5a 00 00       	call   f01083da <setModifiedBufferLength>
f01029ab:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01029ae:	e8 35 5a 00 00       	call   f01083e8 <getModifiedBufferLength>
f01029b3:	83 ec 08             	sub    $0x8,%esp
f01029b6:	50                   	push   %eax
f01029b7:	68 d4 98 11 f0       	push   $0xf01198d4
f01029bc:	e8 0e 44 00 00       	call   f0106dcf <cprintf>
f01029c1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01029c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029c9:	c9                   	leave  
f01029ca:	c3                   	ret    

f01029cb <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01029cb:	55                   	push   %ebp
f01029cc:	89 e5                	mov    %esp,%ebp
f01029ce:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01029d1:	e8 fa 59 00 00       	call   f01083d0 <isBufferingEnabled>
f01029d6:	85 c0                	test   %eax,%eax
f01029d8:	75 12                	jne    f01029ec <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01029da:	83 ec 0c             	sub    $0xc,%esp
f01029dd:	68 14 99 11 f0       	push   $0xf0119914
f01029e2:	e8 e8 43 00 00       	call   f0106dcf <cprintf>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	eb 19                	jmp    f0102a05 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01029ec:	e8 c7 59 00 00       	call   f01083b8 <isModifiedBufferEnabled>
f01029f1:	85 c0                	test   %eax,%eax
f01029f3:	75 10                	jne    f0102a05 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01029f5:	83 ec 0c             	sub    $0xc,%esp
f01029f8:	68 64 99 11 f0       	push   $0xf0119964
f01029fd:	e8 cd 43 00 00       	call   f0106dcf <cprintf>
f0102a02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102a05:	e8 de 59 00 00       	call   f01083e8 <getModifiedBufferLength>
f0102a0a:	83 ec 08             	sub    $0x8,%esp
f0102a0d:	50                   	push   %eax
f0102a0e:	68 aa 99 11 f0       	push   $0xf01199aa
f0102a13:	e8 b7 43 00 00       	call   f0106dcf <cprintf>
f0102a18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a20:	c9                   	leave  
f0102a21:	c3                   	ret    

f0102a22 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102a22:	55                   	push   %ebp
f0102a23:	89 e5                	mov    %esp,%ebp
f0102a25:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102a2f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a33:	75 1b                	jne    f0102a50 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102a35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a38:	83 c0 04             	add    $0x4,%eax
f0102a3b:	8b 00                	mov    (%eax),%eax
f0102a3d:	83 ec 04             	sub    $0x4,%esp
f0102a40:	6a 0a                	push   $0xa
f0102a42:	6a 00                	push   $0x0
f0102a44:	50                   	push   %eax
f0102a45:	e8 d0 50 01 00       	call   f0117b1a <strtol>
f0102a4a:	83 c4 10             	add    $0x10,%esp
f0102a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (isKHeapPlacementStrategyNEXTFIT())
f0102a50:	e8 95 29 00 00       	call   f01053ea <isKHeapPlacementStrategyNEXTFIT>
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	74 47                	je     f0102aa0 <command_test_kmalloc+0x7e>
	{
		cprintf("Inside the NEXTFIT\n");
f0102a59:	83 ec 0c             	sub    $0xc,%esp
f0102a5c:	68 c7 99 11 f0       	push   $0xf01199c7
f0102a61:	e8 69 43 00 00       	call   f0106dcf <cprintf>
f0102a66:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102a69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a6d:	75 17                	jne    f0102a86 <command_test_kmalloc+0x64>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102a6f:	83 ec 0c             	sub    $0xc,%esp
f0102a72:	68 dc 99 11 f0       	push   $0xf01199dc
f0102a77:	e8 53 43 00 00       	call   f0106dcf <cprintf>
f0102a7c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102a7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a84:	eb 7a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102a86:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102a8a:	75 07                	jne    f0102a93 <command_test_kmalloc+0x71>
			test_kmalloc();
f0102a8c:	e8 c7 9a 00 00       	call   f010c558 <test_kmalloc>
f0102a91:	eb 68                	jmp    f0102afb <command_test_kmalloc+0xd9>
		//Test nextfit strategy
		else if (testNum == 2)
f0102a93:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102a97:	75 62                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_nextfit();
f0102a99:	e8 be aa 00 00       	call   f010d55c <test_kmalloc_nextfit>
f0102a9e:	eb 5b                	jmp    f0102afb <command_test_kmalloc+0xd9>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102aa0:	e8 2a 29 00 00       	call   f01053cf <isKHeapPlacementStrategyBESTFIT>
f0102aa5:	85 c0                	test   %eax,%eax
f0102aa7:	74 52                	je     f0102afb <command_test_kmalloc+0xd9>
	{
		cprintf("Inside the BESTFIT\n");
f0102aa9:	83 ec 0c             	sub    $0xc,%esp
f0102aac:	68 2a 9a 11 f0       	push   $0xf0119a2a
f0102ab1:	e8 19 43 00 00       	call   f0106dcf <cprintf>
f0102ab6:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102ab9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102abd:	75 17                	jne    f0102ad6 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102abf:	83 ec 0c             	sub    $0xc,%esp
f0102ac2:	68 40 9a 11 f0       	push   $0xf0119a40
f0102ac7:	e8 03 43 00 00       	call   f0106dcf <cprintf>
f0102acc:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102acf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ad4:	eb 2a                	jmp    f0102b00 <command_test_kmalloc+0xde>
		}
		if (testNum == 1)
f0102ad6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ada:	75 07                	jne    f0102ae3 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102adc:	e8 77 9a 00 00       	call   f010c558 <test_kmalloc>
f0102ae1:	eb 18                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 2)
f0102ae3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ae7:	75 07                	jne    f0102af0 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102ae9:	e8 2b bd 00 00       	call   f010e819 <test_kmalloc_bestfit1>
f0102aee:	eb 0b                	jmp    f0102afb <command_test_kmalloc+0xd9>
		else if (testNum == 3)
f0102af0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102af4:	75 05                	jne    f0102afb <command_test_kmalloc+0xd9>
			test_kmalloc_bestfit2();
f0102af6:	e8 b6 cc 00 00       	call   f010f7b1 <test_kmalloc_bestfit2>
	}

	return 0;
f0102afb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b00:	c9                   	leave  
f0102b01:	c3                   	ret    

f0102b02 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102b02:	55                   	push   %ebp
f0102b03:	89 e5                	mov    %esp,%ebp
f0102b05:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102b08:	e8 c2 28 00 00       	call   f01053cf <isKHeapPlacementStrategyBESTFIT>
f0102b0d:	85 c0                	test   %eax,%eax
f0102b0f:	74 07                	je     f0102b18 <command_test_kfree+0x16>
		{
			test_kfree_bestfit();
f0102b11:	e8 d1 f2 00 00       	call   f0111de7 <test_kfree_bestfit>
f0102b16:	eb 05                	jmp    f0102b1d <command_test_kfree+0x1b>
		}
		else
			test_kfree();
f0102b18:	e8 80 dc 00 00       	call   f011079d <test_kfree>
		return 0;
f0102b1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b22:	c9                   	leave  
f0102b23:	c3                   	ret    

f0102b24 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102b24:	55                   	push   %ebp
f0102b25:	89 e5                	mov    %esp,%ebp
f0102b27:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102b2a:	e8 02 09 01 00       	call   f0113431 <test_kheap_phys_addr>
	return 0;
f0102b2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b34:	c9                   	leave  
f0102b35:	c3                   	ret    

f0102b36 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102b36:	55                   	push   %ebp
f0102b37:	89 e5                	mov    %esp,%ebp
f0102b39:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102b3c:	e8 24 1a 01 00       	call   f0114565 <test_kheap_virt_addr>
	return 0;
f0102b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b46:	c9                   	leave  
f0102b47:	c3                   	ret    

f0102b48 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102b48:	55                   	push   %ebp
f0102b49:	89 e5                	mov    %esp,%ebp
f0102b4b:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102b4e:	e8 88 2a 01 00       	call   f01155db <test_three_creation_functions>
	return 0;
f0102b53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b58:	c9                   	leave  
f0102b59:	c3                   	ret    

f0102b5a <command_test_priority1>:
int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102b5a:	55                   	push   %ebp
f0102b5b:	89 e5                	mov    %esp,%ebp
f0102b5d:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102b60:	e8 51 30 01 00       	call   f0115bb6 <test_priority_normal_and_higher>
	return 0;
f0102b65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b6a:	c9                   	leave  
f0102b6b:	c3                   	ret    

f0102b6c <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102b6c:	55                   	push   %ebp
f0102b6d:	89 e5                	mov    %esp,%ebp
f0102b6f:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102b72:	e8 28 3a 01 00       	call   f011659f <test_priority_normal_and_lower>
	return 0;
f0102b77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b7c:	c9                   	leave  
f0102b7d:	c3                   	ret    

f0102b7e <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102b7e:	55                   	push   %ebp
f0102b7f:	89 e5                	mov    %esp,%ebp
f0102b81:	53                   	push   %ebx
f0102b82:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b88:	83 ec 0c             	sub    $0xc,%esp
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 d8 3d 00 00       	call   f0106969 <mc146818_read>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	89 c3                	mov    %eax,%ebx
f0102b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0102b99:	40                   	inc    %eax
f0102b9a:	83 ec 0c             	sub    $0xc,%esp
f0102b9d:	50                   	push   %eax
f0102b9e:	e8 c6 3d 00 00       	call   f0106969 <mc146818_read>
f0102ba3:	83 c4 10             	add    $0x10,%esp
f0102ba6:	c1 e0 08             	shl    $0x8,%eax
f0102ba9:	09 d8                	or     %ebx,%eax
}
f0102bab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102bae:	c9                   	leave  
f0102baf:	c3                   	ret    

f0102bb0 <detect_memory>:

void detect_memory()
{
f0102bb0:	55                   	push   %ebp
f0102bb1:	89 e5                	mov    %esp,%ebp
f0102bb3:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102bb6:	83 ec 0c             	sub    $0xc,%esp
f0102bb9:	6a 15                	push   $0x15
f0102bbb:	e8 be ff ff ff       	call   f0102b7e <nvram_read>
f0102bc0:	83 c4 10             	add    $0x10,%esp
f0102bc3:	c1 e0 0a             	shl    $0xa,%eax
f0102bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102bcc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102bd4:	83 ec 0c             	sub    $0xc,%esp
f0102bd7:	6a 17                	push   $0x17
f0102bd9:	e8 a0 ff ff ff       	call   f0102b7e <nvram_read>
f0102bde:	83 c4 10             	add    $0x10,%esp
f0102be1:	c1 e0 0a             	shl    $0xa,%eax
f0102be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102be7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102bef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102bf2:	83 ec 0c             	sub    $0xc,%esp
f0102bf5:	6a 34                	push   $0x34
f0102bf7:	e8 82 ff ff ff       	call   f0102b7e <nvram_read>
f0102bfc:	83 c4 10             	add    $0x10,%esp
f0102bff:	c1 e0 10             	shl    $0x10,%eax
f0102c02:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102c05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102c08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102c10:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102c14:	74 18                	je     f0102c2e <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102c19:	05 00 00 00 01       	add    $0x1000000,%eax
f0102c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c24:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102c29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102c2c:	eb 19                	jmp    f0102c47 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102c2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102c32:	74 0d                	je     f0102c41 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102c34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c37:	05 00 00 10 00       	add    $0x100000,%eax
f0102c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102c3f:	eb 06                	jmp    f0102c47 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102c41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102c47:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c51:	c1 e8 0c             	shr    $0xc,%eax
f0102c54:	a3 8c 73 53 f0       	mov    %eax,0xf053738c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c5c:	c1 e8 0a             	shr    $0xa,%eax
f0102c5f:	83 ec 08             	sub    $0x8,%esp
f0102c62:	50                   	push   %eax
f0102c63:	68 90 9a 11 f0       	push   $0xf0119a90
f0102c68:	e8 62 41 00 00       	call   f0106dcf <cprintf>
f0102c6d:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102c70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c73:	c1 e8 0a             	shr    $0xa,%eax
f0102c76:	89 c2                	mov    %eax,%edx
f0102c78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102c7b:	c1 e8 0a             	shr    $0xa,%eax
f0102c7e:	83 ec 04             	sub    $0x4,%esp
f0102c81:	52                   	push   %edx
f0102c82:	50                   	push   %eax
f0102c83:	68 b1 9a 11 f0       	push   $0xf0119ab1
f0102c88:	e8 42 41 00 00       	call   f0106dcf <cprintf>
f0102c8d:	83 c4 10             	add    $0x10,%esp
}
f0102c90:	90                   	nop
f0102c91:	c9                   	leave  
f0102c92:	c3                   	ret    

f0102c93 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102c93:	55                   	push   %ebp
f0102c94:	89 e5                	mov    %esp,%ebp
f0102c96:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102c99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102ca0:	eb 40                	jmp    f0102ce2 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ca5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102cab:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102cb0:	83 ec 08             	sub    $0x8,%esp
f0102cb3:	52                   	push   %edx
f0102cb4:	50                   	push   %eax
f0102cb5:	e8 9b 01 00 00       	call   f0102e55 <check_va2pa>
f0102cba:	83 c4 10             	add    $0x10,%esp
f0102cbd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102cc0:	74 19                	je     f0102cdb <check_boot_pgdir+0x48>
f0102cc2:	68 d0 9a 11 f0       	push   $0xf0119ad0
f0102cc7:	68 06 9b 11 f0       	push   $0xf0119b06
f0102ccc:	68 86 00 00 00       	push   $0x86
f0102cd1:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102cd6:	e8 9b d4 ff ff       	call   f0100176 <_panic>

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102cdb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ce5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102ceb:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f0102cf0:	39 c2                	cmp    %eax,%edx
f0102cf2:	72 ae                	jb     f0102ca2 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102cf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102cfb:	eb 74                	jmp    f0102d71 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0102cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d00:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0102d06:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102d0b:	83 ec 08             	sub    $0x8,%esp
f0102d0e:	52                   	push   %edx
f0102d0f:	50                   	push   %eax
f0102d10:	e8 40 01 00 00       	call   f0102e55 <check_va2pa>
f0102d15:	83 c4 10             	add    $0x10,%esp
f0102d18:	c7 45 f0 00 60 14 f0 	movl   $0xf0146000,-0x10(%ebp)
f0102d1f:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0102d26:	77 17                	ja     f0102d3f <check_boot_pgdir+0xac>
f0102d28:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d2b:	68 2c 9b 11 f0       	push   $0xf0119b2c
f0102d30:	68 90 00 00 00       	push   $0x90
f0102d35:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102d3a:	e8 37 d4 ff ff       	call   f0100176 <_panic>
f0102d3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102d42:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0102d48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102d4b:	01 ca                	add    %ecx,%edx
f0102d4d:	39 d0                	cmp    %edx,%eax
f0102d4f:	74 19                	je     f0102d6a <check_boot_pgdir+0xd7>
f0102d51:	68 60 9b 11 f0       	push   $0xf0119b60
f0102d56:	68 06 9b 11 f0       	push   $0xf0119b06
f0102d5b:	68 90 00 00 00       	push   $0x90
f0102d60:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102d65:	e8 0c d4 ff ff       	call   f0100176 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102d6a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102d71:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0102d78:	76 83                	jbe    f0102cfd <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102d7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102d81:	e9 af 00 00 00       	jmp    f0102e35 <check_boot_pgdir+0x1a2>
		switch (i) {
f0102d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d89:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d8e:	74 11                	je     f0102da1 <check_boot_pgdir+0x10e>
f0102d90:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102d95:	72 36                	jb     f0102dcd <check_boot_pgdir+0x13a>
f0102d97:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0102d9c:	83 f8 02             	cmp    $0x2,%eax
f0102d9f:	77 2c                	ja     f0102dcd <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0102da1:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102da6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102da9:	c1 e2 02             	shl    $0x2,%edx
f0102dac:	01 d0                	add    %edx,%eax
f0102dae:	8b 00                	mov    (%eax),%eax
f0102db0:	85 c0                	test   %eax,%eax
f0102db2:	75 7a                	jne    f0102e2e <check_boot_pgdir+0x19b>
f0102db4:	68 e2 9b 11 f0       	push   $0xf0119be2
f0102db9:	68 06 9b 11 f0       	push   $0xf0119b06
f0102dbe:	68 9b 00 00 00       	push   $0x9b
f0102dc3:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102dc8:	e8 a9 d3 ff ff       	call   f0100176 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0102dcd:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0102dd4:	76 2c                	jbe    f0102e02 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0102dd6:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102dde:	c1 e2 02             	shl    $0x2,%edx
f0102de1:	01 d0                	add    %edx,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	85 c0                	test   %eax,%eax
f0102de7:	75 48                	jne    f0102e31 <check_boot_pgdir+0x19e>
f0102de9:	68 e2 9b 11 f0       	push   $0xf0119be2
f0102dee:	68 06 9b 11 f0       	push   $0xf0119b06
f0102df3:	68 9f 00 00 00       	push   $0x9f
f0102df8:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102dfd:	e8 74 d3 ff ff       	call   f0100176 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0102e02:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102e0a:	c1 e2 02             	shl    $0x2,%edx
f0102e0d:	01 d0                	add    %edx,%eax
f0102e0f:	8b 00                	mov    (%eax),%eax
f0102e11:	85 c0                	test   %eax,%eax
f0102e13:	74 1c                	je     f0102e31 <check_boot_pgdir+0x19e>
f0102e15:	68 f8 9b 11 f0       	push   $0xf0119bf8
f0102e1a:	68 06 9b 11 f0       	push   $0xf0119b06
f0102e1f:	68 a1 00 00 00       	push   $0xa1
f0102e24:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102e29:	e8 48 d3 ff ff       	call   f0100176 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0102e2e:	90                   	nop
f0102e2f:	eb 01                	jmp    f0102e32 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0102e31:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102e32:	ff 45 f4             	incl   -0xc(%ebp)
f0102e35:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0102e3c:	0f 86 44 ff ff ff    	jbe    f0102d86 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0102e42:	83 ec 0c             	sub    $0xc,%esp
f0102e45:	68 14 9c 11 f0       	push   $0xf0119c14
f0102e4a:	e8 80 3f 00 00       	call   f0106dcf <cprintf>
f0102e4f:	83 c4 10             	add    $0x10,%esp
}
f0102e52:	90                   	nop
f0102e53:	c9                   	leave  
f0102e54:	c3                   	ret    

f0102e55 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0102e55:	55                   	push   %ebp
f0102e56:	89 e5                	mov    %esp,%ebp
f0102e58:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0102e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e5e:	c1 e8 16             	shr    $0x16,%eax
f0102e61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102e68:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e6b:	01 d0                	add    %edx,%eax
f0102e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0102e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e73:	8b 00                	mov    (%eax),%eax
f0102e75:	83 e0 01             	and    $0x1,%eax
f0102e78:	85 c0                	test   %eax,%eax
f0102e7a:	75 0a                	jne    f0102e86 <check_va2pa+0x31>
		return ~0;
f0102e7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102e81:	e9 87 00 00 00       	jmp    f0102f0d <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0102e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e89:	8b 00                	mov    (%eax),%eax
f0102e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102e96:	c1 e8 0c             	shr    $0xc,%eax
f0102e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e9c:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0102ea1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0102ea4:	72 17                	jb     f0102ebd <check_va2pa+0x68>
f0102ea6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ea9:	68 34 9c 11 f0       	push   $0xf0119c34
f0102eae:	68 b7 00 00 00       	push   $0xb7
f0102eb3:	68 1b 9b 11 f0       	push   $0xf0119b1b
f0102eb8:	e8 b9 d2 ff ff       	call   f0100176 <_panic>
f0102ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102ec0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102ec5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0102ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ecb:	c1 e8 0c             	shr    $0xc,%eax
f0102ece:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102ed3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102edd:	01 d0                	add    %edx,%eax
f0102edf:	8b 00                	mov    (%eax),%eax
f0102ee1:	83 e0 01             	and    $0x1,%eax
f0102ee4:	85 c0                	test   %eax,%eax
f0102ee6:	75 07                	jne    f0102eef <check_va2pa+0x9a>
		return ~0;
f0102ee8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102eed:	eb 1e                	jmp    f0102f0d <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0102eef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef2:	c1 e8 0c             	shr    $0xc,%eax
f0102ef5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102efa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f04:	01 d0                	add    %edx,%eax
f0102f06:	8b 00                	mov    (%eax),%eax
f0102f08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0102f0d:	c9                   	leave  
f0102f0e:	c3                   	ret    

f0102f0f <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0102f0f:	55                   	push   %ebp
f0102f10:	89 e5                	mov    %esp,%ebp
f0102f12:	83 ec 10             	sub    $0x10,%esp
f0102f15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f18:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0102f1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f1e:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0102f21:	90                   	nop
f0102f22:	c9                   	leave  
f0102f23:	c3                   	ret    

f0102f24 <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0102f24:	55                   	push   %ebp
f0102f25:	89 e5                	mov    %esp,%ebp
f0102f27:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0102f2a:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0102f31:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f38:	eb 24                	jmp    f0102f5e <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0102f3a:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102f3f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0102f42:	c1 e2 02             	shl    $0x2,%edx
f0102f45:	01 c2                	add    %eax,%edx
f0102f47:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102f4c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0102f4f:	c1 e1 02             	shl    $0x2,%ecx
f0102f52:	01 c8                	add    %ecx,%eax
f0102f54:	8b 00                	mov    (%eax),%eax
f0102f56:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102f58:	ff 45 fc             	incl   -0x4(%ebp)
f0102f5b:	ff 45 f8             	incl   -0x8(%ebp)
f0102f5e:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f0102f63:	c1 e8 16             	shr    $0x16,%eax
f0102f66:	89 c2                	mov    %eax,%edx
f0102f68:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102f6b:	39 c2                	cmp    %eax,%edx
f0102f6d:	77 cb                	ja     f0102f3a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0102f6f:	a1 38 58 55 f0       	mov    0xf0555838,%eax
f0102f74:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102f7a:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0102f7d:	0f 20 c0             	mov    %cr0,%eax
f0102f80:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0102f83:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0102f86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0102f89:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0102f90:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0102f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f97:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0102f9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102f9d:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0102fa0:	0f 01 15 d0 e7 14 f0 	lgdtl  0xf014e7d0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0102fa7:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fac:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0102fae:	b8 23 00 00 00       	mov    $0x23,%eax
f0102fb3:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0102fb5:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fba:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0102fbc:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc1:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0102fc3:	b8 10 00 00 00       	mov    $0x10,%eax
f0102fc8:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0102fca:	ea d1 2f 10 f0 08 00 	ljmp   $0x8,$0xf0102fd1
	asm volatile("lldt %%ax" :: "a" (0));
f0102fd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fd6:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0102fd9:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0102fe0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102fe7:	eb 19                	jmp    f0103002 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0102fe9:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0102fee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102ff1:	c1 e2 02             	shl    $0x2,%edx
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0102ffc:	ff 45 f4             	incl   -0xc(%ebp)
f0102fff:	ff 45 f0             	incl   -0x10(%ebp)
f0103002:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f0103007:	c1 e8 16             	shr    $0x16,%eax
f010300a:	89 c2                	mov    %eax,%edx
f010300c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010300f:	39 c2                	cmp    %eax,%edx
f0103011:	77 d6                	ja     f0102fe9 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0103013:	a1 38 58 55 f0       	mov    0xf0555838,%eax
f0103018:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010301b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010301e:	0f 22 d8             	mov    %eax,%cr3
}
f0103021:	90                   	nop
f0103022:	c9                   	leave  
f0103023:	c3                   	ret    

f0103024 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0103024:	55                   	push   %ebp
f0103025:	89 e5                	mov    %esp,%ebp
f0103027:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010302a:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010302f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103032:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0103039:	77 17                	ja     f0103052 <setup_listing_to_all_page_tables_entries+0x2e>
f010303b:	ff 75 f4             	pushl  -0xc(%ebp)
f010303e:	68 2c 9b 11 f0       	push   $0xf0119b2c
f0103043:	68 86 01 00 00       	push   $0x186
f0103048:	68 1b 9b 11 f0       	push   $0xf0119b1b
f010304d:	e8 24 d1 ff ff       	call   f0100176 <_panic>
f0103052:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103055:	05 00 00 00 10       	add    $0x10000000,%eax
f010305a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f010305d:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0103062:	05 fc 0e 00 00       	add    $0xefc,%eax
f0103067:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010306a:	83 ca 03             	or     $0x3,%edx
f010306d:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010306f:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0103074:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010307a:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010307f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103082:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0103089:	77 17                	ja     f01030a2 <setup_listing_to_all_page_tables_entries+0x7e>
f010308b:	ff 75 ec             	pushl  -0x14(%ebp)
f010308e:	68 2c 9b 11 f0       	push   $0xf0119b2c
f0103093:	68 8b 01 00 00       	push   $0x18b
f0103098:	68 1b 9b 11 f0       	push   $0xf0119b1b
f010309d:	e8 d4 d0 ff ff       	call   f0100176 <_panic>
f01030a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01030a5:	05 00 00 00 10       	add    $0x10000000,%eax
f01030aa:	83 c8 05             	or     $0x5,%eax
f01030ad:	89 02                	mov    %eax,(%edx)

}
f01030af:	90                   	nop
f01030b0:	c9                   	leave  
f01030b1:	c3                   	ret    

f01030b2 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01030b2:	55                   	push   %ebp
f01030b3:	89 e5                	mov    %esp,%ebp
f01030b5:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01030b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01030bc:	75 15                	jne    f01030d3 <envid2env+0x21>
		*env_store = curenv;
f01030be:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f01030c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030c7:	89 10                	mov    %edx,(%eax)
		return 0;
f01030c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01030ce:	e9 94 00 00 00       	jmp    f0103167 <envid2env+0xb5>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01030d3:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f01030d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01030dc:	25 f1 04 00 00       	and    $0x4f1,%eax
f01030e1:	89 c2                	mov    %eax,%edx
f01030e3:	89 d0                	mov    %edx,%eax
f01030e5:	c1 e0 02             	shl    $0x2,%eax
f01030e8:	01 d0                	add    %edx,%eax
f01030ea:	01 c0                	add    %eax,%eax
f01030ec:	01 d0                	add    %edx,%eax
f01030ee:	01 c0                	add    %eax,%eax
f01030f0:	01 d0                	add    %edx,%eax
f01030f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01030f9:	01 d0                	add    %edx,%eax
f01030fb:	c1 e0 02             	shl    $0x2,%eax
f01030fe:	01 c8                	add    %ecx,%eax
f0103100:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0103103:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103106:	8b 40 54             	mov    0x54(%eax),%eax
f0103109:	85 c0                	test   %eax,%eax
f010310b:	74 0b                	je     f0103118 <envid2env+0x66>
f010310d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103110:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103113:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103116:	74 10                	je     f0103128 <envid2env+0x76>
		*env_store = 0;
f0103118:	8b 45 0c             	mov    0xc(%ebp),%eax
f010311b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103121:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103126:	eb 3f                	jmp    f0103167 <envid2env+0xb5>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0103128:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010312c:	74 2c                	je     f010315a <envid2env+0xa8>
f010312e:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0103133:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f0103136:	74 22                	je     f010315a <envid2env+0xa8>
f0103138:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010313b:	8b 50 50             	mov    0x50(%eax),%edx
f010313e:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0103143:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103146:	39 c2                	cmp    %eax,%edx
f0103148:	74 10                	je     f010315a <envid2env+0xa8>
		*env_store = 0;
f010314a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010314d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103153:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103158:	eb 0d                	jmp    f0103167 <envid2env+0xb5>
	}

	*env_store = e;
f010315a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010315d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103160:	89 10                	mov    %edx,(%eax)
	return 0;
f0103162:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103167:	c9                   	leave  
f0103168:	c3                   	ret    

f0103169 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0103169:	55                   	push   %ebp
f010316a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010316c:	8b 45 08             	mov    0x8(%ebp),%eax
f010316f:	8b 15 24 58 55 f0    	mov    0xf0555824,%edx
f0103175:	29 d0                	sub    %edx,%eax
f0103177:	c1 f8 03             	sar    $0x3,%eax
f010317a:	89 c2                	mov    %eax,%edx
f010317c:	89 d0                	mov    %edx,%eax
f010317e:	c1 e0 02             	shl    $0x2,%eax
f0103181:	01 d0                	add    %edx,%eax
f0103183:	c1 e0 02             	shl    $0x2,%eax
f0103186:	01 d0                	add    %edx,%eax
f0103188:	c1 e0 02             	shl    $0x2,%eax
f010318b:	01 d0                	add    %edx,%eax
f010318d:	89 c1                	mov    %eax,%ecx
f010318f:	c1 e1 08             	shl    $0x8,%ecx
f0103192:	01 c8                	add    %ecx,%eax
f0103194:	89 c1                	mov    %eax,%ecx
f0103196:	c1 e1 10             	shl    $0x10,%ecx
f0103199:	01 c8                	add    %ecx,%eax
f010319b:	01 c0                	add    %eax,%eax
f010319d:	01 d0                	add    %edx,%eax
}
f010319f:	5d                   	pop    %ebp
f01031a0:	c3                   	ret    

f01031a1 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f01031a1:	55                   	push   %ebp
f01031a2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01031a4:	ff 75 08             	pushl  0x8(%ebp)
f01031a7:	e8 bd ff ff ff       	call   f0103169 <to_frame_number>
f01031ac:	83 c4 04             	add    $0x4,%esp
f01031af:	c1 e0 0c             	shl    $0xc,%eax
}
f01031b2:	c9                   	leave  
f01031b3:	c3                   	ret    

f01031b4 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f01031b4:	55                   	push   %ebp
f01031b5:	89 e5                	mov    %esp,%ebp
f01031b7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01031ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01031bd:	c1 e8 0c             	shr    $0xc,%eax
f01031c0:	89 c2                	mov    %eax,%edx
f01031c2:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f01031c7:	39 c2                	cmp    %eax,%edx
f01031c9:	72 14                	jb     f01031df <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01031cb:	83 ec 04             	sub    $0x4,%esp
f01031ce:	68 64 9c 11 f0       	push   $0xf0119c64
f01031d3:	6a 75                	push   $0x75
f01031d5:	68 89 9c 11 f0       	push   $0xf0119c89
f01031da:	e8 97 cf ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f01031df:	8b 15 24 58 55 f0    	mov    0xf0555824,%edx
f01031e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031e8:	c1 e8 0c             	shr    $0xc,%eax
f01031eb:	89 c1                	mov    %eax,%ecx
f01031ed:	89 c8                	mov    %ecx,%eax
f01031ef:	01 c0                	add    %eax,%eax
f01031f1:	01 c8                	add    %ecx,%eax
f01031f3:	c1 e0 03             	shl    $0x3,%eax
f01031f6:	01 d0                	add    %edx,%eax
}
f01031f8:	c9                   	leave  
f01031f9:	c3                   	ret    

f01031fa <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f01031fa:	55                   	push   %ebp
f01031fb:	89 e5                	mov    %esp,%ebp
f01031fd:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103200:	83 ec 08             	sub    $0x8,%esp
f0103203:	68 00 10 00 00       	push   $0x1000
f0103208:	68 00 10 00 00       	push   $0x1000
f010320d:	e8 4f 02 00 00       	call   f0103461 <boot_allocate_space>
f0103212:	83 c4 10             	add    $0x10,%esp
f0103215:	a3 30 58 55 f0       	mov    %eax,0xf0555830
	memset(ptr_page_directory, 0, PAGE_SIZE);
f010321a:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010321f:	83 ec 04             	sub    $0x4,%esp
f0103222:	68 00 10 00 00       	push   $0x1000
f0103227:	6a 00                	push   $0x0
f0103229:	50                   	push   %eax
f010322a:	e8 79 47 01 00       	call   f01179a8 <memset>
f010322f:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0103232:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0103237:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010323a:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0103241:	77 14                	ja     f0103257 <initialize_kernel_VM+0x5d>
f0103243:	ff 75 e8             	pushl  -0x18(%ebp)
f0103246:	68 a4 9c 11 f0       	push   $0xf0119ca4
f010324b:	6a 57                	push   $0x57
f010324d:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103252:	e8 1f cf ff ff       	call   f0100176 <_panic>
f0103257:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010325a:	05 00 00 00 10       	add    $0x10000000,%eax
f010325f:	a3 38 58 55 f0       	mov    %eax,0xf0555838
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0103264:	c7 45 e4 00 60 14 f0 	movl   $0xf0146000,-0x1c(%ebp)
f010326b:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0103272:	77 14                	ja     f0103288 <initialize_kernel_VM+0x8e>
f0103274:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103277:	68 a4 9c 11 f0       	push   $0xf0119ca4
f010327c:	6a 5f                	push   $0x5f
f010327e:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103283:	e8 ee ce ff ff       	call   f0100176 <_panic>
f0103288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010328b:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103291:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0103296:	83 ec 0c             	sub    $0xc,%esp
f0103299:	6a 02                	push   $0x2
f010329b:	52                   	push   %edx
f010329c:	68 00 80 00 00       	push   $0x8000
f01032a1:	68 00 80 bf ef       	push   $0xefbf8000
f01032a6:	50                   	push   %eax
f01032a7:	e8 16 02 00 00       	call   f01034c2 <boot_map_range>
f01032ac:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01032af:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01032b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01032bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032c4:	eb 25                	jmp    f01032eb <initialize_kernel_VM+0xf1>
	{
		++nTables;
f01032c6:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f01032c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01032cc:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f01032d1:	83 ec 04             	sub    $0x4,%esp
f01032d4:	6a 01                	push   $0x1
f01032d6:	52                   	push   %edx
f01032d7:	50                   	push   %eax
f01032d8:	e8 59 02 00 00       	call   f0103536 <boot_get_page_table>
f01032dd:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01032e0:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01032e7:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f01032eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032ef:	72 d5                	jb     f01032c6 <initialize_kernel_VM+0xcc>
f01032f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032f5:	77 06                	ja     f01032fd <initialize_kernel_VM+0x103>
f01032f7:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f01032fb:	76 c9                	jbe    f01032c6 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct Frame_Info) ;
f01032fd:	8b 15 8c 73 53 f0    	mov    0xf053738c,%edx
f0103303:	89 d0                	mov    %edx,%eax
f0103305:	01 c0                	add    %eax,%eax
f0103307:	01 d0                	add    %edx,%eax
f0103309:	c1 e0 03             	shl    $0x3,%eax
f010330c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	68 00 10 00 00       	push   $0x1000
f0103317:	ff 75 e0             	pushl  -0x20(%ebp)
f010331a:	e8 42 01 00 00       	call   f0103461 <boot_allocate_space>
f010331f:	83 c4 10             	add    $0x10,%esp
f0103322:	a3 24 58 55 f0       	mov    %eax,0xf0555824
	memset(frames_info, 0, array_size);
f0103327:	a1 24 58 55 f0       	mov    0xf0555824,%eax
f010332c:	83 ec 04             	sub    $0x4,%esp
f010332f:	ff 75 e0             	pushl  -0x20(%ebp)
f0103332:	6a 00                	push   $0x0
f0103334:	50                   	push   %eax
f0103335:	e8 6e 46 01 00       	call   f01179a8 <memset>
f010333a:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f010333d:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0103344:	83 ec 08             	sub    $0x8,%esp
f0103347:	68 00 10 00 00       	push   $0x1000
f010334c:	ff 75 dc             	pushl  -0x24(%ebp)
f010334f:	e8 0d 01 00 00       	call   f0103461 <boot_allocate_space>
f0103354:	83 c4 10             	add    $0x10,%esp
f0103357:	a3 10 58 55 f0       	mov    %eax,0xf0555810
	memset(disk_frames_info , 0, disk_array_size);
f010335c:	a1 10 58 55 f0       	mov    0xf0555810,%eax
f0103361:	83 ec 04             	sub    $0x4,%esp
f0103364:	ff 75 dc             	pushl  -0x24(%ebp)
f0103367:	6a 00                	push   $0x0
f0103369:	50                   	push   %eax
f010336a:	e8 39 46 01 00       	call   f01179a8 <memset>
f010336f:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0103372:	e8 ad fc ff ff       	call   f0103024 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d\n",NENV);
f0103377:	83 ec 08             	sub    $0x8,%esp
f010337a:	68 f2 04 00 00       	push   $0x4f2
f010337f:	68 eb 9c 11 f0       	push   $0xf0119ceb
f0103384:	e8 46 3a 00 00       	call   f0106dcf <cprintf>
f0103389:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f010338c:	c7 45 d8 b8 fe 0f 00 	movl   $0xffeb8,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0103393:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103396:	83 ec 08             	sub    $0x8,%esp
f0103399:	68 00 10 00 00       	push   $0x1000
f010339e:	50                   	push   %eax
f010339f:	e8 bd 00 00 00       	call   f0103461 <boot_allocate_space>
f01033a4:	83 c4 10             	add    $0x10,%esp
f01033a7:	a3 ac 6a 53 f0       	mov    %eax,0xf0536aac
	memset(envs , 0, envs_size);
f01033ac:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033af:	a1 ac 6a 53 f0       	mov    0xf0536aac,%eax
f01033b4:	83 ec 04             	sub    $0x4,%esp
f01033b7:	52                   	push   %edx
f01033b8:	6a 00                	push   $0x0
f01033ba:	50                   	push   %eax
f01033bb:	e8 e8 45 01 00       	call   f01179a8 <memset>
f01033c0:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01033c3:	a1 ac 6a 53 f0       	mov    0xf0536aac,%eax
f01033c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01033cb:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01033d2:	77 17                	ja     f01033eb <initialize_kernel_VM+0x1f1>
f01033d4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01033d7:	68 a4 9c 11 f0       	push   $0xf0119ca4
f01033dc:	68 a8 00 00 00       	push   $0xa8
f01033e1:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01033e6:	e8 8b cd ff ff       	call   f0100176 <_panic>
f01033eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01033ee:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01033f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01033f7:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f01033fc:	83 ec 0c             	sub    $0xc,%esp
f01033ff:	6a 04                	push   $0x4
f0103401:	51                   	push   %ecx
f0103402:	52                   	push   %edx
f0103403:	68 00 00 c0 ee       	push   $0xeec00000
f0103408:	50                   	push   %eax
f0103409:	e8 b4 00 00 00       	call   f01034c2 <boot_map_range>
f010340e:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0103411:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0103416:	05 ec 0e 00 00       	add    $0xeec,%eax
f010341b:	8b 15 30 58 55 f0    	mov    0xf0555830,%edx
f0103421:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0103427:	8b 12                	mov    (%edx),%edx
f0103429:	83 ca 05             	or     $0x5,%edx
f010342c:	89 10                	mov    %edx,(%eax)
	if(USE_KHEAP)
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010342e:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f0103433:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103439:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010343e:	83 ec 0c             	sub    $0xc,%esp
f0103441:	6a 02                	push   $0x2
f0103443:	6a 00                	push   $0x0
f0103445:	52                   	push   %edx
f0103446:	68 00 00 00 f0       	push   $0xf0000000
f010344b:	50                   	push   %eax
f010344c:	e8 71 00 00 00       	call   f01034c2 <boot_map_range>
f0103451:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}

	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0103454:	e8 3a f8 ff ff       	call   f0102c93 <check_boot_pgdir>

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0103459:	e8 c6 fa ff ff       	call   f0102f24 <turn_on_paging>
}
f010345e:	90                   	nop
f010345f:	c9                   	leave  
f0103460:	c3                   	ret    

f0103461 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0103461:	55                   	push   %ebp
f0103462:	89 e5                	mov    %esp,%ebp
f0103464:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0103467:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f010346c:	85 c0                	test   %eax,%eax
f010346e:	75 0a                	jne    f010347a <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0103470:	c7 05 2c 58 55 f0 68 	movl   $0xf1155868,0xf055582c
f0103477:	58 15 f1 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010347a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010347d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103480:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f0103485:	89 c2                	mov    %eax,%edx
f0103487:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010348a:	01 d0                	add    %edx,%eax
f010348c:	48                   	dec    %eax
f010348d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0103490:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103493:	ba 00 00 00 00       	mov    $0x0,%edx
f0103498:	f7 75 fc             	divl   -0x4(%ebp)
f010349b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010349e:	29 d0                	sub    %edx,%eax
f01034a0:	a3 2c 58 55 f0       	mov    %eax,0xf055582c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01034a5:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f01034aa:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01034ad:	8b 15 2c 58 55 f0    	mov    0xf055582c,%edx
f01034b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b6:	01 d0                	add    %edx,%eax
f01034b8:	a3 2c 58 55 f0       	mov    %eax,0xf055582c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01034bd:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f01034c0:	c9                   	leave  
f01034c1:	c3                   	ret    

f01034c2 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01034c2:	55                   	push   %ebp
f01034c3:	89 e5                	mov    %esp,%ebp
f01034c5:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01034c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01034cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01034d6:	eb 53                	jmp    f010352b <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01034d8:	83 ec 04             	sub    $0x4,%esp
f01034db:	6a 01                	push   $0x1
f01034dd:	ff 75 0c             	pushl  0xc(%ebp)
f01034e0:	ff 75 08             	pushl  0x8(%ebp)
f01034e3:	e8 4e 00 00 00       	call   f0103536 <boot_get_page_table>
f01034e8:	83 c4 10             	add    $0x10,%esp
f01034eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01034ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034f1:	c1 e8 0c             	shr    $0xc,%eax
f01034f4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01034f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103506:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103509:	01 c2                	add    %eax,%edx
f010350b:	8b 45 18             	mov    0x18(%ebp),%eax
f010350e:	0b 45 14             	or     0x14(%ebp),%eax
f0103511:	83 c8 01             	or     $0x1,%eax
f0103514:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0103516:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f010351d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0103524:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010352b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010352e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103531:	72 a5                	jb     f01034d8 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0103533:	90                   	nop
f0103534:	c9                   	leave  
f0103535:	c3                   	ret    

f0103536 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0103536:	55                   	push   %ebp
f0103537:	89 e5                	mov    %esp,%ebp
f0103539:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f010353c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010353f:	c1 e8 16             	shr    $0x16,%eax
f0103542:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0103545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103548:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010354f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103552:	01 d0                	add    %edx,%eax
f0103554:	8b 00                	mov    (%eax),%eax
f0103556:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0103559:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010355c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103561:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0103564:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103567:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010356a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010356d:	c1 e8 0c             	shr    $0xc,%eax
f0103570:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103573:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0103578:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010357b:	72 17                	jb     f0103594 <boot_get_page_table+0x5e>
f010357d:	ff 75 e8             	pushl  -0x18(%ebp)
f0103580:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0103585:	68 26 01 00 00       	push   $0x126
f010358a:	68 d5 9c 11 f0       	push   $0xf0119cd5
f010358f:	e8 e2 cb ff ff       	call   f0100176 <_panic>
f0103594:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103597:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010359c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010359f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01035a3:	75 72                	jne    f0103617 <boot_get_page_table+0xe1>
	{
		if (create)
f01035a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01035a9:	74 65                	je     f0103610 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01035ab:	83 ec 08             	sub    $0x8,%esp
f01035ae:	68 00 10 00 00       	push   $0x1000
f01035b3:	68 00 10 00 00       	push   $0x1000
f01035b8:	e8 a4 fe ff ff       	call   f0103461 <boot_allocate_space>
f01035bd:	83 c4 10             	add    $0x10,%esp
f01035c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01035c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01035c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01035c9:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01035d0:	77 17                	ja     f01035e9 <boot_get_page_table+0xb3>
f01035d2:	ff 75 dc             	pushl  -0x24(%ebp)
f01035d5:	68 a4 9c 11 f0       	push   $0xf0119ca4
f01035da:	68 2c 01 00 00       	push   $0x12c
f01035df:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01035e4:	e8 8d cb ff ff       	call   f0100176 <_panic>
f01035e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01035ec:	05 00 00 00 10       	add    $0x10000000,%eax
f01035f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01035f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103601:	01 d0                	add    %edx,%eax
f0103603:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103606:	83 ca 03             	or     $0x3,%edx
f0103609:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f010360b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010360e:	eb 0a                	jmp    f010361a <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0103610:	b8 00 00 00 00       	mov    $0x0,%eax
f0103615:	eb 03                	jmp    f010361a <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0103617:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f010361a:	c9                   	leave  
f010361b:	c3                   	ret    

f010361c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010361c:	55                   	push   %ebp
f010361d:	89 e5                	mov    %esp,%ebp
f010361f:	53                   	push   %ebx
f0103620:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0103623:	c7 05 14 58 55 f0 00 	movl   $0x0,0xf0555814
f010362a:	00 00 00 
f010362d:	c7 05 18 58 55 f0 00 	movl   $0x0,0xf0555818
f0103634:	00 00 00 
f0103637:	c7 05 20 58 55 f0 00 	movl   $0x0,0xf0555820
f010363e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0103641:	c7 05 00 58 55 f0 00 	movl   $0x0,0xf0555800
f0103648:	00 00 00 
f010364b:	c7 05 04 58 55 f0 00 	movl   $0x0,0xf0555804
f0103652:	00 00 00 
f0103655:	c7 05 0c 58 55 f0 00 	movl   $0x0,0xf055580c
f010365c:	00 00 00 

	frames_info[0].references = 1;
f010365f:	a1 24 58 55 f0       	mov    0xf0555824,%eax
f0103664:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010366a:	a1 24 58 55 f0       	mov    0xf0555824,%eax
f010366f:	83 c0 18             	add    $0x18,%eax
f0103672:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0103678:	a1 24 58 55 f0       	mov    0xf0555824,%eax
f010367d:	83 c0 30             	add    $0x30,%eax
f0103680:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0103686:	c7 05 28 58 55 f0 00 	movl   $0xf0001000,0xf0555828
f010368d:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0103690:	c7 05 34 58 55 f0 00 	movl   $0xf0002000,0xf0555834
f0103697:	20 00 f0 
	i =0;
f010369a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01036a1:	eb 1f                	jmp    f01036c2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01036a3:	8b 15 28 58 55 f0    	mov    0xf0555828,%edx
f01036a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ac:	01 d0                	add    %edx,%eax
f01036ae:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01036b1:	8b 15 34 58 55 f0    	mov    0xf0555834,%edx
f01036b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036ba:	01 d0                	add    %edx,%eax
f01036bc:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01036bf:	ff 45 f4             	incl   -0xc(%ebp)
f01036c2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01036c9:	7e d8                	jle    f01036a3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01036cb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01036d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036d5:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01036da:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01036dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01036e5:	f7 75 f0             	divl   -0x10(%ebp)
f01036e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036eb:	29 d0                	sub    %edx,%eax
f01036ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01036f0:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01036f7:	e9 bc 00 00 00       	jmp    f01037b8 <initialize_paging+0x19c>
	{

		initialize_frame_info(&(frames_info[i]));
f01036fc:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103702:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103705:	89 d0                	mov    %edx,%eax
f0103707:	01 c0                	add    %eax,%eax
f0103709:	01 d0                	add    %edx,%eax
f010370b:	c1 e0 03             	shl    $0x3,%eax
f010370e:	01 c8                	add    %ecx,%eax
f0103710:	83 ec 0c             	sub    $0xc,%esp
f0103713:	50                   	push   %eax
f0103714:	e8 62 02 00 00       	call   f010397b <initialize_frame_info>
f0103719:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010371c:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103722:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103725:	89 d0                	mov    %edx,%eax
f0103727:	01 c0                	add    %eax,%eax
f0103729:	01 d0                	add    %edx,%eax
f010372b:	c1 e0 03             	shl    $0x3,%eax
f010372e:	01 c8                	add    %ecx,%eax
f0103730:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f0103736:	89 10                	mov    %edx,(%eax)
f0103738:	8b 00                	mov    (%eax),%eax
f010373a:	85 c0                	test   %eax,%eax
f010373c:	74 1f                	je     f010375d <initialize_paging+0x141>
f010373e:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f0103744:	8b 1d 24 58 55 f0    	mov    0xf0555824,%ebx
f010374a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010374d:	89 c8                	mov    %ecx,%eax
f010374f:	01 c0                	add    %eax,%eax
f0103751:	01 c8                	add    %ecx,%eax
f0103753:	c1 e0 03             	shl    $0x3,%eax
f0103756:	01 d8                	add    %ebx,%eax
f0103758:	89 42 04             	mov    %eax,0x4(%edx)
f010375b:	eb 19                	jmp    f0103776 <initialize_paging+0x15a>
f010375d:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103763:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103766:	89 d0                	mov    %edx,%eax
f0103768:	01 c0                	add    %eax,%eax
f010376a:	01 d0                	add    %edx,%eax
f010376c:	c1 e0 03             	shl    $0x3,%eax
f010376f:	01 c8                	add    %ecx,%eax
f0103771:	a3 18 58 55 f0       	mov    %eax,0xf0555818
f0103776:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f010377c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010377f:	89 d0                	mov    %edx,%eax
f0103781:	01 c0                	add    %eax,%eax
f0103783:	01 d0                	add    %edx,%eax
f0103785:	c1 e0 03             	shl    $0x3,%eax
f0103788:	01 c8                	add    %ecx,%eax
f010378a:	a3 14 58 55 f0       	mov    %eax,0xf0555814
f010378f:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103795:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103798:	89 d0                	mov    %edx,%eax
f010379a:	01 c0                	add    %eax,%eax
f010379c:	01 d0                	add    %edx,%eax
f010379e:	c1 e0 03             	shl    $0x3,%eax
f01037a1:	01 c8                	add    %ecx,%eax
f01037a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01037aa:	a1 20 58 55 f0       	mov    0xf0555820,%eax
f01037af:	40                   	inc    %eax
f01037b0:	a3 20 58 55 f0       	mov    %eax,0xf0555820
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01037b5:	ff 45 f4             	incl   -0xc(%ebp)
f01037b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01037bb:	85 c0                	test   %eax,%eax
f01037bd:	79 05                	jns    f01037c4 <initialize_paging+0x1a8>
f01037bf:	05 ff 0f 00 00       	add    $0xfff,%eax
f01037c4:	c1 f8 0c             	sar    $0xc,%eax
f01037c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01037ca:	0f 8f 2c ff ff ff    	jg     f01036fc <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037d0:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01037d7:	eb 1d                	jmp    f01037f6 <initialize_paging+0x1da>
	{
		frames_info[i].references = 1;
f01037d9:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f01037df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01037e2:	89 d0                	mov    %edx,%eax
f01037e4:	01 c0                	add    %eax,%eax
f01037e6:	01 d0                	add    %edx,%eax
f01037e8:	c1 e0 03             	shl    $0x3,%eax
f01037eb:	01 c8                	add    %ecx,%eax
f01037ed:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01037f3:	ff 45 f4             	incl   -0xc(%ebp)
f01037f6:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01037fd:	7e da                	jle    f01037d9 <initialize_paging+0x1bd>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01037ff:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0103806:	a1 2c 58 55 f0       	mov    0xf055582c,%eax
f010380b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010380e:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0103815:	77 17                	ja     f010382e <initialize_paging+0x212>
f0103817:	ff 75 e0             	pushl  -0x20(%ebp)
f010381a:	68 a4 9c 11 f0       	push   $0xf0119ca4
f010381f:	68 79 01 00 00       	push   $0x179
f0103824:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103829:	e8 48 c9 ff ff       	call   f0100176 <_panic>
f010382e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103831:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103837:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010383a:	01 d0                	add    %edx,%eax
f010383c:	48                   	dec    %eax
f010383d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103840:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103843:	ba 00 00 00 00       	mov    $0x0,%edx
f0103848:	f7 75 e4             	divl   -0x1c(%ebp)
f010384b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010384e:	29 d0                	sub    %edx,%eax
f0103850:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103853:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010385a:	eb 1d                	jmp    f0103879 <initialize_paging+0x25d>
	{
		frames_info[i].references = 1;
f010385c:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103862:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103865:	89 d0                	mov    %edx,%eax
f0103867:	01 c0                	add    %eax,%eax
f0103869:	01 d0                	add    %edx,%eax
f010386b:	c1 e0 03             	shl    $0x3,%eax
f010386e:	01 c8                	add    %ecx,%eax
f0103870:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103876:	ff 45 f4             	incl   -0xc(%ebp)
f0103879:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387c:	85 c0                	test   %eax,%eax
f010387e:	79 05                	jns    f0103885 <initialize_paging+0x269>
f0103880:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103885:	c1 f8 0c             	sar    $0xc,%eax
f0103888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010388b:	7f cf                	jg     f010385c <initialize_paging+0x240>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010388d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103890:	85 c0                	test   %eax,%eax
f0103892:	79 05                	jns    f0103899 <initialize_paging+0x27d>
f0103894:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103899:	c1 f8 0c             	sar    $0xc,%eax
f010389c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010389f:	e9 bc 00 00 00       	jmp    f0103960 <initialize_paging+0x344>
	{
		initialize_frame_info(&(frames_info[i]));
f01038a4:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f01038aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038ad:	89 d0                	mov    %edx,%eax
f01038af:	01 c0                	add    %eax,%eax
f01038b1:	01 d0                	add    %edx,%eax
f01038b3:	c1 e0 03             	shl    $0x3,%eax
f01038b6:	01 c8                	add    %ecx,%eax
f01038b8:	83 ec 0c             	sub    $0xc,%esp
f01038bb:	50                   	push   %eax
f01038bc:	e8 ba 00 00 00       	call   f010397b <initialize_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01038c4:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f01038ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038cd:	89 d0                	mov    %edx,%eax
f01038cf:	01 c0                	add    %eax,%eax
f01038d1:	01 d0                	add    %edx,%eax
f01038d3:	c1 e0 03             	shl    $0x3,%eax
f01038d6:	01 c8                	add    %ecx,%eax
f01038d8:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f01038de:	89 10                	mov    %edx,(%eax)
f01038e0:	8b 00                	mov    (%eax),%eax
f01038e2:	85 c0                	test   %eax,%eax
f01038e4:	74 1f                	je     f0103905 <initialize_paging+0x2e9>
f01038e6:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f01038ec:	8b 1d 24 58 55 f0    	mov    0xf0555824,%ebx
f01038f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01038f5:	89 c8                	mov    %ecx,%eax
f01038f7:	01 c0                	add    %eax,%eax
f01038f9:	01 c8                	add    %ecx,%eax
f01038fb:	c1 e0 03             	shl    $0x3,%eax
f01038fe:	01 d8                	add    %ebx,%eax
f0103900:	89 42 04             	mov    %eax,0x4(%edx)
f0103903:	eb 19                	jmp    f010391e <initialize_paging+0x302>
f0103905:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f010390b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010390e:	89 d0                	mov    %edx,%eax
f0103910:	01 c0                	add    %eax,%eax
f0103912:	01 d0                	add    %edx,%eax
f0103914:	c1 e0 03             	shl    $0x3,%eax
f0103917:	01 c8                	add    %ecx,%eax
f0103919:	a3 18 58 55 f0       	mov    %eax,0xf0555818
f010391e:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f0103924:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103927:	89 d0                	mov    %edx,%eax
f0103929:	01 c0                	add    %eax,%eax
f010392b:	01 d0                	add    %edx,%eax
f010392d:	c1 e0 03             	shl    $0x3,%eax
f0103930:	01 c8                	add    %ecx,%eax
f0103932:	a3 14 58 55 f0       	mov    %eax,0xf0555814
f0103937:	8b 0d 24 58 55 f0    	mov    0xf0555824,%ecx
f010393d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103940:	89 d0                	mov    %edx,%eax
f0103942:	01 c0                	add    %eax,%eax
f0103944:	01 d0                	add    %edx,%eax
f0103946:	c1 e0 03             	shl    $0x3,%eax
f0103949:	01 c8                	add    %ecx,%eax
f010394b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103952:	a1 20 58 55 f0       	mov    0xf0555820,%eax
f0103957:	40                   	inc    %eax
f0103958:	a3 20 58 55 f0       	mov    %eax,0xf0555820
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010395d:	ff 45 f4             	incl   -0xc(%ebp)
f0103960:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103963:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0103968:	39 c2                	cmp    %eax,%edx
f010396a:	0f 82 34 ff ff ff    	jb     f01038a4 <initialize_paging+0x288>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0103970:	e8 6c 7b 00 00       	call   f010b4e1 <initialize_disk_page_file>
}
f0103975:	90                   	nop
f0103976:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103979:	c9                   	leave  
f010397a:	c3                   	ret    

f010397b <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct Frame_Info *ptr_frame_info)
{
f010397b:	55                   	push   %ebp
f010397c:	89 e5                	mov    %esp,%ebp
f010397e:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103981:	83 ec 04             	sub    $0x4,%esp
f0103984:	6a 18                	push   $0x18
f0103986:	6a 00                	push   $0x0
f0103988:	ff 75 08             	pushl  0x8(%ebp)
f010398b:	e8 18 40 01 00       	call   f01179a8 <memset>
f0103990:	83 c4 10             	add    $0x10,%esp
}
f0103993:	90                   	nop
f0103994:	c9                   	leave  
f0103995:	c3                   	ret    

f0103996 <allocate_frame>:
// Hint: references should not be incremented

extern void env_free(struct Env *e);

int allocate_frame(struct Frame_Info **ptr_frame_info)
{
f0103996:	55                   	push   %ebp
f0103997:	89 e5                	mov    %esp,%ebp
f0103999:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010399c:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f01039a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a5:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01039a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01039ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b1:	8b 00                	mov    (%eax),%eax
f01039b3:	85 c0                	test   %eax,%eax
f01039b5:	75 17                	jne    f01039ce <allocate_frame+0x38>
	{
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01039b7:	83 ec 04             	sub    $0x4,%esp
f01039ba:	68 2c 9d 11 f0       	push   $0xf0119d2c
f01039bf:	68 ac 01 00 00       	push   $0x1ac
f01039c4:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01039c9:	e8 a8 c7 ff ff       	call   f0100176 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01039ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01039d1:	8b 00                	mov    (%eax),%eax
f01039d3:	8b 00                	mov    (%eax),%eax
f01039d5:	85 c0                	test   %eax,%eax
f01039d7:	74 14                	je     f01039ed <allocate_frame+0x57>
f01039d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01039dc:	8b 00                	mov    (%eax),%eax
f01039de:	8b 00                	mov    (%eax),%eax
f01039e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01039e3:	8b 12                	mov    (%edx),%edx
f01039e5:	8b 52 04             	mov    0x4(%edx),%edx
f01039e8:	89 50 04             	mov    %edx,0x4(%eax)
f01039eb:	eb 0d                	jmp    f01039fa <allocate_frame+0x64>
f01039ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01039f0:	8b 00                	mov    (%eax),%eax
f01039f2:	8b 40 04             	mov    0x4(%eax),%eax
f01039f5:	a3 18 58 55 f0       	mov    %eax,0xf0555818
f01039fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fd:	8b 00                	mov    (%eax),%eax
f01039ff:	8b 40 04             	mov    0x4(%eax),%eax
f0103a02:	85 c0                	test   %eax,%eax
f0103a04:	74 13                	je     f0103a19 <allocate_frame+0x83>
f0103a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a09:	8b 00                	mov    (%eax),%eax
f0103a0b:	8b 40 04             	mov    0x4(%eax),%eax
f0103a0e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103a11:	8b 12                	mov    (%edx),%edx
f0103a13:	8b 12                	mov    (%edx),%edx
f0103a15:	89 10                	mov    %edx,(%eax)
f0103a17:	eb 0c                	jmp    f0103a25 <allocate_frame+0x8f>
f0103a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a1c:	8b 00                	mov    (%eax),%eax
f0103a1e:	8b 00                	mov    (%eax),%eax
f0103a20:	a3 14 58 55 f0       	mov    %eax,0xf0555814
f0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a28:	8b 00                	mov    (%eax),%eax
f0103a2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103a30:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a33:	8b 00                	mov    (%eax),%eax
f0103a35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a3c:	a1 20 58 55 f0       	mov    0xf0555820,%eax
f0103a41:	48                   	dec    %eax
f0103a42:	a3 20 58 55 f0       	mov    %eax,0xf0555820

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0103a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4a:	8b 00                	mov    (%eax),%eax
f0103a4c:	8a 40 14             	mov    0x14(%eax),%al
f0103a4f:	84 c0                	test   %al,%al
f0103a51:	74 1d                	je     f0103a70 <allocate_frame+0xda>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment,(*ptr_frame_info)->va);
f0103a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a56:	8b 00                	mov    (%eax),%eax
f0103a58:	8b 50 0c             	mov    0xc(%eax),%edx
f0103a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a5e:	8b 00                	mov    (%eax),%eax
f0103a60:	8b 40 10             	mov    0x10(%eax),%eax
f0103a63:	83 ec 08             	sub    $0x8,%esp
f0103a66:	52                   	push   %edx
f0103a67:	50                   	push   %eax
f0103a68:	e8 7a 14 00 00       	call   f0104ee7 <pt_clear_page_table_entry>
f0103a6d:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0103a70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a73:	8b 00                	mov    (%eax),%eax
f0103a75:	83 ec 0c             	sub    $0xc,%esp
f0103a78:	50                   	push   %eax
f0103a79:	e8 fd fe ff ff       	call   f010397b <initialize_frame_info>
f0103a7e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103a81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a86:	c9                   	leave  
f0103a87:	c3                   	ret    

f0103a88 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct Frame_Info *ptr_frame_info)
{
f0103a88:	55                   	push   %ebp
f0103a89:	89 e5                	mov    %esp,%ebp
f0103a8b:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0103a8e:	83 ec 0c             	sub    $0xc,%esp
f0103a91:	ff 75 08             	pushl  0x8(%ebp)
f0103a94:	e8 e2 fe ff ff       	call   f010397b <initialize_frame_info>
f0103a99:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103a9c:	8b 15 14 58 55 f0    	mov    0xf0555814,%edx
f0103aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa5:	89 10                	mov    %edx,(%eax)
f0103aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aaa:	8b 00                	mov    (%eax),%eax
f0103aac:	85 c0                	test   %eax,%eax
f0103aae:	74 0d                	je     f0103abd <free_frame+0x35>
f0103ab0:	a1 14 58 55 f0       	mov    0xf0555814,%eax
f0103ab5:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ab8:	89 50 04             	mov    %edx,0x4(%eax)
f0103abb:	eb 08                	jmp    f0103ac5 <free_frame+0x3d>
f0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac0:	a3 18 58 55 f0       	mov    %eax,0xf0555818
f0103ac5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac8:	a3 14 58 55 f0       	mov    %eax,0xf0555814
f0103acd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ad7:	a1 20 58 55 f0       	mov    0xf0555820,%eax
f0103adc:	40                   	inc    %eax
f0103add:	a3 20 58 55 f0       	mov    %eax,0xf0555820
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0103ae2:	90                   	nop
f0103ae3:	c9                   	leave  
f0103ae4:	c3                   	ret    

f0103ae5 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct Frame_Info* ptr_frame_info)
{
f0103ae5:	55                   	push   %ebp
f0103ae6:	89 e5                	mov    %esp,%ebp
f0103ae8:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0103aeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aee:	8b 40 08             	mov    0x8(%eax),%eax
f0103af1:	48                   	dec    %eax
f0103af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0103af5:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afc:	8b 40 08             	mov    0x8(%eax),%eax
f0103aff:	66 85 c0             	test   %ax,%ax
f0103b02:	75 0e                	jne    f0103b12 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0103b04:	83 ec 0c             	sub    $0xc,%esp
f0103b07:	ff 75 08             	pushl  0x8(%ebp)
f0103b0a:	e8 79 ff ff ff       	call   f0103a88 <free_frame>
f0103b0f:	83 c4 10             	add    $0x10,%esp
}
f0103b12:	90                   	nop
f0103b13:	c9                   	leave  
f0103b14:	c3                   	ret    

f0103b15 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const void *virtual_address, uint32 **ptr_page_table)
{
f0103b15:	55                   	push   %ebp
f0103b16:	89 e5                	mov    %esp,%ebp
f0103b18:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b1e:	c1 e8 16             	shr    $0x16,%eax
f0103b21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b28:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2b:	01 d0                	add    %edx,%eax
f0103b2d:	8b 00                	mov    (%eax),%eax
f0103b2f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103b32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b35:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103b3a:	77 1d                	ja     f0103b59 <get_page_table+0x44>
	{
		*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b44:	83 ec 0c             	sub    $0xc,%esp
f0103b47:	50                   	push   %eax
f0103b48:	e8 58 89 00 00       	call   f010c4a5 <kheap_virtual_address>
f0103b4d:	83 c4 10             	add    $0x10,%esp
f0103b50:	89 c2                	mov    %eax,%edx
f0103b52:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b55:	89 10                	mov    %edx,(%eax)
f0103b57:	eb 44                	jmp    f0103b9d <get_page_table+0x88>
	}
	else
	{
		*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b67:	c1 e8 0c             	shr    $0xc,%eax
f0103b6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b6d:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0103b72:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b75:	72 17                	jb     f0103b8e <get_page_table+0x79>
f0103b77:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b7a:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0103b7f:	68 f2 01 00 00       	push   $0x1f2
f0103b84:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103b89:	e8 e8 c5 ff ff       	call   f0100176 <_panic>
f0103b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b96:	89 c2                	mov    %eax,%edx
f0103b98:	8b 45 10             	mov    0x10(%ebp),%eax
f0103b9b:	89 10                	mov    %edx,(%eax)
	}

	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ba0:	83 e0 01             	and    $0x1,%eax
f0103ba3:	85 c0                	test   %eax,%eax
f0103ba5:	74 0a                	je     f0103bb1 <get_page_table+0x9c>
	{
		return TABLE_IN_MEMORY;
f0103ba7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103bac:	e9 ba 00 00 00       	jmp    f0103c6b <get_page_table+0x156>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103bb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103bb5:	0f 84 a2 00 00 00    	je     f0103c5d <get_page_table+0x148>
	{
		// Put the faulted address in CR2 and then
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;
f0103bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bbe:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103bc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103bc4:	0f 22 d0             	mov    %eax,%cr2

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0103bc7:	83 ec 0c             	sub    $0xc,%esp
f0103bca:	6a 00                	push   $0x0
f0103bcc:	e8 ad 48 00 00       	call   f010847e <fault_handler>
f0103bd1:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bd7:	c1 e8 16             	shr    $0x16,%eax
f0103bda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be4:	01 d0                	add    %edx,%eax
f0103be6:	8b 00                	mov    (%eax),%eax
f0103be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103beb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103bf3:	77 1d                	ja     f0103c12 <get_page_table+0xfd>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103bf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bfd:	83 ec 0c             	sub    $0xc,%esp
f0103c00:	50                   	push   %eax
f0103c01:	e8 9f 88 00 00       	call   f010c4a5 <kheap_virtual_address>
f0103c06:	83 c4 10             	add    $0x10,%esp
f0103c09:	89 c2                	mov    %eax,%edx
f0103c0b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c0e:	89 10                	mov    %edx,(%eax)
f0103c10:	eb 44                	jmp    f0103c56 <get_page_table+0x141>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c20:	c1 e8 0c             	shr    $0xc,%eax
f0103c23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c26:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0103c2b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103c2e:	72 17                	jb     f0103c47 <get_page_table+0x132>
f0103c30:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c33:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0103c38:	68 0d 02 00 00       	push   $0x20d
f0103c3d:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103c42:	e8 2f c5 ff ff       	call   f0100176 <_panic>
f0103c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c4a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c4f:	89 c2                	mov    %eax,%edx
f0103c51:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c54:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0103c56:	b8 00 00 00 00       	mov    $0x0,%eax
f0103c5b:	eb 0e                	jmp    f0103c6b <get_page_table+0x156>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0103c5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0103c66:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0103c6b:	c9                   	leave  
f0103c6c:	c3                   	ret    

f0103c6d <create_page_table>:

void * create_page_table(uint32 *ptr_page_directory, const uint32 virtual_address) {
f0103c6d:	55                   	push   %ebp
f0103c6e:	89 e5                	mov    %esp,%ebp
f0103c70:	83 ec 18             	sub    $0x18,%esp
	//REMEMBER TO:
	//	a.	clear all entries (as it may contain garbage data)
	//	b.	clear the TLB cache (using "tlbflush()")
	//change this "return" according to your answer

	uint32* newPT = kmalloc(PAGE_SIZE);
f0103c73:	83 ec 0c             	sub    $0xc,%esp
f0103c76:	68 00 10 00 00       	push   $0x1000
f0103c7b:	e8 f0 86 00 00       	call   f010c370 <kmalloc>
f0103c80:	83 c4 10             	add    $0x10,%esp
f0103c83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
f0103c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c89:	83 ec 0c             	sub    $0xc,%esp
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 75 88 00 00       	call   f010c507 <kheap_physical_address>
f0103c92:	83 c4 10             	add    $0x10,%esp
f0103c95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;
f0103c98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c9b:	c1 e8 16             	shr    $0x16,%eax
f0103c9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ca5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca8:	01 d0                	add    %edx,%eax
f0103caa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0103cad:	83 ca 07             	or     $0x7,%edx
f0103cb0:	89 10                	mov    %edx,(%eax)

	for(int i=0; i < kilo; i++) {
f0103cb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb9:	eb 18                	jmp    f0103cd3 <create_page_table+0x66>
		newPT[i] = 0;
f0103cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc8:	01 d0                	add    %edx,%eax
f0103cca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	uint32* newPT = kmalloc(PAGE_SIZE);
	uint32 phyAdd = kheap_physical_address((uint32)newPT);
	ptr_page_directory[PDX(virtual_address)] = phyAdd|PERM_PRESENT|PERM_WRITEABLE|PERM_USER;

	for(int i=0; i < kilo; i++) {
f0103cd0:	ff 45 f4             	incl   -0xc(%ebp)
f0103cd3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0103cda:	7e df                	jle    f0103cbb <create_page_table+0x4e>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0103cdc:	0f 20 d8             	mov    %cr3,%eax
f0103cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0103ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ce5:	0f 22 d8             	mov    %eax,%cr3
		newPT[i] = 0;
	}

	tlbflush();
	return newPT;
f0103ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ceb:	c9                   	leave  
f0103cec:	c3                   	ret    

f0103ced <__static_cpt>:


void __static_cpt(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0103ced:	55                   	push   %ebp
f0103cee:	89 e5                	mov    %esp,%ebp
f0103cf0:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0103cf3:	83 ec 04             	sub    $0x4,%esp
f0103cf6:	68 7c 9d 11 f0       	push   $0xf0119d7c
f0103cfb:	68 36 02 00 00       	push   $0x236
f0103d00:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103d05:	e8 6c c4 ff ff       	call   f0100176 <_panic>

f0103d0a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103d0a:	55                   	push   %ebp
f0103d0b:	89 e5                	mov    %esp,%ebp
f0103d0d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103d10:	ff 75 0c             	pushl  0xc(%ebp)
f0103d13:	e8 89 f4 ff ff       	call   f01031a1 <to_physical_address>
f0103d18:	83 c4 04             	add    $0x4,%esp
f0103d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0103d1e:	83 ec 04             	sub    $0x4,%esp
f0103d21:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103d24:	50                   	push   %eax
f0103d25:	ff 75 10             	pushl  0x10(%ebp)
f0103d28:	ff 75 08             	pushl  0x8(%ebp)
f0103d2b:	e8 e5 fd ff ff       	call   f0103b15 <get_page_table>
f0103d30:	83 c4 10             	add    $0x10,%esp
f0103d33:	83 f8 01             	cmp    $0x1,%eax
f0103d36:	75 15                	jne    f0103d4d <map_frame+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103d38:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d3b:	83 ec 08             	sub    $0x8,%esp
f0103d3e:	50                   	push   %eax
f0103d3f:	ff 75 08             	pushl  0x8(%ebp)
f0103d42:	e8 26 ff ff ff       	call   f0103c6d <create_page_table>
f0103d47:	83 c4 10             	add    $0x10,%esp
f0103d4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}

	}

	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0103d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d50:	8b 55 10             	mov    0x10(%ebp),%edx
f0103d53:	c1 ea 0c             	shr    $0xc,%edx
f0103d56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103d5c:	c1 e2 02             	shl    $0x2,%edx
f0103d5f:	01 d0                	add    %edx,%eax
f0103d61:	8b 00                	mov    (%eax),%eax
f0103d63:	89 45 f0             	mov    %eax,-0x10(%ebp)


	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0103d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d69:	83 e0 01             	and    $0x1,%eax
f0103d6c:	85 c0                	test   %eax,%eax
f0103d6e:	74 25                	je     f0103d95 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0103d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103d7b:	75 07                	jne    f0103d84 <map_frame+0x7a>
			return 0;
f0103d7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d82:	eb 43                	jmp    f0103dc7 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0103d84:	83 ec 08             	sub    $0x8,%esp
f0103d87:	ff 75 10             	pushl  0x10(%ebp)
f0103d8a:	ff 75 08             	pushl  0x8(%ebp)
f0103d8d:	e8 a7 00 00 00       	call   f0103e39 <unmap_frame>
f0103d92:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	8b 40 08             	mov    0x8(%eax),%eax
f0103d9b:	40                   	inc    %eax
f0103d9c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d9f:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103da6:	8b 55 10             	mov    0x10(%ebp),%edx
f0103da9:	c1 ea 0c             	shr    $0xc,%edx
f0103dac:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103db2:	c1 e2 02             	shl    $0x2,%edx
f0103db5:	01 c2                	add    %eax,%edx
f0103db7:	8b 45 14             	mov    0x14(%ebp),%eax
f0103dba:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103dbd:	83 c8 01             	or     $0x1,%eax
f0103dc0:	89 02                	mov    %eax,(%edx)

	return 0;
f0103dc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103dc7:	c9                   	leave  
f0103dc8:	c3                   	ret    

f0103dc9 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct Frame_Info * get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table)
{
f0103dc9:	55                   	push   %ebp
f0103dca:	89 e5                	mov    %esp,%ebp
f0103dcc:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0103dcf:	83 ec 04             	sub    $0x4,%esp
f0103dd2:	ff 75 10             	pushl  0x10(%ebp)
f0103dd5:	ff 75 0c             	pushl  0xc(%ebp)
f0103dd8:	ff 75 08             	pushl  0x8(%ebp)
f0103ddb:	e8 35 fd ff ff       	call   f0103b15 <get_page_table>
f0103de0:	83 c4 10             	add    $0x10,%esp
f0103de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if((*ptr_page_table) != 0)
f0103de6:	8b 45 10             	mov    0x10(%ebp),%eax
f0103de9:	8b 00                	mov    (%eax),%eax
f0103deb:	85 c0                	test   %eax,%eax
f0103ded:	74 43                	je     f0103e32 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0103def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103df2:	c1 e8 0c             	shr    $0xc,%eax
f0103df5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0103dfd:	8b 45 10             	mov    0x10(%ebp),%eax
f0103e00:	8b 00                	mov    (%eax),%eax
f0103e02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103e05:	c1 e2 02             	shl    $0x2,%edx
f0103e08:	01 d0                	add    %edx,%eax
f0103e0a:	8b 00                	mov    (%eax),%eax
f0103e0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0103e0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0103e13:	74 16                	je     f0103e2b <get_frame_info+0x62>
		{
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0103e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e1d:	83 ec 0c             	sub    $0xc,%esp
f0103e20:	50                   	push   %eax
f0103e21:	e8 8e f3 ff ff       	call   f01031b4 <to_frame_info>
f0103e26:	83 c4 10             	add    $0x10,%esp
f0103e29:	eb 0c                	jmp    f0103e37 <get_frame_info+0x6e>
		}
		return 0;
f0103e2b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e30:	eb 05                	jmp    f0103e37 <get_frame_info+0x6e>
	}
	return 0;
f0103e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e37:	c9                   	leave  
f0103e38:	c3                   	ret    

f0103e39 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, void *virtual_address)
{
f0103e39:	55                   	push   %ebp
f0103e3a:	89 e5                	mov    %esp,%ebp
f0103e3c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0103e3f:	83 ec 04             	sub    $0x4,%esp
f0103e42:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e45:	50                   	push   %eax
f0103e46:	ff 75 0c             	pushl  0xc(%ebp)
f0103e49:	ff 75 08             	pushl  0x8(%ebp)
f0103e4c:	e8 78 ff ff ff       	call   f0103dc9 <get_frame_info>
f0103e51:	83 c4 10             	add    $0x10,%esp
f0103e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0103e57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e5b:	74 60                	je     f0103ebd <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0103e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e60:	8a 40 14             	mov    0x14(%eax),%al
f0103e63:	84 c0                	test   %al,%al
f0103e65:	74 1d                	je     f0103e84 <unmap_frame+0x4b>
f0103e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e6a:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103e6f:	77 13                	ja     f0103e84 <unmap_frame+0x4b>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0103e71:	83 ec 08             	sub    $0x8,%esp
f0103e74:	ff 75 0c             	pushl  0xc(%ebp)
f0103e77:	68 a0 9d 11 f0       	push   $0xf0119da0
f0103e7c:	e8 4e 2f 00 00       	call   f0106dcf <cprintf>
f0103e81:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0103e84:	83 ec 0c             	sub    $0xc,%esp
f0103e87:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e8a:	e8 56 fc ff ff       	call   f0103ae5 <decrement_references>
f0103e8f:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0103e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e95:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e98:	c1 ea 0c             	shr    $0xc,%edx
f0103e9b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ea1:	c1 e2 02             	shl    $0x2,%edx
f0103ea4:	01 d0                	add    %edx,%eax
f0103ea6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, virtual_address);
f0103eac:	83 ec 08             	sub    $0x8,%esp
f0103eaf:	ff 75 0c             	pushl  0xc(%ebp)
f0103eb2:	ff 75 08             	pushl  0x8(%ebp)
f0103eb5:	e8 55 f0 ff ff       	call   f0102f0f <tlb_invalidate>
f0103eba:	83 c4 10             	add    $0x10,%esp
	}
}
f0103ebd:	90                   	nop
f0103ebe:	c9                   	leave  
f0103ebf:	c3                   	ret    

f0103ec0 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0103ec0:	55                   	push   %ebp
f0103ec1:	89 e5                	mov    %esp,%ebp
f0103ec3:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0103ec6:	ff 75 0c             	pushl  0xc(%ebp)
f0103ec9:	e8 d3 f2 ff ff       	call   f01031a1 <to_physical_address>
f0103ece:	83 c4 04             	add    $0x4,%esp
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103ed4:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ed7:	c1 e8 16             	shr    $0x16,%eax
f0103eda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee4:	01 d0                	add    %edx,%eax
f0103ee6:	8b 00                	mov    (%eax),%eax
f0103ee8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103eeb:	8b 45 10             	mov    0x10(%ebp),%eax
f0103eee:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103ef3:	77 19                	ja     f0103f0e <loadtime_map_frame+0x4e>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ef8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103efd:	83 ec 0c             	sub    $0xc,%esp
f0103f00:	50                   	push   %eax
f0103f01:	e8 9f 85 00 00       	call   f010c4a5 <kheap_virtual_address>
f0103f06:	83 c4 10             	add    $0x10,%esp
f0103f09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f0c:	eb 40                	jmp    f0103f4e <loadtime_map_frame+0x8e>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103f22:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0103f27:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <loadtime_map_frame+0x83>
f0103f2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0103f2f:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0103f34:	68 c3 02 00 00       	push   $0x2c3
f0103f39:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0103f3e:	e8 33 c2 ff ff       	call   f0100176 <_panic>
f0103f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0103f4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103f52:	75 15                	jne    f0103f69 <loadtime_map_frame+0xa9>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103f54:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f57:	83 ec 08             	sub    $0x8,%esp
f0103f5a:	50                   	push   %eax
f0103f5b:	ff 75 08             	pushl  0x8(%ebp)
f0103f5e:	e8 0a fd ff ff       	call   f0103c6d <create_page_table>
f0103f63:	83 c4 10             	add    $0x10,%esp
f0103f66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		}
	}

	ptr_frame_info->references++;
f0103f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f6c:	8b 40 08             	mov    0x8(%eax),%eax
f0103f6f:	40                   	inc    %eax
f0103f70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f73:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0103f77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0103f7d:	c1 ea 0c             	shr    $0xc,%edx
f0103f80:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f86:	c1 e2 02             	shl    $0x2,%edx
f0103f89:	01 c2                	add    %eax,%edx
f0103f8b:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f8e:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103f91:	83 c8 01             	or     $0x1,%eax
f0103f94:	89 02                	mov    %eax,(%edx)

	return 0;
f0103f96:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103f9b:	c9                   	leave  
f0103f9c:	c3                   	ret    

f0103f9d <allocateMem>:
//======================================================
/// functions used for malloc() and freeHeap()
//======================================================

// [10] allocateMem
void allocateMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103f9d:	55                   	push   %ebp
f0103f9e:	89 e5                	mov    %esp,%ebp
f0103fa0:	83 ec 18             	sub    $0x18,%esp
	//panic("allocateMem() is not implemented yet...!!");

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
f0103fa3:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103faa:	8b 55 10             	mov    0x10(%ebp),%edx
f0103fad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fb0:	01 d0                	add    %edx,%eax
f0103fb2:	48                   	dec    %eax
f0103fb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0103fbe:	f7 75 f0             	divl   -0x10(%ebp)
f0103fc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fc4:	29 d0                	sub    %edx,%eax
f0103fc6:	89 45 10             	mov    %eax,0x10(%ebp)
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103fcf:	eb 1b                	jmp    f0103fec <allocateMem+0x4f>
		pf_add_empty_env_page(e, i, 1);
f0103fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd4:	83 ec 04             	sub    $0x4,%esp
f0103fd7:	6a 01                	push   $0x1
f0103fd9:	50                   	push   %eax
f0103fda:	ff 75 08             	pushl  0x8(%ebp)
f0103fdd:	e8 ae 78 00 00       	call   f010b890 <pf_add_empty_env_page>
f0103fe2:	83 c4 10             	add    $0x10,%esp

	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

	size = ROUNDUP(size, PAGE_SIZE);
	for(int i=virtual_address; i<(virtual_address + size); i += PAGE_SIZE) {
f0103fe5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0103fec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103fef:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ff2:	01 c2                	add    %eax,%edx
f0103ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ff7:	39 c2                	cmp    %eax,%edx
f0103ff9:	77 d6                	ja     f0103fd1 <allocateMem+0x34>
		pf_add_empty_env_page(e, i, 1);
	}
}
f0103ffb:	90                   	nop
f0103ffc:	c9                   	leave  
f0103ffd:	c3                   	ret    

f0103ffe <freeMem>:


// [12] freeMem

void freeMem(struct Env* e, uint32 virtual_address, uint32 size) {
f0103ffe:	55                   	push   %ebp
f0103fff:	89 e5                	mov    %esp,%ebp
f0104001:	53                   	push   %ebx
f0104002:	83 ec 24             	sub    $0x24,%esp
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(uint32 i=0; i < size; i += PAGE_SIZE) {
f0104005:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010400c:	e9 46 01 00 00       	jmp    f0104157 <freeMem+0x159>
		pf_remove_env_page(e, (virtual_address + i));
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104017:	01 d0                	add    %edx,%eax
f0104019:	83 ec 08             	sub    $0x8,%esp
f010401c:	50                   	push   %eax
f010401d:	ff 75 08             	pushl  0x8(%ebp)
f0104020:	e8 aa 7b 00 00       	call   f010bbcf <pf_remove_env_page>
f0104025:	83 c4 10             	add    $0x10,%esp

		for(uint32 j=0; j < e->page_WS_max_size; j++) {
f0104028:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010402f:	eb 34                	jmp    f0104065 <freeMem+0x67>
			if((virtual_address+i) == env_page_ws_get_virtual_address(e, j)) {
f0104031:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104034:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104037:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010403a:	83 ec 08             	sub    $0x8,%esp
f010403d:	ff 75 f0             	pushl  -0x10(%ebp)
f0104040:	ff 75 08             	pushl  0x8(%ebp)
f0104043:	e8 aa 04 00 00       	call   f01044f2 <env_page_ws_get_virtual_address>
f0104048:	83 c4 10             	add    $0x10,%esp
f010404b:	39 c3                	cmp    %eax,%ebx
f010404d:	75 13                	jne    f0104062 <freeMem+0x64>
				env_page_ws_clear_entry(e, j);
f010404f:	83 ec 08             	sub    $0x8,%esp
f0104052:	ff 75 f0             	pushl  -0x10(%ebp)
f0104055:	ff 75 08             	pushl  0x8(%ebp)
f0104058:	e8 1b 04 00 00       	call   f0104478 <env_page_ws_clear_entry>
f010405d:	83 c4 10             	add    $0x10,%esp
				break;
f0104060:	eb 0e                	jmp    f0104070 <freeMem+0x72>
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(uint32 i=0; i < size; i += PAGE_SIZE) {
		pf_remove_env_page(e, (virtual_address + i));

		for(uint32 j=0; j < e->page_WS_max_size; j++) {
f0104062:	ff 45 f0             	incl   -0x10(%ebp)
f0104065:	8b 45 08             	mov    0x8(%ebp),%eax
f0104068:	8b 40 74             	mov    0x74(%eax),%eax
f010406b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010406e:	77 c1                	ja     f0104031 <freeMem+0x33>
				env_page_ws_clear_entry(e, j);
				break;
			}
		}

		unmap_frame(e->env_page_directory, (void*)(virtual_address+i));
f0104070:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104076:	01 d0                	add    %edx,%eax
f0104078:	89 c2                	mov    %eax,%edx
f010407a:	8b 45 08             	mov    0x8(%ebp),%eax
f010407d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104080:	83 ec 08             	sub    $0x8,%esp
f0104083:	52                   	push   %edx
f0104084:	50                   	push   %eax
f0104085:	e8 af fd ff ff       	call   f0103e39 <unmap_frame>
f010408a:	83 c4 10             	add    $0x10,%esp

		uint32* ptrPT = NULL;
f010408d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		get_page_table(e->env_page_directory, (void*)(virtual_address+i), &ptrPT);
f0104094:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104097:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010409a:	01 d0                	add    %edx,%eax
f010409c:	89 c1                	mov    %eax,%ecx
f010409e:	8b 45 08             	mov    0x8(%ebp),%eax
f01040a1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01040a4:	83 ec 04             	sub    $0x4,%esp
f01040a7:	8d 55 e0             	lea    -0x20(%ebp),%edx
f01040aa:	52                   	push   %edx
f01040ab:	51                   	push   %ecx
f01040ac:	50                   	push   %eax
f01040ad:	e8 63 fa ff ff       	call   f0103b15 <get_page_table>
f01040b2:	83 c4 10             	add    $0x10,%esp
		if(ptrPT != NULL) {
f01040b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01040b8:	85 c0                	test   %eax,%eax
f01040ba:	0f 84 90 00 00 00    	je     f0104150 <freeMem+0x152>
			int flag = 0;
f01040c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			for(int j=0; j < kilo; j++) {
f01040c7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01040ce:	eb 20                	jmp    f01040f0 <freeMem+0xf2>
				if((uint32)(ptrPT[j] & PERM_PRESENT)) {
f01040d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01040d3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01040d6:	c1 e2 02             	shl    $0x2,%edx
f01040d9:	01 d0                	add    %edx,%eax
f01040db:	8b 00                	mov    (%eax),%eax
f01040dd:	83 e0 01             	and    $0x1,%eax
f01040e0:	85 c0                	test   %eax,%eax
f01040e2:	74 09                	je     f01040ed <freeMem+0xef>
					flag = 1;
f01040e4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
					break;
f01040eb:	eb 0c                	jmp    f01040f9 <freeMem+0xfb>

		uint32* ptrPT = NULL;
		get_page_table(e->env_page_directory, (void*)(virtual_address+i), &ptrPT);
		if(ptrPT != NULL) {
			int flag = 0;
			for(int j=0; j < kilo; j++) {
f01040ed:	ff 45 e8             	incl   -0x18(%ebp)
f01040f0:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
f01040f7:	7e d7                	jle    f01040d0 <freeMem+0xd2>
					flag = 1;
					break;
				}
			}

			if(!flag) {
f01040f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01040fd:	75 51                	jne    f0104150 <freeMem+0x152>
				struct Frame_Info* framePTR = to_frame_info(kheap_physical_address((uint32)ptrPT));
f01040ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104102:	83 ec 0c             	sub    $0xc,%esp
f0104105:	50                   	push   %eax
f0104106:	e8 fc 83 00 00       	call   f010c507 <kheap_physical_address>
f010410b:	83 c4 10             	add    $0x10,%esp
f010410e:	83 ec 0c             	sub    $0xc,%esp
f0104111:	50                   	push   %eax
f0104112:	e8 9d f0 ff ff       	call   f01031b4 <to_frame_info>
f0104117:	83 c4 10             	add    $0x10,%esp
f010411a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				framePTR->references = 0;
f010411d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104120:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
				free_frame(framePTR);
f0104126:	83 ec 0c             	sub    $0xc,%esp
f0104129:	ff 75 e4             	pushl  -0x1c(%ebp)
f010412c:	e8 57 f9 ff ff       	call   f0103a88 <free_frame>
f0104131:	83 c4 10             	add    $0x10,%esp
				e->env_page_directory[PDX(virtual_address+i)] = 0;
f0104134:	8b 45 08             	mov    0x8(%ebp),%eax
f0104137:	8b 40 5c             	mov    0x5c(%eax),%eax
f010413a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010413d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104140:	01 ca                	add    %ecx,%edx
f0104142:	c1 ea 16             	shr    $0x16,%edx
f0104145:	c1 e2 02             	shl    $0x2,%edx
f0104148:	01 d0                	add    %edx,%eax
f010414a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	//   remember that the page table was created using kmalloc so it should be removed using kfree()

	for(uint32 i=0; i < size; i += PAGE_SIZE) {
f0104150:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0104157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010415a:	3b 45 10             	cmp    0x10(%ebp),%eax
f010415d:	0f 82 ae fe ff ff    	jb     f0104011 <freeMem+0x13>
				free_frame(framePTR);
				e->env_page_directory[PDX(virtual_address+i)] = 0;
			}
		}
	}
}
f0104163:	90                   	nop
f0104164:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104167:	c9                   	leave  
f0104168:	c3                   	ret    

f0104169 <__freeMem_with_buffering>:

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104169:	55                   	push   %ebp
f010416a:	89 e5                	mov    %esp,%ebp
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Free any BUFFERED pages in the given range
	//4. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

	//Refer to the project presentation and documentation for details
}
f010416c:	90                   	nop
f010416d:	5d                   	pop    %ebp
f010416e:	c3                   	ret    

f010416f <moveMem>:

//================= [BONUS] =====================
// [3] moveMem

void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size) {
f010416f:	55                   	push   %ebp
f0104170:	89 e5                	mov    %esp,%ebp
f0104172:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS3] User Heap Realloc [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("moveMem() is not implemented yet...!!");
f0104175:	83 ec 04             	sub    $0x4,%esp
f0104178:	68 c4 9d 11 f0       	push   $0xf0119dc4
f010417d:	68 36 03 00 00       	push   $0x336
f0104182:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104187:	e8 ea bf ff ff       	call   f0100176 <_panic>

f010418c <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocatino size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
{
f010418c:	55                   	push   %ebp
f010418d:	89 e5                	mov    %esp,%ebp
f010418f:	83 ec 28             	sub    $0x28,%esp
	LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x",start_virtual_address));
	//calculate the required page tables
	uint32 number_of_tables = 0;
f0104192:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	long i = 0;
f0104199:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);
f01041a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01041a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01041a9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01041ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f01041b1:	eb 27                	jmp    f01041da <calculate_required_frames+0x4e>
	{
		uint32 *ptr_page_table;
		get_page_table(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table);
f01041b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041b6:	83 ec 04             	sub    $0x4,%esp
f01041b9:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01041bc:	52                   	push   %edx
f01041bd:	50                   	push   %eax
f01041be:	ff 75 08             	pushl  0x8(%ebp)
f01041c1:	e8 4f f9 ff ff       	call   f0103b15 <get_page_table>
f01041c6:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table == 0)
f01041c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041cc:	85 c0                	test   %eax,%eax
f01041ce:	75 03                	jne    f01041d3 <calculate_required_frames+0x47>
		{
			(number_of_tables)++;
f01041d0:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 number_of_tables = 0;

	long i = 0;
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f01041d3:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01041da:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01041e0:	01 d0                	add    %edx,%eax
f01041e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01041e5:	77 cc                	ja     f01041b3 <calculate_required_frames+0x27>
			(number_of_tables)++;
		}
	}

	//calc the required page frames
	uint32 number_of_pages = 0;
f01041e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01041f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01041ff:	eb 24                	jmp    f0104225 <calculate_required_frames+0x99>
	{
		uint32 *ptr_page_table;
		if (get_frame_info(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table) == 0)
f0104201:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104204:	83 ec 04             	sub    $0x4,%esp
f0104207:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010420a:	52                   	push   %edx
f010420b:	50                   	push   %eax
f010420c:	ff 75 08             	pushl  0x8(%ebp)
f010420f:	e8 b5 fb ff ff       	call   f0103dc9 <get_frame_info>
f0104214:	83 c4 10             	add    $0x10,%esp
f0104217:	85 c0                	test   %eax,%eax
f0104219:	75 03                	jne    f010421e <calculate_required_frames+0x92>
		{
			(number_of_pages)++;
f010421b:	ff 45 ec             	incl   -0x14(%ebp)

	//calc the required page frames
	uint32 number_of_pages = 0;
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f010421e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0104225:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104228:	8b 45 10             	mov    0x10(%ebp),%eax
f010422b:	01 d0                	add    %edx,%eax
f010422d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104230:	77 cf                	ja     f0104201 <calculate_required_frames+0x75>
		}
	}

	//return total number of frames
	LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	return number_of_tables+number_of_pages;
f0104232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104235:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104238:	01 d0                	add    %edx,%eax
}
f010423a:	c9                   	leave  
f010423b:	c3                   	ret    

f010423c <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f010423c:	55                   	push   %ebp
f010423d:	89 e5                	mov    %esp,%ebp
f010423f:	57                   	push   %edi
f0104240:	56                   	push   %esi
f0104241:	53                   	push   %ebx
f0104242:	83 ec 20             	sub    $0x20,%esp
	//DETECTING LOOP inside the list
	//================================

	//calculate the free frames from the free frame list
	struct Frame_Info *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0104245:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f010424c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0104253:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	LIST_FOREACH(ptr, &free_frame_list)
f010425a:	a1 14 58 55 f0       	mov    0xf0555814,%eax
f010425f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104262:	eb 1a                	jmp    f010427e <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0104264:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104267:	8a 40 14             	mov    0x14(%eax),%al
f010426a:	84 c0                	test   %al,%al
f010426c:	74 05                	je     f0104273 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010426e:	ff 45 e8             	incl   -0x18(%ebp)
f0104271:	eb 03                	jmp    f0104276 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0104273:	ff 45 ec             	incl   -0x14(%ebp)
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;


	LIST_FOREACH(ptr, &free_frame_list)
f0104276:	a1 1c 58 55 f0       	mov    0xf055581c,%eax
f010427b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010427e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104282:	74 07                	je     f010428b <calculate_available_frames+0x4f>
f0104284:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104287:	8b 00                	mov    (%eax),%eax
f0104289:	eb 05                	jmp    f0104290 <calculate_available_frames+0x54>
f010428b:	b8 00 00 00 00       	mov    $0x0,%eax
f0104290:	a3 1c 58 55 f0       	mov    %eax,0xf055581c
f0104295:	a1 1c 58 55 f0       	mov    0xf055581c,%eax
f010429a:	85 c0                	test   %eax,%eax
f010429c:	75 c6                	jne    f0104264 <calculate_available_frames+0x28>
f010429e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01042a2:	75 c0                	jne    f0104264 <calculate_available_frames+0x28>
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f01042a4:	a1 00 58 55 f0       	mov    0xf0555800,%eax
f01042a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01042ac:	eb 0b                	jmp    f01042b9 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01042ae:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f01042b1:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f01042b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01042b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01042bd:	74 07                	je     f01042c6 <calculate_available_frames+0x8a>
f01042bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042c2:	8b 00                	mov    (%eax),%eax
f01042c4:	eb 05                	jmp    f01042cb <calculate_available_frames+0x8f>
f01042c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01042cb:	a3 08 58 55 f0       	mov    %eax,0xf0555808
f01042d0:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f01042d5:	85 c0                	test   %eax,%eax
f01042d7:	75 d5                	jne    f01042ae <calculate_available_frames+0x72>
f01042d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01042dd:	75 cf                	jne    f01042ae <calculate_available_frames+0x72>
		totalModified++ ;
	}


	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01042df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01042e2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01042e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01042eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01042ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01042f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042f4:	89 c3                	mov    %eax,%ebx
f01042f6:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01042f9:	ba 03 00 00 00       	mov    $0x3,%edx
f01042fe:	89 df                	mov    %ebx,%edi
f0104300:	89 c6                	mov    %eax,%esi
f0104302:	89 d1                	mov    %edx,%ecx
f0104304:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0104306:	8b 45 08             	mov    0x8(%ebp),%eax
f0104309:	83 c4 20             	add    $0x20,%esp
f010430c:	5b                   	pop    %ebx
f010430d:	5e                   	pop    %esi
f010430e:	5f                   	pop    %edi
f010430f:	5d                   	pop    %ebp
f0104310:	c2 04 00             	ret    $0x4

f0104313 <calculate_free_frames>:

//2018
// calculate_free_frames:
uint32 calculate_free_frames()
{
f0104313:	55                   	push   %ebp
f0104314:	89 e5                	mov    %esp,%ebp
	return LIST_SIZE(&free_frame_list);
f0104316:	a1 20 58 55 f0       	mov    0xf0555820,%eax
}
f010431b:	5d                   	pop    %ebp
f010431c:	c3                   	ret    

f010431d <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010431d:	55                   	push   %ebp
f010431e:	89 e5                	mov    %esp,%ebp
f0104320:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0104323:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010432a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0104331:	eb 21                	jmp    f0104354 <env_page_ws_get_size+0x37>
f0104333:	8b 45 08             	mov    0x8(%ebp),%eax
f0104336:	8b 48 78             	mov    0x78(%eax),%ecx
f0104339:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010433c:	89 d0                	mov    %edx,%eax
f010433e:	01 c0                	add    %eax,%eax
f0104340:	01 d0                	add    %edx,%eax
f0104342:	c1 e0 02             	shl    $0x2,%eax
f0104345:	01 c8                	add    %ecx,%eax
f0104347:	8a 40 04             	mov    0x4(%eax),%al
f010434a:	84 c0                	test   %al,%al
f010434c:	75 03                	jne    f0104351 <env_page_ws_get_size+0x34>
f010434e:	ff 45 f8             	incl   -0x8(%ebp)
f0104351:	ff 45 fc             	incl   -0x4(%ebp)
f0104354:	8b 45 08             	mov    0x8(%ebp),%eax
f0104357:	8b 50 74             	mov    0x74(%eax),%edx
f010435a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010435d:	39 c2                	cmp    %eax,%edx
f010435f:	77 d2                	ja     f0104333 <env_page_ws_get_size+0x16>
	return counter;
f0104361:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0104364:	c9                   	leave  
f0104365:	c3                   	ret    

f0104366 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0104366:	55                   	push   %ebp
f0104367:	89 e5                	mov    %esp,%ebp
f0104369:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010436c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0104373:	eb 4c                	jmp    f01043c1 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0104375:	8b 45 08             	mov    0x8(%ebp),%eax
f0104378:	8b 48 78             	mov    0x78(%eax),%ecx
f010437b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010437e:	89 d0                	mov    %edx,%eax
f0104380:	01 c0                	add    %eax,%eax
f0104382:	01 d0                	add    %edx,%eax
f0104384:	c1 e0 02             	shl    $0x2,%eax
f0104387:	01 c8                	add    %ecx,%eax
f0104389:	8b 00                	mov    (%eax),%eax
f010438b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010438e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104391:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104396:	89 c2                	mov    %eax,%edx
f0104398:	8b 45 0c             	mov    0xc(%ebp),%eax
f010439b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010439e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01043a6:	39 c2                	cmp    %eax,%edx
f01043a8:	75 14                	jne    f01043be <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01043aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043ad:	83 ec 08             	sub    $0x8,%esp
f01043b0:	50                   	push   %eax
f01043b1:	ff 75 08             	pushl  0x8(%ebp)
f01043b4:	e8 bf 00 00 00       	call   f0104478 <env_page_ws_clear_entry>
f01043b9:	83 c4 10             	add    $0x10,%esp
			break;
f01043bc:	eb 10                	jmp    f01043ce <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01043be:	ff 45 f4             	incl   -0xc(%ebp)
f01043c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c4:	8b 50 74             	mov    0x74(%eax),%edx
f01043c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043ca:	39 c2                	cmp    %eax,%edx
f01043cc:	77 a7                	ja     f0104375 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01043ce:	90                   	nop
f01043cf:	c9                   	leave  
f01043d0:	c3                   	ret    

f01043d1 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01043d1:	55                   	push   %ebp
f01043d2:	89 e5                	mov    %esp,%ebp
f01043d4:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01043d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01043da:	8b 40 74             	mov    0x74(%eax),%eax
f01043dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01043e0:	77 19                	ja     f01043fb <env_page_ws_set_entry+0x2a>
f01043e2:	68 ec 9d 11 f0       	push   $0xf0119dec
f01043e7:	68 22 9e 11 f0       	push   $0xf0119e22
f01043ec:	68 b6 03 00 00       	push   $0x3b6
f01043f1:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01043f6:	e8 7b bd ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01043fb:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0104402:	76 19                	jbe    f010441d <env_page_ws_set_entry+0x4c>
f0104404:	68 38 9e 11 f0       	push   $0xf0119e38
f0104409:	68 22 9e 11 f0       	push   $0xf0119e22
f010440e:	68 b7 03 00 00       	push   $0x3b7
f0104413:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104418:	e8 59 bd ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010441d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104420:	8b 48 78             	mov    0x78(%eax),%ecx
f0104423:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104426:	89 d0                	mov    %edx,%eax
f0104428:	01 c0                	add    %eax,%eax
f010442a:	01 d0                	add    %edx,%eax
f010442c:	c1 e0 02             	shl    $0x2,%eax
f010442f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0104432:	8b 45 10             	mov    0x10(%ebp),%eax
f0104435:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104438:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010443b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104440:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 48 78             	mov    0x78(%eax),%ecx
f0104448:	8b 55 0c             	mov    0xc(%ebp),%edx
f010444b:	89 d0                	mov    %edx,%eax
f010444d:	01 c0                	add    %eax,%eax
f010444f:	01 d0                	add    %edx,%eax
f0104451:	c1 e0 02             	shl    $0x2,%eax
f0104454:	01 c8                	add    %ecx,%eax
f0104456:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010445a:	8b 45 08             	mov    0x8(%ebp),%eax
f010445d:	8b 48 78             	mov    0x78(%eax),%ecx
f0104460:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104463:	89 d0                	mov    %edx,%eax
f0104465:	01 c0                	add    %eax,%eax
f0104467:	01 d0                	add    %edx,%eax
f0104469:	c1 e0 02             	shl    $0x2,%eax
f010446c:	01 c8                	add    %ecx,%eax
f010446e:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0104475:	90                   	nop
}
f0104476:	c9                   	leave  
f0104477:	c3                   	ret    

f0104478 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0104478:	55                   	push   %ebp
f0104479:	89 e5                	mov    %esp,%ebp
f010447b:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010447e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104481:	8b 40 74             	mov    0x74(%eax),%eax
f0104484:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104487:	77 19                	ja     f01044a2 <env_page_ws_clear_entry+0x2a>
f0104489:	68 6c 9e 11 f0       	push   $0xf0119e6c
f010448e:	68 22 9e 11 f0       	push   $0xf0119e22
f0104493:	68 c2 03 00 00       	push   $0x3c2
f0104498:	68 d5 9c 11 f0       	push   $0xf0119cd5
f010449d:	e8 d4 bc ff ff       	call   f0100176 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01044a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a5:	8b 48 78             	mov    0x78(%eax),%ecx
f01044a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ab:	89 d0                	mov    %edx,%eax
f01044ad:	01 c0                	add    %eax,%eax
f01044af:	01 d0                	add    %edx,%eax
f01044b1:	c1 e0 02             	shl    $0x2,%eax
f01044b4:	01 c8                	add    %ecx,%eax
f01044b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01044bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bf:	8b 48 78             	mov    0x78(%eax),%ecx
f01044c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044c5:	89 d0                	mov    %edx,%eax
f01044c7:	01 c0                	add    %eax,%eax
f01044c9:	01 d0                	add    %edx,%eax
f01044cb:	c1 e0 02             	shl    $0x2,%eax
f01044ce:	01 c8                	add    %ecx,%eax
f01044d0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01044d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044d7:	8b 48 78             	mov    0x78(%eax),%ecx
f01044da:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044dd:	89 d0                	mov    %edx,%eax
f01044df:	01 c0                	add    %eax,%eax
f01044e1:	01 d0                	add    %edx,%eax
f01044e3:	c1 e0 02             	shl    $0x2,%eax
f01044e6:	01 c8                	add    %ecx,%eax
f01044e8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01044ef:	90                   	nop
f01044f0:	c9                   	leave  
f01044f1:	c3                   	ret    

f01044f2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01044f2:	55                   	push   %ebp
f01044f3:	89 e5                	mov    %esp,%ebp
f01044f5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01044f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044fb:	8b 40 74             	mov    0x74(%eax),%eax
f01044fe:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104501:	77 19                	ja     f010451c <env_page_ws_get_virtual_address+0x2a>
f0104503:	68 6c 9e 11 f0       	push   $0xf0119e6c
f0104508:	68 22 9e 11 f0       	push   $0xf0119e22
f010450d:	68 ca 03 00 00       	push   $0x3ca
f0104512:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104517:	e8 5a bc ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 48 78             	mov    0x78(%eax),%ecx
f0104522:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104525:	89 d0                	mov    %edx,%eax
f0104527:	01 c0                	add    %eax,%eax
f0104529:	01 d0                	add    %edx,%eax
f010452b:	c1 e0 02             	shl    $0x2,%eax
f010452e:	01 c8                	add    %ecx,%eax
f0104530:	8b 00                	mov    (%eax),%eax
f0104532:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104535:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104538:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010453d:	c9                   	leave  
f010453e:	c3                   	ret    

f010453f <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010453f:	55                   	push   %ebp
f0104540:	89 e5                	mov    %esp,%ebp
f0104542:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104545:	8b 45 08             	mov    0x8(%ebp),%eax
f0104548:	8b 40 74             	mov    0x74(%eax),%eax
f010454b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010454e:	77 19                	ja     f0104569 <env_page_ws_get_time_stamp+0x2a>
f0104550:	68 6c 9e 11 f0       	push   $0xf0119e6c
f0104555:	68 22 9e 11 f0       	push   $0xf0119e22
f010455a:	68 d0 03 00 00       	push   $0x3d0
f010455f:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104564:	e8 0d bc ff ff       	call   f0100176 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0104569:	8b 45 08             	mov    0x8(%ebp),%eax
f010456c:	8b 48 78             	mov    0x78(%eax),%ecx
f010456f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104572:	89 d0                	mov    %edx,%eax
f0104574:	01 c0                	add    %eax,%eax
f0104576:	01 d0                	add    %edx,%eax
f0104578:	c1 e0 02             	shl    $0x2,%eax
f010457b:	01 c8                	add    %ecx,%eax
f010457d:	8b 40 08             	mov    0x8(%eax),%eax
}
f0104580:	c9                   	leave  
f0104581:	c3                   	ret    

f0104582 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104582:	55                   	push   %ebp
f0104583:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	8b 48 78             	mov    0x78(%eax),%ecx
f010458b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010458e:	89 d0                	mov    %edx,%eax
f0104590:	01 c0                	add    %eax,%eax
f0104592:	01 d0                	add    %edx,%eax
f0104594:	c1 e0 02             	shl    $0x2,%eax
f0104597:	01 c8                	add    %ecx,%eax
f0104599:	8a 40 04             	mov    0x4(%eax),%al
f010459c:	0f b6 c0             	movzbl %al,%eax
}
f010459f:	5d                   	pop    %ebp
f01045a0:	c3                   	ret    

f01045a1 <env_page_ws_print>:

void env_page_ws_print(struct Env *curenv)
{
f01045a1:	55                   	push   %ebp
f01045a2:	89 e5                	mov    %esp,%ebp
f01045a4:	83 ec 28             	sub    $0x28,%esp
	uint32 i;
	cprintf("PAGE WS:\n");
f01045a7:	83 ec 0c             	sub    $0xc,%esp
f01045aa:	68 a4 9e 11 f0       	push   $0xf0119ea4
f01045af:	e8 1b 28 00 00       	call   f0106dcf <cprintf>
f01045b4:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f01045b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045be:	e9 4e 01 00 00       	jmp    f0104711 <env_page_ws_print+0x170>
	{
		if (curenv->ptr_pageWorkingSet[i].empty)
f01045c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c6:	8b 48 78             	mov    0x78(%eax),%ecx
f01045c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045cc:	89 d0                	mov    %edx,%eax
f01045ce:	01 c0                	add    %eax,%eax
f01045d0:	01 d0                	add    %edx,%eax
f01045d2:	c1 e0 02             	shl    $0x2,%eax
f01045d5:	01 c8                	add    %ecx,%eax
f01045d7:	8a 40 04             	mov    0x4(%eax),%al
f01045da:	84 c0                	test   %al,%al
f01045dc:	74 43                	je     f0104621 <env_page_ws_print+0x80>
		{
			cprintf("EMPTY LOCATION");
f01045de:	83 ec 0c             	sub    $0xc,%esp
f01045e1:	68 ae 9e 11 f0       	push   $0xf0119eae
f01045e6:	e8 e4 27 00 00       	call   f0106dcf <cprintf>
f01045eb:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->page_last_WS_index )
f01045ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f1:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01045f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01045fa:	75 10                	jne    f010460c <env_page_ws_print+0x6b>
			{
				cprintf("		<--");
f01045fc:	83 ec 0c             	sub    $0xc,%esp
f01045ff:	68 bd 9e 11 f0       	push   $0xf0119ebd
f0104604:	e8 c6 27 00 00       	call   f0106dcf <cprintf>
f0104609:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010460c:	83 ec 0c             	sub    $0xc,%esp
f010460f:	68 c3 9e 11 f0       	push   $0xf0119ec3
f0104614:	e8 b6 27 00 00       	call   f0106dcf <cprintf>
f0104619:	83 c4 10             	add    $0x10,%esp
			continue;
f010461c:	e9 ed 00 00 00       	jmp    f010470e <env_page_ws_print+0x16d>
		}
		uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f0104621:	8b 45 08             	mov    0x8(%ebp),%eax
f0104624:	8b 48 78             	mov    0x78(%eax),%ecx
f0104627:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010462a:	89 d0                	mov    %edx,%eax
f010462c:	01 c0                	add    %eax,%eax
f010462e:	01 d0                	add    %edx,%eax
f0104630:	c1 e0 02             	shl    $0x2,%eax
f0104633:	01 c8                	add    %ecx,%eax
f0104635:	8b 00                	mov    (%eax),%eax
f0104637:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f010463a:	8b 45 08             	mov    0x8(%ebp),%eax
f010463d:	8b 48 78             	mov    0x78(%eax),%ecx
f0104640:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104643:	89 d0                	mov    %edx,%eax
f0104645:	01 c0                	add    %eax,%eax
f0104647:	01 d0                	add    %edx,%eax
f0104649:	c1 e0 02             	shl    $0x2,%eax
f010464c:	01 c8                	add    %ecx,%eax
f010464e:	8b 40 08             	mov    0x8(%eax),%eax
f0104651:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 perm = pt_get_page_permissions(curenv, virtual_address) ;
f0104654:	83 ec 08             	sub    $0x8,%esp
f0104657:	ff 75 f0             	pushl  -0x10(%ebp)
f010465a:	ff 75 08             	pushl  0x8(%ebp)
f010465d:	e8 e3 09 00 00       	call   f0105045 <pt_get_page_permissions>
f0104662:	83 c4 10             	add    $0x10,%esp
f0104665:	89 45 e8             	mov    %eax,-0x18(%ebp)
		char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0104668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010466b:	83 e0 40             	and    $0x40,%eax
f010466e:	85 c0                	test   %eax,%eax
f0104670:	0f 95 c0             	setne  %al
f0104673:	88 45 e7             	mov    %al,-0x19(%ebp)
		char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0104676:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104679:	83 e0 20             	and    $0x20,%eax
f010467c:	85 c0                	test   %eax,%eax
f010467e:	0f 95 c0             	setne  %al
f0104681:	88 45 e6             	mov    %al,-0x1a(%ebp)
		char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0104684:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104687:	25 00 02 00 00       	and    $0x200,%eax
f010468c:	85 c0                	test   %eax,%eax
f010468e:	0f 95 c0             	setne  %al
f0104691:	88 45 e5             	mov    %al,-0x1b(%ebp)


		cprintf("address @ %d = %x",i, curenv->ptr_pageWorkingSet[i].virtual_address);
f0104694:	8b 45 08             	mov    0x8(%ebp),%eax
f0104697:	8b 48 78             	mov    0x78(%eax),%ecx
f010469a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010469d:	89 d0                	mov    %edx,%eax
f010469f:	01 c0                	add    %eax,%eax
f01046a1:	01 d0                	add    %edx,%eax
f01046a3:	c1 e0 02             	shl    $0x2,%eax
f01046a6:	01 c8                	add    %ecx,%eax
f01046a8:	8b 00                	mov    (%eax),%eax
f01046aa:	83 ec 04             	sub    $0x4,%esp
f01046ad:	50                   	push   %eax
f01046ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01046b1:	68 c5 9e 11 f0       	push   $0xf0119ec5
f01046b6:	e8 14 27 00 00       	call   f0106dcf <cprintf>
f01046bb:	83 c4 10             	add    $0x10,%esp

		cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp) ;
f01046be:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f01046c2:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f01046c6:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f01046ca:	83 ec 0c             	sub    $0xc,%esp
f01046cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01046d0:	51                   	push   %ecx
f01046d1:	52                   	push   %edx
f01046d2:	50                   	push   %eax
f01046d3:	68 d8 9e 11 f0       	push   $0xf0119ed8
f01046d8:	e8 f2 26 00 00       	call   f0106dcf <cprintf>
f01046dd:	83 c4 20             	add    $0x20,%esp

		if(i==curenv->page_last_WS_index )
f01046e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01046e3:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01046e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046ec:	75 10                	jne    f01046fe <env_page_ws_print+0x15d>
		{
			cprintf(" <--");
f01046ee:	83 ec 0c             	sub    $0xc,%esp
f01046f1:	68 0f 9f 11 f0       	push   $0xf0119f0f
f01046f6:	e8 d4 26 00 00       	call   f0106dcf <cprintf>
f01046fb:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01046fe:	83 ec 0c             	sub    $0xc,%esp
f0104701:	68 c3 9e 11 f0       	push   $0xf0119ec3
f0104706:	e8 c4 26 00 00       	call   f0106dcf <cprintf>
f010470b:	83 c4 10             	add    $0x10,%esp

void env_page_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("PAGE WS:\n");
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f010470e:	ff 45 f4             	incl   -0xc(%ebp)
f0104711:	8b 45 08             	mov    0x8(%ebp),%eax
f0104714:	8b 40 74             	mov    0x74(%eax),%eax
f0104717:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010471a:	0f 87 a3 fe ff ff    	ja     f01045c3 <env_page_ws_print+0x22>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0104720:	90                   	nop
f0104721:	c9                   	leave  
f0104722:	c3                   	ret    

f0104723 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *curenv)
{
f0104723:	55                   	push   %ebp
f0104724:	89 e5                	mov    %esp,%ebp
f0104726:	53                   	push   %ebx
f0104727:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010472a:	83 ec 0c             	sub    $0xc,%esp
f010472d:	68 14 9f 11 f0       	push   $0xf0119f14
f0104732:	e8 98 26 00 00       	call   f0106dcf <cprintf>
f0104737:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010473a:	83 ec 0c             	sub    $0xc,%esp
f010473d:	68 49 9f 11 f0       	push   $0xf0119f49
f0104742:	e8 88 26 00 00       	call   f0106dcf <cprintf>
f0104747:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010474a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104751:	e9 0c 01 00 00       	jmp    f0104862 <env_table_ws_print+0x13f>
	{
		if (curenv->__ptr_tws[i].empty)
f0104756:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104759:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010475c:	89 d0                	mov    %edx,%eax
f010475e:	01 c0                	add    %eax,%eax
f0104760:	01 d0                	add    %edx,%eax
f0104762:	c1 e0 02             	shl    $0x2,%eax
f0104765:	01 c8                	add    %ecx,%eax
f0104767:	83 e8 80             	sub    $0xffffff80,%eax
f010476a:	8a 00                	mov    (%eax),%al
f010476c:	84 c0                	test   %al,%al
f010476e:	74 43                	je     f01047b3 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	68 ae 9e 11 f0       	push   $0xf0119eae
f0104778:	e8 52 26 00 00       	call   f0106dcf <cprintf>
f010477d:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->table_last_WS_index )
f0104780:	8b 45 08             	mov    0x8(%ebp),%eax
f0104783:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104789:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010478c:	75 10                	jne    f010479e <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f010478e:	83 ec 0c             	sub    $0xc,%esp
f0104791:	68 bd 9e 11 f0       	push   $0xf0119ebd
f0104796:	e8 34 26 00 00       	call   f0106dcf <cprintf>
f010479b:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010479e:	83 ec 0c             	sub    $0xc,%esp
f01047a1:	68 c3 9e 11 f0       	push   $0xf0119ec3
f01047a6:	e8 24 26 00 00       	call   f0106dcf <cprintf>
f01047ab:	83 c4 10             	add    $0x10,%esp
			continue;
f01047ae:	e9 ac 00 00 00       	jmp    f010485f <env_table_ws_print+0x13c>
		}
		uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f01047b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047b9:	89 d0                	mov    %edx,%eax
f01047bb:	01 c0                	add    %eax,%eax
f01047bd:	01 d0                	add    %edx,%eax
f01047bf:	c1 e0 02             	shl    $0x2,%eax
f01047c2:	01 c8                	add    %ecx,%eax
f01047c4:	83 c0 7c             	add    $0x7c,%eax
f01047c7:	8b 00                	mov    (%eax),%eax
f01047c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, curenv->__ptr_tws[i].virtual_address);
f01047cc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047d2:	89 d0                	mov    %edx,%eax
f01047d4:	01 c0                	add    %eax,%eax
f01047d6:	01 d0                	add    %edx,%eax
f01047d8:	c1 e0 02             	shl    $0x2,%eax
f01047db:	01 c8                	add    %ecx,%eax
f01047dd:	83 c0 7c             	add    $0x7c,%eax
f01047e0:	8b 00                	mov    (%eax),%eax
f01047e2:	83 ec 04             	sub    $0x4,%esp
f01047e5:	50                   	push   %eax
f01047e6:	ff 75 f4             	pushl  -0xc(%ebp)
f01047e9:	68 54 9f 11 f0       	push   $0xf0119f54
f01047ee:	e8 dc 25 00 00       	call   f0106dcf <cprintf>
f01047f3:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(curenv, virtual_address), curenv->__ptr_tws[i].time_stamp);
f01047f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047fc:	89 d0                	mov    %edx,%eax
f01047fe:	01 c0                	add    %eax,%eax
f0104800:	01 d0                	add    %edx,%eax
f0104802:	c1 e0 02             	shl    $0x2,%eax
f0104805:	01 c8                	add    %ecx,%eax
f0104807:	05 84 00 00 00       	add    $0x84,%eax
f010480c:	8b 18                	mov    (%eax),%ebx
f010480e:	83 ec 08             	sub    $0x8,%esp
f0104811:	ff 75 f0             	pushl  -0x10(%ebp)
f0104814:	ff 75 08             	pushl  0x8(%ebp)
f0104817:	e8 29 04 00 00       	call   f0104c45 <pd_is_table_used>
f010481c:	83 c4 10             	add    $0x10,%esp
f010481f:	83 ec 04             	sub    $0x4,%esp
f0104822:	53                   	push   %ebx
f0104823:	50                   	push   %eax
f0104824:	68 6c 9f 11 f0       	push   $0xf0119f6c
f0104829:	e8 a1 25 00 00       	call   f0106dcf <cprintf>
f010482e:	83 c4 10             	add    $0x10,%esp
		if(i==curenv->table_last_WS_index )
f0104831:	8b 45 08             	mov    0x8(%ebp),%eax
f0104834:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f010483a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010483d:	75 10                	jne    f010484f <env_table_ws_print+0x12c>
		{
			cprintf(" <--");
f010483f:	83 ec 0c             	sub    $0xc,%esp
f0104842:	68 0f 9f 11 f0       	push   $0xf0119f0f
f0104847:	e8 83 25 00 00       	call   f0106dcf <cprintf>
f010484c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010484f:	83 ec 0c             	sub    $0xc,%esp
f0104852:	68 c3 9e 11 f0       	push   $0xf0119ec3
f0104857:	e8 73 25 00 00       	call   f0106dcf <cprintf>
f010485c:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010485f:	ff 45 f4             	incl   -0xc(%ebp)
f0104862:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0104866:	0f 86 ea fe ff ff    	jbe    f0104756 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010486c:	90                   	nop
f010486d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104870:	c9                   	leave  
f0104871:	c3                   	ret    

f0104872 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0104872:	55                   	push   %ebp
f0104873:	89 e5                	mov    %esp,%ebp
f0104875:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0104878:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010487f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0104886:	eb 20                	jmp    f01048a8 <env_table_ws_get_size+0x36>
f0104888:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010488b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010488e:	89 d0                	mov    %edx,%eax
f0104890:	01 c0                	add    %eax,%eax
f0104892:	01 d0                	add    %edx,%eax
f0104894:	c1 e0 02             	shl    $0x2,%eax
f0104897:	01 c8                	add    %ecx,%eax
f0104899:	83 e8 80             	sub    $0xffffff80,%eax
f010489c:	8a 00                	mov    (%eax),%al
f010489e:	84 c0                	test   %al,%al
f01048a0:	75 03                	jne    f01048a5 <env_table_ws_get_size+0x33>
f01048a2:	ff 45 f8             	incl   -0x8(%ebp)
f01048a5:	ff 45 fc             	incl   -0x4(%ebp)
f01048a8:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01048ac:	7e da                	jle    f0104888 <env_table_ws_get_size+0x16>
	return counter;
f01048ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01048b1:	c9                   	leave  
f01048b2:	c3                   	ret    

f01048b3 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01048b3:	55                   	push   %ebp
f01048b4:	89 e5                	mov    %esp,%ebp
f01048b6:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01048b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01048c0:	eb 4c                	jmp    f010490e <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01048c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01048c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048c8:	89 d0                	mov    %edx,%eax
f01048ca:	01 c0                	add    %eax,%eax
f01048cc:	01 d0                	add    %edx,%eax
f01048ce:	c1 e0 02             	shl    $0x2,%eax
f01048d1:	01 c8                	add    %ecx,%eax
f01048d3:	83 c0 7c             	add    $0x7c,%eax
f01048d6:	8b 00                	mov    (%eax),%eax
f01048d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048de:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048e3:	89 c2                	mov    %eax,%edx
f01048e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01048e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01048ee:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01048f3:	39 c2                	cmp    %eax,%edx
f01048f5:	75 14                	jne    f010490b <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01048f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048fa:	83 ec 08             	sub    $0x8,%esp
f01048fd:	50                   	push   %eax
f01048fe:	ff 75 08             	pushl  0x8(%ebp)
f0104901:	e8 b8 00 00 00       	call   f01049be <env_table_ws_clear_entry>
f0104906:	83 c4 10             	add    $0x10,%esp
			break;
f0104909:	eb 09                	jmp    f0104914 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010490b:	ff 45 f4             	incl   -0xc(%ebp)
f010490e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0104912:	7e ae                	jle    f01048c2 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0104914:	90                   	nop
f0104915:	c9                   	leave  
f0104916:	c3                   	ret    

f0104917 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0104917:	55                   	push   %ebp
f0104918:	89 e5                	mov    %esp,%ebp
f010491a:	53                   	push   %ebx
f010491b:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010491e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104922:	76 19                	jbe    f010493d <env_table_ws_set_entry+0x26>
f0104924:	68 90 9f 11 f0       	push   $0xf0119f90
f0104929:	68 22 9e 11 f0       	push   $0xf0119e22
f010492e:	68 33 04 00 00       	push   $0x433
f0104933:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104938:	e8 39 b8 ff ff       	call   f0100176 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010493d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0104944:	76 19                	jbe    f010495f <env_table_ws_set_entry+0x48>
f0104946:	68 38 9e 11 f0       	push   $0xf0119e38
f010494b:	68 22 9e 11 f0       	push   $0xf0119e22
f0104950:	68 34 04 00 00       	push   $0x434
f0104955:	68 d5 9c 11 f0       	push   $0xf0119cd5
f010495a:	e8 17 b8 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010495f:	8b 45 10             	mov    0x10(%ebp),%eax
f0104962:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104965:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104968:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010496d:	89 c1                	mov    %eax,%ecx
f010496f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0104972:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104975:	89 d0                	mov    %edx,%eax
f0104977:	01 c0                	add    %eax,%eax
f0104979:	01 d0                	add    %edx,%eax
f010497b:	c1 e0 02             	shl    $0x2,%eax
f010497e:	01 d8                	add    %ebx,%eax
f0104980:	83 c0 7c             	add    $0x7c,%eax
f0104983:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0104985:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104988:	8b 55 0c             	mov    0xc(%ebp),%edx
f010498b:	89 d0                	mov    %edx,%eax
f010498d:	01 c0                	add    %eax,%eax
f010498f:	01 d0                	add    %edx,%eax
f0104991:	c1 e0 02             	shl    $0x2,%eax
f0104994:	01 c8                	add    %ecx,%eax
f0104996:	83 e8 80             	sub    $0xffffff80,%eax
f0104999:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010499c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010499f:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049a2:	89 d0                	mov    %edx,%eax
f01049a4:	01 c0                	add    %eax,%eax
f01049a6:	01 d0                	add    %edx,%eax
f01049a8:	c1 e0 02             	shl    $0x2,%eax
f01049ab:	01 c8                	add    %ecx,%eax
f01049ad:	05 84 00 00 00       	add    $0x84,%eax
f01049b2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01049b8:	90                   	nop
}
f01049b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01049bc:	c9                   	leave  
f01049bd:	c3                   	ret    

f01049be <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01049be:	55                   	push   %ebp
f01049bf:	89 e5                	mov    %esp,%ebp
f01049c1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01049c4:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01049c8:	76 19                	jbe    f01049e3 <env_table_ws_clear_entry+0x25>
f01049ca:	68 90 9f 11 f0       	push   $0xf0119f90
f01049cf:	68 22 9e 11 f0       	push   $0xf0119e22
f01049d4:	68 3f 04 00 00       	push   $0x43f
f01049d9:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01049de:	e8 93 b7 ff ff       	call   f0100176 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01049e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049e9:	89 d0                	mov    %edx,%eax
f01049eb:	01 c0                	add    %eax,%eax
f01049ed:	01 d0                	add    %edx,%eax
f01049ef:	c1 e0 02             	shl    $0x2,%eax
f01049f2:	01 c8                	add    %ecx,%eax
f01049f4:	83 c0 7c             	add    $0x7c,%eax
f01049f7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01049fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a00:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a03:	89 d0                	mov    %edx,%eax
f0104a05:	01 c0                	add    %eax,%eax
f0104a07:	01 d0                	add    %edx,%eax
f0104a09:	c1 e0 02             	shl    $0x2,%eax
f0104a0c:	01 c8                	add    %ecx,%eax
f0104a0e:	83 e8 80             	sub    $0xffffff80,%eax
f0104a11:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0104a14:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a17:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a1a:	89 d0                	mov    %edx,%eax
f0104a1c:	01 c0                	add    %eax,%eax
f0104a1e:	01 d0                	add    %edx,%eax
f0104a20:	c1 e0 02             	shl    $0x2,%eax
f0104a23:	01 c8                	add    %ecx,%eax
f0104a25:	05 84 00 00 00       	add    $0x84,%eax
f0104a2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0104a30:	90                   	nop
f0104a31:	c9                   	leave  
f0104a32:	c3                   	ret    

f0104a33 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0104a33:	55                   	push   %ebp
f0104a34:	89 e5                	mov    %esp,%ebp
f0104a36:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104a39:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a3d:	76 19                	jbe    f0104a58 <env_table_ws_get_virtual_address+0x25>
f0104a3f:	68 90 9f 11 f0       	push   $0xf0119f90
f0104a44:	68 22 9e 11 f0       	push   $0xf0119e22
f0104a49:	68 47 04 00 00       	push   $0x447
f0104a4e:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104a53:	e8 1e b7 ff ff       	call   f0100176 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0104a58:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a5b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a5e:	89 d0                	mov    %edx,%eax
f0104a60:	01 c0                	add    %eax,%eax
f0104a62:	01 d0                	add    %edx,%eax
f0104a64:	c1 e0 02             	shl    $0x2,%eax
f0104a67:	01 c8                	add    %ecx,%eax
f0104a69:	83 c0 7c             	add    $0x7c,%eax
f0104a6c:	8b 00                	mov    (%eax),%eax
f0104a6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a74:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0104a79:	c9                   	leave  
f0104a7a:	c3                   	ret    

f0104a7b <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104a7b:	55                   	push   %ebp
f0104a7c:	89 e5                	mov    %esp,%ebp
f0104a7e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104a81:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104a85:	76 19                	jbe    f0104aa0 <env_table_ws_get_time_stamp+0x25>
f0104a87:	68 90 9f 11 f0       	push   $0xf0119f90
f0104a8c:	68 22 9e 11 f0       	push   $0xf0119e22
f0104a91:	68 4e 04 00 00       	push   $0x44e
f0104a96:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104a9b:	e8 d6 b6 ff ff       	call   f0100176 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0104aa0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104aa3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104aa6:	89 d0                	mov    %edx,%eax
f0104aa8:	01 c0                	add    %eax,%eax
f0104aaa:	01 d0                	add    %edx,%eax
f0104aac:	c1 e0 02             	shl    $0x2,%eax
f0104aaf:	01 c8                	add    %ecx,%eax
f0104ab1:	05 84 00 00 00       	add    $0x84,%eax
f0104ab6:	8b 00                	mov    (%eax),%eax
}
f0104ab8:	c9                   	leave  
f0104ab9:	c3                   	ret    

f0104aba <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0104aba:	55                   	push   %ebp
f0104abb:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0104abd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104ac0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ac3:	89 d0                	mov    %edx,%eax
f0104ac5:	01 c0                	add    %eax,%eax
f0104ac7:	01 d0                	add    %edx,%eax
f0104ac9:	c1 e0 02             	shl    $0x2,%eax
f0104acc:	01 c8                	add    %ecx,%eax
f0104ace:	83 e8 80             	sub    $0xffffff80,%eax
f0104ad1:	8a 00                	mov    (%eax),%al
f0104ad3:	0f b6 c0             	movzbl %al,%eax
}
f0104ad6:	5d                   	pop    %ebp
f0104ad7:	c3                   	ret    

f0104ad8 <addTableToTableWorkingSet>:

void addTableToTableWorkingSet(struct Env *e, uint32 tableAddress)
{
f0104ad8:	55                   	push   %ebp
f0104ad9:	89 e5                	mov    %esp,%ebp
f0104adb:	83 ec 10             	sub    $0x10,%esp
	tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE*1024);
f0104ade:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ae1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104ae4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ae7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104aec:	89 45 0c             	mov    %eax,0xc(%ebp)
	e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f0104aef:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af2:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104af8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104afb:	89 d0                	mov    %edx,%eax
f0104afd:	01 c0                	add    %eax,%eax
f0104aff:	01 d0                	add    %edx,%eax
f0104b01:	c1 e0 02             	shl    $0x2,%eax
f0104b04:	01 c8                	add    %ecx,%eax
f0104b06:	8d 50 7c             	lea    0x7c(%eax),%edx
f0104b09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b0c:	89 02                	mov    %eax,(%edx)
	e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104b17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104b1a:	89 d0                	mov    %edx,%eax
f0104b1c:	01 c0                	add    %eax,%eax
f0104b1e:	01 d0                	add    %edx,%eax
f0104b20:	c1 e0 02             	shl    $0x2,%eax
f0104b23:	01 c8                	add    %ecx,%eax
f0104b25:	83 e8 80             	sub    $0xffffff80,%eax
f0104b28:	c6 00 00             	movb   $0x0,(%eax)
	e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0104b2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2e:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104b34:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104b37:	89 d0                	mov    %edx,%eax
f0104b39:	01 c0                	add    %eax,%eax
f0104b3b:	01 d0                	add    %edx,%eax
f0104b3d:	c1 e0 02             	shl    $0x2,%eax
f0104b40:	01 c8                	add    %ecx,%eax
f0104b42:	05 84 00 00 00       	add    $0x84,%eax
f0104b47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//e->__ptr_tws[e->table_last_WS_index].time_stamp = time;

	e->table_last_WS_index ++;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b56:	8d 50 01             	lea    0x1(%eax),%edx
f0104b59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b5c:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104b62:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b65:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104b6b:	b9 32 00 00 00       	mov    $0x32,%ecx
f0104b70:	ba 00 00 00 00       	mov    $0x0,%edx
f0104b75:	f7 f1                	div    %ecx
f0104b77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b7a:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
}
f0104b80:	90                   	nop
f0104b81:	c9                   	leave  
f0104b82:	c3                   	ret    

f0104b83 <bufferList_add_page>:
///****************************************************************************************///
///******************************* PAGE BUFFERING FUNCTIONS ******************************///
///****************************************************************************************///

void bufferList_add_page(struct Linked_List* bufferList,struct Frame_Info *ptr_frame_info)
{
f0104b83:	55                   	push   %ebp
f0104b84:	89 e5                	mov    %esp,%ebp

		LIST_INSERT_TAIL(bufferList, ptr_frame_info);
f0104b86:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b89:	8b 50 04             	mov    0x4(%eax),%edx
f0104b8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b8f:	89 50 04             	mov    %edx,0x4(%eax)
f0104b92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b95:	8b 40 04             	mov    0x4(%eax),%eax
f0104b98:	85 c0                	test   %eax,%eax
f0104b9a:	74 0d                	je     f0104ba9 <bufferList_add_page+0x26>
f0104b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b9f:	8b 40 04             	mov    0x4(%eax),%eax
f0104ba2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ba5:	89 10                	mov    %edx,(%eax)
f0104ba7:	eb 08                	jmp    f0104bb1 <bufferList_add_page+0x2e>
f0104ba9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bac:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104baf:	89 10                	mov    %edx,(%eax)
f0104bb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104bb7:	89 50 04             	mov    %edx,0x4(%eax)
f0104bba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104bc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0104bc9:	8d 50 01             	lea    0x1(%eax),%edx
f0104bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcf:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104bd2:	90                   	nop
f0104bd3:	5d                   	pop    %ebp
f0104bd4:	c3                   	ret    

f0104bd5 <bufferlist_remove_page>:
void bufferlist_remove_page(struct Linked_List* bufferList, struct Frame_Info *ptr_frame_info)
{
f0104bd5:	55                   	push   %ebp
f0104bd6:	89 e5                	mov    %esp,%ebp
	LIST_REMOVE(bufferList, ptr_frame_info);
f0104bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bdb:	8b 00                	mov    (%eax),%eax
f0104bdd:	85 c0                	test   %eax,%eax
f0104bdf:	74 10                	je     f0104bf1 <bufferlist_remove_page+0x1c>
f0104be1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104be4:	8b 00                	mov    (%eax),%eax
f0104be6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104be9:	8b 52 04             	mov    0x4(%edx),%edx
f0104bec:	89 50 04             	mov    %edx,0x4(%eax)
f0104bef:	eb 0c                	jmp    f0104bfd <bufferlist_remove_page+0x28>
f0104bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bf4:	8b 50 04             	mov    0x4(%eax),%edx
f0104bf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfa:	89 50 04             	mov    %edx,0x4(%eax)
f0104bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c00:	8b 40 04             	mov    0x4(%eax),%eax
f0104c03:	85 c0                	test   %eax,%eax
f0104c05:	74 0f                	je     f0104c16 <bufferlist_remove_page+0x41>
f0104c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c0a:	8b 40 04             	mov    0x4(%eax),%eax
f0104c0d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c10:	8b 12                	mov    (%edx),%edx
f0104c12:	89 10                	mov    %edx,(%eax)
f0104c14:	eb 0a                	jmp    f0104c20 <bufferlist_remove_page+0x4b>
f0104c16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c19:	8b 10                	mov    (%eax),%edx
f0104c1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c1e:	89 10                	mov    %edx,(%eax)
f0104c20:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c36:	8b 40 0c             	mov    0xc(%eax),%eax
f0104c39:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104c3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c3f:	89 50 0c             	mov    %edx,0xc(%eax)
}
f0104c42:	90                   	nop
f0104c43:	5d                   	pop    %ebp
f0104c44:	c3                   	ret    

f0104c45 <pd_is_table_used>:

///============================================================================================
/// Dealing with page and page table entry flags

inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
{
f0104c45:	55                   	push   %ebp
f0104c46:	89 e5                	mov    %esp,%ebp
	return ( (ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0104c48:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c4b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c4e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c51:	c1 ea 16             	shr    $0x16,%edx
f0104c54:	c1 e2 02             	shl    $0x2,%edx
f0104c57:	01 d0                	add    %edx,%eax
f0104c59:	8b 00                	mov    (%eax),%eax
f0104c5b:	83 e0 20             	and    $0x20,%eax
f0104c5e:	85 c0                	test   %eax,%eax
f0104c60:	0f 95 c0             	setne  %al
f0104c63:	0f b6 c0             	movzbl %al,%eax
}
f0104c66:	5d                   	pop    %ebp
f0104c67:	c3                   	ret    

f0104c68 <pd_set_table_unused>:

inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
{
f0104c68:	55                   	push   %ebp
f0104c69:	89 e5                	mov    %esp,%ebp
f0104c6b:	83 ec 08             	sub    $0x8,%esp
	ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0104c6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c71:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c74:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c77:	c1 ea 16             	shr    $0x16,%edx
f0104c7a:	c1 e2 02             	shl    $0x2,%edx
f0104c7d:	01 c2                	add    %eax,%edx
f0104c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c82:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104c85:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104c88:	c1 e9 16             	shr    $0x16,%ecx
f0104c8b:	c1 e1 02             	shl    $0x2,%ecx
f0104c8e:	01 c8                	add    %ecx,%eax
f0104c90:	8b 00                	mov    (%eax),%eax
f0104c92:	83 e0 df             	and    $0xffffffdf,%eax
f0104c95:	89 02                	mov    %eax,(%edx)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c9a:	83 ec 08             	sub    $0x8,%esp
f0104c9d:	50                   	push   %eax
f0104c9e:	6a 00                	push   $0x0
f0104ca0:	e8 6a e2 ff ff       	call   f0102f0f <tlb_invalidate>
f0104ca5:	83 c4 10             	add    $0x10,%esp
}
f0104ca8:	90                   	nop
f0104ca9:	c9                   	leave  
f0104caa:	c3                   	ret    

f0104cab <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104cab:	55                   	push   %ebp
f0104cac:	89 e5                	mov    %esp,%ebp
f0104cae:	83 ec 10             	sub    $0x10,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104cb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cb4:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104cb7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	ptr_pgdir[PDX(virtual_address)] = 0 ;
f0104cba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104cbd:	c1 e8 16             	shr    $0x16,%eax
f0104cc0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104cc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104cca:	01 d0                	add    %edx,%eax
f0104ccc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104cd2:	0f 20 d8             	mov    %cr3,%eax
f0104cd5:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104cd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cdb:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104cde:	90                   	nop
f0104cdf:	c9                   	leave  
f0104ce0:	c3                   	ret    

f0104ce1 <pt_set_page_permissions>:

extern int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

inline void pt_set_page_permissions(struct Env* ptr_env, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0104ce1:	55                   	push   %ebp
f0104ce2:	89 e5                	mov    %esp,%ebp
f0104ce4:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104ce7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104cea:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104ced:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104cf3:	c1 e8 16             	shr    $0x16,%eax
f0104cf6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104d00:	01 d0                	add    %edx,%eax
f0104d02:	8b 00                	mov    (%eax),%eax
f0104d04:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104d07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d0a:	83 e0 01             	and    $0x1,%eax
f0104d0d:	85 c0                	test   %eax,%eax
f0104d0f:	0f 84 d6 00 00 00    	je     f0104deb <pt_set_page_permissions+0x10a>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104d15:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104d1c:	77 19                	ja     f0104d37 <pt_set_page_permissions+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104d1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d21:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d26:	83 ec 0c             	sub    $0xc,%esp
f0104d29:	50                   	push   %eax
f0104d2a:	e8 76 77 00 00       	call   f010c4a5 <kheap_virtual_address>
f0104d2f:	83 c4 10             	add    $0x10,%esp
f0104d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d35:	eb 40                	jmp    f0104d77 <pt_set_page_permissions+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104d37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d3a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d3f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104d42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d45:	c1 e8 0c             	shr    $0xc,%eax
f0104d48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104d4b:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0104d50:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104d53:	72 17                	jb     f0104d6c <pt_set_page_permissions+0x8b>
f0104d55:	ff 75 e8             	pushl  -0x18(%ebp)
f0104d58:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0104d5d:	68 9f 04 00 00       	push   $0x49f
f0104d62:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104d67:	e8 0a b4 ff ff       	call   f0100176 <_panic>
f0104d6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104d6f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104d74:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104d77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d7a:	c1 e8 0c             	shr    $0xc,%eax
f0104d7d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d8c:	01 c2                	add    %eax,%edx
f0104d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d91:	c1 e8 0c             	shr    $0xc,%eax
f0104d94:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104d99:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104da3:	01 c8                	add    %ecx,%eax
f0104da5:	8b 00                	mov    (%eax),%eax
f0104da7:	0b 45 10             	or     0x10(%ebp),%eax
f0104daa:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104dac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104daf:	c1 e8 0c             	shr    $0xc,%eax
f0104db2:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104db7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dc1:	01 d0                	add    %edx,%eax
f0104dc3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104dc6:	c1 ea 0c             	shr    $0xc,%edx
f0104dc9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104dcf:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104dd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104dd9:	01 ca                	add    %ecx,%edx
f0104ddb:	8b 12                	mov    (%edx),%edx
f0104ddd:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104de0:	f7 d1                	not    %ecx
f0104de2:	21 ca                	and    %ecx,%edx
f0104de4:	89 10                	mov    %edx,(%eax)
f0104de6:	e9 e8 00 00 00       	jmp    f0104ed3 <pt_set_page_permissions+0x1f2>

	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104deb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104def:	0f 84 c7 00 00 00    	je     f0104ebc <pt_set_page_permissions+0x1db>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104df5:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0104dfa:	83 ec 04             	sub    $0x4,%esp
f0104dfd:	50                   	push   %eax
f0104dfe:	ff 75 0c             	pushl  0xc(%ebp)
f0104e01:	ff 75 08             	pushl  0x8(%ebp)
f0104e04:	e8 03 72 00 00       	call   f010c00c <__pf_read_env_table>
f0104e09:	83 c4 10             	add    $0x10,%esp
f0104e0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104e0f:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0104e14:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104e17:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104e1b:	75 17                	jne    f0104e34 <pt_set_page_permissions+0x153>
			panic("pt_set_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f0104e1d:	83 ec 04             	sub    $0x4,%esp
f0104e20:	68 c4 9f 11 f0       	push   $0xf0119fc4
f0104e25:	68 ad 04 00 00       	push   $0x4ad
f0104e2a:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104e2f:	e8 42 b3 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0104e34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e37:	c1 e8 0c             	shr    $0xc,%eax
f0104e3a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e49:	01 c2                	add    %eax,%edx
f0104e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e4e:	c1 e8 0c             	shr    $0xc,%eax
f0104e51:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e56:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0104e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e60:	01 c8                	add    %ecx,%eax
f0104e62:	8b 00                	mov    (%eax),%eax
f0104e64:	0b 45 10             	or     0x10(%ebp),%eax
f0104e67:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0104e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e6c:	c1 e8 0c             	shr    $0xc,%eax
f0104e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104e74:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e7e:	01 d0                	add    %edx,%eax
f0104e80:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e83:	c1 ea 0c             	shr    $0xc,%edx
f0104e86:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104e8c:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0104e93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e96:	01 ca                	add    %ecx,%edx
f0104e98:	8b 12                	mov    (%edx),%edx
f0104e9a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0104e9d:	f7 d1                	not    %ecx
f0104e9f:	21 ca                	and    %ecx,%edx
f0104ea1:	89 10                	mov    %edx,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104ea3:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0104ea8:	83 ec 04             	sub    $0x4,%esp
f0104eab:	50                   	push   %eax
f0104eac:	ff 75 0c             	pushl  0xc(%ebp)
f0104eaf:	ff 75 08             	pushl  0x8(%ebp)
f0104eb2:	e8 b0 70 00 00       	call   f010bf67 <__pf_write_env_table>
f0104eb7:	83 c4 10             	add    $0x10,%esp
f0104eba:	eb 17                	jmp    f0104ed3 <pt_set_page_permissions+0x1f2>
	}
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104ebc:	83 ec 04             	sub    $0x4,%esp
f0104ebf:	68 40 a0 11 f0       	push   $0xf011a040
f0104ec4:	68 b7 04 00 00       	push   $0x4b7
f0104ec9:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104ece:	e8 a3 b2 ff ff       	call   f0100176 <_panic>
	}

	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ed6:	83 ec 08             	sub    $0x8,%esp
f0104ed9:	50                   	push   %eax
f0104eda:	6a 00                	push   $0x0
f0104edc:	e8 2e e0 ff ff       	call   f0102f0f <tlb_invalidate>
f0104ee1:	83 c4 10             	add    $0x10,%esp
}
f0104ee4:	90                   	nop
f0104ee5:	c9                   	leave  
f0104ee6:	c3                   	ret    

f0104ee7 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104ee7:	55                   	push   %ebp
f0104ee8:	89 e5                	mov    %esp,%ebp
f0104eea:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104eed:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ef0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104ef3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ef9:	c1 e8 16             	shr    $0x16,%eax
f0104efc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104f03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f06:	01 d0                	add    %edx,%eax
f0104f08:	8b 00                	mov    (%eax),%eax
f0104f0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f10:	83 e0 01             	and    $0x1,%eax
f0104f13:	85 c0                	test   %eax,%eax
f0104f15:	0f 84 84 00 00 00    	je     f0104f9f <pt_clear_page_table_entry+0xb8>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104f1b:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104f22:	77 19                	ja     f0104f3d <pt_clear_page_table_entry+0x56>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104f24:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104f2c:	83 ec 0c             	sub    $0xc,%esp
f0104f2f:	50                   	push   %eax
f0104f30:	e8 70 75 00 00       	call   f010c4a5 <kheap_virtual_address>
f0104f35:	83 c4 10             	add    $0x10,%esp
f0104f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3b:	eb 40                	jmp    f0104f7d <pt_clear_page_table_entry+0x96>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104f3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104f45:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104f48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f4b:	c1 e8 0c             	shr    $0xc,%eax
f0104f4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104f51:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f0104f56:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104f59:	72 17                	jb     f0104f72 <pt_clear_page_table_entry+0x8b>
f0104f5b:	ff 75 e8             	pushl  -0x18(%ebp)
f0104f5e:	68 fc 9c 11 f0       	push   $0xf0119cfc
f0104f63:	68 cd 04 00 00       	push   $0x4cd
f0104f68:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104f6d:	e8 04 b2 ff ff       	call   f0100176 <_panic>
f0104f72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104f75:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f80:	c1 e8 0c             	shr    $0xc,%eax
f0104f83:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104f88:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f92:	01 d0                	add    %edx,%eax
f0104f94:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f9a:	e9 92 00 00 00       	jmp    f0105031 <pt_clear_page_table_entry+0x14a>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104f9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0104fa3:	74 75                	je     f010501a <pt_clear_page_table_entry+0x133>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory

		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104fa5:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0104faa:	83 ec 04             	sub    $0x4,%esp
f0104fad:	50                   	push   %eax
f0104fae:	ff 75 0c             	pushl  0xc(%ebp)
f0104fb1:	ff 75 08             	pushl  0x8(%ebp)
f0104fb4:	e8 53 70 00 00       	call   f010c00c <__pf_read_env_table>
f0104fb9:	83 c4 10             	add    $0x10,%esp
f0104fbc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104fbf:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0104fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104fc7:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104fcb:	75 17                	jne    f0104fe4 <pt_clear_page_table_entry+0xfd>
			panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0104fcd:	83 ec 04             	sub    $0x4,%esp
f0104fd0:	68 b4 a0 11 f0       	push   $0xf011a0b4
f0104fd5:	68 db 04 00 00       	push   $0x4db
f0104fda:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0104fdf:	e8 92 b1 ff ff       	call   f0100176 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fe7:	c1 e8 0c             	shr    $0xc,%eax
f0104fea:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104fef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ff9:	01 d0                	add    %edx,%eax
f0104ffb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0105001:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0105006:	83 ec 04             	sub    $0x4,%esp
f0105009:	50                   	push   %eax
f010500a:	ff 75 0c             	pushl  0xc(%ebp)
f010500d:	ff 75 08             	pushl  0x8(%ebp)
f0105010:	e8 52 6f 00 00       	call   f010bf67 <__pf_write_env_table>
f0105015:	83 c4 10             	add    $0x10,%esp
f0105018:	eb 17                	jmp    f0105031 <pt_clear_page_table_entry+0x14a>
	}
	else
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f010501a:	83 ec 04             	sub    $0x4,%esp
f010501d:	68 34 a1 11 f0       	push   $0xf011a134
f0105022:	68 e2 04 00 00       	push   $0x4e2
f0105027:	68 d5 9c 11 f0       	push   $0xf0119cd5
f010502c:	e8 45 b1 ff ff       	call   f0100176 <_panic>


	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0105031:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105034:	83 ec 08             	sub    $0x8,%esp
f0105037:	50                   	push   %eax
f0105038:	6a 00                	push   $0x0
f010503a:	e8 d0 de ff ff       	call   f0102f0f <tlb_invalidate>
f010503f:	83 c4 10             	add    $0x10,%esp
}
f0105042:	90                   	nop
f0105043:	c9                   	leave  
f0105044:	c3                   	ret    

f0105045 <pt_get_page_permissions>:

inline uint32 pt_get_page_permissions(struct Env* ptr_env, uint32 virtual_address )
{
f0105045:	55                   	push   %ebp
f0105046:	89 e5                	mov    %esp,%ebp
f0105048:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f010504b:	8b 45 08             	mov    0x8(%ebp),%eax
f010504e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105051:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32* ptr_page_table;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0105054:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105057:	c1 e8 16             	shr    $0x16,%eax
f010505a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105061:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105064:	01 d0                	add    %edx,%eax
f0105066:	8b 00                	mov    (%eax),%eax
f0105068:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010506b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010506e:	83 e0 01             	and    $0x1,%eax
f0105071:	85 c0                	test   %eax,%eax
f0105073:	74 67                	je     f01050dc <pt_get_page_permissions+0x97>
	{
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0105075:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f010507c:	77 1c                	ja     f010509a <pt_get_page_permissions+0x55>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f010507e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105081:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105086:	83 ec 0c             	sub    $0xc,%esp
f0105089:	50                   	push   %eax
f010508a:	e8 16 74 00 00       	call   f010c4a5 <kheap_virtual_address>
f010508f:	83 c4 10             	add    $0x10,%esp
f0105092:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105095:	e9 8e 00 00 00       	jmp    f0105128 <pt_get_page_permissions+0xe3>
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010509a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010509d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01050a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01050a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01050a8:	c1 e8 0c             	shr    $0xc,%eax
f01050ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01050ae:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f01050b3:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01050b6:	72 17                	jb     f01050cf <pt_get_page_permissions+0x8a>
f01050b8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01050bb:	68 fc 9c 11 f0       	push   $0xf0119cfc
f01050c0:	68 f6 04 00 00       	push   $0x4f6
f01050c5:	68 d5 9c 11 f0       	push   $0xf0119cd5
f01050ca:	e8 a7 b0 ff ff       	call   f0100176 <_panic>
f01050cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01050d2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01050d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050da:	eb 4c                	jmp    f0105128 <pt_get_page_permissions+0xe3>
		}
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01050dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01050e0:	74 3f                	je     f0105121 <pt_get_page_permissions+0xdc>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory
		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f01050e2:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f01050e7:	83 ec 04             	sub    $0x4,%esp
f01050ea:	50                   	push   %eax
f01050eb:	ff 75 0c             	pushl  0xc(%ebp)
f01050ee:	ff 75 08             	pushl  0x8(%ebp)
f01050f1:	e8 16 6f 00 00       	call   f010c00c <__pf_read_env_table>
f01050f6:	83 c4 10             	add    $0x10,%esp
f01050f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f01050fc:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0105101:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0105104:	83 7d e8 f6          	cmpl   $0xfffffff6,-0x18(%ebp)
f0105108:	75 1e                	jne    f0105128 <pt_get_page_permissions+0xe3>
			panic("pt_get_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f010510a:	83 ec 04             	sub    $0x4,%esp
f010510d:	68 ac a1 11 f0       	push   $0xf011a1ac
f0105112:	68 01 05 00 00       	push   $0x501
f0105117:	68 d5 9c 11 f0       	push   $0xf0119cd5
f010511c:	e8 55 b0 ff ff       	call   f0100176 <_panic>
			handling code");
	}
	else
		return 0;
f0105121:	b8 00 00 00 00       	mov    $0x0,%eax
f0105126:	eb 1e                	jmp    f0105146 <pt_get_page_permissions+0x101>
	//panic("function pt_get_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;

	//	if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//		panic("function pt_is_page_modified() called with invalid virtual address\n") ;

	return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0105128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010512b:	c1 e8 0c             	shr    $0xc,%eax
f010512e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105133:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010513a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513d:	01 d0                	add    %edx,%eax
f010513f:	8b 00                	mov    (%eax),%eax
f0105141:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0105146:	c9                   	leave  
f0105147:	c3                   	ret    

f0105148 <create_frames_storage>:
//=============================================================
// 2014 - edited in 2017
//=============================================================
// [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0105148:	55                   	push   %ebp
f0105149:	89 e5                	mov    %esp,%ebp
f010514b:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = (void *)kmalloc(PAGE_SIZE);
f010514e:	83 ec 0c             	sub    $0xc,%esp
f0105151:	68 00 10 00 00       	push   $0x1000
f0105156:	e8 15 72 00 00       	call   f010c370 <kmalloc>
f010515b:	83 c4 10             	add    $0x10,%esp
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	75 17                	jne    f010517e <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0105167:	83 ec 04             	sub    $0x4,%esp
f010516a:	68 27 a2 11 f0       	push   $0xf011a227
f010516f:	68 17 05 00 00       	push   $0x517
f0105174:	68 d5 9c 11 f0       	push   $0xf0119cd5
f0105179:	e8 f8 af ff ff       	call   f0100176 <_panic>
	}
	return frames_storage;
f010517e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0105181:	c9                   	leave  
f0105182:	c3                   	ret    

f0105183 <add_frame_to_storage>:
// [2] Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
{
f0105183:	55                   	push   %ebp
f0105184:	89 e5                	mov    %esp,%ebp
f0105186:	53                   	push   %ebx
f0105187:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010518a:	8b 45 10             	mov    0x10(%ebp),%eax
f010518d:	c1 e0 0c             	shl    $0xc,%eax
f0105190:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage, (void*) va, &ptr_page_table);
f0105193:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105196:	83 ec 04             	sub    $0x4,%esp
f0105199:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010519c:	52                   	push   %edx
f010519d:	50                   	push   %eax
f010519e:	ff 75 08             	pushl  0x8(%ebp)
f01051a1:	e8 6f e9 ff ff       	call   f0103b15 <get_page_table>
f01051a6:	83 c4 10             	add    $0x10,%esp
f01051a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f01051ac:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01051b0:	75 14                	jne    f01051c6 <add_frame_to_storage+0x43>
	{
		if(USE_KHEAP)
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f01051b2:	83 ec 08             	sub    $0x8,%esp
f01051b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01051b8:	ff 75 08             	pushl  0x8(%ebp)
f01051bb:	e8 ad ea ff ff       	call   f0103c6d <create_page_table>
f01051c0:	83 c4 10             	add    $0x10,%esp
f01051c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
		}

	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f01051c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051cc:	c1 ea 0c             	shr    $0xc,%edx
f01051cf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01051d5:	c1 e2 02             	shl    $0x2,%edx
f01051d8:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01051db:	83 ec 0c             	sub    $0xc,%esp
f01051de:	ff 75 0c             	pushl  0xc(%ebp)
f01051e1:	e8 bb df ff ff       	call   f01031a1 <to_physical_address>
f01051e6:	83 c4 10             	add    $0x10,%esp
f01051e9:	83 c8 01             	or     $0x1,%eax
f01051ec:	89 03                	mov    %eax,(%ebx)
}
f01051ee:	90                   	nop
f01051ef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01051f2:	c9                   	leave  
f01051f3:	c3                   	ret    

f01051f4 <get_frame_from_storage>:

// [3] Get a frame info from the storage of frames at the given index
inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01051f4:	55                   	push   %ebp
f01051f5:	89 e5                	mov    %esp,%ebp
f01051f7:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01051fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01051fd:	c1 e0 0c             	shl    $0xc,%eax
f0105200:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage, (void*) va, &ptr_page_table);
f0105203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105206:	83 ec 04             	sub    $0x4,%esp
f0105209:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010520c:	52                   	push   %edx
f010520d:	50                   	push   %eax
f010520e:	ff 75 08             	pushl  0x8(%ebp)
f0105211:	e8 b3 eb ff ff       	call   f0103dc9 <get_frame_info>
f0105216:	83 c4 10             	add    $0x10,%esp
f0105219:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f010521c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <clear_frames_storage>:

// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0105227:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f010522e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105235:	eb 5b                	jmp    f0105292 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0105237:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105241:	8b 45 08             	mov    0x8(%ebp),%eax
f0105244:	01 d0                	add    %edx,%eax
f0105246:	8b 00                	mov    (%eax),%eax
f0105248:	85 c0                	test   %eax,%eax
f010524a:	74 43                	je     f010528f <clear_frames_storage+0x6e>
		{
			if(USE_KHEAP)
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f010524c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010524f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105256:	8b 45 08             	mov    0x8(%ebp),%eax
f0105259:	01 d0                	add    %edx,%eax
f010525b:	8b 00                	mov    (%eax),%eax
f010525d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105262:	83 ec 0c             	sub    $0xc,%esp
f0105265:	50                   	push   %eax
f0105266:	e8 3a 72 00 00       	call   f010c4a5 <kheap_virtual_address>
f010526b:	83 c4 10             	add    $0x10,%esp
f010526e:	83 ec 0c             	sub    $0xc,%esp
f0105271:	50                   	push   %eax
f0105272:	e8 5f 71 00 00       	call   f010c3d6 <kfree>
f0105277:	83 c4 10             	add    $0x10,%esp
			}
			else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
f010527a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105284:	8b 45 08             	mov    0x8(%ebp),%eax
f0105287:	01 d0                	add    %edx,%eax
f0105289:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f010528f:	ff 45 f4             	incl   -0xc(%ebp)
f0105292:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105299:	7e 9c                	jle    f0105237 <clear_frames_storage+0x16>
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
			frames_storage[i] = 0;
		}
	}
}
f010529b:	90                   	nop
f010529c:	c9                   	leave  
f010529d:	c3                   	ret    

f010529e <setUHeapPlacementStrategyFIRSTFIT>:
//********************************************************************************//

void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010529e:	55                   	push   %ebp
f010529f:	89 e5                	mov    %esp,%ebp
f01052a1:	c7 05 94 73 53 f0 01 	movl   $0x1,0xf0537394
f01052a8:	00 00 00 
f01052ab:	90                   	nop
f01052ac:	5d                   	pop    %ebp
f01052ad:	c3                   	ret    

f01052ae <setUHeapPlacementStrategyBESTFIT>:
void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01052ae:	55                   	push   %ebp
f01052af:	89 e5                	mov    %esp,%ebp
f01052b1:	c7 05 94 73 53 f0 02 	movl   $0x2,0xf0537394
f01052b8:	00 00 00 
f01052bb:	90                   	nop
f01052bc:	5d                   	pop    %ebp
f01052bd:	c3                   	ret    

f01052be <setUHeapPlacementStrategyNEXTFIT>:
void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01052be:	55                   	push   %ebp
f01052bf:	89 e5                	mov    %esp,%ebp
f01052c1:	c7 05 94 73 53 f0 03 	movl   $0x3,0xf0537394
f01052c8:	00 00 00 
f01052cb:	90                   	nop
f01052cc:	5d                   	pop    %ebp
f01052cd:	c3                   	ret    

f01052ce <setUHeapPlacementStrategyWORSTFIT>:
void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f01052ce:	55                   	push   %ebp
f01052cf:	89 e5                	mov    %esp,%ebp
f01052d1:	c7 05 94 73 53 f0 04 	movl   $0x4,0xf0537394
f01052d8:	00 00 00 
f01052db:	90                   	nop
f01052dc:	5d                   	pop    %ebp
f01052dd:	c3                   	ret    

f01052de <isUHeapPlacementStrategyFIRSTFIT>:

uint32 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01052de:	55                   	push   %ebp
f01052df:	89 e5                	mov    %esp,%ebp
f01052e1:	a1 94 73 53 f0       	mov    0xf0537394,%eax
f01052e6:	83 f8 01             	cmp    $0x1,%eax
f01052e9:	75 07                	jne    f01052f2 <isUHeapPlacementStrategyFIRSTFIT+0x14>
f01052eb:	b8 01 00 00 00       	mov    $0x1,%eax
f01052f0:	eb 05                	jmp    f01052f7 <isUHeapPlacementStrategyFIRSTFIT+0x19>
f01052f2:	b8 00 00 00 00       	mov    $0x0,%eax
f01052f7:	5d                   	pop    %ebp
f01052f8:	c3                   	ret    

f01052f9 <isUHeapPlacementStrategyBESTFIT>:
uint32 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f01052f9:	55                   	push   %ebp
f01052fa:	89 e5                	mov    %esp,%ebp
f01052fc:	a1 94 73 53 f0       	mov    0xf0537394,%eax
f0105301:	83 f8 02             	cmp    $0x2,%eax
f0105304:	75 07                	jne    f010530d <isUHeapPlacementStrategyBESTFIT+0x14>
f0105306:	b8 01 00 00 00       	mov    $0x1,%eax
f010530b:	eb 05                	jmp    f0105312 <isUHeapPlacementStrategyBESTFIT+0x19>
f010530d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105312:	5d                   	pop    %ebp
f0105313:	c3                   	ret    

f0105314 <isUHeapPlacementStrategyNEXTFIT>:
uint32 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0105314:	55                   	push   %ebp
f0105315:	89 e5                	mov    %esp,%ebp
f0105317:	a1 94 73 53 f0       	mov    0xf0537394,%eax
f010531c:	83 f8 03             	cmp    $0x3,%eax
f010531f:	75 07                	jne    f0105328 <isUHeapPlacementStrategyNEXTFIT+0x14>
f0105321:	b8 01 00 00 00       	mov    $0x1,%eax
f0105326:	eb 05                	jmp    f010532d <isUHeapPlacementStrategyNEXTFIT+0x19>
f0105328:	b8 00 00 00 00       	mov    $0x0,%eax
f010532d:	5d                   	pop    %ebp
f010532e:	c3                   	ret    

f010532f <isUHeapPlacementStrategyWORSTFIT>:
uint32 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010532f:	55                   	push   %ebp
f0105330:	89 e5                	mov    %esp,%ebp
f0105332:	a1 94 73 53 f0       	mov    0xf0537394,%eax
f0105337:	83 f8 04             	cmp    $0x4,%eax
f010533a:	75 07                	jne    f0105343 <isUHeapPlacementStrategyWORSTFIT+0x14>
f010533c:	b8 01 00 00 00       	mov    $0x1,%eax
f0105341:	eb 05                	jmp    f0105348 <isUHeapPlacementStrategyWORSTFIT+0x19>
f0105343:	b8 00 00 00 00       	mov    $0x0,%eax
f0105348:	5d                   	pop    %ebp
f0105349:	c3                   	ret    

f010534a <setKHeapPlacementStrategyCONTALLOC>:

//********************************************************************************//
void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f010534a:	55                   	push   %ebp
f010534b:	89 e5                	mov    %esp,%ebp
f010534d:	c7 05 bc 73 53 f0 00 	movl   $0x0,0xf05373bc
f0105354:	00 00 00 
f0105357:	90                   	nop
f0105358:	5d                   	pop    %ebp
f0105359:	c3                   	ret    

f010535a <setKHeapPlacementStrategyFIRSTFIT>:
void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010535a:	55                   	push   %ebp
f010535b:	89 e5                	mov    %esp,%ebp
f010535d:	c7 05 bc 73 53 f0 01 	movl   $0x1,0xf05373bc
f0105364:	00 00 00 
f0105367:	90                   	nop
f0105368:	5d                   	pop    %ebp
f0105369:	c3                   	ret    

f010536a <setKHeapPlacementStrategyBESTFIT>:
void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010536a:	55                   	push   %ebp
f010536b:	89 e5                	mov    %esp,%ebp
f010536d:	c7 05 bc 73 53 f0 02 	movl   $0x2,0xf05373bc
f0105374:	00 00 00 
f0105377:	90                   	nop
f0105378:	5d                   	pop    %ebp
f0105379:	c3                   	ret    

f010537a <setKHeapPlacementStrategyNEXTFIT>:
void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010537a:	55                   	push   %ebp
f010537b:	89 e5                	mov    %esp,%ebp
f010537d:	c7 05 bc 73 53 f0 03 	movl   $0x3,0xf05373bc
f0105384:	00 00 00 
f0105387:	90                   	nop
f0105388:	5d                   	pop    %ebp
f0105389:	c3                   	ret    

f010538a <setKHeapPlacementStrategyWORSTFIT>:
void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f010538a:	55                   	push   %ebp
f010538b:	89 e5                	mov    %esp,%ebp
f010538d:	c7 05 bc 73 53 f0 04 	movl   $0x4,0xf05373bc
f0105394:	00 00 00 
f0105397:	90                   	nop
f0105398:	5d                   	pop    %ebp
f0105399:	c3                   	ret    

f010539a <isKHeapPlacementStrategyCONTALLOC>:

uint32 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f010539a:	55                   	push   %ebp
f010539b:	89 e5                	mov    %esp,%ebp
f010539d:	a1 bc 73 53 f0       	mov    0xf05373bc,%eax
f01053a2:	85 c0                	test   %eax,%eax
f01053a4:	75 07                	jne    f01053ad <isKHeapPlacementStrategyCONTALLOC+0x13>
f01053a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01053ab:	eb 05                	jmp    f01053b2 <isKHeapPlacementStrategyCONTALLOC+0x18>
f01053ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b2:	5d                   	pop    %ebp
f01053b3:	c3                   	ret    

f01053b4 <isKHeapPlacementStrategyFIRSTFIT>:
uint32 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01053b4:	55                   	push   %ebp
f01053b5:	89 e5                	mov    %esp,%ebp
f01053b7:	a1 bc 73 53 f0       	mov    0xf05373bc,%eax
f01053bc:	83 f8 01             	cmp    $0x1,%eax
f01053bf:	75 07                	jne    f01053c8 <isKHeapPlacementStrategyFIRSTFIT+0x14>
f01053c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01053c6:	eb 05                	jmp    f01053cd <isKHeapPlacementStrategyFIRSTFIT+0x19>
f01053c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01053cd:	5d                   	pop    %ebp
f01053ce:	c3                   	ret    

f01053cf <isKHeapPlacementStrategyBESTFIT>:
uint32 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01053cf:	55                   	push   %ebp
f01053d0:	89 e5                	mov    %esp,%ebp
f01053d2:	a1 bc 73 53 f0       	mov    0xf05373bc,%eax
f01053d7:	83 f8 02             	cmp    $0x2,%eax
f01053da:	75 07                	jne    f01053e3 <isKHeapPlacementStrategyBESTFIT+0x14>
f01053dc:	b8 01 00 00 00       	mov    $0x1,%eax
f01053e1:	eb 05                	jmp    f01053e8 <isKHeapPlacementStrategyBESTFIT+0x19>
f01053e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01053e8:	5d                   	pop    %ebp
f01053e9:	c3                   	ret    

f01053ea <isKHeapPlacementStrategyNEXTFIT>:
uint32 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01053ea:	55                   	push   %ebp
f01053eb:	89 e5                	mov    %esp,%ebp
f01053ed:	a1 bc 73 53 f0       	mov    0xf05373bc,%eax
f01053f2:	83 f8 03             	cmp    $0x3,%eax
f01053f5:	75 07                	jne    f01053fe <isKHeapPlacementStrategyNEXTFIT+0x14>
f01053f7:	b8 01 00 00 00       	mov    $0x1,%eax
f01053fc:	eb 05                	jmp    f0105403 <isKHeapPlacementStrategyNEXTFIT+0x19>
f01053fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0105403:	5d                   	pop    %ebp
f0105404:	c3                   	ret    

f0105405 <isKHeapPlacementStrategyWORSTFIT>:
uint32 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0105405:	55                   	push   %ebp
f0105406:	89 e5                	mov    %esp,%ebp
f0105408:	a1 bc 73 53 f0       	mov    0xf05373bc,%eax
f010540d:	83 f8 04             	cmp    $0x4,%eax
f0105410:	75 07                	jne    f0105419 <isKHeapPlacementStrategyWORSTFIT+0x14>
f0105412:	b8 01 00 00 00       	mov    $0x1,%eax
f0105417:	eb 05                	jmp    f010541e <isKHeapPlacementStrategyWORSTFIT+0x19>
f0105419:	b8 00 00 00 00       	mov    $0x0,%eax
f010541e:	5d                   	pop    %ebp
f010541f:	c3                   	ret    

f0105420 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0105420:	55                   	push   %ebp
f0105421:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0105423:	8b 15 b4 6a 53 f0    	mov    0xf0536ab4,%edx
f0105429:	8b 45 08             	mov    0x8(%ebp),%eax
f010542c:	89 10                	mov    %edx,(%eax)
f010542e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105431:	8b 00                	mov    (%eax),%eax
f0105433:	85 c0                	test   %eax,%eax
f0105435:	75 07                	jne    f010543e <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0105437:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010543c:	eb 11                	jmp    f010544f <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010543e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105441:	8b 00                	mov    (%eax),%eax
f0105443:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010544a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010544f:	5d                   	pop    %ebp
f0105450:	c3                   	ret    

f0105451 <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0105451:	55                   	push   %ebp
f0105452:	89 e5                	mov    %esp,%ebp
f0105454:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0105457:	83 ec 04             	sub    $0x4,%esp
f010545a:	68 3c 03 00 00       	push   $0x33c
f010545f:	6a 00                	push   $0x0
f0105461:	ff 75 08             	pushl  0x8(%ebp)
f0105464:	e8 3f 25 01 00       	call   f01179a8 <memset>
f0105469:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010546c:	8b 45 08             	mov    0x8(%ebp),%eax
f010546f:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0105476:	8b 15 b4 6a 53 f0    	mov    0xf0536ab4,%edx
f010547c:	8b 45 08             	mov    0x8(%ebp),%eax
f010547f:	89 50 44             	mov    %edx,0x44(%eax)
f0105482:	8b 45 08             	mov    0x8(%ebp),%eax
f0105485:	8b 40 44             	mov    0x44(%eax),%eax
f0105488:	85 c0                	test   %eax,%eax
f010548a:	74 0d                	je     f0105499 <free_environment+0x48>
f010548c:	a1 b4 6a 53 f0       	mov    0xf0536ab4,%eax
f0105491:	8b 55 08             	mov    0x8(%ebp),%edx
f0105494:	89 50 48             	mov    %edx,0x48(%eax)
f0105497:	eb 08                	jmp    f01054a1 <free_environment+0x50>
f0105499:	8b 45 08             	mov    0x8(%ebp),%eax
f010549c:	a3 b8 6a 53 f0       	mov    %eax,0xf0536ab8
f01054a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054a4:	a3 b4 6a 53 f0       	mov    %eax,0xf0536ab4
f01054a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01054ac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054b3:	a1 c0 6a 53 f0       	mov    0xf0536ac0,%eax
f01054b8:	40                   	inc    %eax
f01054b9:	a3 c0 6a 53 f0       	mov    %eax,0xf0536ac0
}
f01054be:	90                   	nop
f01054bf:	c9                   	leave  
f01054c0:	c3                   	ret    

f01054c1 <create_user_page_WS>:


void * create_user_page_WS(unsigned int numOfElements)
{
f01054c1:	55                   	push   %ebp
f01054c2:	89 e5                	mov    %esp,%ebp
f01054c4:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f01054c7:	8b 55 08             	mov    0x8(%ebp),%edx
f01054ca:	89 d0                	mov    %edx,%eax
f01054cc:	01 c0                	add    %eax,%eax
f01054ce:	01 d0                	add    %edx,%eax
f01054d0:	c1 e0 02             	shl    $0x2,%eax
f01054d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return kmalloc(nBytes);
f01054d6:	83 ec 0c             	sub    $0xc,%esp
f01054d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01054dc:	e8 8f 6e 00 00       	call   f010c370 <kmalloc>
f01054e1:	83 c4 10             	add    $0x10,%esp
}
f01054e4:	c9                   	leave  
f01054e5:	c3                   	ret    

f01054e6 <create_user_directory>:


void * create_user_directory()
{
f01054e6:	55                   	push   %ebp
f01054e7:	89 e5                	mov    %esp,%ebp
f01054e9:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new directory
	uint32* ptr_user_page_directory = (void *)kmalloc(PAGE_SIZE);
f01054ec:	83 ec 0c             	sub    $0xc,%esp
f01054ef:	68 00 10 00 00       	push   $0x1000
f01054f4:	e8 77 6e 00 00       	call   f010c370 <kmalloc>
f01054f9:	83 c4 10             	add    $0x10,%esp
f01054fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f01054ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105503:	75 17                	jne    f010551c <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0105505:	83 ec 04             	sub    $0x4,%esp
f0105508:	68 d2 a8 11 f0       	push   $0xf011a8d2
f010550d:	68 f5 00 00 00       	push   $0xf5
f0105512:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105517:	e8 5a ac ff ff       	call   f0100176 <_panic>
	}
	return ptr_user_page_directory;
f010551c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010551f:	c9                   	leave  
f0105520:	c3                   	ret    

f0105521 <ShareWSAtUserSpace>:

void ShareWSAtUserSpace(struct Env* e)
{
f0105521:	55                   	push   %ebp
f0105522:	89 e5                	mov    %esp,%ebp
f0105524:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f0105527:	8b 45 08             	mov    0x8(%ebp),%eax
f010552a:	c7 80 34 03 00 00 00 	movl   $0xa0000000,0x334(%eax)
f0105531:	00 00 a0 
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
f0105534:	8b 45 08             	mov    0x8(%ebp),%eax
f0105537:	8b 40 74             	mov    0x74(%eax),%eax
f010553a:	83 ec 0c             	sub    $0xc,%esp
f010553d:	50                   	push   %eax
f010553e:	e8 7e ff ff ff       	call   f01054c1 <create_user_page_WS>
f0105543:	83 c4 10             	add    $0x10,%esp
f0105546:	89 c2                	mov    %eax,%edx
f0105548:	8b 45 08             	mov    0x8(%ebp),%eax
f010554b:	89 50 78             	mov    %edx,0x78(%eax)
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010554e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105551:	8b 40 78             	mov    0x78(%eax),%eax
f0105554:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f0105557:	8b 45 08             	mov    0x8(%ebp),%eax
f010555a:	8b 50 74             	mov    0x74(%eax),%edx
f010555d:	89 d0                	mov    %edx,%eax
f010555f:	01 c0                	add    %eax,%eax
f0105561:	01 d0                	add    %edx,%eax
f0105563:	c1 e0 02             	shl    $0x2,%eax
f0105566:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f0105569:	8b 45 08             	mov    0x8(%ebp),%eax
f010556c:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0105572:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f0105575:	8b 45 08             	mov    0x8(%ebp),%eax
f0105578:	8b 40 78             	mov    0x78(%eax),%eax
f010557b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010557e:	eb 72                	jmp    f01055f2 <ShareWSAtUserSpace+0xd1>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f0105580:	83 ec 0c             	sub    $0xc,%esp
f0105583:	ff 75 f4             	pushl  -0xc(%ebp)
f0105586:	e8 7c 6f 00 00       	call   f010c507 <kheap_physical_address>
f010558b:	83 c4 10             	add    $0x10,%esp
f010558e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f0105591:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105594:	8b 45 08             	mov    0x8(%ebp),%eax
f0105597:	8b 40 5c             	mov    0x5c(%eax),%eax
f010559a:	83 ec 04             	sub    $0x4,%esp
f010559d:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f01055a0:	51                   	push   %ecx
f01055a1:	52                   	push   %edx
f01055a2:	50                   	push   %eax
f01055a3:	e8 6d e5 ff ff       	call   f0103b15 <get_page_table>
f01055a8:	83 c4 10             	add    $0x10,%esp
f01055ab:	83 f8 01             	cmp    $0x1,%eax
f01055ae:	75 18                	jne    f01055c8 <ShareWSAtUserSpace+0xa7>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f01055b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01055b3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01055b6:	83 ec 08             	sub    $0x8,%esp
f01055b9:	ff 75 f0             	pushl  -0x10(%ebp)
f01055bc:	50                   	push   %eax
f01055bd:	e8 ab e6 ff ff       	call   f0103c6d <create_page_table>
f01055c2:	83 c4 10             	add    $0x10,%esp
f01055c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f01055c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01055cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055ce:	c1 ea 0c             	shr    $0xc,%edx
f01055d1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01055d7:	c1 e2 02             	shl    $0x2,%edx
f01055da:	01 d0                	add    %edx,%eax
f01055dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01055df:	83 ca 05             	or     $0x5,%edx
f01055e2:	89 10                	mov    %edx,(%eax)
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f01055e4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01055eb:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01055f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01055f5:	8b 40 78             	mov    0x78(%eax),%eax
f01055f8:	89 c2                	mov    %eax,%edx
f01055fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055fd:	01 d0                	add    %edx,%eax
f01055ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105602:	0f 87 78 ff ff ff    	ja     f0105580 <ShareWSAtUserSpace+0x5f>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f0105608:	90                   	nop
f0105609:	c9                   	leave  
f010560a:	c3                   	ret    

f010560b <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f010560b:	55                   	push   %ebp
f010560c:	89 e5                	mov    %esp,%ebp
f010560e:	83 ec 18             	sub    $0x18,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0105611:	8b 45 08             	mov    0x8(%ebp),%eax
f0105614:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105617:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010561a:	8b 45 08             	mov    0x8(%ebp),%eax
f010561d:	8b 55 10             	mov    0x10(%ebp),%edx
f0105620:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010562a:	eb 17                	jmp    f0105643 <initialize_environment+0x38>
	{
		e->env_page_directory[i] = 0 ;
f010562c:	8b 45 08             	mov    0x8(%ebp),%eax
f010562f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105632:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105635:	c1 e2 02             	shl    $0x2,%edx
f0105638:	01 d0                	add    %edx,%eax
f010563a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105640:	ff 45 f4             	incl   -0xc(%ebp)
f0105643:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105646:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010564b:	76 df                	jbe    f010562c <initialize_environment+0x21>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010564d:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0105654:	eb 22                	jmp    f0105678 <initialize_environment+0x6d>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0105656:	8b 45 08             	mov    0x8(%ebp),%eax
f0105659:	8b 40 5c             	mov    0x5c(%eax),%eax
f010565c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010565f:	c1 e2 02             	shl    $0x2,%edx
f0105662:	01 c2                	add    %eax,%edx
f0105664:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0105669:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010566c:	c1 e1 02             	shl    $0x2,%ecx
f010566f:	01 c8                	add    %ecx,%eax
f0105671:	8b 00                	mov    (%eax),%eax
f0105673:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0105675:	ff 45 f4             	incl   -0xc(%ebp)
f0105678:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010567f:	7e d5                	jle    f0105656 <initialize_environment+0x4b>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		ShareWSAtUserSpace(e);
f0105681:	83 ec 0c             	sub    $0xc,%esp
f0105684:	ff 75 08             	pushl  0x8(%ebp)
f0105687:	e8 95 fe ff ff       	call   f0105521 <ShareWSAtUserSpace>
f010568c:	83 c4 10             	add    $0x10,%esp
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010568f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105696:	eb 50                	jmp    f01056e8 <initialize_environment+0xdd>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0105698:	8b 45 08             	mov    0x8(%ebp),%eax
f010569b:	8b 48 78             	mov    0x78(%eax),%ecx
f010569e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056a1:	89 d0                	mov    %edx,%eax
f01056a3:	01 c0                	add    %eax,%eax
f01056a5:	01 d0                	add    %edx,%eax
f01056a7:	c1 e0 02             	shl    $0x2,%eax
f01056aa:	01 c8                	add    %ecx,%eax
f01056ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f01056b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01056b5:	8b 48 78             	mov    0x78(%eax),%ecx
f01056b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056bb:	89 d0                	mov    %edx,%eax
f01056bd:	01 c0                	add    %eax,%eax
f01056bf:	01 d0                	add    %edx,%eax
f01056c1:	c1 e0 02             	shl    $0x2,%eax
f01056c4:	01 c8                	add    %ecx,%eax
f01056c6:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f01056ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01056cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01056d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d3:	89 d0                	mov    %edx,%eax
f01056d5:	01 c0                	add    %eax,%eax
f01056d7:	01 d0                	add    %edx,%eax
f01056d9:	c1 e0 02             	shl    $0x2,%eax
f01056dc:	01 c8                	add    %ecx,%eax
f01056de:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f01056e5:	ff 45 f4             	incl   -0xc(%ebp)
f01056e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056eb:	8b 50 74             	mov    0x74(%eax),%edx
f01056ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f1:	39 c2                	cmp    %eax,%edx
f01056f3:	77 a3                	ja     f0105698 <initialize_environment+0x8d>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f01056f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01056f8:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01056ff:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0105702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105709:	eb 50                	jmp    f010575b <initialize_environment+0x150>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010570b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010570e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105711:	89 d0                	mov    %edx,%eax
f0105713:	01 c0                	add    %eax,%eax
f0105715:	01 d0                	add    %edx,%eax
f0105717:	c1 e0 02             	shl    $0x2,%eax
f010571a:	01 c8                	add    %ecx,%eax
f010571c:	83 c0 7c             	add    $0x7c,%eax
f010571f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0105725:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105728:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010572b:	89 d0                	mov    %edx,%eax
f010572d:	01 c0                	add    %eax,%eax
f010572f:	01 d0                	add    %edx,%eax
f0105731:	c1 e0 02             	shl    $0x2,%eax
f0105734:	01 c8                	add    %ecx,%eax
f0105736:	83 e8 80             	sub    $0xffffff80,%eax
f0105739:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010573c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010573f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105742:	89 d0                	mov    %edx,%eax
f0105744:	01 c0                	add    %eax,%eax
f0105746:	01 d0                	add    %edx,%eax
f0105748:	c1 e0 02             	shl    $0x2,%eax
f010574b:	01 c8                	add    %ecx,%eax
f010574d:	05 84 00 00 00       	add    $0x84,%eax
f0105752:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0105758:	ff 45 f4             	incl   -0xc(%ebp)
f010575b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010575f:	7e aa                	jle    f010570b <initialize_environment+0x100>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0105761:	8b 45 08             	mov    0x8(%ebp),%eax
f0105764:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
f010576b:	00 00 00 

	e->pageFaultsCounter=0;
f010576e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105771:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
f0105778:	00 00 00 
	e->tableFaultsCounter=0;
f010577b:	8b 45 08             	mov    0x8(%ebp),%eax
f010577e:	c7 80 e0 02 00 00 00 	movl   $0x0,0x2e0(%eax)
f0105785:	00 00 00 

	e->freeingFullWSCounter = 0;
f0105788:	8b 45 08             	mov    0x8(%ebp),%eax
f010578b:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
f0105792:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0105795:	8b 45 08             	mov    0x8(%ebp),%eax
f0105798:	c7 80 e8 02 00 00 00 	movl   $0x0,0x2e8(%eax)
f010579f:	00 00 00 

	e->nModifiedPages=0;
f01057a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01057a5:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
f01057ac:	00 00 00 
	e->nNotModifiedPages=0;
f01057af:	8b 45 08             	mov    0x8(%ebp),%eax
f01057b2:	c7 80 f0 02 00 00 00 	movl   $0x0,0x2f0(%eax)
f01057b9:	00 00 00 

	e->nClocks = 0;
f01057bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01057bf:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
f01057c6:	00 00 00 


	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f01057c9:	83 ec 0c             	sub    $0xc,%esp
f01057cc:	ff 75 08             	pushl  0x8(%ebp)
f01057cf:	e8 66 0b 00 00       	call   f010633a <complete_environment_initialization>
f01057d4:	83 c4 10             	add    $0x10,%esp
}
f01057d7:	90                   	nop
f01057d8:	c9                   	leave  
f01057d9:	c3                   	ret    

f01057da <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01057da:	55                   	push   %ebp
f01057db:	89 e5                	mov    %esp,%ebp
f01057dd:	83 ec 48             	sub    $0x48,%esp
	void *vaddr = seg->virtual_address;
f01057e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01057e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01057e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01057ec:	8b 40 08             	mov    0x8(%eax),%eax
f01057ef:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01057f2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01057f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01057fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01057ff:	01 c2                	add    %eax,%edx
f0105801:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105804:	01 d0                	add    %edx,%eax
f0105806:	48                   	dec    %eax
f0105807:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010580a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010580d:	ba 00 00 00 00       	mov    $0x0,%edx
f0105812:	f7 75 dc             	divl   -0x24(%ebp)
f0105815:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105818:	29 d0                	sub    %edx,%eax
f010581a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010581d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105820:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0105823:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105826:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010582b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010582e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f0105835:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010583c:	8b 45 10             	mov    0x10(%ebp),%eax
f010583f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0105845:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010584c:	0f 85 67 01 00 00    	jne    f01059b9 <program_segment_alloc_map_copy_workingset+0x1df>
f0105852:	8b 45 08             	mov    0x8(%ebp),%eax
f0105855:	05 f4 02 00 00       	add    $0x2f4,%eax
f010585a:	83 ec 08             	sub    $0x8,%esp
f010585d:	68 c8 a2 11 f0       	push   $0xf011a2c8
f0105862:	50                   	push   %eax
f0105863:	e8 5e 20 01 00       	call   f01178c6 <strcmp>
f0105868:	83 c4 10             	add    $0x10,%esp
f010586b:	85 c0                	test   %eax,%eax
f010586d:	0f 84 46 01 00 00    	je     f01059b9 <program_segment_alloc_map_copy_workingset+0x1df>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0105873:	8b 45 14             	mov    0x14(%ebp),%eax
f0105876:	83 f8 06             	cmp    $0x6,%eax
f0105879:	76 05                	jbe    f0105880 <program_segment_alloc_map_copy_workingset+0xa6>
f010587b:	b8 06 00 00 00       	mov    $0x6,%eax
f0105880:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105883:	e9 31 01 00 00       	jmp    f01059b9 <program_segment_alloc_map_copy_workingset+0x1df>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0105888:	83 ec 0c             	sub    $0xc,%esp
f010588b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010588e:	50                   	push   %eax
f010588f:	e8 02 e1 ff ff       	call   f0103996 <allocate_frame>
f0105894:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f0105897:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010589a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010589d:	8b 45 08             	mov    0x8(%ebp),%eax
f01058a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01058a3:	6a 06                	push   $0x6
f01058a5:	51                   	push   %ecx
f01058a6:	52                   	push   %edx
f01058a7:	50                   	push   %eax
f01058a8:	e8 13 e6 ff ff       	call   f0103ec0 <loadtime_map_frame>
f01058ad:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01058b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01058b3:	8b 48 78             	mov    0x78(%eax),%ecx
f01058b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01058b9:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058bf:	89 d0                	mov    %edx,%eax
f01058c1:	01 c0                	add    %eax,%eax
f01058c3:	01 d0                	add    %edx,%eax
f01058c5:	c1 e0 02             	shl    $0x2,%eax
f01058c8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01058cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ce:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01058d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d3:	8b 48 78             	mov    0x78(%eax),%ecx
f01058d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d9:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 02             	shl    $0x2,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f01058ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01058f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01058f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01058f7:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 02             	shl    $0x2,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		e->page_last_WS_index ++;
f010590f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105912:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0105918:	8d 50 01             	lea    0x1(%eax),%edx
f010591b:	8b 45 08             	mov    0x8(%ebp),%eax
f010591e:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0105924:	8b 45 08             	mov    0x8(%ebp),%eax
f0105927:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010592d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105930:	8b 4a 74             	mov    0x74(%edx),%ecx
f0105933:	ba 00 00 00 00       	mov    $0x0,%edx
f0105938:	f7 f1                	div    %ecx
f010593a:	8b 45 08             	mov    0x8(%ebp),%eax
f010593d:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0105943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105946:	c1 e8 16             	shr    $0x16,%eax
f0105949:	89 c2                	mov    %eax,%edx
f010594b:	8b 45 18             	mov    0x18(%ebp),%eax
f010594e:	8b 00                	mov    (%eax),%eax
f0105950:	39 c2                	cmp    %eax,%edx
f0105952:	74 4e                	je     f01059a2 <program_segment_alloc_map_copy_workingset+0x1c8>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f0105954:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105957:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010595a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010595d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0105962:	83 ec 08             	sub    $0x8,%esp
f0105965:	50                   	push   %eax
f0105966:	ff 75 08             	pushl  0x8(%ebp)
f0105969:	e8 6a f1 ff ff       	call   f0104ad8 <addTableToTableWorkingSet>
f010596e:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f0105971:	8b 45 08             	mov    0x8(%ebp),%eax
f0105974:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f010597a:	85 c0                	test   %eax,%eax
f010597c:	75 17                	jne    f0105995 <program_segment_alloc_map_copy_workingset+0x1bb>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010597e:	83 ec 04             	sub    $0x4,%esp
f0105981:	68 08 a9 11 f0       	push   $0xf011a908
f0105986:	68 8b 01 00 00       	push   $0x18b
f010598b:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105990:	e8 e1 a7 ff ff       	call   f0100176 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0105995:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105998:	c1 e8 16             	shr    $0x16,%eax
f010599b:	89 c2                	mov    %eax,%edx
f010599d:	8b 45 18             	mov    0x18(%ebp),%eax
f01059a0:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f01059a2:	8b 45 10             	mov    0x10(%ebp),%eax
f01059a5:	8b 00                	mov    (%eax),%eax
f01059a7:	8d 50 01             	lea    0x1(%eax),%edx
f01059aa:	8b 45 10             	mov    0x10(%ebp),%eax
f01059ad:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01059af:	ff 45 f0             	incl   -0x10(%ebp)
f01059b2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01059b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059bc:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01059bf:	73 0c                	jae    f01059cd <program_segment_alloc_map_copy_workingset+0x1f3>
f01059c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01059c4:	3b 45 14             	cmp    0x14(%ebp),%eax
f01059c7:	0f 82 bb fe ff ff    	jb     f0105888 <program_segment_alloc_map_copy_workingset+0xae>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f01059cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01059d0:	8b 00                	mov    (%eax),%eax
f01059d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f01059d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01059d8:	8b 40 0c             	mov    0xc(%eax),%eax
f01059db:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059de:	eb 10                	jmp    f01059f0 <program_segment_alloc_map_copy_workingset+0x216>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f01059e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059e3:	8a 10                	mov    (%eax),%dl
f01059e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059e8:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01059ea:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01059ed:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01059f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059f3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01059f6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01059f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01059fe:	89 c2                	mov    %eax,%edx
f0105a00:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a03:	8b 00                	mov    (%eax),%eax
f0105a05:	c1 e0 0c             	shl    $0xc,%eax
f0105a08:	01 c2                	add    %eax,%edx
f0105a0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a0d:	39 c2                	cmp    %eax,%edx
f0105a0f:	76 1d                	jbe    f0105a2e <program_segment_alloc_map_copy_workingset+0x254>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0105a11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105a14:	8b 50 04             	mov    0x4(%eax),%edx
f0105a17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1a:	01 c2                	add    %eax,%edx
f0105a1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105a1f:	39 c2                	cmp    %eax,%edx
f0105a21:	77 bd                	ja     f01059e0 <program_segment_alloc_map_copy_workingset+0x206>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105a23:	eb 09                	jmp    f0105a2e <program_segment_alloc_map_copy_workingset+0x254>
	{
		*dst_ptr = 0;
f0105a25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a28:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0105a2b:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105a2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a31:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0105a34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105a37:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105a3c:	89 c2                	mov    %eax,%edx
f0105a3e:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a41:	8b 00                	mov    (%eax),%eax
f0105a43:	c1 e0 0c             	shl    $0xc,%eax
f0105a46:	01 c2                	add    %eax,%edx
f0105a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a4b:	39 c2                	cmp    %eax,%edx
f0105a4d:	77 d6                	ja     f0105a25 <program_segment_alloc_map_copy_workingset+0x24b>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0105a4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105a54:	c9                   	leave  
f0105a55:	c3                   	ret    

f0105a56 <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f0105a56:	55                   	push   %ebp
f0105a57:	89 e5                	mov    %esp,%ebp
f0105a59:	57                   	push   %edi
f0105a5a:	56                   	push   %esi
f0105a5b:	53                   	push   %ebx
f0105a5c:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105a62:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	ff 75 08             	pushl  0x8(%ebp)
f0105a6f:	e8 ac 0c 00 00       	call   f0106720 <get_user_program_info>
f0105a74:	83 c4 10             	add    $0x10,%esp
f0105a77:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105a7a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0105a7e:	75 0a                	jne    f0105a8a <env_create+0x34>
f0105a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a85:	e9 5d 06 00 00       	jmp    f01060e7 <env_create+0x691>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105a8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105a8d:	8b 40 08             	mov    0x8(%eax),%eax
f0105a90:	89 45 bc             	mov    %eax,-0x44(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105a93:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%ebp)
f0105a9a:	00 00 00 
	if(allocate_environment(&e) < 0)
f0105a9d:	83 ec 0c             	sub    $0xc,%esp
f0105aa0:	8d 85 50 ff ff ff    	lea    -0xb0(%ebp),%eax
f0105aa6:	50                   	push   %eax
f0105aa7:	e8 74 f9 ff ff       	call   f0105420 <allocate_environment>
f0105aac:	83 c4 10             	add    $0x10,%esp
f0105aaf:	85 c0                	test   %eax,%eax
f0105ab1:	79 0a                	jns    f0105abd <env_create+0x67>
	{
		return 0;
f0105ab3:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ab8:	e9 2a 06 00 00       	jmp    f01060e7 <env_create+0x691>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0105abd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105ac0:	8b 00                	mov    (%eax),%eax
f0105ac2:	83 ec 0c             	sub    $0xc,%esp
f0105ac5:	50                   	push   %eax
f0105ac6:	e8 ef 1c 01 00       	call   f01177ba <strlen>
f0105acb:	83 c4 10             	add    $0x10,%esp
f0105ace:	83 f8 3f             	cmp    $0x3f,%eax
f0105ad1:	7f 20                	jg     f0105af3 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0105ad3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105ad6:	8b 00                	mov    (%eax),%eax
f0105ad8:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105ade:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105ae4:	83 ec 08             	sub    $0x8,%esp
f0105ae7:	50                   	push   %eax
f0105ae8:	52                   	push   %edx
f0105ae9:	e8 1b 1d 01 00       	call   f0117809 <strcpy>
f0105aee:	83 c4 10             	add    $0x10,%esp
f0105af1:	eb 20                	jmp    f0105b13 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0105af3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105af6:	8b 00                	mov    (%eax),%eax
f0105af8:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105afe:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105b04:	83 ec 04             	sub    $0x4,%esp
f0105b07:	6a 3f                	push   $0x3f
f0105b09:	50                   	push   %eax
f0105b0a:	52                   	push   %edx
f0105b0b:	e8 27 1d 01 00       	call   f0117837 <strncpy>
f0105b10:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
	if(USE_KHEAP)
	{
		ptr_user_page_directory = create_user_directory();
f0105b13:	e8 ce f9 ff ff       	call   f01054e6 <create_user_directory>
f0105b18:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0105b1b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105b1e:	83 ec 0c             	sub    $0xc,%esp
f0105b21:	50                   	push   %eax
f0105b22:	e8 e0 69 00 00       	call   f010c507 <kheap_physical_address>
f0105b27:	83 c4 10             	add    $0x10,%esp
f0105b2a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105b2d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105b36:	89 50 74             	mov    %edx,0x74(%eax)


	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105b39:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b3f:	83 ec 04             	sub    $0x4,%esp
f0105b42:	ff 75 b0             	pushl  -0x50(%ebp)
f0105b45:	ff 75 b4             	pushl  -0x4c(%ebp)
f0105b48:	50                   	push   %eax
f0105b49:	e8 bd fa ff ff       	call   f010560b <initialize_environment>
f0105b4e:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105b51:	0f 20 d8             	mov    %cr3,%eax
f0105b54:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	return val;
f0105b57:	8b 45 a4             	mov    -0x5c(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105b5a:	89 45 a8             	mov    %eax,-0x58(%ebp)
	lcr3(e->env_cr3) ;
f0105b5d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b63:	8b 40 60             	mov    0x60(%eax),%eax
f0105b66:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105b6c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0105b72:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105b75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105b7c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105b83:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105b89:	8b 40 74             	mov    0x74(%eax),%eax
f0105b8c:	48                   	dec    %eax
f0105b8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105b90:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%ebp)
f0105b97:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105b9a:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0105ba0:	83 ec 08             	sub    $0x8,%esp
f0105ba3:	ff 75 bc             	pushl  -0x44(%ebp)
f0105ba6:	50                   	push   %eax
f0105ba7:	e8 5b 0a 00 00       	call   f0106607 <PROGRAM_SEGMENT_FIRST>
f0105bac:	83 c4 0c             	add    $0xc,%esp
f0105baf:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105bb5:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0105bbb:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105bc0:	89 c7                	mov    %eax,%edi
f0105bc2:	89 d6                	mov    %edx,%esi
f0105bc4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105bc6:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105bcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105bcf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bd2:	8b 40 10             	mov    0x10(%eax),%eax
f0105bd5:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105bd8:	75 07                	jne    f0105be1 <env_create+0x18b>
f0105bda:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105be1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105be7:	e9 0f 03 00 00       	jmp    f0105efb <env_create+0x4a5>
	{
		segment_counter++;
f0105bec:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105bef:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0105bf6:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105bf9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f0105c08:	52                   	push   %edx
f0105c09:	ff 75 dc             	pushl  -0x24(%ebp)
f0105c0c:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0105c12:	52                   	push   %edx
f0105c13:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105c16:	50                   	push   %eax
f0105c17:	e8 be fb ff ff       	call   f01057da <program_segment_alloc_map_copy_workingset>
f0105c1c:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105c1f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0105c25:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105c28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105c2b:	8b 00                	mov    (%eax),%eax
f0105c2d:	89 45 a0             	mov    %eax,-0x60(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105c30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105c33:	8b 40 0c             	mov    0xc(%eax),%eax
f0105c36:	89 45 9c             	mov    %eax,-0x64(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105c39:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c3c:	89 45 98             	mov    %eax,-0x68(%ebp)
f0105c3f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0105c42:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105c47:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105c4a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0105c51:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0105c54:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105c57:	01 d0                	add    %edx,%eax
f0105c59:	48                   	dec    %eax
f0105c5a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105c5d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0105c65:	f7 75 90             	divl   -0x70(%ebp)
f0105c68:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105c6b:	29 d0                	sub    %edx,%eax
f0105c6d:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105c70:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105c73:	2b 45 94             	sub    -0x6c(%ebp),%eax
f0105c76:	89 45 84             	mov    %eax,-0x7c(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105c79:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0105c7e:	83 ec 04             	sub    $0x4,%esp
f0105c81:	68 00 10 00 00       	push   $0x1000
f0105c86:	6a 00                	push   $0x0
f0105c88:	50                   	push   %eax
f0105c89:	e8 1a 1d 01 00       	call   f01179a8 <memset>
f0105c8e:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105c91:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0105c94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105c97:	8b 15 34 58 55 f0    	mov    0xf0555834,%edx
f0105c9d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105ca0:	01 d0                	add    %edx,%eax
f0105ca2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105ca5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105ca8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105cab:	eb 13                	jmp    f0105cc0 <env_create+0x26a>
		{
			*dst_ptr = *src_ptr ;
f0105cad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105cb0:	8a 10                	mov    (%eax),%dl
f0105cb2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105cb5:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105cb7:	ff 45 cc             	incl   -0x34(%ebp)
f0105cba:	ff 45 d4             	incl   -0x2c(%ebp)
f0105cbd:	ff 45 d0             	incl   -0x30(%ebp)
f0105cc0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105cc3:	3b 45 88             	cmp    -0x78(%ebp),%eax
f0105cc6:	72 e5                	jb     f0105cad <env_create+0x257>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105cc8:	8b 15 34 58 55 f0    	mov    0xf0555834,%edx
f0105cce:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105cd4:	83 ec 04             	sub    $0x4,%esp
f0105cd7:	52                   	push   %edx
f0105cd8:	ff 75 94             	pushl  -0x6c(%ebp)
f0105cdb:	50                   	push   %eax
f0105cdc:	e8 88 5c 00 00       	call   f010b969 <pf_add_env_page>
f0105ce1:	83 c4 10             	add    $0x10,%esp
f0105ce4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105ce7:	75 17                	jne    f0105d00 <env_create+0x2aa>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105ce9:	83 ec 04             	sub    $0x4,%esp
f0105cec:	68 ac a9 11 f0       	push   $0xf011a9ac
f0105cf1:	68 2d 02 00 00       	push   $0x22d
f0105cf6:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105cfb:	e8 76 a4 ff ff       	call   f0100176 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105d00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d03:	8b 50 04             	mov    0x4(%eax),%edx
f0105d06:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105d09:	01 d0                	add    %edx,%eax
f0105d0b:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105d0e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105d11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105d16:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105d1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d1f:	8b 50 04             	mov    0x4(%eax),%edx
f0105d22:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105d25:	01 d0                	add    %edx,%eax
f0105d27:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105d2d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0105d30:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105d33:	eb 43                	jmp    f0105d78 <env_create+0x322>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0105d35:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105d38:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105d3e:	83 ec 04             	sub    $0x4,%esp
f0105d41:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105d44:	52                   	push   %edx
f0105d45:	50                   	push   %eax
f0105d46:	e8 1e 5c 00 00       	call   f010b969 <pf_add_env_page>
f0105d4b:	83 c4 10             	add    $0x10,%esp
f0105d4e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105d51:	75 17                	jne    f0105d6a <env_create+0x314>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105d53:	83 ec 04             	sub    $0x4,%esp
f0105d56:	68 ac a9 11 f0       	push   $0xf011a9ac
f0105d5b:	68 3a 02 00 00       	push   $0x23a
f0105d60:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105d65:	e8 0c a4 ff ff       	call   f0100176 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105d6a:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105d71:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0105d78:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d7b:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0105d81:	72 b2                	jb     f0105d35 <env_create+0x2df>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0105d83:	a1 34 58 55 f0       	mov    0xf0555834,%eax
f0105d88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0105d8b:	83 ec 04             	sub    $0x4,%esp
f0105d8e:	68 00 10 00 00       	push   $0x1000
f0105d93:	6a 00                	push   $0x0
f0105d95:	ff 75 d0             	pushl  -0x30(%ebp)
f0105d98:	e8 0b 1c 01 00       	call   f01179a8 <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105da0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0105da6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105da9:	eb 13                	jmp    f0105dbe <env_create+0x368>
		{
			*dst_ptr = *src_ptr;
f0105dab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105dae:	8a 10                	mov    (%eax),%dl
f0105db0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105db3:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105db5:	ff 45 cc             	incl   -0x34(%ebp)
f0105db8:	ff 45 d4             	incl   -0x2c(%ebp)
f0105dbb:	ff 45 d0             	incl   -0x30(%ebp)
f0105dbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105dc1:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0105dc7:	72 e2                	jb     f0105dab <env_create+0x355>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105dc9:	8b 15 34 58 55 f0    	mov    0xf0555834,%edx
f0105dcf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105dd5:	83 ec 04             	sub    $0x4,%esp
f0105dd8:	52                   	push   %edx
f0105dd9:	ff b5 7c ff ff ff    	pushl  -0x84(%ebp)
f0105ddf:	50                   	push   %eax
f0105de0:	e8 84 5b 00 00       	call   f010b969 <pf_add_env_page>
f0105de5:	83 c4 10             	add    $0x10,%esp
f0105de8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105deb:	75 17                	jne    f0105e04 <env_create+0x3ae>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	68 ac a9 11 f0       	push   $0xf011a9ac
f0105df5:	68 49 02 00 00       	push   $0x249
f0105dfa:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105dff:	e8 72 a3 ff ff       	call   f0100176 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0105e04:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0105e0b:	10 00 00 
f0105e0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e11:	8b 50 04             	mov    0x4(%eax),%edx
f0105e14:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105e17:	01 c2                	add    %eax,%edx
f0105e19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0105e1f:	01 d0                	add    %edx,%eax
f0105e21:	48                   	dec    %eax
f0105e22:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0105e28:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0105e33:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0105e39:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105e3f:	29 d0                	sub    %edx,%eax
f0105e41:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0105e44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e47:	8b 50 08             	mov    0x8(%eax),%edx
f0105e4a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105e4d:	01 d0                	add    %edx,%eax
f0105e4f:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0105e52:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e58:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0105e5f:	eb 41                	jmp    f0105ea2 <env_create+0x44c>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0105e61:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e67:	83 ec 04             	sub    $0x4,%esp
f0105e6a:	6a 01                	push   $0x1
f0105e6c:	ff 75 c8             	pushl  -0x38(%ebp)
f0105e6f:	50                   	push   %eax
f0105e70:	e8 1b 5a 00 00       	call   f010b890 <pf_add_empty_env_page>
f0105e75:	83 c4 10             	add    $0x10,%esp
f0105e78:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105e7b:	75 17                	jne    f0105e94 <env_create+0x43e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105e7d:	83 ec 04             	sub    $0x4,%esp
f0105e80:	68 ac a9 11 f0       	push   $0xf011a9ac
f0105e85:	68 56 02 00 00       	push   $0x256
f0105e8a:	68 ef a8 11 f0       	push   $0xf011a8ef
f0105e8f:	e8 e2 a2 ff ff       	call   f0100176 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e94:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105e9b:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0105ea2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0105ea9:	10 00 00 
f0105eac:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
f0105eb2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0105eb8:	01 d0                	add    %edx,%eax
f0105eba:	48                   	dec    %eax
f0105ebb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0105ec1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105ec7:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ecc:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0105ed2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105ed8:	29 d0                	sub    %edx,%eax
f0105eda:	89 c2                	mov    %eax,%edx
f0105edc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105edf:	39 c2                	cmp    %eax,%edx
f0105ee1:	0f 87 7a ff ff ff    	ja     f0105e61 <env_create+0x40b>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	ff 75 bc             	pushl  -0x44(%ebp)
f0105eed:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ef0:	e8 07 06 00 00       	call   f01064fc <PROGRAM_SEGMENT_NEXT>
f0105ef5:	83 c4 10             	add    $0x10,%esp
f0105ef8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105efb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0105eff:	0f 85 e7 fc ff ff    	jne    f0105bec <env_create+0x196>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0105f05:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0105f0c:	e9 9e 00 00 00       	jmp    f0105faf <env_create+0x559>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0105f11:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f17:	8b 48 78             	mov    0x78(%eax),%ecx
f0105f1a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105f1d:	89 d0                	mov    %edx,%eax
f0105f1f:	01 c0                	add    %eax,%eax
f0105f21:	01 d0                	add    %edx,%eax
f0105f23:	c1 e0 02             	shl    $0x2,%eax
f0105f26:	01 c8                	add    %ecx,%eax
f0105f28:	8a 40 04             	mov    0x4(%eax),%al
f0105f2b:	84 c0                	test   %al,%al
f0105f2d:	75 7d                	jne    f0105fac <env_create+0x556>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0105f2f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f35:	8b 48 78             	mov    0x78(%eax),%ecx
f0105f38:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105f3b:	89 d0                	mov    %edx,%eax
f0105f3d:	01 c0                	add    %eax,%eax
f0105f3f:	01 d0                	add    %edx,%eax
f0105f41:	c1 e0 02             	shl    $0x2,%eax
f0105f44:	01 c8                	add    %ecx,%eax
f0105f46:	8b 00                	mov    (%eax),%eax
f0105f48:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f0105f4e:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f54:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105f5a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105f5d:	83 ec 04             	sub    $0x4,%esp
f0105f60:	8d 8d 2c ff ff ff    	lea    -0xd4(%ebp),%ecx
f0105f66:	51                   	push   %ecx
f0105f67:	52                   	push   %edx
f0105f68:	50                   	push   %eax
f0105f69:	e8 a7 db ff ff       	call   f0103b15 <get_page_table>
f0105f6e:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0105f71:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0105f77:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105f7d:	c1 ea 0c             	shr    $0xc,%edx
f0105f80:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105f86:	c1 e2 02             	shl    $0x2,%edx
f0105f89:	01 d0                	add    %edx,%eax
f0105f8b:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0105f91:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
f0105f97:	c1 e9 0c             	shr    $0xc,%ecx
f0105f9a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0105fa0:	c1 e1 02             	shl    $0x2,%ecx
f0105fa3:	01 ca                	add    %ecx,%edx
f0105fa5:	8b 12                	mov    (%edx),%edx
f0105fa7:	83 e2 bf             	and    $0xffffffbf,%edx
f0105faa:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0105fac:	ff 45 c4             	incl   -0x3c(%ebp)
f0105faf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105fb5:	8b 50 74             	mov    0x74(%eax),%edx
f0105fb8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105fbb:	39 c2                	cmp    %eax,%edx
f0105fbd:	0f 87 4e ff ff ff    	ja     f0105f11 <env_create+0x4bb>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0105fc3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105fc6:	8b 50 08             	mov    0x8(%eax),%edx
f0105fc9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105fcf:	83 ec 08             	sub    $0x8,%esp
f0105fd2:	52                   	push   %edx
f0105fd3:	50                   	push   %eax
f0105fd4:	e8 43 08 00 00       	call   f010681c <set_environment_entry_point>
f0105fd9:	83 c4 10             	add    $0x10,%esp
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set


	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0105fdc:	c7 85 5c ff ff ff 00 	movl   $0xeebfd000,-0xa4(%ebp)
f0105fe3:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0105fe6:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0105fed:	e9 d4 00 00 00       	jmp    f01060c6 <env_create+0x670>
	{
		struct Frame_Info *pp = NULL;
f0105ff2:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0105ff9:	00 00 00 
		allocate_frame(&pp);
f0105ffc:	83 ec 0c             	sub    $0xc,%esp
f0105fff:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0106005:	50                   	push   %eax
f0106006:	e8 8b d9 ff ff       	call   f0103996 <allocate_frame>
f010600b:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f010600e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0106011:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0106017:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010601d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106020:	6a 06                	push   $0x6
f0106022:	51                   	push   %ecx
f0106023:	52                   	push   %edx
f0106024:	50                   	push   %eax
f0106025:	e8 96 de ff ff       	call   f0103ec0 <loadtime_map_frame>
f010602a:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010602d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106030:	83 ec 04             	sub    $0x4,%esp
f0106033:	68 00 10 00 00       	push   $0x1000
f0106038:	6a 00                	push   $0x0
f010603a:	50                   	push   %eax
f010603b:	e8 68 19 01 00       	call   f01179a8 <memset>
f0106040:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0106043:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106049:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f010604f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106055:	83 ec 04             	sub    $0x4,%esp
f0106058:	ff 75 c0             	pushl  -0x40(%ebp)
f010605b:	52                   	push   %edx
f010605c:	50                   	push   %eax
f010605d:	e8 6f e3 ff ff       	call   f01043d1 <env_page_ws_set_entry>
f0106062:	83 c4 10             	add    $0x10,%esp
			e->page_last_WS_index ++;
f0106065:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010606b:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106071:	42                   	inc    %edx
f0106072:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0106078:	8b 8d 50 ff ff ff    	mov    -0xb0(%ebp),%ecx
f010607e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106084:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010608a:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0106090:	8b 5a 74             	mov    0x74(%edx),%ebx
f0106093:	ba 00 00 00 00       	mov    $0x0,%edx
f0106098:	f7 f3                	div    %ebx
f010609a:	89 d0                	mov    %edx,%eax
f010609c:	89 81 d4 02 00 00    	mov    %eax,0x2d4(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f01060a2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01060a8:	83 ec 04             	sub    $0x4,%esp
f01060ab:	6a 01                	push   $0x1
f01060ad:	ff 75 c0             	pushl  -0x40(%ebp)
f01060b0:	50                   	push   %eax
f01060b1:	e8 da 57 00 00       	call   f010b890 <pf_add_empty_env_page>
f01060b6:	83 c4 10             	add    $0x10,%esp
f01060b9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01060bf:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01060c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01060c9:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01060cf:	0f 83 1d ff ff ff    	jae    f0105ff2 <env_create+0x59c>
f01060d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01060d8:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01060db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01060de:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01060e1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
}
f01060e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01060ea:	5b                   	pop    %ebx
f01060eb:	5e                   	pop    %esi
f01060ec:	5f                   	pop    %edi
f01060ed:	5d                   	pop    %ebp
f01060ee:	c3                   	ret    

f01060ef <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01060ef:	55                   	push   %ebp
f01060f0:	89 e5                	mov    %esp,%ebp
f01060f2:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01060f5:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01060fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01060fd:	74 25                	je     f0106124 <env_run+0x35>
	{
		curenv = e ;
f01060ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0106102:	a3 b0 6a 53 f0       	mov    %eax,0xf0536ab0
		curenv->env_runs++ ;
f0106107:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010610c:	8b 50 58             	mov    0x58(%eax),%edx
f010610f:	42                   	inc    %edx
f0106110:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0106113:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0106118:	8b 40 60             	mov    0x60(%eax),%eax
f010611b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010611e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106121:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0106124:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0106129:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0106130:	e8 32 09 00 00       	call   f0106a67 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0106135:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010613a:	83 ec 0c             	sub    $0xc,%esp
f010613d:	50                   	push   %eax
f010613e:	e8 ff 07 00 00       	call   f0106942 <env_pop_tf>

f0106143 <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f0106143:	55                   	push   %ebp
f0106144:	89 e5                	mov    %esp,%ebp
f0106146:	83 ec 08             	sub    $0x8,%esp
	panic("This function is not required\n");
f0106149:	83 ec 04             	sub    $0x4,%esp
f010614c:	68 f4 a9 11 f0       	push   $0xf011a9f4
f0106151:	68 bc 02 00 00       	push   $0x2bc
f0106156:	68 ef a8 11 f0       	push   $0xf011a8ef
f010615b:	e8 16 a0 ff ff       	call   f0100176 <_panic>

f0106160 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f0106160:	55                   	push   %ebp
f0106161:	89 e5                	mov    %esp,%ebp
f0106163:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f0106166:	e8 65 22 00 00       	call   f01083d0 <isBufferingEnabled>
f010616b:	85 c0                	test   %eax,%eax
f010616d:	74 10                	je     f010617f <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f010616f:	83 ec 0c             	sub    $0xc,%esp
f0106172:	ff 75 08             	pushl  0x8(%ebp)
f0106175:	e8 33 00 00 00       	call   f01061ad <__env_free_with_buffering>
f010617a:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f010617d:	eb 0e                	jmp    f010618d <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f010617f:	83 ec 0c             	sub    $0xc,%esp
f0106182:	ff 75 08             	pushl  0x8(%ebp)
f0106185:	e8 06 00 00 00       	call   f0106190 <env_free>
f010618a:	83 c4 10             	add    $0x10,%esp
	}
}
f010618d:	90                   	nop
f010618e:	c9                   	leave  
f010618f:	c3                   	ret    

f0106190 <env_free>:
void env_free(struct Env *e) {
f0106190:	55                   	push   %ebp
f0106191:	89 e5                	mov    %esp,%ebp
f0106193:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS 2] Exit [env_free()]

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("env_free() is not implemented yet...!!");
f0106196:	83 ec 04             	sub    $0x4,%esp
f0106199:	68 14 aa 11 f0       	push   $0xf011aa14
f010619e:	68 d4 02 00 00       	push   $0x2d4
f01061a3:	68 ef a8 11 f0       	push   $0xf011a8ef
f01061a8:	e8 c9 9f ff ff       	call   f0100176 <_panic>

f01061ad <__env_free_with_buffering>:
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
}


void __env_free_with_buffering(struct Env *e)
{
f01061ad:	55                   	push   %ebp
f01061ae:	89 e5                	mov    %esp,%ebp
f01061b0:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f01061b3:	83 ec 0c             	sub    $0xc,%esp
f01061b6:	ff 75 08             	pushl  0x8(%ebp)
f01061b9:	e8 85 ff ff ff       	call   f0106143 <__remove_pws_user_pages>
f01061be:	83 c4 10             	add    $0x10,%esp

}
f01061c1:	90                   	nop
f01061c2:	c9                   	leave  
f01061c3:	c3                   	ret    

f01061c4 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01061c4:	55                   	push   %ebp
f01061c5:	89 e5                	mov    %esp,%ebp
f01061c7:	53                   	push   %ebx
f01061c8:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01061cb:	c7 45 f8 f1 04 00 00 	movl   $0x4f1,-0x8(%ebp)
	for(; iEnv >= 0; iEnv--)
f01061d2:	e9 52 01 00 00       	jmp    f0106329 <env_init+0x165>
	{
		envs[iEnv].env_status = ENV_FREE;
f01061d7:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f01061dd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061e0:	89 d0                	mov    %edx,%eax
f01061e2:	c1 e0 02             	shl    $0x2,%eax
f01061e5:	01 d0                	add    %edx,%eax
f01061e7:	01 c0                	add    %eax,%eax
f01061e9:	01 d0                	add    %edx,%eax
f01061eb:	01 c0                	add    %eax,%eax
f01061ed:	01 d0                	add    %edx,%eax
f01061ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01061f6:	01 d0                	add    %edx,%eax
f01061f8:	c1 e0 02             	shl    $0x2,%eax
f01061fb:	01 c8                	add    %ecx,%eax
f01061fd:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0106204:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f010620a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010620d:	89 d0                	mov    %edx,%eax
f010620f:	c1 e0 02             	shl    $0x2,%eax
f0106212:	01 d0                	add    %edx,%eax
f0106214:	01 c0                	add    %eax,%eax
f0106216:	01 d0                	add    %edx,%eax
f0106218:	01 c0                	add    %eax,%eax
f010621a:	01 d0                	add    %edx,%eax
f010621c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106223:	01 d0                	add    %edx,%eax
f0106225:	c1 e0 02             	shl    $0x2,%eax
f0106228:	01 c8                	add    %ecx,%eax
f010622a:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0106231:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f0106237:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010623a:	89 d0                	mov    %edx,%eax
f010623c:	c1 e0 02             	shl    $0x2,%eax
f010623f:	01 d0                	add    %edx,%eax
f0106241:	01 c0                	add    %eax,%eax
f0106243:	01 d0                	add    %edx,%eax
f0106245:	01 c0                	add    %eax,%eax
f0106247:	01 d0                	add    %edx,%eax
f0106249:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106250:	01 d0                	add    %edx,%eax
f0106252:	c1 e0 02             	shl    $0x2,%eax
f0106255:	01 c8                	add    %ecx,%eax
f0106257:	8b 15 b4 6a 53 f0    	mov    0xf0536ab4,%edx
f010625d:	89 50 44             	mov    %edx,0x44(%eax)
f0106260:	8b 40 44             	mov    0x44(%eax),%eax
f0106263:	85 c0                	test   %eax,%eax
f0106265:	74 31                	je     f0106298 <env_init+0xd4>
f0106267:	8b 0d b4 6a 53 f0    	mov    0xf0536ab4,%ecx
f010626d:	8b 1d ac 6a 53 f0    	mov    0xf0536aac,%ebx
f0106273:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106276:	89 d0                	mov    %edx,%eax
f0106278:	c1 e0 02             	shl    $0x2,%eax
f010627b:	01 d0                	add    %edx,%eax
f010627d:	01 c0                	add    %eax,%eax
f010627f:	01 d0                	add    %edx,%eax
f0106281:	01 c0                	add    %eax,%eax
f0106283:	01 d0                	add    %edx,%eax
f0106285:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010628c:	01 d0                	add    %edx,%eax
f010628e:	c1 e0 02             	shl    $0x2,%eax
f0106291:	01 d8                	add    %ebx,%eax
f0106293:	89 41 48             	mov    %eax,0x48(%ecx)
f0106296:	eb 2b                	jmp    f01062c3 <env_init+0xff>
f0106298:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f010629e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062a1:	89 d0                	mov    %edx,%eax
f01062a3:	c1 e0 02             	shl    $0x2,%eax
f01062a6:	01 d0                	add    %edx,%eax
f01062a8:	01 c0                	add    %eax,%eax
f01062aa:	01 d0                	add    %edx,%eax
f01062ac:	01 c0                	add    %eax,%eax
f01062ae:	01 d0                	add    %edx,%eax
f01062b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062b7:	01 d0                	add    %edx,%eax
f01062b9:	c1 e0 02             	shl    $0x2,%eax
f01062bc:	01 c8                	add    %ecx,%eax
f01062be:	a3 b8 6a 53 f0       	mov    %eax,0xf0536ab8
f01062c3:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f01062c9:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062cc:	89 d0                	mov    %edx,%eax
f01062ce:	c1 e0 02             	shl    $0x2,%eax
f01062d1:	01 d0                	add    %edx,%eax
f01062d3:	01 c0                	add    %eax,%eax
f01062d5:	01 d0                	add    %edx,%eax
f01062d7:	01 c0                	add    %eax,%eax
f01062d9:	01 d0                	add    %edx,%eax
f01062db:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01062e2:	01 d0                	add    %edx,%eax
f01062e4:	c1 e0 02             	shl    $0x2,%eax
f01062e7:	01 c8                	add    %ecx,%eax
f01062e9:	a3 b4 6a 53 f0       	mov    %eax,0xf0536ab4
f01062ee:	8b 0d ac 6a 53 f0    	mov    0xf0536aac,%ecx
f01062f4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062f7:	89 d0                	mov    %edx,%eax
f01062f9:	c1 e0 02             	shl    $0x2,%eax
f01062fc:	01 d0                	add    %edx,%eax
f01062fe:	01 c0                	add    %eax,%eax
f0106300:	01 d0                	add    %edx,%eax
f0106302:	01 c0                	add    %eax,%eax
f0106304:	01 d0                	add    %edx,%eax
f0106306:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010630d:	01 d0                	add    %edx,%eax
f010630f:	c1 e0 02             	shl    $0x2,%eax
f0106312:	01 c8                	add    %ecx,%eax
f0106314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010631b:	a1 c0 6a 53 f0       	mov    0xf0536ac0,%eax
f0106320:	40                   	inc    %eax
f0106321:	a3 c0 6a 53 f0       	mov    %eax,0xf0536ac0
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0106326:	ff 4d f8             	decl   -0x8(%ebp)
f0106329:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010632d:	0f 89 a4 fe ff ff    	jns    f01061d7 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0106333:	90                   	nop
f0106334:	83 c4 10             	add    $0x10,%esp
f0106337:	5b                   	pop    %ebx
f0106338:	5d                   	pop    %ebp
f0106339:	c3                   	ret    

f010633a <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f010633a:	55                   	push   %ebp
f010633b:	89 e5                	mov    %esp,%ebp
f010633d:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0106340:	8b 45 08             	mov    0x8(%ebp),%eax
f0106343:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106346:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010634c:	8b 45 08             	mov    0x8(%ebp),%eax
f010634f:	8b 40 60             	mov    0x60(%eax),%eax
f0106352:	83 c8 03             	or     $0x3,%eax
f0106355:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0106357:	8b 45 08             	mov    0x8(%ebp),%eax
f010635a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010635d:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106363:	8b 45 08             	mov    0x8(%ebp),%eax
f0106366:	8b 40 60             	mov    0x60(%eax),%eax
f0106369:	83 c8 05             	or     $0x5,%eax
f010636c:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010636e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106371:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f0106378:	8b 45 08             	mov    0x8(%ebp),%eax
f010637b:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0106382:	8b 45 08             	mov    0x8(%ebp),%eax
f0106385:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010638c:	8b 45 08             	mov    0x8(%ebp),%eax
f010638f:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f0106396:	8b 45 08             	mov    0x8(%ebp),%eax
f0106399:	8b 40 4c             	mov    0x4c(%eax),%eax
f010639c:	05 00 10 00 00       	add    $0x1000,%eax
f01063a1:	25 0e fb ff ff       	and    $0xfffffb0e,%eax
f01063a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f01063a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01063ad:	7f 07                	jg     f01063b6 <complete_environment_initialization+0x7c>
		generation = 1 << ENVGENSHIFT;
f01063af:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f01063b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b9:	8b 15 ac 6a 53 f0    	mov    0xf0536aac,%edx
f01063bf:	29 d0                	sub    %edx,%eax
f01063c1:	c1 f8 02             	sar    $0x2,%eax
f01063c4:	89 c2                	mov    %eax,%edx
f01063c6:	89 d0                	mov    %edx,%eax
f01063c8:	01 c0                	add    %eax,%eax
f01063ca:	01 d0                	add    %edx,%eax
f01063cc:	c1 e0 09             	shl    $0x9,%eax
f01063cf:	29 d0                	sub    %edx,%eax
f01063d1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01063d8:	01 c8                	add    %ecx,%eax
f01063da:	c1 e0 03             	shl    $0x3,%eax
f01063dd:	01 d0                	add    %edx,%eax
f01063df:	89 c1                	mov    %eax,%ecx
f01063e1:	c1 e1 05             	shl    $0x5,%ecx
f01063e4:	01 c8                	add    %ecx,%eax
f01063e6:	01 c0                	add    %eax,%eax
f01063e8:	01 d0                	add    %edx,%eax
f01063ea:	01 c0                	add    %eax,%eax
f01063ec:	01 d0                	add    %edx,%eax
f01063ee:	c1 e0 02             	shl    $0x2,%eax
f01063f1:	01 d0                	add    %edx,%eax
f01063f3:	c1 e0 04             	shl    $0x4,%eax
f01063f6:	01 d0                	add    %edx,%eax
f01063f8:	f7 d8                	neg    %eax
f01063fa:	0b 45 f4             	or     -0xc(%ebp),%eax
f01063fd:	89 c2                	mov    %eax,%edx
f01063ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0106402:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f0106405:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010640a:	85 c0                	test   %eax,%eax
f010640c:	75 0c                	jne    f010641a <complete_environment_initialization+0xe0>
		e->env_parent_id = 0;//no parent;
f010640e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106411:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0106418:	eb 0e                	jmp    f0106428 <complete_environment_initialization+0xee>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010641a:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010641f:	8b 50 4c             	mov    0x4c(%eax),%edx
f0106422:	8b 45 08             	mov    0x8(%ebp),%eax
f0106425:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0106428:	8b 45 08             	mov    0x8(%ebp),%eax
f010642b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f0106432:	8b 45 08             	mov    0x8(%ebp),%eax
f0106435:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010643c:	8b 45 08             	mov    0x8(%ebp),%eax
f010643f:	83 ec 04             	sub    $0x4,%esp
f0106442:	6a 44                	push   $0x44
f0106444:	6a 00                	push   $0x0
f0106446:	50                   	push   %eax
f0106447:	e8 5c 15 01 00       	call   f01179a8 <memset>
f010644c:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010644f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106452:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0106458:	8b 45 08             	mov    0x8(%ebp),%eax
f010645b:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0106461:	8b 45 08             	mov    0x8(%ebp),%eax
f0106464:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010646a:	8b 45 08             	mov    0x8(%ebp),%eax
f010646d:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f0106474:	8b 45 08             	mov    0x8(%ebp),%eax
f0106477:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010647d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106480:	8b 40 38             	mov    0x38(%eax),%eax
f0106483:	80 cc 02             	or     $0x2,%ah
f0106486:	89 c2                	mov    %eax,%edx
f0106488:	8b 45 08             	mov    0x8(%ebp),%eax
f010648b:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010648e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106491:	8b 40 44             	mov    0x44(%eax),%eax
f0106494:	85 c0                	test   %eax,%eax
f0106496:	74 11                	je     f01064a9 <complete_environment_initialization+0x16f>
f0106498:	8b 45 08             	mov    0x8(%ebp),%eax
f010649b:	8b 40 44             	mov    0x44(%eax),%eax
f010649e:	8b 55 08             	mov    0x8(%ebp),%edx
f01064a1:	8b 52 48             	mov    0x48(%edx),%edx
f01064a4:	89 50 48             	mov    %edx,0x48(%eax)
f01064a7:	eb 0b                	jmp    f01064b4 <complete_environment_initialization+0x17a>
f01064a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064ac:	8b 40 48             	mov    0x48(%eax),%eax
f01064af:	a3 b8 6a 53 f0       	mov    %eax,0xf0536ab8
f01064b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01064b7:	8b 40 48             	mov    0x48(%eax),%eax
f01064ba:	85 c0                	test   %eax,%eax
f01064bc:	74 11                	je     f01064cf <complete_environment_initialization+0x195>
f01064be:	8b 45 08             	mov    0x8(%ebp),%eax
f01064c1:	8b 40 48             	mov    0x48(%eax),%eax
f01064c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01064c7:	8b 52 44             	mov    0x44(%edx),%edx
f01064ca:	89 50 44             	mov    %edx,0x44(%eax)
f01064cd:	eb 0b                	jmp    f01064da <complete_environment_initialization+0x1a0>
f01064cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d2:	8b 40 44             	mov    0x44(%eax),%eax
f01064d5:	a3 b4 6a 53 f0       	mov    %eax,0xf0536ab4
f01064da:	8b 45 08             	mov    0x8(%ebp),%eax
f01064dd:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01064e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01064e7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01064ee:	a1 c0 6a 53 f0       	mov    0xf0536ac0,%eax
f01064f3:	48                   	dec    %eax
f01064f4:	a3 c0 6a 53 f0       	mov    %eax,0xf0536ac0
	return ;
f01064f9:	90                   	nop
}
f01064fa:	c9                   	leave  
f01064fb:	c3                   	ret    

f01064fc <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f01064fc:	55                   	push   %ebp
f01064fd:	89 e5                	mov    %esp,%ebp
f01064ff:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f0106502:	8b 45 08             	mov    0x8(%ebp),%eax
f0106505:	8b 40 10             	mov    0x10(%eax),%eax
f0106508:	8d 48 01             	lea    0x1(%eax),%ecx
f010650b:	8b 55 08             	mov    0x8(%ebp),%edx
f010650e:	89 4a 10             	mov    %ecx,0x10(%edx)
f0106511:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010651a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010651d:	8b 00                	mov    (%eax),%eax
f010651f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106524:	74 17                	je     f010653d <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0106526:	83 ec 04             	sub    $0x4,%esp
f0106529:	68 3b aa 11 f0       	push   $0xf011aa3b
f010652e:	68 3f 03 00 00       	push   $0x33f
f0106533:	68 ef a8 11 f0       	push   $0xf011a8ef
f0106538:	e8 39 9c ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010653d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106540:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106543:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106546:	01 d0                	add    %edx,%eax
f0106548:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010654b:	eb 0f                	jmp    f010655c <PROGRAM_SEGMENT_NEXT+0x60>
f010654d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106550:	8b 40 10             	mov    0x10(%eax),%eax
f0106553:	8d 50 01             	lea    0x1(%eax),%edx
f0106556:	8b 45 08             	mov    0x8(%ebp),%eax
f0106559:	89 50 10             	mov    %edx,0x10(%eax)
f010655c:	8b 45 08             	mov    0x8(%ebp),%eax
f010655f:	8b 40 10             	mov    0x10(%eax),%eax
f0106562:	c1 e0 05             	shl    $0x5,%eax
f0106565:	89 c2                	mov    %eax,%edx
f0106567:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010656a:	01 d0                	add    %edx,%eax
f010656c:	8b 00                	mov    (%eax),%eax
f010656e:	83 f8 01             	cmp    $0x1,%eax
f0106571:	74 13                	je     f0106586 <PROGRAM_SEGMENT_NEXT+0x8a>
f0106573:	8b 45 08             	mov    0x8(%ebp),%eax
f0106576:	8b 50 10             	mov    0x10(%eax),%edx
f0106579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010657c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010657f:	0f b7 c0             	movzwl %ax,%eax
f0106582:	39 c2                	cmp    %eax,%edx
f0106584:	72 c7                	jb     f010654d <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f0106586:	8b 45 08             	mov    0x8(%ebp),%eax
f0106589:	8b 40 10             	mov    0x10(%eax),%eax
f010658c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010658f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106592:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106595:	0f b7 c0             	movzwl %ax,%eax
f0106598:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010659b:	7e 63                	jle    f0106600 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010659d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a0:	c1 e0 05             	shl    $0x5,%eax
f01065a3:	89 c2                	mov    %eax,%edx
f01065a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065a8:	01 d0                	add    %edx,%eax
f01065aa:	8b 50 04             	mov    0x4(%eax),%edx
f01065ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01065b0:	01 c2                	add    %eax,%edx
f01065b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01065b5:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f01065b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065ba:	c1 e0 05             	shl    $0x5,%eax
f01065bd:	89 c2                	mov    %eax,%edx
f01065bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065c2:	01 d0                	add    %edx,%eax
f01065c4:	8b 50 14             	mov    0x14(%eax),%edx
f01065c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01065ca:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f01065cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065d0:	c1 e0 05             	shl    $0x5,%eax
f01065d3:	89 c2                	mov    %eax,%edx
f01065d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065d8:	01 d0                	add    %edx,%eax
f01065da:	8b 50 10             	mov    0x10(%eax),%edx
f01065dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01065e0:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f01065e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065e6:	c1 e0 05             	shl    $0x5,%eax
f01065e9:	89 c2                	mov    %eax,%edx
f01065eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065ee:	01 d0                	add    %edx,%eax
f01065f0:	8b 40 08             	mov    0x8(%eax),%eax
f01065f3:	89 c2                	mov    %eax,%edx
f01065f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01065f8:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f01065fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01065fe:	eb 05                	jmp    f0106605 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f0106600:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106605:	c9                   	leave  
f0106606:	c3                   	ret    

f0106607 <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f0106607:	55                   	push   %ebp
f0106608:	89 e5                	mov    %esp,%ebp
f010660a:	57                   	push   %edi
f010660b:	56                   	push   %esi
f010660c:	53                   	push   %ebx
f010660d:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f0106610:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106617:	8b 45 0c             	mov    0xc(%ebp),%eax
f010661a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010661d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106620:	8b 00                	mov    (%eax),%eax
f0106622:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106627:	74 17                	je     f0106640 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f0106629:	83 ec 04             	sub    $0x4,%esp
f010662c:	68 3b aa 11 f0       	push   $0xf011aa3b
f0106631:	68 58 03 00 00       	push   $0x358
f0106636:	68 ef a8 11 f0       	push   $0xf011a8ef
f010663b:	e8 36 9b ff ff       	call   f0100176 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106640:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106643:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106646:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106649:	01 d0                	add    %edx,%eax
f010664b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010664e:	eb 07                	jmp    f0106657 <PROGRAM_SEGMENT_FIRST+0x50>
f0106650:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106653:	40                   	inc    %eax
f0106654:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0106657:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010665a:	c1 e0 05             	shl    $0x5,%eax
f010665d:	89 c2                	mov    %eax,%edx
f010665f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106662:	01 d0                	add    %edx,%eax
f0106664:	8b 00                	mov    (%eax),%eax
f0106666:	83 f8 01             	cmp    $0x1,%eax
f0106669:	74 10                	je     f010667b <PROGRAM_SEGMENT_FIRST+0x74>
f010666b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106671:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106674:	0f b7 c0             	movzwl %ax,%eax
f0106677:	39 c2                	cmp    %eax,%edx
f0106679:	72 d5                	jb     f0106650 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010667b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010667e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f0106681:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106684:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106687:	0f b7 c0             	movzwl %ax,%eax
f010668a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010668d:	7e 68                	jle    f01066f7 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010668f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106692:	c1 e0 05             	shl    $0x5,%eax
f0106695:	89 c2                	mov    %eax,%edx
f0106697:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010669a:	01 d0                	add    %edx,%eax
f010669c:	8b 50 04             	mov    0x4(%eax),%edx
f010669f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01066a2:	01 d0                	add    %edx,%eax
f01066a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f01066a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066aa:	c1 e0 05             	shl    $0x5,%eax
f01066ad:	89 c2                	mov    %eax,%edx
f01066af:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01066b2:	01 d0                	add    %edx,%eax
f01066b4:	8b 40 14             	mov    0x14(%eax),%eax
f01066b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f01066ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066bd:	c1 e0 05             	shl    $0x5,%eax
f01066c0:	89 c2                	mov    %eax,%edx
f01066c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01066c5:	01 d0                	add    %edx,%eax
f01066c7:	8b 40 10             	mov    0x10(%eax),%eax
f01066ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f01066cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066d0:	c1 e0 05             	shl    $0x5,%eax
f01066d3:	89 c2                	mov    %eax,%edx
f01066d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01066d8:	01 d0                	add    %edx,%eax
f01066da:	8b 40 08             	mov    0x8(%eax),%eax
f01066dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f01066e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01066e3:	89 c3                	mov    %eax,%ebx
f01066e5:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01066e8:	ba 05 00 00 00       	mov    $0x5,%edx
f01066ed:	89 df                	mov    %ebx,%edi
f01066ef:	89 c6                	mov    %eax,%esi
f01066f1:	89 d1                	mov    %edx,%ecx
f01066f3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01066f5:	eb 1c                	jmp    f0106713 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f01066f7:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f01066fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106701:	89 c3                	mov    %eax,%ebx
f0106703:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106706:	ba 05 00 00 00       	mov    $0x5,%edx
f010670b:	89 df                	mov    %ebx,%edi
f010670d:	89 c6                	mov    %eax,%esi
f010670f:	89 d1                	mov    %edx,%ecx
f0106711:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106713:	8b 45 08             	mov    0x8(%ebp),%eax
f0106716:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0106719:	5b                   	pop    %ebx
f010671a:	5e                   	pop    %esi
f010671b:	5f                   	pop    %edi
f010671c:	5d                   	pop    %ebp
f010671d:	c2 04 00             	ret    $0x4

f0106720 <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f0106720:	55                   	push   %ebp
f0106721:	89 e5                	mov    %esp,%ebp
f0106723:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106726:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010672d:	eb 29                	jmp    f0106758 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010672f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106732:	89 d0                	mov    %edx,%eax
f0106734:	01 c0                	add    %eax,%eax
f0106736:	01 d0                	add    %edx,%eax
f0106738:	c1 e0 02             	shl    $0x2,%eax
f010673b:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
f0106740:	8b 00                	mov    (%eax),%eax
f0106742:	83 ec 08             	sub    $0x8,%esp
f0106745:	50                   	push   %eax
f0106746:	ff 75 08             	pushl  0x8(%ebp)
f0106749:	e8 78 11 01 00       	call   f01178c6 <strcmp>
f010674e:	83 c4 10             	add    $0x10,%esp
f0106751:	85 c0                	test   %eax,%eax
f0106753:	74 0f                	je     f0106764 <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106755:	ff 45 f4             	incl   -0xc(%ebp)
f0106758:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f010675d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106760:	7c cd                	jl     f010672f <get_user_program_info+0xf>
f0106762:	eb 01                	jmp    f0106765 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f0106764:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106765:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f010676a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010676d:	75 1a                	jne    f0106789 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010676f:	83 ec 08             	sub    $0x8,%esp
f0106772:	ff 75 08             	pushl  0x8(%ebp)
f0106775:	68 51 aa 11 f0       	push   $0xf011aa51
f010677a:	e8 50 06 00 00       	call   f0106dcf <cprintf>
f010677f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106782:	b8 00 00 00 00       	mov    $0x0,%eax
f0106787:	eb 11                	jmp    f010679a <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0106789:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010678c:	89 d0                	mov    %edx,%eax
f010678e:	01 c0                	add    %eax,%eax
f0106790:	01 d0                	add    %edx,%eax
f0106792:	c1 e0 02             	shl    $0x2,%eax
f0106795:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
}
f010679a:	c9                   	leave  
f010679b:	c3                   	ret    

f010679c <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010679c:	55                   	push   %ebp
f010679d:	89 e5                	mov    %esp,%ebp
f010679f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f01067a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01067a9:	eb 30                	jmp    f01067db <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f01067ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067ae:	89 d0                	mov    %edx,%eax
f01067b0:	01 c0                	add    %eax,%eax
f01067b2:	01 d0                	add    %edx,%eax
f01067b4:	c1 e0 02             	shl    $0x2,%eax
f01067b7:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
f01067bc:	8b 00                	mov    (%eax),%eax
f01067be:	8b 55 08             	mov    0x8(%ebp),%edx
f01067c1:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f01067c7:	83 ec 08             	sub    $0x8,%esp
f01067ca:	50                   	push   %eax
f01067cb:	52                   	push   %edx
f01067cc:	e8 f5 10 01 00       	call   f01178c6 <strcmp>
f01067d1:	83 c4 10             	add    $0x10,%esp
f01067d4:	85 c0                	test   %eax,%eax
f01067d6:	74 0f                	je     f01067e7 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f01067d8:	ff 45 f4             	incl   -0xc(%ebp)
f01067db:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01067e0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067e3:	7c c6                	jl     f01067ab <get_user_program_info_by_env+0xf>
f01067e5:	eb 01                	jmp    f01067e8 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f01067e7:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f01067e8:	a1 18 ea 14 f0       	mov    0xf014ea18,%eax
f01067ed:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01067f0:	75 17                	jne    f0106809 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f01067f2:	83 ec 0c             	sub    $0xc,%esp
f01067f5:	68 6c aa 11 f0       	push   $0xf011aa6c
f01067fa:	e8 d0 05 00 00       	call   f0106dcf <cprintf>
f01067ff:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106802:	b8 00 00 00 00       	mov    $0x0,%eax
f0106807:	eb 11                	jmp    f010681a <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f0106809:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010680c:	89 d0                	mov    %edx,%eax
f010680e:	01 c0                	add    %eax,%eax
f0106810:	01 d0                	add    %edx,%eax
f0106812:	c1 e0 02             	shl    $0x2,%eax
f0106815:	05 e0 e7 14 f0       	add    $0xf014e7e0,%eax
}
f010681a:	c9                   	leave  
f010681b:	c3                   	ret    

f010681c <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010681c:	55                   	push   %ebp
f010681d:	89 e5                	mov    %esp,%ebp
f010681f:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106822:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106825:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106828:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010682b:	8b 00                	mov    (%eax),%eax
f010682d:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106832:	74 17                	je     f010684b <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0106834:	83 ec 04             	sub    $0x4,%esp
f0106837:	68 3b aa 11 f0       	push   $0xf011aa3b
f010683c:	68 8d 03 00 00       	push   $0x38d
f0106841:	68 ef a8 11 f0       	push   $0xf011a8ef
f0106846:	e8 2b 99 ff ff       	call   f0100176 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010684b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010684e:	8b 40 18             	mov    0x18(%eax),%eax
f0106851:	89 c2                	mov    %eax,%edx
f0106853:	8b 45 08             	mov    0x8(%ebp),%eax
f0106856:	89 50 30             	mov    %edx,0x30(%eax)
}
f0106859:	90                   	nop
f010685a:	c9                   	leave  
f010685b:	c3                   	ret    

f010685c <env_exit>:



//it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f010685c:	55                   	push   %ebp
f010685d:	89 e5                	mov    %esp,%ebp
f010685f:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106862:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0106867:	8b 40 4c             	mov    0x4c(%eax),%eax
f010686a:	83 ec 0c             	sub    $0xc,%esp
f010686d:	50                   	push   %eax
f010686e:	e8 1e 35 00 00       	call   f0109d91 <sched_exit_env>
f0106873:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0106876:	e8 6c 2a 00 00       	call   f01092e7 <fos_scheduler>

f010687b <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
/*2015*///obsolete! we run on a scheduler!!
void env_destroy(struct Env *e)
{
f010687b:	55                   	push   %ebp
f010687c:	89 e5                	mov    %esp,%ebp
f010687e:	83 ec 08             	sub    $0x8,%esp
	panic("env_destroy() is obsoleted since 2015!");
f0106881:	83 ec 04             	sub    $0x4,%esp
f0106884:	68 84 aa 11 f0       	push   $0xf011aa84
f0106889:	68 a3 03 00 00       	push   $0x3a3
f010688e:	68 ef a8 11 f0       	push   $0xf011a8ef
f0106893:	e8 de 98 ff ff       	call   f0100176 <_panic>

f0106898 <cleanup_buffers>:
		run_command_prompt();
	 */
}

void cleanup_buffers(struct Env* e)
{
f0106898:	55                   	push   %ebp
f0106899:	89 e5                	mov    %esp,%ebp
f010689b:	83 ec 18             	sub    $0x18,%esp
	// remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f010689e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f01068a5:	a1 00 58 55 f0       	mov    0xf0555800,%eax
f01068aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01068ad:	eb 4d                	jmp    f01068fc <cleanup_buffers+0x64>
	{
		if(ptr_fi->environment == e)
f01068af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068b2:	8b 40 10             	mov    0x10(%eax),%eax
f01068b5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01068b8:	75 3a                	jne    f01068f4 <cleanup_buffers+0x5c>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f01068ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068bd:	8b 50 0c             	mov    0xc(%eax),%edx
f01068c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068c3:	8b 40 10             	mov    0x10(%eax),%eax
f01068c6:	83 ec 08             	sub    $0x8,%esp
f01068c9:	52                   	push   %edx
f01068ca:	50                   	push   %eax
f01068cb:	e8 17 e6 ff ff       	call   f0104ee7 <pt_clear_page_table_entry>
f01068d0:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			bufferlist_remove_page(&modified_frame_list, ptr_fi);
f01068d3:	83 ec 08             	sub    $0x8,%esp
f01068d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01068d9:	68 00 58 55 f0       	push   $0xf0555800
f01068de:	e8 f2 e2 ff ff       	call   f0104bd5 <bufferlist_remove_page>
f01068e3:	83 c4 10             	add    $0x10,%esp

			free_frame(ptr_fi);
f01068e6:	83 ec 0c             	sub    $0xc,%esp
f01068e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01068ec:	e8 97 d1 ff ff       	call   f0103a88 <free_frame>
f01068f1:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f01068f4:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f01068f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01068fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106900:	74 07                	je     f0106909 <cleanup_buffers+0x71>
f0106902:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106905:	8b 00                	mov    (%eax),%eax
f0106907:	eb 05                	jmp    f010690e <cleanup_buffers+0x76>
f0106909:	b8 00 00 00 00       	mov    $0x0,%eax
f010690e:	a3 08 58 55 f0       	mov    %eax,0xf0555808
f0106913:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f0106918:	85 c0                	test   %eax,%eax
f010691a:	75 93                	jne    f01068af <cleanup_buffers+0x17>
f010691c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106920:	75 8d                	jne    f01068af <cleanup_buffers+0x17>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f0106922:	90                   	nop
f0106923:	c9                   	leave  
f0106924:	c3                   	ret    

f0106925 <env_run_cmd_prmpt>:


/*2015*///obsolete! use env_exit() instead! it add the exited env to the EXIT list, then reinvoke the scheduler
void env_run_cmd_prmpt()
{
f0106925:	55                   	push   %ebp
f0106926:	89 e5                	mov    %esp,%ebp
f0106928:	83 ec 08             	sub    $0x8,%esp
	panic("env_run_cmd_prmpt() is obsoleted since 2015! use env_exit() instead");
f010692b:	83 ec 04             	sub    $0x4,%esp
f010692e:	68 ac aa 11 f0       	push   $0xf011aaac
f0106933:	68 d0 03 00 00       	push   $0x3d0
f0106938:	68 ef a8 11 f0       	push   $0xf011a8ef
f010693d:	e8 34 98 ff ff       	call   f0100176 <_panic>

f0106942 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0106942:	55                   	push   %ebp
f0106943:	89 e5                	mov    %esp,%ebp
f0106945:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0106948:	8b 65 08             	mov    0x8(%ebp),%esp
f010694b:	61                   	popa   
f010694c:	07                   	pop    %es
f010694d:	1f                   	pop    %ds
f010694e:	83 c4 08             	add    $0x8,%esp
f0106951:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0106952:	83 ec 04             	sub    $0x4,%esp
f0106955:	68 f0 aa 11 f0       	push   $0xf011aaf0
f010695a:	68 e2 03 00 00       	push   $0x3e2
f010695f:	68 ef a8 11 f0       	push   $0xf011a8ef
f0106964:	e8 0d 98 ff ff       	call   f0100176 <_panic>

f0106969 <mc146818_read>:

#include <inc/assert.h>

unsigned
mc146818_read(unsigned reg)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010696f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106972:	0f b6 c0             	movzbl %al,%eax
f0106975:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010697c:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010697f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106982:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106985:	ee                   	out    %al,(%dx)
f0106986:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010698d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106990:	89 c2                	mov    %eax,%edx
f0106992:	ec                   	in     (%dx),%al
f0106993:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0106996:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0106999:	0f b6 c0             	movzbl %al,%eax
}
f010699c:	c9                   	leave  
f010699d:	c3                   	ret    

f010699e <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f010699e:	55                   	push   %ebp
f010699f:	89 e5                	mov    %esp,%ebp
f01069a1:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01069a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a7:	0f b6 c0             	movzbl %al,%eax
f01069aa:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01069b1:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01069b4:	8a 45 f6             	mov    -0xa(%ebp),%al
f01069b7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01069ba:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01069bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069be:	0f b6 c0             	movzbl %al,%eax
f01069c1:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01069c8:	88 45 f7             	mov    %al,-0x9(%ebp)
f01069cb:	8a 45 f7             	mov    -0x9(%ebp),%al
f01069ce:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01069d1:	ee                   	out    %al,(%dx)
}
f01069d2:	90                   	nop
f01069d3:	c9                   	leave  
f01069d4:	c3                   	ret    

f01069d5 <kclock_start>:


void
kclock_start(uint8 quantum)
{
f01069d5:	55                   	push   %ebp
f01069d6:	89 e5                	mov    %esp,%ebp
f01069d8:	83 ec 28             	sub    $0x28,%esp
f01069db:	8b 45 08             	mov    0x8(%ebp),%eax
f01069de:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01069e1:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01069e8:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01069ec:	8a 45 f3             	mov    -0xd(%ebp),%al
f01069ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01069f2:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	kclock_set_quantum(quantum);
f01069f3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01069f7:	83 ec 0c             	sub    $0xc,%esp
f01069fa:	50                   	push   %eax
f01069fb:	e8 20 00 00 00       	call   f0106a20 <kclock_set_quantum>
f0106a00:	83 c4 10             	add    $0x10,%esp

	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("Timer Started: Counter0 Value = %d\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106a03:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106a09:	0f b7 c0             	movzwl %ax,%eax
f0106a0c:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106a11:	83 ec 0c             	sub    $0xc,%esp
f0106a14:	50                   	push   %eax
f0106a15:	e8 16 03 00 00       	call   f0106d30 <irq_setmask_8259A>
f0106a1a:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0106a1d:	90                   	nop
f0106a1e:	c9                   	leave  
f0106a1f:	c3                   	ret    

f0106a20 <kclock_set_quantum>:
//==============

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0106a20:	55                   	push   %ebp
f0106a21:	89 e5                	mov    %esp,%ebp
f0106a23:	53                   	push   %ebx
f0106a24:	83 ec 14             	sub    $0x14,%esp
f0106a27:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a2a:	88 45 f4             	mov    %al,-0xc(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
	{
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0106a2d:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f0106a31:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0106a36:	99                   	cltd   
f0106a37:	f7 fb                	idiv   %ebx
f0106a39:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106a3f:	0f b6 5d f4          	movzbl -0xc(%ebp),%ebx
f0106a43:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106a48:	99                   	cltd   
f0106a49:	f7 fb                	idiv   %ebx
f0106a4b:	89 c3                	mov    %eax,%ebx
f0106a4d:	89 c8                	mov    %ecx,%eax
f0106a4f:	99                   	cltd   
f0106a50:	f7 fb                	idiv   %ebx
f0106a52:	0f b7 c0             	movzwl %ax,%eax
f0106a55:	83 ec 0c             	sub    $0xc,%esp
f0106a58:	50                   	push   %eax
f0106a59:	e8 8f 00 00 00       	call   f0106aed <kclock_write_cnt0_LSB_first>
f0106a5e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0106a61:	90                   	nop
f0106a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106a65:	c9                   	leave  
f0106a66:	c3                   	ret    

f0106a67 <kclock_resume>:
//==============

void
kclock_resume(void)
{
f0106a67:	55                   	push   %ebp
f0106a68:	89 e5                	mov    %esp,%ebp
f0106a6a:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0106a6d:	e8 bd 00 00 00       	call   f0106b2f <kclock_read_cnt0>
f0106a72:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0106a76:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106a7d:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106a81:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106a84:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106a87:	ee                   	out    %al,(%dx)
	//cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 10)
f0106a88:	66 83 7d f6 09       	cmpw   $0x9,-0xa(%ebp)
f0106a8d:	77 06                	ja     f0106a95 <kclock_resume+0x2e>
	{
		cnt0 = 10;
f0106a8f:	66 c7 45 f6 0a 00    	movw   $0xa,-0xa(%ebp)
	}
	//================
//	outb(TIMER_CNTR0, (uint8)(cnt0 & 0x00FF));
//	outb(TIMER_CNTR0, (uint8)((cnt0>>8) & 0x00FF));
	kclock_write_cnt0_LSB_first(cnt0) ;
f0106a95:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a99:	83 ec 0c             	sub    $0xc,%esp
f0106a9c:	50                   	push   %eax
f0106a9d:	e8 4b 00 00 00       	call   f0106aed <kclock_write_cnt0_LSB_first>
f0106aa2:	83 c4 10             	add    $0x10,%esp

//	cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Value = %x\n", cnt0 );

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106aa5:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106aab:	0f b7 c0             	movzwl %ax,%eax
f0106aae:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106ab3:	83 ec 0c             	sub    $0xc,%esp
f0106ab6:	50                   	push   %eax
f0106ab7:	e8 74 02 00 00       	call   f0106d30 <irq_setmask_8259A>
f0106abc:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0106abf:	90                   	nop
f0106ac0:	c9                   	leave  
f0106ac1:	c3                   	ret    

f0106ac2 <kclock_stop>:

void
kclock_stop(void)
{
f0106ac2:	55                   	push   %ebp
f0106ac3:	89 e5                	mov    %esp,%ebp
f0106ac5:	83 ec 18             	sub    $0x18,%esp
f0106ac8:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106acf:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106ad3:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106ad6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ad9:	ee                   	out    %al,(%dx)
//		}
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Before Lag = %x, After lag = %x\n", cnt0_before, cnt0_after );


	irq_setmask_8259A(0xFFFF);
f0106ada:	83 ec 0c             	sub    $0xc,%esp
f0106add:	68 ff ff 00 00       	push   $0xffff
f0106ae2:	e8 49 02 00 00       	call   f0106d30 <irq_setmask_8259A>
f0106ae7:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0106aea:	90                   	nop
f0106aeb:	c9                   	leave  
f0106aec:	c3                   	ret    

f0106aed <kclock_write_cnt0_LSB_first>:

//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0106aed:	55                   	push   %ebp
f0106aee:	89 e5                	mov    %esp,%ebp
f0106af0:	83 ec 14             	sub    $0x14,%esp
f0106af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0106af6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0106afa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106afd:	0f b6 c0             	movzbl %al,%eax
f0106b00:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0106b07:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106b0a:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106b0d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106b10:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0106b11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b14:	66 c1 e8 08          	shr    $0x8,%ax
f0106b18:	0f b6 c0             	movzbl %al,%eax
f0106b1b:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0106b22:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106b25:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106b28:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106b2b:	ee                   	out    %al,(%dx)
}
f0106b2c:	90                   	nop
f0106b2d:	c9                   	leave  
f0106b2e:	c3                   	ret    

f0106b2f <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0106b2f:	55                   	push   %ebp
f0106b30:	89 e5                	mov    %esp,%ebp
f0106b32:	83 ec 20             	sub    $0x20,%esp
f0106b35:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b3f:	89 c2                	mov    %eax,%edx
f0106b41:	ec                   	in     (%dx),%al
f0106b42:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106b45:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106b48:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b4b:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b55:	89 c2                	mov    %eax,%edx
f0106b57:	ec                   	in     (%dx),%al
f0106b58:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0106b5b:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106b5e:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106b61:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0106b65:	c1 e0 08             	shl    $0x8,%eax
f0106b68:	89 c2                	mov    %eax,%edx
f0106b6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106b6e:	09 d0                	or     %edx,%eax
f0106b70:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0106b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b77:	c9                   	leave  
f0106b78:	c3                   	ret    

f0106b79 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0106b79:	55                   	push   %ebp
f0106b7a:	89 e5                	mov    %esp,%ebp
f0106b7c:	83 ec 30             	sub    $0x30,%esp
f0106b7f:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106b86:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106b89:	89 c2                	mov    %eax,%edx
f0106b8b:	ec                   	in     (%dx),%al
f0106b8c:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0106b8f:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0106b92:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106b95:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106b9c:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106ba0:	8a 45 dc             	mov    -0x24(%ebp),%al
f0106ba3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ba6:	ee                   	out    %al,(%dx)
f0106ba7:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bb1:	89 c2                	mov    %eax,%edx
f0106bb3:	ec                   	in     (%dx),%al
f0106bb4:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0106bb7:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106bba:	88 45 f3             	mov    %al,-0xd(%ebp)
f0106bbd:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106bc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106bc7:	89 c2                	mov    %eax,%edx
f0106bc9:	ec                   	in     (%dx),%al
f0106bca:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0106bcd:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106bd0:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106bd3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0106bd7:	c1 e0 08             	shl    $0x8,%eax
f0106bda:	89 c2                	mov    %eax,%edx
f0106bdc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0106be0:	09 d0                	or     %edx,%eax
f0106be2:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0106be6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106bea:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0106bf1:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106bf4:	8a 45 df             	mov    -0x21(%ebp),%al
f0106bf7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106bfa:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0106bfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0106bfe:	c9                   	leave  
f0106bff:	c3                   	ret    

f0106c00 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106c00:	55                   	push   %ebp
f0106c01:	89 e5                	mov    %esp,%ebp
f0106c03:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106c06:	c7 05 c4 6a 53 f0 01 	movl   $0x1,0xf0536ac4
f0106c0d:	00 00 00 
f0106c10:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106c17:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f0106c1b:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106c1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c21:	ee                   	out    %al,(%dx)
f0106c22:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106c29:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106c2d:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106c30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c33:	ee                   	out    %al,(%dx)
f0106c34:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106c3b:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106c3f:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106c42:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106c45:	ee                   	out    %al,(%dx)
f0106c46:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106c4d:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106c51:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106c54:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106c57:	ee                   	out    %al,(%dx)
f0106c58:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106c5f:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106c63:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106c66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106c69:	ee                   	out    %al,(%dx)
f0106c6a:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106c71:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106c75:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106c78:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106c7b:	ee                   	out    %al,(%dx)
f0106c7c:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106c83:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106c87:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106c8a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106c8d:	ee                   	out    %al,(%dx)
f0106c8e:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106c95:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106c99:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106c9c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106c9f:	ee                   	out    %al,(%dx)
f0106ca0:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106ca7:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106cab:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106cae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106cb1:	ee                   	out    %al,(%dx)
f0106cb2:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106cb9:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106cbd:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106cc0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106cc3:	ee                   	out    %al,(%dx)
f0106cc4:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106ccb:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106ccf:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106cd2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106cd5:	ee                   	out    %al,(%dx)
f0106cd6:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106cdd:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ce1:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106ce4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106ce7:	ee                   	out    %al,(%dx)
f0106ce8:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106cef:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106cf3:	8a 45 be             	mov    -0x42(%ebp),%al
f0106cf6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106cf9:	ee                   	out    %al,(%dx)
f0106cfa:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106d01:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106d05:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106d08:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106d0b:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0106d0c:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106d12:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106d16:	74 15                	je     f0106d2d <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0106d18:	66 a1 1c ea 14 f0    	mov    0xf014ea1c,%ax
f0106d1e:	0f b7 c0             	movzwl %ax,%eax
f0106d21:	83 ec 0c             	sub    $0xc,%esp
f0106d24:	50                   	push   %eax
f0106d25:	e8 06 00 00 00       	call   f0106d30 <irq_setmask_8259A>
f0106d2a:	83 c4 10             	add    $0x10,%esp
}
f0106d2d:	90                   	nop
f0106d2e:	c9                   	leave  
f0106d2f:	c3                   	ret    

f0106d30 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106d30:	55                   	push   %ebp
f0106d31:	89 e5                	mov    %esp,%ebp
f0106d33:	83 ec 14             	sub    $0x14,%esp
f0106d36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d39:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0106d3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d40:	66 a3 1c ea 14 f0    	mov    %ax,0xf014ea1c
	if (!didinit)
f0106d46:	a1 c4 6a 53 f0       	mov    0xf0536ac4,%eax
f0106d4b:	85 c0                	test   %eax,%eax
f0106d4d:	74 34                	je     f0106d83 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0106d4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d52:	0f b6 c0             	movzbl %al,%eax
f0106d55:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106d5c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106d5f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106d62:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106d65:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d69:	66 c1 e8 08          	shr    $0x8,%ax
f0106d6d:	0f b6 c0             	movzbl %al,%eax
f0106d70:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106d77:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106d7a:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106d7d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106d80:	ee                   	out    %al,(%dx)
f0106d81:	eb 01                	jmp    f0106d84 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106d83:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106d84:	c9                   	leave  
f0106d85:	c3                   	ret    

f0106d86 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0106d86:	55                   	push   %ebp
f0106d87:	89 e5                	mov    %esp,%ebp
f0106d89:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0106d8c:	83 ec 0c             	sub    $0xc,%esp
f0106d8f:	ff 75 08             	pushl  0x8(%ebp)
f0106d92:	e8 57 9f ff ff       	call   f0100cee <cputchar>
f0106d97:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0106d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d9d:	83 c0 04             	add    $0x4,%eax
f0106da0:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0106da3:	90                   	nop
f0106da4:	c9                   	leave  
f0106da5:	c3                   	ret    

f0106da6 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0106da6:	55                   	push   %ebp
f0106da7:	89 e5                	mov    %esp,%ebp
f0106da9:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0106dac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0106db3:	ff 75 0c             	pushl  0xc(%ebp)
f0106db6:	ff 75 08             	pushl  0x8(%ebp)
f0106db9:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106dbc:	50                   	push   %eax
f0106dbd:	68 86 6d 10 f0       	push   $0xf0106d86
f0106dc2:	e8 45 03 01 00       	call   f011710c <vprintfmt>
f0106dc7:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0106dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106dcd:	c9                   	leave  
f0106dce:	c3                   	ret    

f0106dcf <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0106dcf:	55                   	push   %ebp
f0106dd0:	89 e5                	mov    %esp,%ebp
f0106dd2:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0106dd5:	8d 45 0c             	lea    0xc(%ebp),%eax
f0106dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0106ddb:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dde:	83 ec 08             	sub    $0x8,%esp
f0106de1:	ff 75 f4             	pushl  -0xc(%ebp)
f0106de4:	50                   	push   %eax
f0106de5:	e8 bc ff ff ff       	call   f0106da6 <vcprintf>
f0106dea:	83 c4 10             	add    $0x10,%esp
f0106ded:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0106df0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0106df3:	c9                   	leave  
f0106df4:	c3                   	ret    

f0106df5 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f0106df5:	55                   	push   %ebp
f0106df6:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f0106df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dfb:	83 f8 13             	cmp    $0x13,%eax
f0106dfe:	77 0c                	ja     f0106e0c <trapname+0x17>
		return excnames[trapno];
f0106e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e03:	8b 04 85 00 af 11 f0 	mov    -0xfee5100(,%eax,4),%eax
f0106e0a:	eb 12                	jmp    f0106e1e <trapname+0x29>
	if (trapno == T_SYSCALL)
f0106e0c:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0106e10:	75 07                	jne    f0106e19 <trapname+0x24>
		return "System call";
f0106e12:	b8 00 ab 11 f0       	mov    $0xf011ab00,%eax
f0106e17:	eb 05                	jmp    f0106e1e <trapname+0x29>
	return "(unknown trap)";
f0106e19:	b8 0c ab 11 f0       	mov    $0xf011ab0c,%eax
}
f0106e1e:	5d                   	pop    %ebp
f0106e1f:	c3                   	ret    

f0106e20 <idt_init>:


void
idt_init(void)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
f0106e23:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f0106e26:	b8 9a 8d 10 f0       	mov    $0xf0108d9a,%eax
f0106e2b:	66 a3 70 6b 53 f0    	mov    %ax,0xf0536b70
f0106e31:	66 c7 05 72 6b 53 f0 	movw   $0x8,0xf0536b72
f0106e38:	08 00 
f0106e3a:	a0 74 6b 53 f0       	mov    0xf0536b74,%al
f0106e3f:	83 e0 e0             	and    $0xffffffe0,%eax
f0106e42:	a2 74 6b 53 f0       	mov    %al,0xf0536b74
f0106e47:	a0 74 6b 53 f0       	mov    0xf0536b74,%al
f0106e4c:	83 e0 1f             	and    $0x1f,%eax
f0106e4f:	a2 74 6b 53 f0       	mov    %al,0xf0536b74
f0106e54:	a0 75 6b 53 f0       	mov    0xf0536b75,%al
f0106e59:	83 e0 f0             	and    $0xfffffff0,%eax
f0106e5c:	83 c8 0e             	or     $0xe,%eax
f0106e5f:	a2 75 6b 53 f0       	mov    %al,0xf0536b75
f0106e64:	a0 75 6b 53 f0       	mov    0xf0536b75,%al
f0106e69:	83 e0 ef             	and    $0xffffffef,%eax
f0106e6c:	a2 75 6b 53 f0       	mov    %al,0xf0536b75
f0106e71:	a0 75 6b 53 f0       	mov    0xf0536b75,%al
f0106e76:	83 e0 9f             	and    $0xffffff9f,%eax
f0106e79:	a2 75 6b 53 f0       	mov    %al,0xf0536b75
f0106e7e:	a0 75 6b 53 f0       	mov    0xf0536b75,%al
f0106e83:	83 c8 80             	or     $0xffffff80,%eax
f0106e86:	a2 75 6b 53 f0       	mov    %al,0xf0536b75
f0106e8b:	b8 9a 8d 10 f0       	mov    $0xf0108d9a,%eax
f0106e90:	c1 e8 10             	shr    $0x10,%eax
f0106e93:	66 a3 76 6b 53 f0    	mov    %ax,0xf0536b76
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f0106e99:	b8 a2 8d 10 f0       	mov    $0xf0108da2,%eax
f0106e9e:	66 a3 80 6c 53 f0    	mov    %ax,0xf0536c80
f0106ea4:	66 c7 05 82 6c 53 f0 	movw   $0x8,0xf0536c82
f0106eab:	08 00 
f0106ead:	a0 84 6c 53 f0       	mov    0xf0536c84,%al
f0106eb2:	83 e0 e0             	and    $0xffffffe0,%eax
f0106eb5:	a2 84 6c 53 f0       	mov    %al,0xf0536c84
f0106eba:	a0 84 6c 53 f0       	mov    0xf0536c84,%al
f0106ebf:	83 e0 1f             	and    $0x1f,%eax
f0106ec2:	a2 84 6c 53 f0       	mov    %al,0xf0536c84
f0106ec7:	a0 85 6c 53 f0       	mov    0xf0536c85,%al
f0106ecc:	83 e0 f0             	and    $0xfffffff0,%eax
f0106ecf:	83 c8 0e             	or     $0xe,%eax
f0106ed2:	a2 85 6c 53 f0       	mov    %al,0xf0536c85
f0106ed7:	a0 85 6c 53 f0       	mov    0xf0536c85,%al
f0106edc:	83 e0 ef             	and    $0xffffffef,%eax
f0106edf:	a2 85 6c 53 f0       	mov    %al,0xf0536c85
f0106ee4:	a0 85 6c 53 f0       	mov    0xf0536c85,%al
f0106ee9:	83 c8 60             	or     $0x60,%eax
f0106eec:	a2 85 6c 53 f0       	mov    %al,0xf0536c85
f0106ef1:	a0 85 6c 53 f0       	mov    0xf0536c85,%al
f0106ef6:	83 c8 80             	or     $0xffffff80,%eax
f0106ef9:	a2 85 6c 53 f0       	mov    %al,0xf0536c85
f0106efe:	b8 a2 8d 10 f0       	mov    $0xf0108da2,%eax
f0106f03:	c1 e8 10             	shr    $0x10,%eax
f0106f06:	66 a3 86 6c 53 f0    	mov    %ax,0xf0536c86
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0106f0c:	b8 ac 8d 10 f0       	mov    $0xf0108dac,%eax
f0106f11:	66 a3 40 6b 53 f0    	mov    %ax,0xf0536b40
f0106f17:	66 c7 05 42 6b 53 f0 	movw   $0x8,0xf0536b42
f0106f1e:	08 00 
f0106f20:	a0 44 6b 53 f0       	mov    0xf0536b44,%al
f0106f25:	83 e0 e0             	and    $0xffffffe0,%eax
f0106f28:	a2 44 6b 53 f0       	mov    %al,0xf0536b44
f0106f2d:	a0 44 6b 53 f0       	mov    0xf0536b44,%al
f0106f32:	83 e0 1f             	and    $0x1f,%eax
f0106f35:	a2 44 6b 53 f0       	mov    %al,0xf0536b44
f0106f3a:	a0 45 6b 53 f0       	mov    0xf0536b45,%al
f0106f3f:	83 e0 f0             	and    $0xfffffff0,%eax
f0106f42:	83 c8 0e             	or     $0xe,%eax
f0106f45:	a2 45 6b 53 f0       	mov    %al,0xf0536b45
f0106f4a:	a0 45 6b 53 f0       	mov    0xf0536b45,%al
f0106f4f:	83 e0 ef             	and    $0xffffffef,%eax
f0106f52:	a2 45 6b 53 f0       	mov    %al,0xf0536b45
f0106f57:	a0 45 6b 53 f0       	mov    0xf0536b45,%al
f0106f5c:	83 e0 9f             	and    $0xffffff9f,%eax
f0106f5f:	a2 45 6b 53 f0       	mov    %al,0xf0536b45
f0106f64:	a0 45 6b 53 f0       	mov    0xf0536b45,%al
f0106f69:	83 c8 80             	or     $0xffffff80,%eax
f0106f6c:	a2 45 6b 53 f0       	mov    %al,0xf0536b45
f0106f71:	b8 ac 8d 10 f0       	mov    $0xf0108dac,%eax
f0106f76:	c1 e8 10             	shr    $0x10,%eax
f0106f79:	66 a3 46 6b 53 f0    	mov    %ax,0xf0536b46


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f0106f7f:	b8 b4 8d 10 f0       	mov    $0xf0108db4,%eax
f0106f84:	66 a3 00 6b 53 f0    	mov    %ax,0xf0536b00
f0106f8a:	66 c7 05 02 6b 53 f0 	movw   $0x8,0xf0536b02
f0106f91:	08 00 
f0106f93:	a0 04 6b 53 f0       	mov    0xf0536b04,%al
f0106f98:	83 e0 e0             	and    $0xffffffe0,%eax
f0106f9b:	a2 04 6b 53 f0       	mov    %al,0xf0536b04
f0106fa0:	a0 04 6b 53 f0       	mov    0xf0536b04,%al
f0106fa5:	83 e0 1f             	and    $0x1f,%eax
f0106fa8:	a2 04 6b 53 f0       	mov    %al,0xf0536b04
f0106fad:	a0 05 6b 53 f0       	mov    0xf0536b05,%al
f0106fb2:	83 e0 f0             	and    $0xfffffff0,%eax
f0106fb5:	83 c8 0e             	or     $0xe,%eax
f0106fb8:	a2 05 6b 53 f0       	mov    %al,0xf0536b05
f0106fbd:	a0 05 6b 53 f0       	mov    0xf0536b05,%al
f0106fc2:	83 e0 ef             	and    $0xffffffef,%eax
f0106fc5:	a2 05 6b 53 f0       	mov    %al,0xf0536b05
f0106fca:	a0 05 6b 53 f0       	mov    0xf0536b05,%al
f0106fcf:	83 c8 60             	or     $0x60,%eax
f0106fd2:	a2 05 6b 53 f0       	mov    %al,0xf0536b05
f0106fd7:	a0 05 6b 53 f0       	mov    0xf0536b05,%al
f0106fdc:	83 c8 80             	or     $0xffffff80,%eax
f0106fdf:	a2 05 6b 53 f0       	mov    %al,0xf0536b05
f0106fe4:	b8 b4 8d 10 f0       	mov    $0xf0108db4,%eax
f0106fe9:	c1 e8 10             	shr    $0x10,%eax
f0106fec:	66 a3 06 6b 53 f0    	mov    %ax,0xf0536b06
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0106ff2:	b8 be 8d 10 f0       	mov    $0xf0108dbe,%eax
f0106ff7:	66 a3 08 6b 53 f0    	mov    %ax,0xf0536b08
f0106ffd:	66 c7 05 0a 6b 53 f0 	movw   $0x8,0xf0536b0a
f0107004:	08 00 
f0107006:	a0 0c 6b 53 f0       	mov    0xf0536b0c,%al
f010700b:	83 e0 e0             	and    $0xffffffe0,%eax
f010700e:	a2 0c 6b 53 f0       	mov    %al,0xf0536b0c
f0107013:	a0 0c 6b 53 f0       	mov    0xf0536b0c,%al
f0107018:	83 e0 1f             	and    $0x1f,%eax
f010701b:	a2 0c 6b 53 f0       	mov    %al,0xf0536b0c
f0107020:	a0 0d 6b 53 f0       	mov    0xf0536b0d,%al
f0107025:	83 c8 0f             	or     $0xf,%eax
f0107028:	a2 0d 6b 53 f0       	mov    %al,0xf0536b0d
f010702d:	a0 0d 6b 53 f0       	mov    0xf0536b0d,%al
f0107032:	83 e0 ef             	and    $0xffffffef,%eax
f0107035:	a2 0d 6b 53 f0       	mov    %al,0xf0536b0d
f010703a:	a0 0d 6b 53 f0       	mov    0xf0536b0d,%al
f010703f:	83 c8 60             	or     $0x60,%eax
f0107042:	a2 0d 6b 53 f0       	mov    %al,0xf0536b0d
f0107047:	a0 0d 6b 53 f0       	mov    0xf0536b0d,%al
f010704c:	83 c8 80             	or     $0xffffff80,%eax
f010704f:	a2 0d 6b 53 f0       	mov    %al,0xf0536b0d
f0107054:	b8 be 8d 10 f0       	mov    $0xf0108dbe,%eax
f0107059:	c1 e8 10             	shr    $0x10,%eax
f010705c:	66 a3 0e 6b 53 f0    	mov    %ax,0xf0536b0e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0107062:	b8 c8 8d 10 f0       	mov    $0xf0108dc8,%eax
f0107067:	66 a3 10 6b 53 f0    	mov    %ax,0xf0536b10
f010706d:	66 c7 05 12 6b 53 f0 	movw   $0x8,0xf0536b12
f0107074:	08 00 
f0107076:	a0 14 6b 53 f0       	mov    0xf0536b14,%al
f010707b:	83 e0 e0             	and    $0xffffffe0,%eax
f010707e:	a2 14 6b 53 f0       	mov    %al,0xf0536b14
f0107083:	a0 14 6b 53 f0       	mov    0xf0536b14,%al
f0107088:	83 e0 1f             	and    $0x1f,%eax
f010708b:	a2 14 6b 53 f0       	mov    %al,0xf0536b14
f0107090:	a0 15 6b 53 f0       	mov    0xf0536b15,%al
f0107095:	83 e0 f0             	and    $0xfffffff0,%eax
f0107098:	83 c8 0e             	or     $0xe,%eax
f010709b:	a2 15 6b 53 f0       	mov    %al,0xf0536b15
f01070a0:	a0 15 6b 53 f0       	mov    0xf0536b15,%al
f01070a5:	83 e0 ef             	and    $0xffffffef,%eax
f01070a8:	a2 15 6b 53 f0       	mov    %al,0xf0536b15
f01070ad:	a0 15 6b 53 f0       	mov    0xf0536b15,%al
f01070b2:	83 c8 60             	or     $0x60,%eax
f01070b5:	a2 15 6b 53 f0       	mov    %al,0xf0536b15
f01070ba:	a0 15 6b 53 f0       	mov    0xf0536b15,%al
f01070bf:	83 c8 80             	or     $0xffffff80,%eax
f01070c2:	a2 15 6b 53 f0       	mov    %al,0xf0536b15
f01070c7:	b8 c8 8d 10 f0       	mov    $0xf0108dc8,%eax
f01070cc:	c1 e8 10             	shr    $0x10,%eax
f01070cf:	66 a3 16 6b 53 f0    	mov    %ax,0xf0536b16
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f01070d5:	b8 d2 8d 10 f0       	mov    $0xf0108dd2,%eax
f01070da:	66 a3 18 6b 53 f0    	mov    %ax,0xf0536b18
f01070e0:	66 c7 05 1a 6b 53 f0 	movw   $0x8,0xf0536b1a
f01070e7:	08 00 
f01070e9:	a0 1c 6b 53 f0       	mov    0xf0536b1c,%al
f01070ee:	83 e0 e0             	and    $0xffffffe0,%eax
f01070f1:	a2 1c 6b 53 f0       	mov    %al,0xf0536b1c
f01070f6:	a0 1c 6b 53 f0       	mov    0xf0536b1c,%al
f01070fb:	83 e0 1f             	and    $0x1f,%eax
f01070fe:	a2 1c 6b 53 f0       	mov    %al,0xf0536b1c
f0107103:	a0 1d 6b 53 f0       	mov    0xf0536b1d,%al
f0107108:	83 c8 0f             	or     $0xf,%eax
f010710b:	a2 1d 6b 53 f0       	mov    %al,0xf0536b1d
f0107110:	a0 1d 6b 53 f0       	mov    0xf0536b1d,%al
f0107115:	83 e0 ef             	and    $0xffffffef,%eax
f0107118:	a2 1d 6b 53 f0       	mov    %al,0xf0536b1d
f010711d:	a0 1d 6b 53 f0       	mov    0xf0536b1d,%al
f0107122:	83 c8 60             	or     $0x60,%eax
f0107125:	a2 1d 6b 53 f0       	mov    %al,0xf0536b1d
f010712a:	a0 1d 6b 53 f0       	mov    0xf0536b1d,%al
f010712f:	83 c8 80             	or     $0xffffff80,%eax
f0107132:	a2 1d 6b 53 f0       	mov    %al,0xf0536b1d
f0107137:	b8 d2 8d 10 f0       	mov    $0xf0108dd2,%eax
f010713c:	c1 e8 10             	shr    $0x10,%eax
f010713f:	66 a3 1e 6b 53 f0    	mov    %ax,0xf0536b1e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f0107145:	b8 dc 8d 10 f0       	mov    $0xf0108ddc,%eax
f010714a:	66 a3 20 6b 53 f0    	mov    %ax,0xf0536b20
f0107150:	66 c7 05 22 6b 53 f0 	movw   $0x8,0xf0536b22
f0107157:	08 00 
f0107159:	a0 24 6b 53 f0       	mov    0xf0536b24,%al
f010715e:	83 e0 e0             	and    $0xffffffe0,%eax
f0107161:	a2 24 6b 53 f0       	mov    %al,0xf0536b24
f0107166:	a0 24 6b 53 f0       	mov    0xf0536b24,%al
f010716b:	83 e0 1f             	and    $0x1f,%eax
f010716e:	a2 24 6b 53 f0       	mov    %al,0xf0536b24
f0107173:	a0 25 6b 53 f0       	mov    0xf0536b25,%al
f0107178:	83 c8 0f             	or     $0xf,%eax
f010717b:	a2 25 6b 53 f0       	mov    %al,0xf0536b25
f0107180:	a0 25 6b 53 f0       	mov    0xf0536b25,%al
f0107185:	83 e0 ef             	and    $0xffffffef,%eax
f0107188:	a2 25 6b 53 f0       	mov    %al,0xf0536b25
f010718d:	a0 25 6b 53 f0       	mov    0xf0536b25,%al
f0107192:	83 c8 60             	or     $0x60,%eax
f0107195:	a2 25 6b 53 f0       	mov    %al,0xf0536b25
f010719a:	a0 25 6b 53 f0       	mov    0xf0536b25,%al
f010719f:	83 c8 80             	or     $0xffffff80,%eax
f01071a2:	a2 25 6b 53 f0       	mov    %al,0xf0536b25
f01071a7:	b8 dc 8d 10 f0       	mov    $0xf0108ddc,%eax
f01071ac:	c1 e8 10             	shr    $0x10,%eax
f01071af:	66 a3 26 6b 53 f0    	mov    %ax,0xf0536b26
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f01071b5:	b8 e6 8d 10 f0       	mov    $0xf0108de6,%eax
f01071ba:	66 a3 28 6b 53 f0    	mov    %ax,0xf0536b28
f01071c0:	66 c7 05 2a 6b 53 f0 	movw   $0x8,0xf0536b2a
f01071c7:	08 00 
f01071c9:	a0 2c 6b 53 f0       	mov    0xf0536b2c,%al
f01071ce:	83 e0 e0             	and    $0xffffffe0,%eax
f01071d1:	a2 2c 6b 53 f0       	mov    %al,0xf0536b2c
f01071d6:	a0 2c 6b 53 f0       	mov    0xf0536b2c,%al
f01071db:	83 e0 1f             	and    $0x1f,%eax
f01071de:	a2 2c 6b 53 f0       	mov    %al,0xf0536b2c
f01071e3:	a0 2d 6b 53 f0       	mov    0xf0536b2d,%al
f01071e8:	83 e0 f0             	and    $0xfffffff0,%eax
f01071eb:	83 c8 0e             	or     $0xe,%eax
f01071ee:	a2 2d 6b 53 f0       	mov    %al,0xf0536b2d
f01071f3:	a0 2d 6b 53 f0       	mov    0xf0536b2d,%al
f01071f8:	83 e0 ef             	and    $0xffffffef,%eax
f01071fb:	a2 2d 6b 53 f0       	mov    %al,0xf0536b2d
f0107200:	a0 2d 6b 53 f0       	mov    0xf0536b2d,%al
f0107205:	83 c8 60             	or     $0x60,%eax
f0107208:	a2 2d 6b 53 f0       	mov    %al,0xf0536b2d
f010720d:	a0 2d 6b 53 f0       	mov    0xf0536b2d,%al
f0107212:	83 c8 80             	or     $0xffffff80,%eax
f0107215:	a2 2d 6b 53 f0       	mov    %al,0xf0536b2d
f010721a:	b8 e6 8d 10 f0       	mov    $0xf0108de6,%eax
f010721f:	c1 e8 10             	shr    $0x10,%eax
f0107222:	66 a3 2e 6b 53 f0    	mov    %ax,0xf0536b2e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f0107228:	b8 f0 8d 10 f0       	mov    $0xf0108df0,%eax
f010722d:	66 a3 30 6b 53 f0    	mov    %ax,0xf0536b30
f0107233:	66 c7 05 32 6b 53 f0 	movw   $0x8,0xf0536b32
f010723a:	08 00 
f010723c:	a0 34 6b 53 f0       	mov    0xf0536b34,%al
f0107241:	83 e0 e0             	and    $0xffffffe0,%eax
f0107244:	a2 34 6b 53 f0       	mov    %al,0xf0536b34
f0107249:	a0 34 6b 53 f0       	mov    0xf0536b34,%al
f010724e:	83 e0 1f             	and    $0x1f,%eax
f0107251:	a2 34 6b 53 f0       	mov    %al,0xf0536b34
f0107256:	a0 35 6b 53 f0       	mov    0xf0536b35,%al
f010725b:	83 e0 f0             	and    $0xfffffff0,%eax
f010725e:	83 c8 0e             	or     $0xe,%eax
f0107261:	a2 35 6b 53 f0       	mov    %al,0xf0536b35
f0107266:	a0 35 6b 53 f0       	mov    0xf0536b35,%al
f010726b:	83 e0 ef             	and    $0xffffffef,%eax
f010726e:	a2 35 6b 53 f0       	mov    %al,0xf0536b35
f0107273:	a0 35 6b 53 f0       	mov    0xf0536b35,%al
f0107278:	83 c8 60             	or     $0x60,%eax
f010727b:	a2 35 6b 53 f0       	mov    %al,0xf0536b35
f0107280:	a0 35 6b 53 f0       	mov    0xf0536b35,%al
f0107285:	83 c8 80             	or     $0xffffff80,%eax
f0107288:	a2 35 6b 53 f0       	mov    %al,0xf0536b35
f010728d:	b8 f0 8d 10 f0       	mov    $0xf0108df0,%eax
f0107292:	c1 e8 10             	shr    $0x10,%eax
f0107295:	66 a3 36 6b 53 f0    	mov    %ax,0xf0536b36
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010729b:	b8 fa 8d 10 f0       	mov    $0xf0108dfa,%eax
f01072a0:	66 a3 38 6b 53 f0    	mov    %ax,0xf0536b38
f01072a6:	66 c7 05 3a 6b 53 f0 	movw   $0x8,0xf0536b3a
f01072ad:	08 00 
f01072af:	a0 3c 6b 53 f0       	mov    0xf0536b3c,%al
f01072b4:	83 e0 e0             	and    $0xffffffe0,%eax
f01072b7:	a2 3c 6b 53 f0       	mov    %al,0xf0536b3c
f01072bc:	a0 3c 6b 53 f0       	mov    0xf0536b3c,%al
f01072c1:	83 e0 1f             	and    $0x1f,%eax
f01072c4:	a2 3c 6b 53 f0       	mov    %al,0xf0536b3c
f01072c9:	a0 3d 6b 53 f0       	mov    0xf0536b3d,%al
f01072ce:	83 e0 f0             	and    $0xfffffff0,%eax
f01072d1:	83 c8 0e             	or     $0xe,%eax
f01072d4:	a2 3d 6b 53 f0       	mov    %al,0xf0536b3d
f01072d9:	a0 3d 6b 53 f0       	mov    0xf0536b3d,%al
f01072de:	83 e0 ef             	and    $0xffffffef,%eax
f01072e1:	a2 3d 6b 53 f0       	mov    %al,0xf0536b3d
f01072e6:	a0 3d 6b 53 f0       	mov    0xf0536b3d,%al
f01072eb:	83 c8 60             	or     $0x60,%eax
f01072ee:	a2 3d 6b 53 f0       	mov    %al,0xf0536b3d
f01072f3:	a0 3d 6b 53 f0       	mov    0xf0536b3d,%al
f01072f8:	83 c8 80             	or     $0xffffff80,%eax
f01072fb:	a2 3d 6b 53 f0       	mov    %al,0xf0536b3d
f0107300:	b8 fa 8d 10 f0       	mov    $0xf0108dfa,%eax
f0107305:	c1 e8 10             	shr    $0x10,%eax
f0107308:	66 a3 3e 6b 53 f0    	mov    %ax,0xf0536b3e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010730e:	b8 04 8e 10 f0       	mov    $0xf0108e04,%eax
f0107313:	66 a3 50 6b 53 f0    	mov    %ax,0xf0536b50
f0107319:	66 c7 05 52 6b 53 f0 	movw   $0x8,0xf0536b52
f0107320:	08 00 
f0107322:	a0 54 6b 53 f0       	mov    0xf0536b54,%al
f0107327:	83 e0 e0             	and    $0xffffffe0,%eax
f010732a:	a2 54 6b 53 f0       	mov    %al,0xf0536b54
f010732f:	a0 54 6b 53 f0       	mov    0xf0536b54,%al
f0107334:	83 e0 1f             	and    $0x1f,%eax
f0107337:	a2 54 6b 53 f0       	mov    %al,0xf0536b54
f010733c:	a0 55 6b 53 f0       	mov    0xf0536b55,%al
f0107341:	83 e0 f0             	and    $0xfffffff0,%eax
f0107344:	83 c8 0e             	or     $0xe,%eax
f0107347:	a2 55 6b 53 f0       	mov    %al,0xf0536b55
f010734c:	a0 55 6b 53 f0       	mov    0xf0536b55,%al
f0107351:	83 e0 ef             	and    $0xffffffef,%eax
f0107354:	a2 55 6b 53 f0       	mov    %al,0xf0536b55
f0107359:	a0 55 6b 53 f0       	mov    0xf0536b55,%al
f010735e:	83 c8 60             	or     $0x60,%eax
f0107361:	a2 55 6b 53 f0       	mov    %al,0xf0536b55
f0107366:	a0 55 6b 53 f0       	mov    0xf0536b55,%al
f010736b:	83 c8 80             	or     $0xffffff80,%eax
f010736e:	a2 55 6b 53 f0       	mov    %al,0xf0536b55
f0107373:	b8 04 8e 10 f0       	mov    $0xf0108e04,%eax
f0107378:	c1 e8 10             	shr    $0x10,%eax
f010737b:	66 a3 56 6b 53 f0    	mov    %ax,0xf0536b56
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f0107381:	b8 0c 8e 10 f0       	mov    $0xf0108e0c,%eax
f0107386:	66 a3 58 6b 53 f0    	mov    %ax,0xf0536b58
f010738c:	66 c7 05 5a 6b 53 f0 	movw   $0x8,0xf0536b5a
f0107393:	08 00 
f0107395:	a0 5c 6b 53 f0       	mov    0xf0536b5c,%al
f010739a:	83 e0 e0             	and    $0xffffffe0,%eax
f010739d:	a2 5c 6b 53 f0       	mov    %al,0xf0536b5c
f01073a2:	a0 5c 6b 53 f0       	mov    0xf0536b5c,%al
f01073a7:	83 e0 1f             	and    $0x1f,%eax
f01073aa:	a2 5c 6b 53 f0       	mov    %al,0xf0536b5c
f01073af:	a0 5d 6b 53 f0       	mov    0xf0536b5d,%al
f01073b4:	83 e0 f0             	and    $0xfffffff0,%eax
f01073b7:	83 c8 0e             	or     $0xe,%eax
f01073ba:	a2 5d 6b 53 f0       	mov    %al,0xf0536b5d
f01073bf:	a0 5d 6b 53 f0       	mov    0xf0536b5d,%al
f01073c4:	83 e0 ef             	and    $0xffffffef,%eax
f01073c7:	a2 5d 6b 53 f0       	mov    %al,0xf0536b5d
f01073cc:	a0 5d 6b 53 f0       	mov    0xf0536b5d,%al
f01073d1:	83 c8 60             	or     $0x60,%eax
f01073d4:	a2 5d 6b 53 f0       	mov    %al,0xf0536b5d
f01073d9:	a0 5d 6b 53 f0       	mov    0xf0536b5d,%al
f01073de:	83 c8 80             	or     $0xffffff80,%eax
f01073e1:	a2 5d 6b 53 f0       	mov    %al,0xf0536b5d
f01073e6:	b8 0c 8e 10 f0       	mov    $0xf0108e0c,%eax
f01073eb:	c1 e8 10             	shr    $0x10,%eax
f01073ee:	66 a3 5e 6b 53 f0    	mov    %ax,0xf0536b5e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f01073f4:	b8 10 8e 10 f0       	mov    $0xf0108e10,%eax
f01073f9:	66 a3 60 6b 53 f0    	mov    %ax,0xf0536b60
f01073ff:	66 c7 05 62 6b 53 f0 	movw   $0x8,0xf0536b62
f0107406:	08 00 
f0107408:	a0 64 6b 53 f0       	mov    0xf0536b64,%al
f010740d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107410:	a2 64 6b 53 f0       	mov    %al,0xf0536b64
f0107415:	a0 64 6b 53 f0       	mov    0xf0536b64,%al
f010741a:	83 e0 1f             	and    $0x1f,%eax
f010741d:	a2 64 6b 53 f0       	mov    %al,0xf0536b64
f0107422:	a0 65 6b 53 f0       	mov    0xf0536b65,%al
f0107427:	83 e0 f0             	and    $0xfffffff0,%eax
f010742a:	83 c8 0e             	or     $0xe,%eax
f010742d:	a2 65 6b 53 f0       	mov    %al,0xf0536b65
f0107432:	a0 65 6b 53 f0       	mov    0xf0536b65,%al
f0107437:	83 e0 ef             	and    $0xffffffef,%eax
f010743a:	a2 65 6b 53 f0       	mov    %al,0xf0536b65
f010743f:	a0 65 6b 53 f0       	mov    0xf0536b65,%al
f0107444:	83 c8 60             	or     $0x60,%eax
f0107447:	a2 65 6b 53 f0       	mov    %al,0xf0536b65
f010744c:	a0 65 6b 53 f0       	mov    0xf0536b65,%al
f0107451:	83 c8 80             	or     $0xffffff80,%eax
f0107454:	a2 65 6b 53 f0       	mov    %al,0xf0536b65
f0107459:	b8 10 8e 10 f0       	mov    $0xf0108e10,%eax
f010745e:	c1 e8 10             	shr    $0x10,%eax
f0107461:	66 a3 66 6b 53 f0    	mov    %ax,0xf0536b66
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f0107467:	b8 14 8e 10 f0       	mov    $0xf0108e14,%eax
f010746c:	66 a3 68 6b 53 f0    	mov    %ax,0xf0536b68
f0107472:	66 c7 05 6a 6b 53 f0 	movw   $0x8,0xf0536b6a
f0107479:	08 00 
f010747b:	a0 6c 6b 53 f0       	mov    0xf0536b6c,%al
f0107480:	83 e0 e0             	and    $0xffffffe0,%eax
f0107483:	a2 6c 6b 53 f0       	mov    %al,0xf0536b6c
f0107488:	a0 6c 6b 53 f0       	mov    0xf0536b6c,%al
f010748d:	83 e0 1f             	and    $0x1f,%eax
f0107490:	a2 6c 6b 53 f0       	mov    %al,0xf0536b6c
f0107495:	a0 6d 6b 53 f0       	mov    0xf0536b6d,%al
f010749a:	83 e0 f0             	and    $0xfffffff0,%eax
f010749d:	83 c8 0e             	or     $0xe,%eax
f01074a0:	a2 6d 6b 53 f0       	mov    %al,0xf0536b6d
f01074a5:	a0 6d 6b 53 f0       	mov    0xf0536b6d,%al
f01074aa:	83 e0 ef             	and    $0xffffffef,%eax
f01074ad:	a2 6d 6b 53 f0       	mov    %al,0xf0536b6d
f01074b2:	a0 6d 6b 53 f0       	mov    0xf0536b6d,%al
f01074b7:	83 c8 60             	or     $0x60,%eax
f01074ba:	a2 6d 6b 53 f0       	mov    %al,0xf0536b6d
f01074bf:	a0 6d 6b 53 f0       	mov    0xf0536b6d,%al
f01074c4:	83 c8 80             	or     $0xffffff80,%eax
f01074c7:	a2 6d 6b 53 f0       	mov    %al,0xf0536b6d
f01074cc:	b8 14 8e 10 f0       	mov    $0xf0108e14,%eax
f01074d1:	c1 e8 10             	shr    $0x10,%eax
f01074d4:	66 a3 6e 6b 53 f0    	mov    %ax,0xf0536b6e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f01074da:	b8 18 8e 10 f0       	mov    $0xf0108e18,%eax
f01074df:	66 a3 80 6b 53 f0    	mov    %ax,0xf0536b80
f01074e5:	66 c7 05 82 6b 53 f0 	movw   $0x8,0xf0536b82
f01074ec:	08 00 
f01074ee:	a0 84 6b 53 f0       	mov    0xf0536b84,%al
f01074f3:	83 e0 e0             	and    $0xffffffe0,%eax
f01074f6:	a2 84 6b 53 f0       	mov    %al,0xf0536b84
f01074fb:	a0 84 6b 53 f0       	mov    0xf0536b84,%al
f0107500:	83 e0 1f             	and    $0x1f,%eax
f0107503:	a2 84 6b 53 f0       	mov    %al,0xf0536b84
f0107508:	a0 85 6b 53 f0       	mov    0xf0536b85,%al
f010750d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107510:	83 c8 0e             	or     $0xe,%eax
f0107513:	a2 85 6b 53 f0       	mov    %al,0xf0536b85
f0107518:	a0 85 6b 53 f0       	mov    0xf0536b85,%al
f010751d:	83 e0 ef             	and    $0xffffffef,%eax
f0107520:	a2 85 6b 53 f0       	mov    %al,0xf0536b85
f0107525:	a0 85 6b 53 f0       	mov    0xf0536b85,%al
f010752a:	83 c8 60             	or     $0x60,%eax
f010752d:	a2 85 6b 53 f0       	mov    %al,0xf0536b85
f0107532:	a0 85 6b 53 f0       	mov    0xf0536b85,%al
f0107537:	83 c8 80             	or     $0xffffff80,%eax
f010753a:	a2 85 6b 53 f0       	mov    %al,0xf0536b85
f010753f:	b8 18 8e 10 f0       	mov    $0xf0108e18,%eax
f0107544:	c1 e8 10             	shr    $0x10,%eax
f0107547:	66 a3 86 6b 53 f0    	mov    %ax,0xf0536b86
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010754d:	b8 1e 8e 10 f0       	mov    $0xf0108e1e,%eax
f0107552:	66 a3 88 6b 53 f0    	mov    %ax,0xf0536b88
f0107558:	66 c7 05 8a 6b 53 f0 	movw   $0x8,0xf0536b8a
f010755f:	08 00 
f0107561:	a0 8c 6b 53 f0       	mov    0xf0536b8c,%al
f0107566:	83 e0 e0             	and    $0xffffffe0,%eax
f0107569:	a2 8c 6b 53 f0       	mov    %al,0xf0536b8c
f010756e:	a0 8c 6b 53 f0       	mov    0xf0536b8c,%al
f0107573:	83 e0 1f             	and    $0x1f,%eax
f0107576:	a2 8c 6b 53 f0       	mov    %al,0xf0536b8c
f010757b:	a0 8d 6b 53 f0       	mov    0xf0536b8d,%al
f0107580:	83 e0 f0             	and    $0xfffffff0,%eax
f0107583:	83 c8 0e             	or     $0xe,%eax
f0107586:	a2 8d 6b 53 f0       	mov    %al,0xf0536b8d
f010758b:	a0 8d 6b 53 f0       	mov    0xf0536b8d,%al
f0107590:	83 e0 ef             	and    $0xffffffef,%eax
f0107593:	a2 8d 6b 53 f0       	mov    %al,0xf0536b8d
f0107598:	a0 8d 6b 53 f0       	mov    0xf0536b8d,%al
f010759d:	83 c8 60             	or     $0x60,%eax
f01075a0:	a2 8d 6b 53 f0       	mov    %al,0xf0536b8d
f01075a5:	a0 8d 6b 53 f0       	mov    0xf0536b8d,%al
f01075aa:	83 c8 80             	or     $0xffffff80,%eax
f01075ad:	a2 8d 6b 53 f0       	mov    %al,0xf0536b8d
f01075b2:	b8 1e 8e 10 f0       	mov    $0xf0108e1e,%eax
f01075b7:	c1 e8 10             	shr    $0x10,%eax
f01075ba:	66 a3 8e 6b 53 f0    	mov    %ax,0xf0536b8e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f01075c0:	b8 22 8e 10 f0       	mov    $0xf0108e22,%eax
f01075c5:	66 a3 90 6b 53 f0    	mov    %ax,0xf0536b90
f01075cb:	66 c7 05 92 6b 53 f0 	movw   $0x8,0xf0536b92
f01075d2:	08 00 
f01075d4:	a0 94 6b 53 f0       	mov    0xf0536b94,%al
f01075d9:	83 e0 e0             	and    $0xffffffe0,%eax
f01075dc:	a2 94 6b 53 f0       	mov    %al,0xf0536b94
f01075e1:	a0 94 6b 53 f0       	mov    0xf0536b94,%al
f01075e6:	83 e0 1f             	and    $0x1f,%eax
f01075e9:	a2 94 6b 53 f0       	mov    %al,0xf0536b94
f01075ee:	a0 95 6b 53 f0       	mov    0xf0536b95,%al
f01075f3:	83 e0 f0             	and    $0xfffffff0,%eax
f01075f6:	83 c8 0e             	or     $0xe,%eax
f01075f9:	a2 95 6b 53 f0       	mov    %al,0xf0536b95
f01075fe:	a0 95 6b 53 f0       	mov    0xf0536b95,%al
f0107603:	83 e0 ef             	and    $0xffffffef,%eax
f0107606:	a2 95 6b 53 f0       	mov    %al,0xf0536b95
f010760b:	a0 95 6b 53 f0       	mov    0xf0536b95,%al
f0107610:	83 c8 60             	or     $0x60,%eax
f0107613:	a2 95 6b 53 f0       	mov    %al,0xf0536b95
f0107618:	a0 95 6b 53 f0       	mov    0xf0536b95,%al
f010761d:	83 c8 80             	or     $0xffffff80,%eax
f0107620:	a2 95 6b 53 f0       	mov    %al,0xf0536b95
f0107625:	b8 22 8e 10 f0       	mov    $0xf0108e22,%eax
f010762a:	c1 e8 10             	shr    $0x10,%eax
f010762d:	66 a3 96 6b 53 f0    	mov    %ax,0xf0536b96
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f0107633:	b8 28 8e 10 f0       	mov    $0xf0108e28,%eax
f0107638:	66 a3 98 6b 53 f0    	mov    %ax,0xf0536b98
f010763e:	66 c7 05 9a 6b 53 f0 	movw   $0x8,0xf0536b9a
f0107645:	08 00 
f0107647:	a0 9c 6b 53 f0       	mov    0xf0536b9c,%al
f010764c:	83 e0 e0             	and    $0xffffffe0,%eax
f010764f:	a2 9c 6b 53 f0       	mov    %al,0xf0536b9c
f0107654:	a0 9c 6b 53 f0       	mov    0xf0536b9c,%al
f0107659:	83 e0 1f             	and    $0x1f,%eax
f010765c:	a2 9c 6b 53 f0       	mov    %al,0xf0536b9c
f0107661:	a0 9d 6b 53 f0       	mov    0xf0536b9d,%al
f0107666:	83 e0 f0             	and    $0xfffffff0,%eax
f0107669:	83 c8 0e             	or     $0xe,%eax
f010766c:	a2 9d 6b 53 f0       	mov    %al,0xf0536b9d
f0107671:	a0 9d 6b 53 f0       	mov    0xf0536b9d,%al
f0107676:	83 e0 ef             	and    $0xffffffef,%eax
f0107679:	a2 9d 6b 53 f0       	mov    %al,0xf0536b9d
f010767e:	a0 9d 6b 53 f0       	mov    0xf0536b9d,%al
f0107683:	83 c8 60             	or     $0x60,%eax
f0107686:	a2 9d 6b 53 f0       	mov    %al,0xf0536b9d
f010768b:	a0 9d 6b 53 f0       	mov    0xf0536b9d,%al
f0107690:	83 c8 80             	or     $0xffffff80,%eax
f0107693:	a2 9d 6b 53 f0       	mov    %al,0xf0536b9d
f0107698:	b8 28 8e 10 f0       	mov    $0xf0108e28,%eax
f010769d:	c1 e8 10             	shr    $0x10,%eax
f01076a0:	66 a3 9e 6b 53 f0    	mov    %ax,0xf0536b9e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f01076a6:	b8 2e 8e 10 f0       	mov    $0xf0108e2e,%eax
f01076ab:	66 a3 00 6c 53 f0    	mov    %ax,0xf0536c00
f01076b1:	66 c7 05 02 6c 53 f0 	movw   $0x8,0xf0536c02
f01076b8:	08 00 
f01076ba:	a0 04 6c 53 f0       	mov    0xf0536c04,%al
f01076bf:	83 e0 e0             	and    $0xffffffe0,%eax
f01076c2:	a2 04 6c 53 f0       	mov    %al,0xf0536c04
f01076c7:	a0 04 6c 53 f0       	mov    0xf0536c04,%al
f01076cc:	83 e0 1f             	and    $0x1f,%eax
f01076cf:	a2 04 6c 53 f0       	mov    %al,0xf0536c04
f01076d4:	a0 05 6c 53 f0       	mov    0xf0536c05,%al
f01076d9:	83 e0 f0             	and    $0xfffffff0,%eax
f01076dc:	83 c8 0e             	or     $0xe,%eax
f01076df:	a2 05 6c 53 f0       	mov    %al,0xf0536c05
f01076e4:	a0 05 6c 53 f0       	mov    0xf0536c05,%al
f01076e9:	83 e0 ef             	and    $0xffffffef,%eax
f01076ec:	a2 05 6c 53 f0       	mov    %al,0xf0536c05
f01076f1:	a0 05 6c 53 f0       	mov    0xf0536c05,%al
f01076f6:	83 c8 60             	or     $0x60,%eax
f01076f9:	a2 05 6c 53 f0       	mov    %al,0xf0536c05
f01076fe:	a0 05 6c 53 f0       	mov    0xf0536c05,%al
f0107703:	83 c8 80             	or     $0xffffff80,%eax
f0107706:	a2 05 6c 53 f0       	mov    %al,0xf0536c05
f010770b:	b8 2e 8e 10 f0       	mov    $0xf0108e2e,%eax
f0107710:	c1 e8 10             	shr    $0x10,%eax
f0107713:	66 a3 06 6c 53 f0    	mov    %ax,0xf0536c06
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f0107719:	b8 34 8e 10 f0       	mov    $0xf0108e34,%eax
f010771e:	66 a3 08 6c 53 f0    	mov    %ax,0xf0536c08
f0107724:	66 c7 05 0a 6c 53 f0 	movw   $0x8,0xf0536c0a
f010772b:	08 00 
f010772d:	a0 0c 6c 53 f0       	mov    0xf0536c0c,%al
f0107732:	83 e0 e0             	and    $0xffffffe0,%eax
f0107735:	a2 0c 6c 53 f0       	mov    %al,0xf0536c0c
f010773a:	a0 0c 6c 53 f0       	mov    0xf0536c0c,%al
f010773f:	83 e0 1f             	and    $0x1f,%eax
f0107742:	a2 0c 6c 53 f0       	mov    %al,0xf0536c0c
f0107747:	a0 0d 6c 53 f0       	mov    0xf0536c0d,%al
f010774c:	83 e0 f0             	and    $0xfffffff0,%eax
f010774f:	83 c8 0e             	or     $0xe,%eax
f0107752:	a2 0d 6c 53 f0       	mov    %al,0xf0536c0d
f0107757:	a0 0d 6c 53 f0       	mov    0xf0536c0d,%al
f010775c:	83 e0 ef             	and    $0xffffffef,%eax
f010775f:	a2 0d 6c 53 f0       	mov    %al,0xf0536c0d
f0107764:	a0 0d 6c 53 f0       	mov    0xf0536c0d,%al
f0107769:	83 c8 60             	or     $0x60,%eax
f010776c:	a2 0d 6c 53 f0       	mov    %al,0xf0536c0d
f0107771:	a0 0d 6c 53 f0       	mov    0xf0536c0d,%al
f0107776:	83 c8 80             	or     $0xffffff80,%eax
f0107779:	a2 0d 6c 53 f0       	mov    %al,0xf0536c0d
f010777e:	b8 34 8e 10 f0       	mov    $0xf0108e34,%eax
f0107783:	c1 e8 10             	shr    $0x10,%eax
f0107786:	66 a3 0e 6c 53 f0    	mov    %ax,0xf0536c0e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010778c:	b8 3a 8e 10 f0       	mov    $0xf0108e3a,%eax
f0107791:	66 a3 10 6c 53 f0    	mov    %ax,0xf0536c10
f0107797:	66 c7 05 12 6c 53 f0 	movw   $0x8,0xf0536c12
f010779e:	08 00 
f01077a0:	a0 14 6c 53 f0       	mov    0xf0536c14,%al
f01077a5:	83 e0 e0             	and    $0xffffffe0,%eax
f01077a8:	a2 14 6c 53 f0       	mov    %al,0xf0536c14
f01077ad:	a0 14 6c 53 f0       	mov    0xf0536c14,%al
f01077b2:	83 e0 1f             	and    $0x1f,%eax
f01077b5:	a2 14 6c 53 f0       	mov    %al,0xf0536c14
f01077ba:	a0 15 6c 53 f0       	mov    0xf0536c15,%al
f01077bf:	83 e0 f0             	and    $0xfffffff0,%eax
f01077c2:	83 c8 0e             	or     $0xe,%eax
f01077c5:	a2 15 6c 53 f0       	mov    %al,0xf0536c15
f01077ca:	a0 15 6c 53 f0       	mov    0xf0536c15,%al
f01077cf:	83 e0 ef             	and    $0xffffffef,%eax
f01077d2:	a2 15 6c 53 f0       	mov    %al,0xf0536c15
f01077d7:	a0 15 6c 53 f0       	mov    0xf0536c15,%al
f01077dc:	83 c8 60             	or     $0x60,%eax
f01077df:	a2 15 6c 53 f0       	mov    %al,0xf0536c15
f01077e4:	a0 15 6c 53 f0       	mov    0xf0536c15,%al
f01077e9:	83 c8 80             	or     $0xffffff80,%eax
f01077ec:	a2 15 6c 53 f0       	mov    %al,0xf0536c15
f01077f1:	b8 3a 8e 10 f0       	mov    $0xf0108e3a,%eax
f01077f6:	c1 e8 10             	shr    $0x10,%eax
f01077f9:	66 a3 16 6c 53 f0    	mov    %ax,0xf0536c16
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f01077ff:	b8 40 8e 10 f0       	mov    $0xf0108e40,%eax
f0107804:	66 a3 18 6c 53 f0    	mov    %ax,0xf0536c18
f010780a:	66 c7 05 1a 6c 53 f0 	movw   $0x8,0xf0536c1a
f0107811:	08 00 
f0107813:	a0 1c 6c 53 f0       	mov    0xf0536c1c,%al
f0107818:	83 e0 e0             	and    $0xffffffe0,%eax
f010781b:	a2 1c 6c 53 f0       	mov    %al,0xf0536c1c
f0107820:	a0 1c 6c 53 f0       	mov    0xf0536c1c,%al
f0107825:	83 e0 1f             	and    $0x1f,%eax
f0107828:	a2 1c 6c 53 f0       	mov    %al,0xf0536c1c
f010782d:	a0 1d 6c 53 f0       	mov    0xf0536c1d,%al
f0107832:	83 e0 f0             	and    $0xfffffff0,%eax
f0107835:	83 c8 0e             	or     $0xe,%eax
f0107838:	a2 1d 6c 53 f0       	mov    %al,0xf0536c1d
f010783d:	a0 1d 6c 53 f0       	mov    0xf0536c1d,%al
f0107842:	83 e0 ef             	and    $0xffffffef,%eax
f0107845:	a2 1d 6c 53 f0       	mov    %al,0xf0536c1d
f010784a:	a0 1d 6c 53 f0       	mov    0xf0536c1d,%al
f010784f:	83 c8 60             	or     $0x60,%eax
f0107852:	a2 1d 6c 53 f0       	mov    %al,0xf0536c1d
f0107857:	a0 1d 6c 53 f0       	mov    0xf0536c1d,%al
f010785c:	83 c8 80             	or     $0xffffff80,%eax
f010785f:	a2 1d 6c 53 f0       	mov    %al,0xf0536c1d
f0107864:	b8 40 8e 10 f0       	mov    $0xf0108e40,%eax
f0107869:	c1 e8 10             	shr    $0x10,%eax
f010786c:	66 a3 1e 6c 53 f0    	mov    %ax,0xf0536c1e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0107872:	b8 46 8e 10 f0       	mov    $0xf0108e46,%eax
f0107877:	66 a3 20 6c 53 f0    	mov    %ax,0xf0536c20
f010787d:	66 c7 05 22 6c 53 f0 	movw   $0x8,0xf0536c22
f0107884:	08 00 
f0107886:	a0 24 6c 53 f0       	mov    0xf0536c24,%al
f010788b:	83 e0 e0             	and    $0xffffffe0,%eax
f010788e:	a2 24 6c 53 f0       	mov    %al,0xf0536c24
f0107893:	a0 24 6c 53 f0       	mov    0xf0536c24,%al
f0107898:	83 e0 1f             	and    $0x1f,%eax
f010789b:	a2 24 6c 53 f0       	mov    %al,0xf0536c24
f01078a0:	a0 25 6c 53 f0       	mov    0xf0536c25,%al
f01078a5:	83 e0 f0             	and    $0xfffffff0,%eax
f01078a8:	83 c8 0e             	or     $0xe,%eax
f01078ab:	a2 25 6c 53 f0       	mov    %al,0xf0536c25
f01078b0:	a0 25 6c 53 f0       	mov    0xf0536c25,%al
f01078b5:	83 e0 ef             	and    $0xffffffef,%eax
f01078b8:	a2 25 6c 53 f0       	mov    %al,0xf0536c25
f01078bd:	a0 25 6c 53 f0       	mov    0xf0536c25,%al
f01078c2:	83 c8 60             	or     $0x60,%eax
f01078c5:	a2 25 6c 53 f0       	mov    %al,0xf0536c25
f01078ca:	a0 25 6c 53 f0       	mov    0xf0536c25,%al
f01078cf:	83 c8 80             	or     $0xffffff80,%eax
f01078d2:	a2 25 6c 53 f0       	mov    %al,0xf0536c25
f01078d7:	b8 46 8e 10 f0       	mov    $0xf0108e46,%eax
f01078dc:	c1 e8 10             	shr    $0x10,%eax
f01078df:	66 a3 26 6c 53 f0    	mov    %ax,0xf0536c26
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f01078e5:	b8 4c 8e 10 f0       	mov    $0xf0108e4c,%eax
f01078ea:	66 a3 28 6c 53 f0    	mov    %ax,0xf0536c28
f01078f0:	66 c7 05 2a 6c 53 f0 	movw   $0x8,0xf0536c2a
f01078f7:	08 00 
f01078f9:	a0 2c 6c 53 f0       	mov    0xf0536c2c,%al
f01078fe:	83 e0 e0             	and    $0xffffffe0,%eax
f0107901:	a2 2c 6c 53 f0       	mov    %al,0xf0536c2c
f0107906:	a0 2c 6c 53 f0       	mov    0xf0536c2c,%al
f010790b:	83 e0 1f             	and    $0x1f,%eax
f010790e:	a2 2c 6c 53 f0       	mov    %al,0xf0536c2c
f0107913:	a0 2d 6c 53 f0       	mov    0xf0536c2d,%al
f0107918:	83 e0 f0             	and    $0xfffffff0,%eax
f010791b:	83 c8 0e             	or     $0xe,%eax
f010791e:	a2 2d 6c 53 f0       	mov    %al,0xf0536c2d
f0107923:	a0 2d 6c 53 f0       	mov    0xf0536c2d,%al
f0107928:	83 e0 ef             	and    $0xffffffef,%eax
f010792b:	a2 2d 6c 53 f0       	mov    %al,0xf0536c2d
f0107930:	a0 2d 6c 53 f0       	mov    0xf0536c2d,%al
f0107935:	83 c8 60             	or     $0x60,%eax
f0107938:	a2 2d 6c 53 f0       	mov    %al,0xf0536c2d
f010793d:	a0 2d 6c 53 f0       	mov    0xf0536c2d,%al
f0107942:	83 c8 80             	or     $0xffffff80,%eax
f0107945:	a2 2d 6c 53 f0       	mov    %al,0xf0536c2d
f010794a:	b8 4c 8e 10 f0       	mov    $0xf0108e4c,%eax
f010794f:	c1 e8 10             	shr    $0x10,%eax
f0107952:	66 a3 2e 6c 53 f0    	mov    %ax,0xf0536c2e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f0107958:	b8 52 8e 10 f0       	mov    $0xf0108e52,%eax
f010795d:	66 a3 30 6c 53 f0    	mov    %ax,0xf0536c30
f0107963:	66 c7 05 32 6c 53 f0 	movw   $0x8,0xf0536c32
f010796a:	08 00 
f010796c:	a0 34 6c 53 f0       	mov    0xf0536c34,%al
f0107971:	83 e0 e0             	and    $0xffffffe0,%eax
f0107974:	a2 34 6c 53 f0       	mov    %al,0xf0536c34
f0107979:	a0 34 6c 53 f0       	mov    0xf0536c34,%al
f010797e:	83 e0 1f             	and    $0x1f,%eax
f0107981:	a2 34 6c 53 f0       	mov    %al,0xf0536c34
f0107986:	a0 35 6c 53 f0       	mov    0xf0536c35,%al
f010798b:	83 e0 f0             	and    $0xfffffff0,%eax
f010798e:	83 c8 0e             	or     $0xe,%eax
f0107991:	a2 35 6c 53 f0       	mov    %al,0xf0536c35
f0107996:	a0 35 6c 53 f0       	mov    0xf0536c35,%al
f010799b:	83 e0 ef             	and    $0xffffffef,%eax
f010799e:	a2 35 6c 53 f0       	mov    %al,0xf0536c35
f01079a3:	a0 35 6c 53 f0       	mov    0xf0536c35,%al
f01079a8:	83 c8 60             	or     $0x60,%eax
f01079ab:	a2 35 6c 53 f0       	mov    %al,0xf0536c35
f01079b0:	a0 35 6c 53 f0       	mov    0xf0536c35,%al
f01079b5:	83 c8 80             	or     $0xffffff80,%eax
f01079b8:	a2 35 6c 53 f0       	mov    %al,0xf0536c35
f01079bd:	b8 52 8e 10 f0       	mov    $0xf0108e52,%eax
f01079c2:	c1 e8 10             	shr    $0x10,%eax
f01079c5:	66 a3 36 6c 53 f0    	mov    %ax,0xf0536c36
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f01079cb:	b8 58 8e 10 f0       	mov    $0xf0108e58,%eax
f01079d0:	66 a3 38 6c 53 f0    	mov    %ax,0xf0536c38
f01079d6:	66 c7 05 3a 6c 53 f0 	movw   $0x8,0xf0536c3a
f01079dd:	08 00 
f01079df:	a0 3c 6c 53 f0       	mov    0xf0536c3c,%al
f01079e4:	83 e0 e0             	and    $0xffffffe0,%eax
f01079e7:	a2 3c 6c 53 f0       	mov    %al,0xf0536c3c
f01079ec:	a0 3c 6c 53 f0       	mov    0xf0536c3c,%al
f01079f1:	83 e0 1f             	and    $0x1f,%eax
f01079f4:	a2 3c 6c 53 f0       	mov    %al,0xf0536c3c
f01079f9:	a0 3d 6c 53 f0       	mov    0xf0536c3d,%al
f01079fe:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a01:	83 c8 0e             	or     $0xe,%eax
f0107a04:	a2 3d 6c 53 f0       	mov    %al,0xf0536c3d
f0107a09:	a0 3d 6c 53 f0       	mov    0xf0536c3d,%al
f0107a0e:	83 e0 ef             	and    $0xffffffef,%eax
f0107a11:	a2 3d 6c 53 f0       	mov    %al,0xf0536c3d
f0107a16:	a0 3d 6c 53 f0       	mov    0xf0536c3d,%al
f0107a1b:	83 c8 60             	or     $0x60,%eax
f0107a1e:	a2 3d 6c 53 f0       	mov    %al,0xf0536c3d
f0107a23:	a0 3d 6c 53 f0       	mov    0xf0536c3d,%al
f0107a28:	83 c8 80             	or     $0xffffff80,%eax
f0107a2b:	a2 3d 6c 53 f0       	mov    %al,0xf0536c3d
f0107a30:	b8 58 8e 10 f0       	mov    $0xf0108e58,%eax
f0107a35:	c1 e8 10             	shr    $0x10,%eax
f0107a38:	66 a3 3e 6c 53 f0    	mov    %ax,0xf0536c3e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f0107a3e:	b8 5e 8e 10 f0       	mov    $0xf0108e5e,%eax
f0107a43:	66 a3 40 6c 53 f0    	mov    %ax,0xf0536c40
f0107a49:	66 c7 05 42 6c 53 f0 	movw   $0x8,0xf0536c42
f0107a50:	08 00 
f0107a52:	a0 44 6c 53 f0       	mov    0xf0536c44,%al
f0107a57:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a5a:	a2 44 6c 53 f0       	mov    %al,0xf0536c44
f0107a5f:	a0 44 6c 53 f0       	mov    0xf0536c44,%al
f0107a64:	83 e0 1f             	and    $0x1f,%eax
f0107a67:	a2 44 6c 53 f0       	mov    %al,0xf0536c44
f0107a6c:	a0 45 6c 53 f0       	mov    0xf0536c45,%al
f0107a71:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a74:	83 c8 0e             	or     $0xe,%eax
f0107a77:	a2 45 6c 53 f0       	mov    %al,0xf0536c45
f0107a7c:	a0 45 6c 53 f0       	mov    0xf0536c45,%al
f0107a81:	83 e0 ef             	and    $0xffffffef,%eax
f0107a84:	a2 45 6c 53 f0       	mov    %al,0xf0536c45
f0107a89:	a0 45 6c 53 f0       	mov    0xf0536c45,%al
f0107a8e:	83 c8 60             	or     $0x60,%eax
f0107a91:	a2 45 6c 53 f0       	mov    %al,0xf0536c45
f0107a96:	a0 45 6c 53 f0       	mov    0xf0536c45,%al
f0107a9b:	83 c8 80             	or     $0xffffff80,%eax
f0107a9e:	a2 45 6c 53 f0       	mov    %al,0xf0536c45
f0107aa3:	b8 5e 8e 10 f0       	mov    $0xf0108e5e,%eax
f0107aa8:	c1 e8 10             	shr    $0x10,%eax
f0107aab:	66 a3 46 6c 53 f0    	mov    %ax,0xf0536c46
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0107ab1:	b8 64 8e 10 f0       	mov    $0xf0108e64,%eax
f0107ab6:	66 a3 48 6c 53 f0    	mov    %ax,0xf0536c48
f0107abc:	66 c7 05 4a 6c 53 f0 	movw   $0x8,0xf0536c4a
f0107ac3:	08 00 
f0107ac5:	a0 4c 6c 53 f0       	mov    0xf0536c4c,%al
f0107aca:	83 e0 e0             	and    $0xffffffe0,%eax
f0107acd:	a2 4c 6c 53 f0       	mov    %al,0xf0536c4c
f0107ad2:	a0 4c 6c 53 f0       	mov    0xf0536c4c,%al
f0107ad7:	83 e0 1f             	and    $0x1f,%eax
f0107ada:	a2 4c 6c 53 f0       	mov    %al,0xf0536c4c
f0107adf:	a0 4d 6c 53 f0       	mov    0xf0536c4d,%al
f0107ae4:	83 e0 f0             	and    $0xfffffff0,%eax
f0107ae7:	83 c8 0e             	or     $0xe,%eax
f0107aea:	a2 4d 6c 53 f0       	mov    %al,0xf0536c4d
f0107aef:	a0 4d 6c 53 f0       	mov    0xf0536c4d,%al
f0107af4:	83 e0 ef             	and    $0xffffffef,%eax
f0107af7:	a2 4d 6c 53 f0       	mov    %al,0xf0536c4d
f0107afc:	a0 4d 6c 53 f0       	mov    0xf0536c4d,%al
f0107b01:	83 c8 60             	or     $0x60,%eax
f0107b04:	a2 4d 6c 53 f0       	mov    %al,0xf0536c4d
f0107b09:	a0 4d 6c 53 f0       	mov    0xf0536c4d,%al
f0107b0e:	83 c8 80             	or     $0xffffff80,%eax
f0107b11:	a2 4d 6c 53 f0       	mov    %al,0xf0536c4d
f0107b16:	b8 64 8e 10 f0       	mov    $0xf0108e64,%eax
f0107b1b:	c1 e8 10             	shr    $0x10,%eax
f0107b1e:	66 a3 4e 6c 53 f0    	mov    %ax,0xf0536c4e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f0107b24:	b8 6a 8e 10 f0       	mov    $0xf0108e6a,%eax
f0107b29:	66 a3 50 6c 53 f0    	mov    %ax,0xf0536c50
f0107b2f:	66 c7 05 52 6c 53 f0 	movw   $0x8,0xf0536c52
f0107b36:	08 00 
f0107b38:	a0 54 6c 53 f0       	mov    0xf0536c54,%al
f0107b3d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b40:	a2 54 6c 53 f0       	mov    %al,0xf0536c54
f0107b45:	a0 54 6c 53 f0       	mov    0xf0536c54,%al
f0107b4a:	83 e0 1f             	and    $0x1f,%eax
f0107b4d:	a2 54 6c 53 f0       	mov    %al,0xf0536c54
f0107b52:	a0 55 6c 53 f0       	mov    0xf0536c55,%al
f0107b57:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b5a:	83 c8 0e             	or     $0xe,%eax
f0107b5d:	a2 55 6c 53 f0       	mov    %al,0xf0536c55
f0107b62:	a0 55 6c 53 f0       	mov    0xf0536c55,%al
f0107b67:	83 e0 ef             	and    $0xffffffef,%eax
f0107b6a:	a2 55 6c 53 f0       	mov    %al,0xf0536c55
f0107b6f:	a0 55 6c 53 f0       	mov    0xf0536c55,%al
f0107b74:	83 c8 60             	or     $0x60,%eax
f0107b77:	a2 55 6c 53 f0       	mov    %al,0xf0536c55
f0107b7c:	a0 55 6c 53 f0       	mov    0xf0536c55,%al
f0107b81:	83 c8 80             	or     $0xffffff80,%eax
f0107b84:	a2 55 6c 53 f0       	mov    %al,0xf0536c55
f0107b89:	b8 6a 8e 10 f0       	mov    $0xf0108e6a,%eax
f0107b8e:	c1 e8 10             	shr    $0x10,%eax
f0107b91:	66 a3 56 6c 53 f0    	mov    %ax,0xf0536c56
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f0107b97:	b8 70 8e 10 f0       	mov    $0xf0108e70,%eax
f0107b9c:	66 a3 58 6c 53 f0    	mov    %ax,0xf0536c58
f0107ba2:	66 c7 05 5a 6c 53 f0 	movw   $0x8,0xf0536c5a
f0107ba9:	08 00 
f0107bab:	a0 5c 6c 53 f0       	mov    0xf0536c5c,%al
f0107bb0:	83 e0 e0             	and    $0xffffffe0,%eax
f0107bb3:	a2 5c 6c 53 f0       	mov    %al,0xf0536c5c
f0107bb8:	a0 5c 6c 53 f0       	mov    0xf0536c5c,%al
f0107bbd:	83 e0 1f             	and    $0x1f,%eax
f0107bc0:	a2 5c 6c 53 f0       	mov    %al,0xf0536c5c
f0107bc5:	a0 5d 6c 53 f0       	mov    0xf0536c5d,%al
f0107bca:	83 e0 f0             	and    $0xfffffff0,%eax
f0107bcd:	83 c8 0e             	or     $0xe,%eax
f0107bd0:	a2 5d 6c 53 f0       	mov    %al,0xf0536c5d
f0107bd5:	a0 5d 6c 53 f0       	mov    0xf0536c5d,%al
f0107bda:	83 e0 ef             	and    $0xffffffef,%eax
f0107bdd:	a2 5d 6c 53 f0       	mov    %al,0xf0536c5d
f0107be2:	a0 5d 6c 53 f0       	mov    0xf0536c5d,%al
f0107be7:	83 c8 60             	or     $0x60,%eax
f0107bea:	a2 5d 6c 53 f0       	mov    %al,0xf0536c5d
f0107bef:	a0 5d 6c 53 f0       	mov    0xf0536c5d,%al
f0107bf4:	83 c8 80             	or     $0xffffff80,%eax
f0107bf7:	a2 5d 6c 53 f0       	mov    %al,0xf0536c5d
f0107bfc:	b8 70 8e 10 f0       	mov    $0xf0108e70,%eax
f0107c01:	c1 e8 10             	shr    $0x10,%eax
f0107c04:	66 a3 5e 6c 53 f0    	mov    %ax,0xf0536c5e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f0107c0a:	b8 76 8e 10 f0       	mov    $0xf0108e76,%eax
f0107c0f:	66 a3 60 6c 53 f0    	mov    %ax,0xf0536c60
f0107c15:	66 c7 05 62 6c 53 f0 	movw   $0x8,0xf0536c62
f0107c1c:	08 00 
f0107c1e:	a0 64 6c 53 f0       	mov    0xf0536c64,%al
f0107c23:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c26:	a2 64 6c 53 f0       	mov    %al,0xf0536c64
f0107c2b:	a0 64 6c 53 f0       	mov    0xf0536c64,%al
f0107c30:	83 e0 1f             	and    $0x1f,%eax
f0107c33:	a2 64 6c 53 f0       	mov    %al,0xf0536c64
f0107c38:	a0 65 6c 53 f0       	mov    0xf0536c65,%al
f0107c3d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c40:	83 c8 0e             	or     $0xe,%eax
f0107c43:	a2 65 6c 53 f0       	mov    %al,0xf0536c65
f0107c48:	a0 65 6c 53 f0       	mov    0xf0536c65,%al
f0107c4d:	83 e0 ef             	and    $0xffffffef,%eax
f0107c50:	a2 65 6c 53 f0       	mov    %al,0xf0536c65
f0107c55:	a0 65 6c 53 f0       	mov    0xf0536c65,%al
f0107c5a:	83 c8 60             	or     $0x60,%eax
f0107c5d:	a2 65 6c 53 f0       	mov    %al,0xf0536c65
f0107c62:	a0 65 6c 53 f0       	mov    0xf0536c65,%al
f0107c67:	83 c8 80             	or     $0xffffff80,%eax
f0107c6a:	a2 65 6c 53 f0       	mov    %al,0xf0536c65
f0107c6f:	b8 76 8e 10 f0       	mov    $0xf0108e76,%eax
f0107c74:	c1 e8 10             	shr    $0x10,%eax
f0107c77:	66 a3 66 6c 53 f0    	mov    %ax,0xf0536c66
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f0107c7d:	b8 7c 8e 10 f0       	mov    $0xf0108e7c,%eax
f0107c82:	66 a3 68 6c 53 f0    	mov    %ax,0xf0536c68
f0107c88:	66 c7 05 6a 6c 53 f0 	movw   $0x8,0xf0536c6a
f0107c8f:	08 00 
f0107c91:	a0 6c 6c 53 f0       	mov    0xf0536c6c,%al
f0107c96:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c99:	a2 6c 6c 53 f0       	mov    %al,0xf0536c6c
f0107c9e:	a0 6c 6c 53 f0       	mov    0xf0536c6c,%al
f0107ca3:	83 e0 1f             	and    $0x1f,%eax
f0107ca6:	a2 6c 6c 53 f0       	mov    %al,0xf0536c6c
f0107cab:	a0 6d 6c 53 f0       	mov    0xf0536c6d,%al
f0107cb0:	83 e0 f0             	and    $0xfffffff0,%eax
f0107cb3:	83 c8 0e             	or     $0xe,%eax
f0107cb6:	a2 6d 6c 53 f0       	mov    %al,0xf0536c6d
f0107cbb:	a0 6d 6c 53 f0       	mov    0xf0536c6d,%al
f0107cc0:	83 e0 ef             	and    $0xffffffef,%eax
f0107cc3:	a2 6d 6c 53 f0       	mov    %al,0xf0536c6d
f0107cc8:	a0 6d 6c 53 f0       	mov    0xf0536c6d,%al
f0107ccd:	83 c8 60             	or     $0x60,%eax
f0107cd0:	a2 6d 6c 53 f0       	mov    %al,0xf0536c6d
f0107cd5:	a0 6d 6c 53 f0       	mov    0xf0536c6d,%al
f0107cda:	83 c8 80             	or     $0xffffff80,%eax
f0107cdd:	a2 6d 6c 53 f0       	mov    %al,0xf0536c6d
f0107ce2:	b8 7c 8e 10 f0       	mov    $0xf0108e7c,%eax
f0107ce7:	c1 e8 10             	shr    $0x10,%eax
f0107cea:	66 a3 6e 6c 53 f0    	mov    %ax,0xf0536c6e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f0107cf0:	b8 82 8e 10 f0       	mov    $0xf0108e82,%eax
f0107cf5:	66 a3 70 6c 53 f0    	mov    %ax,0xf0536c70
f0107cfb:	66 c7 05 72 6c 53 f0 	movw   $0x8,0xf0536c72
f0107d02:	08 00 
f0107d04:	a0 74 6c 53 f0       	mov    0xf0536c74,%al
f0107d09:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d0c:	a2 74 6c 53 f0       	mov    %al,0xf0536c74
f0107d11:	a0 74 6c 53 f0       	mov    0xf0536c74,%al
f0107d16:	83 e0 1f             	and    $0x1f,%eax
f0107d19:	a2 74 6c 53 f0       	mov    %al,0xf0536c74
f0107d1e:	a0 75 6c 53 f0       	mov    0xf0536c75,%al
f0107d23:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d26:	83 c8 0e             	or     $0xe,%eax
f0107d29:	a2 75 6c 53 f0       	mov    %al,0xf0536c75
f0107d2e:	a0 75 6c 53 f0       	mov    0xf0536c75,%al
f0107d33:	83 e0 ef             	and    $0xffffffef,%eax
f0107d36:	a2 75 6c 53 f0       	mov    %al,0xf0536c75
f0107d3b:	a0 75 6c 53 f0       	mov    0xf0536c75,%al
f0107d40:	83 c8 60             	or     $0x60,%eax
f0107d43:	a2 75 6c 53 f0       	mov    %al,0xf0536c75
f0107d48:	a0 75 6c 53 f0       	mov    0xf0536c75,%al
f0107d4d:	83 c8 80             	or     $0xffffff80,%eax
f0107d50:	a2 75 6c 53 f0       	mov    %al,0xf0536c75
f0107d55:	b8 82 8e 10 f0       	mov    $0xf0108e82,%eax
f0107d5a:	c1 e8 10             	shr    $0x10,%eax
f0107d5d:	66 a3 76 6c 53 f0    	mov    %ax,0xf0536c76
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f0107d63:	b8 88 8e 10 f0       	mov    $0xf0108e88,%eax
f0107d68:	66 a3 78 6c 53 f0    	mov    %ax,0xf0536c78
f0107d6e:	66 c7 05 7a 6c 53 f0 	movw   $0x8,0xf0536c7a
f0107d75:	08 00 
f0107d77:	a0 7c 6c 53 f0       	mov    0xf0536c7c,%al
f0107d7c:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d7f:	a2 7c 6c 53 f0       	mov    %al,0xf0536c7c
f0107d84:	a0 7c 6c 53 f0       	mov    0xf0536c7c,%al
f0107d89:	83 e0 1f             	and    $0x1f,%eax
f0107d8c:	a2 7c 6c 53 f0       	mov    %al,0xf0536c7c
f0107d91:	a0 7d 6c 53 f0       	mov    0xf0536c7d,%al
f0107d96:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d99:	83 c8 0e             	or     $0xe,%eax
f0107d9c:	a2 7d 6c 53 f0       	mov    %al,0xf0536c7d
f0107da1:	a0 7d 6c 53 f0       	mov    0xf0536c7d,%al
f0107da6:	83 e0 ef             	and    $0xffffffef,%eax
f0107da9:	a2 7d 6c 53 f0       	mov    %al,0xf0536c7d
f0107dae:	a0 7d 6c 53 f0       	mov    0xf0536c7d,%al
f0107db3:	83 c8 60             	or     $0x60,%eax
f0107db6:	a2 7d 6c 53 f0       	mov    %al,0xf0536c7d
f0107dbb:	a0 7d 6c 53 f0       	mov    0xf0536c7d,%al
f0107dc0:	83 c8 80             	or     $0xffffff80,%eax
f0107dc3:	a2 7d 6c 53 f0       	mov    %al,0xf0536c7d
f0107dc8:	b8 88 8e 10 f0       	mov    $0xf0108e88,%eax
f0107dcd:	c1 e8 10             	shr    $0x10,%eax
f0107dd0:	66 a3 7e 6c 53 f0    	mov    %ax,0xf0536c7e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f0107dd6:	c7 05 04 73 53 f0 00 	movl   $0xefc00000,0xf0537304
f0107ddd:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f0107de0:	66 c7 05 08 73 53 f0 	movw   $0x10,0xf0537308
f0107de7:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f0107de9:	66 c7 05 c8 e7 14 f0 	movw   $0x68,0xf014e7c8
f0107df0:	68 00 
f0107df2:	b8 00 73 53 f0       	mov    $0xf0537300,%eax
f0107df7:	66 a3 ca e7 14 f0    	mov    %ax,0xf014e7ca
f0107dfd:	b8 00 73 53 f0       	mov    $0xf0537300,%eax
f0107e02:	c1 e8 10             	shr    $0x10,%eax
f0107e05:	a2 cc e7 14 f0       	mov    %al,0xf014e7cc
f0107e0a:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e0f:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e12:	83 c8 09             	or     $0x9,%eax
f0107e15:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e1a:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e1f:	83 c8 10             	or     $0x10,%eax
f0107e22:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e27:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e2c:	83 e0 9f             	and    $0xffffff9f,%eax
f0107e2f:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e34:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e39:	83 c8 80             	or     $0xffffff80,%eax
f0107e3c:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e41:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e46:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e49:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e4e:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e53:	83 e0 ef             	and    $0xffffffef,%eax
f0107e56:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e5b:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e60:	83 e0 df             	and    $0xffffffdf,%eax
f0107e63:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e68:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e6d:	83 c8 40             	or     $0x40,%eax
f0107e70:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e75:	a0 ce e7 14 f0       	mov    0xf014e7ce,%al
f0107e7a:	83 e0 7f             	and    $0x7f,%eax
f0107e7d:	a2 ce e7 14 f0       	mov    %al,0xf014e7ce
f0107e82:	b8 00 73 53 f0       	mov    $0xf0537300,%eax
f0107e87:	c1 e8 18             	shr    $0x18,%eax
f0107e8a:	a2 cf e7 14 f0       	mov    %al,0xf014e7cf
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f0107e8f:	a0 cd e7 14 f0       	mov    0xf014e7cd,%al
f0107e94:	83 e0 ef             	and    $0xffffffef,%eax
f0107e97:	a2 cd e7 14 f0       	mov    %al,0xf014e7cd
f0107e9c:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f0107ea2:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f0107ea6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f0107ea9:	0f 01 1d 20 ea 14 f0 	lidtl  0xf014ea20
}
f0107eb0:	90                   	nop
f0107eb1:	c9                   	leave  
f0107eb2:	c3                   	ret    

f0107eb3 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f0107eb3:	55                   	push   %ebp
f0107eb4:	89 e5                	mov    %esp,%ebp
f0107eb6:	53                   	push   %ebx
f0107eb7:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f0107eba:	83 ec 08             	sub    $0x8,%esp
f0107ebd:	ff 75 08             	pushl  0x8(%ebp)
f0107ec0:	68 1b ab 11 f0       	push   $0xf011ab1b
f0107ec5:	e8 05 ef ff ff       	call   f0106dcf <cprintf>
f0107eca:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f0107ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed0:	83 ec 0c             	sub    $0xc,%esp
f0107ed3:	50                   	push   %eax
f0107ed4:	e8 fd 00 00 00       	call   f0107fd6 <print_regs>
f0107ed9:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0107edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107edf:	8b 40 20             	mov    0x20(%eax),%eax
f0107ee2:	0f b7 c0             	movzwl %ax,%eax
f0107ee5:	83 ec 08             	sub    $0x8,%esp
f0107ee8:	50                   	push   %eax
f0107ee9:	68 2d ab 11 f0       	push   $0xf011ab2d
f0107eee:	e8 dc ee ff ff       	call   f0106dcf <cprintf>
f0107ef3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f0107ef6:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ef9:	8b 40 24             	mov    0x24(%eax),%eax
f0107efc:	0f b7 c0             	movzwl %ax,%eax
f0107eff:	83 ec 08             	sub    $0x8,%esp
f0107f02:	50                   	push   %eax
f0107f03:	68 40 ab 11 f0       	push   $0xf011ab40
f0107f08:	e8 c2 ee ff ff       	call   f0106dcf <cprintf>
f0107f0d:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f13:	8b 58 28             	mov    0x28(%eax),%ebx
f0107f16:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f19:	8b 40 28             	mov    0x28(%eax),%eax
f0107f1c:	83 ec 0c             	sub    $0xc,%esp
f0107f1f:	50                   	push   %eax
f0107f20:	e8 d0 ee ff ff       	call   f0106df5 <trapname>
f0107f25:	83 c4 10             	add    $0x10,%esp
f0107f28:	89 c2                	mov    %eax,%edx
f0107f2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f2d:	8b 40 28             	mov    0x28(%eax),%eax
f0107f30:	53                   	push   %ebx
f0107f31:	52                   	push   %edx
f0107f32:	50                   	push   %eax
f0107f33:	68 53 ab 11 f0       	push   $0xf011ab53
f0107f38:	e8 92 ee ff ff       	call   f0106dcf <cprintf>
f0107f3d:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f0107f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f43:	8b 40 2c             	mov    0x2c(%eax),%eax
f0107f46:	83 ec 08             	sub    $0x8,%esp
f0107f49:	50                   	push   %eax
f0107f4a:	68 6a ab 11 f0       	push   $0xf011ab6a
f0107f4f:	e8 7b ee ff ff       	call   f0106dcf <cprintf>
f0107f54:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f0107f57:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f5a:	8b 40 30             	mov    0x30(%eax),%eax
f0107f5d:	83 ec 08             	sub    $0x8,%esp
f0107f60:	50                   	push   %eax
f0107f61:	68 79 ab 11 f0       	push   $0xf011ab79
f0107f66:	e8 64 ee ff ff       	call   f0106dcf <cprintf>
f0107f6b:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f0107f6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f71:	8b 40 34             	mov    0x34(%eax),%eax
f0107f74:	0f b7 c0             	movzwl %ax,%eax
f0107f77:	83 ec 08             	sub    $0x8,%esp
f0107f7a:	50                   	push   %eax
f0107f7b:	68 88 ab 11 f0       	push   $0xf011ab88
f0107f80:	e8 4a ee ff ff       	call   f0106dcf <cprintf>
f0107f85:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f0107f88:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f8b:	8b 40 38             	mov    0x38(%eax),%eax
f0107f8e:	83 ec 08             	sub    $0x8,%esp
f0107f91:	50                   	push   %eax
f0107f92:	68 9b ab 11 f0       	push   $0xf011ab9b
f0107f97:	e8 33 ee ff ff       	call   f0106dcf <cprintf>
f0107f9c:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f0107f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa2:	8b 40 3c             	mov    0x3c(%eax),%eax
f0107fa5:	83 ec 08             	sub    $0x8,%esp
f0107fa8:	50                   	push   %eax
f0107fa9:	68 aa ab 11 f0       	push   $0xf011abaa
f0107fae:	e8 1c ee ff ff       	call   f0106dcf <cprintf>
f0107fb3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f0107fb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fb9:	8b 40 40             	mov    0x40(%eax),%eax
f0107fbc:	0f b7 c0             	movzwl %ax,%eax
f0107fbf:	83 ec 08             	sub    $0x8,%esp
f0107fc2:	50                   	push   %eax
f0107fc3:	68 b9 ab 11 f0       	push   $0xf011abb9
f0107fc8:	e8 02 ee ff ff       	call   f0106dcf <cprintf>
f0107fcd:	83 c4 10             	add    $0x10,%esp
}
f0107fd0:	90                   	nop
f0107fd1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107fd4:	c9                   	leave  
f0107fd5:	c3                   	ret    

f0107fd6 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f0107fd6:	55                   	push   %ebp
f0107fd7:	89 e5                	mov    %esp,%ebp
f0107fd9:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f0107fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fdf:	8b 00                	mov    (%eax),%eax
f0107fe1:	83 ec 08             	sub    $0x8,%esp
f0107fe4:	50                   	push   %eax
f0107fe5:	68 cc ab 11 f0       	push   $0xf011abcc
f0107fea:	e8 e0 ed ff ff       	call   f0106dcf <cprintf>
f0107fef:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f0107ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ff5:	8b 40 04             	mov    0x4(%eax),%eax
f0107ff8:	83 ec 08             	sub    $0x8,%esp
f0107ffb:	50                   	push   %eax
f0107ffc:	68 db ab 11 f0       	push   $0xf011abdb
f0108001:	e8 c9 ed ff ff       	call   f0106dcf <cprintf>
f0108006:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f0108009:	8b 45 08             	mov    0x8(%ebp),%eax
f010800c:	8b 40 08             	mov    0x8(%eax),%eax
f010800f:	83 ec 08             	sub    $0x8,%esp
f0108012:	50                   	push   %eax
f0108013:	68 ea ab 11 f0       	push   $0xf011abea
f0108018:	e8 b2 ed ff ff       	call   f0106dcf <cprintf>
f010801d:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f0108020:	8b 45 08             	mov    0x8(%ebp),%eax
f0108023:	8b 40 0c             	mov    0xc(%eax),%eax
f0108026:	83 ec 08             	sub    $0x8,%esp
f0108029:	50                   	push   %eax
f010802a:	68 f9 ab 11 f0       	push   $0xf011abf9
f010802f:	e8 9b ed ff ff       	call   f0106dcf <cprintf>
f0108034:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f0108037:	8b 45 08             	mov    0x8(%ebp),%eax
f010803a:	8b 40 10             	mov    0x10(%eax),%eax
f010803d:	83 ec 08             	sub    $0x8,%esp
f0108040:	50                   	push   %eax
f0108041:	68 08 ac 11 f0       	push   $0xf011ac08
f0108046:	e8 84 ed ff ff       	call   f0106dcf <cprintf>
f010804b:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010804e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108051:	8b 40 14             	mov    0x14(%eax),%eax
f0108054:	83 ec 08             	sub    $0x8,%esp
f0108057:	50                   	push   %eax
f0108058:	68 17 ac 11 f0       	push   $0xf011ac17
f010805d:	e8 6d ed ff ff       	call   f0106dcf <cprintf>
f0108062:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f0108065:	8b 45 08             	mov    0x8(%ebp),%eax
f0108068:	8b 40 18             	mov    0x18(%eax),%eax
f010806b:	83 ec 08             	sub    $0x8,%esp
f010806e:	50                   	push   %eax
f010806f:	68 26 ac 11 f0       	push   $0xf011ac26
f0108074:	e8 56 ed ff ff       	call   f0106dcf <cprintf>
f0108079:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010807c:	8b 45 08             	mov    0x8(%ebp),%eax
f010807f:	8b 40 1c             	mov    0x1c(%eax),%eax
f0108082:	83 ec 08             	sub    $0x8,%esp
f0108085:	50                   	push   %eax
f0108086:	68 35 ac 11 f0       	push   $0xf011ac35
f010808b:	e8 3f ed ff ff       	call   f0106dcf <cprintf>
f0108090:	83 c4 10             	add    $0x10,%esp
}
f0108093:	90                   	nop
f0108094:	c9                   	leave  
f0108095:	c3                   	ret    

f0108096 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f0108096:	55                   	push   %ebp
f0108097:	89 e5                	mov    %esp,%ebp
f0108099:	57                   	push   %edi
f010809a:	56                   	push   %esi
f010809b:	53                   	push   %ebx
f010809c:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010809f:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a2:	8b 40 28             	mov    0x28(%eax),%eax
f01080a5:	83 f8 0e             	cmp    $0xe,%eax
f01080a8:	75 21                	jne    f01080cb <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU())
f01080aa:	e8 8f 02 00 00       	call   f010833e <isPageReplacmentAlgorithmLRU>
f01080af:	85 c0                	test   %eax,%eax
f01080b1:	74 05                	je     f01080b8 <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f01080b3:	e8 06 24 00 00       	call   f010a4be <update_WS_time_stamps>
		}
		fault_handler(tf);
f01080b8:	83 ec 0c             	sub    $0xc,%esp
f01080bb:	ff 75 08             	pushl  0x8(%ebp)
f01080be:	e8 bb 03 00 00       	call   f010847e <fault_handler>
f01080c3:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01080c6:	e9 a5 00 00 00       	jmp    f0108170 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f01080cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ce:	8b 40 28             	mov    0x28(%eax),%eax
f01080d1:	83 f8 30             	cmp    $0x30,%eax
f01080d4:	75 42                	jne    f0108118 <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f01080d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d9:	8b 78 04             	mov    0x4(%eax),%edi
f01080dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01080df:	8b 30                	mov    (%eax),%esi
f01080e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01080e4:	8b 58 10             	mov    0x10(%eax),%ebx
f01080e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ea:	8b 48 18             	mov    0x18(%eax),%ecx
f01080ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01080f0:	8b 50 14             	mov    0x14(%eax),%edx
f01080f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080f6:	8b 40 1c             	mov    0x1c(%eax),%eax
f01080f9:	83 ec 08             	sub    $0x8,%esp
f01080fc:	57                   	push   %edi
f01080fd:	56                   	push   %esi
f01080fe:	53                   	push   %ebx
f01080ff:	51                   	push   %ecx
f0108100:	52                   	push   %edx
f0108101:	50                   	push   %eax
f0108102:	e8 5a 2c 00 00       	call   f010ad61 <syscall>
f0108107:	83 c4 20             	add    $0x20,%esp
f010810a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010810d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108110:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108113:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f0108116:	eb 58                	jmp    f0108170 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f0108118:	8b 45 08             	mov    0x8(%ebp),%eax
f010811b:	8b 40 28             	mov    0x28(%eax),%eax
f010811e:	83 f8 08             	cmp    $0x8,%eax
f0108121:	75 17                	jne    f010813a <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f0108123:	83 ec 04             	sub    $0x4,%esp
f0108126:	68 44 ac 11 f0       	push   $0xf011ac44
f010812b:	68 f3 00 00 00       	push   $0xf3
f0108130:	68 53 ac 11 f0       	push   $0xf011ac53
f0108135:	e8 3c 80 ff ff       	call   f0100176 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010813a:	8b 45 08             	mov    0x8(%ebp),%eax
f010813d:	8b 40 28             	mov    0x28(%eax),%eax
f0108140:	83 f8 20             	cmp    $0x20,%eax
f0108143:	75 07                	jne    f010814c <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f0108145:	e8 5b 23 00 00       	call   f010a4a5 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010814a:	eb 24                	jmp    f0108170 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010814c:	8b 45 08             	mov    0x8(%ebp),%eax
f010814f:	8b 40 34             	mov    0x34(%eax),%eax
f0108152:	66 83 f8 08          	cmp    $0x8,%ax
f0108156:	75 17                	jne    f010816f <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f0108158:	83 ec 04             	sub    $0x4,%esp
f010815b:	68 5f ac 11 f0       	push   $0xf011ac5f
f0108160:	68 00 01 00 00       	push   $0x100
f0108165:	68 53 ac 11 f0       	push   $0xf011ac53
f010816a:	e8 07 80 ff ff       	call   f0100176 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010816f:	90                   	nop
		}
	}
	return;
}
f0108170:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0108173:	5b                   	pop    %ebx
f0108174:	5e                   	pop    %esi
f0108175:	5f                   	pop    %edi
f0108176:	5d                   	pop    %ebp
f0108177:	c3                   	ret    

f0108178 <trap>:

void trap(struct Trapframe *tf)
{
f0108178:	55                   	push   %ebp
f0108179:	89 e5                	mov    %esp,%ebp
f010817b:	57                   	push   %edi
f010817c:	56                   	push   %esi
f010817d:	53                   	push   %ebx
f010817e:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f0108181:	e8 3c e9 ff ff       	call   f0106ac2 <kclock_stop>

	int userTrap = 0;
f0108186:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	8b 40 34             	mov    0x34(%eax),%eax
f0108193:	0f b7 c0             	movzwl %ax,%eax
f0108196:	83 e0 03             	and    $0x3,%eax
f0108199:	83 f8 03             	cmp    $0x3,%eax
f010819c:	75 49                	jne    f01081e7 <trap+0x6f>
		assert(curenv);
f010819e:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01081a3:	85 c0                	test   %eax,%eax
f01081a5:	75 19                	jne    f01081c0 <trap+0x48>
f01081a7:	68 78 ac 11 f0       	push   $0xf011ac78
f01081ac:	68 7f ac 11 f0       	push   $0xf011ac7f
f01081b1:	68 10 01 00 00       	push   $0x110
f01081b6:	68 53 ac 11 f0       	push   $0xf011ac53
f01081bb:	e8 b6 7f ff ff       	call   f0100176 <_panic>
		curenv->env_tf = *tf;
f01081c0:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f01081c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c9:	89 c3                	mov    %eax,%ebx
f01081cb:	b8 11 00 00 00       	mov    $0x11,%eax
f01081d0:	89 d7                	mov    %edx,%edi
f01081d2:	89 de                	mov    %ebx,%esi
f01081d4:	89 c1                	mov    %eax,%ecx
f01081d6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f01081d8:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01081dd:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f01081e0:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f01081e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ea:	8b 40 28             	mov    0x28(%eax),%eax
f01081ed:	83 f8 20             	cmp    $0x20,%eax
f01081f0:	75 40                	jne    f0108232 <trap+0xba>
	{
//		uint16 cnt0 = kclock_read_cnt0() ;
//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f01081f2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01081f6:	0f 84 a6 00 00 00    	je     f01082a2 <trap+0x12a>
		{
			assert(curenv);
f01081fc:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0108201:	85 c0                	test   %eax,%eax
f0108203:	75 19                	jne    f010821e <trap+0xa6>
f0108205:	68 78 ac 11 f0       	push   $0xf011ac78
f010820a:	68 7f ac 11 f0       	push   $0xf011ac7f
f010820f:	68 1c 01 00 00       	push   $0x11c
f0108214:	68 53 ac 11 f0       	push   $0xf011ac53
f0108219:	e8 58 7f ff ff       	call   f0100176 <_panic>
			curenv->nClocks++ ;
f010821e:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0108223:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f0108229:	42                   	inc    %edx
f010822a:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
f0108230:	eb 70                	jmp    f01082a2 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f0108232:	8b 45 08             	mov    0x8(%ebp),%eax
f0108235:	8b 40 28             	mov    0x28(%eax),%eax
f0108238:	83 f8 0e             	cmp    $0xe,%eax
f010823b:	75 65                	jne    f01082a2 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010823d:	a0 e0 6a 53 f0       	mov    0xf0536ae0,%al
f0108242:	84 c0                	test   %al,%al
f0108244:	74 5c                	je     f01082a2 <trap+0x12a>
			if (userTrap){
f0108246:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010824a:	74 2c                	je     f0108278 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010824c:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0108251:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f0108257:	8b 52 30             	mov    0x30(%edx),%edx
f010825a:	89 d1                	mov    %edx,%ecx
f010825c:	8a 15 e0 6a 53 f0    	mov    0xf0536ae0,%dl
f0108262:	0f b6 d2             	movzbl %dl,%edx
f0108265:	01 ca                	add    %ecx,%edx
f0108267:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010826a:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010826f:	83 ec 0c             	sub    $0xc,%esp
f0108272:	50                   	push   %eax
f0108273:	e8 77 de ff ff       	call   f01060ef <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f0108278:	8b 45 08             	mov    0x8(%ebp),%eax
f010827b:	8b 40 30             	mov    0x30(%eax),%eax
f010827e:	89 c2                	mov    %eax,%edx
f0108280:	a0 e0 6a 53 f0       	mov    0xf0536ae0,%al
f0108285:	0f b6 c0             	movzbl %al,%eax
f0108288:	01 d0                	add    %edx,%eax
f010828a:	89 c2                	mov    %eax,%edx
f010828c:	8b 45 08             	mov    0x8(%ebp),%eax
f010828f:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f0108292:	e8 d0 e7 ff ff       	call   f0106a67 <kclock_resume>
				env_pop_tf(tf);
f0108297:	83 ec 0c             	sub    $0xc,%esp
f010829a:	ff 75 08             	pushl  0x8(%ebp)
f010829d:	e8 a0 e6 ff ff       	call   f0106942 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f01082a2:	83 ec 0c             	sub    $0xc,%esp
f01082a5:	ff 75 08             	pushl  0x8(%ebp)
f01082a8:	e8 e9 fd ff ff       	call   f0108096 <trap_dispatch>
f01082ad:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f01082b0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01082b4:	74 3d                	je     f01082f3 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f01082b6:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01082bb:	85 c0                	test   %eax,%eax
f01082bd:	74 0d                	je     f01082cc <trap+0x154>
f01082bf:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01082c4:	8b 40 54             	mov    0x54(%eax),%eax
f01082c7:	83 f8 02             	cmp    $0x2,%eax
f01082ca:	74 19                	je     f01082e5 <trap+0x16d>
f01082cc:	68 94 ac 11 f0       	push   $0xf011ac94
f01082d1:	68 7f ac 11 f0       	push   $0xf011ac7f
f01082d6:	68 31 01 00 00       	push   $0x131
f01082db:	68 53 ac 11 f0       	push   $0xf011ac53
f01082e0:	e8 91 7e ff ff       	call   f0100176 <_panic>
		env_run(curenv);
f01082e5:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01082ea:	83 ec 0c             	sub    $0xc,%esp
f01082ed:	50                   	push   %eax
f01082ee:	e8 fc dd ff ff       	call   f01060ef <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f01082f3:	83 ec 0c             	sub    $0xc,%esp
f01082f6:	ff 75 08             	pushl  0x8(%ebp)
f01082f9:	e8 44 e6 ff ff       	call   f0106942 <env_pop_tf>

f01082fe <setPageReplacmentAlgorithmLRU>:
	}
}

void setPageReplacmentAlgorithmLRU(){_PageRepAlgoType = PG_REP_LRU;}
f01082fe:	55                   	push   %ebp
f01082ff:	89 e5                	mov    %esp,%ebp
f0108301:	c7 05 c4 73 53 f0 01 	movl   $0x1,0xf05373c4
f0108308:	00 00 00 
f010830b:	90                   	nop
f010830c:	5d                   	pop    %ebp
f010830d:	c3                   	ret    

f010830e <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010830e:	55                   	push   %ebp
f010830f:	89 e5                	mov    %esp,%ebp
f0108311:	c7 05 c4 73 53 f0 02 	movl   $0x2,0xf05373c4
f0108318:	00 00 00 
f010831b:	90                   	nop
f010831c:	5d                   	pop    %ebp
f010831d:	c3                   	ret    

f010831e <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010831e:	55                   	push   %ebp
f010831f:	89 e5                	mov    %esp,%ebp
f0108321:	c7 05 c4 73 53 f0 03 	movl   $0x3,0xf05373c4
f0108328:	00 00 00 
f010832b:	90                   	nop
f010832c:	5d                   	pop    %ebp
f010832d:	c3                   	ret    

f010832e <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010832e:	55                   	push   %ebp
f010832f:	89 e5                	mov    %esp,%ebp
f0108331:	c7 05 c4 73 53 f0 04 	movl   $0x4,0xf05373c4
f0108338:	00 00 00 
f010833b:	90                   	nop
f010833c:	5d                   	pop    %ebp
f010833d:	c3                   	ret    

f010833e <isPageReplacmentAlgorithmLRU>:

uint32 isPageReplacmentAlgorithmLRU(){if(_PageRepAlgoType == PG_REP_LRU) return 1; return 0;}
f010833e:	55                   	push   %ebp
f010833f:	89 e5                	mov    %esp,%ebp
f0108341:	a1 c4 73 53 f0       	mov    0xf05373c4,%eax
f0108346:	83 f8 01             	cmp    $0x1,%eax
f0108349:	75 07                	jne    f0108352 <isPageReplacmentAlgorithmLRU+0x14>
f010834b:	b8 01 00 00 00       	mov    $0x1,%eax
f0108350:	eb 05                	jmp    f0108357 <isPageReplacmentAlgorithmLRU+0x19>
f0108352:	b8 00 00 00 00       	mov    $0x0,%eax
f0108357:	5d                   	pop    %ebp
f0108358:	c3                   	ret    

f0108359 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f0108359:	55                   	push   %ebp
f010835a:	89 e5                	mov    %esp,%ebp
f010835c:	a1 c4 73 53 f0       	mov    0xf05373c4,%eax
f0108361:	83 f8 02             	cmp    $0x2,%eax
f0108364:	75 07                	jne    f010836d <isPageReplacmentAlgorithmCLOCK+0x14>
f0108366:	b8 01 00 00 00       	mov    $0x1,%eax
f010836b:	eb 05                	jmp    f0108372 <isPageReplacmentAlgorithmCLOCK+0x19>
f010836d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108372:	5d                   	pop    %ebp
f0108373:	c3                   	ret    

f0108374 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f0108374:	55                   	push   %ebp
f0108375:	89 e5                	mov    %esp,%ebp
f0108377:	a1 c4 73 53 f0       	mov    0xf05373c4,%eax
f010837c:	83 f8 03             	cmp    $0x3,%eax
f010837f:	75 07                	jne    f0108388 <isPageReplacmentAlgorithmFIFO+0x14>
f0108381:	b8 01 00 00 00       	mov    $0x1,%eax
f0108386:	eb 05                	jmp    f010838d <isPageReplacmentAlgorithmFIFO+0x19>
f0108388:	b8 00 00 00 00       	mov    $0x0,%eax
f010838d:	5d                   	pop    %ebp
f010838e:	c3                   	ret    

f010838f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010838f:	55                   	push   %ebp
f0108390:	89 e5                	mov    %esp,%ebp
f0108392:	a1 c4 73 53 f0       	mov    0xf05373c4,%eax
f0108397:	83 f8 04             	cmp    $0x4,%eax
f010839a:	75 07                	jne    f01083a3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010839c:	b8 01 00 00 00       	mov    $0x1,%eax
f01083a1:	eb 05                	jmp    f01083a8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f01083a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01083a8:	5d                   	pop    %ebp
f01083a9:	c3                   	ret    

f01083aa <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f01083aa:	55                   	push   %ebp
f01083ab:	89 e5                	mov    %esp,%ebp
f01083ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b0:	a3 b4 73 53 f0       	mov    %eax,0xf05373b4
f01083b5:	90                   	nop
f01083b6:	5d                   	pop    %ebp
f01083b7:	c3                   	ret    

f01083b8 <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f01083b8:	55                   	push   %ebp
f01083b9:	89 e5                	mov    %esp,%ebp
f01083bb:	a1 b4 73 53 f0       	mov    0xf05373b4,%eax
f01083c0:	5d                   	pop    %ebp
f01083c1:	c3                   	ret    

f01083c2 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f01083c2:	55                   	push   %ebp
f01083c3:	89 e5                	mov    %esp,%ebp
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	a3 c8 73 53 f0       	mov    %eax,0xf05373c8
f01083cd:	90                   	nop
f01083ce:	5d                   	pop    %ebp
f01083cf:	c3                   	ret    

f01083d0 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f01083d0:	55                   	push   %ebp
f01083d1:	89 e5                	mov    %esp,%ebp
f01083d3:	a1 c8 73 53 f0       	mov    0xf05373c8,%eax
f01083d8:	5d                   	pop    %ebp
f01083d9:	c3                   	ret    

f01083da <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f01083da:	55                   	push   %ebp
f01083db:	89 e5                	mov    %esp,%ebp
f01083dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e0:	a3 d4 73 53 f0       	mov    %eax,0xf05373d4
f01083e5:	90                   	nop
f01083e6:	5d                   	pop    %ebp
f01083e7:	c3                   	ret    

f01083e8 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f01083e8:	55                   	push   %ebp
f01083e9:	89 e5                	mov    %esp,%ebp
f01083eb:	a1 d4 73 53 f0       	mov    0xf05373d4,%eax
f01083f0:	5d                   	pop    %ebp
f01083f1:	c3                   	ret    

f01083f2 <detect_modified_loop>:


void detect_modified_loop()
{
f01083f2:	55                   	push   %ebp
f01083f3:	89 e5                	mov    %esp,%ebp
f01083f5:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f01083f8:	a1 00 58 55 f0       	mov    0xf0555800,%eax
f01083fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f0108400:	a1 00 58 55 f0       	mov    0xf0555800,%eax
f0108405:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0108408:	eb 52                	jmp    f010845c <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f010840a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010840d:	8b 00                	mov    (%eax),%eax
f010840f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0108412:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108415:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108418:	75 12                	jne    f010842c <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f010841a:	83 ec 0c             	sub    $0xc,%esp
f010841d:	68 c1 ac 11 f0       	push   $0xf011acc1
f0108422:	e8 a8 e9 ff ff       	call   f0106dcf <cprintf>
f0108427:	83 c4 10             	add    $0x10,%esp
			break;
f010842a:	eb 3f                	jmp    f010846b <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f010842c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108430:	74 38                	je     f010846a <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0108432:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108435:	8b 00                	mov    (%eax),%eax
f0108437:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f010843a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010843d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108440:	75 12                	jne    f0108454 <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108442:	83 ec 0c             	sub    $0xc,%esp
f0108445:	68 c1 ac 11 f0       	push   $0xf011acc1
f010844a:	e8 80 e9 ff ff       	call   f0106dcf <cprintf>
f010844f:	83 c4 10             	add    $0x10,%esp
			break;
f0108452:	eb 17                	jmp    f010846b <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0108454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108457:	8b 00                	mov    (%eax),%eax
f0108459:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f010845c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108460:	74 09                	je     f010846b <detect_modified_loop+0x79>
f0108462:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108466:	75 a2                	jne    f010840a <detect_modified_loop+0x18>
f0108468:	eb 01                	jmp    f010846b <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f010846a:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f010846b:	83 ec 0c             	sub    $0xc,%esp
f010846e:	68 dd ac 11 f0       	push   $0xf011acdd
f0108473:	e8 57 e9 ff ff       	call   f0106dcf <cprintf>
f0108478:	83 c4 10             	add    $0x10,%esp
}
f010847b:	90                   	nop
f010847c:	c9                   	leave  
f010847d:	c3                   	ret    

f010847e <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f010847e:	55                   	push   %ebp
f010847f:	89 e5                	mov    %esp,%ebp
f0108481:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f0108484:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010848b:	8b 45 08             	mov    0x8(%ebp),%eax
f010848e:	8b 40 34             	mov    0x34(%eax),%eax
f0108491:	0f b7 c0             	movzwl %ax,%eax
f0108494:	83 e0 03             	and    $0x3,%eax
f0108497:	83 f8 03             	cmp    $0x3,%eax
f010849a:	75 07                	jne    f01084a3 <fault_handler+0x25>
		userTrap = 1;
f010849c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f01084a3:	0f 20 d0             	mov    %cr2,%eax
f01084a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f01084a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f01084ac:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f01084af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01084b3:	75 29                	jne    f01084de <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f01084b5:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f01084bc:	77 40                	ja     f01084fe <fault_handler+0x80>
f01084be:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f01084c5:	76 37                	jbe    f01084fe <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f01084c7:	83 ec 04             	sub    $0x4,%esp
f01084ca:	68 fc ac 11 f0       	push   $0xf011acfc
f01084cf:	68 7e 01 00 00       	push   $0x17e
f01084d4:	68 53 ac 11 f0       	push   $0xf011ac53
f01084d9:	e8 98 7c ff ff       	call   f0100176 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f01084de:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f01084e5:	76 17                	jbe    f01084fe <fault_handler+0x80>
			panic("User: stack underflow exception!");
f01084e7:	83 ec 04             	sub    $0x4,%esp
f01084ea:	68 20 ad 11 f0       	push   $0xf011ad20
f01084ef:	68 84 01 00 00       	push   $0x184
f01084f4:	68 53 ac 11 f0       	push   $0xf011ac53
f01084f9:	e8 78 7c ff ff       	call   f0100176 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f01084fe:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0108503:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f0108506:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010850b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010850e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108511:	c1 ea 16             	shr    $0x16,%edx
f0108514:	c1 e2 02             	shl    $0x2,%edx
f0108517:	01 d0                	add    %edx,%eax
f0108519:	8b 00                	mov    (%eax),%eax
f010851b:	83 e0 01             	and    $0x1,%eax
f010851e:	85 c0                	test   %eax,%eax
f0108520:	75 28                	jne    f010854a <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f0108522:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108525:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
f010852b:	8d 50 01             	lea    0x1(%eax),%edx
f010852e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108531:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)

		table_fault_handler(faulted_env, fault_va);
f0108537:	83 ec 08             	sub    $0x8,%esp
f010853a:	ff 75 ec             	pushl  -0x14(%ebp)
f010853d:	ff 75 e8             	pushl  -0x18(%ebp)
f0108540:	e8 56 00 00 00       	call   f010859b <table_fault_handler>
f0108545:	83 c4 10             	add    $0x10,%esp
f0108548:	eb 42                	jmp    f010858c <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010854a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010854d:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f0108553:	8d 50 01             	lea    0x1(%eax),%edx
f0108556:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108559:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)

//				cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
//				cprintf("\nPage working set BEFORE fault handler...\n");
//				env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010855f:	e8 6c fe ff ff       	call   f01083d0 <isBufferingEnabled>
f0108564:	85 c0                	test   %eax,%eax
f0108566:	74 13                	je     f010857b <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f0108568:	83 ec 08             	sub    $0x8,%esp
f010856b:	ff 75 ec             	pushl  -0x14(%ebp)
f010856e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108571:	e8 07 08 00 00       	call   f0108d7d <__page_fault_handler_with_buffering>
f0108576:	83 c4 10             	add    $0x10,%esp
f0108579:	eb 11                	jmp    f010858c <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f010857b:	83 ec 08             	sub    $0x8,%esp
f010857e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108581:	ff 75 e8             	pushl  -0x18(%ebp)
f0108584:	e8 42 01 00 00       	call   f01086cb <page_fault_handler>
f0108589:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010858c:	0f 20 d8             	mov    %cr3,%eax
f010858f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108592:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108595:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f0108598:	90                   	nop
f0108599:	c9                   	leave  
f010859a:	c3                   	ret    

f010859b <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010859b:	55                   	push   %ebp
f010859c:	89 e5                	mov    %esp,%ebp
f010859e:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
	if(USE_KHEAP)
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f01085a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085a7:	83 ec 08             	sub    $0x8,%esp
f01085aa:	ff 75 0c             	pushl  0xc(%ebp)
f01085ad:	50                   	push   %eax
f01085ae:	e8 ba b6 ff ff       	call   f0103c6d <create_page_table>
f01085b3:	83 c4 10             	add    $0x10,%esp
f01085b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}

}
f01085b9:	90                   	nop
f01085ba:	c9                   	leave  
f01085bb:	c3                   	ret    

f01085bc <placement>:

void placement(struct Env * curenv, uint32 fault_va) {
f01085bc:	55                   	push   %ebp
f01085bd:	89 e5                	mov    %esp,%ebp
f01085bf:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* framePTR;
	allocate_frame(&framePTR);
f01085c2:	83 ec 0c             	sub    $0xc,%esp
f01085c5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01085c8:	50                   	push   %eax
f01085c9:	e8 c8 b3 ff ff       	call   f0103996 <allocate_frame>
f01085ce:	83 c4 10             	add    $0x10,%esp
	map_frame(curenv->env_page_directory, framePTR, (void*)fault_va, PERM_USER|PERM_WRITEABLE);
f01085d1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01085d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01085da:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085dd:	6a 06                	push   $0x6
f01085df:	51                   	push   %ecx
f01085e0:	52                   	push   %edx
f01085e1:	50                   	push   %eax
f01085e2:	e8 23 b7 ff ff       	call   f0103d0a <map_frame>
f01085e7:	83 c4 10             	add    $0x10,%esp

	if(pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f01085ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085ed:	83 ec 08             	sub    $0x8,%esp
f01085f0:	50                   	push   %eax
f01085f1:	ff 75 08             	pushl  0x8(%ebp)
f01085f4:	e8 33 35 00 00       	call   f010bb2c <pf_read_env_page>
f01085f9:	83 c4 10             	add    $0x10,%esp
f01085fc:	83 f8 f7             	cmp    $0xfffffff7,%eax
f01085ff:	75 4f                	jne    f0108650 <placement+0x94>
		fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
f0108601:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108604:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108607:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010860a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010860f:	89 45 0c             	mov    %eax,0xc(%ebp)
		if((fault_va >= USER_HEAP_MAX) && fault_va<USTACKTOP)
f0108612:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f0108619:	76 1e                	jbe    f0108639 <placement+0x7d>
f010861b:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0108622:	77 15                	ja     f0108639 <placement+0x7d>
			pf_add_empty_env_page(curenv, fault_va, 1);
f0108624:	83 ec 04             	sub    $0x4,%esp
f0108627:	6a 01                	push   $0x1
f0108629:	ff 75 0c             	pushl  0xc(%ebp)
f010862c:	ff 75 08             	pushl  0x8(%ebp)
f010862f:	e8 5c 32 00 00       	call   f010b890 <pf_add_empty_env_page>
f0108634:	83 c4 10             	add    $0x10,%esp
f0108637:	eb 17                	jmp    f0108650 <placement+0x94>
		else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
f0108639:	83 ec 04             	sub    $0x4,%esp
f010863c:	68 44 ad 11 f0       	push   $0xf011ad44
f0108641:	68 cc 01 00 00       	push   $0x1cc
f0108646:	68 53 ac 11 f0       	push   $0xf011ac53
f010864b:	e8 26 7b ff ff       	call   f0100176 <_panic>
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f0108650:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108657:	eb 5f                	jmp    f01086b8 <placement+0xfc>
		if(env_page_ws_is_entry_empty(curenv, i)) {
f0108659:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010865c:	83 ec 08             	sub    $0x8,%esp
f010865f:	50                   	push   %eax
f0108660:	ff 75 08             	pushl  0x8(%ebp)
f0108663:	e8 1a bf ff ff       	call   f0104582 <env_page_ws_is_entry_empty>
f0108668:	83 c4 10             	add    $0x10,%esp
f010866b:	85 c0                	test   %eax,%eax
f010866d:	74 46                	je     f01086b5 <placement+0xf9>
			env_page_ws_set_entry(curenv, i, fault_va);
f010866f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108672:	83 ec 04             	sub    $0x4,%esp
f0108675:	ff 75 0c             	pushl  0xc(%ebp)
f0108678:	50                   	push   %eax
f0108679:	ff 75 08             	pushl  0x8(%ebp)
f010867c:	e8 50 bd ff ff       	call   f01043d1 <env_page_ws_set_entry>
f0108681:	83 c4 10             	add    $0x10,%esp
			curenv->page_last_WS_index = i+1;
f0108684:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108687:	40                   	inc    %eax
f0108688:	89 c2                	mov    %eax,%edx
f010868a:	8b 45 08             	mov    0x8(%ebp),%eax
f010868d:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f0108693:	8b 45 08             	mov    0x8(%ebp),%eax
f0108696:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f010869c:	8b 45 08             	mov    0x8(%ebp),%eax
f010869f:	8b 40 74             	mov    0x74(%eax),%eax
f01086a2:	39 c2                	cmp    %eax,%edx
f01086a4:	75 21                	jne    f01086c7 <placement+0x10b>
				curenv->page_last_WS_index = 0;
f01086a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a9:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01086b0:	00 00 00 
			break;
f01086b3:	eb 12                	jmp    f01086c7 <placement+0x10b>
		if((fault_va >= USER_HEAP_MAX) && fault_va<USTACKTOP)
			pf_add_empty_env_page(curenv, fault_va, 1);
		else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
	}

	for(int i=0; i < curenv->page_WS_max_size; i++) {
f01086b5:	ff 45 f4             	incl   -0xc(%ebp)
f01086b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01086bb:	8b 50 74             	mov    0x74(%eax),%edx
f01086be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086c1:	39 c2                	cmp    %eax,%edx
f01086c3:	77 94                	ja     f0108659 <placement+0x9d>
			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
				curenv->page_last_WS_index = 0;
			break;
		}
	}
}
f01086c5:	eb 01                	jmp    f01086c8 <placement+0x10c>
			env_page_ws_set_entry(curenv, i, fault_va);
			curenv->page_last_WS_index = i+1;

			if(curenv->page_last_WS_index == curenv->page_WS_max_size)
				curenv->page_last_WS_index = 0;
			break;
f01086c7:	90                   	nop
		}
	}
}
f01086c8:	90                   	nop
f01086c9:	c9                   	leave  
f01086ca:	c3                   	ret    

f01086cb <page_fault_handler>:

//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va) {
f01086cb:	55                   	push   %ebp
f01086cc:	89 e5                	mov    %esp,%ebp
f01086ce:	83 ec 58             	sub    $0x58,%esp
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	//refer to the project presentation and documentation for details

	uint32* ptrPT = NULL;
f01086d1:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	struct Frame_Info* framePTR[2];
	uint32 lastIDX = curenv->page_last_WS_index, VIC, empty;
f01086d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01086db:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01086e1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	framePTR[0] = get_frame_info(curenv->env_page_directory, (void*)fault_va, &ptrPT);
f01086e4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01086ea:	8b 40 5c             	mov    0x5c(%eax),%eax
f01086ed:	83 ec 04             	sub    $0x4,%esp
f01086f0:	8d 4d b0             	lea    -0x50(%ebp),%ecx
f01086f3:	51                   	push   %ecx
f01086f4:	52                   	push   %edx
f01086f5:	50                   	push   %eax
f01086f6:	e8 ce b6 ff ff       	call   f0103dc9 <get_frame_info>
f01086fb:	83 c4 10             	add    $0x10,%esp
f01086fe:	89 45 a8             	mov    %eax,-0x58(%ebp)

	if(env_page_ws_get_size(curenv) < curenv->page_WS_max_size) {
f0108701:	83 ec 0c             	sub    $0xc,%esp
f0108704:	ff 75 08             	pushl  0x8(%ebp)
f0108707:	e8 11 bc ff ff       	call   f010431d <env_page_ws_get_size>
f010870c:	83 c4 10             	add    $0x10,%esp
f010870f:	89 c2                	mov    %eax,%edx
f0108711:	8b 45 08             	mov    0x8(%ebp),%eax
f0108714:	8b 40 74             	mov    0x74(%eax),%eax
f0108717:	39 c2                	cmp    %eax,%edx
f0108719:	0f 83 8c 01 00 00    	jae    f01088ab <page_fault_handler+0x1e0>
		if (env_page_ws_get_size(curenv) >= curenv->page_WS_max_size) {
f010871f:	83 ec 0c             	sub    $0xc,%esp
f0108722:	ff 75 08             	pushl  0x8(%ebp)
f0108725:	e8 f3 bb ff ff       	call   f010431d <env_page_ws_get_size>
f010872a:	83 c4 10             	add    $0x10,%esp
f010872d:	89 c2                	mov    %eax,%edx
f010872f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108732:	8b 40 74             	mov    0x74(%eax),%eax
f0108735:	39 c2                	cmp    %eax,%edx
f0108737:	0f 82 9b 00 00 00    	jb     f01087d8 <page_fault_handler+0x10d>
			uint32 virAdd = env_page_ws_get_virtual_address(curenv, curenv->page_last_WS_index);
f010873d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108740:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108746:	83 ec 08             	sub    $0x8,%esp
f0108749:	50                   	push   %eax
f010874a:	ff 75 08             	pushl  0x8(%ebp)
f010874d:	e8 a0 bd ff ff       	call   f01044f2 <env_page_ws_get_virtual_address>
f0108752:	83 c4 10             	add    $0x10,%esp
f0108755:	89 45 e8             	mov    %eax,-0x18(%ebp)

			if(pt_get_page_permissions(curenv, virAdd) & PERM_MODIFIED) {
f0108758:	83 ec 08             	sub    $0x8,%esp
f010875b:	ff 75 e8             	pushl  -0x18(%ebp)
f010875e:	ff 75 08             	pushl  0x8(%ebp)
f0108761:	e8 df c8 ff ff       	call   f0105045 <pt_get_page_permissions>
f0108766:	83 c4 10             	add    $0x10,%esp
f0108769:	83 e0 40             	and    $0x40,%eax
f010876c:	85 c0                	test   %eax,%eax
f010876e:	74 3a                	je     f01087aa <page_fault_handler+0xdf>
				ptrPT = NULL;
f0108770:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
				framePTR[0] = get_frame_info(curenv->env_page_directory, (void*)virAdd, &ptrPT);
f0108777:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010877a:	8b 45 08             	mov    0x8(%ebp),%eax
f010877d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108780:	83 ec 04             	sub    $0x4,%esp
f0108783:	8d 4d b0             	lea    -0x50(%ebp),%ecx
f0108786:	51                   	push   %ecx
f0108787:	52                   	push   %edx
f0108788:	50                   	push   %eax
f0108789:	e8 3b b6 ff ff       	call   f0103dc9 <get_frame_info>
f010878e:	83 c4 10             	add    $0x10,%esp
f0108791:	89 45 a8             	mov    %eax,-0x58(%ebp)
				pf_update_env_page(curenv, (void*)virAdd, framePTR[0]);
f0108794:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0108797:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010879a:	83 ec 04             	sub    $0x4,%esp
f010879d:	52                   	push   %edx
f010879e:	50                   	push   %eax
f010879f:	ff 75 08             	pushl  0x8(%ebp)
f01087a2:	e8 86 32 00 00       	call   f010ba2d <pf_update_env_page>
f01087a7:	83 c4 10             	add    $0x10,%esp
			}

			unmap_frame(curenv->env_page_directory, (void*)virAdd);
f01087aa:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01087ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01087b0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01087b3:	83 ec 08             	sub    $0x8,%esp
f01087b6:	52                   	push   %edx
f01087b7:	50                   	push   %eax
f01087b8:	e8 7c b6 ff ff       	call   f0103e39 <unmap_frame>
f01087bd:	83 c4 10             	add    $0x10,%esp
			env_page_ws_clear_entry(curenv, curenv->page_last_WS_index);
f01087c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01087c3:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01087c9:	83 ec 08             	sub    $0x8,%esp
f01087cc:	50                   	push   %eax
f01087cd:	ff 75 08             	pushl  0x8(%ebp)
f01087d0:	e8 a3 bc ff ff       	call   f0104478 <env_page_ws_clear_entry>
f01087d5:	83 c4 10             	add    $0x10,%esp
		}

		placement(curenv, fault_va);
f01087d8:	83 ec 08             	sub    $0x8,%esp
f01087db:	ff 75 0c             	pushl  0xc(%ebp)
f01087de:	ff 75 08             	pushl  0x8(%ebp)
f01087e1:	e8 d6 fd ff ff       	call   f01085bc <placement>
f01087e6:	83 c4 10             	add    $0x10,%esp

		if((pt_get_page_permissions(curenv, fault_va) & PERM_BUFFERED ) != PERM_BUFFERED) {
f01087e9:	83 ec 08             	sub    $0x8,%esp
f01087ec:	ff 75 0c             	pushl  0xc(%ebp)
f01087ef:	ff 75 08             	pushl  0x8(%ebp)
f01087f2:	e8 4e c8 ff ff       	call   f0105045 <pt_get_page_permissions>
f01087f7:	83 c4 10             	add    $0x10,%esp
f01087fa:	25 00 02 00 00       	and    $0x200,%eax
f01087ff:	85 c0                	test   %eax,%eax
f0108801:	75 76                	jne    f0108879 <page_fault_handler+0x1ae>
			if (pf_read_env_page( curenv, (uint32*)fault_va) == E_PAGE_NOT_EXIST_IN_PF){
f0108803:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108806:	83 ec 08             	sub    $0x8,%esp
f0108809:	50                   	push   %eax
f010880a:	ff 75 08             	pushl  0x8(%ebp)
f010880d:	e8 1a 33 00 00       	call   f010bb2c <pf_read_env_page>
f0108812:	83 c4 10             	add    $0x10,%esp
f0108815:	83 f8 f7             	cmp    $0xfffffff7,%eax
f0108818:	75 5f                	jne    f0108879 <page_fault_handler+0x1ae>
				if((fault_va >= USTACKBOTTOM) && (fault_va < USTACKTOP)) empty = pf_add_empty_env_page(curenv, fault_va, 0);
f010881a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108821:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108824:	2d 01 f0 fc 5f       	sub    $0x5ffcf001,%eax
f0108829:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010882c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010882f:	ba 00 00 00 00       	mov    $0x0,%edx
f0108834:	f7 75 e4             	divl   -0x1c(%ebp)
f0108837:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010883a:	29 d0                	sub    %edx,%eax
f010883c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010883f:	77 21                	ja     f0108862 <page_fault_handler+0x197>
f0108841:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0108848:	77 18                	ja     f0108862 <page_fault_handler+0x197>
f010884a:	83 ec 04             	sub    $0x4,%esp
f010884d:	6a 00                	push   $0x0
f010884f:	ff 75 0c             	pushl  0xc(%ebp)
f0108852:	ff 75 08             	pushl  0x8(%ebp)
f0108855:	e8 36 30 00 00       	call   f010b890 <pf_add_empty_env_page>
f010885a:	83 c4 10             	add    $0x10,%esp
f010885d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108860:	eb 17                	jmp    f0108879 <page_fault_handler+0x1ae>
				else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
f0108862:	83 ec 04             	sub    $0x4,%esp
f0108865:	68 44 ad 11 f0       	push   $0xf011ad44
f010886a:	68 fc 01 00 00       	push   $0x1fc
f010886f:	68 53 ac 11 f0       	push   $0xf011ac53
f0108874:	e8 fd 78 ff ff       	call   f0100176 <_panic>
			}
		}

		if(lastIDX == curenv->page_WS_max_size-1) curenv->page_last_WS_index=0;
f0108879:	8b 45 08             	mov    0x8(%ebp),%eax
f010887c:	8b 40 74             	mov    0x74(%eax),%eax
f010887f:	48                   	dec    %eax
f0108880:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108883:	75 12                	jne    f0108897 <page_fault_handler+0x1cc>
f0108885:	8b 45 08             	mov    0x8(%ebp),%eax
f0108888:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f010888f:	00 00 00 
		if(lastIDX == curenv->page_WS_max_size-1 ) curenv->page_last_WS_index=0;
		else curenv->page_last_WS_index = lastIDX+1;
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f0108892:	e9 e3 04 00 00       	jmp    f0108d7a <page_fault_handler+0x6af>
				else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
			}
		}

		if(lastIDX == curenv->page_WS_max_size-1) curenv->page_last_WS_index=0;
		else curenv->page_last_WS_index = lastIDX+1;
f0108897:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010889a:	8d 50 01             	lea    0x1(%eax),%edx
f010889d:	8b 45 08             	mov    0x8(%ebp),%eax
f01088a0:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
		if(lastIDX == curenv->page_WS_max_size-1 ) curenv->page_last_WS_index=0;
		else curenv->page_last_WS_index = lastIDX+1;
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f01088a6:	e9 cf 04 00 00       	jmp    f0108d7a <page_fault_handler+0x6af>
		if(lastIDX == curenv->page_WS_max_size-1) curenv->page_last_WS_index=0;
		else curenv->page_last_WS_index = lastIDX+1;
	}

	else {
		uint32 FP = curenv->page_last_WS_index, VA, CP, P_PE;
f01088ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ae:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01088b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		bool F1 = 0, F2 = 0;
f01088b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01088be:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

		while ((F1 == 0) && (F2 == 0)) {
f01088c5:	e9 08 02 00 00       	jmp    f0108ad2 <page_fault_handler+0x407>
			CP = curenv->page_last_WS_index;
f01088ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01088cd:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01088d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			VA = env_page_ws_get_virtual_address(curenv, CP);
f01088d6:	83 ec 08             	sub    $0x8,%esp
f01088d9:	ff 75 d0             	pushl  -0x30(%ebp)
f01088dc:	ff 75 08             	pushl  0x8(%ebp)
f01088df:	e8 0e bc ff ff       	call   f01044f2 <env_page_ws_get_virtual_address>
f01088e4:	83 c4 10             	add    $0x10,%esp
f01088e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			P_PE = pt_get_page_permissions( curenv, VA);
f01088ea:	83 ec 08             	sub    $0x8,%esp
f01088ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01088f0:	ff 75 08             	pushl  0x8(%ebp)
f01088f3:	e8 4d c7 ff ff       	call   f0105045 <pt_get_page_permissions>
f01088f8:	83 c4 10             	add    $0x10,%esp
f01088fb:	89 45 c8             	mov    %eax,-0x38(%ebp)

			if(((P_PE&PERM_USED)==0) && ((P_PE&PERM_MODIFIED)==0)) {
f01088fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108901:	83 e0 20             	and    $0x20,%eax
f0108904:	85 c0                	test   %eax,%eax
f0108906:	75 6e                	jne    f0108976 <page_fault_handler+0x2ab>
f0108908:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010890b:	83 e0 40             	and    $0x40,%eax
f010890e:	85 c0                	test   %eax,%eax
f0108910:	75 64                	jne    f0108976 <page_fault_handler+0x2ab>
				VIC = VA ;
f0108912:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108915:	89 45 f0             	mov    %eax,-0x10(%ebp)
				lastIDX = curenv->page_last_WS_index;
f0108918:	8b 45 08             	mov    0x8(%ebp),%eax
f010891b:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108921:	89 45 f4             	mov    %eax,-0xc(%ebp)
				env_page_ws_clear_entry(curenv, lastIDX);
f0108924:	83 ec 08             	sub    $0x8,%esp
f0108927:	ff 75 f4             	pushl  -0xc(%ebp)
f010892a:	ff 75 08             	pushl  0x8(%ebp)
f010892d:	e8 46 bb ff ff       	call   f0104478 <env_page_ws_clear_entry>
f0108932:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index++;
f0108935:	8b 45 08             	mov    0x8(%ebp),%eax
f0108938:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010893e:	8d 50 01             	lea    0x1(%eax),%edx
f0108941:	8b 45 08             	mov    0x8(%ebp),%eax
f0108944:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
				if(curenv->page_last_WS_index == curenv->page_WS_max_size) curenv->page_last_WS_index=0;
f010894a:	8b 45 08             	mov    0x8(%ebp),%eax
f010894d:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0108953:	8b 45 08             	mov    0x8(%ebp),%eax
f0108956:	8b 40 74             	mov    0x74(%eax),%eax
f0108959:	39 c2                	cmp    %eax,%edx
f010895b:	75 0d                	jne    f010896a <page_fault_handler+0x29f>
f010895d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108960:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108967:	00 00 00 
				F2 = 1;
f010896a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
				break;
f0108971:	e9 6c 01 00 00       	jmp    f0108ae2 <page_fault_handler+0x417>
			}

			curenv->page_last_WS_index++;
f0108976:	8b 45 08             	mov    0x8(%ebp),%eax
f0108979:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010897f:	8d 50 01             	lea    0x1(%eax),%edx
f0108982:	8b 45 08             	mov    0x8(%ebp),%eax
f0108985:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

			if(curenv->page_last_WS_index == curenv->page_WS_max_size) curenv->page_last_WS_index=0;
f010898b:	8b 45 08             	mov    0x8(%ebp),%eax
f010898e:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0108994:	8b 45 08             	mov    0x8(%ebp),%eax
f0108997:	8b 40 74             	mov    0x74(%eax),%eax
f010899a:	39 c2                	cmp    %eax,%edx
f010899c:	75 0d                	jne    f01089ab <page_fault_handler+0x2e0>
f010899e:	8b 45 08             	mov    0x8(%ebp),%eax
f01089a1:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01089a8:	00 00 00 
			if(curenv->page_last_WS_index == FP && F2==0 ) {
f01089ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01089ae:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01089b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01089b7:	0f 85 15 01 00 00    	jne    f0108ad2 <page_fault_handler+0x407>
f01089bd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01089c1:	0f 85 0b 01 00 00    	jne    f0108ad2 <page_fault_handler+0x407>
				while(F1 == 0) {
f01089c7:	e9 fc 00 00 00       	jmp    f0108ac8 <page_fault_handler+0x3fd>
					CP = curenv->page_last_WS_index;
f01089cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01089cf:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01089d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
					VA = env_page_ws_get_virtual_address(curenv, CP);
f01089d8:	83 ec 08             	sub    $0x8,%esp
f01089db:	ff 75 d0             	pushl  -0x30(%ebp)
f01089de:	ff 75 08             	pushl  0x8(%ebp)
f01089e1:	e8 0c bb ff ff       	call   f01044f2 <env_page_ws_get_virtual_address>
f01089e6:	83 c4 10             	add    $0x10,%esp
f01089e9:	89 45 cc             	mov    %eax,-0x34(%ebp)
					P_PE = pt_get_page_permissions(curenv, VA);
f01089ec:	83 ec 08             	sub    $0x8,%esp
f01089ef:	ff 75 cc             	pushl  -0x34(%ebp)
f01089f2:	ff 75 08             	pushl  0x8(%ebp)
f01089f5:	e8 4b c6 ff ff       	call   f0105045 <pt_get_page_permissions>
f01089fa:	83 c4 10             	add    $0x10,%esp
f01089fd:	89 45 c8             	mov    %eax,-0x38(%ebp)

					if((P_PE & PERM_USED) == 0) {
f0108a00:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108a03:	83 e0 20             	and    $0x20,%eax
f0108a06:	85 c0                	test   %eax,%eax
f0108a08:	75 61                	jne    f0108a6b <page_fault_handler+0x3a0>
						VIC = VA;
f0108a0a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108a0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
						lastIDX = curenv->page_last_WS_index;
f0108a10:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a13:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108a19:	89 45 f4             	mov    %eax,-0xc(%ebp)
						env_page_ws_clear_entry(curenv, lastIDX);
f0108a1c:	83 ec 08             	sub    $0x8,%esp
f0108a1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a22:	ff 75 08             	pushl  0x8(%ebp)
f0108a25:	e8 4e ba ff ff       	call   f0104478 <env_page_ws_clear_entry>
f0108a2a:	83 c4 10             	add    $0x10,%esp
						curenv->page_last_WS_index++;
f0108a2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a30:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108a36:	8d 50 01             	lea    0x1(%eax),%edx
f0108a39:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a3c:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
						if(curenv->page_last_WS_index == curenv->page_WS_max_size) curenv->page_last_WS_index=0;
f0108a42:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a45:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0108a4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a4e:	8b 40 74             	mov    0x74(%eax),%eax
f0108a51:	39 c2                	cmp    %eax,%edx
f0108a53:	75 0d                	jne    f0108a62 <page_fault_handler+0x397>
f0108a55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a58:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108a5f:	00 00 00 
						F1 = 1;
f0108a62:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
						break;
f0108a69:	eb 67                	jmp    f0108ad2 <page_fault_handler+0x407>
					}

					pt_set_page_permissions(curenv, VA, 0, PERM_USED);
f0108a6b:	6a 20                	push   $0x20
f0108a6d:	6a 00                	push   $0x0
f0108a6f:	ff 75 cc             	pushl  -0x34(%ebp)
f0108a72:	ff 75 08             	pushl  0x8(%ebp)
f0108a75:	e8 67 c2 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f0108a7a:	83 c4 10             	add    $0x10,%esp
					curenv->page_last_WS_index++;
f0108a7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a80:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108a86:	8d 50 01             	lea    0x1(%eax),%edx
f0108a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a8c:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

					if(curenv->page_last_WS_index == curenv->page_WS_max_size) curenv->page_last_WS_index=0;
f0108a92:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a95:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0108a9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a9e:	8b 40 74             	mov    0x74(%eax),%eax
f0108aa1:	39 c2                	cmp    %eax,%edx
f0108aa3:	75 0d                	jne    f0108ab2 <page_fault_handler+0x3e7>
f0108aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108aa8:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108aaf:	00 00 00 
					if((curenv->page_last_WS_index == FP) && F1==0) break;
f0108ab2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ab5:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108abb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108abe:	75 08                	jne    f0108ac8 <page_fault_handler+0x3fd>
f0108ac0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0108ac4:	75 02                	jne    f0108ac8 <page_fault_handler+0x3fd>
f0108ac6:	eb 0a                	jmp    f0108ad2 <page_fault_handler+0x407>

			curenv->page_last_WS_index++;

			if(curenv->page_last_WS_index == curenv->page_WS_max_size) curenv->page_last_WS_index=0;
			if(curenv->page_last_WS_index == FP && F2==0 ) {
				while(F1 == 0) {
f0108ac8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0108acc:	0f 84 fa fe ff ff    	je     f01089cc <page_fault_handler+0x301>

	else {
		uint32 FP = curenv->page_last_WS_index, VA, CP, P_PE;
		bool F1 = 0, F2 = 0;

		while ((F1 == 0) && (F2 == 0)) {
f0108ad2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0108ad6:	75 0a                	jne    f0108ae2 <page_fault_handler+0x417>
f0108ad8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0108adc:	0f 84 e8 fd ff ff    	je     f01088ca <page_fault_handler+0x1ff>
					if((curenv->page_last_WS_index == FP) && F1==0) break;
				}
			}
		}

		ptrPT = NULL;
f0108ae2:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
		framePTR[1] = get_frame_info(curenv->env_page_directory, (void*)VIC, &ptrPT);
f0108ae9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0108aef:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108af2:	83 ec 04             	sub    $0x4,%esp
f0108af5:	8d 4d b0             	lea    -0x50(%ebp),%ecx
f0108af8:	51                   	push   %ecx
f0108af9:	52                   	push   %edx
f0108afa:	50                   	push   %eax
f0108afb:	e8 c9 b2 ff ff       	call   f0103dc9 <get_frame_info>
f0108b00:	83 c4 10             	add    $0x10,%esp
f0108b03:	89 45 ac             	mov    %eax,-0x54(%ebp)
		uint32 sizebufferlist = getModifiedBufferLength();
f0108b06:	e8 dd f8 ff ff       	call   f01083e8 <getModifiedBufferLength>
f0108b0b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		framePTR[1]->isBuffered = 1;
f0108b0e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108b11:	c6 40 14 01          	movb   $0x1,0x14(%eax)
		pt_set_page_permissions(curenv, VIC, PERM_BUFFERED, PERM_PRESENT);
f0108b15:	6a 01                	push   $0x1
f0108b17:	68 00 02 00 00       	push   $0x200
f0108b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b1f:	ff 75 08             	pushl  0x8(%ebp)
f0108b22:	e8 ba c1 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f0108b27:	83 c4 10             	add    $0x10,%esp
		P_PE = pt_get_page_permissions(curenv, VIC);
f0108b2a:	83 ec 08             	sub    $0x8,%esp
f0108b2d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b30:	ff 75 08             	pushl  0x8(%ebp)
f0108b33:	e8 0d c5 ff ff       	call   f0105045 <pt_get_page_permissions>
f0108b38:	83 c4 10             	add    $0x10,%esp
f0108b3b:	89 45 c8             	mov    %eax,-0x38(%ebp)

		if((P_PE&PERM_MODIFIED)==PERM_MODIFIED) {
f0108b3e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b41:	83 e0 40             	and    $0x40,%eax
f0108b44:	85 c0                	test   %eax,%eax
f0108b46:	0f 84 c2 00 00 00    	je     f0108c0e <page_fault_handler+0x543>
			bufferList_add_page(&modified_frame_list, framePTR[1]);
f0108b4c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108b4f:	83 ec 08             	sub    $0x8,%esp
f0108b52:	50                   	push   %eax
f0108b53:	68 00 58 55 f0       	push   $0xf0555800
f0108b58:	e8 26 c0 ff ff       	call   f0104b83 <bufferList_add_page>
f0108b5d:	83 c4 10             	add    $0x10,%esp
			if(sizebufferlist == LIST_SIZE(&modified_frame_list)) {
f0108b60:	a1 0c 58 55 f0       	mov    0xf055580c,%eax
f0108b65:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0108b68:	0f 85 b4 00 00 00    	jne    f0108c22 <page_fault_handler+0x557>
				LIST_FOREACH(framePTR[1], &modified_frame_list) {
f0108b6e:	a1 00 58 55 f0       	mov    0xf0555800,%eax
f0108b73:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108b76:	eb 64                	jmp    f0108bdc <page_fault_handler+0x511>
					VA = framePTR[1]->va;
f0108b78:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108b7b:	8b 40 0c             	mov    0xc(%eax),%eax
f0108b7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
					int ret1 = pf_update_env_page(curenv, (uint32*)VA, framePTR[1]);
f0108b81:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0108b84:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b87:	83 ec 04             	sub    $0x4,%esp
f0108b8a:	52                   	push   %edx
f0108b8b:	50                   	push   %eax
f0108b8c:	ff 75 08             	pushl  0x8(%ebp)
f0108b8f:	e8 99 2e 00 00       	call   f010ba2d <pf_update_env_page>
f0108b94:	83 c4 10             	add    $0x10,%esp
f0108b97:	89 45 c0             	mov    %eax,-0x40(%ebp)
					pt_set_page_permissions(curenv, VA, 0, PERM_MODIFIED);
f0108b9a:	6a 40                	push   $0x40
f0108b9c:	6a 00                	push   $0x0
f0108b9e:	ff 75 cc             	pushl  -0x34(%ebp)
f0108ba1:	ff 75 08             	pushl  0x8(%ebp)
f0108ba4:	e8 38 c1 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f0108ba9:	83 c4 10             	add    $0x10,%esp

					bufferlist_remove_page(&modified_frame_list, framePTR[1]);
f0108bac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108baf:	83 ec 08             	sub    $0x8,%esp
f0108bb2:	50                   	push   %eax
f0108bb3:	68 00 58 55 f0       	push   $0xf0555800
f0108bb8:	e8 18 c0 ff ff       	call   f0104bd5 <bufferlist_remove_page>
f0108bbd:	83 c4 10             	add    $0x10,%esp
					bufferList_add_page(&free_frame_list, framePTR[1]);
f0108bc0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108bc3:	83 ec 08             	sub    $0x8,%esp
f0108bc6:	50                   	push   %eax
f0108bc7:	68 14 58 55 f0       	push   $0xf0555814
f0108bcc:	e8 b2 bf ff ff       	call   f0104b83 <bufferList_add_page>
f0108bd1:	83 c4 10             	add    $0x10,%esp
		P_PE = pt_get_page_permissions(curenv, VIC);

		if((P_PE&PERM_MODIFIED)==PERM_MODIFIED) {
			bufferList_add_page(&modified_frame_list, framePTR[1]);
			if(sizebufferlist == LIST_SIZE(&modified_frame_list)) {
				LIST_FOREACH(framePTR[1], &modified_frame_list) {
f0108bd4:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f0108bd9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108bdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108bdf:	85 c0                	test   %eax,%eax
f0108be1:	74 07                	je     f0108bea <page_fault_handler+0x51f>
f0108be3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108be6:	8b 00                	mov    (%eax),%eax
f0108be8:	eb 05                	jmp    f0108bef <page_fault_handler+0x524>
f0108bea:	b8 00 00 00 00       	mov    $0x0,%eax
f0108bef:	a3 08 58 55 f0       	mov    %eax,0xf0555808
f0108bf4:	a1 08 58 55 f0       	mov    0xf0555808,%eax
f0108bf9:	85 c0                	test   %eax,%eax
f0108bfb:	0f 85 77 ff ff ff    	jne    f0108b78 <page_fault_handler+0x4ad>
f0108c01:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108c04:	85 c0                	test   %eax,%eax
f0108c06:	0f 85 6c ff ff ff    	jne    f0108b78 <page_fault_handler+0x4ad>
f0108c0c:	eb 14                	jmp    f0108c22 <page_fault_handler+0x557>

					bufferlist_remove_page(&modified_frame_list, framePTR[1]);
					bufferList_add_page(&free_frame_list, framePTR[1]);
				}
			}
		} else bufferList_add_page(&free_frame_list, framePTR[1]);
f0108c0e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108c11:	83 ec 08             	sub    $0x8,%esp
f0108c14:	50                   	push   %eax
f0108c15:	68 14 58 55 f0       	push   $0xf0555814
f0108c1a:	e8 64 bf ff ff       	call   f0104b83 <bufferList_add_page>
f0108c1f:	83 c4 10             	add    $0x10,%esp

		P_PE = pt_get_page_permissions(curenv, fault_va);
f0108c22:	83 ec 08             	sub    $0x8,%esp
f0108c25:	ff 75 0c             	pushl  0xc(%ebp)
f0108c28:	ff 75 08             	pushl  0x8(%ebp)
f0108c2b:	e8 15 c4 ff ff       	call   f0105045 <pt_get_page_permissions>
f0108c30:	83 c4 10             	add    $0x10,%esp
f0108c33:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if((P_PE&PERM_BUFFERED)==PERM_BUFFERED) {
f0108c36:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108c39:	25 00 02 00 00       	and    $0x200,%eax
f0108c3e:	85 c0                	test   %eax,%eax
f0108c40:	74 58                	je     f0108c9a <page_fault_handler+0x5cf>
			pt_set_page_permissions(curenv, fault_va, PERM_PRESENT, PERM_BUFFERED);
f0108c42:	68 00 02 00 00       	push   $0x200
f0108c47:	6a 01                	push   $0x1
f0108c49:	ff 75 0c             	pushl  0xc(%ebp)
f0108c4c:	ff 75 08             	pushl  0x8(%ebp)
f0108c4f:	e8 8d c0 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f0108c54:	83 c4 10             	add    $0x10,%esp
			framePTR[0]->isBuffered = 0;
f0108c57:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0108c5a:	c6 40 14 00          	movb   $0x0,0x14(%eax)
			if((P_PE&PERM_MODIFIED)==PERM_MODIFIED) bufferlist_remove_page(&modified_frame_list, framePTR[0]);
f0108c5e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108c61:	83 e0 40             	and    $0x40,%eax
f0108c64:	85 c0                	test   %eax,%eax
f0108c66:	74 19                	je     f0108c81 <page_fault_handler+0x5b6>
f0108c68:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0108c6b:	83 ec 08             	sub    $0x8,%esp
f0108c6e:	50                   	push   %eax
f0108c6f:	68 00 58 55 f0       	push   $0xf0555800
f0108c74:	e8 5c bf ff ff       	call   f0104bd5 <bufferlist_remove_page>
f0108c79:	83 c4 10             	add    $0x10,%esp
f0108c7c:	e9 bb 00 00 00       	jmp    f0108d3c <page_fault_handler+0x671>
			else bufferlist_remove_page(&free_frame_list, framePTR[0]);
f0108c81:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0108c84:	83 ec 08             	sub    $0x8,%esp
f0108c87:	50                   	push   %eax
f0108c88:	68 14 58 55 f0       	push   $0xf0555814
f0108c8d:	e8 43 bf ff ff       	call   f0104bd5 <bufferlist_remove_page>
f0108c92:	83 c4 10             	add    $0x10,%esp
f0108c95:	e9 a2 00 00 00       	jmp    f0108d3c <page_fault_handler+0x671>
		}
		else {
			allocate_frame(&framePTR[0]);
f0108c9a:	83 ec 0c             	sub    $0xc,%esp
f0108c9d:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0108ca0:	50                   	push   %eax
f0108ca1:	e8 f0 ac ff ff       	call   f0103996 <allocate_frame>
f0108ca6:	83 c4 10             	add    $0x10,%esp
			map_frame(curenv->env_page_directory, framePTR[0],(void *)fault_va, PERM_PRESENT|PERM_USER|PERM_WRITEABLE);
f0108ca9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108cac:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0108caf:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cb2:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108cb5:	6a 07                	push   $0x7
f0108cb7:	51                   	push   %ecx
f0108cb8:	52                   	push   %edx
f0108cb9:	50                   	push   %eax
f0108cba:	e8 4b b0 ff ff       	call   f0103d0a <map_frame>
f0108cbf:	83 c4 10             	add    $0x10,%esp
			uint32 EM_P_RE = pf_read_env_page(curenv, (uint32*)fault_va);
f0108cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cc5:	83 ec 08             	sub    $0x8,%esp
f0108cc8:	50                   	push   %eax
f0108cc9:	ff 75 08             	pushl  0x8(%ebp)
f0108ccc:	e8 5b 2e 00 00       	call   f010bb2c <pf_read_env_page>
f0108cd1:	83 c4 10             	add    $0x10,%esp
f0108cd4:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if(EM_P_RE == E_PAGE_NOT_EXIST_IN_PF) {
f0108cd7:	83 7d bc f7          	cmpl   $0xfffffff7,-0x44(%ebp)
f0108cdb:	75 5f                	jne    f0108d3c <page_fault_handler+0x671>
				if((fault_va >= USTACKBOTTOM ) && (fault_va < USTACKTOP)) EM_P_RE=pf_add_empty_env_page(curenv, fault_va, 0);
f0108cdd:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0108ce4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0108ce7:	2d 01 f0 fc 5f       	sub    $0x5ffcf001,%eax
f0108cec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0108cef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0108cf7:	f7 75 b8             	divl   -0x48(%ebp)
f0108cfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cfd:	29 d0                	sub    %edx,%eax
f0108cff:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108d02:	77 21                	ja     f0108d25 <page_fault_handler+0x65a>
f0108d04:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0108d0b:	77 18                	ja     f0108d25 <page_fault_handler+0x65a>
f0108d0d:	83 ec 04             	sub    $0x4,%esp
f0108d10:	6a 00                	push   $0x0
f0108d12:	ff 75 0c             	pushl  0xc(%ebp)
f0108d15:	ff 75 08             	pushl  0x8(%ebp)
f0108d18:	e8 73 2b 00 00       	call   f010b890 <pf_add_empty_env_page>
f0108d1d:	83 c4 10             	add    $0x10,%esp
f0108d20:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108d23:	eb 17                	jmp    f0108d3c <page_fault_handler+0x671>
				else panic("\n\n\t=(PANIC)=> Page doesn't exist on PageFile or Stack\n");
f0108d25:	83 ec 04             	sub    $0x4,%esp
f0108d28:	68 44 ad 11 f0       	push   $0xf011ad44
f0108d2d:	68 55 02 00 00       	push   $0x255
f0108d32:	68 53 ac 11 f0       	push   $0xf011ac53
f0108d37:	e8 3a 74 ff ff       	call   f0100176 <_panic>
			}
		}

		env_page_ws_set_entry(curenv, lastIDX, fault_va);
f0108d3c:	83 ec 04             	sub    $0x4,%esp
f0108d3f:	ff 75 0c             	pushl  0xc(%ebp)
f0108d42:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d45:	ff 75 08             	pushl  0x8(%ebp)
f0108d48:	e8 84 b6 ff ff       	call   f01043d1 <env_page_ws_set_entry>
f0108d4d:	83 c4 10             	add    $0x10,%esp

		if(lastIDX == curenv->page_WS_max_size-1 ) curenv->page_last_WS_index=0;
f0108d50:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d53:	8b 40 74             	mov    0x74(%eax),%eax
f0108d56:	48                   	dec    %eax
f0108d57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108d5a:	75 0f                	jne    f0108d6b <page_fault_handler+0x6a0>
f0108d5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d5f:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f0108d66:	00 00 00 
		else curenv->page_last_WS_index = lastIDX+1;
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f0108d69:	eb 0f                	jmp    f0108d7a <page_fault_handler+0x6af>
		}

		env_page_ws_set_entry(curenv, lastIDX, fault_va);

		if(lastIDX == curenv->page_WS_max_size-1 ) curenv->page_last_WS_index=0;
		else curenv->page_last_WS_index = lastIDX+1;
f0108d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0108d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d74:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
	}

	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority‌
}
f0108d7a:	90                   	nop
f0108d7b:	c9                   	leave  
f0108d7c:	c3                   	ret    

f0108d7d <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f0108d7d:	55                   	push   %ebp
f0108d7e:	89 e5                	mov    %esp,%ebp
f0108d80:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("this function is not required...!!");
f0108d83:	83 ec 04             	sub    $0x4,%esp
f0108d86:	68 7c ad 11 f0       	push   $0xf011ad7c
f0108d8b:	68 65 02 00 00       	push   $0x265
f0108d90:	68 53 ac 11 f0       	push   $0xf011ac53
f0108d95:	e8 dc 73 ff ff       	call   f0100176 <_panic>

f0108d9a <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f0108d9a:	6a 0e                	push   $0xe
f0108d9c:	e9 ed 00 00 00       	jmp    f0108e8e <_alltraps>
f0108da1:	90                   	nop

f0108da2 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f0108da2:	6a 00                	push   $0x0
f0108da4:	6a 30                	push   $0x30
f0108da6:	e9 e3 00 00 00       	jmp    f0108e8e <_alltraps>
f0108dab:	90                   	nop

f0108dac <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f0108dac:	6a 08                	push   $0x8
f0108dae:	e9 db 00 00 00       	jmp    f0108e8e <_alltraps>
f0108db3:	90                   	nop

f0108db4 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f0108db4:	6a 00                	push   $0x0
f0108db6:	6a 00                	push   $0x0
f0108db8:	e9 d1 00 00 00       	jmp    f0108e8e <_alltraps>
f0108dbd:	90                   	nop

f0108dbe <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f0108dbe:	6a 00                	push   $0x0
f0108dc0:	6a 01                	push   $0x1
f0108dc2:	e9 c7 00 00 00       	jmp    f0108e8e <_alltraps>
f0108dc7:	90                   	nop

f0108dc8 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f0108dc8:	6a 00                	push   $0x0
f0108dca:	6a 02                	push   $0x2
f0108dcc:	e9 bd 00 00 00       	jmp    f0108e8e <_alltraps>
f0108dd1:	90                   	nop

f0108dd2 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f0108dd2:	6a 00                	push   $0x0
f0108dd4:	6a 03                	push   $0x3
f0108dd6:	e9 b3 00 00 00       	jmp    f0108e8e <_alltraps>
f0108ddb:	90                   	nop

f0108ddc <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f0108ddc:	6a 00                	push   $0x0
f0108dde:	6a 04                	push   $0x4
f0108de0:	e9 a9 00 00 00       	jmp    f0108e8e <_alltraps>
f0108de5:	90                   	nop

f0108de6 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f0108de6:	6a 00                	push   $0x0
f0108de8:	6a 05                	push   $0x5
f0108dea:	e9 9f 00 00 00       	jmp    f0108e8e <_alltraps>
f0108def:	90                   	nop

f0108df0 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f0108df0:	6a 00                	push   $0x0
f0108df2:	6a 06                	push   $0x6
f0108df4:	e9 95 00 00 00       	jmp    f0108e8e <_alltraps>
f0108df9:	90                   	nop

f0108dfa <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f0108dfa:	6a 00                	push   $0x0
f0108dfc:	6a 07                	push   $0x7
f0108dfe:	e9 8b 00 00 00       	jmp    f0108e8e <_alltraps>
f0108e03:	90                   	nop

f0108e04 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f0108e04:	6a 0a                	push   $0xa
f0108e06:	e9 83 00 00 00       	jmp    f0108e8e <_alltraps>
f0108e0b:	90                   	nop

f0108e0c <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f0108e0c:	6a 0b                	push   $0xb
f0108e0e:	eb 7e                	jmp    f0108e8e <_alltraps>

f0108e10 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f0108e10:	6a 0c                	push   $0xc
f0108e12:	eb 7a                	jmp    f0108e8e <_alltraps>

f0108e14 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f0108e14:	6a 0d                	push   $0xd
f0108e16:	eb 76                	jmp    f0108e8e <_alltraps>

f0108e18 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f0108e18:	6a 00                	push   $0x0
f0108e1a:	6a 10                	push   $0x10
f0108e1c:	eb 70                	jmp    f0108e8e <_alltraps>

f0108e1e <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f0108e1e:	6a 11                	push   $0x11
f0108e20:	eb 6c                	jmp    f0108e8e <_alltraps>

f0108e22 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f0108e22:	6a 00                	push   $0x0
f0108e24:	6a 12                	push   $0x12
f0108e26:	eb 66                	jmp    f0108e8e <_alltraps>

f0108e28 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f0108e28:	6a 00                	push   $0x0
f0108e2a:	6a 13                	push   $0x13
f0108e2c:	eb 60                	jmp    f0108e8e <_alltraps>

f0108e2e <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f0108e2e:	6a 00                	push   $0x0
f0108e30:	6a 20                	push   $0x20
f0108e32:	eb 5a                	jmp    f0108e8e <_alltraps>

f0108e34 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f0108e34:	6a 00                	push   $0x0
f0108e36:	6a 21                	push   $0x21
f0108e38:	eb 54                	jmp    f0108e8e <_alltraps>

f0108e3a <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f0108e3a:	6a 00                	push   $0x0
f0108e3c:	6a 22                	push   $0x22
f0108e3e:	eb 4e                	jmp    f0108e8e <_alltraps>

f0108e40 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f0108e40:	6a 00                	push   $0x0
f0108e42:	6a 23                	push   $0x23
f0108e44:	eb 48                	jmp    f0108e8e <_alltraps>

f0108e46 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f0108e46:	6a 00                	push   $0x0
f0108e48:	6a 24                	push   $0x24
f0108e4a:	eb 42                	jmp    f0108e8e <_alltraps>

f0108e4c <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f0108e4c:	6a 00                	push   $0x0
f0108e4e:	6a 25                	push   $0x25
f0108e50:	eb 3c                	jmp    f0108e8e <_alltraps>

f0108e52 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f0108e52:	6a 00                	push   $0x0
f0108e54:	6a 26                	push   $0x26
f0108e56:	eb 36                	jmp    f0108e8e <_alltraps>

f0108e58 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f0108e58:	6a 00                	push   $0x0
f0108e5a:	6a 27                	push   $0x27
f0108e5c:	eb 30                	jmp    f0108e8e <_alltraps>

f0108e5e <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f0108e5e:	6a 00                	push   $0x0
f0108e60:	6a 28                	push   $0x28
f0108e62:	eb 2a                	jmp    f0108e8e <_alltraps>

f0108e64 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f0108e64:	6a 00                	push   $0x0
f0108e66:	6a 29                	push   $0x29
f0108e68:	eb 24                	jmp    f0108e8e <_alltraps>

f0108e6a <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f0108e6a:	6a 00                	push   $0x0
f0108e6c:	6a 2a                	push   $0x2a
f0108e6e:	eb 1e                	jmp    f0108e8e <_alltraps>

f0108e70 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f0108e70:	6a 00                	push   $0x0
f0108e72:	6a 2b                	push   $0x2b
f0108e74:	eb 18                	jmp    f0108e8e <_alltraps>

f0108e76 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f0108e76:	6a 00                	push   $0x0
f0108e78:	6a 2c                	push   $0x2c
f0108e7a:	eb 12                	jmp    f0108e8e <_alltraps>

f0108e7c <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f0108e7c:	6a 00                	push   $0x0
f0108e7e:	6a 2d                	push   $0x2d
f0108e80:	eb 0c                	jmp    f0108e8e <_alltraps>

f0108e82 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f0108e82:	6a 00                	push   $0x0
f0108e84:	6a 2e                	push   $0x2e
f0108e86:	eb 06                	jmp    f0108e8e <_alltraps>

f0108e88 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f0108e88:	6a 00                	push   $0x0
f0108e8a:	6a 2f                	push   $0x2f
f0108e8c:	eb 00                	jmp    f0108e8e <_alltraps>

f0108e8e <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds 
f0108e8e:	1e                   	push   %ds
push %es 
f0108e8f:	06                   	push   %es
pushal 	
f0108e90:	60                   	pusha  

mov $(GD_KD), %ax 
f0108e91:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f0108e95:	8e d8                	mov    %eax,%ds
mov %ax,%es
f0108e97:	8e c0                	mov    %eax,%es

push %esp
f0108e99:	54                   	push   %esp

call trap
f0108e9a:	e8 d9 f2 ff ff       	call   f0108178 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at 
f0108e9f:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal 	
f0108ea0:	61                   	popa   
pop %es 
f0108ea1:	07                   	pop    %es
pop %ds    
f0108ea2:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f0108ea3:	83 c4 08             	add    $0x8,%esp

iret
f0108ea6:	cf                   	iret   

f0108ea7 <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0108ea7:	55                   	push   %ebp
f0108ea8:	89 e5                	mov    %esp,%ebp
f0108eaa:	a1 b0 73 53 f0       	mov    0xf05373b0,%eax
f0108eaf:	85 c0                	test   %eax,%eax
f0108eb1:	75 07                	jne    f0108eba <isSchedMethodRR+0x13>
f0108eb3:	b8 01 00 00 00       	mov    $0x1,%eax
f0108eb8:	eb 05                	jmp    f0108ebf <isSchedMethodRR+0x18>
f0108eba:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ebf:	5d                   	pop    %ebp
f0108ec0:	c3                   	ret    

f0108ec1 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0108ec1:	55                   	push   %ebp
f0108ec2:	89 e5                	mov    %esp,%ebp
f0108ec4:	a1 b0 73 53 f0       	mov    0xf05373b0,%eax
f0108ec9:	83 f8 01             	cmp    $0x1,%eax
f0108ecc:	75 07                	jne    f0108ed5 <isSchedMethodMLFQ+0x14>
f0108ece:	b8 01 00 00 00       	mov    $0x1,%eax
f0108ed3:	eb 05                	jmp    f0108eda <isSchedMethodMLFQ+0x19>
f0108ed5:	b8 00 00 00 00       	mov    $0x0,%eax
f0108eda:	5d                   	pop    %ebp
f0108edb:	c3                   	ret    

f0108edc <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0108edc:	55                   	push   %ebp
f0108edd:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0108edf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108ee3:	74 1d                	je     f0108f02 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0108ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ee8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108eee:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ef1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0108ef8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108efb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0108f02:	90                   	nop
f0108f03:	5d                   	pop    %ebp
f0108f04:	c3                   	ret    

f0108f05 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0108f05:	55                   	push   %ebp
f0108f06:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0108f08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108f0c:	74 08                	je     f0108f16 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0108f0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f11:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f14:	eb 05                	jmp    f0108f1b <queue_size+0x16>
	}
	else
	{
		return 0;
f0108f16:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0108f1b:	5d                   	pop    %ebp
f0108f1c:	c3                   	ret    

f0108f1d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0108f1d:	55                   	push   %ebp
f0108f1e:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0108f20:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0108f24:	74 4c                	je     f0108f72 <enqueue+0x55>
	{
		LIST_INSERT_HEAD(queue, env);
f0108f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f29:	8b 10                	mov    (%eax),%edx
f0108f2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f2e:	89 50 44             	mov    %edx,0x44(%eax)
f0108f31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f34:	8b 40 44             	mov    0x44(%eax),%eax
f0108f37:	85 c0                	test   %eax,%eax
f0108f39:	74 0d                	je     f0108f48 <enqueue+0x2b>
f0108f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f3e:	8b 00                	mov    (%eax),%eax
f0108f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f43:	89 50 48             	mov    %edx,0x48(%eax)
f0108f46:	eb 09                	jmp    f0108f51 <enqueue+0x34>
f0108f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f4b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f4e:	89 50 04             	mov    %edx,0x4(%eax)
f0108f51:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f54:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f57:	89 10                	mov    %edx,(%eax)
f0108f59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f5c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f66:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f69:	8d 50 01             	lea    0x1(%eax),%edx
f0108f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f6f:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0108f72:	90                   	nop
f0108f73:	5d                   	pop    %ebp
f0108f74:	c3                   	ret    

f0108f75 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0108f75:	55                   	push   %ebp
f0108f76:	89 e5                	mov    %esp,%ebp
f0108f78:	83 ec 10             	sub    $0x10,%esp
	struct Env* envItem = LIST_LAST(queue);
f0108f7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f7e:	8b 40 04             	mov    0x4(%eax),%eax
f0108f81:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (envItem != NULL)
f0108f84:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0108f88:	74 70                	je     f0108ffa <dequeue+0x85>
	{
		LIST_REMOVE(queue, envItem);
f0108f8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108f8d:	8b 40 44             	mov    0x44(%eax),%eax
f0108f90:	85 c0                	test   %eax,%eax
f0108f92:	74 11                	je     f0108fa5 <dequeue+0x30>
f0108f94:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108f97:	8b 40 44             	mov    0x44(%eax),%eax
f0108f9a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108f9d:	8b 52 48             	mov    0x48(%edx),%edx
f0108fa0:	89 50 48             	mov    %edx,0x48(%eax)
f0108fa3:	eb 0c                	jmp    f0108fb1 <dequeue+0x3c>
f0108fa5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fa8:	8b 50 48             	mov    0x48(%eax),%edx
f0108fab:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fae:	89 50 04             	mov    %edx,0x4(%eax)
f0108fb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fb4:	8b 40 48             	mov    0x48(%eax),%eax
f0108fb7:	85 c0                	test   %eax,%eax
f0108fb9:	74 11                	je     f0108fcc <dequeue+0x57>
f0108fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fbe:	8b 40 48             	mov    0x48(%eax),%eax
f0108fc1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108fc4:	8b 52 44             	mov    0x44(%edx),%edx
f0108fc7:	89 50 44             	mov    %edx,0x44(%eax)
f0108fca:	eb 0b                	jmp    f0108fd7 <dequeue+0x62>
f0108fcc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fcf:	8b 50 44             	mov    0x44(%eax),%edx
f0108fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fd5:	89 10                	mov    %edx,(%eax)
f0108fd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fda:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0108fe1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108fe4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0108feb:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fee:	8b 40 0c             	mov    0xc(%eax),%eax
f0108ff1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108ff4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ff7:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0108ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0108ffd:	c9                   	leave  
f0108ffe:	c3                   	ret    

f0108fff <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0108fff:	55                   	push   %ebp
f0109000:	89 e5                	mov    %esp,%ebp
	if (e != NULL)
f0109002:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0109006:	74 70                	je     f0109078 <remove_from_queue+0x79>
	{
		LIST_REMOVE(queue, e);
f0109008:	8b 45 0c             	mov    0xc(%ebp),%eax
f010900b:	8b 40 44             	mov    0x44(%eax),%eax
f010900e:	85 c0                	test   %eax,%eax
f0109010:	74 11                	je     f0109023 <remove_from_queue+0x24>
f0109012:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109015:	8b 40 44             	mov    0x44(%eax),%eax
f0109018:	8b 55 0c             	mov    0xc(%ebp),%edx
f010901b:	8b 52 48             	mov    0x48(%edx),%edx
f010901e:	89 50 48             	mov    %edx,0x48(%eax)
f0109021:	eb 0c                	jmp    f010902f <remove_from_queue+0x30>
f0109023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109026:	8b 50 48             	mov    0x48(%eax),%edx
f0109029:	8b 45 08             	mov    0x8(%ebp),%eax
f010902c:	89 50 04             	mov    %edx,0x4(%eax)
f010902f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109032:	8b 40 48             	mov    0x48(%eax),%eax
f0109035:	85 c0                	test   %eax,%eax
f0109037:	74 11                	je     f010904a <remove_from_queue+0x4b>
f0109039:	8b 45 0c             	mov    0xc(%ebp),%eax
f010903c:	8b 40 48             	mov    0x48(%eax),%eax
f010903f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109042:	8b 52 44             	mov    0x44(%edx),%edx
f0109045:	89 50 44             	mov    %edx,0x44(%eax)
f0109048:	eb 0b                	jmp    f0109055 <remove_from_queue+0x56>
f010904a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010904d:	8b 50 44             	mov    0x44(%eax),%edx
f0109050:	8b 45 08             	mov    0x8(%ebp),%eax
f0109053:	89 10                	mov    %edx,(%eax)
f0109055:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010905f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 40 0c             	mov    0xc(%eax),%eax
f010906f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109072:	8b 45 08             	mov    0x8(%ebp),%eax
f0109075:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0109078:	90                   	nop
f0109079:	5d                   	pop    %ebp
f010907a:	c3                   	ret    

f010907b <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010907b:	55                   	push   %ebp
f010907c:	89 e5                	mov    %esp,%ebp
f010907e:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0109081:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0109088:	8b 45 08             	mov    0x8(%ebp),%eax
f010908b:	8b 00                	mov    (%eax),%eax
f010908d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0109090:	eb 19                	jmp    f01090ab <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0109092:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0109095:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109098:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010909b:	75 05                	jne    f01090a2 <find_env_in_queue+0x27>
		{
			return ptr_env;
f010909d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01090a0:	eb 37                	jmp    f01090d9 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01090a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090a5:	8b 40 08             	mov    0x8(%eax),%eax
f01090a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01090ab:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01090af:	74 08                	je     f01090b9 <find_env_in_queue+0x3e>
f01090b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01090b4:	8b 40 44             	mov    0x44(%eax),%eax
f01090b7:	eb 05                	jmp    f01090be <find_env_in_queue+0x43>
f01090b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01090be:	8b 55 08             	mov    0x8(%ebp),%edx
f01090c1:	89 42 08             	mov    %eax,0x8(%edx)
f01090c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090c7:	8b 40 08             	mov    0x8(%eax),%eax
f01090ca:	85 c0                	test   %eax,%eax
f01090cc:	75 c4                	jne    f0109092 <find_env_in_queue+0x17>
f01090ce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01090d2:	75 be                	jne    f0109092 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01090d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01090d9:	c9                   	leave  
f01090da:	c3                   	ret    

f01090db <sched_init_MLFQ>:

uint32 ret;
uint8 val;
struct Env* next;

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel) {
f01090db:	55                   	push   %ebp
f01090dc:	89 e5                	mov    %esp,%ebp
f01090de:	53                   	push   %ebx
f01090df:	83 ec 34             	sub    $0x34,%esp
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	88 45 d4             	mov    %al,-0x2c(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01090e8:	e8 b1 03 00 00       	call   f010949e <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01090ed:	c7 05 b8 73 53 f0 00 	movl   $0x0,0xf05373b8
f01090f4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01090f7:	c7 05 b0 73 53 f0 01 	movl   $0x1,0xf05373b0
f01090fe:	00 00 00 

	//TODO: [PROJECT 2022 [7] CPU Scheduling MLFQ] Initialize MLFQ
	// Write your code here, remove the panic and write your code
	//panic("sched_init_MLFQ() is not implemented yet...!!");

	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*numOfLevels);
f0109101:	0f b6 45 d4          	movzbl -0x2c(%ebp),%eax
f0109105:	c1 e0 04             	shl    $0x4,%eax
f0109108:	83 ec 0c             	sub    $0xc,%esp
f010910b:	50                   	push   %eax
f010910c:	e8 5f 32 00 00       	call   f010c370 <kmalloc>
f0109111:	83 c4 10             	add    $0x10,%esp
f0109114:	a3 74 73 53 f0       	mov    %eax,0xf0537374
	num_of_ready_queues = numOfLevels;
f0109119:	8a 45 d4             	mov    -0x2c(%ebp),%al
f010911c:	a2 c0 73 53 f0       	mov    %al,0xf05373c0

	//[1] Create the ready queues and initialize them using init_queue()
	quantums = quantumOfEachLevel;
f0109121:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109124:	a3 90 73 53 f0       	mov    %eax,0xf0537390
	for(int i=0;i<num_of_ready_queues;i++)
f0109129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109130:	eb 1c                	jmp    f010914e <sched_init_MLFQ+0x73>
		init_queue(&(env_ready_queues[i]));
f0109132:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109137:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010913a:	c1 e2 04             	shl    $0x4,%edx
f010913d:	01 d0                	add    %edx,%eax
f010913f:	83 ec 0c             	sub    $0xc,%esp
f0109142:	50                   	push   %eax
f0109143:	e8 94 fd ff ff       	call   f0108edc <init_queue>
f0109148:	83 c4 10             	add    $0x10,%esp
	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*numOfLevels);
	num_of_ready_queues = numOfLevels;

	//[1] Create the ready queues and initialize them using init_queue()
	quantums = quantumOfEachLevel;
	for(int i=0;i<num_of_ready_queues;i++)
f010914b:	ff 45 f4             	incl   -0xc(%ebp)
f010914e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0109153:	0f b6 c0             	movzbl %al,%eax
f0109156:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109159:	7f d7                	jg     f0109132 <sched_init_MLFQ+0x57>
		init_queue(&(env_ready_queues[i]));

	uint8* quantams = kmalloc(sizeof(*(quantumOfEachLevel))*numOfLevels);
f010915b:	0f b6 45 d4          	movzbl -0x2c(%ebp),%eax
f010915f:	83 ec 0c             	sub    $0xc,%esp
f0109162:	50                   	push   %eax
f0109163:	e8 08 32 00 00       	call   f010c370 <kmalloc>
f0109168:	83 c4 10             	add    $0x10,%esp
f010916b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	uint8 quantums[*(quantumOfEachLevel)];
f010916e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109171:	8a 00                	mov    (%eax),%al
f0109173:	89 e2                	mov    %esp,%edx
f0109175:	89 d3                	mov    %edx,%ebx
f0109177:	0f b6 d0             	movzbl %al,%edx
f010917a:	4a                   	dec    %edx
f010917b:	89 55 e8             	mov    %edx,-0x18(%ebp)
f010917e:	0f b6 c0             	movzbl %al,%eax
f0109181:	ba 10 00 00 00       	mov    $0x10,%edx
f0109186:	4a                   	dec    %edx
f0109187:	01 d0                	add    %edx,%eax
f0109189:	b9 10 00 00 00       	mov    $0x10,%ecx
f010918e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109193:	f7 f1                	div    %ecx
f0109195:	6b c0 10             	imul   $0x10,%eax,%eax
f0109198:	29 c4                	sub    %eax,%esp
f010919a:	89 e0                	mov    %esp,%eax
f010919c:	83 c0 00             	add    $0x0,%eax
f010919f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(int i=0; i<quantums[*(quantumOfEachLevel)]; i++)
f01091a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01091a9:	eb 12                	jmp    f01091bd <sched_init_MLFQ+0xe2>
		quantums[i] = i;
f01091ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091ae:	88 c2                	mov    %al,%dl
f01091b0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01091b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091b6:	01 c8                	add    %ecx,%eax
f01091b8:	88 10                	mov    %dl,(%eax)

	uint8* quantams = kmalloc(sizeof(*(quantumOfEachLevel))*numOfLevels);

	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	uint8 quantums[*(quantumOfEachLevel)];
	for(int i=0; i<quantums[*(quantumOfEachLevel)]; i++)
f01091ba:	ff 45 f0             	incl   -0x10(%ebp)
f01091bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01091c0:	8a 00                	mov    (%eax),%al
f01091c2:	0f b6 c0             	movzbl %al,%eax
f01091c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01091c8:	8a 04 02             	mov    (%edx,%eax,1),%al
f01091cb:	0f b6 c0             	movzbl %al,%eax
f01091ce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01091d1:	7f d8                	jg     f01091ab <sched_init_MLFQ+0xd0>
		quantums[i] = i;

	//[3] Set the CPU2 quantum by the first level one
	kclock_set_quantum (quantums[0]);
f01091d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01091d6:	8a 00                	mov    (%eax),%al
f01091d8:	0f b6 c0             	movzbl %al,%eax
f01091db:	83 ec 0c             	sub    $0xc,%esp
f01091de:	50                   	push   %eax
f01091df:	e8 3c d8 ff ff       	call   f0106a20 <kclock_set_quantum>
f01091e4:	83 c4 10             	add    $0x10,%esp
f01091e7:	89 dc                	mov    %ebx,%esp
}
f01091e9:	90                   	nop
f01091ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01091ed:	c9                   	leave  
f01091ee:	c3                   	ret    

f01091ef <fos_scheduler_MLFQ>:

struct Env* fos_scheduler_MLFQ() {
f01091ef:	55                   	push   %ebp
f01091f0:	89 e5                	mov    %esp,%ebp
f01091f2:	53                   	push   %ebx
f01091f3:	83 ec 14             	sub    $0x14,%esp
f01091f6:	89 e0                	mov    %esp,%eax
f01091f8:	89 c3                	mov    %eax,%ebx
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue

	uint8 m;
	uint8 Ready;
	env_ready_queues = kmalloc(sizeof(struct Env_Queue)*num_of_ready_queues);
f01091fa:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01091ff:	0f b6 c0             	movzbl %al,%eax
f0109202:	c1 e0 04             	shl    $0x4,%eax
f0109205:	83 ec 0c             	sub    $0xc,%esp
f0109208:	50                   	push   %eax
f0109209:	e8 62 31 00 00       	call   f010c370 <kmalloc>
f010920e:	83 c4 10             	add    $0x10,%esp
f0109211:	a3 74 73 53 f0       	mov    %eax,0xf0537374
	uint8 quantums[*(quantums)];
f0109216:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f010921b:	8a 00                	mov    (%eax),%al
f010921d:	0f b6 d0             	movzbl %al,%edx
f0109220:	4a                   	dec    %edx
f0109221:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0109224:	0f b6 c0             	movzbl %al,%eax
f0109227:	ba 10 00 00 00       	mov    $0x10,%edx
f010922c:	4a                   	dec    %edx
f010922d:	01 d0                	add    %edx,%eax
f010922f:	b9 10 00 00 00       	mov    $0x10,%ecx
f0109234:	ba 00 00 00 00       	mov    $0x0,%edx
f0109239:	f7 f1                	div    %ecx
f010923b:	6b c0 10             	imul   $0x10,%eax,%eax
f010923e:	29 c4                	sub    %eax,%esp
f0109240:	89 e0                	mov    %esp,%eax
f0109242:	83 c0 00             	add    $0x0,%eax
f0109245:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//[2] Search for the next env in the queues according to their priorities (first is highest)
	//[3] If next env is found: Set the CPU quantum by the quantum of the selected level
	//							,remove the selected env from its queue and return it
	//	  Else, return NULL

	if(curenv == NULL) {
f0109248:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010924d:	85 c0                	test   %eax,%eax
f010924f:	0f 85 86 00 00 00    	jne    f01092db <fos_scheduler_MLFQ+0xec>
		for(uint8 i = 0; i<num_of_ready_queues;i++) {
f0109255:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
f0109259:	eb 76                	jmp    f01092d1 <fos_scheduler_MLFQ+0xe2>
			ret = queue_size(&env_ready_queues[i]);
f010925b:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109260:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
f0109264:	c1 e2 04             	shl    $0x4,%edx
f0109267:	01 d0                	add    %edx,%eax
f0109269:	83 ec 0c             	sub    $0xc,%esp
f010926c:	50                   	push   %eax
f010926d:	e8 93 fc ff ff       	call   f0108f05 <queue_size>
f0109272:	83 c4 10             	add    $0x10,%esp
f0109275:	a3 44 58 55 f0       	mov    %eax,0xf0555844
			if(ret > 0) {
f010927a:	a1 44 58 55 f0       	mov    0xf0555844,%eax
f010927f:	85 c0                	test   %eax,%eax
f0109281:	74 37                	je     f01092ba <fos_scheduler_MLFQ+0xcb>
				next = dequeue(&(env_ready_queues[i]));
f0109283:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109288:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
f010928c:	c1 e2 04             	shl    $0x4,%edx
f010928f:	01 d0                	add    %edx,%eax
f0109291:	83 ec 0c             	sub    $0xc,%esp
f0109294:	50                   	push   %eax
f0109295:	e8 db fc ff ff       	call   f0108f75 <dequeue>
f010929a:	83 c4 10             	add    $0x10,%esp
f010929d:	a3 40 58 55 f0       	mov    %eax,0xf0555840
				val = i;
f01092a2:	8a 45 f7             	mov    -0x9(%ebp),%al
f01092a5:	a2 3c 58 55 f0       	mov    %al,0xf055583c

				if(next != NULL) {
f01092aa:	a1 40 58 55 f0       	mov    0xf0555840,%eax
f01092af:	85 c0                	test   %eax,%eax
f01092b1:	74 17                	je     f01092ca <fos_scheduler_MLFQ+0xdb>
					return next;
f01092b3:	a1 40 58 55 f0       	mov    0xf0555840,%eax
f01092b8:	eb 26                	jmp    f01092e0 <fos_scheduler_MLFQ+0xf1>
					kclock_set_quantum (quantums[i]);
				}
			}
			else if(ret == 0) i++;
f01092ba:	a1 44 58 55 f0       	mov    0xf0555844,%eax
f01092bf:	85 c0                	test   %eax,%eax
f01092c1:	75 07                	jne    f01092ca <fos_scheduler_MLFQ+0xdb>
f01092c3:	8a 45 f7             	mov    -0x9(%ebp),%al
f01092c6:	40                   	inc    %eax
f01092c7:	88 45 f7             	mov    %al,-0x9(%ebp)
	//[3] If next env is found: Set the CPU quantum by the quantum of the selected level
	//							,remove the selected env from its queue and return it
	//	  Else, return NULL

	if(curenv == NULL) {
		for(uint8 i = 0; i<num_of_ready_queues;i++) {
f01092ca:	8a 45 f7             	mov    -0x9(%ebp),%al
f01092cd:	40                   	inc    %eax
f01092ce:	88 45 f7             	mov    %al,-0x9(%ebp)
f01092d1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01092d6:	38 45 f7             	cmp    %al,-0x9(%ebp)
f01092d9:	72 80                	jb     f010925b <fos_scheduler_MLFQ+0x6c>
				}
			}
			else if(ret == 0) i++;
		}
	}
	return NULL;
f01092db:	b8 00 00 00 00       	mov    $0x0,%eax
f01092e0:	89 dc                	mov    %ebx,%esp
}
f01092e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01092e5:	c9                   	leave  
f01092e6:	c3                   	ret    

f01092e7 <fos_scheduler>:
//==================================================================================//



void fos_scheduler(void)
{
f01092e7:	55                   	push   %ebp
f01092e8:	89 e5                	mov    %esp,%ebp
f01092ea:	83 ec 18             	sub    $0x18,%esp

	chk1();
f01092ed:	e8 3a c6 00 00       	call   f011592c <chk1>
	scheduler_status = SCH_STARTED;
f01092f2:	c7 05 b8 73 53 f0 01 	movl   $0x1,0xf05373b8
f01092f9:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f01092fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0109303:	a1 b0 73 53 f0       	mov    0xf05373b0,%eax
f0109308:	85 c0                	test   %eax,%eax
f010930a:	75 4d                	jne    f0109359 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010930c:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0109311:	85 c0                	test   %eax,%eax
f0109313:	74 18                	je     f010932d <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0109315:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f010931b:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109320:	83 ec 08             	sub    $0x8,%esp
f0109323:	52                   	push   %edx
f0109324:	50                   	push   %eax
f0109325:	e8 f3 fb ff ff       	call   f0108f1d <enqueue>
f010932a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010932d:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109332:	83 ec 0c             	sub    $0xc,%esp
f0109335:	50                   	push   %eax
f0109336:	e8 3a fc ff ff       	call   f0108f75 <dequeue>
f010933b:	83 c4 10             	add    $0x10,%esp
f010933e:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0109341:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f0109346:	8a 00                	mov    (%eax),%al
f0109348:	0f b6 c0             	movzbl %al,%eax
f010934b:	83 ec 0c             	sub    $0xc,%esp
f010934e:	50                   	push   %eax
f010934f:	e8 cc d6 ff ff       	call   f0106a20 <kclock_set_quantum>
f0109354:	83 c4 10             	add    $0x10,%esp
f0109357:	eb 12                	jmp    f010936b <fos_scheduler+0x84>

	}
	else if (scheduler_method == SCH_MLFQ)
f0109359:	a1 b0 73 53 f0       	mov    0xf05373b0,%eax
f010935e:	83 f8 01             	cmp    $0x1,%eax
f0109361:	75 08                	jne    f010936b <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0109363:	e8 87 fe ff ff       	call   f01091ef <fos_scheduler_MLFQ>
f0109368:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010936b:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0109370:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0109373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109376:	a3 b0 6a 53 f0       	mov    %eax,0xf0536ab0
	chk2(next_env);
f010937b:	83 ec 0c             	sub    $0xc,%esp
f010937e:	ff 75 f4             	pushl  -0xc(%ebp)
f0109381:	e8 e3 c5 00 00       	call   f0115969 <chk2>
f0109386:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0109389:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010938c:	a3 b0 6a 53 f0       	mov    %eax,0xf0536ab0

	//cprintf("Scheduler select program '%s'\n", next_env->prog_name);
	if(next_env != NULL)
f0109391:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109395:	74 0b                	je     f01093a2 <fos_scheduler+0xbb>
	{
		env_run(next_env);
f0109397:	83 ec 0c             	sub    $0xc,%esp
f010939a:	ff 75 f4             	pushl  -0xc(%ebp)
f010939d:	e8 4d cd ff ff       	call   f01060ef <env_run>
	}
	else
	{
		curenv = NULL;
f01093a2:	c7 05 b0 6a 53 f0 00 	movl   $0x0,0xf0536ab0
f01093a9:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01093ac:	a1 38 58 55 f0       	mov    0xf0555838,%eax
f01093b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01093b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01093b7:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01093ba:	c7 05 b8 73 53 f0 00 	movl   $0x0,0xf05373b8
f01093c1:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01093c4:	83 ec 0c             	sub    $0xc,%esp
f01093c7:	6a 00                	push   $0x0
f01093c9:	e8 26 84 ff ff       	call   f01017f4 <run_command_prompt>
f01093ce:	83 c4 10             	add    $0x10,%esp
f01093d1:	eb f1                	jmp    f01093c4 <fos_scheduler+0xdd>

f01093d3 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01093d3:	55                   	push   %ebp
f01093d4:	89 e5                	mov    %esp,%ebp
f01093d6:	83 ec 18             	sub    $0x18,%esp
f01093d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01093dc:	88 45 f4             	mov    %al,-0xc(%ebp)
	sched_delete_ready_queues();
f01093df:	e8 ba 00 00 00       	call   f010949e <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01093e4:	c7 05 b8 73 53 f0 00 	movl   $0x0,0xf05373b8
f01093eb:	00 00 00 
	scheduler_method = SCH_RR;
f01093ee:	c7 05 b0 73 53 f0 00 	movl   $0x0,0xf05373b0
f01093f5:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01093f8:	c6 05 c0 73 53 f0 01 	movb   $0x1,0xf05373c0
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f01093ff:	83 ec 0c             	sub    $0xc,%esp
f0109402:	6a 10                	push   $0x10
f0109404:	e8 67 2f 00 00       	call   f010c370 <kmalloc>
f0109409:	83 c4 10             	add    $0x10,%esp
f010940c:	a3 74 73 53 f0       	mov    %eax,0xf0537374
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0109411:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0109416:	0f b6 c0             	movzbl %al,%eax
f0109419:	83 ec 0c             	sub    $0xc,%esp
f010941c:	50                   	push   %eax
f010941d:	e8 4e 2f 00 00       	call   f010c370 <kmalloc>
f0109422:	83 c4 10             	add    $0x10,%esp
f0109425:	a3 90 73 53 f0       	mov    %eax,0xf0537390
	quantums[0] = quantum;
f010942a:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f010942f:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0109432:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0109434:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f0109439:	8a 00                	mov    (%eax),%al
f010943b:	0f b6 c0             	movzbl %al,%eax
f010943e:	83 ec 0c             	sub    $0xc,%esp
f0109441:	50                   	push   %eax
f0109442:	e8 d9 d5 ff ff       	call   f0106a20 <kclock_set_quantum>
f0109447:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f010944a:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010944f:	83 ec 0c             	sub    $0xc,%esp
f0109452:	50                   	push   %eax
f0109453:	e8 84 fa ff ff       	call   f0108edc <init_queue>
f0109458:	83 c4 10             	add    $0x10,%esp
}
f010945b:	90                   	nop
f010945c:	c9                   	leave  
f010945d:	c3                   	ret    

f010945e <sched_init>:



void sched_init()
{
f010945e:	55                   	push   %ebp
f010945f:	89 e5                	mov    %esp,%ebp
f0109461:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0109464:	c7 05 88 73 53 f0 00 	movl   $0x0,0xf0537388
f010946b:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010946e:	83 ec 0c             	sub    $0xc,%esp
f0109471:	6a 0a                	push   $0xa
f0109473:	e8 5b ff ff ff       	call   f01093d3 <sched_init_RR>
f0109478:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f010947b:	83 ec 0c             	sub    $0xc,%esp
f010947e:	68 a0 73 53 f0       	push   $0xf05373a0
f0109483:	e8 54 fa ff ff       	call   f0108edc <init_queue>
f0109488:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f010948b:	83 ec 0c             	sub    $0xc,%esp
f010948e:	68 78 73 53 f0       	push   $0xf0537378
f0109493:	e8 44 fa ff ff       	call   f0108edc <init_queue>
f0109498:	83 c4 10             	add    $0x10,%esp
}
f010949b:	90                   	nop
f010949c:	c9                   	leave  
f010949d:	c3                   	ret    

f010949e <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010949e:	55                   	push   %ebp
f010949f:	89 e5                	mov    %esp,%ebp
f01094a1:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f01094a4:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f01094a9:	85 c0                	test   %eax,%eax
f01094ab:	74 11                	je     f01094be <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f01094ad:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f01094b2:	83 ec 0c             	sub    $0xc,%esp
f01094b5:	50                   	push   %eax
f01094b6:	e8 1b 2f 00 00       	call   f010c3d6 <kfree>
f01094bb:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f01094be:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f01094c3:	85 c0                	test   %eax,%eax
f01094c5:	74 11                	je     f01094d8 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f01094c7:	a1 90 73 53 f0       	mov    0xf0537390,%eax
f01094cc:	83 ec 0c             	sub    $0xc,%esp
f01094cf:	50                   	push   %eax
f01094d0:	e8 01 2f 00 00       	call   f010c3d6 <kfree>
f01094d5:	83 c4 10             	add    $0x10,%esp
}
f01094d8:	90                   	nop
f01094d9:	c9                   	leave  
f01094da:	c3                   	ret    

f01094db <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01094db:	55                   	push   %ebp
f01094dc:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01094de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01094e2:	74 1b                	je     f01094ff <sched_insert_ready+0x24>
	{
		env->env_status = ENV_READY ;
f01094e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01094e7:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01094ee:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f01094f3:	ff 75 08             	pushl  0x8(%ebp)
f01094f6:	50                   	push   %eax
f01094f7:	e8 21 fa ff ff       	call   f0108f1d <enqueue>
f01094fc:	83 c4 08             	add    $0x8,%esp
	}
}
f01094ff:	90                   	nop
f0109500:	c9                   	leave  
f0109501:	c3                   	ret    

f0109502 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0109502:	55                   	push   %ebp
f0109503:	89 e5                	mov    %esp,%ebp
f0109505:	83 ec 10             	sub    $0x10,%esp
	if(env != NULL)
f0109508:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010950c:	0f 84 e1 00 00 00    	je     f01095f3 <sched_remove_ready+0xf1>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109512:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0109519:	e9 c4 00 00 00       	jmp    f01095e2 <sched_remove_ready+0xe0>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f010951e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109521:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109524:	89 c2                	mov    %eax,%edx
f0109526:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010952b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010952e:	c1 e1 04             	shl    $0x4,%ecx
f0109531:	01 c8                	add    %ecx,%eax
f0109533:	52                   	push   %edx
f0109534:	50                   	push   %eax
f0109535:	e8 41 fb ff ff       	call   f010907b <find_env_in_queue>
f010953a:	83 c4 08             	add    $0x8,%esp
f010953d:	89 45 f8             	mov    %eax,-0x8(%ebp)
			if (ptr_env != NULL)
f0109540:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0109544:	0f 84 95 00 00 00    	je     f01095df <sched_remove_ready+0xdd>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010954a:	8b 45 08             	mov    0x8(%ebp),%eax
f010954d:	8b 40 44             	mov    0x44(%eax),%eax
f0109550:	85 c0                	test   %eax,%eax
f0109552:	74 11                	je     f0109565 <sched_remove_ready+0x63>
f0109554:	8b 45 08             	mov    0x8(%ebp),%eax
f0109557:	8b 40 44             	mov    0x44(%eax),%eax
f010955a:	8b 55 08             	mov    0x8(%ebp),%edx
f010955d:	8b 52 48             	mov    0x48(%edx),%edx
f0109560:	89 50 48             	mov    %edx,0x48(%eax)
f0109563:	eb 16                	jmp    f010957b <sched_remove_ready+0x79>
f0109565:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010956a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010956d:	c1 e2 04             	shl    $0x4,%edx
f0109570:	01 c2                	add    %eax,%edx
f0109572:	8b 45 08             	mov    0x8(%ebp),%eax
f0109575:	8b 40 48             	mov    0x48(%eax),%eax
f0109578:	89 42 04             	mov    %eax,0x4(%edx)
f010957b:	8b 45 08             	mov    0x8(%ebp),%eax
f010957e:	8b 40 48             	mov    0x48(%eax),%eax
f0109581:	85 c0                	test   %eax,%eax
f0109583:	74 11                	je     f0109596 <sched_remove_ready+0x94>
f0109585:	8b 45 08             	mov    0x8(%ebp),%eax
f0109588:	8b 40 48             	mov    0x48(%eax),%eax
f010958b:	8b 55 08             	mov    0x8(%ebp),%edx
f010958e:	8b 52 44             	mov    0x44(%edx),%edx
f0109591:	89 50 44             	mov    %edx,0x44(%eax)
f0109594:	eb 15                	jmp    f01095ab <sched_remove_ready+0xa9>
f0109596:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010959b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010959e:	c1 e2 04             	shl    $0x4,%edx
f01095a1:	01 c2                	add    %eax,%edx
f01095a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01095a6:	8b 40 44             	mov    0x44(%eax),%eax
f01095a9:	89 02                	mov    %eax,(%edx)
f01095ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ae:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01095b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01095b8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01095bf:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f01095c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01095c7:	c1 e2 04             	shl    $0x4,%edx
f01095ca:	01 d0                	add    %edx,%eax
f01095cc:	8b 50 0c             	mov    0xc(%eax),%edx
f01095cf:	4a                   	dec    %edx
f01095d0:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f01095d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01095d6:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01095dd:	eb 14                	jmp    f01095f3 <sched_remove_ready+0xf1>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01095df:	ff 45 fc             	incl   -0x4(%ebp)
f01095e2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01095e7:	0f b6 c0             	movzbl %al,%eax
f01095ea:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01095ed:	0f 8f 2b ff ff ff    	jg     f010951e <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01095f3:	c9                   	leave  
f01095f4:	c3                   	ret    

f01095f5 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01095f5:	55                   	push   %ebp
f01095f6:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01095f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01095fc:	74 1a                	je     f0109618 <sched_insert_new+0x23>
	{
		env->env_status = ENV_NEW ;
f01095fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109601:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0109608:	ff 75 08             	pushl  0x8(%ebp)
f010960b:	68 a0 73 53 f0       	push   $0xf05373a0
f0109610:	e8 08 f9 ff ff       	call   f0108f1d <enqueue>
f0109615:	83 c4 08             	add    $0x8,%esp
	}
}
f0109618:	90                   	nop
f0109619:	c9                   	leave  
f010961a:	c3                   	ret    

f010961b <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f010961b:	55                   	push   %ebp
f010961c:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010961e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109622:	74 75                	je     f0109699 <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0109624:	8b 45 08             	mov    0x8(%ebp),%eax
f0109627:	8b 40 44             	mov    0x44(%eax),%eax
f010962a:	85 c0                	test   %eax,%eax
f010962c:	74 11                	je     f010963f <sched_remove_new+0x24>
f010962e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109631:	8b 40 44             	mov    0x44(%eax),%eax
f0109634:	8b 55 08             	mov    0x8(%ebp),%edx
f0109637:	8b 52 48             	mov    0x48(%edx),%edx
f010963a:	89 50 48             	mov    %edx,0x48(%eax)
f010963d:	eb 0b                	jmp    f010964a <sched_remove_new+0x2f>
f010963f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109642:	8b 40 48             	mov    0x48(%eax),%eax
f0109645:	a3 a4 73 53 f0       	mov    %eax,0xf05373a4
f010964a:	8b 45 08             	mov    0x8(%ebp),%eax
f010964d:	8b 40 48             	mov    0x48(%eax),%eax
f0109650:	85 c0                	test   %eax,%eax
f0109652:	74 11                	je     f0109665 <sched_remove_new+0x4a>
f0109654:	8b 45 08             	mov    0x8(%ebp),%eax
f0109657:	8b 40 48             	mov    0x48(%eax),%eax
f010965a:	8b 55 08             	mov    0x8(%ebp),%edx
f010965d:	8b 52 44             	mov    0x44(%edx),%edx
f0109660:	89 50 44             	mov    %edx,0x44(%eax)
f0109663:	eb 0b                	jmp    f0109670 <sched_remove_new+0x55>
f0109665:	8b 45 08             	mov    0x8(%ebp),%eax
f0109668:	8b 40 44             	mov    0x44(%eax),%eax
f010966b:	a3 a0 73 53 f0       	mov    %eax,0xf05373a0
f0109670:	8b 45 08             	mov    0x8(%ebp),%eax
f0109673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010967a:	8b 45 08             	mov    0x8(%ebp),%eax
f010967d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109684:	a1 ac 73 53 f0       	mov    0xf05373ac,%eax
f0109689:	48                   	dec    %eax
f010968a:	a3 ac 73 53 f0       	mov    %eax,0xf05373ac
		env->env_status = ENV_UNKNOWN;
f010968f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109692:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0109699:	90                   	nop
f010969a:	5d                   	pop    %ebp
f010969b:	c3                   	ret    

f010969c <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f010969c:	55                   	push   %ebp
f010969d:	89 e5                	mov    %esp,%ebp
f010969f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01096a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01096a6:	74 34                	je     f01096dc <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01096a8:	e8 23 ed ff ff       	call   f01083d0 <isBufferingEnabled>
f01096ad:	85 c0                	test   %eax,%eax
f01096af:	74 0e                	je     f01096bf <sched_insert_exit+0x23>
f01096b1:	83 ec 0c             	sub    $0xc,%esp
f01096b4:	ff 75 08             	pushl  0x8(%ebp)
f01096b7:	e8 dc d1 ff ff       	call   f0106898 <cleanup_buffers>
f01096bc:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01096bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c2:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01096c9:	83 ec 08             	sub    $0x8,%esp
f01096cc:	ff 75 08             	pushl  0x8(%ebp)
f01096cf:	68 78 73 53 f0       	push   $0xf0537378
f01096d4:	e8 44 f8 ff ff       	call   f0108f1d <enqueue>
f01096d9:	83 c4 10             	add    $0x10,%esp
	}
}
f01096dc:	90                   	nop
f01096dd:	c9                   	leave  
f01096de:	c3                   	ret    

f01096df <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f01096df:	55                   	push   %ebp
f01096e0:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01096e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01096e6:	74 75                	je     f010975d <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f01096e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01096eb:	8b 40 44             	mov    0x44(%eax),%eax
f01096ee:	85 c0                	test   %eax,%eax
f01096f0:	74 11                	je     f0109703 <sched_remove_exit+0x24>
f01096f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01096f5:	8b 40 44             	mov    0x44(%eax),%eax
f01096f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01096fb:	8b 52 48             	mov    0x48(%edx),%edx
f01096fe:	89 50 48             	mov    %edx,0x48(%eax)
f0109701:	eb 0b                	jmp    f010970e <sched_remove_exit+0x2f>
f0109703:	8b 45 08             	mov    0x8(%ebp),%eax
f0109706:	8b 40 48             	mov    0x48(%eax),%eax
f0109709:	a3 7c 73 53 f0       	mov    %eax,0xf053737c
f010970e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109711:	8b 40 48             	mov    0x48(%eax),%eax
f0109714:	85 c0                	test   %eax,%eax
f0109716:	74 11                	je     f0109729 <sched_remove_exit+0x4a>
f0109718:	8b 45 08             	mov    0x8(%ebp),%eax
f010971b:	8b 40 48             	mov    0x48(%eax),%eax
f010971e:	8b 55 08             	mov    0x8(%ebp),%edx
f0109721:	8b 52 44             	mov    0x44(%edx),%edx
f0109724:	89 50 44             	mov    %edx,0x44(%eax)
f0109727:	eb 0b                	jmp    f0109734 <sched_remove_exit+0x55>
f0109729:	8b 45 08             	mov    0x8(%ebp),%eax
f010972c:	8b 40 44             	mov    0x44(%eax),%eax
f010972f:	a3 78 73 53 f0       	mov    %eax,0xf0537378
f0109734:	8b 45 08             	mov    0x8(%ebp),%eax
f0109737:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010973e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109741:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109748:	a1 84 73 53 f0       	mov    0xf0537384,%eax
f010974d:	48                   	dec    %eax
f010974e:	a3 84 73 53 f0       	mov    %eax,0xf0537384
		env->env_status = ENV_UNKNOWN;
f0109753:	8b 45 08             	mov    0x8(%ebp),%eax
f0109756:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010975d:	90                   	nop
f010975e:	5d                   	pop    %ebp
f010975f:	c3                   	ret    

f0109760 <sched_print_all>:

void sched_print_all()
{
f0109760:	55                   	push   %ebp
f0109761:	89 e5                	mov    %esp,%ebp
f0109763:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0109766:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f010976b:	85 c0                	test   %eax,%eax
f010976d:	74 6c                	je     f01097db <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010976f:	83 ec 0c             	sub    $0xc,%esp
f0109772:	68 50 af 11 f0       	push   $0xf011af50
f0109777:	e8 53 d6 ff ff       	call   f0106dcf <cprintf>
f010977c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010977f:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f0109784:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109787:	eb 29                	jmp    f01097b2 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010978c:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109792:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109795:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109798:	83 ec 04             	sub    $0x4,%esp
f010979b:	52                   	push   %edx
f010979c:	50                   	push   %eax
f010979d:	68 72 af 11 f0       	push   $0xf011af72
f01097a2:	e8 28 d6 ff ff       	call   f0106dcf <cprintf>
f01097a7:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f01097aa:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f01097af:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01097b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01097b6:	74 08                	je     f01097c0 <sched_print_all+0x60>
f01097b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097bb:	8b 40 44             	mov    0x44(%eax),%eax
f01097be:	eb 05                	jmp    f01097c5 <sched_print_all+0x65>
f01097c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01097c5:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f01097ca:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f01097cf:	85 c0                	test   %eax,%eax
f01097d1:	75 b6                	jne    f0109789 <sched_print_all+0x29>
f01097d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01097d7:	75 b0                	jne    f0109789 <sched_print_all+0x29>
f01097d9:	eb 10                	jmp    f01097eb <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f01097db:	83 ec 0c             	sub    $0xc,%esp
f01097de:	68 7c af 11 f0       	push   $0xf011af7c
f01097e3:	e8 e7 d5 ff ff       	call   f0106dcf <cprintf>
f01097e8:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01097eb:	83 ec 0c             	sub    $0xc,%esp
f01097ee:	68 98 af 11 f0       	push   $0xf011af98
f01097f3:	e8 d7 d5 ff ff       	call   f0106dcf <cprintf>
f01097f8:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01097fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109802:	e9 ca 00 00 00       	jmp    f01098d1 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109807:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010980c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010980f:	c1 e2 04             	shl    $0x4,%edx
f0109812:	01 d0                	add    %edx,%eax
f0109814:	8b 00                	mov    (%eax),%eax
f0109816:	85 c0                	test   %eax,%eax
f0109818:	0f 84 8d 00 00 00    	je     f01098ab <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f010981e:	83 ec 08             	sub    $0x8,%esp
f0109821:	ff 75 f0             	pushl  -0x10(%ebp)
f0109824:	68 cc af 11 f0       	push   $0xf011afcc
f0109829:	e8 a1 d5 ff ff       	call   f0106dcf <cprintf>
f010982e:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109831:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109836:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109839:	c1 e2 04             	shl    $0x4,%edx
f010983c:	01 d0                	add    %edx,%eax
f010983e:	8b 00                	mov    (%eax),%eax
f0109840:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109843:	eb 34                	jmp    f0109879 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109848:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010984e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109851:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109854:	83 ec 04             	sub    $0x4,%esp
f0109857:	52                   	push   %edx
f0109858:	50                   	push   %eax
f0109859:	68 72 af 11 f0       	push   $0xf011af72
f010985e:	e8 6c d5 ff ff       	call   f0106dcf <cprintf>
f0109863:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109866:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010986b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010986e:	c1 e2 04             	shl    $0x4,%edx
f0109871:	01 d0                	add    %edx,%eax
f0109873:	8b 40 08             	mov    0x8(%eax),%eax
f0109876:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109879:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010987e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109881:	c1 e2 04             	shl    $0x4,%edx
f0109884:	01 d0                	add    %edx,%eax
f0109886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010988a:	74 08                	je     f0109894 <sched_print_all+0x134>
f010988c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010988f:	8b 52 44             	mov    0x44(%edx),%edx
f0109892:	eb 05                	jmp    f0109899 <sched_print_all+0x139>
f0109894:	ba 00 00 00 00       	mov    $0x0,%edx
f0109899:	89 50 08             	mov    %edx,0x8(%eax)
f010989c:	8b 40 08             	mov    0x8(%eax),%eax
f010989f:	85 c0                	test   %eax,%eax
f01098a1:	75 a2                	jne    f0109845 <sched_print_all+0xe5>
f01098a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098a7:	75 9c                	jne    f0109845 <sched_print_all+0xe5>
f01098a9:	eb 13                	jmp    f01098be <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f01098ab:	83 ec 08             	sub    $0x8,%esp
f01098ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01098b1:	68 f4 af 11 f0       	push   $0xf011aff4
f01098b6:	e8 14 d5 ff ff       	call   f0106dcf <cprintf>
f01098bb:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f01098be:	83 ec 0c             	sub    $0xc,%esp
f01098c1:	68 98 af 11 f0       	push   $0xf011af98
f01098c6:	e8 04 d5 ff ff       	call   f0106dcf <cprintf>
f01098cb:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01098ce:	ff 45 f0             	incl   -0x10(%ebp)
f01098d1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01098d6:	0f b6 c0             	movzbl %al,%eax
f01098d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01098dc:	0f 8f 25 ff ff ff    	jg     f0109807 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f01098e2:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f01098e7:	85 c0                	test   %eax,%eax
f01098e9:	74 6c                	je     f0109957 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f01098eb:	83 ec 0c             	sub    $0xc,%esp
f01098ee:	68 18 b0 11 f0       	push   $0xf011b018
f01098f3:	e8 d7 d4 ff ff       	call   f0106dcf <cprintf>
f01098f8:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01098fb:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f0109900:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109903:	eb 29                	jmp    f010992e <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109908:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010990e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109911:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109914:	83 ec 04             	sub    $0x4,%esp
f0109917:	52                   	push   %edx
f0109918:	50                   	push   %eax
f0109919:	68 72 af 11 f0       	push   $0xf011af72
f010991e:	e8 ac d4 ff ff       	call   f0106dcf <cprintf>
f0109923:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109926:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f010992b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010992e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109932:	74 08                	je     f010993c <sched_print_all+0x1dc>
f0109934:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109937:	8b 40 44             	mov    0x44(%eax),%eax
f010993a:	eb 05                	jmp    f0109941 <sched_print_all+0x1e1>
f010993c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109941:	a3 80 73 53 f0       	mov    %eax,0xf0537380
f0109946:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f010994b:	85 c0                	test   %eax,%eax
f010994d:	75 b6                	jne    f0109905 <sched_print_all+0x1a5>
f010994f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109953:	75 b0                	jne    f0109905 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0109955:	eb 10                	jmp    f0109967 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109957:	83 ec 0c             	sub    $0xc,%esp
f010995a:	68 3a b0 11 f0       	push   $0xf011b03a
f010995f:	e8 6b d4 ff ff       	call   f0106dcf <cprintf>
f0109964:	83 c4 10             	add    $0x10,%esp
	}
}
f0109967:	90                   	nop
f0109968:	c9                   	leave  
f0109969:	c3                   	ret    

f010996a <sched_run_all>:

void sched_run_all()
{
f010996a:	55                   	push   %ebp
f010996b:	89 e5                	mov    %esp,%ebp
f010996d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109970:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109977:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f010997c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010997f:	eb 1e                	jmp    f010999f <sched_run_all+0x35>
	{
		sched_remove_new(ptr_env);
f0109981:	ff 75 f4             	pushl  -0xc(%ebp)
f0109984:	e8 92 fc ff ff       	call   f010961b <sched_remove_new>
f0109989:	83 c4 04             	add    $0x4,%esp
		sched_insert_ready(ptr_env);
f010998c:	ff 75 f4             	pushl  -0xc(%ebp)
f010998f:	e8 47 fb ff ff       	call   f01094db <sched_insert_ready>
f0109994:	83 c4 04             	add    $0x4,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109997:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f010999c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010999f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099a3:	74 08                	je     f01099ad <sched_run_all+0x43>
f01099a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099a8:	8b 40 44             	mov    0x44(%eax),%eax
f01099ab:	eb 05                	jmp    f01099b2 <sched_run_all+0x48>
f01099ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01099b2:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f01099b7:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f01099bc:	85 c0                	test   %eax,%eax
f01099be:	75 c1                	jne    f0109981 <sched_run_all+0x17>
f01099c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099c4:	75 bb                	jne    f0109981 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f01099c6:	a1 b8 73 53 f0       	mov    0xf05373b8,%eax
f01099cb:	85 c0                	test   %eax,%eax
f01099cd:	75 05                	jne    f01099d4 <sched_run_all+0x6a>
		fos_scheduler();
f01099cf:	e8 13 f9 ff ff       	call   f01092e7 <fos_scheduler>
}
f01099d4:	90                   	nop
f01099d5:	c9                   	leave  
f01099d6:	c3                   	ret    

f01099d7 <sched_kill_all>:

void sched_kill_all()
{
f01099d7:	55                   	push   %ebp
f01099d8:	89 e5                	mov    %esp,%ebp
f01099da:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01099dd:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f01099e2:	85 c0                	test   %eax,%eax
f01099e4:	0f 84 98 00 00 00    	je     f0109a82 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f01099ea:	83 ec 0c             	sub    $0xc,%esp
f01099ed:	68 58 b0 11 f0       	push   $0xf011b058
f01099f2:	e8 d8 d3 ff ff       	call   f0106dcf <cprintf>
f01099f7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01099fa:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f01099ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a02:	eb 55                	jmp    f0109a59 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a07:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a10:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a13:	83 ec 04             	sub    $0x4,%esp
f0109a16:	52                   	push   %edx
f0109a17:	50                   	push   %eax
f0109a18:	68 84 b0 11 f0       	push   $0xf011b084
f0109a1d:	e8 ad d3 ff ff       	call   f0106dcf <cprintf>
f0109a22:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0109a25:	83 ec 0c             	sub    $0xc,%esp
f0109a28:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a2b:	e8 eb fb ff ff       	call   f010961b <sched_remove_new>
f0109a30:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109a33:	83 ec 0c             	sub    $0xc,%esp
f0109a36:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a39:	e8 22 c7 ff ff       	call   f0106160 <start_env_free>
f0109a3e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109a41:	83 ec 0c             	sub    $0xc,%esp
f0109a44:	68 97 b0 11 f0       	push   $0xf011b097
f0109a49:	e8 81 d3 ff ff       	call   f0106dcf <cprintf>
f0109a4e:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109a51:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a5d:	74 08                	je     f0109a67 <sched_kill_all+0x90>
f0109a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a62:	8b 40 44             	mov    0x44(%eax),%eax
f0109a65:	eb 05                	jmp    f0109a6c <sched_kill_all+0x95>
f0109a67:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a6c:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f0109a71:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109a76:	85 c0                	test   %eax,%eax
f0109a78:	75 8a                	jne    f0109a04 <sched_kill_all+0x2d>
f0109a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a7e:	75 84                	jne    f0109a04 <sched_kill_all+0x2d>
f0109a80:	eb 10                	jmp    f0109a92 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0109a82:	83 ec 0c             	sub    $0xc,%esp
f0109a85:	68 9d b0 11 f0       	push   $0xf011b09d
f0109a8a:	e8 40 d3 ff ff       	call   f0106dcf <cprintf>
f0109a8f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0109a92:	83 ec 0c             	sub    $0xc,%esp
f0109a95:	68 98 af 11 f0       	push   $0xf011af98
f0109a9a:	e8 30 d3 ff ff       	call   f0106dcf <cprintf>
f0109a9f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109aa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109aa9:	e9 7c 01 00 00       	jmp    f0109c2a <sched_kill_all+0x253>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109aae:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109ab3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109ab6:	c1 e2 04             	shl    $0x4,%edx
f0109ab9:	01 d0                	add    %edx,%eax
f0109abb:	8b 00                	mov    (%eax),%eax
f0109abd:	85 c0                	test   %eax,%eax
f0109abf:	0f 84 3f 01 00 00    	je     f0109c04 <sched_kill_all+0x22d>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0109ac5:	83 ec 08             	sub    $0x8,%esp
f0109ac8:	ff 75 f0             	pushl  -0x10(%ebp)
f0109acb:	68 b8 b0 11 f0       	push   $0xf011b0b8
f0109ad0:	e8 fa d2 ff ff       	call   f0106dcf <cprintf>
f0109ad5:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109ad8:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109add:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109ae0:	c1 e2 04             	shl    $0x4,%edx
f0109ae3:	01 d0                	add    %edx,%eax
f0109ae5:	8b 00                	mov    (%eax),%eax
f0109ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109aea:	e9 db 00 00 00       	jmp    f0109bca <sched_kill_all+0x1f3>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109af2:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109afb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109afe:	83 ec 04             	sub    $0x4,%esp
f0109b01:	52                   	push   %edx
f0109b02:	50                   	push   %eax
f0109b03:	68 84 b0 11 f0       	push   $0xf011b084
f0109b08:	e8 c2 d2 ff ff       	call   f0106dcf <cprintf>
f0109b0d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b13:	8b 40 44             	mov    0x44(%eax),%eax
f0109b16:	85 c0                	test   %eax,%eax
f0109b18:	74 11                	je     f0109b2b <sched_kill_all+0x154>
f0109b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b1d:	8b 40 44             	mov    0x44(%eax),%eax
f0109b20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b23:	8b 52 48             	mov    0x48(%edx),%edx
f0109b26:	89 50 48             	mov    %edx,0x48(%eax)
f0109b29:	eb 16                	jmp    f0109b41 <sched_kill_all+0x16a>
f0109b2b:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109b30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b33:	c1 e2 04             	shl    $0x4,%edx
f0109b36:	01 c2                	add    %eax,%edx
f0109b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b3b:	8b 40 48             	mov    0x48(%eax),%eax
f0109b3e:	89 42 04             	mov    %eax,0x4(%edx)
f0109b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b44:	8b 40 48             	mov    0x48(%eax),%eax
f0109b47:	85 c0                	test   %eax,%eax
f0109b49:	74 11                	je     f0109b5c <sched_kill_all+0x185>
f0109b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b4e:	8b 40 48             	mov    0x48(%eax),%eax
f0109b51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b54:	8b 52 44             	mov    0x44(%edx),%edx
f0109b57:	89 50 44             	mov    %edx,0x44(%eax)
f0109b5a:	eb 15                	jmp    f0109b71 <sched_kill_all+0x19a>
f0109b5c:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109b61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b64:	c1 e2 04             	shl    $0x4,%edx
f0109b67:	01 c2                	add    %eax,%edx
f0109b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b6c:	8b 40 44             	mov    0x44(%eax),%eax
f0109b6f:	89 02                	mov    %eax,(%edx)
f0109b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b74:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b7e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109b85:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109b8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b8d:	c1 e2 04             	shl    $0x4,%edx
f0109b90:	01 d0                	add    %edx,%eax
f0109b92:	8b 50 0c             	mov    0xc(%eax),%edx
f0109b95:	4a                   	dec    %edx
f0109b96:	89 50 0c             	mov    %edx,0xc(%eax)
				start_env_free(ptr_env);
f0109b99:	83 ec 0c             	sub    $0xc,%esp
f0109b9c:	ff 75 f4             	pushl  -0xc(%ebp)
f0109b9f:	e8 bc c5 ff ff       	call   f0106160 <start_env_free>
f0109ba4:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109ba7:	83 ec 0c             	sub    $0xc,%esp
f0109baa:	68 97 b0 11 f0       	push   $0xf011b097
f0109baf:	e8 1b d2 ff ff       	call   f0106dcf <cprintf>
f0109bb4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109bb7:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109bbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109bbf:	c1 e2 04             	shl    $0x4,%edx
f0109bc2:	01 d0                	add    %edx,%eax
f0109bc4:	8b 40 08             	mov    0x8(%eax),%eax
f0109bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109bca:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109bcf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109bd2:	c1 e2 04             	shl    $0x4,%edx
f0109bd5:	01 d0                	add    %edx,%eax
f0109bd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109bdb:	74 08                	je     f0109be5 <sched_kill_all+0x20e>
f0109bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109be0:	8b 52 44             	mov    0x44(%edx),%edx
f0109be3:	eb 05                	jmp    f0109bea <sched_kill_all+0x213>
f0109be5:	ba 00 00 00 00       	mov    $0x0,%edx
f0109bea:	89 50 08             	mov    %edx,0x8(%eax)
f0109bed:	8b 40 08             	mov    0x8(%eax),%eax
f0109bf0:	85 c0                	test   %eax,%eax
f0109bf2:	0f 85 f7 fe ff ff    	jne    f0109aef <sched_kill_all+0x118>
f0109bf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109bfc:	0f 85 ed fe ff ff    	jne    f0109aef <sched_kill_all+0x118>
f0109c02:	eb 13                	jmp    f0109c17 <sched_kill_all+0x240>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0109c04:	83 ec 08             	sub    $0x8,%esp
f0109c07:	ff 75 f0             	pushl  -0x10(%ebp)
f0109c0a:	68 f4 af 11 f0       	push   $0xf011aff4
f0109c0f:	e8 bb d1 ff ff       	call   f0106dcf <cprintf>
f0109c14:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109c17:	83 ec 0c             	sub    $0xc,%esp
f0109c1a:	68 98 af 11 f0       	push   $0xf011af98
f0109c1f:	e8 ab d1 ff ff       	call   f0106dcf <cprintf>
f0109c24:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109c27:	ff 45 f0             	incl   -0x10(%ebp)
f0109c2a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0109c2f:	0f b6 c0             	movzbl %al,%eax
f0109c32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109c35:	0f 8f 73 fe ff ff    	jg     f0109aae <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0109c3b:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f0109c40:	85 c0                	test   %eax,%eax
f0109c42:	0f 84 98 00 00 00    	je     f0109ce0 <sched_kill_all+0x309>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0109c48:	83 ec 0c             	sub    $0xc,%esp
f0109c4b:	68 ec b0 11 f0       	push   $0xf011b0ec
f0109c50:	e8 7a d1 ff ff       	call   f0106dcf <cprintf>
f0109c55:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109c58:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f0109c5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109c60:	eb 55                	jmp    f0109cb7 <sched_kill_all+0x2e0>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c65:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c6e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109c71:	83 ec 04             	sub    $0x4,%esp
f0109c74:	52                   	push   %edx
f0109c75:	50                   	push   %eax
f0109c76:	68 84 b0 11 f0       	push   $0xf011b084
f0109c7b:	e8 4f d1 ff ff       	call   f0106dcf <cprintf>
f0109c80:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0109c83:	83 ec 0c             	sub    $0xc,%esp
f0109c86:	ff 75 f4             	pushl  -0xc(%ebp)
f0109c89:	e8 51 fa ff ff       	call   f01096df <sched_remove_exit>
f0109c8e:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109c91:	83 ec 0c             	sub    $0xc,%esp
f0109c94:	ff 75 f4             	pushl  -0xc(%ebp)
f0109c97:	e8 c4 c4 ff ff       	call   f0106160 <start_env_free>
f0109c9c:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109c9f:	83 ec 0c             	sub    $0xc,%esp
f0109ca2:	68 97 b0 11 f0       	push   $0xf011b097
f0109ca7:	e8 23 d1 ff ff       	call   f0106dcf <cprintf>
f0109cac:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109caf:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f0109cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109cb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cbb:	74 08                	je     f0109cc5 <sched_kill_all+0x2ee>
f0109cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109cc0:	8b 40 44             	mov    0x44(%eax),%eax
f0109cc3:	eb 05                	jmp    f0109cca <sched_kill_all+0x2f3>
f0109cc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0109cca:	a3 80 73 53 f0       	mov    %eax,0xf0537380
f0109ccf:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f0109cd4:	85 c0                	test   %eax,%eax
f0109cd6:	75 8a                	jne    f0109c62 <sched_kill_all+0x28b>
f0109cd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cdc:	75 84                	jne    f0109c62 <sched_kill_all+0x28b>
f0109cde:	eb 10                	jmp    f0109cf0 <sched_kill_all+0x319>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109ce0:	83 ec 0c             	sub    $0xc,%esp
f0109ce3:	68 3a b0 11 f0       	push   $0xf011b03a
f0109ce8:	e8 e2 d0 ff ff       	call   f0106dcf <cprintf>
f0109ced:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0109cf0:	c7 05 b0 6a 53 f0 00 	movl   $0x0,0xf0536ab0
f0109cf7:	00 00 00 
	fos_scheduler();
f0109cfa:	e8 e8 f5 ff ff       	call   f01092e7 <fos_scheduler>

f0109cff <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0109cff:	55                   	push   %ebp
f0109d00:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0109d02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d06:	74 0b                	je     f0109d13 <sched_new_env+0x14>
	{
		sched_insert_new(e);
f0109d08:	ff 75 08             	pushl  0x8(%ebp)
f0109d0b:	e8 e5 f8 ff ff       	call   f01095f5 <sched_insert_new>
f0109d10:	83 c4 04             	add    $0x4,%esp
	}
}
f0109d13:	90                   	nop
f0109d14:	c9                   	leave  
f0109d15:	c3                   	ret    

f0109d16 <sched_run_env>:

void sched_run_env(uint32 envId)
{
f0109d16:	55                   	push   %ebp
f0109d17:	89 e5                	mov    %esp,%ebp
f0109d19:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109d1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109d23:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f0109d28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d2b:	eb 37                	jmp    f0109d64 <sched_run_env+0x4e>
	{
		if(ptr_env->env_id == envId)
f0109d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d30:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d33:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d36:	75 24                	jne    f0109d5c <sched_run_env+0x46>
		{
			sched_remove_new(ptr_env);
f0109d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d3b:	e8 db f8 ff ff       	call   f010961b <sched_remove_new>
f0109d40:	83 c4 04             	add    $0x4,%esp
			sched_insert_ready(ptr_env);
f0109d43:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d46:	e8 90 f7 ff ff       	call   f01094db <sched_insert_ready>
f0109d4b:	83 c4 04             	add    $0x4,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0109d4e:	a1 b8 73 53 f0       	mov    0xf05373b8,%eax
f0109d53:	85 c0                	test   %eax,%eax
f0109d55:	75 36                	jne    f0109d8d <sched_run_env+0x77>
			{
				fos_scheduler();
f0109d57:	e8 8b f5 ff ff       	call   f01092e7 <fos_scheduler>
}

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109d5c:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109d61:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d68:	74 08                	je     f0109d72 <sched_run_env+0x5c>
f0109d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d6d:	8b 40 44             	mov    0x44(%eax),%eax
f0109d70:	eb 05                	jmp    f0109d77 <sched_run_env+0x61>
f0109d72:	b8 00 00 00 00       	mov    $0x0,%eax
f0109d77:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f0109d7c:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109d81:	85 c0                	test   %eax,%eax
f0109d83:	75 a8                	jne    f0109d2d <sched_run_env+0x17>
f0109d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d89:	75 a2                	jne    f0109d2d <sched_run_env+0x17>
			}
			break;
		}
	}

}
f0109d8b:	eb 01                	jmp    f0109d8e <sched_run_env+0x78>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0109d8d:	90                   	nop
		}
	}

}
f0109d8e:	90                   	nop
f0109d8f:	c9                   	leave  
f0109d90:	c3                   	ret    

f0109d91 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0109d91:	55                   	push   %ebp
f0109d92:	89 e5                	mov    %esp,%ebp
f0109d94:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109d97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0109d9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109da5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109da9:	75 56                	jne    f0109e01 <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109dab:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f0109db0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109db3:	eb 25                	jmp    f0109dda <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f0109db5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109db8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109dbb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109dbe:	75 12                	jne    f0109dd2 <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f0109dc0:	ff 75 f4             	pushl  -0xc(%ebp)
f0109dc3:	e8 53 f8 ff ff       	call   f010961b <sched_remove_new>
f0109dc8:	83 c4 04             	add    $0x4,%esp
				found = 1;
f0109dcb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109dd2:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109dd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109dda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109dde:	74 08                	je     f0109de8 <sched_exit_env+0x57>
f0109de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109de3:	8b 40 44             	mov    0x44(%eax),%eax
f0109de6:	eb 05                	jmp    f0109ded <sched_exit_env+0x5c>
f0109de8:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ded:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f0109df2:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f0109df7:	85 c0                	test   %eax,%eax
f0109df9:	75 ba                	jne    f0109db5 <sched_exit_env+0x24>
f0109dfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109dff:	75 b4                	jne    f0109db5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0109e01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e05:	0f 85 4a 01 00 00    	jne    f0109f55 <sched_exit_env+0x1c4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109e0b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109e12:	e9 2a 01 00 00       	jmp    f0109f41 <sched_exit_env+0x1b0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109e17:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109e1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e1f:	c1 e2 04             	shl    $0x4,%edx
f0109e22:	01 d0                	add    %edx,%eax
f0109e24:	8b 00                	mov    (%eax),%eax
f0109e26:	85 c0                	test   %eax,%eax
f0109e28:	0f 84 0a 01 00 00    	je     f0109f38 <sched_exit_env+0x1a7>
			{
				ptr_env=NULL;
f0109e2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109e35:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109e3a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e3d:	c1 e2 04             	shl    $0x4,%edx
f0109e40:	01 d0                	add    %edx,%eax
f0109e42:	8b 00                	mov    (%eax),%eax
f0109e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109e47:	e9 b4 00 00 00       	jmp    f0109f00 <sched_exit_env+0x16f>
				{
					if(ptr_env->env_id == envId)
f0109e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e4f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e52:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e55:	0f 85 92 00 00 00    	jne    f0109eed <sched_exit_env+0x15c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e5e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e61:	85 c0                	test   %eax,%eax
f0109e63:	74 11                	je     f0109e76 <sched_exit_env+0xe5>
f0109e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e68:	8b 40 44             	mov    0x44(%eax),%eax
f0109e6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e6e:	8b 52 48             	mov    0x48(%edx),%edx
f0109e71:	89 50 48             	mov    %edx,0x48(%eax)
f0109e74:	eb 16                	jmp    f0109e8c <sched_exit_env+0xfb>
f0109e76:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109e7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e7e:	c1 e2 04             	shl    $0x4,%edx
f0109e81:	01 c2                	add    %eax,%edx
f0109e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e86:	8b 40 48             	mov    0x48(%eax),%eax
f0109e89:	89 42 04             	mov    %eax,0x4(%edx)
f0109e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e8f:	8b 40 48             	mov    0x48(%eax),%eax
f0109e92:	85 c0                	test   %eax,%eax
f0109e94:	74 11                	je     f0109ea7 <sched_exit_env+0x116>
f0109e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e99:	8b 40 48             	mov    0x48(%eax),%eax
f0109e9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e9f:	8b 52 44             	mov    0x44(%edx),%edx
f0109ea2:	89 50 44             	mov    %edx,0x44(%eax)
f0109ea5:	eb 15                	jmp    f0109ebc <sched_exit_env+0x12b>
f0109ea7:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109eac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109eaf:	c1 e2 04             	shl    $0x4,%edx
f0109eb2:	01 c2                	add    %eax,%edx
f0109eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eb7:	8b 40 44             	mov    0x44(%eax),%eax
f0109eba:	89 02                	mov    %eax,(%edx)
f0109ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ebf:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ec9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109ed0:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109ed5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ed8:	c1 e2 04             	shl    $0x4,%edx
f0109edb:	01 d0                	add    %edx,%eax
f0109edd:	8b 50 0c             	mov    0xc(%eax),%edx
f0109ee0:	4a                   	dec    %edx
f0109ee1:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0109ee4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109eeb:	eb 4b                	jmp    f0109f38 <sched_exit_env+0x1a7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109eed:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109ef2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ef5:	c1 e2 04             	shl    $0x4,%edx
f0109ef8:	01 d0                	add    %edx,%eax
f0109efa:	8b 40 08             	mov    0x8(%eax),%eax
f0109efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109f00:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109f05:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109f08:	c1 e2 04             	shl    $0x4,%edx
f0109f0b:	01 d0                	add    %edx,%eax
f0109f0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109f11:	74 08                	je     f0109f1b <sched_exit_env+0x18a>
f0109f13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f16:	8b 52 44             	mov    0x44(%edx),%edx
f0109f19:	eb 05                	jmp    f0109f20 <sched_exit_env+0x18f>
f0109f1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f20:	89 50 08             	mov    %edx,0x8(%eax)
f0109f23:	8b 40 08             	mov    0x8(%eax),%eax
f0109f26:	85 c0                	test   %eax,%eax
f0109f28:	0f 85 1e ff ff ff    	jne    f0109e4c <sched_exit_env+0xbb>
f0109f2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109f32:	0f 85 14 ff ff ff    	jne    f0109e4c <sched_exit_env+0xbb>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0109f38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109f3c:	75 16                	jne    f0109f54 <sched_exit_env+0x1c3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109f3e:	ff 45 ec             	incl   -0x14(%ebp)
f0109f41:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0109f46:	0f b6 c0             	movzbl %al,%eax
f0109f49:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109f4c:	0f 8f c5 fe ff ff    	jg     f0109e17 <sched_exit_env+0x86>
f0109f52:	eb 01                	jmp    f0109f55 <sched_exit_env+0x1c4>
						break;
					}
				}
			}
			if (found)
				break;
f0109f54:	90                   	nop
		}
	}
	if (!found)
f0109f55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109f59:	75 1c                	jne    f0109f77 <sched_exit_env+0x1e6>
	{
		if (curenv->env_id == envId)
f0109f5b:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0109f60:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f63:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f66:	75 0f                	jne    f0109f77 <sched_exit_env+0x1e6>
		{
			ptr_env = curenv;
f0109f68:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0109f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0109f70:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0109f77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109f7b:	74 2a                	je     f0109fa7 <sched_exit_env+0x216>
	{
		sched_insert_exit(ptr_env);
f0109f7d:	83 ec 0c             	sub    $0xc,%esp
f0109f80:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f83:	e8 14 f7 ff ff       	call   f010969c <sched_insert_exit>
f0109f88:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0109f8b:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0109f90:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f93:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f96:	75 0f                	jne    f0109fa7 <sched_exit_env+0x216>
		{
			curenv = NULL;
f0109f98:	c7 05 b0 6a 53 f0 00 	movl   $0x0,0xf0536ab0
f0109f9f:	00 00 00 
			fos_scheduler();
f0109fa2:	e8 40 f3 ff ff       	call   f01092e7 <fos_scheduler>
		}
	}
}
f0109fa7:	90                   	nop
f0109fa8:	c9                   	leave  
f0109fa9:	c3                   	ret    

f0109faa <sched_exit_all_ready_envs>:

void sched_exit_all_ready_envs()
{
f0109faa:	55                   	push   %ebp
f0109fab:	89 e5                	mov    %esp,%ebp
f0109fad:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109fb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109fb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109fbe:	e9 1a 01 00 00       	jmp    f010a0dd <sched_exit_all_ready_envs+0x133>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109fc3:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109fc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fcb:	c1 e2 04             	shl    $0x4,%edx
f0109fce:	01 d0                	add    %edx,%eax
f0109fd0:	8b 00                	mov    (%eax),%eax
f0109fd2:	85 c0                	test   %eax,%eax
f0109fd4:	0f 84 00 01 00 00    	je     f010a0da <sched_exit_all_ready_envs+0x130>
		{
			ptr_env=NULL;
f0109fda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109fe1:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0109fe6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fe9:	c1 e2 04             	shl    $0x4,%edx
f0109fec:	01 d0                	add    %edx,%eax
f0109fee:	8b 00                	mov    (%eax),%eax
f0109ff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109ff3:	e9 aa 00 00 00       	jmp    f010a0a2 <sched_exit_all_ready_envs+0xf8>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ffb:	8b 40 44             	mov    0x44(%eax),%eax
f0109ffe:	85 c0                	test   %eax,%eax
f010a000:	74 11                	je     f010a013 <sched_exit_all_ready_envs+0x69>
f010a002:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a005:	8b 40 44             	mov    0x44(%eax),%eax
f010a008:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a00b:	8b 52 48             	mov    0x48(%edx),%edx
f010a00e:	89 50 48             	mov    %edx,0x48(%eax)
f010a011:	eb 16                	jmp    f010a029 <sched_exit_all_ready_envs+0x7f>
f010a013:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a01b:	c1 e2 04             	shl    $0x4,%edx
f010a01e:	01 c2                	add    %eax,%edx
f010a020:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a023:	8b 40 48             	mov    0x48(%eax),%eax
f010a026:	89 42 04             	mov    %eax,0x4(%edx)
f010a029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a02c:	8b 40 48             	mov    0x48(%eax),%eax
f010a02f:	85 c0                	test   %eax,%eax
f010a031:	74 11                	je     f010a044 <sched_exit_all_ready_envs+0x9a>
f010a033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a036:	8b 40 48             	mov    0x48(%eax),%eax
f010a039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a03c:	8b 52 44             	mov    0x44(%edx),%edx
f010a03f:	89 50 44             	mov    %edx,0x44(%eax)
f010a042:	eb 15                	jmp    f010a059 <sched_exit_all_ready_envs+0xaf>
f010a044:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a049:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a04c:	c1 e2 04             	shl    $0x4,%edx
f010a04f:	01 c2                	add    %eax,%edx
f010a051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a054:	8b 40 44             	mov    0x44(%eax),%eax
f010a057:	89 02                	mov    %eax,(%edx)
f010a059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a05c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a063:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a066:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a06d:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a072:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a075:	c1 e2 04             	shl    $0x4,%edx
f010a078:	01 d0                	add    %edx,%eax
f010a07a:	8b 50 0c             	mov    0xc(%eax),%edx
f010a07d:	4a                   	dec    %edx
f010a07e:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f010a081:	83 ec 0c             	sub    $0xc,%esp
f010a084:	ff 75 f4             	pushl  -0xc(%ebp)
f010a087:	e8 10 f6 ff ff       	call   f010969c <sched_insert_exit>
f010a08c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a08f:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a094:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a097:	c1 e2 04             	shl    $0x4,%edx
f010a09a:	01 d0                	add    %edx,%eax
f010a09c:	8b 40 08             	mov    0x8(%eax),%eax
f010a09f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a0a2:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a0a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a0aa:	c1 e2 04             	shl    $0x4,%edx
f010a0ad:	01 d0                	add    %edx,%eax
f010a0af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a0b3:	74 08                	je     f010a0bd <sched_exit_all_ready_envs+0x113>
f010a0b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0b8:	8b 52 44             	mov    0x44(%edx),%edx
f010a0bb:	eb 05                	jmp    f010a0c2 <sched_exit_all_ready_envs+0x118>
f010a0bd:	ba 00 00 00 00       	mov    $0x0,%edx
f010a0c2:	89 50 08             	mov    %edx,0x8(%eax)
f010a0c5:	8b 40 08             	mov    0x8(%eax),%eax
f010a0c8:	85 c0                	test   %eax,%eax
f010a0ca:	0f 85 28 ff ff ff    	jne    f0109ff8 <sched_exit_all_ready_envs+0x4e>
f010a0d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a0d4:	0f 85 1e ff ff ff    	jne    f0109ff8 <sched_exit_all_ready_envs+0x4e>
}

void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a0da:	ff 45 f0             	incl   -0x10(%ebp)
f010a0dd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010a0e2:	0f b6 c0             	movzbl %al,%eax
f010a0e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a0e8:	0f 8f d5 fe ff ff    	jg     f0109fc3 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010a0ee:	90                   	nop
f010a0ef:	c9                   	leave  
f010a0f0:	c3                   	ret    

f010a0f1 <sched_kill_env>:

void sched_kill_env(uint32 envId)
{
f010a0f1:	55                   	push   %ebp
f010a0f2:	89 e5                	mov    %esp,%ebp
f010a0f4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010a0f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010a0fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010a105:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a109:	0f 85 a0 00 00 00    	jne    f010a1af <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a10f:	a1 a0 73 53 f0       	mov    0xf05373a0,%eax
f010a114:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a117:	eb 67                	jmp    f010a180 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f010a119:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a11c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a11f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a122:	75 54                	jne    f010a178 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010a124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a127:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a12d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a130:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a133:	83 ec 04             	sub    $0x4,%esp
f010a136:	52                   	push   %edx
f010a137:	50                   	push   %eax
f010a138:	68 18 b1 11 f0       	push   $0xf011b118
f010a13d:	e8 8d cc ff ff       	call   f0106dcf <cprintf>
f010a142:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010a145:	83 ec 0c             	sub    $0xc,%esp
f010a148:	ff 75 f4             	pushl  -0xc(%ebp)
f010a14b:	e8 cb f4 ff ff       	call   f010961b <sched_remove_new>
f010a150:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a153:	83 ec 0c             	sub    $0xc,%esp
f010a156:	ff 75 f4             	pushl  -0xc(%ebp)
f010a159:	e8 02 c0 ff ff       	call   f0106160 <start_env_free>
f010a15e:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a161:	83 ec 0c             	sub    $0xc,%esp
f010a164:	68 97 b0 11 f0       	push   $0xf011b097
f010a169:	e8 61 cc ff ff       	call   f0106dcf <cprintf>
f010a16e:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a171:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a178:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f010a17d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a180:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a184:	74 08                	je     f010a18e <sched_kill_env+0x9d>
f010a186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a189:	8b 40 44             	mov    0x44(%eax),%eax
f010a18c:	eb 05                	jmp    f010a193 <sched_kill_env+0xa2>
f010a18e:	b8 00 00 00 00       	mov    $0x0,%eax
f010a193:	a3 a8 73 53 f0       	mov    %eax,0xf05373a8
f010a198:	a1 a8 73 53 f0       	mov    0xf05373a8,%eax
f010a19d:	85 c0                	test   %eax,%eax
f010a19f:	0f 85 74 ff ff ff    	jne    f010a119 <sched_kill_env+0x28>
f010a1a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1a9:	0f 85 6a ff ff ff    	jne    f010a119 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010a1af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a1b3:	0f 85 89 01 00 00    	jne    f010a342 <sched_kill_env+0x251>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a1b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010a1c0:	e9 69 01 00 00       	jmp    f010a32e <sched_kill_env+0x23d>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010a1c5:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a1ca:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a1cd:	c1 e2 04             	shl    $0x4,%edx
f010a1d0:	01 d0                	add    %edx,%eax
f010a1d2:	8b 00                	mov    (%eax),%eax
f010a1d4:	85 c0                	test   %eax,%eax
f010a1d6:	0f 84 49 01 00 00    	je     f010a325 <sched_kill_env+0x234>
			{
				ptr_env=NULL;
f010a1dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a1e3:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a1e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a1eb:	c1 e2 04             	shl    $0x4,%edx
f010a1ee:	01 d0                	add    %edx,%eax
f010a1f0:	8b 00                	mov    (%eax),%eax
f010a1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a1f5:	e9 f3 00 00 00       	jmp    f010a2ed <sched_kill_env+0x1fc>
				{
					if(ptr_env->env_id == envId)
f010a1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1fd:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a200:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a203:	0f 85 d1 00 00 00    	jne    f010a2da <sched_kill_env+0x1e9>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f010a209:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a20c:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a215:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a218:	ff 75 ec             	pushl  -0x14(%ebp)
f010a21b:	52                   	push   %edx
f010a21c:	50                   	push   %eax
f010a21d:	68 40 b1 11 f0       	push   $0xf011b140
f010a222:	e8 a8 cb ff ff       	call   f0106dcf <cprintf>
f010a227:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010a22a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a22d:	8b 40 44             	mov    0x44(%eax),%eax
f010a230:	85 c0                	test   %eax,%eax
f010a232:	74 11                	je     f010a245 <sched_kill_env+0x154>
f010a234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a237:	8b 40 44             	mov    0x44(%eax),%eax
f010a23a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a23d:	8b 52 48             	mov    0x48(%edx),%edx
f010a240:	89 50 48             	mov    %edx,0x48(%eax)
f010a243:	eb 16                	jmp    f010a25b <sched_kill_env+0x16a>
f010a245:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a24a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a24d:	c1 e2 04             	shl    $0x4,%edx
f010a250:	01 c2                	add    %eax,%edx
f010a252:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a255:	8b 40 48             	mov    0x48(%eax),%eax
f010a258:	89 42 04             	mov    %eax,0x4(%edx)
f010a25b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a25e:	8b 40 48             	mov    0x48(%eax),%eax
f010a261:	85 c0                	test   %eax,%eax
f010a263:	74 11                	je     f010a276 <sched_kill_env+0x185>
f010a265:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a268:	8b 40 48             	mov    0x48(%eax),%eax
f010a26b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a26e:	8b 52 44             	mov    0x44(%edx),%edx
f010a271:	89 50 44             	mov    %edx,0x44(%eax)
f010a274:	eb 15                	jmp    f010a28b <sched_kill_env+0x19a>
f010a276:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a27b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a27e:	c1 e2 04             	shl    $0x4,%edx
f010a281:	01 c2                	add    %eax,%edx
f010a283:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a286:	8b 40 44             	mov    0x44(%eax),%eax
f010a289:	89 02                	mov    %eax,(%edx)
f010a28b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a28e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a295:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a298:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a29f:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a2a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a2a7:	c1 e2 04             	shl    $0x4,%edx
f010a2aa:	01 d0                	add    %edx,%eax
f010a2ac:	8b 50 0c             	mov    0xc(%eax),%edx
f010a2af:	4a                   	dec    %edx
f010a2b0:	89 50 0c             	mov    %edx,0xc(%eax)
						start_env_free(ptr_env);
f010a2b3:	83 ec 0c             	sub    $0xc,%esp
f010a2b6:	ff 75 f4             	pushl  -0xc(%ebp)
f010a2b9:	e8 a2 be ff ff       	call   f0106160 <start_env_free>
f010a2be:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010a2c1:	83 ec 0c             	sub    $0xc,%esp
f010a2c4:	68 97 b0 11 f0       	push   $0xf011b097
f010a2c9:	e8 01 cb ff ff       	call   f0106dcf <cprintf>
f010a2ce:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010a2d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010a2d8:	eb 4b                	jmp    f010a325 <sched_kill_env+0x234>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a2da:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a2df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a2e2:	c1 e2 04             	shl    $0x4,%edx
f010a2e5:	01 d0                	add    %edx,%eax
f010a2e7:	8b 40 08             	mov    0x8(%eax),%eax
f010a2ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a2ed:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f010a2f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a2f5:	c1 e2 04             	shl    $0x4,%edx
f010a2f8:	01 d0                	add    %edx,%eax
f010a2fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a2fe:	74 08                	je     f010a308 <sched_kill_env+0x217>
f010a300:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a303:	8b 52 44             	mov    0x44(%edx),%edx
f010a306:	eb 05                	jmp    f010a30d <sched_kill_env+0x21c>
f010a308:	ba 00 00 00 00       	mov    $0x0,%edx
f010a30d:	89 50 08             	mov    %edx,0x8(%eax)
f010a310:	8b 40 08             	mov    0x8(%eax),%eax
f010a313:	85 c0                	test   %eax,%eax
f010a315:	0f 85 df fe ff ff    	jne    f010a1fa <sched_kill_env+0x109>
f010a31b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a31f:	0f 85 d5 fe ff ff    	jne    f010a1fa <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f010a325:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a329:	75 16                	jne    f010a341 <sched_kill_env+0x250>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a32b:	ff 45 ec             	incl   -0x14(%ebp)
f010a32e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010a333:	0f b6 c0             	movzbl %al,%eax
f010a336:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010a339:	0f 8f 86 fe ff ff    	jg     f010a1c5 <sched_kill_env+0xd4>
f010a33f:	eb 01                	jmp    f010a342 <sched_kill_env+0x251>
						//return;
					}
				}
			}
			if (found)
				break;
f010a341:	90                   	nop
		}
	}
	if (!found)
f010a342:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a346:	0f 85 a7 00 00 00    	jne    f010a3f3 <sched_kill_env+0x302>
	{
		ptr_env=NULL;
f010a34c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a353:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f010a358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a35b:	eb 67                	jmp    f010a3c4 <sched_kill_env+0x2d3>
		{
			if(ptr_env->env_id == envId)
f010a35d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a360:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a363:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a366:	75 54                	jne    f010a3bc <sched_kill_env+0x2cb>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010a368:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a36b:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a374:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a377:	83 ec 04             	sub    $0x4,%esp
f010a37a:	52                   	push   %edx
f010a37b:	50                   	push   %eax
f010a37c:	68 6c b1 11 f0       	push   $0xf011b16c
f010a381:	e8 49 ca ff ff       	call   f0106dcf <cprintf>
f010a386:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010a389:	83 ec 0c             	sub    $0xc,%esp
f010a38c:	ff 75 f4             	pushl  -0xc(%ebp)
f010a38f:	e8 4b f3 ff ff       	call   f01096df <sched_remove_exit>
f010a394:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a397:	83 ec 0c             	sub    $0xc,%esp
f010a39a:	ff 75 f4             	pushl  -0xc(%ebp)
f010a39d:	e8 be bd ff ff       	call   f0106160 <start_env_free>
f010a3a2:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a3a5:	83 ec 0c             	sub    $0xc,%esp
f010a3a8:	68 97 b0 11 f0       	push   $0xf011b097
f010a3ad:	e8 1d ca ff ff       	call   f0106dcf <cprintf>
f010a3b2:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a3b5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a3bc:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f010a3c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a3c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a3c8:	74 08                	je     f010a3d2 <sched_kill_env+0x2e1>
f010a3ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3cd:	8b 40 44             	mov    0x44(%eax),%eax
f010a3d0:	eb 05                	jmp    f010a3d7 <sched_kill_env+0x2e6>
f010a3d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010a3d7:	a3 80 73 53 f0       	mov    %eax,0xf0537380
f010a3dc:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f010a3e1:	85 c0                	test   %eax,%eax
f010a3e3:	0f 85 74 ff ff ff    	jne    f010a35d <sched_kill_env+0x26c>
f010a3e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a3ed:	0f 85 6a ff ff ff    	jne    f010a35d <sched_kill_env+0x26c>
				//return;
			}
		}
	}

	if (!found)
f010a3f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a3f7:	75 7f                	jne    f010a478 <sched_kill_env+0x387>
	{
		if (curenv->env_id == envId)
f010a3f9:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a3fe:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a401:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a404:	75 72                	jne    f010a478 <sched_kill_env+0x387>
		{
			ptr_env = curenv;
f010a406:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010a40e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a411:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a414:	83 f8 02             	cmp    $0x2,%eax
f010a417:	74 19                	je     f010a432 <sched_kill_env+0x341>
f010a419:	68 94 b1 11 f0       	push   $0xf011b194
f010a41e:	68 b4 b1 11 f0       	push   $0xf011b1b4
f010a423:	68 72 02 00 00       	push   $0x272
f010a428:	68 c9 b1 11 f0       	push   $0xf011b1c9
f010a42d:	e8 44 5d ff ff       	call   f0100176 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010a432:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a435:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a43b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a43e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a441:	83 ec 04             	sub    $0x4,%esp
f010a444:	52                   	push   %edx
f010a445:	50                   	push   %eax
f010a446:	68 d8 b1 11 f0       	push   $0xf011b1d8
f010a44b:	e8 7f c9 ff ff       	call   f0106dcf <cprintf>
f010a450:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010a453:	83 ec 0c             	sub    $0xc,%esp
f010a456:	ff 75 f4             	pushl  -0xc(%ebp)
f010a459:	e8 02 bd ff ff       	call   f0106160 <start_env_free>
f010a45e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010a461:	83 ec 0c             	sub    $0xc,%esp
f010a464:	68 97 b0 11 f0       	push   $0xf011b097
f010a469:	e8 61 c9 ff ff       	call   f0106dcf <cprintf>
f010a46e:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010a471:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	//If it's the curenv, then reset it and reinvoke the scheduler
	//as there's no meaning to return back to a killed env
	if (curenv->env_id == envId)
f010a478:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a47d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a480:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a483:	75 1d                	jne    f010a4a2 <sched_kill_env+0x3b1>
	{
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010a485:	a1 38 58 55 f0       	mov    0xf0555838,%eax
f010a48a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a48d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a490:	0f 22 d8             	mov    %eax,%cr3
		curenv = NULL;
f010a493:	c7 05 b0 6a 53 f0 00 	movl   $0x0,0xf0536ab0
f010a49a:	00 00 00 
		fos_scheduler();
f010a49d:	e8 45 ee ff ff       	call   f01092e7 <fos_scheduler>
	}

}
f010a4a2:	90                   	nop
f010a4a3:	c9                   	leave  
f010a4a4:	c3                   	ret    

f010a4a5 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010a4a5:	55                   	push   %ebp
f010a4a6:	89 e5                	mov    %esp,%ebp
f010a4a8:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU())
f010a4ab:	e8 8e de ff ff       	call   f010833e <isPageReplacmentAlgorithmLRU>
f010a4b0:	85 c0                	test   %eax,%eax
f010a4b2:	74 05                	je     f010a4b9 <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f010a4b4:	e8 05 00 00 00       	call   f010a4be <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f010a4b9:	e8 29 ee ff ff       	call   f01092e7 <fos_scheduler>

f010a4be <update_WS_time_stamps>:
}
void update_WS_time_stamps()
{
f010a4be:	55                   	push   %ebp
f010a4bf:	89 e5                	mov    %esp,%ebp
f010a4c1:	53                   	push   %ebx
f010a4c2:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010a4c5:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a4ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f010a4cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010a4d1:	0f 84 bc 01 00 00    	je     f010a693 <update_WS_time_stamps+0x1d5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a4d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a4de:	e9 c7 00 00 00       	jmp    f010a5aa <update_WS_time_stamps+0xec>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010a4e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a4e6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a4ec:	89 d0                	mov    %edx,%eax
f010a4ee:	01 c0                	add    %eax,%eax
f010a4f0:	01 d0                	add    %edx,%eax
f010a4f2:	c1 e0 02             	shl    $0x2,%eax
f010a4f5:	01 c8                	add    %ecx,%eax
f010a4f7:	8a 40 04             	mov    0x4(%eax),%al
f010a4fa:	3c 01                	cmp    $0x1,%al
f010a4fc:	0f 84 a5 00 00 00    	je     f010a5a7 <update_WS_time_stamps+0xe9>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f010a502:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a505:	8b 48 78             	mov    0x78(%eax),%ecx
f010a508:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a50b:	89 d0                	mov    %edx,%eax
f010a50d:	01 c0                	add    %eax,%eax
f010a50f:	01 d0                	add    %edx,%eax
f010a511:	c1 e0 02             	shl    $0x2,%eax
f010a514:	01 c8                	add    %ecx,%eax
f010a516:	8b 00                	mov    (%eax),%eax
f010a518:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
f010a51b:	83 ec 08             	sub    $0x8,%esp
f010a51e:	ff 75 e8             	pushl  -0x18(%ebp)
f010a521:	ff 75 ec             	pushl  -0x14(%ebp)
f010a524:	e8 1c ab ff ff       	call   f0105045 <pt_get_page_permissions>
f010a529:	83 c4 10             	add    $0x10,%esp
f010a52c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f010a52f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a532:	8b 48 78             	mov    0x78(%eax),%ecx
f010a535:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a538:	89 d0                	mov    %edx,%eax
f010a53a:	01 c0                	add    %eax,%eax
f010a53c:	01 d0                	add    %edx,%eax
f010a53e:	c1 e0 02             	shl    $0x2,%eax
f010a541:	01 c8                	add    %ecx,%eax
f010a543:	8b 40 08             	mov    0x8(%eax),%eax
f010a546:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f010a549:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a54c:	83 e0 20             	and    $0x20,%eax
f010a54f:	85 c0                	test   %eax,%eax
f010a551:	74 37                	je     f010a58a <update_WS_time_stamps+0xcc>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a553:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a556:	8b 48 78             	mov    0x78(%eax),%ecx
f010a559:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a55c:	89 d0                	mov    %edx,%eax
f010a55e:	01 c0                	add    %eax,%eax
f010a560:	01 d0                	add    %edx,%eax
f010a562:	c1 e0 02             	shl    $0x2,%eax
f010a565:	01 c8                	add    %ecx,%eax
f010a567:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010a56a:	c1 ea 02             	shr    $0x2,%edx
f010a56d:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f010a573:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
f010a576:	6a 20                	push   $0x20
f010a578:	6a 00                	push   $0x0
f010a57a:	ff 75 e8             	pushl  -0x18(%ebp)
f010a57d:	ff 75 ec             	pushl  -0x14(%ebp)
f010a580:	e8 5c a7 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f010a585:	83 c4 10             	add    $0x10,%esp
f010a588:	eb 1d                	jmp    f010a5a7 <update_WS_time_stamps+0xe9>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010a58a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a58d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a593:	89 d0                	mov    %edx,%eax
f010a595:	01 c0                	add    %eax,%eax
f010a597:	01 d0                	add    %edx,%eax
f010a599:	c1 e0 02             	shl    $0x2,%eax
f010a59c:	01 c8                	add    %ecx,%eax
f010a59e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010a5a1:	c1 ea 02             	shr    $0x2,%edx
f010a5a4:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a5a7:	ff 45 f4             	incl   -0xc(%ebp)
f010a5aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a5ad:	8b 50 74             	mov    0x74(%eax),%edx
f010a5b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5b3:	39 c2                	cmp    %eax,%edx
f010a5b5:	0f 87 28 ff ff ff    	ja     f010a4e3 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a5bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a5c2:	e9 c2 00 00 00       	jmp    f010a689 <update_WS_time_stamps+0x1cb>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010a5c7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a5ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5cd:	89 d0                	mov    %edx,%eax
f010a5cf:	01 c0                	add    %eax,%eax
f010a5d1:	01 d0                	add    %edx,%eax
f010a5d3:	c1 e0 02             	shl    $0x2,%eax
f010a5d6:	01 c8                	add    %ecx,%eax
f010a5d8:	83 e8 80             	sub    $0xffffff80,%eax
f010a5db:	8a 00                	mov    (%eax),%al
f010a5dd:	3c 01                	cmp    $0x1,%al
f010a5df:	0f 84 a1 00 00 00    	je     f010a686 <update_WS_time_stamps+0x1c8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010a5e5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a5e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5eb:	89 d0                	mov    %edx,%eax
f010a5ed:	01 c0                	add    %eax,%eax
f010a5ef:	01 d0                	add    %edx,%eax
f010a5f1:	c1 e0 02             	shl    $0x2,%eax
f010a5f4:	01 c8                	add    %ecx,%eax
f010a5f6:	83 c0 7c             	add    $0x7c,%eax
f010a5f9:	8b 00                	mov    (%eax),%eax
f010a5fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f010a5fe:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a601:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a604:	89 d0                	mov    %edx,%eax
f010a606:	01 c0                	add    %eax,%eax
f010a608:	01 d0                	add    %edx,%eax
f010a60a:	c1 e0 02             	shl    $0x2,%eax
f010a60d:	01 c8                	add    %ecx,%eax
f010a60f:	05 84 00 00 00       	add    $0x84,%eax
f010a614:	8b 00                	mov    (%eax),%eax
f010a616:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f010a619:	83 ec 08             	sub    $0x8,%esp
f010a61c:	ff 75 dc             	pushl  -0x24(%ebp)
f010a61f:	ff 75 ec             	pushl  -0x14(%ebp)
f010a622:	e8 1e a6 ff ff       	call   f0104c45 <pd_is_table_used>
f010a627:	83 c4 10             	add    $0x10,%esp
f010a62a:	85 c0                	test   %eax,%eax
f010a62c:	74 38                	je     f010a666 <update_WS_time_stamps+0x1a8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a62e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a631:	c1 e8 02             	shr    $0x2,%eax
f010a634:	0d 00 00 00 80       	or     $0x80000000,%eax
f010a639:	89 c1                	mov    %eax,%ecx
f010a63b:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a63e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a641:	89 d0                	mov    %edx,%eax
f010a643:	01 c0                	add    %eax,%eax
f010a645:	01 d0                	add    %edx,%eax
f010a647:	c1 e0 02             	shl    $0x2,%eax
f010a64a:	01 d8                	add    %ebx,%eax
f010a64c:	05 84 00 00 00       	add    $0x84,%eax
f010a651:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f010a653:	83 ec 08             	sub    $0x8,%esp
f010a656:	ff 75 dc             	pushl  -0x24(%ebp)
f010a659:	ff 75 ec             	pushl  -0x14(%ebp)
f010a65c:	e8 07 a6 ff ff       	call   f0104c68 <pd_set_table_unused>
f010a661:	83 c4 10             	add    $0x10,%esp
f010a664:	eb 20                	jmp    f010a686 <update_WS_time_stamps+0x1c8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010a666:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a669:	c1 e8 02             	shr    $0x2,%eax
f010a66c:	89 c1                	mov    %eax,%ecx
f010a66e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a671:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a674:	89 d0                	mov    %edx,%eax
f010a676:	01 c0                	add    %eax,%eax
f010a678:	01 d0                	add    %edx,%eax
f010a67a:	c1 e0 02             	shl    $0x2,%eax
f010a67d:	01 d8                	add    %ebx,%eax
f010a67f:	05 84 00 00 00       	add    $0x84,%eax
f010a684:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a686:	ff 45 f0             	incl   -0x10(%ebp)
f010a689:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f010a68d:	0f 8e 34 ff ff ff    	jle    f010a5c7 <update_WS_time_stamps+0x109>
					}
				}
			}
		}
	}
}
f010a693:	90                   	nop
f010a694:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a697:	c9                   	leave  
f010a698:	c3                   	ret    

f010a699 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010a699:	55                   	push   %ebp
f010a69a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010a69c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69f:	8b 15 24 58 55 f0    	mov    0xf0555824,%edx
f010a6a5:	29 d0                	sub    %edx,%eax
f010a6a7:	c1 f8 03             	sar    $0x3,%eax
f010a6aa:	89 c2                	mov    %eax,%edx
f010a6ac:	89 d0                	mov    %edx,%eax
f010a6ae:	c1 e0 02             	shl    $0x2,%eax
f010a6b1:	01 d0                	add    %edx,%eax
f010a6b3:	c1 e0 02             	shl    $0x2,%eax
f010a6b6:	01 d0                	add    %edx,%eax
f010a6b8:	c1 e0 02             	shl    $0x2,%eax
f010a6bb:	01 d0                	add    %edx,%eax
f010a6bd:	89 c1                	mov    %eax,%ecx
f010a6bf:	c1 e1 08             	shl    $0x8,%ecx
f010a6c2:	01 c8                	add    %ecx,%eax
f010a6c4:	89 c1                	mov    %eax,%ecx
f010a6c6:	c1 e1 10             	shl    $0x10,%ecx
f010a6c9:	01 c8                	add    %ecx,%eax
f010a6cb:	01 c0                	add    %eax,%eax
f010a6cd:	01 d0                	add    %edx,%eax
}
f010a6cf:	5d                   	pop    %ebp
f010a6d0:	c3                   	ret    

f010a6d1 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010a6d1:	55                   	push   %ebp
f010a6d2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010a6d4:	ff 75 08             	pushl  0x8(%ebp)
f010a6d7:	e8 bd ff ff ff       	call   f010a699 <to_frame_number>
f010a6dc:	83 c4 04             	add    $0x4,%esp
f010a6df:	c1 e0 0c             	shl    $0xc,%eax
}
f010a6e2:	c9                   	leave  
f010a6e3:	c3                   	ret    

f010a6e4 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010a6e4:	55                   	push   %ebp
f010a6e5:	89 e5                	mov    %esp,%ebp
f010a6e7:	83 ec 18             	sub    $0x18,%esp
f010a6ea:	8b 45 10             	mov    0x10(%ebp),%eax
f010a6ed:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010a6f0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010a6f4:	74 26                	je     f010a71c <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010a6f6:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a6fb:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a6fe:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f010a704:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f010a70a:	83 ec 04             	sub    $0x4,%esp
f010a70d:	50                   	push   %eax
f010a70e:	52                   	push   %edx
f010a70f:	68 04 b2 11 f0       	push   $0xf011b204
f010a714:	e8 b6 c6 ff ff       	call   f0106dcf <cprintf>
f010a719:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010a71c:	83 ec 04             	sub    $0x4,%esp
f010a71f:	ff 75 08             	pushl  0x8(%ebp)
f010a722:	ff 75 0c             	pushl  0xc(%ebp)
f010a725:	68 0d b2 11 f0       	push   $0xf011b20d
f010a72a:	e8 a0 c6 ff ff       	call   f0106dcf <cprintf>
f010a72f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010a732:	90                   	nop
f010a733:	c9                   	leave  
f010a734:	c3                   	ret    

f010a735 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010a735:	55                   	push   %ebp
f010a736:	89 e5                	mov    %esp,%ebp
f010a738:	83 ec 18             	sub    $0x18,%esp
f010a73b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010a741:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010a745:	83 ec 08             	sub    $0x8,%esp
f010a748:	50                   	push   %eax
f010a749:	68 12 b2 11 f0       	push   $0xf011b212
f010a74e:	e8 7c c6 ff ff       	call   f0106dcf <cprintf>
f010a753:	83 c4 10             	add    $0x10,%esp
}
f010a756:	90                   	nop
f010a757:	c9                   	leave  
f010a758:	c3                   	ret    

f010a759 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010a759:	55                   	push   %ebp
f010a75a:	89 e5                	mov    %esp,%ebp
f010a75c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010a75f:	e8 47 64 ff ff       	call   f0100bab <cons_getc2>
f010a764:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010a767:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a76a:	c9                   	leave  
f010a76b:	c3                   	ret    

f010a76c <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f010a76c:	55                   	push   %ebp
f010a76d:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010a76f:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a774:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a777:	5d                   	pop    %ebp
f010a778:	c3                   	ret    

f010a779 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010a779:	55                   	push   %ebp
f010a77a:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010a77c:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a781:	89 c2                	mov    %eax,%edx
f010a783:	a1 ac 6a 53 f0       	mov    0xf0536aac,%eax
f010a788:	29 c2                	sub    %eax,%edx
f010a78a:	89 d0                	mov    %edx,%eax
f010a78c:	c1 f8 02             	sar    $0x2,%eax
f010a78f:	89 c2                	mov    %eax,%edx
f010a791:	89 d0                	mov    %edx,%eax
f010a793:	01 c0                	add    %eax,%eax
f010a795:	01 d0                	add    %edx,%eax
f010a797:	c1 e0 09             	shl    $0x9,%eax
f010a79a:	29 d0                	sub    %edx,%eax
f010a79c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a7a3:	01 c8                	add    %ecx,%eax
f010a7a5:	c1 e0 03             	shl    $0x3,%eax
f010a7a8:	01 d0                	add    %edx,%eax
f010a7aa:	89 c1                	mov    %eax,%ecx
f010a7ac:	c1 e1 05             	shl    $0x5,%ecx
f010a7af:	01 c8                	add    %ecx,%eax
f010a7b1:	01 c0                	add    %eax,%eax
f010a7b3:	01 d0                	add    %edx,%eax
f010a7b5:	01 c0                	add    %eax,%eax
f010a7b7:	01 d0                	add    %edx,%eax
f010a7b9:	c1 e0 02             	shl    $0x2,%eax
f010a7bc:	01 d0                	add    %edx,%eax
f010a7be:	c1 e0 04             	shl    $0x4,%eax
f010a7c1:	01 d0                	add    %edx,%eax
f010a7c3:	f7 d8                	neg    %eax
}
f010a7c5:	5d                   	pop    %ebp
f010a7c6:	c3                   	ret    

f010a7c7 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010a7c7:	55                   	push   %ebp
f010a7c8:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010a7ca:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a7cf:	8b 40 50             	mov    0x50(%eax),%eax
}
f010a7d2:	5d                   	pop    %ebp
f010a7d3:	c3                   	ret    

f010a7d4 <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010a7d4:	55                   	push   %ebp
f010a7d5:	89 e5                	mov    %esp,%ebp
f010a7d7:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010a7da:	83 ec 04             	sub    $0x4,%esp
f010a7dd:	6a 00                	push   $0x0
f010a7df:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010a7e2:	50                   	push   %eax
f010a7e3:	ff 75 08             	pushl  0x8(%ebp)
f010a7e6:	e8 c7 88 ff ff       	call   f01030b2 <envid2env>
f010a7eb:	83 c4 10             	add    $0x10,%esp
f010a7ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a7f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a7f5:	79 05                	jns    f010a7fc <sys_env_destroy+0x28>
		return r;
f010a7f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7fa:	eb 5e                	jmp    f010a85a <sys_env_destroy+0x86>

	if (e == curenv)
f010a7fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a7ff:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a804:	39 c2                	cmp    %eax,%edx
f010a806:	75 1b                	jne    f010a823 <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010a808:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a80d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a810:	83 ec 08             	sub    $0x8,%esp
f010a813:	50                   	push   %eax
f010a814:	68 15 b2 11 f0       	push   $0xf011b215
f010a819:	e8 b1 c5 ff ff       	call   f0106dcf <cprintf>
f010a81e:	83 c4 10             	add    $0x10,%esp
f010a821:	eb 20                	jmp    f010a843 <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010a823:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a826:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a829:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a82e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a831:	83 ec 04             	sub    $0x4,%esp
f010a834:	52                   	push   %edx
f010a835:	50                   	push   %eax
f010a836:	68 30 b2 11 f0       	push   $0xf011b230
f010a83b:	e8 8f c5 ff ff       	call   f0106dcf <cprintf>
f010a840:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010a843:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a846:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a849:	83 ec 0c             	sub    $0xc,%esp
f010a84c:	50                   	push   %eax
f010a84d:	e8 9f f8 ff ff       	call   f010a0f1 <sched_kill_env>
f010a852:	83 c4 10             	add    $0x10,%esp

	return 0;
f010a855:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a85a:	c9                   	leave  
f010a85b:	c3                   	ret    

f010a85c <sys_env_exit>:

static void sys_env_exit()
{
f010a85c:	55                   	push   %ebp
f010a85d:	89 e5                	mov    %esp,%ebp
f010a85f:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010a862:	e8 f5 bf ff ff       	call   f010685c <env_exit>
	//env_run_cmd_prmpt();
}
f010a867:	90                   	nop
f010a868:	c9                   	leave  
f010a869:	c3                   	ret    

f010a86a <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010a86a:	55                   	push   %ebp
f010a86b:	89 e5                	mov    %esp,%ebp
f010a86d:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010a870:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a875:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010a878:	83 ec 0c             	sub    $0xc,%esp
f010a87b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a87e:	50                   	push   %eax
f010a87f:	e8 12 91 ff ff       	call   f0103996 <allocate_frame>
f010a884:	83 c4 10             	add    $0x10,%esp
f010a887:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a88a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a88e:	75 08                	jne    f010a898 <__sys_allocate_page+0x2e>
		return r ;
f010a890:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a893:	e9 e8 00 00 00       	jmp    f010a980 <__sys_allocate_page+0x116>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010a898:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89b:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010a8a0:	77 0c                	ja     f010a8ae <__sys_allocate_page+0x44>
f010a8a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a5:	25 ff 0f 00 00       	and    $0xfff,%eax
f010a8aa:	85 c0                	test   %eax,%eax
f010a8ac:	74 0a                	je     f010a8b8 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010a8ae:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a8b3:	e9 c8 00 00 00       	jmp    f010a980 <__sys_allocate_page+0x116>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010a8b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8bb:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010a8c0:	83 f8 04             	cmp    $0x4,%eax
f010a8c3:	74 0a                	je     f010a8cf <__sys_allocate_page+0x65>
		return E_INVAL;
f010a8c5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a8ca:	e9 b1 00 00 00       	jmp    f010a980 <__sys_allocate_page+0x116>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010a8cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a8d2:	83 ec 0c             	sub    $0xc,%esp
f010a8d5:	50                   	push   %eax
f010a8d6:	e8 f6 fd ff ff       	call   f010a6d1 <to_physical_address>
f010a8db:	83 c4 10             	add    $0x10,%esp
f010a8de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, (void*)USER_LIMIT, PERM_WRITEABLE);
f010a8e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8e7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8ea:	6a 02                	push   $0x2
f010a8ec:	68 00 00 80 ef       	push   $0xef800000
f010a8f1:	52                   	push   %edx
f010a8f2:	50                   	push   %eax
f010a8f3:	e8 12 94 ff ff       	call   f0103d0a <map_frame>
f010a8f8:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010a8fb:	83 ec 04             	sub    $0x4,%esp
f010a8fe:	68 00 10 00 00       	push   $0x1000
f010a903:	6a 00                	push   $0x0
f010a905:	68 00 00 80 ef       	push   $0xef800000
f010a90a:	e8 99 d0 00 00       	call   f01179a8 <memset>
f010a90f:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010a912:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a915:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a918:	8b 40 08             	mov    0x8(%eax),%eax
f010a91b:	40                   	inc    %eax
f010a91c:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, (void*)USER_LIMIT);
f010a920:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a923:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a926:	83 ec 08             	sub    $0x8,%esp
f010a929:	68 00 00 80 ef       	push   $0xef800000
f010a92e:	50                   	push   %eax
f010a92f:	e8 05 95 ff ff       	call   f0103e39 <unmap_frame>
f010a934:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010a937:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a93a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a93d:	8b 40 08             	mov    0x8(%eax),%eax
f010a940:	48                   	dec    %eax
f010a941:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}

	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010a945:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a948:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a94b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a94e:	ff 75 0c             	pushl  0xc(%ebp)
f010a951:	ff 75 08             	pushl  0x8(%ebp)
f010a954:	52                   	push   %edx
f010a955:	50                   	push   %eax
f010a956:	e8 af 93 ff ff       	call   f0103d0a <map_frame>
f010a95b:	83 c4 10             	add    $0x10,%esp
f010a95e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a961:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a965:	75 14                	jne    f010a97b <__sys_allocate_page+0x111>
	{
		decrement_references(ptr_frame_info);
f010a967:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a96a:	83 ec 0c             	sub    $0xc,%esp
f010a96d:	50                   	push   %eax
f010a96e:	e8 72 91 ff ff       	call   f0103ae5 <decrement_references>
f010a973:	83 c4 10             	add    $0x10,%esp
		return r;
f010a976:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a979:	eb 05                	jmp    f010a980 <__sys_allocate_page+0x116>
	}
	return 0 ;
f010a97b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a980:	c9                   	leave  
f010a981:	c3                   	ret    

f010a982 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010a982:	55                   	push   %ebp
f010a983:	89 e5                	mov    %esp,%ebp
f010a985:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010a988:	83 ec 04             	sub    $0x4,%esp
f010a98b:	68 48 b2 11 f0       	push   $0xf011b248
f010a990:	68 e3 00 00 00       	push   $0xe3
f010a995:	68 66 b2 11 f0       	push   $0xf011b266
f010a99a:	e8 d7 57 ff ff       	call   f0100176 <_panic>

f010a99f <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010a99f:	55                   	push   %ebp
f010a9a0:	89 e5                	mov    %esp,%ebp
f010a9a2:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010a9a5:	83 ec 04             	sub    $0x4,%esp
f010a9a8:	68 78 b2 11 f0       	push   $0xf011b278
f010a9ad:	68 f2 00 00 00       	push   $0xf2
f010a9b2:	68 66 b2 11 f0       	push   $0xf011b266
f010a9b7:	e8 ba 57 ff ff       	call   f0100176 <_panic>

f010a9bc <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010a9bc:	55                   	push   %ebp
f010a9bd:	89 e5                	mov    %esp,%ebp
f010a9bf:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010a9c2:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010a9c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a9ca:	83 ec 04             	sub    $0x4,%esp
f010a9cd:	ff 75 0c             	pushl  0xc(%ebp)
f010a9d0:	ff 75 08             	pushl  0x8(%ebp)
f010a9d3:	50                   	push   %eax
f010a9d4:	e8 b3 97 ff ff       	call   f010418c <calculate_required_frames>
f010a9d9:	83 c4 10             	add    $0x10,%esp
}
f010a9dc:	c9                   	leave  
f010a9dd:	c3                   	ret    

f010a9de <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010a9de:	55                   	push   %ebp
f010a9df:	89 e5                	mov    %esp,%ebp
f010a9e1:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a9e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a9e7:	83 ec 0c             	sub    $0xc,%esp
f010a9ea:	50                   	push   %eax
f010a9eb:	e8 4c 98 ff ff       	call   f010423c <calculate_available_frames>
f010a9f0:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010a9f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a9f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9f9:	01 d0                	add    %edx,%eax
}
f010a9fb:	c9                   	leave  
f010a9fc:	c3                   	ret    

f010a9fd <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010a9fd:	55                   	push   %ebp
f010a9fe:	89 e5                	mov    %esp,%ebp
f010aa00:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010aa03:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aa06:	83 ec 0c             	sub    $0xc,%esp
f010aa09:	50                   	push   %eax
f010aa0a:	e8 2d 98 ff ff       	call   f010423c <calculate_available_frames>
f010aa0f:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010aa12:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010aa15:	c9                   	leave  
f010aa16:	c3                   	ret    

f010aa17 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010aa17:	55                   	push   %ebp
f010aa18:	89 e5                	mov    %esp,%ebp
f010aa1a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010aa1d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aa20:	83 ec 0c             	sub    $0xc,%esp
f010aa23:	50                   	push   %eax
f010aa24:	e8 13 98 ff ff       	call   f010423c <calculate_available_frames>
f010aa29:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010aa2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010aa2f:	c9                   	leave  
f010aa30:	c3                   	ret    

f010aa31 <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010aa31:	55                   	push   %ebp
f010aa32:	89 e5                	mov    %esp,%ebp
f010aa34:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010aa37:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aa3c:	83 ec 0c             	sub    $0xc,%esp
f010aa3f:	50                   	push   %eax
f010aa40:	e8 bc 13 00 00       	call   f010be01 <pf_calculate_allocated_pages>
f010aa45:	83 c4 10             	add    $0x10,%esp
}
f010aa48:	c9                   	leave  
f010aa49:	c3                   	ret    

f010aa4a <sys_freeMem>:


void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010aa4a:	55                   	push   %ebp
f010aa4b:	89 e5                	mov    %esp,%ebp
f010aa4d:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010aa50:	e8 7b d9 ff ff       	call   f01083d0 <isBufferingEnabled>
f010aa55:	85 c0                	test   %eax,%eax
f010aa57:	74 19                	je     f010aa72 <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010aa59:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aa5e:	83 ec 04             	sub    $0x4,%esp
f010aa61:	ff 75 0c             	pushl  0xc(%ebp)
f010aa64:	ff 75 08             	pushl  0x8(%ebp)
f010aa67:	50                   	push   %eax
f010aa68:	e8 fc 96 ff ff       	call   f0104169 <__freeMem_with_buffering>
f010aa6d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010aa70:	eb 18                	jmp    f010aa8a <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010aa72:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aa77:	83 ec 04             	sub    $0x4,%esp
f010aa7a:	ff 75 0c             	pushl  0xc(%ebp)
f010aa7d:	ff 75 08             	pushl  0x8(%ebp)
f010aa80:	50                   	push   %eax
f010aa81:	e8 78 95 ff ff       	call   f0103ffe <freeMem>
f010aa86:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010aa89:	90                   	nop
}
f010aa8a:	c9                   	leave  
f010aa8b:	c3                   	ret    

f010aa8c <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010aa8c:	55                   	push   %ebp
f010aa8d:	89 e5                	mov    %esp,%ebp
f010aa8f:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010aa92:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aa97:	83 ec 04             	sub    $0x4,%esp
f010aa9a:	ff 75 0c             	pushl  0xc(%ebp)
f010aa9d:	ff 75 08             	pushl  0x8(%ebp)
f010aaa0:	50                   	push   %eax
f010aaa1:	e8 f7 94 ff ff       	call   f0103f9d <allocateMem>
f010aaa6:	83 c4 10             	add    $0x10,%esp
	return;
f010aaa9:	90                   	nop
}
f010aaaa:	c9                   	leave  
f010aaab:	c3                   	ret    

f010aaac <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010aaac:	55                   	push   %ebp
f010aaad:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010aaaf:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aab4:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f010aaba:	8b 52 38             	mov    0x38(%edx),%edx
f010aabd:	80 e6 fd             	and    $0xfd,%dh
f010aac0:	89 50 38             	mov    %edx,0x38(%eax)
}
f010aac3:	90                   	nop
f010aac4:	5d                   	pop    %ebp
f010aac5:	c3                   	ret    

f010aac6 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010aac6:	55                   	push   %ebp
f010aac7:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010aac9:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010aace:	8b 15 b0 6a 53 f0    	mov    0xf0536ab0,%edx
f010aad4:	8b 52 38             	mov    0x38(%edx),%edx
f010aad7:	80 ce 02             	or     $0x2,%dh
f010aada:	89 50 38             	mov    %edx,0x38(%eax)
}
f010aadd:	90                   	nop
f010aade:	5d                   	pop    %ebp
f010aadf:	c3                   	ret    

f010aae0 <sys_clearFFL>:

void sys_clearFFL()
{
f010aae0:	55                   	push   %ebp
f010aae1:	89 e5                	mov    %esp,%ebp
f010aae3:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010aae6:	a1 20 58 55 f0       	mov    0xf0555820,%eax
f010aaeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010aaee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010aaf5:	eb 12                	jmp    f010ab09 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010aaf7:	83 ec 0c             	sub    $0xc,%esp
f010aafa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aafd:	50                   	push   %eax
f010aafe:	e8 93 8e ff ff       	call   f0103996 <allocate_frame>
f010ab03:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ab06:	ff 45 f4             	incl   -0xc(%ebp)
f010ab09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ab0f:	7c e6                	jl     f010aaf7 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ab11:	90                   	nop
f010ab12:	c9                   	leave  
f010ab13:	c3                   	ret    

f010ab14 <sys_create_env>:

int sys_create_env(char* programName, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f010ab14:	55                   	push   %ebp
f010ab15:	89 e5                	mov    %esp,%ebp
f010ab17:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, percent_WS_pages_to_remove);
f010ab1a:	83 ec 04             	sub    $0x4,%esp
f010ab1d:	ff 75 10             	pushl  0x10(%ebp)
f010ab20:	ff 75 0c             	pushl  0xc(%ebp)
f010ab23:	ff 75 08             	pushl  0x8(%ebp)
f010ab26:	e8 2b af ff ff       	call   f0105a56 <env_create>
f010ab2b:	83 c4 10             	add    $0x10,%esp
f010ab2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ab31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ab35:	75 07                	jne    f010ab3e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ab37:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ab3c:	eb 14                	jmp    f010ab52 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ab3e:	83 ec 0c             	sub    $0xc,%esp
f010ab41:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab44:	e8 b6 f1 ff ff       	call   f0109cff <sched_new_env>
f010ab49:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ab4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ab52:	c9                   	leave  
f010ab53:	c3                   	ret    

f010ab54 <sys_run_env>:

void sys_run_env(int32 envId)
{
f010ab54:	55                   	push   %ebp
f010ab55:	89 e5                	mov    %esp,%ebp
f010ab57:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ab5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5d:	83 ec 0c             	sub    $0xc,%esp
f010ab60:	50                   	push   %eax
f010ab61:	e8 b0 f1 ff ff       	call   f0109d16 <sched_run_env>
f010ab66:	83 c4 10             	add    $0x10,%esp
}
f010ab69:	90                   	nop
f010ab6a:	c9                   	leave  
f010ab6b:	c3                   	ret    

f010ab6c <sys_free_env>:

void sys_free_env(int32 envId)
{
f010ab6c:	55                   	push   %ebp
f010ab6d:	89 e5                	mov    %esp,%ebp
f010ab6f:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010ab72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab75:	83 ec 0c             	sub    $0xc,%esp
f010ab78:	50                   	push   %eax
f010ab79:	e8 73 f5 ff ff       	call   f010a0f1 <sched_kill_env>
f010ab7e:	83 c4 10             	add    $0x10,%esp
}
f010ab81:	90                   	nop
f010ab82:	c9                   	leave  
f010ab83:	c3                   	ret    

f010ab84 <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010ab84:	55                   	push   %ebp
f010ab85:	89 e5                	mov    %esp,%ebp
f010ab87:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ab8a:	0f 31                	rdtsc  
f010ab8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ab8f:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ab92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab98:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ab9b:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ab9e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aba1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010aba4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010aba7:	89 01                	mov    %eax,(%ecx)
f010aba9:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010abac:	8b 45 08             	mov    0x8(%ebp),%eax
f010abaf:	c9                   	leave  
f010abb0:	c2 04 00             	ret    $0x4

f010abb3 <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010abb3:	55                   	push   %ebp
f010abb4:	89 e5                	mov    %esp,%ebp
f010abb6:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010abb9:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010abbe:	ff 75 10             	pushl  0x10(%ebp)
f010abc1:	ff 75 0c             	pushl  0xc(%ebp)
f010abc4:	ff 75 08             	pushl  0x8(%ebp)
f010abc7:	50                   	push   %eax
f010abc8:	e8 a2 95 ff ff       	call   f010416f <moveMem>
f010abcd:	83 c4 10             	add    $0x10,%esp
	return;
f010abd0:	90                   	nop
}
f010abd1:	c9                   	leave  
f010abd2:	c3                   	ret    

f010abd3 <sys_rcr2>:
uint32 sys_rcr2()
{
f010abd3:	55                   	push   %ebp
f010abd4:	89 e5                	mov    %esp,%ebp
f010abd6:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010abd9:	0f 20 d0             	mov    %cr2,%eax
f010abdc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010abdf:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010abe2:	90                   	nop
}
f010abe3:	c9                   	leave  
f010abe4:	c3                   	ret    

f010abe5 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010abe5:	55                   	push   %ebp
f010abe6:	89 e5                	mov    %esp,%ebp
f010abe8:	83 ec 04             	sub    $0x4,%esp
f010abeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abee:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010abf1:	8a 45 fc             	mov    -0x4(%ebp),%al
f010abf4:	a2 e0 6a 53 f0       	mov    %al,0xf0536ae0
}
f010abf9:	90                   	nop
f010abfa:	c9                   	leave  
f010abfb:	c3                   	ret    

f010abfc <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010abfc:	55                   	push   %ebp
f010abfd:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010abff:	c7 05 48 58 55 f0 00 	movl   $0x0,0xf0555848
f010ac06:	00 00 00 
}
f010ac09:	90                   	nop
f010ac0a:	5d                   	pop    %ebp
f010ac0b:	c3                   	ret    

f010ac0c <inctst>:
void inctst()
{
f010ac0c:	55                   	push   %ebp
f010ac0d:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010ac0f:	a1 48 58 55 f0       	mov    0xf0555848,%eax
f010ac14:	40                   	inc    %eax
f010ac15:	a3 48 58 55 f0       	mov    %eax,0xf0555848
}
f010ac1a:	90                   	nop
f010ac1b:	5d                   	pop    %ebp
f010ac1c:	c3                   	ret    

f010ac1d <gettst>:
uint32 gettst()
{
f010ac1d:	55                   	push   %ebp
f010ac1e:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010ac20:	a1 48 58 55 f0       	mov    0xf0555848,%eax
}
f010ac25:	5d                   	pop    %ebp
f010ac26:	c3                   	ret    

f010ac27 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010ac27:	55                   	push   %ebp
f010ac28:	89 e5                	mov    %esp,%ebp
f010ac2a:	83 ec 28             	sub    $0x28,%esp
f010ac2d:	8b 45 14             	mov    0x14(%ebp),%eax
f010ac30:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010ac33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010ac3a:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010ac3e:	83 f8 65             	cmp    $0x65,%eax
f010ac41:	74 5d                	je     f010aca0 <tst+0x79>
f010ac43:	83 f8 65             	cmp    $0x65,%eax
f010ac46:	7f 0a                	jg     f010ac52 <tst+0x2b>
f010ac48:	83 f8 62             	cmp    $0x62,%eax
f010ac4b:	74 73                	je     f010acc0 <tst+0x99>
f010ac4d:	e9 91 00 00 00       	jmp    f010ace3 <tst+0xbc>
f010ac52:	83 f8 67             	cmp    $0x67,%eax
f010ac55:	74 29                	je     f010ac80 <tst+0x59>
f010ac57:	83 f8 6c             	cmp    $0x6c,%eax
f010ac5a:	0f 85 83 00 00 00    	jne    f010ace3 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010ac60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac63:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ac66:	73 09                	jae    f010ac71 <tst+0x4a>
			chk = 1;
f010ac68:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ac6f:	eb 68                	jmp    f010acd9 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010ac71:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ac75:	74 62                	je     f010acd9 <tst+0xb2>
			chk = 1;
f010ac77:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ac7e:	eb 59                	jmp    f010acd9 <tst+0xb2>
	case 'g':
		if (n > v1)
f010ac80:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac83:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ac86:	76 09                	jbe    f010ac91 <tst+0x6a>
			chk = 1;
f010ac88:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ac8f:	eb 4b                	jmp    f010acdc <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010ac91:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ac95:	74 45                	je     f010acdc <tst+0xb5>
			chk = 1;
f010ac97:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ac9e:	eb 3c                	jmp    f010acdc <tst+0xb5>
	case 'e':
		if (n == v1)
f010aca0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010aca6:	75 09                	jne    f010acb1 <tst+0x8a>
			chk = 1;
f010aca8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010acaf:	eb 2e                	jmp    f010acdf <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010acb1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010acb5:	74 28                	je     f010acdf <tst+0xb8>
			chk = 1;
f010acb7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010acbe:	eb 1f                	jmp    f010acdf <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010acc0:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010acc6:	72 1a                	jb     f010ace2 <tst+0xbb>
f010acc8:	8b 45 08             	mov    0x8(%ebp),%eax
f010accb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010acce:	77 12                	ja     f010ace2 <tst+0xbb>
			chk = 1;
f010acd0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010acd7:	eb 09                	jmp    f010ace2 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010acd9:	90                   	nop
f010acda:	eb 07                	jmp    f010ace3 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010acdc:	90                   	nop
f010acdd:	eb 04                	jmp    f010ace3 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010acdf:	90                   	nop
f010ace0:	eb 01                	jmp    f010ace3 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010ace2:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010ace3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ace7:	75 17                	jne    f010ad00 <tst+0xd9>
f010ace9:	83 ec 04             	sub    $0x4,%esp
f010acec:	68 97 b2 11 f0       	push   $0xf011b297
f010acf1:	68 95 01 00 00       	push   $0x195
f010acf6:	68 66 b2 11 f0       	push   $0xf011b266
f010acfb:	e8 76 54 ff ff       	call   f0100176 <_panic>
	tstcnt++ ;
f010ad00:	a1 48 58 55 f0       	mov    0xf0555848,%eax
f010ad05:	40                   	inc    %eax
f010ad06:	a3 48 58 55 f0       	mov    %eax,0xf0555848
	return;
f010ad0b:	90                   	nop
}
f010ad0c:	c9                   	leave  
f010ad0d:	c3                   	ret    

f010ad0e <chktst>:

void chktst(uint32 n)
{
f010ad0e:	55                   	push   %ebp
f010ad0f:	89 e5                	mov    %esp,%ebp
f010ad11:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010ad14:	a1 48 58 55 f0       	mov    0xf0555848,%eax
f010ad19:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ad1c:	75 12                	jne    f010ad30 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010ad1e:	83 ec 0c             	sub    $0xc,%esp
f010ad21:	68 ac b2 11 f0       	push   $0xf011b2ac
f010ad26:	e8 a4 c0 ff ff       	call   f0106dcf <cprintf>
f010ad2b:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010ad2e:	eb 17                	jmp    f010ad47 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010ad30:	83 ec 04             	sub    $0x4,%esp
f010ad33:	68 d8 b2 11 f0       	push   $0xf011b2d8
f010ad38:	68 9f 01 00 00       	push   $0x19f
f010ad3d:	68 66 b2 11 f0       	push   $0xf011b266
f010ad42:	e8 2f 54 ff ff       	call   f0100176 <_panic>
}
f010ad47:	c9                   	leave  
f010ad48:	c3                   	ret    

f010ad49 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010ad49:	55                   	push   %ebp
f010ad4a:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010ad4c:	a1 94 73 53 f0       	mov    0xf0537394,%eax
}
f010ad51:	5d                   	pop    %ebp
f010ad52:	c3                   	ret    

f010ad53 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010ad53:	55                   	push   %ebp
f010ad54:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010ad56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad59:	a3 94 73 53 f0       	mov    %eax,0xf0537394
}
f010ad5e:	90                   	nop
f010ad5f:	5d                   	pop    %ebp
f010ad60:	c3                   	ret    

f010ad61 <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ad61:	55                   	push   %ebp
f010ad62:	89 e5                	mov    %esp,%ebp
f010ad64:	56                   	push   %esi
f010ad65:	53                   	push   %ebx
f010ad66:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010ad69:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010ad6d:	0f 87 ec 02 00 00    	ja     f010b05f <syscall+0x2fe>
f010ad73:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad76:	c1 e0 02             	shl    $0x2,%eax
f010ad79:	05 f4 b2 11 f0       	add    $0xf011b2f4,%eax
f010ad7e:	8b 00                	mov    (%eax),%eax
f010ad80:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ad82:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad85:	0f b6 d0             	movzbl %al,%edx
f010ad88:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad8b:	83 ec 04             	sub    $0x4,%esp
f010ad8e:	52                   	push   %edx
f010ad8f:	ff 75 10             	pushl  0x10(%ebp)
f010ad92:	50                   	push   %eax
f010ad93:	e8 4c f9 ff ff       	call   f010a6e4 <sys_cputs>
f010ad98:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ad9b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ada0:	e9 bf 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010ada5:	e8 af f9 ff ff       	call   f010a759 <sys_cgetc>
f010adaa:	e9 b5 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010adaf:	e8 c5 f9 ff ff       	call   f010a779 <sys_getenvindex>
f010adb4:	e9 ab 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010adb9:	e8 ae f9 ff ff       	call   f010a76c <sys_getenvid>
f010adbe:	e9 a1 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010adc3:	e8 ff f9 ff ff       	call   f010a7c7 <sys_getparentenvid>
f010adc8:	e9 97 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010adcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add0:	83 ec 0c             	sub    $0xc,%esp
f010add3:	50                   	push   %eax
f010add4:	e8 fb f9 ff ff       	call   f010a7d4 <sys_env_destroy>
f010add9:	83 c4 10             	add    $0x10,%esp
f010addc:	e9 83 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010ade1:	e8 76 fa ff ff       	call   f010a85c <sys_env_exit>
		return 0;
f010ade6:	b8 00 00 00 00       	mov    $0x0,%eax
f010adeb:	e9 74 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010adf0:	83 ec 08             	sub    $0x8,%esp
f010adf3:	ff 75 10             	pushl  0x10(%ebp)
f010adf6:	ff 75 0c             	pushl  0xc(%ebp)
f010adf9:	e8 be fb ff ff       	call   f010a9bc <sys_calculate_required_frames>
f010adfe:	83 c4 10             	add    $0x10,%esp
f010ae01:	e9 5e 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010ae06:	e8 d3 fb ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ae0b:	e9 54 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ae10:	e8 e8 fb ff ff       	call   f010a9fd <sys_calculate_modified_frames>
f010ae15:	e9 4a 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010ae1a:	e8 f8 fb ff ff       	call   f010aa17 <sys_calculate_notmod_frames>
f010ae1f:	e9 40 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010ae24:	e8 08 fc ff ff       	call   f010aa31 <sys_pf_calculate_allocated_pages>
f010ae29:	e9 36 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010ae2e:	83 ec 08             	sub    $0x8,%esp
f010ae31:	ff 75 10             	pushl  0x10(%ebp)
f010ae34:	ff 75 0c             	pushl  0xc(%ebp)
f010ae37:	e8 0e fc ff ff       	call   f010aa4a <sys_freeMem>
f010ae3c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ae3f:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae44:	e9 1b 02 00 00       	jmp    f010b064 <syscall+0x303>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010ae49:	8b 55 10             	mov    0x10(%ebp),%edx
f010ae4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae4f:	83 ec 08             	sub    $0x8,%esp
f010ae52:	52                   	push   %edx
f010ae53:	50                   	push   %eax
f010ae54:	e8 11 fa ff ff       	call   f010a86a <__sys_allocate_page>
f010ae59:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ae5c:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae61:	e9 fe 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010ae66:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010ae69:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010ae6c:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ae6f:	8b 55 10             	mov    0x10(%ebp),%edx
f010ae72:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae75:	83 ec 0c             	sub    $0xc,%esp
f010ae78:	56                   	push   %esi
f010ae79:	53                   	push   %ebx
f010ae7a:	51                   	push   %ecx
f010ae7b:	52                   	push   %edx
f010ae7c:	50                   	push   %eax
f010ae7d:	e8 00 fb ff ff       	call   f010a982 <__sys_map_frame>
f010ae82:	83 c4 20             	add    $0x20,%esp
		return 0;
f010ae85:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae8a:	e9 d5 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010ae8f:	8b 55 10             	mov    0x10(%ebp),%edx
f010ae92:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae95:	83 ec 08             	sub    $0x8,%esp
f010ae98:	52                   	push   %edx
f010ae99:	50                   	push   %eax
f010ae9a:	e8 00 fb ff ff       	call   f010a99f <__sys_unmap_frame>
f010ae9f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aea2:	b8 00 00 00 00       	mov    $0x0,%eax
f010aea7:	e9 b8 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010aeac:	83 ec 08             	sub    $0x8,%esp
f010aeaf:	ff 75 10             	pushl  0x10(%ebp)
f010aeb2:	ff 75 0c             	pushl  0xc(%ebp)
f010aeb5:	e8 d2 fb ff ff       	call   f010aa8c <sys_allocateMem>
f010aeba:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aebd:	b8 00 00 00 00       	mov    $0x0,%eax
f010aec2:	e9 9d 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010aec7:	e8 e0 fb ff ff       	call   f010aaac <sys_disable_interrupt>
		return 0;
f010aecc:	b8 00 00 00 00       	mov    $0x0,%eax
f010aed1:	e9 8e 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010aed6:	e8 eb fb ff ff       	call   f010aac6 <sys_enable_interrupt>
		return 0;
f010aedb:	b8 00 00 00 00       	mov    $0x0,%eax
f010aee0:	e9 7f 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010aee5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aee8:	0f be c0             	movsbl %al,%eax
f010aeeb:	83 ec 0c             	sub    $0xc,%esp
f010aeee:	50                   	push   %eax
f010aeef:	e8 41 f8 ff ff       	call   f010a735 <sys_cputc>
f010aef4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aef7:	b8 00 00 00 00       	mov    $0x0,%eax
f010aefc:	e9 63 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010af01:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af04:	0f be c0             	movsbl %al,%eax
f010af07:	83 ec 0c             	sub    $0xc,%esp
f010af0a:	50                   	push   %eax
f010af0b:	e8 d0 fb ff ff       	call   f010aae0 <sys_clearFFL>
f010af10:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af13:	b8 00 00 00 00       	mov    $0x0,%eax
f010af18:	e9 47 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;


	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3);
f010af1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af20:	83 ec 04             	sub    $0x4,%esp
f010af23:	ff 75 14             	pushl  0x14(%ebp)
f010af26:	ff 75 10             	pushl  0x10(%ebp)
f010af29:	50                   	push   %eax
f010af2a:	e8 e5 fb ff ff       	call   f010ab14 <sys_create_env>
f010af2f:	83 c4 10             	add    $0x10,%esp
f010af32:	e9 2d 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010af37:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af3a:	83 ec 0c             	sub    $0xc,%esp
f010af3d:	50                   	push   %eax
f010af3e:	e8 29 fc ff ff       	call   f010ab6c <sys_free_env>
f010af43:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af46:	b8 00 00 00 00       	mov    $0x0,%eax
f010af4b:	e9 14 01 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010af50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af53:	83 ec 0c             	sub    $0xc,%esp
f010af56:	50                   	push   %eax
f010af57:	e8 f8 fb ff ff       	call   f010ab54 <sys_run_env>
f010af5c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af5f:	b8 00 00 00 00       	mov    $0x0,%eax
f010af64:	e9 fb 00 00 00       	jmp    f010b064 <syscall+0x303>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010af69:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010af6c:	83 ec 0c             	sub    $0xc,%esp
f010af6f:	50                   	push   %eax
f010af70:	e8 0f fc ff ff       	call   f010ab84 <sys_get_virtual_time>
f010af75:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010af78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010af7e:	8b 45 10             	mov    0x10(%ebp),%eax
f010af81:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010af84:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010af87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af8a:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010af8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010af8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af92:	89 10                	mov    %edx,(%eax)
		return 0;
f010af94:	b8 00 00 00 00       	mov    $0x0,%eax
f010af99:	e9 c6 00 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010af9e:	83 ec 04             	sub    $0x4,%esp
f010afa1:	ff 75 14             	pushl  0x14(%ebp)
f010afa4:	ff 75 10             	pushl  0x10(%ebp)
f010afa7:	ff 75 0c             	pushl  0xc(%ebp)
f010afaa:	e8 04 fc ff ff       	call   f010abb3 <sys_moveMem>
f010afaf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afb2:	b8 00 00 00 00       	mov    $0x0,%eax
f010afb7:	e9 a8 00 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010afbc:	e8 12 fc ff ff       	call   f010abd3 <sys_rcr2>
f010afc1:	e9 9e 00 00 00       	jmp    f010b064 <syscall+0x303>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010afc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc9:	0f b6 c0             	movzbl %al,%eax
f010afcc:	83 ec 0c             	sub    $0xc,%esp
f010afcf:	50                   	push   %eax
f010afd0:	e8 10 fc ff ff       	call   f010abe5 <sys_bypassPageFault>
f010afd5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afd8:	b8 00 00 00 00       	mov    $0x0,%eax
f010afdd:	e9 82 00 00 00       	jmp    f010b064 <syscall+0x303>

	case SYS_rsttst:
		rsttst();
f010afe2:	e8 15 fc ff ff       	call   f010abfc <rsttst>
		return 0;
f010afe7:	b8 00 00 00 00       	mov    $0x0,%eax
f010afec:	eb 76                	jmp    f010b064 <syscall+0x303>
	case SYS_inctst:
		inctst();
f010afee:	e8 19 fc ff ff       	call   f010ac0c <inctst>
		return 0;
f010aff3:	b8 00 00 00 00       	mov    $0x0,%eax
f010aff8:	eb 6a                	jmp    f010b064 <syscall+0x303>
	case SYS_chktst:
		chktst(a1);
f010affa:	83 ec 0c             	sub    $0xc,%esp
f010affd:	ff 75 0c             	pushl  0xc(%ebp)
f010b000:	e8 09 fd ff ff       	call   f010ad0e <chktst>
f010b005:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b008:	b8 00 00 00 00       	mov    $0x0,%eax
f010b00d:	eb 55                	jmp    f010b064 <syscall+0x303>
	case SYS_gettst:
		return gettst();
f010b00f:	e8 09 fc ff ff       	call   f010ac1d <gettst>
f010b014:	eb 4e                	jmp    f010b064 <syscall+0x303>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010b016:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010b019:	8b 45 18             	mov    0x18(%ebp),%eax
f010b01c:	0f be c0             	movsbl %al,%eax
f010b01f:	83 ec 0c             	sub    $0xc,%esp
f010b022:	52                   	push   %edx
f010b023:	50                   	push   %eax
f010b024:	ff 75 14             	pushl  0x14(%ebp)
f010b027:	ff 75 10             	pushl  0x10(%ebp)
f010b02a:	ff 75 0c             	pushl  0xc(%ebp)
f010b02d:	e8 f5 fb ff ff       	call   f010ac27 <tst>
f010b032:	83 c4 20             	add    $0x20,%esp
		return 0;
f010b035:	b8 00 00 00 00       	mov    $0x0,%eax
f010b03a:	eb 28                	jmp    f010b064 <syscall+0x303>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010b03c:	e8 08 fd ff ff       	call   f010ad49 <sys_get_heap_strategy>
f010b041:	eb 21                	jmp    f010b064 <syscall+0x303>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010b043:	83 ec 0c             	sub    $0xc,%esp
f010b046:	ff 75 0c             	pushl  0xc(%ebp)
f010b049:	e8 05 fd ff ff       	call   f010ad53 <sys_set_uheap_strategy>
f010b04e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b051:	b8 00 00 00 00       	mov    $0x0,%eax
f010b056:	eb 0c                	jmp    f010b064 <syscall+0x303>

	case NSYSCALLS:
		return 	-E_INVAL;
f010b058:	b8 03 00 00 00       	mov    $0x3,%eax
f010b05d:	eb 05                	jmp    f010b064 <syscall+0x303>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010b05f:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010b064:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010b067:	5b                   	pop    %ebx
f010b068:	5e                   	pop    %esi
f010b069:	5d                   	pop    %ebp
f010b06a:	c3                   	ret    

f010b06b <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010b06b:	55                   	push   %ebp
f010b06c:	89 e5                	mov    %esp,%ebp
f010b06e:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010b071:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b074:	8b 00                	mov    (%eax),%eax
f010b076:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b079:	8b 45 10             	mov    0x10(%ebp),%eax
f010b07c:	8b 00                	mov    (%eax),%eax
f010b07e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b081:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010b088:	e9 ca 00 00 00       	jmp    f010b157 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010b08d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b090:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b093:	01 d0                	add    %edx,%eax
f010b095:	89 c2                	mov    %eax,%edx
f010b097:	c1 ea 1f             	shr    $0x1f,%edx
f010b09a:	01 d0                	add    %edx,%eax
f010b09c:	d1 f8                	sar    %eax
f010b09e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b0a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b0a7:	eb 03                	jmp    f010b0ac <stab_binsearch+0x41>
			m--;
f010b0a9:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b0ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b0af:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b0b2:	7c 1e                	jl     f010b0d2 <stab_binsearch+0x67>
f010b0b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b0b7:	89 d0                	mov    %edx,%eax
f010b0b9:	01 c0                	add    %eax,%eax
f010b0bb:	01 d0                	add    %edx,%eax
f010b0bd:	c1 e0 02             	shl    $0x2,%eax
f010b0c0:	89 c2                	mov    %eax,%edx
f010b0c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0c5:	01 d0                	add    %edx,%eax
f010b0c7:	8a 40 04             	mov    0x4(%eax),%al
f010b0ca:	0f b6 c0             	movzbl %al,%eax
f010b0cd:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b0d0:	75 d7                	jne    f010b0a9 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010b0d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b0d5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b0d8:	7d 09                	jge    f010b0e3 <stab_binsearch+0x78>
			l = true_m + 1;
f010b0da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0dd:	40                   	inc    %eax
f010b0de:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010b0e1:	eb 74                	jmp    f010b157 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010b0e3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010b0ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b0ed:	89 d0                	mov    %edx,%eax
f010b0ef:	01 c0                	add    %eax,%eax
f010b0f1:	01 d0                	add    %edx,%eax
f010b0f3:	c1 e0 02             	shl    $0x2,%eax
f010b0f6:	89 c2                	mov    %eax,%edx
f010b0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0fb:	01 d0                	add    %edx,%eax
f010b0fd:	8b 40 08             	mov    0x8(%eax),%eax
f010b100:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b103:	73 11                	jae    f010b116 <stab_binsearch+0xab>
			*region_left = m;
f010b105:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b108:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b10b:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010b10d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b110:	40                   	inc    %eax
f010b111:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b114:	eb 41                	jmp    f010b157 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010b116:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b119:	89 d0                	mov    %edx,%eax
f010b11b:	01 c0                	add    %eax,%eax
f010b11d:	01 d0                	add    %edx,%eax
f010b11f:	c1 e0 02             	shl    $0x2,%eax
f010b122:	89 c2                	mov    %eax,%edx
f010b124:	8b 45 08             	mov    0x8(%ebp),%eax
f010b127:	01 d0                	add    %edx,%eax
f010b129:	8b 40 08             	mov    0x8(%eax),%eax
f010b12c:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b12f:	76 14                	jbe    f010b145 <stab_binsearch+0xda>
			*region_right = m - 1;
f010b131:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b134:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b137:	8b 45 10             	mov    0x10(%ebp),%eax
f010b13a:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010b13c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b13f:	48                   	dec    %eax
f010b140:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b143:	eb 12                	jmp    f010b157 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010b145:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b148:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b14b:	89 10                	mov    %edx,(%eax)
			l = m;
f010b14d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b150:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010b153:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010b157:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b15a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010b15d:	0f 8e 2a ff ff ff    	jle    f010b08d <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010b163:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b167:	75 0f                	jne    f010b178 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010b169:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b16c:	8b 00                	mov    (%eax),%eax
f010b16e:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b171:	8b 45 10             	mov    0x10(%ebp),%eax
f010b174:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010b176:	eb 3d                	jmp    f010b1b5 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b178:	8b 45 10             	mov    0x10(%ebp),%eax
f010b17b:	8b 00                	mov    (%eax),%eax
f010b17d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b180:	eb 03                	jmp    f010b185 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010b182:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010b185:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b188:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b18a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b18d:	7d 1e                	jge    f010b1ad <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010b18f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b192:	89 d0                	mov    %edx,%eax
f010b194:	01 c0                	add    %eax,%eax
f010b196:	01 d0                	add    %edx,%eax
f010b198:	c1 e0 02             	shl    $0x2,%eax
f010b19b:	89 c2                	mov    %eax,%edx
f010b19d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1a0:	01 d0                	add    %edx,%eax
f010b1a2:	8a 40 04             	mov    0x4(%eax),%al
f010b1a5:	0f b6 c0             	movzbl %al,%eax
f010b1a8:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b1ab:	75 d5                	jne    f010b182 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010b1ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b1b3:	89 10                	mov    %edx,(%eax)
	}
}
f010b1b5:	90                   	nop
f010b1b6:	c9                   	leave  
f010b1b7:	c3                   	ret    

f010b1b8 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010b1b8:	55                   	push   %ebp
f010b1b9:	89 e5                	mov    %esp,%ebp
f010b1bb:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010b1be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1c1:	c7 00 b0 b3 11 f0    	movl   $0xf011b3b0,(%eax)
	info->eip_line = 0;
f010b1c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010b1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1d4:	c7 40 08 b0 b3 11 f0 	movl   $0xf011b3b0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010b1db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1de:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010b1e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1e8:	8b 55 08             	mov    0x8(%ebp),%edx
f010b1eb:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010b1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1f1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010b1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1fb:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010b200:	76 1e                	jbe    f010b220 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010b202:	c7 45 f4 b0 cb 11 f0 	movl   $0xf011cbb0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010b209:	c7 45 f0 e0 d8 13 f0 	movl   $0xf013d8e0,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010b210:	c7 45 ec e1 d8 13 f0 	movl   $0xf013d8e1,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010b217:	c7 45 e8 2b 5b 14 f0 	movl   $0xf0145b2b,-0x18(%ebp)
f010b21e:	eb 2a                	jmp    f010b24a <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010b220:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010b227:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b22a:	8b 00                	mov    (%eax),%eax
f010b22c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010b22f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b232:	8b 40 04             	mov    0x4(%eax),%eax
f010b235:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010b238:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b23b:	8b 40 08             	mov    0x8(%eax),%eax
f010b23e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010b241:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b244:	8b 40 0c             	mov    0xc(%eax),%eax
f010b247:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010b24a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b24d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010b250:	76 0a                	jbe    f010b25c <debuginfo_eip+0xa4>
f010b252:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b255:	48                   	dec    %eax
f010b256:	8a 00                	mov    (%eax),%al
f010b258:	84 c0                	test   %al,%al
f010b25a:	74 0a                	je     f010b266 <debuginfo_eip+0xae>
		return -1;
f010b25c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b261:	e9 01 02 00 00       	jmp    f010b467 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010b266:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010b26d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b270:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b273:	29 c2                	sub    %eax,%edx
f010b275:	89 d0                	mov    %edx,%eax
f010b277:	c1 f8 02             	sar    $0x2,%eax
f010b27a:	89 c2                	mov    %eax,%edx
f010b27c:	89 d0                	mov    %edx,%eax
f010b27e:	c1 e0 02             	shl    $0x2,%eax
f010b281:	01 d0                	add    %edx,%eax
f010b283:	c1 e0 02             	shl    $0x2,%eax
f010b286:	01 d0                	add    %edx,%eax
f010b288:	c1 e0 02             	shl    $0x2,%eax
f010b28b:	01 d0                	add    %edx,%eax
f010b28d:	89 c1                	mov    %eax,%ecx
f010b28f:	c1 e1 08             	shl    $0x8,%ecx
f010b292:	01 c8                	add    %ecx,%eax
f010b294:	89 c1                	mov    %eax,%ecx
f010b296:	c1 e1 10             	shl    $0x10,%ecx
f010b299:	01 c8                	add    %ecx,%eax
f010b29b:	01 c0                	add    %eax,%eax
f010b29d:	01 d0                	add    %edx,%eax
f010b29f:	48                   	dec    %eax
f010b2a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010b2a3:	ff 75 08             	pushl  0x8(%ebp)
f010b2a6:	6a 64                	push   $0x64
f010b2a8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010b2ab:	50                   	push   %eax
f010b2ac:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010b2af:	50                   	push   %eax
f010b2b0:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2b3:	e8 b3 fd ff ff       	call   f010b06b <stab_binsearch>
f010b2b8:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010b2bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2be:	85 c0                	test   %eax,%eax
f010b2c0:	75 0a                	jne    f010b2cc <debuginfo_eip+0x114>
		return -1;
f010b2c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b2c7:	e9 9b 01 00 00       	jmp    f010b467 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010b2cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010b2d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b2d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010b2d8:	ff 75 08             	pushl  0x8(%ebp)
f010b2db:	6a 24                	push   $0x24
f010b2dd:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010b2e0:	50                   	push   %eax
f010b2e1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010b2e4:	50                   	push   %eax
f010b2e5:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2e8:	e8 7e fd ff ff       	call   f010b06b <stab_binsearch>
f010b2ed:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010b2f0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010b2f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b2f6:	39 c2                	cmp    %eax,%edx
f010b2f8:	0f 8f 86 00 00 00    	jg     f010b384 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010b2fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b301:	89 c2                	mov    %eax,%edx
f010b303:	89 d0                	mov    %edx,%eax
f010b305:	01 c0                	add    %eax,%eax
f010b307:	01 d0                	add    %edx,%eax
f010b309:	c1 e0 02             	shl    $0x2,%eax
f010b30c:	89 c2                	mov    %eax,%edx
f010b30e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b311:	01 d0                	add    %edx,%eax
f010b313:	8b 00                	mov    (%eax),%eax
f010b315:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b318:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b31b:	29 d1                	sub    %edx,%ecx
f010b31d:	89 ca                	mov    %ecx,%edx
f010b31f:	39 d0                	cmp    %edx,%eax
f010b321:	73 22                	jae    f010b345 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010b323:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b326:	89 c2                	mov    %eax,%edx
f010b328:	89 d0                	mov    %edx,%eax
f010b32a:	01 c0                	add    %eax,%eax
f010b32c:	01 d0                	add    %edx,%eax
f010b32e:	c1 e0 02             	shl    $0x2,%eax
f010b331:	89 c2                	mov    %eax,%edx
f010b333:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b336:	01 d0                	add    %edx,%eax
f010b338:	8b 10                	mov    (%eax),%edx
f010b33a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b33d:	01 c2                	add    %eax,%edx
f010b33f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b342:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010b345:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b348:	89 c2                	mov    %eax,%edx
f010b34a:	89 d0                	mov    %edx,%eax
f010b34c:	01 c0                	add    %eax,%eax
f010b34e:	01 d0                	add    %edx,%eax
f010b350:	c1 e0 02             	shl    $0x2,%eax
f010b353:	89 c2                	mov    %eax,%edx
f010b355:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b358:	01 d0                	add    %edx,%eax
f010b35a:	8b 50 08             	mov    0x8(%eax),%edx
f010b35d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b360:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010b363:	8b 55 08             	mov    0x8(%ebp),%edx
f010b366:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b369:	8b 40 10             	mov    0x10(%eax),%eax
f010b36c:	29 c2                	sub    %eax,%edx
f010b36e:	89 d0                	mov    %edx,%eax
f010b370:	c1 f8 02             	sar    $0x2,%eax
f010b373:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010b376:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b379:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010b37c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b37f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010b382:	eb 15                	jmp    f010b399 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010b384:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b387:	8b 55 08             	mov    0x8(%ebp),%edx
f010b38a:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010b38d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b390:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010b393:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b396:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010b399:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b39c:	8b 40 08             	mov    0x8(%eax),%eax
f010b39f:	83 ec 08             	sub    $0x8,%esp
f010b3a2:	6a 3a                	push   $0x3a
f010b3a4:	50                   	push   %eax
f010b3a5:	e8 d2 c5 00 00       	call   f011797c <strfind>
f010b3aa:	83 c4 10             	add    $0x10,%esp
f010b3ad:	89 c2                	mov    %eax,%edx
f010b3af:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b2:	8b 40 08             	mov    0x8(%eax),%eax
f010b3b5:	29 c2                	sub    %eax,%edx
f010b3b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3ba:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b3bd:	eb 03                	jmp    f010b3c2 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010b3bf:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b3c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b3c5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b3c8:	7c 4e                	jl     f010b418 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010b3ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b3cd:	89 d0                	mov    %edx,%eax
f010b3cf:	01 c0                	add    %eax,%eax
f010b3d1:	01 d0                	add    %edx,%eax
f010b3d3:	c1 e0 02             	shl    $0x2,%eax
f010b3d6:	89 c2                	mov    %eax,%edx
f010b3d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3db:	01 d0                	add    %edx,%eax
f010b3dd:	8a 40 04             	mov    0x4(%eax),%al
f010b3e0:	3c 84                	cmp    $0x84,%al
f010b3e2:	74 34                	je     f010b418 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010b3e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b3e7:	89 d0                	mov    %edx,%eax
f010b3e9:	01 c0                	add    %eax,%eax
f010b3eb:	01 d0                	add    %edx,%eax
f010b3ed:	c1 e0 02             	shl    $0x2,%eax
f010b3f0:	89 c2                	mov    %eax,%edx
f010b3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3f5:	01 d0                	add    %edx,%eax
f010b3f7:	8a 40 04             	mov    0x4(%eax),%al
f010b3fa:	3c 64                	cmp    $0x64,%al
f010b3fc:	75 c1                	jne    f010b3bf <debuginfo_eip+0x207>
f010b3fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b401:	89 d0                	mov    %edx,%eax
f010b403:	01 c0                	add    %eax,%eax
f010b405:	01 d0                	add    %edx,%eax
f010b407:	c1 e0 02             	shl    $0x2,%eax
f010b40a:	89 c2                	mov    %eax,%edx
f010b40c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b40f:	01 d0                	add    %edx,%eax
f010b411:	8b 40 08             	mov    0x8(%eax),%eax
f010b414:	85 c0                	test   %eax,%eax
f010b416:	74 a7                	je     f010b3bf <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010b418:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b41b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b41e:	7c 42                	jl     f010b462 <debuginfo_eip+0x2aa>
f010b420:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b423:	89 d0                	mov    %edx,%eax
f010b425:	01 c0                	add    %eax,%eax
f010b427:	01 d0                	add    %edx,%eax
f010b429:	c1 e0 02             	shl    $0x2,%eax
f010b42c:	89 c2                	mov    %eax,%edx
f010b42e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b431:	01 d0                	add    %edx,%eax
f010b433:	8b 00                	mov    (%eax),%eax
f010b435:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b438:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b43b:	29 d1                	sub    %edx,%ecx
f010b43d:	89 ca                	mov    %ecx,%edx
f010b43f:	39 d0                	cmp    %edx,%eax
f010b441:	73 1f                	jae    f010b462 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010b443:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b446:	89 d0                	mov    %edx,%eax
f010b448:	01 c0                	add    %eax,%eax
f010b44a:	01 d0                	add    %edx,%eax
f010b44c:	c1 e0 02             	shl    $0x2,%eax
f010b44f:	89 c2                	mov    %eax,%edx
f010b451:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b454:	01 d0                	add    %edx,%eax
f010b456:	8b 10                	mov    (%eax),%edx
f010b458:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b45b:	01 c2                	add    %eax,%edx
f010b45d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b460:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010b462:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b467:	c9                   	leave  
f010b468:	c3                   	ret    

f010b469 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010b469:	55                   	push   %ebp
f010b46a:	89 e5                	mov    %esp,%ebp
f010b46c:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010b46f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b472:	05 00 14 00 00       	add    $0x1400,%eax
f010b477:	c1 e0 03             	shl    $0x3,%eax
f010b47a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010b47d:	83 ec 04             	sub    $0x4,%esp
f010b480:	6a 08                	push   $0x8
f010b482:	ff 75 0c             	pushl  0xc(%ebp)
f010b485:	ff 75 f4             	pushl  -0xc(%ebp)
f010b488:	e8 80 ca 00 00       	call   f0117f0d <ide_read>
f010b48d:	83 c4 10             	add    $0x10,%esp
f010b490:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010b493:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b496:	c9                   	leave  
f010b497:	c3                   	ret    

f010b498 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010b498:	55                   	push   %ebp
f010b499:	89 e5                	mov    %esp,%ebp
f010b49b:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010b49e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4a1:	05 00 14 00 00       	add    $0x1400,%eax
f010b4a6:	c1 e0 03             	shl    $0x3,%eax
f010b4a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010b4ac:	83 ec 04             	sub    $0x4,%esp
f010b4af:	6a 08                	push   $0x8
f010b4b1:	ff 75 0c             	pushl  0xc(%ebp)
f010b4b4:	ff 75 f4             	pushl  -0xc(%ebp)
f010b4b7:	e8 91 cb 00 00       	call   f011804d <ide_write>
f010b4bc:	83 c4 10             	add    $0x10,%esp
f010b4bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010b4c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b4c6:	74 14                	je     f010b4dc <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010b4c8:	83 ec 04             	sub    $0x4,%esp
f010b4cb:	68 bc b3 11 f0       	push   $0xf011b3bc
f010b4d0:	6a 37                	push   $0x37
f010b4d2:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010b4d7:	e8 9a 4c ff ff       	call   f0100176 <_panic>
	return success;
f010b4dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b4df:	c9                   	leave  
f010b4e0:	c3                   	ret    

f010b4e1 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010b4e1:	55                   	push   %ebp
f010b4e2:	89 e5                	mov    %esp,%ebp
f010b4e4:	53                   	push   %ebx
f010b4e5:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010b4e8:	c7 05 50 58 55 f0 00 	movl   $0x0,0xf0555850
f010b4ef:	00 00 00 
f010b4f2:	c7 05 54 58 55 f0 00 	movl   $0x0,0xf0555854
f010b4f9:	00 00 00 
f010b4fc:	c7 05 5c 58 55 f0 00 	movl   $0x0,0xf055585c
f010b503:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010b506:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010b50d:	e9 bc 00 00 00       	jmp    f010b5ce <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010b512:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b518:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b51b:	89 d0                	mov    %edx,%eax
f010b51d:	01 c0                	add    %eax,%eax
f010b51f:	01 d0                	add    %edx,%eax
f010b521:	c1 e0 03             	shl    $0x3,%eax
f010b524:	01 c8                	add    %ecx,%eax
f010b526:	83 ec 0c             	sub    $0xc,%esp
f010b529:	50                   	push   %eax
f010b52a:	e8 4c 84 ff ff       	call   f010397b <initialize_frame_info>
f010b52f:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010b532:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b538:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b53b:	89 d0                	mov    %edx,%eax
f010b53d:	01 c0                	add    %eax,%eax
f010b53f:	01 d0                	add    %edx,%eax
f010b541:	c1 e0 03             	shl    $0x3,%eax
f010b544:	01 c8                	add    %ecx,%eax
f010b546:	8b 15 50 58 55 f0    	mov    0xf0555850,%edx
f010b54c:	89 10                	mov    %edx,(%eax)
f010b54e:	8b 00                	mov    (%eax),%eax
f010b550:	85 c0                	test   %eax,%eax
f010b552:	74 1f                	je     f010b573 <initialize_disk_page_file+0x92>
f010b554:	8b 15 50 58 55 f0    	mov    0xf0555850,%edx
f010b55a:	8b 1d 10 58 55 f0    	mov    0xf0555810,%ebx
f010b560:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b563:	89 c8                	mov    %ecx,%eax
f010b565:	01 c0                	add    %eax,%eax
f010b567:	01 c8                	add    %ecx,%eax
f010b569:	c1 e0 03             	shl    $0x3,%eax
f010b56c:	01 d8                	add    %ebx,%eax
f010b56e:	89 42 04             	mov    %eax,0x4(%edx)
f010b571:	eb 19                	jmp    f010b58c <initialize_disk_page_file+0xab>
f010b573:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b579:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b57c:	89 d0                	mov    %edx,%eax
f010b57e:	01 c0                	add    %eax,%eax
f010b580:	01 d0                	add    %edx,%eax
f010b582:	c1 e0 03             	shl    $0x3,%eax
f010b585:	01 c8                	add    %ecx,%eax
f010b587:	a3 54 58 55 f0       	mov    %eax,0xf0555854
f010b58c:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b592:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b595:	89 d0                	mov    %edx,%eax
f010b597:	01 c0                	add    %eax,%eax
f010b599:	01 d0                	add    %edx,%eax
f010b59b:	c1 e0 03             	shl    $0x3,%eax
f010b59e:	01 c8                	add    %ecx,%eax
f010b5a0:	a3 50 58 55 f0       	mov    %eax,0xf0555850
f010b5a5:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b5ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b5ae:	89 d0                	mov    %edx,%eax
f010b5b0:	01 c0                	add    %eax,%eax
f010b5b2:	01 d0                	add    %edx,%eax
f010b5b4:	c1 e0 03             	shl    $0x3,%eax
f010b5b7:	01 c8                	add    %ecx,%eax
f010b5b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b5c0:	a1 5c 58 55 f0       	mov    0xf055585c,%eax
f010b5c5:	40                   	inc    %eax
f010b5c6:	a3 5c 58 55 f0       	mov    %eax,0xf055585c
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010b5cb:	ff 45 f4             	incl   -0xc(%ebp)
f010b5ce:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010b5d5:	0f 8e 37 ff ff ff    	jle    f010b512 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010b5db:	90                   	nop
f010b5dc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b5df:	c9                   	leave  
f010b5e0:	c3                   	ret    

f010b5e1 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010b5e1:	55                   	push   %ebp
f010b5e2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010b5e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5e7:	8b 15 10 58 55 f0    	mov    0xf0555810,%edx
f010b5ed:	29 d0                	sub    %edx,%eax
f010b5ef:	c1 f8 03             	sar    $0x3,%eax
f010b5f2:	89 c2                	mov    %eax,%edx
f010b5f4:	89 d0                	mov    %edx,%eax
f010b5f6:	c1 e0 02             	shl    $0x2,%eax
f010b5f9:	01 d0                	add    %edx,%eax
f010b5fb:	c1 e0 02             	shl    $0x2,%eax
f010b5fe:	01 d0                	add    %edx,%eax
f010b600:	c1 e0 02             	shl    $0x2,%eax
f010b603:	01 d0                	add    %edx,%eax
f010b605:	89 c1                	mov    %eax,%ecx
f010b607:	c1 e1 08             	shl    $0x8,%ecx
f010b60a:	01 c8                	add    %ecx,%eax
f010b60c:	89 c1                	mov    %eax,%ecx
f010b60e:	c1 e1 10             	shl    $0x10,%ecx
f010b611:	01 c8                	add    %ecx,%eax
f010b613:	01 c0                	add    %eax,%eax
f010b615:	01 d0                	add    %edx,%eax
}
f010b617:	5d                   	pop    %ebp
f010b618:	c3                   	ret    

f010b619 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010b619:	55                   	push   %ebp
f010b61a:	89 e5                	mov    %esp,%ebp
f010b61c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010b61f:	a1 50 58 55 f0       	mov    0xf0555850,%eax
f010b624:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010b627:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b62b:	75 0a                	jne    f010b637 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010b62d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b632:	e9 8d 00 00 00       	jmp    f010b6c4 <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010b637:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b63a:	8b 00                	mov    (%eax),%eax
f010b63c:	85 c0                	test   %eax,%eax
f010b63e:	74 10                	je     f010b650 <allocate_disk_frame+0x37>
f010b640:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b643:	8b 00                	mov    (%eax),%eax
f010b645:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b648:	8b 52 04             	mov    0x4(%edx),%edx
f010b64b:	89 50 04             	mov    %edx,0x4(%eax)
f010b64e:	eb 0b                	jmp    f010b65b <allocate_disk_frame+0x42>
f010b650:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b653:	8b 40 04             	mov    0x4(%eax),%eax
f010b656:	a3 54 58 55 f0       	mov    %eax,0xf0555854
f010b65b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b65e:	8b 40 04             	mov    0x4(%eax),%eax
f010b661:	85 c0                	test   %eax,%eax
f010b663:	74 0f                	je     f010b674 <allocate_disk_frame+0x5b>
f010b665:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b668:	8b 40 04             	mov    0x4(%eax),%eax
f010b66b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b66e:	8b 12                	mov    (%edx),%edx
f010b670:	89 10                	mov    %edx,(%eax)
f010b672:	eb 0a                	jmp    f010b67e <allocate_disk_frame+0x65>
f010b674:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b677:	8b 00                	mov    (%eax),%eax
f010b679:	a3 50 58 55 f0       	mov    %eax,0xf0555850
f010b67e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b681:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b687:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b68a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b691:	a1 5c 58 55 f0       	mov    0xf055585c,%eax
f010b696:	48                   	dec    %eax
f010b697:	a3 5c 58 55 f0       	mov    %eax,0xf055585c
	initialize_frame_info(ptr_frame_info);
f010b69c:	83 ec 0c             	sub    $0xc,%esp
f010b69f:	ff 75 f4             	pushl  -0xc(%ebp)
f010b6a2:	e8 d4 82 ff ff       	call   f010397b <initialize_frame_info>
f010b6a7:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010b6aa:	83 ec 0c             	sub    $0xc,%esp
f010b6ad:	ff 75 f4             	pushl  -0xc(%ebp)
f010b6b0:	e8 2c ff ff ff       	call   f010b5e1 <to_disk_frame_number>
f010b6b5:	83 c4 10             	add    $0x10,%esp
f010b6b8:	89 c2                	mov    %eax,%edx
f010b6ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6bd:	89 10                	mov    %edx,(%eax)
	return 0;
f010b6bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b6c4:	c9                   	leave  
f010b6c5:	c3                   	ret    

f010b6c6 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010b6c6:	55                   	push   %ebp
f010b6c7:	89 e5                	mov    %esp,%ebp
f010b6c9:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010b6ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b6ce:	0f 84 9b 00 00 00    	je     f010b76f <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010b6d4:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b6da:	8b 55 08             	mov    0x8(%ebp),%edx
f010b6dd:	89 d0                	mov    %edx,%eax
f010b6df:	01 c0                	add    %eax,%eax
f010b6e1:	01 d0                	add    %edx,%eax
f010b6e3:	c1 e0 03             	shl    $0x3,%eax
f010b6e6:	01 c8                	add    %ecx,%eax
f010b6e8:	8b 15 50 58 55 f0    	mov    0xf0555850,%edx
f010b6ee:	89 10                	mov    %edx,(%eax)
f010b6f0:	8b 00                	mov    (%eax),%eax
f010b6f2:	85 c0                	test   %eax,%eax
f010b6f4:	74 1f                	je     f010b715 <free_disk_frame+0x4f>
f010b6f6:	8b 15 50 58 55 f0    	mov    0xf0555850,%edx
f010b6fc:	8b 1d 10 58 55 f0    	mov    0xf0555810,%ebx
f010b702:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b705:	89 c8                	mov    %ecx,%eax
f010b707:	01 c0                	add    %eax,%eax
f010b709:	01 c8                	add    %ecx,%eax
f010b70b:	c1 e0 03             	shl    $0x3,%eax
f010b70e:	01 d8                	add    %ebx,%eax
f010b710:	89 42 04             	mov    %eax,0x4(%edx)
f010b713:	eb 19                	jmp    f010b72e <free_disk_frame+0x68>
f010b715:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b71b:	8b 55 08             	mov    0x8(%ebp),%edx
f010b71e:	89 d0                	mov    %edx,%eax
f010b720:	01 c0                	add    %eax,%eax
f010b722:	01 d0                	add    %edx,%eax
f010b724:	c1 e0 03             	shl    $0x3,%eax
f010b727:	01 c8                	add    %ecx,%eax
f010b729:	a3 54 58 55 f0       	mov    %eax,0xf0555854
f010b72e:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b734:	8b 55 08             	mov    0x8(%ebp),%edx
f010b737:	89 d0                	mov    %edx,%eax
f010b739:	01 c0                	add    %eax,%eax
f010b73b:	01 d0                	add    %edx,%eax
f010b73d:	c1 e0 03             	shl    $0x3,%eax
f010b740:	01 c8                	add    %ecx,%eax
f010b742:	a3 50 58 55 f0       	mov    %eax,0xf0555850
f010b747:	8b 0d 10 58 55 f0    	mov    0xf0555810,%ecx
f010b74d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b750:	89 d0                	mov    %edx,%eax
f010b752:	01 c0                	add    %eax,%eax
f010b754:	01 d0                	add    %edx,%eax
f010b756:	c1 e0 03             	shl    $0x3,%eax
f010b759:	01 c8                	add    %ecx,%eax
f010b75b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b762:	a1 5c 58 55 f0       	mov    0xf055585c,%eax
f010b767:	40                   	inc    %eax
f010b768:	a3 5c 58 55 f0       	mov    %eax,0xf055585c
f010b76d:	eb 01                	jmp    f010b770 <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010b76f:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010b770:	5b                   	pop    %ebx
f010b771:	5d                   	pop    %ebp
f010b772:	c3                   	ret    

f010b773 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010b773:	55                   	push   %ebp
f010b774:	89 e5                	mov    %esp,%ebp
f010b776:	53                   	push   %ebx
f010b777:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010b77a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b77d:	c1 e8 16             	shr    $0x16,%eax
f010b780:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b787:	8b 45 08             	mov    0x8(%ebp),%eax
f010b78a:	01 d0                	add    %edx,%eax
f010b78c:	8b 00                	mov    (%eax),%eax
f010b78e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010b791:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b794:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010b799:	77 1d                	ja     f010b7b8 <get_disk_page_table+0x45>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010b79b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b79e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b7a3:	83 ec 0c             	sub    $0xc,%esp
f010b7a6:	50                   	push   %eax
f010b7a7:	e8 f9 0c 00 00       	call   f010c4a5 <kheap_virtual_address>
f010b7ac:	83 c4 10             	add    $0x10,%esp
f010b7af:	89 c2                	mov    %eax,%edx
f010b7b1:	8b 45 14             	mov    0x14(%ebp),%eax
f010b7b4:	89 10                	mov    %edx,(%eax)
f010b7b6:	eb 44                	jmp    f010b7fc <get_disk_page_table+0x89>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010b7b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b7c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010b7c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b7c6:	c1 e8 0c             	shr    $0xc,%eax
f010b7c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b7cc:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f010b7d1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010b7d4:	72 17                	jb     f010b7ed <get_disk_page_table+0x7a>
f010b7d6:	ff 75 f0             	pushl  -0x10(%ebp)
f010b7d9:	68 e8 b3 11 f0       	push   $0xf011b3e8
f010b7de:	68 9b 00 00 00       	push   $0x9b
f010b7e3:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010b7e8:	e8 89 49 ff ff       	call   f0100176 <_panic>
f010b7ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b7f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010b7f5:	89 c2                	mov    %eax,%edx
f010b7f7:	8b 45 14             	mov    0x14(%ebp),%eax
f010b7fa:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010b7fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b800:	0f 85 80 00 00 00    	jne    f010b886 <get_disk_page_table+0x113>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010b806:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010b80a:	74 6a                	je     f010b876 <get_disk_page_table+0x103>
		{

			if(USE_KHEAP)
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010b80c:	83 ec 0c             	sub    $0xc,%esp
f010b80f:	68 00 10 00 00       	push   $0x1000
f010b814:	e8 57 0b 00 00       	call   f010c370 <kmalloc>
f010b819:	83 c4 10             	add    $0x10,%esp
f010b81c:	89 c2                	mov    %eax,%edx
f010b81e:	8b 45 14             	mov    0x14(%ebp),%eax
f010b821:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f010b823:	8b 45 14             	mov    0x14(%ebp),%eax
f010b826:	8b 00                	mov    (%eax),%eax
f010b828:	85 c0                	test   %eax,%eax
f010b82a:	75 07                	jne    f010b833 <get_disk_page_table+0xc0>
				{
					return E_NO_VM;
f010b82c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010b831:	eb 58                	jmp    f010b88b <get_disk_page_table+0x118>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f010b833:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b836:	c1 e8 16             	shr    $0x16,%eax
f010b839:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b840:	8b 45 08             	mov    0x8(%ebp),%eax
f010b843:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010b846:	8b 45 14             	mov    0x14(%ebp),%eax
f010b849:	8b 00                	mov    (%eax),%eax
f010b84b:	83 ec 0c             	sub    $0xc,%esp
f010b84e:	50                   	push   %eax
f010b84f:	e8 b3 0c 00 00       	call   f010c507 <kheap_physical_address>
f010b854:	83 c4 10             	add    $0x10,%esp
f010b857:	83 c8 01             	or     $0x1,%eax
f010b85a:	89 03                	mov    %eax,(%ebx)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010b85c:	8b 45 14             	mov    0x14(%ebp),%eax
f010b85f:	8b 00                	mov    (%eax),%eax
f010b861:	83 ec 04             	sub    $0x4,%esp
f010b864:	68 00 10 00 00       	push   $0x1000
f010b869:	6a 00                	push   $0x0
f010b86b:	50                   	push   %eax
f010b86c:	e8 37 c1 00 00       	call   f01179a8 <memset>
f010b871:	83 c4 10             	add    $0x10,%esp
f010b874:	eb 10                	jmp    f010b886 <get_disk_page_table+0x113>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010b876:	8b 45 14             	mov    0x14(%ebp),%eax
f010b879:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010b87f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b884:	eb 05                	jmp    f010b88b <get_disk_page_table+0x118>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010b886:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b88b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b88e:	c9                   	leave  
f010b88f:	c3                   	ret    

f010b890 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010b890:	55                   	push   %ebp
f010b891:	89 e5                	mov    %esp,%ebp
f010b893:	83 ec 28             	sub    $0x28,%esp
f010b896:	8b 45 10             	mov    0x10(%ebp),%eax
f010b899:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010b89c:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010b8a0:	74 1c                	je     f010b8be <pf_add_empty_env_page+0x2e>
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010b8a2:	a1 28 58 55 f0       	mov    0xf0555828,%eax
f010b8a7:	83 ec 04             	sub    $0x4,%esp
f010b8aa:	50                   	push   %eax
f010b8ab:	ff 75 0c             	pushl  0xc(%ebp)
f010b8ae:	ff 75 08             	pushl  0x8(%ebp)
f010b8b1:	e8 b3 00 00 00       	call   f010b969 <pf_add_env_page>
f010b8b6:	83 c4 10             	add    $0x10,%esp
f010b8b9:	e9 a9 00 00 00       	jmp    f010b967 <pf_add_empty_env_page+0xd7>

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b8be:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b8c5:	76 19                	jbe    f010b8e0 <pf_add_empty_env_page+0x50>
f010b8c7:	68 18 b4 11 f0       	push   $0xf011b418
f010b8cc:	68 3e b4 11 f0       	push   $0xf011b43e
f010b8d1:	68 d3 00 00 00       	push   $0xd3
f010b8d6:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010b8db:	e8 96 48 ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b8e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8e3:	83 c0 64             	add    $0x64,%eax
f010b8e6:	83 ec 08             	sub    $0x8,%esp
f010b8e9:	50                   	push   %eax
f010b8ea:	ff 75 08             	pushl  0x8(%ebp)
f010b8ed:	e8 96 04 00 00       	call   f010bd88 <get_disk_page_directory>
f010b8f2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b8f5:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b8f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fb:	8b 40 64             	mov    0x64(%eax),%eax
f010b8fe:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010b901:	51                   	push   %ecx
f010b902:	6a 01                	push   $0x1
f010b904:	52                   	push   %edx
f010b905:	50                   	push   %eax
f010b906:	e8 68 fe ff ff       	call   f010b773 <get_disk_page_table>
f010b90b:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b90e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b911:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b914:	c1 ea 0c             	shr    $0xc,%edx
f010b917:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b91d:	c1 e2 02             	shl    $0x2,%edx
f010b920:	01 d0                	add    %edx,%eax
f010b922:	8b 00                	mov    (%eax),%eax
f010b924:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010b927:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b92a:	85 c0                	test   %eax,%eax
f010b92c:	75 34                	jne    f010b962 <pf_add_empty_env_page+0xd2>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b92e:	83 ec 0c             	sub    $0xc,%esp
f010b931:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b934:	50                   	push   %eax
f010b935:	e8 df fc ff ff       	call   f010b619 <allocate_disk_frame>
f010b93a:	83 c4 10             	add    $0x10,%esp
f010b93d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b940:	75 07                	jne    f010b949 <pf_add_empty_env_page+0xb9>
f010b942:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b947:	eb 1e                	jmp    f010b967 <pf_add_empty_env_page+0xd7>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b949:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b94c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b94f:	c1 ea 0c             	shr    $0xc,%edx
f010b952:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b958:	c1 e2 02             	shl    $0x2,%edx
f010b95b:	01 c2                	add    %eax,%edx
f010b95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b960:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010b962:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010b967:	c9                   	leave  
f010b968:	c3                   	ret    

f010b969 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010b969:	55                   	push   %ebp
f010b96a:	89 e5                	mov    %esp,%ebp
f010b96c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010b96f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010b976:	76 19                	jbe    f010b991 <pf_add_env_page+0x28>
f010b978:	68 18 b4 11 f0       	push   $0xf011b418
f010b97d:	68 3e b4 11 f0       	push   $0xf011b43e
f010b982:	68 e8 00 00 00       	push   $0xe8
f010b987:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010b98c:	e8 e5 47 ff ff       	call   f0100176 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010b991:	8b 45 08             	mov    0x8(%ebp),%eax
f010b994:	83 c0 64             	add    $0x64,%eax
f010b997:	83 ec 08             	sub    $0x8,%esp
f010b99a:	50                   	push   %eax
f010b99b:	ff 75 08             	pushl  0x8(%ebp)
f010b99e:	e8 e5 03 00 00       	call   f010bd88 <get_disk_page_directory>
f010b9a3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010b9a6:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ac:	8b 40 64             	mov    0x64(%eax),%eax
f010b9af:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010b9b2:	51                   	push   %ecx
f010b9b3:	6a 01                	push   $0x1
f010b9b5:	52                   	push   %edx
f010b9b6:	50                   	push   %eax
f010b9b7:	e8 b7 fd ff ff       	call   f010b773 <get_disk_page_table>
f010b9bc:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010b9bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b9c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b9c5:	c1 ea 0c             	shr    $0xc,%edx
f010b9c8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b9ce:	c1 e2 02             	shl    $0x2,%edx
f010b9d1:	01 d0                	add    %edx,%eax
f010b9d3:	8b 00                	mov    (%eax),%eax
f010b9d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010b9d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b9db:	85 c0                	test   %eax,%eax
f010b9dd:	75 34                	jne    f010ba13 <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010b9df:	83 ec 0c             	sub    $0xc,%esp
f010b9e2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b9e5:	50                   	push   %eax
f010b9e6:	e8 2e fc ff ff       	call   f010b619 <allocate_disk_frame>
f010b9eb:	83 c4 10             	add    $0x10,%esp
f010b9ee:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010b9f1:	75 07                	jne    f010b9fa <pf_add_env_page+0x91>
f010b9f3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b9f8:	eb 31                	jmp    f010ba2b <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010b9fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b9fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010ba00:	c1 ea 0c             	shr    $0xc,%edx
f010ba03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010ba09:	c1 e2 02             	shl    $0x2,%edx
f010ba0c:	01 c2                	add    %eax,%edx
f010ba0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ba11:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010ba13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ba16:	83 ec 08             	sub    $0x8,%esp
f010ba19:	ff 75 10             	pushl  0x10(%ebp)
f010ba1c:	50                   	push   %eax
f010ba1d:	e8 76 fa ff ff       	call   f010b498 <write_disk_page>
f010ba22:	83 c4 10             	add    $0x10,%esp
f010ba25:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010ba28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ba2b:	c9                   	leave  
f010ba2c:	c3                   	ret    

f010ba2d <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010ba2d:	55                   	push   %ebp
f010ba2e:	89 e5                	mov    %esp,%ebp
f010ba30:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010ba33:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ba36:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010ba3b:	76 19                	jbe    f010ba56 <pf_update_env_page+0x29>
f010ba3d:	68 18 b4 11 f0       	push   $0xf011b418
f010ba42:	68 3e b4 11 f0       	push   $0xf011b43e
f010ba47:	68 09 01 00 00       	push   $0x109
f010ba4c:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010ba51:	e8 20 47 ff ff       	call   f0100176 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010ba56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba59:	83 c0 64             	add    $0x64,%eax
f010ba5c:	83 ec 08             	sub    $0x8,%esp
f010ba5f:	50                   	push   %eax
f010ba60:	ff 75 08             	pushl  0x8(%ebp)
f010ba63:	e8 20 03 00 00       	call   f010bd88 <get_disk_page_directory>
f010ba68:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010ba6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba6e:	8b 40 64             	mov    0x64(%eax),%eax
f010ba71:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010ba74:	52                   	push   %edx
f010ba75:	6a 00                	push   $0x0
f010ba77:	ff 75 0c             	pushl  0xc(%ebp)
f010ba7a:	50                   	push   %eax
f010ba7b:	e8 f3 fc ff ff       	call   f010b773 <get_disk_page_table>
f010ba80:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010ba83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba86:	85 c0                	test   %eax,%eax
f010ba88:	75 0a                	jne    f010ba94 <pf_update_env_page+0x67>
f010ba8a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010ba8f:	e9 96 00 00 00       	jmp    f010bb2a <pf_update_env_page+0xfd>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010ba94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba97:	8b 55 0c             	mov    0xc(%ebp),%edx
f010ba9a:	c1 ea 0c             	shr    $0xc,%edx
f010ba9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010baa3:	c1 e2 02             	shl    $0x2,%edx
f010baa6:	01 d0                	add    %edx,%eax
f010baa8:	8b 00                	mov    (%eax),%eax
f010baaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010baad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bab1:	75 07                	jne    f010baba <pf_update_env_page+0x8d>
f010bab3:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bab8:	eb 70                	jmp    f010bb2a <pf_update_env_page+0xfd>
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
			//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
			//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, (void*)USER_LIMIT, 0);
f010baba:	8b 45 08             	mov    0x8(%ebp),%eax
f010babd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bac0:	6a 00                	push   $0x0
f010bac2:	68 00 00 80 ef       	push   $0xef800000
f010bac7:	ff 75 10             	pushl  0x10(%ebp)
f010baca:	50                   	push   %eax
f010bacb:	e8 3a 82 ff ff       	call   f0103d0a <map_frame>
f010bad0:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f010bad3:	c7 45 f0 00 00 80 ef 	movl   $0xef800000,-0x10(%ebp)
f010bada:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010badd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bae2:	83 ec 08             	sub    $0x8,%esp
f010bae5:	50                   	push   %eax
f010bae6:	ff 75 f4             	pushl  -0xc(%ebp)
f010bae9:	e8 aa f9 ff ff       	call   f010b498 <write_disk_page>
f010baee:	83 c4 10             	add    $0x10,%esp
f010baf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f010baf4:	8b 45 10             	mov    0x10(%ebp),%eax
f010baf7:	8b 40 08             	mov    0x8(%eax),%eax
f010bafa:	40                   	inc    %eax
f010bafb:	8b 55 10             	mov    0x10(%ebp),%edx
f010bafe:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, (void*)USER_LIMIT);
f010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb05:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bb08:	83 ec 08             	sub    $0x8,%esp
f010bb0b:	68 00 00 80 ef       	push   $0xef800000
f010bb10:	50                   	push   %eax
f010bb11:	e8 23 83 ff ff       	call   f0103e39 <unmap_frame>
f010bb16:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f010bb19:	8b 45 10             	mov    0x10(%ebp),%eax
f010bb1c:	8b 40 08             	mov    0x8(%eax),%eax
f010bb1f:	48                   	dec    %eax
f010bb20:	8b 55 10             	mov    0x10(%ebp),%edx
f010bb23:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
	return ret;
f010bb27:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010bb2a:	c9                   	leave  
f010bb2b:	c3                   	ret    

f010bb2c <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010bb2c:	55                   	push   %ebp
f010bb2d:	89 e5                	mov    %esp,%ebp
f010bb2f:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010bb32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb35:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bb38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb3b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bb40:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010bb43:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb46:	8b 40 64             	mov    0x64(%eax),%eax
f010bb49:	85 c0                	test   %eax,%eax
f010bb4b:	75 07                	jne    f010bb54 <pf_read_env_page+0x28>
f010bb4d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bb52:	eb 79                	jmp    f010bbcd <pf_read_env_page+0xa1>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010bb54:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb57:	8b 40 64             	mov    0x64(%eax),%eax
f010bb5a:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010bb5d:	52                   	push   %edx
f010bb5e:	6a 00                	push   $0x0
f010bb60:	ff 75 0c             	pushl  0xc(%ebp)
f010bb63:	50                   	push   %eax
f010bb64:	e8 0a fc ff ff       	call   f010b773 <get_disk_page_table>
f010bb69:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010bb6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bb6f:	85 c0                	test   %eax,%eax
f010bb71:	75 07                	jne    f010bb7a <pf_read_env_page+0x4e>
f010bb73:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bb78:	eb 53                	jmp    f010bbcd <pf_read_env_page+0xa1>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bb7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bb7d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bb80:	c1 ea 0c             	shr    $0xc,%edx
f010bb83:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bb89:	c1 e2 02             	shl    $0x2,%edx
f010bb8c:	01 d0                	add    %edx,%eax
f010bb8e:	8b 00                	mov    (%eax),%eax
f010bb90:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010bb93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bb97:	75 07                	jne    f010bba0 <pf_read_env_page+0x74>
f010bb99:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bb9e:	eb 2d                	jmp    f010bbcd <pf_read_env_page+0xa1>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010bba0:	83 ec 08             	sub    $0x8,%esp
f010bba3:	ff 75 0c             	pushl  0xc(%ebp)
f010bba6:	ff 75 f0             	pushl  -0x10(%ebp)
f010bba9:	e8 bb f8 ff ff       	call   f010b469 <read_disk_page>
f010bbae:	83 c4 10             	add    $0x10,%esp
f010bbb1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
f010bbb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bbb7:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f010bbbc:	6a 40                	push   $0x40
f010bbbe:	6a 00                	push   $0x0
f010bbc0:	52                   	push   %edx
f010bbc1:	50                   	push   %eax
f010bbc2:	e8 1a 91 ff ff       	call   f0104ce1 <pt_set_page_permissions>
f010bbc7:	83 c4 10             	add    $0x10,%esp

	return disk_read_error;
f010bbca:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010bbcd:	c9                   	leave  
f010bbce:	c3                   	ret    

f010bbcf <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010bbcf:	55                   	push   %ebp
f010bbd0:	89 e5                	mov    %esp,%ebp
f010bbd2:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010bbd5:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd8:	8b 40 64             	mov    0x64(%eax),%eax
f010bbdb:	85 c0                	test   %eax,%eax
f010bbdd:	74 63                	je     f010bc42 <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010bbdf:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bbe2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbe5:	8b 40 64             	mov    0x64(%eax),%eax
f010bbe8:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010bbeb:	51                   	push   %ecx
f010bbec:	6a 00                	push   $0x0
f010bbee:	52                   	push   %edx
f010bbef:	50                   	push   %eax
f010bbf0:	e8 7e fb ff ff       	call   f010b773 <get_disk_page_table>
f010bbf5:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010bbf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbfb:	85 c0                	test   %eax,%eax
f010bbfd:	74 46                	je     f010bc45 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bbff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc02:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bc05:	c1 ea 0c             	shr    $0xc,%edx
f010bc08:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bc0e:	c1 e2 02             	shl    $0x2,%edx
f010bc11:	01 d0                	add    %edx,%eax
f010bc13:	8b 00                	mov    (%eax),%eax
f010bc15:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010bc18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bc1e:	c1 ea 0c             	shr    $0xc,%edx
f010bc21:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bc27:	c1 e2 02             	shl    $0x2,%edx
f010bc2a:	01 d0                	add    %edx,%eax
f010bc2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010bc32:	83 ec 0c             	sub    $0xc,%esp
f010bc35:	ff 75 f4             	pushl  -0xc(%ebp)
f010bc38:	e8 89 fa ff ff       	call   f010b6c6 <free_disk_frame>
f010bc3d:	83 c4 10             	add    $0x10,%esp
f010bc40:	eb 04                	jmp    f010bc46 <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010bc42:	90                   	nop
f010bc43:	eb 01                	jmp    f010bc46 <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010bc45:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010bc46:	c9                   	leave  
f010bc47:	c3                   	ret    

f010bc48 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010bc48:	55                   	push   %ebp
f010bc49:	89 e5                	mov    %esp,%ebp
f010bc4b:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010bc4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bc55:	e9 b8 00 00 00       	jmp    f010bd12 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010bc5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc5d:	8b 40 64             	mov    0x64(%eax),%eax
f010bc60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc63:	c1 e2 02             	shl    $0x2,%edx
f010bc66:	01 d0                	add    %edx,%eax
f010bc68:	8b 00                	mov    (%eax),%eax
f010bc6a:	83 e0 01             	and    $0x1,%eax
f010bc6d:	85 c0                	test   %eax,%eax
f010bc6f:	0f 84 99 00 00 00    	je     f010bd0e <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010bc75:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc78:	8b 40 64             	mov    0x64(%eax),%eax
f010bc7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc7e:	c1 e2 02             	shl    $0x2,%edx
f010bc81:	01 d0                	add    %edx,%eax
f010bc83:	8b 00                	mov    (%eax),%eax
f010bc85:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bc8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010bc8d:	83 ec 0c             	sub    $0xc,%esp
f010bc90:	ff 75 ec             	pushl  -0x14(%ebp)
f010bc93:	e8 0d 08 00 00       	call   f010c4a5 <kheap_virtual_address>
f010bc98:	83 c4 10             	add    $0x10,%esp
f010bc9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010bc9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010bca5:	eb 3a                	jmp    f010bce1 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010bca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bcaa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bcb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bcb4:	01 d0                	add    %edx,%eax
f010bcb6:	8b 00                	mov    (%eax),%eax
f010bcb8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f010bcbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bcbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bcc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bcc8:	01 d0                	add    %edx,%eax
f010bcca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010bcd0:	83 ec 0c             	sub    $0xc,%esp
f010bcd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f010bcd6:	e8 eb f9 ff ff       	call   f010b6c6 <free_disk_frame>
f010bcdb:	83 c4 10             	add    $0x10,%esp
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010bcde:	ff 45 f0             	incl   -0x10(%ebp)
f010bce1:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010bce8:	76 bd                	jbe    f010bca7 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010bcea:	8b 45 08             	mov    0x8(%ebp),%eax
f010bced:	8b 40 64             	mov    0x64(%eax),%eax
f010bcf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bcf3:	c1 e2 02             	shl    $0x2,%edx
f010bcf6:	01 d0                	add    %edx,%eax
f010bcf8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(USE_KHEAP)
		{
			kfree(pt);
f010bcfe:	83 ec 0c             	sub    $0xc,%esp
f010bd01:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd04:	e8 cd 06 00 00       	call   f010c3d6 <kfree>
f010bd09:	83 c4 10             	add    $0x10,%esp
f010bd0c:	eb 01                	jmp    f010bd0f <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010bd0e:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010bd0f:	ff 45 f4             	incl   -0xc(%ebp)
f010bd12:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010bd19:	0f 86 3b ff ff ff    	jbe    f010bc5a <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_pgdir);
f010bd1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd22:	8b 40 64             	mov    0x64(%eax),%eax
f010bd25:	83 ec 0c             	sub    $0xc,%esp
f010bd28:	50                   	push   %eax
f010bd29:	e8 a8 06 00 00       	call   f010c3d6 <kfree>
f010bd2e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
	ptr_env->disk_env_pgdir = 0;
f010bd31:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd34:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010bd3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd3e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010bd45:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd48:	8b 40 6c             	mov    0x6c(%eax),%eax
f010bd4b:	85 c0                	test   %eax,%eax
f010bd4d:	74 36                	je     f010bd85 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010bd4f:	83 ec 0c             	sub    $0xc,%esp
f010bd52:	ff 75 08             	pushl  0x8(%ebp)
f010bd55:	e8 05 03 00 00       	call   f010c05f <__pf_remove_env_all_tables>
f010bd5a:	83 c4 10             	add    $0x10,%esp


	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_tabledir);
f010bd5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd60:	8b 40 6c             	mov    0x6c(%eax),%eax
f010bd63:	83 ec 0c             	sub    $0xc,%esp
f010bd66:	50                   	push   %eax
f010bd67:	e8 6a 06 00 00       	call   f010c3d6 <kfree>
f010bd6c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
f010bd6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd72:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010bd79:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd7c:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010bd83:	eb 01                	jmp    f010bd86 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010bd85:	90                   	nop
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010bd86:	c9                   	leave  
f010bd87:	c3                   	ret    

f010bd88 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010bd88:	55                   	push   %ebp
f010bd89:	89 e5                	mov    %esp,%ebp
f010bd8b:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010bd8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd91:	8b 50 64             	mov    0x64(%eax),%edx
f010bd94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd97:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010bd99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd9c:	8b 00                	mov    (%eax),%eax
f010bd9e:	85 c0                	test   %eax,%eax
f010bda0:	75 58                	jne    f010bdfa <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f010bda2:	83 ec 0c             	sub    $0xc,%esp
f010bda5:	68 00 10 00 00       	push   $0x1000
f010bdaa:	e8 c1 05 00 00       	call   f010c370 <kmalloc>
f010bdaf:	83 c4 10             	add    $0x10,%esp
f010bdb2:	89 c2                	mov    %eax,%edx
f010bdb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bdb7:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f010bdb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bdbc:	8b 00                	mov    (%eax),%eax
f010bdbe:	85 c0                	test   %eax,%eax
f010bdc0:	75 07                	jne    f010bdc9 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f010bdc2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010bdc7:	eb 36                	jmp    f010bdff <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f010bdc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bdcc:	8b 00                	mov    (%eax),%eax
f010bdce:	83 ec 0c             	sub    $0xc,%esp
f010bdd1:	50                   	push   %eax
f010bdd2:	e8 30 07 00 00       	call   f010c507 <kheap_physical_address>
f010bdd7:	83 c4 10             	add    $0x10,%esp
f010bdda:	89 c2                	mov    %eax,%edx
f010bddc:	8b 45 08             	mov    0x8(%ebp),%eax
f010bddf:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010bde2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bde5:	8b 00                	mov    (%eax),%eax
f010bde7:	83 ec 04             	sub    $0x4,%esp
f010bdea:	68 00 10 00 00       	push   $0x1000
f010bdef:	6a 00                	push   $0x0
f010bdf1:	50                   	push   %eax
f010bdf2:	e8 b1 bb 00 00       	call   f01179a8 <memset>
f010bdf7:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010bdfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bdff:	c9                   	leave  
f010be00:	c3                   	ret    

f010be01 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010be01:	55                   	push   %ebp
f010be02:	89 e5                	mov    %esp,%ebp
f010be04:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010be07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010be0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010be15:	eb 78                	jmp    f010be8f <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010be17:	8b 45 08             	mov    0x8(%ebp),%eax
f010be1a:	8b 40 64             	mov    0x64(%eax),%eax
f010be1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be20:	c1 e2 02             	shl    $0x2,%edx
f010be23:	01 d0                	add    %edx,%eax
f010be25:	8b 00                	mov    (%eax),%eax
f010be27:	83 e0 01             	and    $0x1,%eax
f010be2a:	85 c0                	test   %eax,%eax
f010be2c:	74 5d                	je     f010be8b <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010be2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010be31:	8b 40 64             	mov    0x64(%eax),%eax
f010be34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be37:	c1 e2 02             	shl    $0x2,%edx
f010be3a:	01 d0                	add    %edx,%eax
f010be3c:	8b 00                	mov    (%eax),%eax
f010be3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010be43:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010be46:	83 ec 0c             	sub    $0xc,%esp
f010be49:	ff 75 e8             	pushl  -0x18(%ebp)
f010be4c:	e8 54 06 00 00       	call   f010c4a5 <kheap_virtual_address>
f010be51:	83 c4 10             	add    $0x10,%esp
f010be54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010be57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010be5e:	eb 20                	jmp    f010be80 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010be60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010be63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010be6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010be6d:	01 d0                	add    %edx,%eax
f010be6f:	8b 00                	mov    (%eax),%eax
f010be71:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f010be74:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010be78:	74 03                	je     f010be7d <pf_calculate_allocated_pages+0x7c>
				counter ++;
f010be7a:	ff 45 f0             	incl   -0x10(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010be7d:	ff 45 ec             	incl   -0x14(%ebp)
f010be80:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010be87:	76 d7                	jbe    f010be60 <pf_calculate_allocated_pages+0x5f>
f010be89:	eb 01                	jmp    f010be8c <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010be8b:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010be8c:	ff 45 f4             	incl   -0xc(%ebp)
f010be8f:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010be96:	0f 86 7b ff ff ff    	jbe    f010be17 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010be9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010be9f:	c9                   	leave  
f010bea0:	c3                   	ret    

f010bea1 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010bea1:	55                   	push   %ebp
f010bea2:	89 e5                	mov    %esp,%ebp
f010bea4:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010bea7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010beae:	a1 50 58 55 f0       	mov    0xf0555850,%eax
f010beb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010beb6:	eb 0b                	jmp    f010bec3 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010beb8:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010bebb:	a1 58 58 55 f0       	mov    0xf0555858,%eax
f010bec0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010bec3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010bec7:	74 07                	je     f010bed0 <pf_calculate_free_frames+0x2f>
f010bec9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010becc:	8b 00                	mov    (%eax),%eax
f010bece:	eb 05                	jmp    f010bed5 <pf_calculate_free_frames+0x34>
f010bed0:	b8 00 00 00 00       	mov    $0x0,%eax
f010bed5:	a3 58 58 55 f0       	mov    %eax,0xf0555858
f010beda:	a1 58 58 55 f0       	mov    0xf0555858,%eax
f010bedf:	85 c0                	test   %eax,%eax
f010bee1:	75 d5                	jne    f010beb8 <pf_calculate_free_frames+0x17>
f010bee3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010bee7:	75 cf                	jne    f010beb8 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010bee9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010beec:	c9                   	leave  
f010beed:	c3                   	ret    

f010beee <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010beee:	55                   	push   %ebp
f010beef:	89 e5                	mov    %esp,%ebp
f010bef1:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010bef4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bef7:	8b 50 6c             	mov    0x6c(%eax),%edx
f010befa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010befd:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010beff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf02:	8b 00                	mov    (%eax),%eax
f010bf04:	85 c0                	test   %eax,%eax
f010bf06:	75 58                	jne    f010bf60 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f010bf08:	83 ec 0c             	sub    $0xc,%esp
f010bf0b:	68 00 10 00 00       	push   $0x1000
f010bf10:	e8 5b 04 00 00       	call   f010c370 <kmalloc>
f010bf15:	83 c4 10             	add    $0x10,%esp
f010bf18:	89 c2                	mov    %eax,%edx
f010bf1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf1d:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f010bf1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf22:	8b 00                	mov    (%eax),%eax
f010bf24:	85 c0                	test   %eax,%eax
f010bf26:	75 07                	jne    f010bf2f <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f010bf28:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010bf2d:	eb 36                	jmp    f010bf65 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f010bf2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf32:	8b 00                	mov    (%eax),%eax
f010bf34:	83 ec 0c             	sub    $0xc,%esp
f010bf37:	50                   	push   %eax
f010bf38:	e8 ca 05 00 00       	call   f010c507 <kheap_physical_address>
f010bf3d:	83 c4 10             	add    $0x10,%esp
f010bf40:	89 c2                	mov    %eax,%edx
f010bf42:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf45:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010bf48:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf4b:	8b 00                	mov    (%eax),%eax
f010bf4d:	83 ec 04             	sub    $0x4,%esp
f010bf50:	68 00 10 00 00       	push   $0x1000
f010bf55:	6a 00                	push   $0x0
f010bf57:	50                   	push   %eax
f010bf58:	e8 4b ba 00 00       	call   f01179a8 <memset>
f010bf5d:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010bf60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bf65:	c9                   	leave  
f010bf66:	c3                   	ret    

f010bf67 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010bf67:	55                   	push   %ebp
f010bf68:	89 e5                	mov    %esp,%ebp
f010bf6a:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010bf6d:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010bf74:	76 19                	jbe    f010bf8f <__pf_write_env_table+0x28>
f010bf76:	68 18 b4 11 f0       	push   $0xf011b418
f010bf7b:	68 3e b4 11 f0       	push   $0xf011b43e
f010bf80:	68 3d 02 00 00       	push   $0x23d
f010bf85:	68 d3 b3 11 f0       	push   $0xf011b3d3
f010bf8a:	e8 e7 41 ff ff       	call   f0100176 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010bf8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf92:	83 c0 6c             	add    $0x6c,%eax
f010bf95:	83 ec 08             	sub    $0x8,%esp
f010bf98:	50                   	push   %eax
f010bf99:	ff 75 08             	pushl  0x8(%ebp)
f010bf9c:	e8 4d ff ff ff       	call   f010beee <get_disk_table_directory>
f010bfa1:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010bfa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfa7:	8b 40 6c             	mov    0x6c(%eax),%eax
f010bfaa:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bfad:	c1 ea 16             	shr    $0x16,%edx
f010bfb0:	c1 e2 02             	shl    $0x2,%edx
f010bfb3:	01 d0                	add    %edx,%eax
f010bfb5:	8b 00                	mov    (%eax),%eax
f010bfb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010bfba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bfbd:	85 c0                	test   %eax,%eax
f010bfbf:	75 31                	jne    f010bff2 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010bfc1:	83 ec 0c             	sub    $0xc,%esp
f010bfc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010bfc7:	50                   	push   %eax
f010bfc8:	e8 4c f6 ff ff       	call   f010b619 <allocate_disk_frame>
f010bfcd:	83 c4 10             	add    $0x10,%esp
f010bfd0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010bfd3:	75 07                	jne    f010bfdc <__pf_write_env_table+0x75>
f010bfd5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010bfda:	eb 2e                	jmp    f010c00a <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010bfdc:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfdf:	8b 40 6c             	mov    0x6c(%eax),%eax
f010bfe2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bfe5:	c1 ea 16             	shr    $0x16,%edx
f010bfe8:	c1 e2 02             	shl    $0x2,%edx
f010bfeb:	01 c2                	add    %eax,%edx
f010bfed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bff0:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010bff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bff5:	83 ec 08             	sub    $0x8,%esp
f010bff8:	ff 75 10             	pushl  0x10(%ebp)
f010bffb:	50                   	push   %eax
f010bffc:	e8 97 f4 ff ff       	call   f010b498 <write_disk_page>
f010c001:	83 c4 10             	add    $0x10,%esp
f010c004:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010c007:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c00a:	c9                   	leave  
f010c00b:	c3                   	ret    

f010c00c <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010c00c:	55                   	push   %ebp
f010c00d:	89 e5                	mov    %esp,%ebp
f010c00f:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c012:	8b 45 08             	mov    0x8(%ebp),%eax
f010c015:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c018:	85 c0                	test   %eax,%eax
f010c01a:	75 07                	jne    f010c023 <__pf_read_env_table+0x17>
f010c01c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c021:	eb 3a                	jmp    f010c05d <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c023:	8b 45 08             	mov    0x8(%ebp),%eax
f010c026:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c029:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c02c:	c1 ea 16             	shr    $0x16,%edx
f010c02f:	c1 e2 02             	shl    $0x2,%edx
f010c032:	01 d0                	add    %edx,%eax
f010c034:	8b 00                	mov    (%eax),%eax
f010c036:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c039:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c03d:	75 07                	jne    f010c046 <__pf_read_env_table+0x3a>
f010c03f:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c044:	eb 17                	jmp    f010c05d <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010c046:	83 ec 08             	sub    $0x8,%esp
f010c049:	ff 75 10             	pushl  0x10(%ebp)
f010c04c:	ff 75 f4             	pushl  -0xc(%ebp)
f010c04f:	e8 15 f4 ff ff       	call   f010b469 <read_disk_page>
f010c054:	83 c4 10             	add    $0x10,%esp
f010c057:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010c05a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010c05d:	c9                   	leave  
f010c05e:	c3                   	ret    

f010c05f <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010c05f:	55                   	push   %ebp
f010c060:	89 e5                	mov    %esp,%ebp
f010c062:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c065:	8b 45 08             	mov    0x8(%ebp),%eax
f010c068:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c06b:	85 c0                	test   %eax,%eax
f010c06d:	74 49                	je     f010c0b8 <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c06f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010c076:	eb 35                	jmp    f010c0ad <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010c078:	8b 45 08             	mov    0x8(%ebp),%eax
f010c07b:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c07e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c081:	c1 e2 02             	shl    $0x2,%edx
f010c084:	01 d0                	add    %edx,%eax
f010c086:	8b 00                	mov    (%eax),%eax
f010c088:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010c08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c08e:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c091:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c094:	c1 e2 02             	shl    $0x2,%edx
f010c097:	01 d0                	add    %edx,%eax
f010c099:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010c09f:	ff 75 f8             	pushl  -0x8(%ebp)
f010c0a2:	e8 1f f6 ff ff       	call   f010b6c6 <free_disk_frame>
f010c0a7:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c0aa:	ff 45 fc             	incl   -0x4(%ebp)
f010c0ad:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010c0b4:	76 c2                	jbe    f010c078 <__pf_remove_env_all_tables+0x19>
f010c0b6:	eb 01                	jmp    f010c0b9 <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c0b8:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010c0b9:	c9                   	leave  
f010c0ba:	c3                   	ret    

f010c0bb <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010c0bb:	55                   	push   %ebp
f010c0bc:	89 e5                	mov    %esp,%ebp
f010c0be:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010c0c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c0c5:	75 10                	jne    f010c0d7 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010c0c7:	83 ec 0c             	sub    $0xc,%esp
f010c0ca:	68 54 b4 11 f0       	push   $0xf011b454
f010c0cf:	e8 fb ac ff ff       	call   f0106dcf <cprintf>
f010c0d4:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010c0d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0da:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c0dd:	85 c0                	test   %eax,%eax
f010c0df:	74 3d                	je     f010c11e <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c0e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0e4:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c0e7:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c0ea:	c1 ea 16             	shr    $0x16,%edx
f010c0ed:	c1 e2 02             	shl    $0x2,%edx
f010c0f0:	01 d0                	add    %edx,%eax
f010c0f2:	8b 00                	mov    (%eax),%eax
f010c0f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010c0f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0fa:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c0fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c100:	c1 ea 16             	shr    $0x16,%edx
f010c103:	c1 e2 02             	shl    $0x2,%edx
f010c106:	01 d0                	add    %edx,%eax
f010c108:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010c10e:	83 ec 0c             	sub    $0xc,%esp
f010c111:	ff 75 f4             	pushl  -0xc(%ebp)
f010c114:	e8 ad f5 ff ff       	call   f010b6c6 <free_disk_frame>
f010c119:	83 c4 10             	add    $0x10,%esp
f010c11c:	eb 01                	jmp    f010c11f <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010c11e:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010c11f:	c9                   	leave  
f010c120:	c3                   	ret    

f010c121 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010c121:	55                   	push   %ebp
f010c122:	89 e5                	mov    %esp,%ebp
f010c124:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010c127:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010c12e:	eb 1f                	jmp    f010c14f <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010c130:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c133:	83 ec 04             	sub    $0x4,%esp
f010c136:	6a 08                	push   $0x8
f010c138:	ff 75 08             	pushl  0x8(%ebp)
f010c13b:	50                   	push   %eax
f010c13c:	e8 0c bf 00 00       	call   f011804d <ide_write>
f010c141:	83 c4 10             	add    $0x10,%esp
f010c144:	85 c0                	test   %eax,%eax
f010c146:	75 12                	jne    f010c15a <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010c148:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010c14f:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010c156:	7e d8                	jle    f010c130 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c158:	eb 01                	jmp    f010c15b <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010c15a:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c15b:	90                   	nop
f010c15c:	c9                   	leave  
f010c15d:	c3                   	ret    

f010c15e <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010c15e:	55                   	push   %ebp
f010c15f:	89 e5                	mov    %esp,%ebp
f010c161:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010c164:	8b 45 08             	mov    0x8(%ebp),%eax
f010c167:	c1 e8 0c             	shr    $0xc,%eax
f010c16a:	89 c2                	mov    %eax,%edx
f010c16c:	a1 8c 73 53 f0       	mov    0xf053738c,%eax
f010c171:	39 c2                	cmp    %eax,%edx
f010c173:	72 14                	jb     f010c189 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010c175:	83 ec 04             	sub    $0x4,%esp
f010c178:	68 78 b4 11 f0       	push   $0xf011b478
f010c17d:	6a 75                	push   $0x75
f010c17f:	68 9d b4 11 f0       	push   $0xf011b49d
f010c184:	e8 ed 3f ff ff       	call   f0100176 <_panic>
	return &frames_info[PPN(physical_address)];
f010c189:	8b 15 24 58 55 f0    	mov    0xf0555824,%edx
f010c18f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c192:	c1 e8 0c             	shr    $0xc,%eax
f010c195:	89 c1                	mov    %eax,%ecx
f010c197:	89 c8                	mov    %ecx,%eax
f010c199:	01 c0                	add    %eax,%eax
f010c19b:	01 c8                	add    %ecx,%eax
f010c19d:	c1 e0 03             	shl    $0x3,%eax
f010c1a0:	01 d0                	add    %edx,%eax
}
f010c1a2:	c9                   	leave  
f010c1a3:	c3                   	ret    

f010c1a4 <nextFitAlgo>:
	uint32 first;
	uint32 last;
	int size;
} kHeapArr[Mega];

uint32* nextFitAlgo(unsigned int size) {
f010c1a4:	55                   	push   %ebp
f010c1a5:	89 e5                	mov    %esp,%ebp
f010c1a7:	83 ec 28             	sub    $0x28,%esp
	uint32 x = 0, y = 0;
f010c1aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c1b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info* framePTR;

	for(uint32 i = startAdd; i <= KERNEL_HEAP_MAX; i += PAGE_SIZE) {
f010c1b8:	a1 28 ea 14 f0       	mov    0xf014ea28,%eax
f010c1bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010c1c0:	e9 d7 00 00 00       	jmp    f010c29c <nextFitAlgo+0xf8>
		if(i == KERNEL_HEAP_MAX) i = KERNEL_HEAP_START;
f010c1c5:	81 7d ec 00 f0 ff ff 	cmpl   $0xfffff000,-0x14(%ebp)
f010c1cc:	75 07                	jne    f010c1d5 <nextFitAlgo+0x31>
f010c1ce:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
		if(i == startAdd) y++;
f010c1d5:	a1 28 ea 14 f0       	mov    0xf014ea28,%eax
f010c1da:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010c1dd:	75 03                	jne    f010c1e2 <nextFitAlgo+0x3e>
f010c1df:	ff 45 f0             	incl   -0x10(%ebp)
		if(y == 2) if (x != kHeapArr[IDX].size) return NULL;
f010c1e2:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
f010c1e6:	75 25                	jne    f010c20d <nextFitAlgo+0x69>
f010c1e8:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c1ee:	89 d0                	mov    %edx,%eax
f010c1f0:	01 c0                	add    %eax,%eax
f010c1f2:	01 d0                	add    %edx,%eax
f010c1f4:	c1 e0 02             	shl    $0x2,%eax
f010c1f7:	05 68 58 55 f0       	add    $0xf0555868,%eax
f010c1fc:	8b 00                	mov    (%eax),%eax
f010c1fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010c201:	74 0a                	je     f010c20d <nextFitAlgo+0x69>
f010c203:	b8 00 00 00 00       	mov    $0x0,%eax
f010c208:	e9 61 01 00 00       	jmp    f010c36e <nextFitAlgo+0x1ca>

		uint32* ptr_page;
		framePTR = get_frame_info(ptr_page_directory, (void*)i, &ptr_page);
f010c20d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c210:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c215:	83 ec 04             	sub    $0x4,%esp
f010c218:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f010c21b:	51                   	push   %ecx
f010c21c:	52                   	push   %edx
f010c21d:	50                   	push   %eax
f010c21e:	e8 a6 7b ff ff       	call   f0103dc9 <get_frame_info>
f010c223:	83 c4 10             	add    $0x10,%esp
f010c226:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (framePTR == NULL) {
f010c229:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c22c:	85 c0                	test   %eax,%eax
f010c22e:	75 43                	jne    f010c273 <nextFitAlgo+0xcf>
			if (x == 0) kHeapArr[IDX].first = i;
f010c230:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c234:	75 1a                	jne    f010c250 <nextFitAlgo+0xac>
f010c236:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c23c:	89 d0                	mov    %edx,%eax
f010c23e:	01 c0                	add    %eax,%eax
f010c240:	01 d0                	add    %edx,%eax
f010c242:	c1 e0 02             	shl    $0x2,%eax
f010c245:	8d 90 60 58 55 f0    	lea    -0xfaaa7a0(%eax),%edx
f010c24b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c24e:	89 02                	mov    %eax,(%edx)
			kHeapArr[IDX].last = i;
f010c250:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c256:	89 d0                	mov    %edx,%eax
f010c258:	01 c0                	add    %eax,%eax
f010c25a:	01 d0                	add    %edx,%eax
f010c25c:	c1 e0 02             	shl    $0x2,%eax
f010c25f:	8d 90 64 58 55 f0    	lea    -0xfaaa79c(%eax),%edx
f010c265:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c268:	89 02                	mov    %eax,(%edx)
			x += PAGE_SIZE;
f010c26a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010c271:	eb 07                	jmp    f010c27a <nextFitAlgo+0xd6>
		} else x = 0;
f010c273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		if (x == kHeapArr[IDX].size) break;
f010c27a:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c280:	89 d0                	mov    %edx,%eax
f010c282:	01 c0                	add    %eax,%eax
f010c284:	01 d0                	add    %edx,%eax
f010c286:	c1 e0 02             	shl    $0x2,%eax
f010c289:	05 68 58 55 f0       	add    $0xf0555868,%eax
f010c28e:	8b 00                	mov    (%eax),%eax
f010c290:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010c293:	74 16                	je     f010c2ab <nextFitAlgo+0x107>

uint32* nextFitAlgo(unsigned int size) {
	uint32 x = 0, y = 0;
	struct Frame_Info* framePTR;

	for(uint32 i = startAdd; i <= KERNEL_HEAP_MAX; i += PAGE_SIZE) {
f010c295:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010c29c:	81 7d ec 00 f0 ff ff 	cmpl   $0xfffff000,-0x14(%ebp)
f010c2a3:	0f 86 1c ff ff ff    	jbe    f010c1c5 <nextFitAlgo+0x21>
f010c2a9:	eb 01                	jmp    f010c2ac <nextFitAlgo+0x108>
			if (x == 0) kHeapArr[IDX].first = i;
			kHeapArr[IDX].last = i;
			x += PAGE_SIZE;
		} else x = 0;

		if (x == kHeapArr[IDX].size) break;
f010c2ab:	90                   	nop
	}

	if (x == kHeapArr[IDX].size) {
f010c2ac:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c2b2:	89 d0                	mov    %edx,%eax
f010c2b4:	01 c0                	add    %eax,%eax
f010c2b6:	01 d0                	add    %edx,%eax
f010c2b8:	c1 e0 02             	shl    $0x2,%eax
f010c2bb:	05 68 58 55 f0       	add    $0xf0555868,%eax
f010c2c0:	8b 00                	mov    (%eax),%eax
f010c2c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010c2c5:	75 64                	jne    f010c32b <nextFitAlgo+0x187>
		for (uint32 j=kHeapArr[IDX].first; j <= kHeapArr[IDX].last; j+=PAGE_SIZE) {
f010c2c7:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c2cd:	89 d0                	mov    %edx,%eax
f010c2cf:	01 c0                	add    %eax,%eax
f010c2d1:	01 d0                	add    %edx,%eax
f010c2d3:	c1 e0 02             	shl    $0x2,%eax
f010c2d6:	05 60 58 55 f0       	add    $0xf0555860,%eax
f010c2db:	8b 00                	mov    (%eax),%eax
f010c2dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c2e0:	eb 2e                	jmp    f010c310 <nextFitAlgo+0x16c>
			allocate_frame(&framePTR);
f010c2e2:	83 ec 0c             	sub    $0xc,%esp
f010c2e5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010c2e8:	50                   	push   %eax
f010c2e9:	e8 a8 76 ff ff       	call   f0103996 <allocate_frame>
f010c2ee:	83 c4 10             	add    $0x10,%esp
			map_frame(ptr_page_directory, framePTR, (void*)j, PERM_PRESENT|PERM_WRITEABLE);
f010c2f1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010c2f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2f7:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c2fc:	6a 03                	push   $0x3
f010c2fe:	51                   	push   %ecx
f010c2ff:	52                   	push   %edx
f010c300:	50                   	push   %eax
f010c301:	e8 04 7a ff ff       	call   f0103d0a <map_frame>
f010c306:	83 c4 10             	add    $0x10,%esp

		if (x == kHeapArr[IDX].size) break;
	}

	if (x == kHeapArr[IDX].size) {
		for (uint32 j=kHeapArr[IDX].first; j <= kHeapArr[IDX].last; j+=PAGE_SIZE) {
f010c309:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f010c310:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c316:	89 d0                	mov    %edx,%eax
f010c318:	01 c0                	add    %eax,%eax
f010c31a:	01 d0                	add    %edx,%eax
f010c31c:	c1 e0 02             	shl    $0x2,%eax
f010c31f:	05 64 58 55 f0       	add    $0xf0555864,%eax
f010c324:	8b 00                	mov    (%eax),%eax
f010c326:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010c329:	73 b7                	jae    f010c2e2 <nextFitAlgo+0x13e>
			allocate_frame(&framePTR);
			map_frame(ptr_page_directory, framePTR, (void*)j, PERM_PRESENT|PERM_WRITEABLE);
		}
	}

	startAdd = kHeapArr[IDX].last + PAGE_SIZE;
f010c32b:	8b 15 68 73 53 f0    	mov    0xf0537368,%edx
f010c331:	89 d0                	mov    %edx,%eax
f010c333:	01 c0                	add    %eax,%eax
f010c335:	01 d0                	add    %edx,%eax
f010c337:	c1 e0 02             	shl    $0x2,%eax
f010c33a:	05 64 58 55 f0       	add    $0xf0555864,%eax
f010c33f:	8b 00                	mov    (%eax),%eax
f010c341:	05 00 10 00 00       	add    $0x1000,%eax
f010c346:	a3 28 ea 14 f0       	mov    %eax,0xf014ea28
	IDX++;
f010c34b:	a1 68 73 53 f0       	mov    0xf0537368,%eax
f010c350:	40                   	inc    %eax
f010c351:	a3 68 73 53 f0       	mov    %eax,0xf0537368
	return (void*) kHeapArr[IDX-1].first;
f010c356:	a1 68 73 53 f0       	mov    0xf0537368,%eax
f010c35b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010c35e:	89 d0                	mov    %edx,%eax
f010c360:	01 c0                	add    %eax,%eax
f010c362:	01 d0                	add    %edx,%eax
f010c364:	c1 e0 02             	shl    $0x2,%eax
f010c367:	05 60 58 55 f0       	add    $0xf0555860,%eax
f010c36c:	8b 00                	mov    (%eax),%eax
}
f010c36e:	c9                   	leave  
f010c36f:	c3                   	ret    

f010c370 <kmalloc>:

void* kmalloc(unsigned int size) {
f010c370:	55                   	push   %ebp
f010c371:	89 e5                	mov    %esp,%ebp
f010c373:	83 ec 18             	sub    $0x18,%esp
	// use "isKHeapPlacementStrategyBESTFIT() ..."
	// and "isKHeapPlacementStrategyNEXTFIT() ..."
	//functions to check the current strategy
	//change this "return" according to your answer

	kHeapArr[IDX].size = ROUNDUP(size, PAGE_SIZE);
f010c376:	8b 0d 68 73 53 f0    	mov    0xf0537368,%ecx
f010c37c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010c383:	8b 55 08             	mov    0x8(%ebp),%edx
f010c386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c389:	01 d0                	add    %edx,%eax
f010c38b:	48                   	dec    %eax
f010c38c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c392:	ba 00 00 00 00       	mov    $0x0,%edx
f010c397:	f7 75 f4             	divl   -0xc(%ebp)
f010c39a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c39d:	29 d0                	sub    %edx,%eax
f010c39f:	89 c2                	mov    %eax,%edx
f010c3a1:	89 c8                	mov    %ecx,%eax
f010c3a3:	01 c0                	add    %eax,%eax
f010c3a5:	01 c8                	add    %ecx,%eax
f010c3a7:	c1 e0 02             	shl    $0x2,%eax
f010c3aa:	05 68 58 55 f0       	add    $0xf0555868,%eax
f010c3af:	89 10                	mov    %edx,(%eax)

	if(isKHeapPlacementStrategyNEXTFIT()) {
f010c3b1:	e8 34 90 ff ff       	call   f01053ea <isKHeapPlacementStrategyNEXTFIT>
f010c3b6:	85 c0                	test   %eax,%eax
f010c3b8:	74 10                	je     f010c3ca <kmalloc+0x5a>
		return nextFitAlgo(size);
f010c3ba:	83 ec 0c             	sub    $0xc,%esp
f010c3bd:	ff 75 08             	pushl  0x8(%ebp)
f010c3c0:	e8 df fd ff ff       	call   f010c1a4 <nextFitAlgo>
f010c3c5:	83 c4 10             	add    $0x10,%esp
f010c3c8:	eb 0a                	jmp    f010c3d4 <kmalloc+0x64>
	}

	if(isKHeapPlacementStrategyBESTFIT()) {
f010c3ca:	e8 00 90 ff ff       	call   f01053cf <isKHeapPlacementStrategyBESTFIT>
		// --->>> BONUS -->> BEST FIT -> HERE
	}

	return NULL;
f010c3cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c3d4:	c9                   	leave  
f010c3d5:	c3                   	ret    

f010c3d6 <kfree>:

void kfree(void* virtual_address) {
f010c3d6:	55                   	push   %ebp
f010c3d7:	89 e5                	mov    %esp,%ebp
f010c3d9:	83 ec 28             	sub    $0x28,%esp
	//panic("kfree() is not implemented yet...!!");

	//you need to get the size of the given allocation using its address
	//refer to the project presentation and documentation for details

	uint32 flag = 0, start, end;
f010c3dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(int i=0; i<IDX; i++) {
f010c3e3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010c3ea:	eb 40                	jmp    f010c42c <kfree+0x56>
		if((uint32)virtual_address == kHeapArr[i].first) {
f010c3ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c3ef:	89 d0                	mov    %edx,%eax
f010c3f1:	01 c0                	add    %eax,%eax
f010c3f3:	01 d0                	add    %edx,%eax
f010c3f5:	c1 e0 02             	shl    $0x2,%eax
f010c3f8:	05 60 58 55 f0       	add    $0xf0555860,%eax
f010c3fd:	8b 10                	mov    (%eax),%edx
f010c3ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010c402:	39 c2                	cmp    %eax,%edx
f010c404:	75 23                	jne    f010c429 <kfree+0x53>
			flag=1;
f010c406:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			start = (uint32)virtual_address;
f010c40d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c410:	89 45 f0             	mov    %eax,-0x10(%ebp)
			end = kHeapArr[i].last;
f010c413:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c416:	89 d0                	mov    %edx,%eax
f010c418:	01 c0                	add    %eax,%eax
f010c41a:	01 d0                	add    %edx,%eax
f010c41c:	c1 e0 02             	shl    $0x2,%eax
f010c41f:	05 64 58 55 f0       	add    $0xf0555864,%eax
f010c424:	8b 00                	mov    (%eax),%eax
f010c426:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//you need to get the size of the given allocation using its address
	//refer to the project presentation and documentation for details

	uint32 flag = 0, start, end;

	for(int i=0; i<IDX; i++) {
f010c429:	ff 45 e8             	incl   -0x18(%ebp)
f010c42c:	a1 68 73 53 f0       	mov    0xf0537368,%eax
f010c431:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010c434:	7c b6                	jl     f010c3ec <kfree+0x16>
			start = (uint32)virtual_address;
			end = kHeapArr[i].last;
		}
	}

	if(flag) {
f010c436:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c43a:	74 66                	je     f010c4a2 <kfree+0xcc>
		for(uint32 i=start; i<=end; i+=PAGE_SIZE) {
f010c43c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c43f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c442:	eb 56                	jmp    f010c49a <kfree+0xc4>
			unmap_frame(ptr_page_directory, (void*)i);
f010c444:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c447:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c44c:	83 ec 08             	sub    $0x8,%esp
f010c44f:	52                   	push   %edx
f010c450:	50                   	push   %eax
f010c451:	e8 e3 79 ff ff       	call   f0103e39 <unmap_frame>
f010c456:	83 c4 10             	add    $0x10,%esp
			uint32*ptrPT;
			get_page_table(ptr_page_directory, (void*)i, &ptrPT);
f010c459:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c45c:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c461:	83 ec 04             	sub    $0x4,%esp
f010c464:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f010c467:	51                   	push   %ecx
f010c468:	52                   	push   %edx
f010c469:	50                   	push   %eax
f010c46a:	e8 a6 76 ff ff       	call   f0103b15 <get_page_table>
f010c46f:	83 c4 10             	add    $0x10,%esp
			if(ptrPT != NULL) ptrPT[PTX(i)] = 0;
f010c472:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c475:	85 c0                	test   %eax,%eax
f010c477:	74 1a                	je     f010c493 <kfree+0xbd>
f010c479:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c47c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c47f:	c1 ea 0c             	shr    $0xc,%edx
f010c482:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c488:	c1 e2 02             	shl    $0x2,%edx
f010c48b:	01 d0                	add    %edx,%eax
f010c48d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			end = kHeapArr[i].last;
		}
	}

	if(flag) {
		for(uint32 i=start; i<=end; i+=PAGE_SIZE) {
f010c493:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f010c49a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c49d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c4a0:	76 a2                	jbe    f010c444 <kfree+0x6e>
			uint32*ptrPT;
			get_page_table(ptr_page_directory, (void*)i, &ptrPT);
			if(ptrPT != NULL) ptrPT[PTX(i)] = 0;
		}
	}
}
f010c4a2:	90                   	nop
f010c4a3:	c9                   	leave  
f010c4a4:	c3                   	ret    

f010c4a5 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address) {
f010c4a5:	55                   	push   %ebp
f010c4a6:	89 e5                	mov    %esp,%ebp
f010c4a8:	83 ec 18             	sub    $0x18,%esp
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	struct Frame_Info* phyAddFrame = to_frame_info(physical_address);
f010c4ab:	83 ec 0c             	sub    $0xc,%esp
f010c4ae:	ff 75 08             	pushl  0x8(%ebp)
f010c4b1:	e8 a8 fc ff ff       	call   f010c15e <to_frame_info>
f010c4b6:	83 c4 10             	add    $0x10,%esp
f010c4b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for(uint32 i=KERNEL_HEAP_START; i<startAdd; i+=PAGE_SIZE) {
f010c4bc:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
f010c4c3:	eb 31                	jmp    f010c4f6 <kheap_virtual_address+0x51>
		uint32* framePTR = NULL;
f010c4c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		if(phyAddFrame == get_frame_info(ptr_page_directory, (void*)i, &framePTR))
f010c4cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c4cf:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c4d4:	83 ec 04             	sub    $0x4,%esp
f010c4d7:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f010c4da:	51                   	push   %ecx
f010c4db:	52                   	push   %edx
f010c4dc:	50                   	push   %eax
f010c4dd:	e8 e7 78 ff ff       	call   f0103dc9 <get_frame_info>
f010c4e2:	83 c4 10             	add    $0x10,%esp
f010c4e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c4e8:	75 05                	jne    f010c4ef <kheap_virtual_address+0x4a>
			return i;
f010c4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4ed:	eb 16                	jmp    f010c505 <kheap_virtual_address+0x60>
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	struct Frame_Info* phyAddFrame = to_frame_info(physical_address);
	for(uint32 i=KERNEL_HEAP_START; i<startAdd; i+=PAGE_SIZE) {
f010c4ef:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010c4f6:	a1 28 ea 14 f0       	mov    0xf014ea28,%eax
f010c4fb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c4fe:	72 c5                	jb     f010c4c5 <kheap_virtual_address+0x20>
		uint32* framePTR = NULL;
		if(phyAddFrame == get_frame_info(ptr_page_directory, (void*)i, &framePTR))
			return i;
	}

	return 0;
f010c500:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c505:	c9                   	leave  
f010c506:	c3                   	ret    

f010c507 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address) {
f010c507:	55                   	push   %ebp
f010c508:	89 e5                	mov    %esp,%ebp
f010c50a:	83 ec 18             	sub    $0x18,%esp
	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details

	//change this "return" according to your answer

	uint32 *ptPTR = NULL;
f010c50d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(ptr_page_directory, (uint32*)virtual_address, &ptPTR);
f010c514:	8b 55 08             	mov    0x8(%ebp),%edx
f010c517:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010c51c:	83 ec 04             	sub    $0x4,%esp
f010c51f:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010c522:	51                   	push   %ecx
f010c523:	52                   	push   %edx
f010c524:	50                   	push   %eax
f010c525:	e8 eb 75 ff ff       	call   f0103b15 <get_page_table>
f010c52a:	83 c4 10             	add    $0x10,%esp
	if(ptPTR != NULL)
f010c52d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c530:	85 c0                	test   %eax,%eax
f010c532:	74 1d                	je     f010c551 <kheap_physical_address+0x4a>
		return (ptPTR[PTX(virtual_address)] & 0xFFFFF000);
f010c534:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c537:	8b 55 08             	mov    0x8(%ebp),%edx
f010c53a:	c1 ea 0c             	shr    $0xc,%edx
f010c53d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c543:	c1 e2 02             	shl    $0x2,%edx
f010c546:	01 d0                	add    %edx,%eax
f010c548:	8b 00                	mov    (%eax),%eax
f010c54a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c54f:	eb 05                	jmp    f010c556 <kheap_physical_address+0x4f>
	return 0;
f010c551:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c556:	c9                   	leave  
f010c557:	c3                   	ret    

f010c558 <test_kmalloc>:
	char a;
	short b;
	int c;
};
int test_kmalloc()
{
f010c558:	55                   	push   %ebp
f010c559:	89 e5                	mov    %esp,%ebp
f010c55b:	57                   	push   %edi
f010c55c:	53                   	push   %ebx
f010c55d:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010c563:	83 ec 0c             	sub    $0xc,%esp
f010c566:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010c56b:	e8 5f a8 ff ff       	call   f0106dcf <cprintf>
f010c570:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010c573:	83 ec 0c             	sub    $0xc,%esp
f010c576:	68 e8 b4 11 f0       	push   $0xf011b4e8
f010c57b:	e8 4f a8 ff ff       	call   f0106dcf <cprintf>
f010c580:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010c583:	83 ec 0c             	sub    $0xc,%esp
f010c586:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010c58b:	e8 3f a8 ff ff       	call   f0106dcf <cprintf>
f010c590:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010c593:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010c597:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010c59b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010c5a1:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010c5a7:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010c5ae:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010c5b5:	e8 24 e4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c5ba:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010c5bd:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010c5c3:	b9 14 00 00 00       	mov    $0x14,%ecx
f010c5c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010c5cd:	89 d7                	mov    %edx,%edi
f010c5cf:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010c5d1:	e8 08 e4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c5d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010c5d9:	e8 c3 f8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c5de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010c5e1:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010c5e8:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c5ed:	0f b6 d0             	movzbl %al,%edx
f010c5f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010c5f3:	01 d0                	add    %edx,%eax
f010c5f5:	48                   	dec    %eax
f010c5f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010c5f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c5fc:	ba 00 00 00 00       	mov    $0x0,%edx
f010c601:	f7 75 d4             	divl   -0x2c(%ebp)
f010c604:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c607:	29 d0                	sub    %edx,%eax
f010c609:	89 c1                	mov    %eax,%ecx
f010c60b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010c612:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c617:	0f b6 c0             	movzbl %al,%eax
f010c61a:	c1 e0 04             	shl    $0x4,%eax
f010c61d:	89 c2                	mov    %eax,%edx
f010c61f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010c622:	01 d0                	add    %edx,%eax
f010c624:	48                   	dec    %eax
f010c625:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010c628:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010c62b:	ba 00 00 00 00       	mov    $0x0,%edx
f010c630:	f7 75 cc             	divl   -0x34(%ebp)
f010c633:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010c636:	29 d0                	sub    %edx,%eax
f010c638:	01 c8                	add    %ecx,%eax
f010c63a:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010c63f:	29 c2                	sub    %eax,%edx
f010c641:	89 d0                	mov    %edx,%eax
f010c643:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010c646:	83 ec 0c             	sub    $0xc,%esp
f010c649:	ff 75 c4             	pushl  -0x3c(%ebp)
f010c64c:	e8 1f fd ff ff       	call   f010c370 <kmalloc>
f010c651:	83 c4 10             	add    $0x10,%esp
f010c654:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010c65a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010c660:	85 c0                	test   %eax,%eax
f010c662:	74 14                	je     f010c678 <test_kmalloc+0x120>
f010c664:	83 ec 04             	sub    $0x4,%esp
f010c667:	68 44 b5 11 f0       	push   $0xf011b544
f010c66c:	6a 37                	push   $0x37
f010c66e:	68 76 b5 11 f0       	push   $0xf011b576
f010c673:	e8 fe 3a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c678:	e8 24 f8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c67d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c680:	74 14                	je     f010c696 <test_kmalloc+0x13e>
f010c682:	83 ec 04             	sub    $0x4,%esp
f010c685:	68 88 b5 11 f0       	push   $0xf011b588
f010c68a:	6a 38                	push   $0x38
f010c68c:	68 76 b5 11 f0       	push   $0xf011b576
f010c691:	e8 e0 3a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c696:	e8 43 e3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c69b:	89 c2                	mov    %eax,%edx
f010c69d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c6a0:	39 c2                	cmp    %eax,%edx
f010c6a2:	74 14                	je     f010c6b8 <test_kmalloc+0x160>
f010c6a4:	83 ec 04             	sub    $0x4,%esp
f010c6a7:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010c6ac:	6a 39                	push   $0x39
f010c6ae:	68 76 b5 11 f0       	push   $0xf011b576
f010c6b3:	e8 be 3a ff ff       	call   f0100176 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010c6b8:	83 ec 0c             	sub    $0xc,%esp
f010c6bb:	68 30 b6 11 f0       	push   $0xf011b630
f010c6c0:	e8 0a a7 ff ff       	call   f0106dcf <cprintf>
f010c6c5:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010c6c8:	e8 11 e3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c6cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c6d0:	e8 cc f7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c6d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010c6d8:	83 ec 0c             	sub    $0xc,%esp
f010c6db:	68 00 fc 1f 00       	push   $0x1ffc00
f010c6e0:	e8 8b fc ff ff       	call   f010c370 <kmalloc>
f010c6e5:	83 c4 10             	add    $0x10,%esp
f010c6e8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c6ee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010c6f4:	89 c1                	mov    %eax,%ecx
f010c6f6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010c6fd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c702:	0f b6 d0             	movzbl %al,%edx
f010c705:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010c708:	01 d0                	add    %edx,%eax
f010c70a:	48                   	dec    %eax
f010c70b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010c70e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010c711:	ba 00 00 00 00       	mov    $0x0,%edx
f010c716:	f7 75 c0             	divl   -0x40(%ebp)
f010c719:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010c71c:	29 d0                	sub    %edx,%eax
f010c71e:	89 c3                	mov    %eax,%ebx
f010c720:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010c727:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c72c:	0f b6 c0             	movzbl %al,%eax
f010c72f:	c1 e0 04             	shl    $0x4,%eax
f010c732:	89 c2                	mov    %eax,%edx
f010c734:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010c737:	01 d0                	add    %edx,%eax
f010c739:	48                   	dec    %eax
f010c73a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010c73d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010c740:	ba 00 00 00 00       	mov    $0x0,%edx
f010c745:	f7 75 b8             	divl   -0x48(%ebp)
f010c748:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010c74b:	29 d0                	sub    %edx,%eax
f010c74d:	01 d8                	add    %ebx,%eax
f010c74f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010c754:	39 c1                	cmp    %eax,%ecx
f010c756:	74 14                	je     f010c76c <test_kmalloc+0x214>
f010c758:	83 ec 04             	sub    $0x4,%esp
f010c75b:	68 54 b6 11 f0       	push   $0xf011b654
f010c760:	6a 40                	push   $0x40
f010c762:	68 76 b5 11 f0       	push   $0xf011b576
f010c767:	e8 0a 3a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c76c:	e8 30 f7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c771:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c774:	74 14                	je     f010c78a <test_kmalloc+0x232>
f010c776:	83 ec 04             	sub    $0x4,%esp
f010c779:	68 88 b5 11 f0       	push   $0xf011b588
f010c77e:	6a 41                	push   $0x41
f010c780:	68 76 b5 11 f0       	push   $0xf011b576
f010c785:	e8 ec 39 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c78a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c78d:	e8 4c e2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c792:	29 c3                	sub    %eax,%ebx
f010c794:	89 d8                	mov    %ebx,%eax
f010c796:	3d 00 02 00 00       	cmp    $0x200,%eax
f010c79b:	74 14                	je     f010c7b1 <test_kmalloc+0x259>
f010c79d:	83 ec 04             	sub    $0x4,%esp
f010c7a0:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010c7a5:	6a 42                	push   $0x42
f010c7a7:	68 76 b5 11 f0       	push   $0xf011b576
f010c7ac:	e8 c5 39 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010c7b1:	e8 28 e2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c7b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c7b9:	e8 e3 f6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c7be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010c7c1:	83 ec 0c             	sub    $0xc,%esp
f010c7c4:	68 00 fc 1f 00       	push   $0x1ffc00
f010c7c9:	e8 a2 fb ff ff       	call   f010c370 <kmalloc>
f010c7ce:	83 c4 10             	add    $0x10,%esp
f010c7d1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c7d7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010c7dd:	89 c1                	mov    %eax,%ecx
f010c7df:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010c7e6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c7eb:	0f b6 d0             	movzbl %al,%edx
f010c7ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010c7f1:	01 d0                	add    %edx,%eax
f010c7f3:	48                   	dec    %eax
f010c7f4:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010c7f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010c7fa:	ba 00 00 00 00       	mov    $0x0,%edx
f010c7ff:	f7 75 b0             	divl   -0x50(%ebp)
f010c802:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010c805:	29 d0                	sub    %edx,%eax
f010c807:	89 c3                	mov    %eax,%ebx
f010c809:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010c810:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c815:	0f b6 c0             	movzbl %al,%eax
f010c818:	c1 e0 04             	shl    $0x4,%eax
f010c81b:	89 c2                	mov    %eax,%edx
f010c81d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010c820:	01 d0                	add    %edx,%eax
f010c822:	48                   	dec    %eax
f010c823:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010c826:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010c829:	ba 00 00 00 00       	mov    $0x0,%edx
f010c82e:	f7 75 a8             	divl   -0x58(%ebp)
f010c831:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010c834:	29 d0                	sub    %edx,%eax
f010c836:	01 d8                	add    %ebx,%eax
f010c838:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010c83d:	39 c1                	cmp    %eax,%ecx
f010c83f:	74 14                	je     f010c855 <test_kmalloc+0x2fd>
f010c841:	83 ec 04             	sub    $0x4,%esp
f010c844:	68 54 b6 11 f0       	push   $0xf011b654
f010c849:	6a 48                	push   $0x48
f010c84b:	68 76 b5 11 f0       	push   $0xf011b576
f010c850:	e8 21 39 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c855:	e8 47 f6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c85a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c85d:	74 14                	je     f010c873 <test_kmalloc+0x31b>
f010c85f:	83 ec 04             	sub    $0x4,%esp
f010c862:	68 88 b5 11 f0       	push   $0xf011b588
f010c867:	6a 49                	push   $0x49
f010c869:	68 76 b5 11 f0       	push   $0xf011b576
f010c86e:	e8 03 39 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c873:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c876:	e8 63 e1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c87b:	29 c3                	sub    %eax,%ebx
f010c87d:	89 d8                	mov    %ebx,%eax
f010c87f:	3d 00 02 00 00       	cmp    $0x200,%eax
f010c884:	74 14                	je     f010c89a <test_kmalloc+0x342>
f010c886:	83 ec 04             	sub    $0x4,%esp
f010c889:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010c88e:	6a 4a                	push   $0x4a
f010c890:	68 76 b5 11 f0       	push   $0xf011b576
f010c895:	e8 dc 38 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010c89a:	e8 3f e1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c89f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c8a2:	e8 fa f5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c8a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010c8aa:	83 ec 0c             	sub    $0xc,%esp
f010c8ad:	68 00 08 00 00       	push   $0x800
f010c8b2:	e8 b9 fa ff ff       	call   f010c370 <kmalloc>
f010c8b7:	83 c4 10             	add    $0x10,%esp
f010c8ba:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c8c0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010c8c6:	89 c1                	mov    %eax,%ecx
f010c8c8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010c8cf:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c8d4:	0f b6 d0             	movzbl %al,%edx
f010c8d7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010c8da:	01 d0                	add    %edx,%eax
f010c8dc:	48                   	dec    %eax
f010c8dd:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010c8e0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010c8e3:	ba 00 00 00 00       	mov    $0x0,%edx
f010c8e8:	f7 75 a0             	divl   -0x60(%ebp)
f010c8eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010c8ee:	29 d0                	sub    %edx,%eax
f010c8f0:	89 c3                	mov    %eax,%ebx
f010c8f2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010c8f9:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c8fe:	0f b6 c0             	movzbl %al,%eax
f010c901:	c1 e0 04             	shl    $0x4,%eax
f010c904:	89 c2                	mov    %eax,%edx
f010c906:	8b 45 98             	mov    -0x68(%ebp),%eax
f010c909:	01 d0                	add    %edx,%eax
f010c90b:	48                   	dec    %eax
f010c90c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010c90f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c912:	ba 00 00 00 00       	mov    $0x0,%edx
f010c917:	f7 75 98             	divl   -0x68(%ebp)
f010c91a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010c91d:	29 d0                	sub    %edx,%eax
f010c91f:	01 d8                	add    %ebx,%eax
f010c921:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010c926:	39 c1                	cmp    %eax,%ecx
f010c928:	74 14                	je     f010c93e <test_kmalloc+0x3e6>
f010c92a:	83 ec 04             	sub    $0x4,%esp
f010c92d:	68 54 b6 11 f0       	push   $0xf011b654
f010c932:	6a 50                	push   $0x50
f010c934:	68 76 b5 11 f0       	push   $0xf011b576
f010c939:	e8 38 38 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010c93e:	e8 5e f5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c943:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010c946:	74 14                	je     f010c95c <test_kmalloc+0x404>
f010c948:	83 ec 04             	sub    $0x4,%esp
f010c94b:	68 88 b5 11 f0       	push   $0xf011b588
f010c950:	6a 51                	push   $0x51
f010c952:	68 76 b5 11 f0       	push   $0xf011b576
f010c957:	e8 1a 38 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010c95c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010c95f:	e8 7a e0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c964:	29 c3                	sub    %eax,%ebx
f010c966:	89 d8                	mov    %ebx,%eax
f010c968:	83 f8 01             	cmp    $0x1,%eax
f010c96b:	74 14                	je     f010c981 <test_kmalloc+0x429>
f010c96d:	83 ec 04             	sub    $0x4,%esp
f010c970:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010c975:	6a 52                	push   $0x52
f010c977:	68 76 b5 11 f0       	push   $0xf011b576
f010c97c:	e8 f5 37 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010c981:	e8 58 e0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010c986:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010c989:	e8 13 f5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010c98e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010c991:	83 ec 0c             	sub    $0xc,%esp
f010c994:	68 00 08 00 00       	push   $0x800
f010c999:	e8 d2 f9 ff ff       	call   f010c370 <kmalloc>
f010c99e:	83 c4 10             	add    $0x10,%esp
f010c9a1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010c9a7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010c9ad:	89 c1                	mov    %eax,%ecx
f010c9af:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010c9b6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c9bb:	0f b6 d0             	movzbl %al,%edx
f010c9be:	8b 45 90             	mov    -0x70(%ebp),%eax
f010c9c1:	01 d0                	add    %edx,%eax
f010c9c3:	48                   	dec    %eax
f010c9c4:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010c9c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c9ca:	ba 00 00 00 00       	mov    $0x0,%edx
f010c9cf:	f7 75 90             	divl   -0x70(%ebp)
f010c9d2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010c9d5:	29 d0                	sub    %edx,%eax
f010c9d7:	89 c3                	mov    %eax,%ebx
f010c9d9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010c9e0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010c9e5:	0f b6 c0             	movzbl %al,%eax
f010c9e8:	c1 e0 04             	shl    $0x4,%eax
f010c9eb:	89 c2                	mov    %eax,%edx
f010c9ed:	8b 45 88             	mov    -0x78(%ebp),%eax
f010c9f0:	01 d0                	add    %edx,%eax
f010c9f2:	48                   	dec    %eax
f010c9f3:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010c9f6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010c9f9:	ba 00 00 00 00       	mov    $0x0,%edx
f010c9fe:	f7 75 88             	divl   -0x78(%ebp)
f010ca01:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010ca04:	29 d0                	sub    %edx,%eax
f010ca06:	01 d8                	add    %ebx,%eax
f010ca08:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010ca0d:	39 c1                	cmp    %eax,%ecx
f010ca0f:	74 14                	je     f010ca25 <test_kmalloc+0x4cd>
f010ca11:	83 ec 04             	sub    $0x4,%esp
f010ca14:	68 54 b6 11 f0       	push   $0xf011b654
f010ca19:	6a 58                	push   $0x58
f010ca1b:	68 76 b5 11 f0       	push   $0xf011b576
f010ca20:	e8 51 37 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ca25:	e8 77 f4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ca2a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ca2d:	74 14                	je     f010ca43 <test_kmalloc+0x4eb>
f010ca2f:	83 ec 04             	sub    $0x4,%esp
f010ca32:	68 88 b5 11 f0       	push   $0xf011b588
f010ca37:	6a 59                	push   $0x59
f010ca39:	68 76 b5 11 f0       	push   $0xf011b576
f010ca3e:	e8 33 37 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ca43:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010ca46:	e8 93 df ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ca4b:	29 c3                	sub    %eax,%ebx
f010ca4d:	89 d8                	mov    %ebx,%eax
f010ca4f:	83 f8 01             	cmp    $0x1,%eax
f010ca52:	74 14                	je     f010ca68 <test_kmalloc+0x510>
f010ca54:	83 ec 04             	sub    $0x4,%esp
f010ca57:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010ca5c:	6a 5a                	push   $0x5a
f010ca5e:	68 76 b5 11 f0       	push   $0xf011b576
f010ca63:	e8 0e 37 ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010ca68:	e8 71 df ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ca6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ca70:	e8 2c f4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ca75:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010ca78:	83 ec 0c             	sub    $0xc,%esp
f010ca7b:	68 00 1c 00 00       	push   $0x1c00
f010ca80:	e8 eb f8 ff ff       	call   f010c370 <kmalloc>
f010ca85:	83 c4 10             	add    $0x10,%esp
f010ca88:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010ca8e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010ca94:	89 c1                	mov    %eax,%ecx
f010ca96:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010ca9d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010caa2:	0f b6 d0             	movzbl %al,%edx
f010caa5:	8b 45 80             	mov    -0x80(%ebp),%eax
f010caa8:	01 d0                	add    %edx,%eax
f010caaa:	48                   	dec    %eax
f010caab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010cab1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010cab7:	ba 00 00 00 00       	mov    $0x0,%edx
f010cabc:	f7 75 80             	divl   -0x80(%ebp)
f010cabf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010cac5:	29 d0                	sub    %edx,%eax
f010cac7:	89 c3                	mov    %eax,%ebx
f010cac9:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010cad0:	10 00 00 
f010cad3:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010cad8:	0f b6 c0             	movzbl %al,%eax
f010cadb:	c1 e0 04             	shl    $0x4,%eax
f010cade:	89 c2                	mov    %eax,%edx
f010cae0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010cae6:	01 d0                	add    %edx,%eax
f010cae8:	48                   	dec    %eax
f010cae9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010caef:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010caf5:	ba 00 00 00 00       	mov    $0x0,%edx
f010cafa:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010cb00:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010cb06:	29 d0                	sub    %edx,%eax
f010cb08:	01 d8                	add    %ebx,%eax
f010cb0a:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010cb0f:	39 c1                	cmp    %eax,%ecx
f010cb11:	74 14                	je     f010cb27 <test_kmalloc+0x5cf>
f010cb13:	83 ec 04             	sub    $0x4,%esp
f010cb16:	68 54 b6 11 f0       	push   $0xf011b654
f010cb1b:	6a 60                	push   $0x60
f010cb1d:	68 76 b5 11 f0       	push   $0xf011b576
f010cb22:	e8 4f 36 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010cb27:	e8 75 f3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cb2c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010cb2f:	74 14                	je     f010cb45 <test_kmalloc+0x5ed>
f010cb31:	83 ec 04             	sub    $0x4,%esp
f010cb34:	68 88 b5 11 f0       	push   $0xf011b588
f010cb39:	6a 61                	push   $0x61
f010cb3b:	68 76 b5 11 f0       	push   $0xf011b576
f010cb40:	e8 31 36 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cb45:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010cb48:	e8 91 de ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cb4d:	29 c3                	sub    %eax,%ebx
f010cb4f:	89 d8                	mov    %ebx,%eax
f010cb51:	83 f8 02             	cmp    $0x2,%eax
f010cb54:	74 14                	je     f010cb6a <test_kmalloc+0x612>
f010cb56:	83 ec 04             	sub    $0x4,%esp
f010cb59:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010cb5e:	6a 62                	push   $0x62
f010cb60:	68 76 b5 11 f0       	push   $0xf011b576
f010cb65:	e8 0c 36 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010cb6a:	e8 6f de ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cb6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010cb72:	e8 2a f3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cb77:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010cb7a:	83 ec 0c             	sub    $0xc,%esp
f010cb7d:	68 00 fc 2f 00       	push   $0x2ffc00
f010cb82:	e8 e9 f7 ff ff       	call   f010c370 <kmalloc>
f010cb87:	83 c4 10             	add    $0x10,%esp
f010cb8a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010cb90:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010cb96:	89 c1                	mov    %eax,%ecx
f010cb98:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010cb9f:	10 00 00 
f010cba2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010cba7:	0f b6 d0             	movzbl %al,%edx
f010cbaa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010cbb0:	01 d0                	add    %edx,%eax
f010cbb2:	48                   	dec    %eax
f010cbb3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010cbb9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010cbbf:	ba 00 00 00 00       	mov    $0x0,%edx
f010cbc4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010cbca:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010cbd0:	29 d0                	sub    %edx,%eax
f010cbd2:	89 c3                	mov    %eax,%ebx
f010cbd4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010cbdb:	10 00 00 
f010cbde:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010cbe3:	0f b6 c0             	movzbl %al,%eax
f010cbe6:	c1 e0 04             	shl    $0x4,%eax
f010cbe9:	89 c2                	mov    %eax,%edx
f010cbeb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010cbf1:	01 d0                	add    %edx,%eax
f010cbf3:	48                   	dec    %eax
f010cbf4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010cbfa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010cc00:	ba 00 00 00 00       	mov    $0x0,%edx
f010cc05:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010cc0b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010cc11:	29 d0                	sub    %edx,%eax
f010cc13:	01 d8                	add    %ebx,%eax
f010cc15:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010cc1a:	39 c1                	cmp    %eax,%ecx
f010cc1c:	74 14                	je     f010cc32 <test_kmalloc+0x6da>
f010cc1e:	83 ec 04             	sub    $0x4,%esp
f010cc21:	68 54 b6 11 f0       	push   $0xf011b654
f010cc26:	6a 68                	push   $0x68
f010cc28:	68 76 b5 11 f0       	push   $0xf011b576
f010cc2d:	e8 44 35 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010cc32:	e8 6a f2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cc37:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010cc3a:	74 14                	je     f010cc50 <test_kmalloc+0x6f8>
f010cc3c:	83 ec 04             	sub    $0x4,%esp
f010cc3f:	68 88 b5 11 f0       	push   $0xf011b588
f010cc44:	6a 69                	push   $0x69
f010cc46:	68 76 b5 11 f0       	push   $0xf011b576
f010cc4b:	e8 26 35 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cc50:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010cc53:	e8 86 dd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cc58:	29 c3                	sub    %eax,%ebx
f010cc5a:	89 d8                	mov    %ebx,%eax
f010cc5c:	3d 00 03 00 00       	cmp    $0x300,%eax
f010cc61:	74 14                	je     f010cc77 <test_kmalloc+0x71f>
f010cc63:	83 ec 04             	sub    $0x4,%esp
f010cc66:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010cc6b:	6a 6a                	push   $0x6a
f010cc6d:	68 76 b5 11 f0       	push   $0xf011b576
f010cc72:	e8 ff 34 ff ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010cc77:	e8 62 dd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cc7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010cc7f:	e8 1d f2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cc84:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010cc87:	83 ec 0c             	sub    $0xc,%esp
f010cc8a:	68 00 fc 5f 00       	push   $0x5ffc00
f010cc8f:	e8 dc f6 ff ff       	call   f010c370 <kmalloc>
f010cc94:	83 c4 10             	add    $0x10,%esp
f010cc97:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010cc9d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010cca3:	89 c1                	mov    %eax,%ecx
f010cca5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010ccac:	10 00 00 
f010ccaf:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ccb4:	0f b6 d0             	movzbl %al,%edx
f010ccb7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010ccbd:	01 d0                	add    %edx,%eax
f010ccbf:	48                   	dec    %eax
f010ccc0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010ccc6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010cccc:	ba 00 00 00 00       	mov    $0x0,%edx
f010ccd1:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010ccd7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010ccdd:	29 d0                	sub    %edx,%eax
f010ccdf:	89 c3                	mov    %eax,%ebx
f010cce1:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010cce8:	10 00 00 
f010cceb:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ccf0:	0f b6 c0             	movzbl %al,%eax
f010ccf3:	c1 e0 04             	shl    $0x4,%eax
f010ccf6:	89 c2                	mov    %eax,%edx
f010ccf8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010ccfe:	01 d0                	add    %edx,%eax
f010cd00:	48                   	dec    %eax
f010cd01:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010cd07:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010cd0d:	ba 00 00 00 00       	mov    $0x0,%edx
f010cd12:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010cd18:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010cd1e:	29 d0                	sub    %edx,%eax
f010cd20:	01 d8                	add    %ebx,%eax
f010cd22:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010cd27:	39 c1                	cmp    %eax,%ecx
f010cd29:	74 14                	je     f010cd3f <test_kmalloc+0x7e7>
f010cd2b:	83 ec 04             	sub    $0x4,%esp
f010cd2e:	68 54 b6 11 f0       	push   $0xf011b654
f010cd33:	6a 70                	push   $0x70
f010cd35:	68 76 b5 11 f0       	push   $0xf011b576
f010cd3a:	e8 37 34 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010cd3f:	e8 5d f1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cd44:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010cd47:	74 14                	je     f010cd5d <test_kmalloc+0x805>
f010cd49:	83 ec 04             	sub    $0x4,%esp
f010cd4c:	68 88 b5 11 f0       	push   $0xf011b588
f010cd51:	6a 71                	push   $0x71
f010cd53:	68 76 b5 11 f0       	push   $0xf011b576
f010cd58:	e8 19 34 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010cd5d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010cd60:	e8 79 dc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cd65:	29 c3                	sub    %eax,%ebx
f010cd67:	89 d8                	mov    %ebx,%eax
f010cd69:	3d 00 06 00 00       	cmp    $0x600,%eax
f010cd6e:	74 14                	je     f010cd84 <test_kmalloc+0x82c>
f010cd70:	83 ec 04             	sub    $0x4,%esp
f010cd73:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010cd78:	6a 72                	push   $0x72
f010cd7a:	68 76 b5 11 f0       	push   $0xf011b576
f010cd7f:	e8 f2 33 ff ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010cd84:	e8 55 dc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cd89:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010cd8c:	e8 10 f1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010cd91:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010cd94:	83 ec 0c             	sub    $0xc,%esp
f010cd97:	68 00 38 00 00       	push   $0x3800
f010cd9c:	e8 cf f5 ff ff       	call   f010c370 <kmalloc>
f010cda1:	83 c4 10             	add    $0x10,%esp
f010cda4:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010cdaa:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010cdb0:	89 c1                	mov    %eax,%ecx
f010cdb2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010cdb9:	10 00 00 
f010cdbc:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010cdc1:	0f b6 d0             	movzbl %al,%edx
f010cdc4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010cdca:	01 d0                	add    %edx,%eax
f010cdcc:	48                   	dec    %eax
f010cdcd:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010cdd3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010cdd9:	ba 00 00 00 00       	mov    $0x0,%edx
f010cdde:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010cde4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010cdea:	29 d0                	sub    %edx,%eax
f010cdec:	89 c3                	mov    %eax,%ebx
f010cdee:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010cdf5:	10 00 00 
f010cdf8:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010cdfd:	0f b6 c0             	movzbl %al,%eax
f010ce00:	c1 e0 04             	shl    $0x4,%eax
f010ce03:	89 c2                	mov    %eax,%edx
f010ce05:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ce0b:	01 d0                	add    %edx,%eax
f010ce0d:	48                   	dec    %eax
f010ce0e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010ce14:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ce1a:	ba 00 00 00 00       	mov    $0x0,%edx
f010ce1f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010ce25:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ce2b:	29 d0                	sub    %edx,%eax
f010ce2d:	01 d8                	add    %ebx,%eax
f010ce2f:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f010ce34:	39 c1                	cmp    %eax,%ecx
f010ce36:	74 14                	je     f010ce4c <test_kmalloc+0x8f4>
f010ce38:	83 ec 04             	sub    $0x4,%esp
f010ce3b:	68 54 b6 11 f0       	push   $0xf011b654
f010ce40:	6a 78                	push   $0x78
f010ce42:	68 76 b5 11 f0       	push   $0xf011b576
f010ce47:	e8 2a 33 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ce4c:	e8 50 f0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ce51:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ce54:	74 14                	je     f010ce6a <test_kmalloc+0x912>
f010ce56:	83 ec 04             	sub    $0x4,%esp
f010ce59:	68 88 b5 11 f0       	push   $0xf011b588
f010ce5e:	6a 79                	push   $0x79
f010ce60:	68 76 b5 11 f0       	push   $0xf011b576
f010ce65:	e8 0c 33 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ce6a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010ce6d:	e8 6c db ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ce72:	29 c3                	sub    %eax,%ebx
f010ce74:	89 d8                	mov    %ebx,%eax
f010ce76:	83 f8 04             	cmp    $0x4,%eax
f010ce79:	74 14                	je     f010ce8f <test_kmalloc+0x937>
f010ce7b:	83 ec 04             	sub    $0x4,%esp
f010ce7e:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010ce83:	6a 7a                	push   $0x7a
f010ce85:	68 76 b5 11 f0       	push   $0xf011b576
f010ce8a:	e8 e7 32 ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b50%");
f010ce8f:	83 ec 0c             	sub    $0xc,%esp
f010ce92:	68 ba b6 11 f0       	push   $0xf011b6ba
f010ce97:	e8 33 9f ff ff       	call   f0106dcf <cprintf>
f010ce9c:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010ce9f:	e8 3a db ff ff       	call   f010a9de <sys_calculate_free_frames>
f010cea4:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010cea7:	e8 f5 ef ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ceac:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010ceaf:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010ceb6:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010ceb9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010cebf:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010cec5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010cecb:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010cece:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010ced0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010ced6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010cedc:	01 c2                	add    %eax,%edx
f010cede:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cee1:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010cee3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010cee9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010ceef:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010cef6:	fd 0f 00 
			shortArr[0] = minShort;
f010cef9:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010ceff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf02:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010cf05:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010cf0b:	01 c0                	add    %eax,%eax
f010cf0d:	89 c2                	mov    %eax,%edx
f010cf0f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010cf15:	01 c2                	add    %eax,%edx
f010cf17:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010cf1b:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010cf1e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010cf24:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010cf2a:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010cf31:	01 00 00 
			intArr[0] = minInt;
f010cf34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cf3a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf3d:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010cf3f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010cf45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cf4c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010cf52:	01 c2                	add    %eax,%edx
f010cf54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf57:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010cf59:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010cf5f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010cf65:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010cf6c:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010cf6f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cf75:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010cf78:	88 10                	mov    %dl,(%eax)
f010cf7a:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010cf80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf83:	66 89 42 02          	mov    %ax,0x2(%edx)
f010cf87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cf8d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf90:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010cf93:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cf99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cfa0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cfa6:	01 c2                	add    %eax,%edx
f010cfa8:	8a 45 f2             	mov    -0xe(%ebp),%al
f010cfab:	88 02                	mov    %al,(%edx)
f010cfad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cfb3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cfba:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cfc0:	01 c2                	add    %eax,%edx
f010cfc2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010cfc6:	66 89 42 02          	mov    %ax,0x2(%edx)
f010cfca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010cfd0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cfd7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010cfdd:	01 c2                	add    %eax,%edx
f010cfdf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cfe2:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010cfe5:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010cfec:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010cfef:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010cff5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010cffb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d001:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010d004:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010d006:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010d00c:	89 c2                	mov    %eax,%edx
f010d00e:	c1 ea 1f             	shr    $0x1f,%edx
f010d011:	01 d0                	add    %edx,%eax
f010d013:	d1 f8                	sar    %eax
f010d015:	89 c2                	mov    %eax,%edx
f010d017:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d01d:	01 c2                	add    %eax,%edx
f010d01f:	8a 45 f2             	mov    -0xe(%ebp),%al
f010d022:	88 c1                	mov    %al,%cl
f010d024:	c0 e9 07             	shr    $0x7,%cl
f010d027:	01 c8                	add    %ecx,%eax
f010d029:	d0 f8                	sar    %al
f010d02b:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010d02d:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010d033:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d039:	01 c2                	add    %eax,%edx
f010d03b:	8a 45 f2             	mov    -0xe(%ebp),%al
f010d03e:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010d040:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010d046:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010d04c:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010d053:	1b 00 00 
			shortArr2[0] = minShort;
f010d056:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010d05c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d05f:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010d062:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010d068:	01 c0                	add    %eax,%eax
f010d06a:	89 c2                	mov    %eax,%edx
f010d06c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010d072:	01 c2                	add    %eax,%edx
f010d074:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010d078:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010d07b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d081:	8a 00                	mov    (%eax),%al
f010d083:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010d086:	75 15                	jne    f010d09d <test_kmalloc+0xb45>
f010d088:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010d08e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d094:	01 d0                	add    %edx,%eax
f010d096:	8a 00                	mov    (%eax),%al
f010d098:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010d09b:	74 17                	je     f010d0b4 <test_kmalloc+0xb5c>
f010d09d:	83 ec 04             	sub    $0x4,%esp
f010d0a0:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d0a5:	68 a9 00 00 00       	push   $0xa9
f010d0aa:	68 76 b5 11 f0       	push   $0xf011b576
f010d0af:	e8 c2 30 ff ff       	call   f0100176 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010d0b4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d0ba:	66 8b 00             	mov    (%eax),%ax
f010d0bd:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010d0c1:	75 1b                	jne    f010d0de <test_kmalloc+0xb86>
f010d0c3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010d0c9:	01 c0                	add    %eax,%eax
f010d0cb:	89 c2                	mov    %eax,%edx
f010d0cd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010d0d3:	01 d0                	add    %edx,%eax
f010d0d5:	66 8b 00             	mov    (%eax),%ax
f010d0d8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010d0dc:	74 17                	je     f010d0f5 <test_kmalloc+0xb9d>
f010d0de:	83 ec 04             	sub    $0x4,%esp
f010d0e1:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d0e6:	68 aa 00 00 00       	push   $0xaa
f010d0eb:	68 76 b5 11 f0       	push   $0xf011b576
f010d0f0:	e8 81 30 ff ff       	call   f0100176 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010d0f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d0fb:	8b 00                	mov    (%eax),%eax
f010d0fd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010d100:	75 1c                	jne    f010d11e <test_kmalloc+0xbc6>
f010d102:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010d108:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d10f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010d115:	01 d0                	add    %edx,%eax
f010d117:	8b 00                	mov    (%eax),%eax
f010d119:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010d11c:	74 17                	je     f010d135 <test_kmalloc+0xbdd>
f010d11e:	83 ec 04             	sub    $0x4,%esp
f010d121:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d126:	68 ab 00 00 00       	push   $0xab
f010d12b:	68 76 b5 11 f0       	push   $0xf011b576
f010d130:	e8 41 30 ff ff       	call   f0100176 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010d135:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d13b:	8a 00                	mov    (%eax),%al
f010d13d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010d140:	75 1c                	jne    f010d15e <test_kmalloc+0xc06>
f010d142:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010d148:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d14f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d155:	01 d0                	add    %edx,%eax
f010d157:	8a 00                	mov    (%eax),%al
f010d159:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010d15c:	74 17                	je     f010d175 <test_kmalloc+0xc1d>
f010d15e:	83 ec 04             	sub    $0x4,%esp
f010d161:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d166:	68 ad 00 00 00       	push   $0xad
f010d16b:	68 76 b5 11 f0       	push   $0xf011b576
f010d170:	e8 01 30 ff ff       	call   f0100176 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010d175:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d17b:	66 8b 40 02          	mov    0x2(%eax),%ax
f010d17f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010d183:	75 1f                	jne    f010d1a4 <test_kmalloc+0xc4c>
f010d185:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010d18b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d192:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d198:	01 d0                	add    %edx,%eax
f010d19a:	66 8b 40 02          	mov    0x2(%eax),%ax
f010d19e:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010d1a2:	74 17                	je     f010d1bb <test_kmalloc+0xc63>
f010d1a4:	83 ec 04             	sub    $0x4,%esp
f010d1a7:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d1ac:	68 ae 00 00 00       	push   $0xae
f010d1b1:	68 76 b5 11 f0       	push   $0xf011b576
f010d1b6:	e8 bb 2f ff ff       	call   f0100176 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010d1bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d1c1:	8b 40 04             	mov    0x4(%eax),%eax
f010d1c4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010d1c7:	75 1d                	jne    f010d1e6 <test_kmalloc+0xc8e>
f010d1c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010d1cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d1d6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010d1dc:	01 d0                	add    %edx,%eax
f010d1de:	8b 40 04             	mov    0x4(%eax),%eax
f010d1e1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010d1e4:	74 17                	je     f010d1fd <test_kmalloc+0xca5>
f010d1e6:	83 ec 04             	sub    $0x4,%esp
f010d1e9:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d1ee:	68 af 00 00 00       	push   $0xaf
f010d1f3:	68 76 b5 11 f0       	push   $0xf011b576
f010d1f8:	e8 79 2f ff ff       	call   f0100176 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010d1fd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d203:	8a 00                	mov    (%eax),%al
f010d205:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010d208:	75 40                	jne    f010d24a <test_kmalloc+0xcf2>
f010d20a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010d210:	89 c2                	mov    %eax,%edx
f010d212:	c1 ea 1f             	shr    $0x1f,%edx
f010d215:	01 d0                	add    %edx,%eax
f010d217:	d1 f8                	sar    %eax
f010d219:	89 c2                	mov    %eax,%edx
f010d21b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d221:	01 d0                	add    %edx,%eax
f010d223:	8a 10                	mov    (%eax),%dl
f010d225:	8a 45 f2             	mov    -0xe(%ebp),%al
f010d228:	88 c1                	mov    %al,%cl
f010d22a:	c0 e9 07             	shr    $0x7,%cl
f010d22d:	01 c8                	add    %ecx,%eax
f010d22f:	d0 f8                	sar    %al
f010d231:	38 c2                	cmp    %al,%dl
f010d233:	75 15                	jne    f010d24a <test_kmalloc+0xcf2>
f010d235:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010d23b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010d241:	01 d0                	add    %edx,%eax
f010d243:	8a 00                	mov    (%eax),%al
f010d245:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010d248:	74 17                	je     f010d261 <test_kmalloc+0xd09>
f010d24a:	83 ec 04             	sub    $0x4,%esp
f010d24d:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d252:	68 b1 00 00 00       	push   $0xb1
f010d257:	68 76 b5 11 f0       	push   $0xf011b576
f010d25c:	e8 15 2f ff ff       	call   f0100176 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010d261:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010d267:	66 8b 00             	mov    (%eax),%ax
f010d26a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010d26e:	75 1b                	jne    f010d28b <test_kmalloc+0xd33>
f010d270:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010d276:	01 c0                	add    %eax,%eax
f010d278:	89 c2                	mov    %eax,%edx
f010d27a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010d280:	01 d0                	add    %edx,%eax
f010d282:	66 8b 00             	mov    (%eax),%ax
f010d285:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010d289:	74 17                	je     f010d2a2 <test_kmalloc+0xd4a>
f010d28b:	83 ec 04             	sub    $0x4,%esp
f010d28e:	68 c4 b6 11 f0       	push   $0xf011b6c4
f010d293:	68 b2 00 00 00       	push   $0xb2
f010d298:	68 76 b5 11 f0       	push   $0xf011b576
f010d29d:	e8 d4 2e ff ff       	call   f0100176 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d2a2:	e8 37 d7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010d2a7:	89 c2                	mov    %eax,%edx
f010d2a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d2ac:	39 c2                	cmp    %eax,%edx
f010d2ae:	74 17                	je     f010d2c7 <test_kmalloc+0xd6f>
f010d2b0:	83 ec 04             	sub    $0x4,%esp
f010d2b3:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010d2b8:	68 b4 00 00 00       	push   $0xb4
f010d2bd:	68 76 b5 11 f0       	push   $0xf011b576
f010d2c2:	e8 af 2e ff ff       	call   f0100176 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d2c7:	e8 d5 eb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010d2cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d2cf:	74 17                	je     f010d2e8 <test_kmalloc+0xd90>
f010d2d1:	83 ec 04             	sub    $0x4,%esp
f010d2d4:	68 88 b5 11 f0       	push   $0xf011b588
f010d2d9:	68 b5 00 00 00       	push   $0xb5
f010d2de:	68 76 b5 11 f0       	push   $0xf011b576
f010d2e3:	e8 8e 2e ff ff       	call   f0100176 <_panic>
		}

		cprintf("\b\b\b80%");
f010d2e8:	83 ec 0c             	sub    $0xc,%esp
f010d2eb:	68 f9 b6 11 f0       	push   $0xf011b6f9
f010d2f0:	e8 da 9a ff ff       	call   f0106dcf <cprintf>
f010d2f5:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010d2f8:	e8 e1 d6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010d2fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d300:	e8 9c eb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010d305:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010d308:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010d30f:	10 00 00 
f010d312:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d317:	0f b6 d0             	movzbl %al,%edx
f010d31a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010d320:	01 d0                	add    %edx,%eax
f010d322:	48                   	dec    %eax
f010d323:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010d329:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010d32f:	ba 00 00 00 00       	mov    $0x0,%edx
f010d334:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010d33a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010d340:	29 d0                	sub    %edx,%eax
f010d342:	89 c1                	mov    %eax,%ecx
f010d344:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010d34b:	10 00 00 
f010d34e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d353:	0f b6 c0             	movzbl %al,%eax
f010d356:	c1 e0 04             	shl    $0x4,%eax
f010d359:	89 c2                	mov    %eax,%edx
f010d35b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010d361:	01 d0                	add    %edx,%eax
f010d363:	48                   	dec    %eax
f010d364:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010d36a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010d370:	ba 00 00 00 00       	mov    $0x0,%edx
f010d375:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010d37b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010d381:	29 d0                	sub    %edx,%eax
f010d383:	01 c8                	add    %ecx,%eax
f010d385:	ba 00 90 2f 09       	mov    $0x92f9000,%edx
f010d38a:	29 c2                	sub    %eax,%edx
f010d38c:	89 d0                	mov    %edx,%eax
f010d38e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010d394:	83 ec 0c             	sub    $0xc,%esp
f010d397:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010d39d:	e8 ce ef ff ff       	call   f010c370 <kmalloc>
f010d3a2:	83 c4 10             	add    $0x10,%esp
f010d3a5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010d3ab:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010d3b1:	85 c0                	test   %eax,%eax
f010d3b3:	74 17                	je     f010d3cc <test_kmalloc+0xe74>
f010d3b5:	83 ec 04             	sub    $0x4,%esp
f010d3b8:	68 44 b5 11 f0       	push   $0xf011b544
f010d3bd:	68 bf 00 00 00       	push   $0xbf
f010d3c2:	68 76 b5 11 f0       	push   $0xf011b576
f010d3c7:	e8 aa 2d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d3cc:	e8 d0 ea ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010d3d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d3d4:	74 17                	je     f010d3ed <test_kmalloc+0xe95>
f010d3d6:	83 ec 04             	sub    $0x4,%esp
f010d3d9:	68 88 b5 11 f0       	push   $0xf011b588
f010d3de:	68 c0 00 00 00       	push   $0xc0
f010d3e3:	68 76 b5 11 f0       	push   $0xf011b576
f010d3e8:	e8 89 2d ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d3ed:	e8 ec d5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010d3f2:	89 c2                	mov    %eax,%edx
f010d3f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d3f7:	39 c2                	cmp    %eax,%edx
f010d3f9:	74 17                	je     f010d412 <test_kmalloc+0xeba>
f010d3fb:	83 ec 04             	sub    $0x4,%esp
f010d3fe:	68 f0 b5 11 f0       	push   $0xf011b5f0
f010d403:	68 c1 00 00 00       	push   $0xc1
f010d408:	68 76 b5 11 f0       	push   $0xf011b576
f010d40d:	e8 64 2d ff ff       	call   f0100176 <_panic>

		cprintf("\b\b\b90%");
f010d412:	83 ec 0c             	sub    $0xc,%esp
f010d415:	68 00 b7 11 f0       	push   $0xf011b700
f010d41a:	e8 b0 99 ff ff       	call   f0106dcf <cprintf>
f010d41f:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010d422:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010d428:	05 00 40 00 00       	add    $0x4000,%eax
f010d42d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010d433:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010d43a:	10 00 00 
f010d43d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d442:	0f b6 d0             	movzbl %al,%edx
f010d445:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010d44b:	01 d0                	add    %edx,%eax
f010d44d:	48                   	dec    %eax
f010d44e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010d454:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010d45a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d45f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010d465:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010d46b:	29 d0                	sub    %edx,%eax
f010d46d:	89 c1                	mov    %eax,%ecx
f010d46f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010d476:	10 00 00 
f010d479:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d47e:	0f b6 c0             	movzbl %al,%eax
f010d481:	c1 e0 04             	shl    $0x4,%eax
f010d484:	89 c2                	mov    %eax,%edx
f010d486:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010d48c:	01 d0                	add    %edx,%eax
f010d48e:	48                   	dec    %eax
f010d48f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010d495:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010d49b:	ba 00 00 00 00       	mov    $0x0,%edx
f010d4a0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010d4a6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010d4ac:	29 d0                	sub    %edx,%eax
f010d4ae:	01 c8                	add    %ecx,%eax
f010d4b0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010d4b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4b8:	eb 6b                	jmp    f010d525 <test_kmalloc+0xfcd>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010d4ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4bd:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f010d4c2:	83 ec 04             	sub    $0x4,%esp
f010d4c5:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010d4cb:	51                   	push   %ecx
f010d4cc:	52                   	push   %edx
f010d4cd:	50                   	push   %eax
f010d4ce:	e8 42 66 ff ff       	call   f0103b15 <get_page_table>
f010d4d3:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010d4d6:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010d4dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4df:	c1 ea 0c             	shr    $0xc,%edx
f010d4e2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010d4e8:	c1 e2 02             	shl    $0x2,%edx
f010d4eb:	01 d0                	add    %edx,%eax
f010d4ed:	8b 00                	mov    (%eax),%eax
f010d4ef:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d4f4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010d4fa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010d500:	83 e0 04             	and    $0x4,%eax
f010d503:	85 c0                	test   %eax,%eax
f010d505:	74 17                	je     f010d51e <test_kmalloc+0xfc6>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010d507:	83 ec 04             	sub    $0x4,%esp
f010d50a:	68 08 b7 11 f0       	push   $0xf011b708
f010d50f:	68 ce 00 00 00       	push   $0xce
f010d514:	68 76 b5 11 f0       	push   $0xf011b576
f010d519:	e8 58 2c ff ff       	call   f0100176 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010d51e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010d525:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d528:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010d52e:	72 8a                	jb     f010d4ba <test_kmalloc+0xf62>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010d530:	83 ec 0c             	sub    $0xc,%esp
f010d533:	68 52 b7 11 f0       	push   $0xf011b752
f010d538:	e8 92 98 ff ff       	call   f0106dcf <cprintf>
f010d53d:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010d540:	83 ec 0c             	sub    $0xc,%esp
f010d543:	68 5c b7 11 f0       	push   $0xf011b75c
f010d548:	e8 82 98 ff ff       	call   f0106dcf <cprintf>
f010d54d:	83 c4 10             	add    $0x10,%esp

	return 1;
f010d550:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010d555:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d558:	5b                   	pop    %ebx
f010d559:	5f                   	pop    %edi
f010d55a:	5d                   	pop    %ebp
f010d55b:	c3                   	ret    

f010d55c <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010d55c:	55                   	push   %ebp
f010d55d:	89 e5                	mov    %esp,%ebp
f010d55f:	57                   	push   %edi
f010d560:	53                   	push   %ebx
f010d561:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010d567:	83 ec 0c             	sub    $0xc,%esp
f010d56a:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010d56f:	e8 5b 98 ff ff       	call   f0106dcf <cprintf>
f010d574:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010d577:	83 ec 0c             	sub    $0xc,%esp
f010d57a:	68 e8 b4 11 f0       	push   $0xf011b4e8
f010d57f:	e8 4b 98 ff ff       	call   f0106dcf <cprintf>
f010d584:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010d587:	83 ec 0c             	sub    $0xc,%esp
f010d58a:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010d58f:	e8 3b 98 ff ff       	call   f0106dcf <cprintf>
f010d594:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010d597:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010d59d:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010d5a2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5a7:	89 d7                	mov    %edx,%edi
f010d5a9:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010d5ab:	83 ec 0c             	sub    $0xc,%esp
f010d5ae:	68 98 b7 11 f0       	push   $0xf011b798
f010d5b3:	e8 17 98 ff ff       	call   f0106dcf <cprintf>
f010d5b8:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010d5bb:	e8 1e d4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010d5c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010d5c3:	e8 d9 e8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010d5c8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010d5cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d5d2:	eb 1f                	jmp    f010d5f3 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010d5d4:	83 ec 0c             	sub    $0xc,%esp
f010d5d7:	68 00 00 20 00       	push   $0x200000
f010d5dc:	e8 8f ed ff ff       	call   f010c370 <kmalloc>
f010d5e1:	83 c4 10             	add    $0x10,%esp
f010d5e4:	89 c2                	mov    %eax,%edx
f010d5e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5e9:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010d5f0:	ff 45 f4             	incl   -0xc(%ebp)
f010d5f3:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010d5f7:	7e db                	jle    f010d5d4 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f010d5f9:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010d600:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d605:	0f b6 d0             	movzbl %al,%edx
f010d608:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d60b:	01 d0                	add    %edx,%eax
f010d60d:	48                   	dec    %eax
f010d60e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d611:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d614:	ba 00 00 00 00       	mov    $0x0,%edx
f010d619:	f7 75 e8             	divl   -0x18(%ebp)
f010d61c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d61f:	29 d0                	sub    %edx,%eax
f010d621:	89 c1                	mov    %eax,%ecx
f010d623:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010d62a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d62f:	0f b6 c0             	movzbl %al,%eax
f010d632:	c1 e0 04             	shl    $0x4,%eax
f010d635:	89 c2                	mov    %eax,%edx
f010d637:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d63a:	01 d0                	add    %edx,%eax
f010d63c:	48                   	dec    %eax
f010d63d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d640:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d643:	ba 00 00 00 00       	mov    $0x0,%edx
f010d648:	f7 75 e0             	divl   -0x20(%ebp)
f010d64b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d64e:	29 d0                	sub    %edx,%eax
f010d650:	01 c8                	add    %ecx,%eax
f010d652:	ba 00 f0 1f 00       	mov    $0x1ff000,%edx
f010d657:	29 c2                	sub    %eax,%edx
f010d659:	89 d0                	mov    %edx,%eax
f010d65b:	83 ec 0c             	sub    $0xc,%esp
f010d65e:	50                   	push   %eax
f010d65f:	e8 0c ed ff ff       	call   f010c370 <kmalloc>
f010d664:	83 c4 10             	add    $0x10,%esp
f010d667:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010d66d:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010d673:	89 c1                	mov    %eax,%ecx
f010d675:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010d67c:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d681:	0f b6 d0             	movzbl %al,%edx
f010d684:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d687:	01 d0                	add    %edx,%eax
f010d689:	48                   	dec    %eax
f010d68a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010d68d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d690:	ba 00 00 00 00       	mov    $0x0,%edx
f010d695:	f7 75 d8             	divl   -0x28(%ebp)
f010d698:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d69b:	29 d0                	sub    %edx,%eax
f010d69d:	89 c3                	mov    %eax,%ebx
f010d69f:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010d6a6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d6ab:	0f b6 c0             	movzbl %al,%eax
f010d6ae:	c1 e0 04             	shl    $0x4,%eax
f010d6b1:	89 c2                	mov    %eax,%edx
f010d6b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d6b6:	01 d0                	add    %edx,%eax
f010d6b8:	48                   	dec    %eax
f010d6b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010d6bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d6bf:	ba 00 00 00 00       	mov    $0x0,%edx
f010d6c4:	f7 75 d0             	divl   -0x30(%ebp)
f010d6c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d6ca:	29 d0                	sub    %edx,%eax
f010d6cc:	01 d8                	add    %ebx,%eax
f010d6ce:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010d6d3:	39 c1                	cmp    %eax,%ecx
f010d6d5:	0f 85 4f 03 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010d6db:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010d6e1:	89 c1                	mov    %eax,%ecx
f010d6e3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010d6ea:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d6ef:	0f b6 d0             	movzbl %al,%edx
f010d6f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d6f5:	01 d0                	add    %edx,%eax
f010d6f7:	48                   	dec    %eax
f010d6f8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010d6fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d6fe:	ba 00 00 00 00       	mov    $0x0,%edx
f010d703:	f7 75 c8             	divl   -0x38(%ebp)
f010d706:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d709:	29 d0                	sub    %edx,%eax
f010d70b:	89 c3                	mov    %eax,%ebx
f010d70d:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010d714:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d719:	0f b6 c0             	movzbl %al,%eax
f010d71c:	c1 e0 04             	shl    $0x4,%eax
f010d71f:	89 c2                	mov    %eax,%edx
f010d721:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d724:	01 d0                	add    %edx,%eax
f010d726:	48                   	dec    %eax
f010d727:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010d72a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d72d:	ba 00 00 00 00       	mov    $0x0,%edx
f010d732:	f7 75 c0             	divl   -0x40(%ebp)
f010d735:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d738:	29 d0                	sub    %edx,%eax
f010d73a:	01 d8                	add    %ebx,%eax
f010d73c:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010d741:	39 c1                	cmp    %eax,%ecx
f010d743:	0f 85 e1 02 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010d749:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010d74f:	89 c1                	mov    %eax,%ecx
f010d751:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010d758:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d75d:	0f b6 d0             	movzbl %al,%edx
f010d760:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010d763:	01 d0                	add    %edx,%eax
f010d765:	48                   	dec    %eax
f010d766:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010d769:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d76c:	ba 00 00 00 00       	mov    $0x0,%edx
f010d771:	f7 75 b8             	divl   -0x48(%ebp)
f010d774:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d777:	29 d0                	sub    %edx,%eax
f010d779:	89 c3                	mov    %eax,%ebx
f010d77b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010d782:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d787:	0f b6 c0             	movzbl %al,%eax
f010d78a:	c1 e0 04             	shl    $0x4,%eax
f010d78d:	89 c2                	mov    %eax,%edx
f010d78f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010d792:	01 d0                	add    %edx,%eax
f010d794:	48                   	dec    %eax
f010d795:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010d798:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d79b:	ba 00 00 00 00       	mov    $0x0,%edx
f010d7a0:	f7 75 b0             	divl   -0x50(%ebp)
f010d7a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d7a6:	29 d0                	sub    %edx,%eax
f010d7a8:	01 d8                	add    %ebx,%eax
f010d7aa:	2d 00 00 00 09       	sub    $0x9000000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010d7af:	39 c1                	cmp    %eax,%ecx
f010d7b1:	0f 85 73 02 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010d7b7:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010d7bd:	89 c1                	mov    %eax,%ecx
f010d7bf:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010d7c6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d7cb:	0f b6 d0             	movzbl %al,%edx
f010d7ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010d7d1:	01 d0                	add    %edx,%eax
f010d7d3:	48                   	dec    %eax
f010d7d4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010d7d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d7da:	ba 00 00 00 00       	mov    $0x0,%edx
f010d7df:	f7 75 a8             	divl   -0x58(%ebp)
f010d7e2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d7e5:	29 d0                	sub    %edx,%eax
f010d7e7:	89 c3                	mov    %eax,%ebx
f010d7e9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010d7f0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d7f5:	0f b6 c0             	movzbl %al,%eax
f010d7f8:	c1 e0 04             	shl    $0x4,%eax
f010d7fb:	89 c2                	mov    %eax,%edx
f010d7fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010d800:	01 d0                	add    %edx,%eax
f010d802:	48                   	dec    %eax
f010d803:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010d806:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d809:	ba 00 00 00 00       	mov    $0x0,%edx
f010d80e:	f7 75 a0             	divl   -0x60(%ebp)
f010d811:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d814:	29 d0                	sub    %edx,%eax
f010d816:	01 d8                	add    %ebx,%eax
f010d818:	2d 00 00 c0 08       	sub    $0x8c00000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010d81d:	39 c1                	cmp    %eax,%ecx
f010d81f:	0f 85 05 02 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010d825:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010d82b:	89 c1                	mov    %eax,%ecx
f010d82d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010d834:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d839:	0f b6 d0             	movzbl %al,%edx
f010d83c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010d83f:	01 d0                	add    %edx,%eax
f010d841:	48                   	dec    %eax
f010d842:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010d845:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d848:	ba 00 00 00 00       	mov    $0x0,%edx
f010d84d:	f7 75 98             	divl   -0x68(%ebp)
f010d850:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d853:	29 d0                	sub    %edx,%eax
f010d855:	89 c3                	mov    %eax,%ebx
f010d857:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010d85e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d863:	0f b6 c0             	movzbl %al,%eax
f010d866:	c1 e0 04             	shl    $0x4,%eax
f010d869:	89 c2                	mov    %eax,%edx
f010d86b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010d86e:	01 d0                	add    %edx,%eax
f010d870:	48                   	dec    %eax
f010d871:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010d874:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d877:	ba 00 00 00 00       	mov    $0x0,%edx
f010d87c:	f7 75 90             	divl   -0x70(%ebp)
f010d87f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d882:	29 d0                	sub    %edx,%eax
f010d884:	01 d8                	add    %ebx,%eax
f010d886:	2d 00 00 20 08       	sub    $0x8200000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010d88b:	39 c1                	cmp    %eax,%ecx
f010d88d:	0f 85 97 01 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010d893:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010d899:	89 c1                	mov    %eax,%ecx
f010d89b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010d8a2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d8a7:	0f b6 d0             	movzbl %al,%edx
f010d8aa:	8b 45 88             	mov    -0x78(%ebp),%eax
f010d8ad:	01 d0                	add    %edx,%eax
f010d8af:	48                   	dec    %eax
f010d8b0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010d8b3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d8b6:	ba 00 00 00 00       	mov    $0x0,%edx
f010d8bb:	f7 75 88             	divl   -0x78(%ebp)
f010d8be:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d8c1:	29 d0                	sub    %edx,%eax
f010d8c3:	89 c3                	mov    %eax,%ebx
f010d8c5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010d8cc:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d8d1:	0f b6 c0             	movzbl %al,%eax
f010d8d4:	c1 e0 04             	shl    $0x4,%eax
f010d8d7:	89 c2                	mov    %eax,%edx
f010d8d9:	8b 45 80             	mov    -0x80(%ebp),%eax
f010d8dc:	01 d0                	add    %edx,%eax
f010d8de:	48                   	dec    %eax
f010d8df:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010d8e5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d8eb:	ba 00 00 00 00       	mov    $0x0,%edx
f010d8f0:	f7 75 80             	divl   -0x80(%ebp)
f010d8f3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d8f9:	29 d0                	sub    %edx,%eax
f010d8fb:	01 d8                	add    %ebx,%eax
f010d8fd:	2d 00 00 80 07       	sub    $0x7800000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010d902:	39 c1                	cmp    %eax,%ecx
f010d904:	0f 85 20 01 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010d90a:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010d910:	89 c1                	mov    %eax,%ecx
f010d912:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010d919:	10 00 00 
f010d91c:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d921:	0f b6 d0             	movzbl %al,%edx
f010d924:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010d92a:	01 d0                	add    %edx,%eax
f010d92c:	48                   	dec    %eax
f010d92d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010d933:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d939:	ba 00 00 00 00       	mov    $0x0,%edx
f010d93e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010d944:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d94a:	29 d0                	sub    %edx,%eax
f010d94c:	89 c3                	mov    %eax,%ebx
f010d94e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010d955:	10 00 00 
f010d958:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d95d:	0f b6 c0             	movzbl %al,%eax
f010d960:	c1 e0 04             	shl    $0x4,%eax
f010d963:	89 c2                	mov    %eax,%edx
f010d965:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010d96b:	01 d0                	add    %edx,%eax
f010d96d:	48                   	dec    %eax
f010d96e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010d974:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d97a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d97f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010d985:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d98b:	29 d0                	sub    %edx,%eax
f010d98d:	01 d8                	add    %ebx,%eax
f010d98f:	2d 00 00 e0 06       	sub    $0x6e00000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010d994:	39 c1                	cmp    %eax,%ecx
f010d996:	0f 85 8e 00 00 00    	jne    f010da2a <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010d99c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010d9a2:	89 c1                	mov    %eax,%ecx
f010d9a4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010d9ab:	10 00 00 
f010d9ae:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d9b3:	0f b6 d0             	movzbl %al,%edx
f010d9b6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010d9bc:	01 d0                	add    %edx,%eax
f010d9be:	48                   	dec    %eax
f010d9bf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010d9c5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d9cb:	ba 00 00 00 00       	mov    $0x0,%edx
f010d9d0:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010d9d6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d9dc:	29 d0                	sub    %edx,%eax
f010d9de:	89 c3                	mov    %eax,%ebx
f010d9e0:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010d9e7:	10 00 00 
f010d9ea:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010d9ef:	0f b6 c0             	movzbl %al,%eax
f010d9f2:	c1 e0 04             	shl    $0x4,%eax
f010d9f5:	89 c2                	mov    %eax,%edx
f010d9f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010d9fd:	01 d0                	add    %edx,%eax
f010d9ff:	48                   	dec    %eax
f010da00:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010da06:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010da0c:	ba 00 00 00 00       	mov    $0x0,%edx
f010da11:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010da17:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010da1d:	29 d0                	sub    %edx,%eax
f010da1f:	01 d8                	add    %ebx,%eax
f010da21:	2d 00 00 20 00       	sub    $0x200000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010da26:	39 c1                	cmp    %eax,%ecx
f010da28:	74 17                	je     f010da41 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010da2a:	83 ec 04             	sub    $0x4,%esp
f010da2d:	68 e8 b7 11 f0       	push   $0xf011b7e8
f010da32:	68 fa 00 00 00       	push   $0xfa
f010da37:	68 76 b5 11 f0       	push   $0xf011b576
f010da3c:	e8 35 27 ff ff       	call   f0100176 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010da41:	e8 5b e4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010da46:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da49:	74 17                	je     f010da62 <test_kmalloc_nextfit+0x506>
f010da4b:	83 ec 04             	sub    $0x4,%esp
f010da4e:	68 88 b5 11 f0       	push   $0xf011b588
f010da53:	68 fc 00 00 00       	push   $0xfc
f010da58:	68 76 b5 11 f0       	push   $0xf011b576
f010da5d:	e8 14 27 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010da62:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010da65:	e8 74 cf ff ff       	call   f010a9de <sys_calculate_free_frames>
f010da6a:	29 c3                	sub    %eax,%ebx
f010da6c:	89 d9                	mov    %ebx,%ecx
f010da6e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010da75:	10 00 00 
f010da78:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010da7d:	0f b6 d0             	movzbl %al,%edx
f010da80:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010da86:	01 d0                	add    %edx,%eax
f010da88:	48                   	dec    %eax
f010da89:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010da8f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010da95:	ba 00 00 00 00       	mov    $0x0,%edx
f010da9a:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010daa0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010daa6:	29 d0                	sub    %edx,%eax
f010daa8:	89 c3                	mov    %eax,%ebx
f010daaa:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010dab1:	10 00 00 
f010dab4:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010dab9:	0f b6 c0             	movzbl %al,%eax
f010dabc:	c1 e0 04             	shl    $0x4,%eax
f010dabf:	89 c2                	mov    %eax,%edx
f010dac1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010dac7:	01 d0                	add    %edx,%eax
f010dac9:	48                   	dec    %eax
f010daca:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010dad0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010dad6:	ba 00 00 00 00       	mov    $0x0,%edx
f010dadb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010dae1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010dae7:	29 d0                	sub    %edx,%eax
f010dae9:	01 d8                	add    %ebx,%eax
f010daeb:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f010daf0:	29 c2                	sub    %eax,%edx
f010daf2:	89 d0                	mov    %edx,%eax
f010daf4:	c1 e8 0c             	shr    $0xc,%eax
f010daf7:	39 c1                	cmp    %eax,%ecx
f010daf9:	74 17                	je     f010db12 <test_kmalloc_nextfit+0x5b6>
f010dafb:	83 ec 04             	sub    $0x4,%esp
f010dafe:	68 2b b8 11 f0       	push   $0xf011b82b
f010db03:	68 fd 00 00 00       	push   $0xfd
f010db08:	68 76 b5 11 f0       	push   $0xf011b576
f010db0d:	e8 64 26 ff ff       	call   f0100176 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f010db12:	e8 8a e3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010db17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010db1a:	e8 bf ce ff ff       	call   f010a9de <sys_calculate_free_frames>
f010db1f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f010db22:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010db28:	83 ec 0c             	sub    $0xc,%esp
f010db2b:	50                   	push   %eax
f010db2c:	e8 a5 e8 ff ff       	call   f010c3d6 <kfree>
f010db31:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f010db34:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010db3a:	83 ec 0c             	sub    $0xc,%esp
f010db3d:	50                   	push   %eax
f010db3e:	e8 93 e8 ff ff       	call   f010c3d6 <kfree>
f010db43:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f010db46:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f010db4c:	83 ec 0c             	sub    $0xc,%esp
f010db4f:	50                   	push   %eax
f010db50:	e8 81 e8 ff ff       	call   f010c3d6 <kfree>
f010db55:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f010db58:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f010db5e:	83 ec 0c             	sub    $0xc,%esp
f010db61:	50                   	push   %eax
f010db62:	e8 6f e8 ff ff       	call   f010c3d6 <kfree>
f010db67:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f010db6a:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010db70:	83 ec 0c             	sub    $0xc,%esp
f010db73:	50                   	push   %eax
f010db74:	e8 5d e8 ff ff       	call   f010c3d6 <kfree>
f010db79:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f010db7c:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f010db82:	83 ec 0c             	sub    $0xc,%esp
f010db85:	50                   	push   %eax
f010db86:	e8 4b e8 ff ff       	call   f010c3d6 <kfree>
f010db8b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f010db8e:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f010db94:	83 ec 0c             	sub    $0xc,%esp
f010db97:	50                   	push   %eax
f010db98:	e8 39 e8 ff ff       	call   f010c3d6 <kfree>
f010db9d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f010dba0:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010dba6:	83 ec 0c             	sub    $0xc,%esp
f010dba9:	50                   	push   %eax
f010dbaa:	e8 27 e8 ff ff       	call   f010c3d6 <kfree>
f010dbaf:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f010dbb2:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010dbb8:	83 ec 0c             	sub    $0xc,%esp
f010dbbb:	50                   	push   %eax
f010dbbc:	e8 15 e8 ff ff       	call   f010c3d6 <kfree>
f010dbc1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f010dbc4:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010dbca:	83 ec 0c             	sub    $0xc,%esp
f010dbcd:	50                   	push   %eax
f010dbce:	e8 03 e8 ff ff       	call   f010c3d6 <kfree>
f010dbd3:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dbd6:	e8 c6 e2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010dbdb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dbde:	74 17                	je     f010dbf7 <test_kmalloc_nextfit+0x69b>
f010dbe0:	83 ec 04             	sub    $0x4,%esp
f010dbe3:	68 88 b5 11 f0       	push   $0xf011b588
f010dbe8:	68 0e 01 00 00       	push   $0x10e
f010dbed:	68 76 b5 11 f0       	push   $0xf011b576
f010dbf2:	e8 7f 25 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010dbf7:	e8 e2 cd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dbfc:	89 c2                	mov    %eax,%edx
f010dbfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc01:	89 d1                	mov    %edx,%ecx
f010dc03:	29 c1                	sub    %eax,%ecx
f010dc05:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010dc0c:	10 00 00 
f010dc0f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010dc14:	0f b6 d0             	movzbl %al,%edx
f010dc17:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010dc1d:	01 d0                	add    %edx,%eax
f010dc1f:	48                   	dec    %eax
f010dc20:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010dc26:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010dc2c:	ba 00 00 00 00       	mov    $0x0,%edx
f010dc31:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010dc37:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010dc3d:	29 d0                	sub    %edx,%eax
f010dc3f:	89 c3                	mov    %eax,%ebx
f010dc41:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f010dc48:	10 00 00 
f010dc4b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010dc50:	0f b6 c0             	movzbl %al,%eax
f010dc53:	c1 e0 04             	shl    $0x4,%eax
f010dc56:	89 c2                	mov    %eax,%edx
f010dc58:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010dc5e:	01 d0                	add    %edx,%eax
f010dc60:	48                   	dec    %eax
f010dc61:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f010dc67:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010dc6d:	ba 00 00 00 00       	mov    $0x0,%edx
f010dc72:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f010dc78:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010dc7e:	29 d0                	sub    %edx,%eax
f010dc80:	01 d8                	add    %ebx,%eax
f010dc82:	ba 00 f0 3f 01       	mov    $0x13ff000,%edx
f010dc87:	29 c2                	sub    %eax,%edx
f010dc89:	89 d0                	mov    %edx,%eax
f010dc8b:	c1 e8 0c             	shr    $0xc,%eax
f010dc8e:	39 c1                	cmp    %eax,%ecx
f010dc90:	74 17                	je     f010dca9 <test_kmalloc_nextfit+0x74d>
f010dc92:	83 ec 04             	sub    $0x4,%esp
f010dc95:	68 3c b8 11 f0       	push   $0xf011b83c
f010dc9a:	68 0f 01 00 00       	push   $0x10f
f010dc9f:	68 76 b5 11 f0       	push   $0xf011b576
f010dca4:	e8 cd 24 ff ff       	call   f0100176 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f010dca9:	e8 f3 e1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010dcae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dcb1:	e8 28 cd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dcb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f010dcb9:	83 ec 0c             	sub    $0xc,%esp
f010dcbc:	68 00 fc 0f 00       	push   $0xffc00
f010dcc1:	e8 aa e6 ff ff       	call   f010c370 <kmalloc>
f010dcc6:	83 c4 10             	add    $0x10,%esp
f010dcc9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f010dccf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010dcd6:	10 00 00 
f010dcd9:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010dcde:	0f b6 d0             	movzbl %al,%edx
f010dce1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010dce7:	01 d0                	add    %edx,%eax
f010dce9:	48                   	dec    %eax
f010dcea:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010dcf0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dcf6:	ba 00 00 00 00       	mov    $0x0,%edx
f010dcfb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010dd01:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dd07:	29 d0                	sub    %edx,%eax
f010dd09:	89 c1                	mov    %eax,%ecx
f010dd0b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010dd12:	10 00 00 
f010dd15:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010dd1a:	0f b6 c0             	movzbl %al,%eax
f010dd1d:	c1 e0 04             	shl    $0x4,%eax
f010dd20:	89 c2                	mov    %eax,%edx
f010dd22:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010dd28:	01 d0                	add    %edx,%eax
f010dd2a:	48                   	dec    %eax
f010dd2b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010dd31:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd37:	ba 00 00 00 00       	mov    $0x0,%edx
f010dd3c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010dd42:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd48:	29 d0                	sub    %edx,%eax
f010dd4a:	01 c8                	add    %ecx,%eax
f010dd4c:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010dd52:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dd58:	39 c2                	cmp    %eax,%edx
f010dd5a:	74 17                	je     f010dd73 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f010dd5c:	83 ec 04             	sub    $0x4,%esp
f010dd5f:	68 7c b8 11 f0       	push   $0xf011b87c
f010dd64:	68 16 01 00 00       	push   $0x116
f010dd69:	68 76 b5 11 f0       	push   $0xf011b576
f010dd6e:	e8 03 24 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dd73:	e8 29 e1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010dd78:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dd7b:	74 17                	je     f010dd94 <test_kmalloc_nextfit+0x838>
f010dd7d:	83 ec 04             	sub    $0x4,%esp
f010dd80:	68 88 b5 11 f0       	push   $0xf011b588
f010dd85:	68 17 01 00 00       	push   $0x117
f010dd8a:	68 76 b5 11 f0       	push   $0xf011b576
f010dd8f:	e8 e2 23 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010dd94:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dd97:	e8 42 cc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dd9c:	29 c3                	sub    %eax,%ebx
f010dd9e:	89 d8                	mov    %ebx,%eax
f010dda0:	3d 00 01 00 00       	cmp    $0x100,%eax
f010dda5:	74 17                	je     f010ddbe <test_kmalloc_nextfit+0x862>
f010dda7:	83 ec 04             	sub    $0x4,%esp
f010ddaa:	68 2b b8 11 f0       	push   $0xf011b82b
f010ddaf:	68 18 01 00 00       	push   $0x118
f010ddb4:	68 76 b5 11 f0       	push   $0xf011b576
f010ddb9:	e8 b8 23 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ddbe:	e8 de e0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ddc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ddc6:	e8 13 cc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ddcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f010ddce:	83 ec 0c             	sub    $0xc,%esp
f010ddd1:	68 00 04 00 00       	push   $0x400
f010ddd6:	e8 95 e5 ff ff       	call   f010c370 <kmalloc>
f010dddb:	83 c4 10             	add    $0x10,%esp
f010ddde:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f010dde4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010ddeb:	10 00 00 
f010ddee:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ddf3:	0f b6 d0             	movzbl %al,%edx
f010ddf6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010ddfc:	01 d0                	add    %edx,%eax
f010ddfe:	48                   	dec    %eax
f010ddff:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010de05:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010de0b:	ba 00 00 00 00       	mov    $0x0,%edx
f010de10:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010de16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010de1c:	29 d0                	sub    %edx,%eax
f010de1e:	89 c1                	mov    %eax,%ecx
f010de20:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010de27:	10 00 00 
f010de2a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010de2f:	0f b6 c0             	movzbl %al,%eax
f010de32:	c1 e0 04             	shl    $0x4,%eax
f010de35:	89 c2                	mov    %eax,%edx
f010de37:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010de3d:	01 d0                	add    %edx,%eax
f010de3f:	48                   	dec    %eax
f010de40:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010de46:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010de4c:	ba 00 00 00 00       	mov    $0x0,%edx
f010de51:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010de57:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010de5d:	29 d0                	sub    %edx,%eax
f010de5f:	01 c8                	add    %ecx,%eax
f010de61:	8d 90 00 00 10 f6    	lea    -0x9f00000(%eax),%edx
f010de67:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010de6d:	39 c2                	cmp    %eax,%edx
f010de6f:	74 17                	je     f010de88 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f010de71:	83 ec 04             	sub    $0x4,%esp
f010de74:	68 7c b8 11 f0       	push   $0xf011b87c
f010de79:	68 1e 01 00 00       	push   $0x11e
f010de7e:	68 76 b5 11 f0       	push   $0xf011b576
f010de83:	e8 ee 22 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010de88:	e8 14 e0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010de8d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010de90:	74 17                	je     f010dea9 <test_kmalloc_nextfit+0x94d>
f010de92:	83 ec 04             	sub    $0x4,%esp
f010de95:	68 88 b5 11 f0       	push   $0xf011b588
f010de9a:	68 1f 01 00 00       	push   $0x11f
f010de9f:	68 76 b5 11 f0       	push   $0xf011b576
f010dea4:	e8 cd 22 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010dea9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010deac:	e8 2d cb ff ff       	call   f010a9de <sys_calculate_free_frames>
f010deb1:	29 c3                	sub    %eax,%ebx
f010deb3:	89 d8                	mov    %ebx,%eax
f010deb5:	83 f8 01             	cmp    $0x1,%eax
f010deb8:	74 17                	je     f010ded1 <test_kmalloc_nextfit+0x975>
f010deba:	83 ec 04             	sub    $0x4,%esp
f010debd:	68 2b b8 11 f0       	push   $0xf011b82b
f010dec2:	68 20 01 00 00       	push   $0x120
f010dec7:	68 76 b5 11 f0       	push   $0xf011b576
f010decc:	e8 a5 22 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ded1:	e8 cb df ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ded6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ded9:	e8 00 cb ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f010dee1:	83 ec 0c             	sub    $0xc,%esp
f010dee4:	68 00 00 50 00       	push   $0x500000
f010dee9:	e8 82 e4 ff ff       	call   f010c370 <kmalloc>
f010deee:	83 c4 10             	add    $0x10,%esp
f010def1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f010def7:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010defe:	10 00 00 
f010df01:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010df06:	0f b6 d0             	movzbl %al,%edx
f010df09:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010df0f:	01 d0                	add    %edx,%eax
f010df11:	48                   	dec    %eax
f010df12:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010df18:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010df1e:	ba 00 00 00 00       	mov    $0x0,%edx
f010df23:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010df29:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010df2f:	29 d0                	sub    %edx,%eax
f010df31:	89 c1                	mov    %eax,%ecx
f010df33:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f010df3a:	10 00 00 
f010df3d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010df42:	0f b6 c0             	movzbl %al,%eax
f010df45:	c1 e0 04             	shl    $0x4,%eax
f010df48:	89 c2                	mov    %eax,%edx
f010df4a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010df50:	01 d0                	add    %edx,%eax
f010df52:	48                   	dec    %eax
f010df53:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f010df59:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010df5f:	ba 00 00 00 00       	mov    $0x0,%edx
f010df64:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f010df6a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010df70:	29 d0                	sub    %edx,%eax
f010df72:	01 c8                	add    %ecx,%eax
f010df74:	8d 90 00 00 40 f7    	lea    -0x8c00000(%eax),%edx
f010df7a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010df80:	39 c2                	cmp    %eax,%edx
f010df82:	74 17                	je     f010df9b <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f010df84:	83 ec 04             	sub    $0x4,%esp
f010df87:	68 7c b8 11 f0       	push   $0xf011b87c
f010df8c:	68 26 01 00 00       	push   $0x126
f010df91:	68 76 b5 11 f0       	push   $0xf011b576
f010df96:	e8 db 21 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010df9b:	e8 01 df ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010dfa0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dfa3:	74 17                	je     f010dfbc <test_kmalloc_nextfit+0xa60>
f010dfa5:	83 ec 04             	sub    $0x4,%esp
f010dfa8:	68 88 b5 11 f0       	push   $0xf011b588
f010dfad:	68 27 01 00 00       	push   $0x127
f010dfb2:	68 76 b5 11 f0       	push   $0xf011b576
f010dfb7:	e8 ba 21 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010dfbc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010dfbf:	e8 1a ca ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dfc4:	29 c3                	sub    %eax,%ebx
f010dfc6:	89 d8                	mov    %ebx,%eax
f010dfc8:	3d 00 05 00 00       	cmp    $0x500,%eax
f010dfcd:	74 17                	je     f010dfe6 <test_kmalloc_nextfit+0xa8a>
f010dfcf:	83 ec 04             	sub    $0x4,%esp
f010dfd2:	68 2b b8 11 f0       	push   $0xf011b82b
f010dfd7:	68 28 01 00 00       	push   $0x128
f010dfdc:	68 76 b5 11 f0       	push   $0xf011b576
f010dfe1:	e8 90 21 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010dfe6:	e8 b6 de ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010dfeb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010dfee:	e8 eb c9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010dff3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f010dff6:	83 ec 0c             	sub    $0xc,%esp
f010dff9:	68 00 00 10 00       	push   $0x100000
f010dffe:	e8 6d e3 ff ff       	call   f010c370 <kmalloc>
f010e003:	83 c4 10             	add    $0x10,%esp
f010e006:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f010e00c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f010e013:	10 00 00 
f010e016:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e01b:	0f b6 d0             	movzbl %al,%edx
f010e01e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010e024:	01 d0                	add    %edx,%eax
f010e026:	48                   	dec    %eax
f010e027:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f010e02d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010e033:	ba 00 00 00 00       	mov    $0x0,%edx
f010e038:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f010e03e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010e044:	29 d0                	sub    %edx,%eax
f010e046:	89 c1                	mov    %eax,%ecx
f010e048:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f010e04f:	10 00 00 
f010e052:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e057:	0f b6 c0             	movzbl %al,%eax
f010e05a:	c1 e0 04             	shl    $0x4,%eax
f010e05d:	89 c2                	mov    %eax,%edx
f010e05f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010e065:	01 d0                	add    %edx,%eax
f010e067:	48                   	dec    %eax
f010e068:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f010e06e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010e074:	ba 00 00 00 00       	mov    $0x0,%edx
f010e079:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f010e07f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010e085:	29 d0                	sub    %edx,%eax
f010e087:	01 c8                	add    %ecx,%eax
f010e089:	8d 90 00 00 90 f7    	lea    -0x8700000(%eax),%edx
f010e08f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e095:	39 c2                	cmp    %eax,%edx
f010e097:	74 17                	je     f010e0b0 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f010e099:	83 ec 04             	sub    $0x4,%esp
f010e09c:	68 7c b8 11 f0       	push   $0xf011b87c
f010e0a1:	68 2e 01 00 00       	push   $0x12e
f010e0a6:	68 76 b5 11 f0       	push   $0xf011b576
f010e0ab:	e8 c6 20 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e0b0:	e8 ec dd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e0b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e0b8:	74 17                	je     f010e0d1 <test_kmalloc_nextfit+0xb75>
f010e0ba:	83 ec 04             	sub    $0x4,%esp
f010e0bd:	68 88 b5 11 f0       	push   $0xf011b588
f010e0c2:	68 2f 01 00 00       	push   $0x12f
f010e0c7:	68 76 b5 11 f0       	push   $0xf011b576
f010e0cc:	e8 a5 20 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010e0d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e0d4:	e8 05 c9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e0d9:	29 c3                	sub    %eax,%ebx
f010e0db:	89 d8                	mov    %ebx,%eax
f010e0dd:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e0e2:	74 17                	je     f010e0fb <test_kmalloc_nextfit+0xb9f>
f010e0e4:	83 ec 04             	sub    $0x4,%esp
f010e0e7:	68 2b b8 11 f0       	push   $0xf011b82b
f010e0ec:	68 30 01 00 00       	push   $0x130
f010e0f1:	68 76 b5 11 f0       	push   $0xf011b576
f010e0f6:	e8 7b 20 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e0fb:	e8 a1 dd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e100:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e103:	e8 d6 c8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e108:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f010e10b:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010e111:	83 ec 0c             	sub    $0xc,%esp
f010e114:	50                   	push   %eax
f010e115:	e8 bc e2 ff ff       	call   f010c3d6 <kfree>
f010e11a:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e11d:	e8 7f dd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e122:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e125:	74 17                	je     f010e13e <test_kmalloc_nextfit+0xbe2>
f010e127:	83 ec 04             	sub    $0x4,%esp
f010e12a:	68 88 b5 11 f0       	push   $0xf011b588
f010e12f:	68 35 01 00 00       	push   $0x135
f010e134:	68 76 b5 11 f0       	push   $0xf011b576
f010e139:	e8 38 20 ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010e13e:	e8 9b c8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e143:	89 c2                	mov    %eax,%edx
f010e145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e148:	29 c2                	sub    %eax,%edx
f010e14a:	89 d0                	mov    %edx,%eax
f010e14c:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e151:	74 17                	je     f010e16a <test_kmalloc_nextfit+0xc0e>
f010e153:	83 ec 04             	sub    $0x4,%esp
f010e156:	68 3c b8 11 f0       	push   $0xf011b83c
f010e15b:	68 36 01 00 00       	push   $0x136
f010e160:	68 76 b5 11 f0       	push   $0xf011b576
f010e165:	e8 0c 20 ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e16a:	e8 32 dd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e16f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e172:	e8 67 c8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e177:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f010e17a:	83 ec 0c             	sub    $0xc,%esp
f010e17d:	68 00 04 00 00       	push   $0x400
f010e182:	e8 e9 e1 ff ff       	call   f010c370 <kmalloc>
f010e187:	83 c4 10             	add    $0x10,%esp
f010e18a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f010e190:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f010e197:	10 00 00 
f010e19a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e19f:	0f b6 d0             	movzbl %al,%edx
f010e1a2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010e1a8:	01 d0                	add    %edx,%eax
f010e1aa:	48                   	dec    %eax
f010e1ab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f010e1b1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010e1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1bc:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f010e1c2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010e1c8:	29 d0                	sub    %edx,%eax
f010e1ca:	89 c1                	mov    %eax,%ecx
f010e1cc:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f010e1d3:	10 00 00 
f010e1d6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e1db:	0f b6 c0             	movzbl %al,%eax
f010e1de:	c1 e0 04             	shl    $0x4,%eax
f010e1e1:	89 c2                	mov    %eax,%edx
f010e1e3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010e1e9:	01 d0                	add    %edx,%eax
f010e1eb:	48                   	dec    %eax
f010e1ec:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f010e1f2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010e1f8:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1fd:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f010e203:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010e209:	29 d0                	sub    %edx,%eax
f010e20b:	01 c8                	add    %ecx,%eax
f010e20d:	8d 90 00 00 e0 f7    	lea    -0x8200000(%eax),%edx
f010e213:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e219:	39 c2                	cmp    %eax,%edx
f010e21b:	74 17                	je     f010e234 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f010e21d:	83 ec 04             	sub    $0x4,%esp
f010e220:	68 7c b8 11 f0       	push   $0xf011b87c
f010e225:	68 3c 01 00 00       	push   $0x13c
f010e22a:	68 76 b5 11 f0       	push   $0xf011b576
f010e22f:	e8 42 1f ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e234:	e8 68 dc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e239:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e23c:	74 17                	je     f010e255 <test_kmalloc_nextfit+0xcf9>
f010e23e:	83 ec 04             	sub    $0x4,%esp
f010e241:	68 88 b5 11 f0       	push   $0xf011b588
f010e246:	68 3d 01 00 00       	push   $0x13d
f010e24b:	68 76 b5 11 f0       	push   $0xf011b576
f010e250:	e8 21 1f ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010e255:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e258:	e8 81 c7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e25d:	29 c3                	sub    %eax,%ebx
f010e25f:	89 d8                	mov    %ebx,%eax
f010e261:	83 f8 01             	cmp    $0x1,%eax
f010e264:	74 17                	je     f010e27d <test_kmalloc_nextfit+0xd21>
f010e266:	83 ec 04             	sub    $0x4,%esp
f010e269:	68 2b b8 11 f0       	push   $0xf011b82b
f010e26e:	68 3e 01 00 00       	push   $0x13e
f010e273:	68 76 b5 11 f0       	push   $0xf011b576
f010e278:	e8 f9 1e ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e27d:	e8 1f dc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e282:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e285:	e8 54 c7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e28a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f010e28d:	83 ec 0c             	sub    $0xc,%esp
f010e290:	68 00 e0 1f 00       	push   $0x1fe000
f010e295:	e8 d6 e0 ff ff       	call   f010c370 <kmalloc>
f010e29a:	83 c4 10             	add    $0x10,%esp
f010e29d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f010e2a3:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f010e2aa:	10 00 00 
f010e2ad:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e2b2:	0f b6 d0             	movzbl %al,%edx
f010e2b5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010e2bb:	01 d0                	add    %edx,%eax
f010e2bd:	48                   	dec    %eax
f010e2be:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f010e2c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010e2ca:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2cf:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f010e2d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010e2db:	29 d0                	sub    %edx,%eax
f010e2dd:	89 c1                	mov    %eax,%ecx
f010e2df:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f010e2e6:	10 00 00 
f010e2e9:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e2ee:	0f b6 c0             	movzbl %al,%eax
f010e2f1:	c1 e0 04             	shl    $0x4,%eax
f010e2f4:	89 c2                	mov    %eax,%edx
f010e2f6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010e2fc:	01 d0                	add    %edx,%eax
f010e2fe:	48                   	dec    %eax
f010e2ff:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f010e305:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010e30b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e310:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f010e316:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010e31c:	29 d0                	sub    %edx,%eax
f010e31e:	01 c8                	add    %ecx,%eax
f010e320:	8d 90 00 10 e0 f7    	lea    -0x81ff000(%eax),%edx
f010e326:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e32c:	39 c2                	cmp    %eax,%edx
f010e32e:	74 17                	je     f010e347 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f010e330:	83 ec 04             	sub    $0x4,%esp
f010e333:	68 7c b8 11 f0       	push   $0xf011b87c
f010e338:	68 44 01 00 00       	push   $0x144
f010e33d:	68 76 b5 11 f0       	push   $0xf011b576
f010e342:	e8 2f 1e ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e347:	e8 55 db ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e34c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e34f:	74 17                	je     f010e368 <test_kmalloc_nextfit+0xe0c>
f010e351:	83 ec 04             	sub    $0x4,%esp
f010e354:	68 88 b5 11 f0       	push   $0xf011b588
f010e359:	68 45 01 00 00       	push   $0x145
f010e35e:	68 76 b5 11 f0       	push   $0xf011b576
f010e363:	e8 0e 1e ff ff       	call   f0100176 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010e368:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e36b:	e8 6e c6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e370:	29 c3                	sub    %eax,%ebx
f010e372:	89 d8                	mov    %ebx,%eax
f010e374:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f010e379:	74 17                	je     f010e392 <test_kmalloc_nextfit+0xe36>
f010e37b:	83 ec 04             	sub    $0x4,%esp
f010e37e:	68 2b b8 11 f0       	push   $0xf011b82b
f010e383:	68 47 01 00 00       	push   $0x147
f010e388:	68 76 b5 11 f0       	push   $0xf011b576
f010e38d:	e8 e4 1d ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e392:	e8 0a db ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e397:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e39a:	e8 3f c6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e39f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f010e3a2:	83 ec 0c             	sub    $0xc,%esp
f010e3a5:	68 00 00 08 00       	push   $0x80000
f010e3aa:	e8 c1 df ff ff       	call   f010c370 <kmalloc>
f010e3af:	83 c4 10             	add    $0x10,%esp
f010e3b2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f010e3b8:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f010e3bf:	10 00 00 
f010e3c2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e3c7:	0f b6 d0             	movzbl %al,%edx
f010e3ca:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e3d0:	01 d0                	add    %edx,%eax
f010e3d2:	48                   	dec    %eax
f010e3d3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f010e3d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e3df:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3e4:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f010e3ea:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e3f0:	29 d0                	sub    %edx,%eax
f010e3f2:	89 c1                	mov    %eax,%ecx
f010e3f4:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f010e3fb:	10 00 00 
f010e3fe:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e403:	0f b6 c0             	movzbl %al,%eax
f010e406:	c1 e0 04             	shl    $0x4,%eax
f010e409:	89 c2                	mov    %eax,%edx
f010e40b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010e411:	01 d0                	add    %edx,%eax
f010e413:	48                   	dec    %eax
f010e414:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f010e41a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010e420:	ba 00 00 00 00       	mov    $0x0,%edx
f010e425:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f010e42b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010e431:	29 d0                	sub    %edx,%eax
f010e433:	01 c8                	add    %ecx,%eax
f010e435:	8d 90 00 00 80 f8    	lea    -0x7800000(%eax),%edx
f010e43b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e441:	39 c2                	cmp    %eax,%edx
f010e443:	74 17                	je     f010e45c <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f010e445:	83 ec 04             	sub    $0x4,%esp
f010e448:	68 7c b8 11 f0       	push   $0xf011b87c
f010e44d:	68 4d 01 00 00       	push   $0x14d
f010e452:	68 76 b5 11 f0       	push   $0xf011b576
f010e457:	e8 1a 1d ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e45c:	e8 40 da ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e461:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e464:	74 17                	je     f010e47d <test_kmalloc_nextfit+0xf21>
f010e466:	83 ec 04             	sub    $0x4,%esp
f010e469:	68 88 b5 11 f0       	push   $0xf011b588
f010e46e:	68 4e 01 00 00       	push   $0x14e
f010e473:	68 76 b5 11 f0       	push   $0xf011b576
f010e478:	e8 f9 1c ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010e47d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e480:	e8 59 c5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e485:	29 c3                	sub    %eax,%ebx
f010e487:	89 d8                	mov    %ebx,%eax
f010e489:	3d 80 00 00 00       	cmp    $0x80,%eax
f010e48e:	74 17                	je     f010e4a7 <test_kmalloc_nextfit+0xf4b>
f010e490:	83 ec 04             	sub    $0x4,%esp
f010e493:	68 2b b8 11 f0       	push   $0xf011b82b
f010e498:	68 4f 01 00 00       	push   $0x14f
f010e49d:	68 76 b5 11 f0       	push   $0xf011b576
f010e4a2:	e8 cf 1c ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE1: (next fit without looping back) succeeded...\n") ;
f010e4a7:	83 ec 0c             	sub    $0xc,%esp
f010e4aa:	68 9c b8 11 f0       	push   $0xf011b89c
f010e4af:	e8 1b 89 ff ff       	call   f0106dcf <cprintf>
f010e4b4:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f010e4b7:	e8 e5 d9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e4bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e4bf:	e8 1a c5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e4c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f010e4c7:	83 ec 0c             	sub    $0xc,%esp
f010e4ca:	68 00 00 38 00       	push   $0x380000
f010e4cf:	e8 9c de ff ff       	call   f010c370 <kmalloc>
f010e4d4:	83 c4 10             	add    $0x10,%esp
f010e4d7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f010e4dd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f010e4e4:	10 00 00 
f010e4e7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e4ec:	0f b6 d0             	movzbl %al,%edx
f010e4ef:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010e4f5:	01 d0                	add    %edx,%eax
f010e4f7:	48                   	dec    %eax
f010e4f8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f010e4fe:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010e504:	ba 00 00 00 00       	mov    $0x0,%edx
f010e509:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f010e50f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010e515:	29 d0                	sub    %edx,%eax
f010e517:	89 c1                	mov    %eax,%ecx
f010e519:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f010e520:	10 00 00 
f010e523:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e528:	0f b6 c0             	movzbl %al,%eax
f010e52b:	c1 e0 04             	shl    $0x4,%eax
f010e52e:	89 c2                	mov    %eax,%edx
f010e530:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f010e536:	01 d0                	add    %edx,%eax
f010e538:	48                   	dec    %eax
f010e539:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f010e53f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010e545:	ba 00 00 00 00       	mov    $0x0,%edx
f010e54a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f010e550:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010e556:	29 d0                	sub    %edx,%eax
f010e558:	01 c8                	add    %ecx,%eax
f010e55a:	8d 90 00 00 40 f6    	lea    -0x9c00000(%eax),%edx
f010e560:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e566:	39 c2                	cmp    %eax,%edx
f010e568:	74 17                	je     f010e581 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f010e56a:	83 ec 04             	sub    $0x4,%esp
f010e56d:	68 7c b8 11 f0       	push   $0xf011b87c
f010e572:	68 59 01 00 00       	push   $0x159
f010e577:	68 76 b5 11 f0       	push   $0xf011b576
f010e57c:	e8 f5 1b ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e581:	e8 1b d9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e586:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e589:	74 17                	je     f010e5a2 <test_kmalloc_nextfit+0x1046>
f010e58b:	83 ec 04             	sub    $0x4,%esp
f010e58e:	68 88 b5 11 f0       	push   $0xf011b588
f010e593:	68 5a 01 00 00       	push   $0x15a
f010e598:	68 76 b5 11 f0       	push   $0xf011b576
f010e59d:	e8 d4 1b ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010e5a2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e5a5:	e8 34 c4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e5aa:	29 c3                	sub    %eax,%ebx
f010e5ac:	89 d8                	mov    %ebx,%eax
f010e5ae:	3d 80 03 00 00       	cmp    $0x380,%eax
f010e5b3:	74 17                	je     f010e5cc <test_kmalloc_nextfit+0x1070>
f010e5b5:	83 ec 04             	sub    $0x4,%esp
f010e5b8:	68 2b b8 11 f0       	push   $0xf011b82b
f010e5bd:	68 5b 01 00 00       	push   $0x15b
f010e5c2:	68 76 b5 11 f0       	push   $0xf011b576
f010e5c7:	e8 aa 1b ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e5cc:	e8 d0 d8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e5d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e5d4:	e8 05 c4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e5d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f010e5dc:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f010e5e2:	83 ec 0c             	sub    $0xc,%esp
f010e5e5:	50                   	push   %eax
f010e5e6:	e8 eb dd ff ff       	call   f010c3d6 <kfree>
f010e5eb:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e5ee:	e8 ae d8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e5f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e5f6:	74 17                	je     f010e60f <test_kmalloc_nextfit+0x10b3>
f010e5f8:	83 ec 04             	sub    $0x4,%esp
f010e5fb:	68 88 b5 11 f0       	push   $0xf011b588
f010e600:	68 60 01 00 00       	push   $0x160
f010e605:	68 76 b5 11 f0       	push   $0xf011b576
f010e60a:	e8 67 1b ff ff       	call   f0100176 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010e60f:	e8 ca c3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e614:	89 c2                	mov    %eax,%edx
f010e616:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e619:	29 c2                	sub    %eax,%edx
f010e61b:	89 d0                	mov    %edx,%eax
f010e61d:	3d 00 02 00 00       	cmp    $0x200,%eax
f010e622:	74 17                	je     f010e63b <test_kmalloc_nextfit+0x10df>
f010e624:	83 ec 04             	sub    $0x4,%esp
f010e627:	68 3c b8 11 f0       	push   $0xf011b83c
f010e62c:	68 61 01 00 00       	push   $0x161
f010e631:	68 76 b5 11 f0       	push   $0xf011b576
f010e636:	e8 3b 1b ff ff       	call   f0100176 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e63b:	e8 61 d8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e640:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e643:	e8 96 c3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e648:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f010e64b:	83 ec 0c             	sub    $0xc,%esp
f010e64e:	68 00 fc 3f 00       	push   $0x3ffc00
f010e653:	e8 18 dd ff ff       	call   f010c370 <kmalloc>
f010e658:	83 c4 10             	add    $0x10,%esp
f010e65b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f010e661:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f010e668:	10 00 00 
f010e66b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e670:	0f b6 d0             	movzbl %al,%edx
f010e673:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010e679:	01 d0                	add    %edx,%eax
f010e67b:	48                   	dec    %eax
f010e67c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f010e682:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010e688:	ba 00 00 00 00       	mov    $0x0,%edx
f010e68d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f010e693:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010e699:	29 d0                	sub    %edx,%eax
f010e69b:	89 c1                	mov    %eax,%ecx
f010e69d:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f010e6a4:	10 00 00 
f010e6a7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e6ac:	0f b6 c0             	movzbl %al,%eax
f010e6af:	c1 e0 04             	shl    $0x4,%eax
f010e6b2:	89 c2                	mov    %eax,%edx
f010e6b4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010e6ba:	01 d0                	add    %edx,%eax
f010e6bc:	48                   	dec    %eax
f010e6bd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f010e6c3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010e6c9:	ba 00 00 00 00       	mov    $0x0,%edx
f010e6ce:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f010e6d4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010e6da:	29 d0                	sub    %edx,%eax
f010e6dc:	01 c8                	add    %ecx,%eax
f010e6de:	8d 90 00 00 00 f9    	lea    -0x7000000(%eax),%edx
f010e6e4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e6ea:	39 c2                	cmp    %eax,%edx
f010e6ec:	74 17                	je     f010e705 <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f010e6ee:	83 ec 04             	sub    $0x4,%esp
f010e6f1:	68 7c b8 11 f0       	push   $0xf011b87c
f010e6f6:	68 67 01 00 00       	push   $0x167
f010e6fb:	68 76 b5 11 f0       	push   $0xf011b576
f010e700:	e8 71 1a ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e705:	e8 97 d7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e70a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e70d:	74 17                	je     f010e726 <test_kmalloc_nextfit+0x11ca>
f010e70f:	83 ec 04             	sub    $0x4,%esp
f010e712:	68 88 b5 11 f0       	push   $0xf011b588
f010e717:	68 68 01 00 00       	push   $0x168
f010e71c:	68 76 b5 11 f0       	push   $0xf011b576
f010e721:	e8 50 1a ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010e726:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e729:	e8 b0 c2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e72e:	29 c3                	sub    %eax,%ebx
f010e730:	89 d8                	mov    %ebx,%eax
f010e732:	3d 00 04 00 00       	cmp    $0x400,%eax
f010e737:	74 17                	je     f010e750 <test_kmalloc_nextfit+0x11f4>
f010e739:	83 ec 04             	sub    $0x4,%esp
f010e73c:	68 2b b8 11 f0       	push   $0xf011b82b
f010e741:	68 69 01 00 00       	push   $0x169
f010e746:	68 76 b5 11 f0       	push   $0xf011b576
f010e74b:	e8 26 1a ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) succeeded...\n") ;
f010e750:	83 ec 0c             	sub    $0xc,%esp
f010e753:	68 d4 b8 11 f0       	push   $0xf011b8d4
f010e758:	e8 72 86 ff ff       	call   f0106dcf <cprintf>
f010e75d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f010e760:	e8 3c d7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e765:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e768:	e8 71 c2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e76d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f010e770:	83 ec 0c             	sub    $0xc,%esp
f010e773:	68 00 00 60 00       	push   $0x600000
f010e778:	e8 f3 db ff ff       	call   f010c370 <kmalloc>
f010e77d:	83 c4 10             	add    $0x10,%esp
f010e780:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f010e786:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e78c:	85 c0                	test   %eax,%eax
f010e78e:	74 17                	je     f010e7a7 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f010e790:	83 ec 04             	sub    $0x4,%esp
f010e793:	68 7c b8 11 f0       	push   $0xf011b87c
f010e798:	68 73 01 00 00       	push   $0x173
f010e79d:	68 76 b5 11 f0       	push   $0xf011b576
f010e7a2:	e8 cf 19 ff ff       	call   f0100176 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e7a7:	e8 f5 d6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e7ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e7af:	74 17                	je     f010e7c8 <test_kmalloc_nextfit+0x126c>
f010e7b1:	83 ec 04             	sub    $0x4,%esp
f010e7b4:	68 88 b5 11 f0       	push   $0xf011b588
f010e7b9:	68 74 01 00 00       	push   $0x174
f010e7be:	68 76 b5 11 f0       	push   $0xf011b576
f010e7c3:	e8 ae 19 ff ff       	call   f0100176 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f010e7c8:	e8 11 c2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e7cd:	89 c2                	mov    %eax,%edx
f010e7cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e7d2:	39 c2                	cmp    %eax,%edx
f010e7d4:	74 17                	je     f010e7ed <test_kmalloc_nextfit+0x1291>
f010e7d6:	83 ec 04             	sub    $0x4,%esp
f010e7d9:	68 2b b8 11 f0       	push   $0xf011b82b
f010e7de:	68 75 01 00 00       	push   $0x175
f010e7e3:	68 76 b5 11 f0       	push   $0xf011b576
f010e7e8:	e8 89 19 ff ff       	call   f0100176 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) succeeded...\n") ;
f010e7ed:	83 ec 0c             	sub    $0xc,%esp
f010e7f0:	68 08 b9 11 f0       	push   $0xf011b908
f010e7f5:	e8 d5 85 ff ff       	call   f0106dcf <cprintf>
f010e7fa:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f010e7fd:	83 ec 0c             	sub    $0xc,%esp
f010e800:	68 44 b9 11 f0       	push   $0xf011b944
f010e805:	e8 c5 85 ff ff       	call   f0106dcf <cprintf>
f010e80a:	83 c4 10             	add    $0x10,%esp
	return 1;
f010e80d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010e812:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e815:	5b                   	pop    %ebx
f010e816:	5f                   	pop    %edi
f010e817:	5d                   	pop    %ebp
f010e818:	c3                   	ret    

f010e819 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f010e819:	55                   	push   %ebp
f010e81a:	89 e5                	mov    %esp,%ebp
f010e81c:	57                   	push   %edi
f010e81d:	53                   	push   %ebx
f010e81e:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f010e824:	83 ec 0c             	sub    $0xc,%esp
f010e827:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010e82c:	e8 9e 85 ff ff       	call   f0106dcf <cprintf>
f010e831:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010e834:	83 ec 0c             	sub    $0xc,%esp
f010e837:	68 e8 b4 11 f0       	push   $0xf011b4e8
f010e83c:	e8 8e 85 ff ff       	call   f0106dcf <cprintf>
f010e841:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010e844:	83 ec 0c             	sub    $0xc,%esp
f010e847:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010e84c:	e8 7e 85 ff ff       	call   f0106dcf <cprintf>
f010e851:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010e854:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010e85a:	b9 14 00 00 00       	mov    $0x14,%ecx
f010e85f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e864:	89 d7                	mov    %edx,%edi
f010e866:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010e868:	e8 71 c1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e86d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e870:	e8 2c d6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e875:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f010e878:	83 ec 0c             	sub    $0xc,%esp
f010e87b:	68 00 fc 2f 00       	push   $0x2ffc00
f010e880:	e8 eb da ff ff       	call   f010c370 <kmalloc>
f010e885:	83 c4 10             	add    $0x10,%esp
f010e888:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010e88e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010e894:	89 c1                	mov    %eax,%ecx
f010e896:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010e89d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e8a2:	0f b6 d0             	movzbl %al,%edx
f010e8a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e8a8:	01 d0                	add    %edx,%eax
f010e8aa:	48                   	dec    %eax
f010e8ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010e8ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8b1:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8b6:	f7 75 ec             	divl   -0x14(%ebp)
f010e8b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8bc:	29 d0                	sub    %edx,%eax
f010e8be:	89 c3                	mov    %eax,%ebx
f010e8c0:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010e8c7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e8cc:	0f b6 c0             	movzbl %al,%eax
f010e8cf:	c1 e0 04             	shl    $0x4,%eax
f010e8d2:	89 c2                	mov    %eax,%edx
f010e8d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8d7:	01 d0                	add    %edx,%eax
f010e8d9:	48                   	dec    %eax
f010e8da:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e8dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8e0:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8e5:	f7 75 e4             	divl   -0x1c(%ebp)
f010e8e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8eb:	29 d0                	sub    %edx,%eax
f010e8ed:	01 d8                	add    %ebx,%eax
f010e8ef:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010e8f4:	39 c1                	cmp    %eax,%ecx
f010e8f6:	74 17                	je     f010e90f <test_kmalloc_bestfit1+0xf6>
f010e8f8:	83 ec 04             	sub    $0x4,%esp
f010e8fb:	68 80 b9 11 f0       	push   $0xf011b980
f010e900:	68 8f 01 00 00       	push   $0x18f
f010e905:	68 76 b5 11 f0       	push   $0xf011b576
f010e90a:	e8 67 18 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e90f:	e8 8d d5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e914:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e917:	74 17                	je     f010e930 <test_kmalloc_bestfit1+0x117>
f010e919:	83 ec 04             	sub    $0x4,%esp
f010e91c:	68 88 b5 11 f0       	push   $0xf011b588
f010e921:	68 90 01 00 00       	push   $0x190
f010e926:	68 76 b5 11 f0       	push   $0xf011b576
f010e92b:	e8 46 18 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010e930:	e8 a9 c0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e935:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e938:	29 c2                	sub    %eax,%edx
f010e93a:	89 d0                	mov    %edx,%eax
f010e93c:	3d 00 03 00 00       	cmp    $0x300,%eax
f010e941:	74 17                	je     f010e95a <test_kmalloc_bestfit1+0x141>
f010e943:	83 ec 04             	sub    $0x4,%esp
f010e946:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010e94b:	68 91 01 00 00       	push   $0x191
f010e950:	68 76 b5 11 f0       	push   $0xf011b576
f010e955:	e8 1c 18 ff ff       	call   f0100176 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010e95a:	e8 7f c0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010e95f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010e962:	e8 3a d5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010e967:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f010e96a:	83 ec 0c             	sub    $0xc,%esp
f010e96d:	68 00 fc 2f 00       	push   $0x2ffc00
f010e972:	e8 f9 d9 ff ff       	call   f010c370 <kmalloc>
f010e977:	83 c4 10             	add    $0x10,%esp
f010e97a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f010e980:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010e986:	89 c1                	mov    %eax,%ecx
f010e988:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e98f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e994:	0f b6 d0             	movzbl %al,%edx
f010e997:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e99a:	01 d0                	add    %edx,%eax
f010e99c:	48                   	dec    %eax
f010e99d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e9a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e9a3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9a8:	f7 75 dc             	divl   -0x24(%ebp)
f010e9ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e9ae:	29 d0                	sub    %edx,%eax
f010e9b0:	89 c3                	mov    %eax,%ebx
f010e9b2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010e9b9:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010e9be:	0f b6 c0             	movzbl %al,%eax
f010e9c1:	c1 e0 04             	shl    $0x4,%eax
f010e9c4:	89 c2                	mov    %eax,%edx
f010e9c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e9c9:	01 d0                	add    %edx,%eax
f010e9cb:	48                   	dec    %eax
f010e9cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010e9cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e9d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9d7:	f7 75 d4             	divl   -0x2c(%ebp)
f010e9da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e9dd:	29 d0                	sub    %edx,%eax
f010e9df:	01 d8                	add    %ebx,%eax
f010e9e1:	2d 00 00 d0 09       	sub    $0x9d00000,%eax
f010e9e6:	39 c1                	cmp    %eax,%ecx
f010e9e8:	74 17                	je     f010ea01 <test_kmalloc_bestfit1+0x1e8>
f010e9ea:	83 ec 04             	sub    $0x4,%esp
f010e9ed:	68 80 b9 11 f0       	push   $0xf011b980
f010e9f2:	68 97 01 00 00       	push   $0x197
f010e9f7:	68 76 b5 11 f0       	push   $0xf011b576
f010e9fc:	e8 75 17 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ea01:	e8 9b d4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ea06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea09:	74 17                	je     f010ea22 <test_kmalloc_bestfit1+0x209>
f010ea0b:	83 ec 04             	sub    $0x4,%esp
f010ea0e:	68 88 b5 11 f0       	push   $0xf011b588
f010ea13:	68 98 01 00 00       	push   $0x198
f010ea18:	68 76 b5 11 f0       	push   $0xf011b576
f010ea1d:	e8 54 17 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010ea22:	e8 b7 bf ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ea27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea2a:	29 c2                	sub    %eax,%edx
f010ea2c:	89 d0                	mov    %edx,%eax
f010ea2e:	3d 00 03 00 00       	cmp    $0x300,%eax
f010ea33:	74 17                	je     f010ea4c <test_kmalloc_bestfit1+0x233>
f010ea35:	83 ec 04             	sub    $0x4,%esp
f010ea38:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010ea3d:	68 99 01 00 00       	push   $0x199
f010ea42:	68 76 b5 11 f0       	push   $0xf011b576
f010ea47:	e8 2a 17 ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010ea4c:	e8 8d bf ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ea51:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ea54:	e8 48 d4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ea59:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f010ea5c:	83 ec 0c             	sub    $0xc,%esp
f010ea5f:	68 00 fc 1f 00       	push   $0x1ffc00
f010ea64:	e8 07 d9 ff ff       	call   f010c370 <kmalloc>
f010ea69:	83 c4 10             	add    $0x10,%esp
f010ea6c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f010ea72:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010ea78:	89 c1                	mov    %eax,%ecx
f010ea7a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010ea81:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ea86:	0f b6 d0             	movzbl %al,%edx
f010ea89:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ea8c:	01 d0                	add    %edx,%eax
f010ea8e:	48                   	dec    %eax
f010ea8f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010ea92:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ea95:	ba 00 00 00 00       	mov    $0x0,%edx
f010ea9a:	f7 75 cc             	divl   -0x34(%ebp)
f010ea9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eaa0:	29 d0                	sub    %edx,%eax
f010eaa2:	89 c3                	mov    %eax,%ebx
f010eaa4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010eaab:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010eab0:	0f b6 c0             	movzbl %al,%eax
f010eab3:	c1 e0 04             	shl    $0x4,%eax
f010eab6:	89 c2                	mov    %eax,%edx
f010eab8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eabb:	01 d0                	add    %edx,%eax
f010eabd:	48                   	dec    %eax
f010eabe:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010eac1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eac4:	ba 00 00 00 00       	mov    $0x0,%edx
f010eac9:	f7 75 c4             	divl   -0x3c(%ebp)
f010eacc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eacf:	29 d0                	sub    %edx,%eax
f010ead1:	01 d8                	add    %ebx,%eax
f010ead3:	2d 00 00 a0 09       	sub    $0x9a00000,%eax
f010ead8:	39 c1                	cmp    %eax,%ecx
f010eada:	74 17                	je     f010eaf3 <test_kmalloc_bestfit1+0x2da>
f010eadc:	83 ec 04             	sub    $0x4,%esp
f010eadf:	68 80 b9 11 f0       	push   $0xf011b980
f010eae4:	68 9f 01 00 00       	push   $0x19f
f010eae9:	68 76 b5 11 f0       	push   $0xf011b576
f010eaee:	e8 83 16 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eaf3:	e8 a9 d3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010eaf8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eafb:	74 17                	je     f010eb14 <test_kmalloc_bestfit1+0x2fb>
f010eafd:	83 ec 04             	sub    $0x4,%esp
f010eb00:	68 88 b5 11 f0       	push   $0xf011b588
f010eb05:	68 a0 01 00 00       	push   $0x1a0
f010eb0a:	68 76 b5 11 f0       	push   $0xf011b576
f010eb0f:	e8 62 16 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010eb14:	e8 c5 be ff ff       	call   f010a9de <sys_calculate_free_frames>
f010eb19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb1c:	29 c2                	sub    %eax,%edx
f010eb1e:	89 d0                	mov    %edx,%eax
f010eb20:	3d 00 02 00 00       	cmp    $0x200,%eax
f010eb25:	74 17                	je     f010eb3e <test_kmalloc_bestfit1+0x325>
f010eb27:	83 ec 04             	sub    $0x4,%esp
f010eb2a:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010eb2f:	68 a1 01 00 00       	push   $0x1a1
f010eb34:	68 76 b5 11 f0       	push   $0xf011b576
f010eb39:	e8 38 16 ff ff       	call   f0100176 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010eb3e:	e8 9b be ff ff       	call   f010a9de <sys_calculate_free_frames>
f010eb43:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eb46:	e8 56 d3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010eb4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f010eb4e:	83 ec 0c             	sub    $0xc,%esp
f010eb51:	68 00 fc 1f 00       	push   $0x1ffc00
f010eb56:	e8 15 d8 ff ff       	call   f010c370 <kmalloc>
f010eb5b:	83 c4 10             	add    $0x10,%esp
f010eb5e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010eb64:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010eb6a:	89 c1                	mov    %eax,%ecx
f010eb6c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010eb73:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010eb78:	0f b6 d0             	movzbl %al,%edx
f010eb7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010eb7e:	01 d0                	add    %edx,%eax
f010eb80:	48                   	dec    %eax
f010eb81:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010eb84:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010eb87:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb8c:	f7 75 bc             	divl   -0x44(%ebp)
f010eb8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010eb92:	29 d0                	sub    %edx,%eax
f010eb94:	89 c3                	mov    %eax,%ebx
f010eb96:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010eb9d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010eba2:	0f b6 c0             	movzbl %al,%eax
f010eba5:	c1 e0 04             	shl    $0x4,%eax
f010eba8:	89 c2                	mov    %eax,%edx
f010ebaa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010ebad:	01 d0                	add    %edx,%eax
f010ebaf:	48                   	dec    %eax
f010ebb0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010ebb3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010ebb6:	ba 00 00 00 00       	mov    $0x0,%edx
f010ebbb:	f7 75 b4             	divl   -0x4c(%ebp)
f010ebbe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010ebc1:	29 d0                	sub    %edx,%eax
f010ebc3:	01 d8                	add    %ebx,%eax
f010ebc5:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010ebca:	39 c1                	cmp    %eax,%ecx
f010ebcc:	74 17                	je     f010ebe5 <test_kmalloc_bestfit1+0x3cc>
f010ebce:	83 ec 04             	sub    $0x4,%esp
f010ebd1:	68 80 b9 11 f0       	push   $0xf011b980
f010ebd6:	68 a7 01 00 00       	push   $0x1a7
f010ebdb:	68 76 b5 11 f0       	push   $0xf011b576
f010ebe0:	e8 91 15 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ebe5:	e8 b7 d2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ebea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ebed:	74 17                	je     f010ec06 <test_kmalloc_bestfit1+0x3ed>
f010ebef:	83 ec 04             	sub    $0x4,%esp
f010ebf2:	68 88 b5 11 f0       	push   $0xf011b588
f010ebf7:	68 a8 01 00 00       	push   $0x1a8
f010ebfc:	68 76 b5 11 f0       	push   $0xf011b576
f010ec01:	e8 70 15 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010ec06:	e8 d3 bd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ec0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec0e:	29 c2                	sub    %eax,%edx
f010ec10:	89 d0                	mov    %edx,%eax
f010ec12:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ec17:	74 17                	je     f010ec30 <test_kmalloc_bestfit1+0x417>
f010ec19:	83 ec 04             	sub    $0x4,%esp
f010ec1c:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010ec21:	68 a9 01 00 00       	push   $0x1a9
f010ec26:	68 76 b5 11 f0       	push   $0xf011b576
f010ec2b:	e8 46 15 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010ec30:	e8 a9 bd ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ec35:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ec38:	e8 64 d2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ec3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f010ec40:	83 ec 0c             	sub    $0xc,%esp
f010ec43:	68 00 fc 0f 00       	push   $0xffc00
f010ec48:	e8 23 d7 ff ff       	call   f010c370 <kmalloc>
f010ec4d:	83 c4 10             	add    $0x10,%esp
f010ec50:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f010ec56:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010ec5c:	89 c1                	mov    %eax,%ecx
f010ec5e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010ec65:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ec6a:	0f b6 d0             	movzbl %al,%edx
f010ec6d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ec70:	01 d0                	add    %edx,%eax
f010ec72:	48                   	dec    %eax
f010ec73:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010ec76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010ec79:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec7e:	f7 75 ac             	divl   -0x54(%ebp)
f010ec81:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010ec84:	29 d0                	sub    %edx,%eax
f010ec86:	89 c3                	mov    %eax,%ebx
f010ec88:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010ec8f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ec94:	0f b6 c0             	movzbl %al,%eax
f010ec97:	c1 e0 04             	shl    $0x4,%eax
f010ec9a:	89 c2                	mov    %eax,%edx
f010ec9c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010ec9f:	01 d0                	add    %edx,%eax
f010eca1:	48                   	dec    %eax
f010eca2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010eca5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010eca8:	ba 00 00 00 00       	mov    $0x0,%edx
f010ecad:	f7 75 a4             	divl   -0x5c(%ebp)
f010ecb0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ecb3:	29 d0                	sub    %edx,%eax
f010ecb5:	01 d8                	add    %ebx,%eax
f010ecb7:	2d 00 00 60 09       	sub    $0x9600000,%eax
f010ecbc:	39 c1                	cmp    %eax,%ecx
f010ecbe:	74 17                	je     f010ecd7 <test_kmalloc_bestfit1+0x4be>
f010ecc0:	83 ec 04             	sub    $0x4,%esp
f010ecc3:	68 80 b9 11 f0       	push   $0xf011b980
f010ecc8:	68 af 01 00 00       	push   $0x1af
f010eccd:	68 76 b5 11 f0       	push   $0xf011b576
f010ecd2:	e8 9f 14 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ecd7:	e8 c5 d1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ecdc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecdf:	74 17                	je     f010ecf8 <test_kmalloc_bestfit1+0x4df>
f010ece1:	83 ec 04             	sub    $0x4,%esp
f010ece4:	68 88 b5 11 f0       	push   $0xf011b588
f010ece9:	68 b0 01 00 00       	push   $0x1b0
f010ecee:	68 76 b5 11 f0       	push   $0xf011b576
f010ecf3:	e8 7e 14 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010ecf8:	e8 e1 bc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ecfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed00:	29 c2                	sub    %eax,%edx
f010ed02:	89 d0                	mov    %edx,%eax
f010ed04:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ed09:	74 17                	je     f010ed22 <test_kmalloc_bestfit1+0x509>
f010ed0b:	83 ec 04             	sub    $0x4,%esp
f010ed0e:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010ed13:	68 b1 01 00 00       	push   $0x1b1
f010ed18:	68 76 b5 11 f0       	push   $0xf011b576
f010ed1d:	e8 54 14 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010ed22:	e8 b7 bc ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ed27:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ed2a:	e8 72 d1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ed2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f010ed32:	83 ec 0c             	sub    $0xc,%esp
f010ed35:	68 00 fc 0f 00       	push   $0xffc00
f010ed3a:	e8 31 d6 ff ff       	call   f010c370 <kmalloc>
f010ed3f:	83 c4 10             	add    $0x10,%esp
f010ed42:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010ed48:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010ed4e:	89 c1                	mov    %eax,%ecx
f010ed50:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010ed57:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ed5c:	0f b6 d0             	movzbl %al,%edx
f010ed5f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010ed62:	01 d0                	add    %edx,%eax
f010ed64:	48                   	dec    %eax
f010ed65:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ed68:	8b 45 98             	mov    -0x68(%ebp),%eax
f010ed6b:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed70:	f7 75 9c             	divl   -0x64(%ebp)
f010ed73:	8b 45 98             	mov    -0x68(%ebp),%eax
f010ed76:	29 d0                	sub    %edx,%eax
f010ed78:	89 c3                	mov    %eax,%ebx
f010ed7a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010ed81:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ed86:	0f b6 c0             	movzbl %al,%eax
f010ed89:	c1 e0 04             	shl    $0x4,%eax
f010ed8c:	89 c2                	mov    %eax,%edx
f010ed8e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ed91:	01 d0                	add    %edx,%eax
f010ed93:	48                   	dec    %eax
f010ed94:	89 45 90             	mov    %eax,-0x70(%ebp)
f010ed97:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ed9a:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed9f:	f7 75 94             	divl   -0x6c(%ebp)
f010eda2:	8b 45 90             	mov    -0x70(%ebp),%eax
f010eda5:	29 d0                	sub    %edx,%eax
f010eda7:	01 d8                	add    %ebx,%eax
f010eda9:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010edae:	39 c1                	cmp    %eax,%ecx
f010edb0:	74 17                	je     f010edc9 <test_kmalloc_bestfit1+0x5b0>
f010edb2:	83 ec 04             	sub    $0x4,%esp
f010edb5:	68 80 b9 11 f0       	push   $0xf011b980
f010edba:	68 b7 01 00 00       	push   $0x1b7
f010edbf:	68 76 b5 11 f0       	push   $0xf011b576
f010edc4:	e8 ad 13 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010edc9:	e8 d3 d0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010edce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010edd1:	74 17                	je     f010edea <test_kmalloc_bestfit1+0x5d1>
f010edd3:	83 ec 04             	sub    $0x4,%esp
f010edd6:	68 88 b5 11 f0       	push   $0xf011b588
f010eddb:	68 b8 01 00 00       	push   $0x1b8
f010ede0:	68 76 b5 11 f0       	push   $0xf011b576
f010ede5:	e8 8c 13 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010edea:	e8 ef bb ff ff       	call   f010a9de <sys_calculate_free_frames>
f010edef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010edf2:	29 c2                	sub    %eax,%edx
f010edf4:	89 d0                	mov    %edx,%eax
f010edf6:	3d 00 01 00 00       	cmp    $0x100,%eax
f010edfb:	74 17                	je     f010ee14 <test_kmalloc_bestfit1+0x5fb>
f010edfd:	83 ec 04             	sub    $0x4,%esp
f010ee00:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010ee05:	68 b9 01 00 00       	push   $0x1b9
f010ee0a:	68 76 b5 11 f0       	push   $0xf011b576
f010ee0f:	e8 62 13 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010ee14:	e8 c5 bb ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ee19:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ee1c:	e8 80 d0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ee21:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f010ee24:	83 ec 0c             	sub    $0xc,%esp
f010ee27:	68 00 fc 0f 00       	push   $0xffc00
f010ee2c:	e8 3f d5 ff ff       	call   f010c370 <kmalloc>
f010ee31:	83 c4 10             	add    $0x10,%esp
f010ee34:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f010ee3a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ee40:	89 c1                	mov    %eax,%ecx
f010ee42:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010ee49:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ee4e:	0f b6 d0             	movzbl %al,%edx
f010ee51:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010ee54:	01 d0                	add    %edx,%eax
f010ee56:	48                   	dec    %eax
f010ee57:	89 45 88             	mov    %eax,-0x78(%ebp)
f010ee5a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ee5d:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee62:	f7 75 8c             	divl   -0x74(%ebp)
f010ee65:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ee68:	29 d0                	sub    %edx,%eax
f010ee6a:	89 c3                	mov    %eax,%ebx
f010ee6c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010ee73:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ee78:	0f b6 c0             	movzbl %al,%eax
f010ee7b:	c1 e0 04             	shl    $0x4,%eax
f010ee7e:	89 c2                	mov    %eax,%edx
f010ee80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010ee83:	01 d0                	add    %edx,%eax
f010ee85:	48                   	dec    %eax
f010ee86:	89 45 80             	mov    %eax,-0x80(%ebp)
f010ee89:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ee8c:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee91:	f7 75 84             	divl   -0x7c(%ebp)
f010ee94:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ee97:	29 d0                	sub    %edx,%eax
f010ee99:	01 d8                	add    %ebx,%eax
f010ee9b:	2d 00 00 40 09       	sub    $0x9400000,%eax
f010eea0:	39 c1                	cmp    %eax,%ecx
f010eea2:	74 17                	je     f010eebb <test_kmalloc_bestfit1+0x6a2>
f010eea4:	83 ec 04             	sub    $0x4,%esp
f010eea7:	68 80 b9 11 f0       	push   $0xf011b980
f010eeac:	68 bf 01 00 00       	push   $0x1bf
f010eeb1:	68 76 b5 11 f0       	push   $0xf011b576
f010eeb6:	e8 bb 12 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eebb:	e8 e1 cf ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010eec0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eec3:	74 17                	je     f010eedc <test_kmalloc_bestfit1+0x6c3>
f010eec5:	83 ec 04             	sub    $0x4,%esp
f010eec8:	68 88 b5 11 f0       	push   $0xf011b588
f010eecd:	68 c0 01 00 00       	push   $0x1c0
f010eed2:	68 76 b5 11 f0       	push   $0xf011b576
f010eed7:	e8 9a 12 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010eedc:	e8 fd ba ff ff       	call   f010a9de <sys_calculate_free_frames>
f010eee1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eee4:	29 c2                	sub    %eax,%edx
f010eee6:	89 d0                	mov    %edx,%eax
f010eee8:	3d 00 01 00 00       	cmp    $0x100,%eax
f010eeed:	74 17                	je     f010ef06 <test_kmalloc_bestfit1+0x6ed>
f010eeef:	83 ec 04             	sub    $0x4,%esp
f010eef2:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010eef7:	68 c1 01 00 00       	push   $0x1c1
f010eefc:	68 76 b5 11 f0       	push   $0xf011b576
f010ef01:	e8 70 12 ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010ef06:	e8 d3 ba ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ef0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ef0e:	e8 8e cf ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ef13:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f010ef16:	83 ec 0c             	sub    $0xc,%esp
f010ef19:	68 00 fc 0f 00       	push   $0xffc00
f010ef1e:	e8 4d d4 ff ff       	call   f010c370 <kmalloc>
f010ef23:	83 c4 10             	add    $0x10,%esp
f010ef26:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f010ef2c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010ef32:	89 c1                	mov    %eax,%ecx
f010ef34:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010ef3b:	10 00 00 
f010ef3e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ef43:	0f b6 d0             	movzbl %al,%edx
f010ef46:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010ef4c:	01 d0                	add    %edx,%eax
f010ef4e:	48                   	dec    %eax
f010ef4f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010ef55:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ef5b:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef60:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010ef66:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ef6c:	29 d0                	sub    %edx,%eax
f010ef6e:	89 c3                	mov    %eax,%ebx
f010ef70:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010ef77:	10 00 00 
f010ef7a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ef7f:	0f b6 c0             	movzbl %al,%eax
f010ef82:	c1 e0 04             	shl    $0x4,%eax
f010ef85:	89 c2                	mov    %eax,%edx
f010ef87:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010ef8d:	01 d0                	add    %edx,%eax
f010ef8f:	48                   	dec    %eax
f010ef90:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010ef96:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ef9c:	ba 00 00 00 00       	mov    $0x0,%edx
f010efa1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010efa7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010efad:	29 d0                	sub    %edx,%eax
f010efaf:	01 d8                	add    %ebx,%eax
f010efb1:	2d 00 00 30 09       	sub    $0x9300000,%eax
f010efb6:	39 c1                	cmp    %eax,%ecx
f010efb8:	74 17                	je     f010efd1 <test_kmalloc_bestfit1+0x7b8>
f010efba:	83 ec 04             	sub    $0x4,%esp
f010efbd:	68 80 b9 11 f0       	push   $0xf011b980
f010efc2:	68 c7 01 00 00       	push   $0x1c7
f010efc7:	68 76 b5 11 f0       	push   $0xf011b576
f010efcc:	e8 a5 11 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010efd1:	e8 cb ce ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010efd6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efd9:	74 17                	je     f010eff2 <test_kmalloc_bestfit1+0x7d9>
f010efdb:	83 ec 04             	sub    $0x4,%esp
f010efde:	68 88 b5 11 f0       	push   $0xf011b588
f010efe3:	68 c8 01 00 00       	push   $0x1c8
f010efe8:	68 76 b5 11 f0       	push   $0xf011b576
f010efed:	e8 84 11 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010eff2:	e8 e7 b9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010eff7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010effa:	29 c2                	sub    %eax,%edx
f010effc:	89 d0                	mov    %edx,%eax
f010effe:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f003:	74 17                	je     f010f01c <test_kmalloc_bestfit1+0x803>
f010f005:	83 ec 04             	sub    $0x4,%esp
f010f008:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f00d:	68 c9 01 00 00       	push   $0x1c9
f010f012:	68 76 b5 11 f0       	push   $0xf011b576
f010f017:	e8 5a 11 ff ff       	call   f0100176 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f01c:	e8 bd b9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f021:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f024:	e8 78 ce ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f029:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f010f02c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010f032:	83 ec 0c             	sub    $0xc,%esp
f010f035:	50                   	push   %eax
f010f036:	e8 9b d3 ff ff       	call   f010c3d6 <kfree>
f010f03b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f03e:	e8 5e ce ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f043:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f046:	74 17                	je     f010f05f <test_kmalloc_bestfit1+0x846>
f010f048:	83 ec 04             	sub    $0x4,%esp
f010f04b:	68 88 b5 11 f0       	push   $0xf011b588
f010f050:	68 d2 01 00 00       	push   $0x1d2
f010f055:	68 76 b5 11 f0       	push   $0xf011b576
f010f05a:	e8 17 11 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010f05f:	e8 7a b9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f064:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f067:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f06c:	74 17                	je     f010f085 <test_kmalloc_bestfit1+0x86c>
f010f06e:	83 ec 04             	sub    $0x4,%esp
f010f071:	68 c3 b9 11 f0       	push   $0xf011b9c3
f010f076:	68 d3 01 00 00       	push   $0x1d3
f010f07b:	68 76 b5 11 f0       	push   $0xf011b576
f010f080:	e8 f1 10 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f085:	e8 54 b9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f08a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f08d:	e8 0f ce ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f092:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f010f095:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010f09b:	83 ec 0c             	sub    $0xc,%esp
f010f09e:	50                   	push   %eax
f010f09f:	e8 32 d3 ff ff       	call   f010c3d6 <kfree>
f010f0a4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f0a7:	e8 f5 cd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f0ac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0af:	74 17                	je     f010f0c8 <test_kmalloc_bestfit1+0x8af>
f010f0b1:	83 ec 04             	sub    $0x4,%esp
f010f0b4:	68 88 b5 11 f0       	push   $0xf011b588
f010f0b9:	68 d9 01 00 00       	push   $0x1d9
f010f0be:	68 76 b5 11 f0       	push   $0xf011b576
f010f0c3:	e8 ae 10 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010f0c8:	e8 11 b9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f0cd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f0d0:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f0d5:	74 17                	je     f010f0ee <test_kmalloc_bestfit1+0x8d5>
f010f0d7:	83 ec 04             	sub    $0x4,%esp
f010f0da:	68 c3 b9 11 f0       	push   $0xf011b9c3
f010f0df:	68 da 01 00 00       	push   $0x1da
f010f0e4:	68 76 b5 11 f0       	push   $0xf011b576
f010f0e9:	e8 88 10 ff ff       	call   f0100176 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010f0ee:	e8 eb b8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f0f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f0f6:	e8 a6 cd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f0fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f010f0fe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010f104:	83 ec 0c             	sub    $0xc,%esp
f010f107:	50                   	push   %eax
f010f108:	e8 c9 d2 ff ff       	call   f010c3d6 <kfree>
f010f10d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f110:	e8 8c cd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f115:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f118:	74 17                	je     f010f131 <test_kmalloc_bestfit1+0x918>
f010f11a:	83 ec 04             	sub    $0x4,%esp
f010f11d:	68 88 b5 11 f0       	push   $0xf011b588
f010f122:	68 e0 01 00 00       	push   $0x1e0
f010f127:	68 76 b5 11 f0       	push   $0xf011b576
f010f12c:	e8 45 10 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010f131:	e8 a8 b8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f136:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f139:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f13e:	74 17                	je     f010f157 <test_kmalloc_bestfit1+0x93e>
f010f140:	83 ec 04             	sub    $0x4,%esp
f010f143:	68 c3 b9 11 f0       	push   $0xf011b9c3
f010f148:	68 e1 01 00 00       	push   $0x1e1
f010f14d:	68 76 b5 11 f0       	push   $0xf011b576
f010f152:	e8 1f 10 ff ff       	call   f0100176 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010f157:	e8 82 b8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f15c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f15f:	e8 3d cd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f164:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f010f167:	83 ec 0c             	sub    $0xc,%esp
f010f16a:	68 00 00 08 00       	push   $0x80000
f010f16f:	e8 fc d1 ff ff       	call   f010c370 <kmalloc>
f010f174:	83 c4 10             	add    $0x10,%esp
f010f177:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010f17d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010f183:	89 c1                	mov    %eax,%ecx
f010f185:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010f18c:	10 00 00 
f010f18f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f194:	0f b6 d0             	movzbl %al,%edx
f010f197:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010f19d:	01 d0                	add    %edx,%eax
f010f19f:	48                   	dec    %eax
f010f1a0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010f1a6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010f1ac:	ba 00 00 00 00       	mov    $0x0,%edx
f010f1b1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010f1b7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010f1bd:	29 d0                	sub    %edx,%eax
f010f1bf:	89 c3                	mov    %eax,%ebx
f010f1c1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010f1c8:	10 00 00 
f010f1cb:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f1d0:	0f b6 c0             	movzbl %al,%eax
f010f1d3:	c1 e0 04             	shl    $0x4,%eax
f010f1d6:	89 c2                	mov    %eax,%edx
f010f1d8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010f1de:	01 d0                	add    %edx,%eax
f010f1e0:	48                   	dec    %eax
f010f1e1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010f1e7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010f1ed:	ba 00 00 00 00       	mov    $0x0,%edx
f010f1f2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010f1f8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010f1fe:	29 d0                	sub    %edx,%eax
f010f200:	01 d8                	add    %ebx,%eax
f010f202:	2d 00 00 50 09       	sub    $0x9500000,%eax
f010f207:	39 c1                	cmp    %eax,%ecx
f010f209:	74 17                	je     f010f222 <test_kmalloc_bestfit1+0xa09>
f010f20b:	83 ec 04             	sub    $0x4,%esp
f010f20e:	68 80 b9 11 f0       	push   $0xf011b980
f010f213:	68 ea 01 00 00       	push   $0x1ea
f010f218:	68 76 b5 11 f0       	push   $0xf011b576
f010f21d:	e8 54 0f ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f222:	e8 7a cc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f227:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f22a:	74 17                	je     f010f243 <test_kmalloc_bestfit1+0xa2a>
f010f22c:	83 ec 04             	sub    $0x4,%esp
f010f22f:	68 88 b5 11 f0       	push   $0xf011b588
f010f234:	68 eb 01 00 00       	push   $0x1eb
f010f239:	68 76 b5 11 f0       	push   $0xf011b576
f010f23e:	e8 33 0f ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f010f243:	e8 96 b7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f248:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f24b:	29 c2                	sub    %eax,%edx
f010f24d:	89 d0                	mov    %edx,%eax
f010f24f:	3d 80 00 00 00       	cmp    $0x80,%eax
f010f254:	74 17                	je     f010f26d <test_kmalloc_bestfit1+0xa54>
f010f256:	83 ec 04             	sub    $0x4,%esp
f010f259:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f25e:	68 ec 01 00 00       	push   $0x1ec
f010f263:	68 76 b5 11 f0       	push   $0xf011b576
f010f268:	e8 09 0f ff ff       	call   f0100176 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f010f26d:	e8 6c b7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f272:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f275:	e8 27 cc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f27a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f010f27d:	83 ec 0c             	sub    $0xc,%esp
f010f280:	68 00 fc 0f 00       	push   $0xffc00
f010f285:	e8 e6 d0 ff ff       	call   f010c370 <kmalloc>
f010f28a:	83 c4 10             	add    $0x10,%esp
f010f28d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010f293:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010f299:	89 c1                	mov    %eax,%ecx
f010f29b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010f2a2:	10 00 00 
f010f2a5:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f2aa:	0f b6 d0             	movzbl %al,%edx
f010f2ad:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010f2b3:	01 d0                	add    %edx,%eax
f010f2b5:	48                   	dec    %eax
f010f2b6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010f2bc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f2c2:	ba 00 00 00 00       	mov    $0x0,%edx
f010f2c7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010f2cd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f2d3:	29 d0                	sub    %edx,%eax
f010f2d5:	89 c3                	mov    %eax,%ebx
f010f2d7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010f2de:	10 00 00 
f010f2e1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f2e6:	0f b6 c0             	movzbl %al,%eax
f010f2e9:	c1 e0 04             	shl    $0x4,%eax
f010f2ec:	89 c2                	mov    %eax,%edx
f010f2ee:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010f2f4:	01 d0                	add    %edx,%eax
f010f2f6:	48                   	dec    %eax
f010f2f7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010f2fd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010f303:	ba 00 00 00 00       	mov    $0x0,%edx
f010f308:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010f30e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010f314:	29 d0                	sub    %edx,%eax
f010f316:	01 d8                	add    %ebx,%eax
f010f318:	2d 00 00 80 09       	sub    $0x9800000,%eax
f010f31d:	39 c1                	cmp    %eax,%ecx
f010f31f:	74 17                	je     f010f338 <test_kmalloc_bestfit1+0xb1f>
f010f321:	83 ec 04             	sub    $0x4,%esp
f010f324:	68 80 b9 11 f0       	push   $0xf011b980
f010f329:	68 f2 01 00 00       	push   $0x1f2
f010f32e:	68 76 b5 11 f0       	push   $0xf011b576
f010f333:	e8 3e 0e ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f338:	e8 64 cb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f33d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f340:	74 17                	je     f010f359 <test_kmalloc_bestfit1+0xb40>
f010f342:	83 ec 04             	sub    $0x4,%esp
f010f345:	68 88 b5 11 f0       	push   $0xf011b588
f010f34a:	68 f3 01 00 00       	push   $0x1f3
f010f34f:	68 76 b5 11 f0       	push   $0xf011b576
f010f354:	e8 1d 0e ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f359:	e8 80 b6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f35e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f361:	29 c2                	sub    %eax,%edx
f010f363:	89 d0                	mov    %edx,%eax
f010f365:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f36a:	74 17                	je     f010f383 <test_kmalloc_bestfit1+0xb6a>
f010f36c:	83 ec 04             	sub    $0x4,%esp
f010f36f:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f374:	68 f4 01 00 00       	push   $0x1f4
f010f379:	68 76 b5 11 f0       	push   $0xf011b576
f010f37e:	e8 f3 0d ff ff       	call   f0100176 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010f383:	e8 56 b6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f388:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f38b:	e8 11 cb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f390:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f010f393:	83 ec 0c             	sub    $0xc,%esp
f010f396:	68 00 fc 03 00       	push   $0x3fc00
f010f39b:	e8 d0 cf ff ff       	call   f010c370 <kmalloc>
f010f3a0:	83 c4 10             	add    $0x10,%esp
f010f3a3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f010f3a9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010f3af:	89 c1                	mov    %eax,%ecx
f010f3b1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010f3b8:	10 00 00 
f010f3bb:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f3c0:	0f b6 d0             	movzbl %al,%edx
f010f3c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010f3c9:	01 d0                	add    %edx,%eax
f010f3cb:	48                   	dec    %eax
f010f3cc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010f3d2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010f3d8:	ba 00 00 00 00       	mov    $0x0,%edx
f010f3dd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010f3e3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010f3e9:	29 d0                	sub    %edx,%eax
f010f3eb:	89 c3                	mov    %eax,%ebx
f010f3ed:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010f3f4:	10 00 00 
f010f3f7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f3fc:	0f b6 c0             	movzbl %al,%eax
f010f3ff:	c1 e0 04             	shl    $0x4,%eax
f010f402:	89 c2                	mov    %eax,%edx
f010f404:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010f40a:	01 d0                	add    %edx,%eax
f010f40c:	48                   	dec    %eax
f010f40d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010f413:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010f419:	ba 00 00 00 00       	mov    $0x0,%edx
f010f41e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010f424:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010f42a:	29 d0                	sub    %edx,%eax
f010f42c:	01 d8                	add    %ebx,%eax
f010f42e:	2d 00 00 48 09       	sub    $0x9480000,%eax
f010f433:	39 c1                	cmp    %eax,%ecx
f010f435:	74 17                	je     f010f44e <test_kmalloc_bestfit1+0xc35>
f010f437:	83 ec 04             	sub    $0x4,%esp
f010f43a:	68 80 b9 11 f0       	push   $0xf011b980
f010f43f:	68 fa 01 00 00       	push   $0x1fa
f010f444:	68 76 b5 11 f0       	push   $0xf011b576
f010f449:	e8 28 0d ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f44e:	e8 4e ca ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f453:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f456:	74 17                	je     f010f46f <test_kmalloc_bestfit1+0xc56>
f010f458:	83 ec 04             	sub    $0x4,%esp
f010f45b:	68 88 b5 11 f0       	push   $0xf011b588
f010f460:	68 fb 01 00 00       	push   $0x1fb
f010f465:	68 76 b5 11 f0       	push   $0xf011b576
f010f46a:	e8 07 0d ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f010f46f:	e8 6a b5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f474:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f477:	29 c2                	sub    %eax,%edx
f010f479:	89 d0                	mov    %edx,%eax
f010f47b:	83 f8 40             	cmp    $0x40,%eax
f010f47e:	74 17                	je     f010f497 <test_kmalloc_bestfit1+0xc7e>
f010f480:	83 ec 04             	sub    $0x4,%esp
f010f483:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f488:	68 fc 01 00 00       	push   $0x1fc
f010f48d:	68 76 b5 11 f0       	push   $0xf011b576
f010f492:	e8 df 0c ff ff       	call   f0100176 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f010f497:	e8 42 b5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f49c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f49f:	e8 fd c9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f4a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f010f4a7:	83 ec 0c             	sub    $0xc,%esp
f010f4aa:	68 00 fc 3f 00       	push   $0x3ffc00
f010f4af:	e8 bc ce ff ff       	call   f010c370 <kmalloc>
f010f4b4:	83 c4 10             	add    $0x10,%esp
f010f4b7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f010f4bd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010f4c3:	89 c1                	mov    %eax,%ecx
f010f4c5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f010f4cc:	10 00 00 
f010f4cf:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f4d4:	0f b6 d0             	movzbl %al,%edx
f010f4d7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f4dd:	01 d0                	add    %edx,%eax
f010f4df:	48                   	dec    %eax
f010f4e0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f010f4e6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f4ec:	ba 00 00 00 00       	mov    $0x0,%edx
f010f4f1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f010f4f7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f4fd:	29 d0                	sub    %edx,%eax
f010f4ff:	89 c3                	mov    %eax,%ebx
f010f501:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010f508:	10 00 00 
f010f50b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f510:	0f b6 c0             	movzbl %al,%eax
f010f513:	c1 e0 04             	shl    $0x4,%eax
f010f516:	89 c2                	mov    %eax,%edx
f010f518:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010f51e:	01 d0                	add    %edx,%eax
f010f520:	48                   	dec    %eax
f010f521:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010f527:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f52d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f532:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010f538:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f53e:	29 d0                	sub    %edx,%eax
f010f540:	01 d8                	add    %ebx,%eax
f010f542:	2d 00 00 20 09       	sub    $0x9200000,%eax
f010f547:	39 c1                	cmp    %eax,%ecx
f010f549:	74 17                	je     f010f562 <test_kmalloc_bestfit1+0xd49>
f010f54b:	83 ec 04             	sub    $0x4,%esp
f010f54e:	68 80 b9 11 f0       	push   $0xf011b980
f010f553:	68 02 02 00 00       	push   $0x202
f010f558:	68 76 b5 11 f0       	push   $0xf011b576
f010f55d:	e8 14 0c ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f562:	e8 3a c9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f567:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f56a:	74 17                	je     f010f583 <test_kmalloc_bestfit1+0xd6a>
f010f56c:	83 ec 04             	sub    $0x4,%esp
f010f56f:	68 88 b5 11 f0       	push   $0xf011b588
f010f574:	68 03 02 00 00       	push   $0x203
f010f579:	68 76 b5 11 f0       	push   $0xf011b576
f010f57e:	e8 f3 0b ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f010f583:	e8 56 b4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f588:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f58b:	29 c2                	sub    %eax,%edx
f010f58d:	89 d0                	mov    %edx,%eax
f010f58f:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f594:	74 17                	je     f010f5ad <test_kmalloc_bestfit1+0xd94>
f010f596:	83 ec 04             	sub    $0x4,%esp
f010f599:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f59e:	68 04 02 00 00       	push   $0x204
f010f5a3:	68 76 b5 11 f0       	push   $0xf011b576
f010f5a8:	e8 c9 0b ff ff       	call   f0100176 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f010f5ad:	e8 2c b4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f5b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f5b5:	e8 e7 c8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f5ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f010f5bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010f5c3:	83 ec 0c             	sub    $0xc,%esp
f010f5c6:	50                   	push   %eax
f010f5c7:	e8 0a ce ff ff       	call   f010c3d6 <kfree>
f010f5cc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f5cf:	e8 cd c8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f5d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f5d7:	74 17                	je     f010f5f0 <test_kmalloc_bestfit1+0xdd7>
f010f5d9:	83 ec 04             	sub    $0x4,%esp
f010f5dc:	68 88 b5 11 f0       	push   $0xf011b588
f010f5e1:	68 0d 02 00 00       	push   $0x20d
f010f5e6:	68 76 b5 11 f0       	push   $0xf011b576
f010f5eb:	e8 86 0b ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010f5f0:	e8 e9 b3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f5f5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f5f8:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f5fd:	74 17                	je     f010f616 <test_kmalloc_bestfit1+0xdfd>
f010f5ff:	83 ec 04             	sub    $0x4,%esp
f010f602:	68 c3 b9 11 f0       	push   $0xf011b9c3
f010f607:	68 0e 02 00 00       	push   $0x20e
f010f60c:	68 76 b5 11 f0       	push   $0xf011b576
f010f611:	e8 60 0b ff ff       	call   f0100176 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f010f616:	e8 c3 b3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f61b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f61e:	e8 7e c8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f623:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f010f626:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010f62c:	83 ec 0c             	sub    $0xc,%esp
f010f62f:	50                   	push   %eax
f010f630:	e8 a1 cd ff ff       	call   f010c3d6 <kfree>
f010f635:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f638:	e8 64 c8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f63d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f640:	74 17                	je     f010f659 <test_kmalloc_bestfit1+0xe40>
f010f642:	83 ec 04             	sub    $0x4,%esp
f010f645:	68 88 b5 11 f0       	push   $0xf011b588
f010f64a:	68 14 02 00 00       	push   $0x214
f010f64f:	68 76 b5 11 f0       	push   $0xf011b576
f010f654:	e8 1d 0b ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f010f659:	e8 80 b3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f65e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010f661:	3d 80 00 00 00       	cmp    $0x80,%eax
f010f666:	74 17                	je     f010f67f <test_kmalloc_bestfit1+0xe66>
f010f668:	83 ec 04             	sub    $0x4,%esp
f010f66b:	68 c3 b9 11 f0       	push   $0xf011b9c3
f010f670:	68 15 02 00 00       	push   $0x215
f010f675:	68 76 b5 11 f0       	push   $0xf011b576
f010f67a:	e8 f7 0a ff ff       	call   f0100176 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f010f67f:	e8 5a b3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f684:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f687:	e8 15 c8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f68c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f010f68f:	83 ec 0c             	sub    $0xc,%esp
f010f692:	68 00 fc 1f 00       	push   $0x1ffc00
f010f697:	e8 d4 cc ff ff       	call   f010c370 <kmalloc>
f010f69c:	83 c4 10             	add    $0x10,%esp
f010f69f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f010f6a5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010f6ab:	89 c1                	mov    %eax,%ecx
f010f6ad:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010f6b4:	10 00 00 
f010f6b7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f6bc:	0f b6 d0             	movzbl %al,%edx
f010f6bf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010f6c5:	01 d0                	add    %edx,%eax
f010f6c7:	48                   	dec    %eax
f010f6c8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010f6ce:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6d4:	ba 00 00 00 00       	mov    $0x0,%edx
f010f6d9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010f6df:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6e5:	29 d0                	sub    %edx,%eax
f010f6e7:	89 c3                	mov    %eax,%ebx
f010f6e9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010f6f0:	10 00 00 
f010f6f3:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f6f8:	0f b6 c0             	movzbl %al,%eax
f010f6fb:	c1 e0 04             	shl    $0x4,%eax
f010f6fe:	89 c2                	mov    %eax,%edx
f010f700:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f706:	01 d0                	add    %edx,%eax
f010f708:	48                   	dec    %eax
f010f709:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010f70f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f715:	ba 00 00 00 00       	mov    $0x0,%edx
f010f71a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010f720:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f726:	29 d0                	sub    %edx,%eax
f010f728:	01 d8                	add    %ebx,%eax
f010f72a:	2d 00 00 70 09       	sub    $0x9700000,%eax
f010f72f:	39 c1                	cmp    %eax,%ecx
f010f731:	74 17                	je     f010f74a <test_kmalloc_bestfit1+0xf31>
f010f733:	83 ec 04             	sub    $0x4,%esp
f010f736:	68 80 b9 11 f0       	push   $0xf011b980
f010f73b:	68 1e 02 00 00       	push   $0x21e
f010f740:	68 76 b5 11 f0       	push   $0xf011b576
f010f745:	e8 2c 0a ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f74a:	e8 52 c7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f74f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f752:	74 17                	je     f010f76b <test_kmalloc_bestfit1+0xf52>
f010f754:	83 ec 04             	sub    $0x4,%esp
f010f757:	68 88 b5 11 f0       	push   $0xf011b588
f010f75c:	68 1f 02 00 00       	push   $0x21f
f010f761:	68 76 b5 11 f0       	push   $0xf011b576
f010f766:	e8 0b 0a ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f010f76b:	e8 6e b2 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f770:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f773:	29 c2                	sub    %eax,%edx
f010f775:	89 d0                	mov    %edx,%eax
f010f777:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f77c:	74 17                	je     f010f795 <test_kmalloc_bestfit1+0xf7c>
f010f77e:	83 ec 04             	sub    $0x4,%esp
f010f781:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f786:	68 20 02 00 00       	push   $0x220
f010f78b:	68 76 b5 11 f0       	push   $0xf011b576
f010f790:	e8 e1 09 ff ff       	call   f0100176 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f010f795:	83 ec 0c             	sub    $0xc,%esp
f010f798:	68 d0 b9 11 f0       	push   $0xf011b9d0
f010f79d:	e8 2d 76 ff ff       	call   f0106dcf <cprintf>
f010f7a2:	83 c4 10             	add    $0x10,%esp

	return 1;
f010f7a5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010f7aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010f7ad:	5b                   	pop    %ebx
f010f7ae:	5f                   	pop    %edi
f010f7af:	5d                   	pop    %ebp
f010f7b0:	c3                   	ret    

f010f7b1 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f010f7b1:	55                   	push   %ebp
f010f7b2:	89 e5                	mov    %esp,%ebp
f010f7b4:	57                   	push   %edi
f010f7b5:	53                   	push   %ebx
f010f7b6:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f010f7bc:	83 ec 0c             	sub    $0xc,%esp
f010f7bf:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010f7c4:	e8 06 76 ff ff       	call   f0106dcf <cprintf>
f010f7c9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010f7cc:	83 ec 0c             	sub    $0xc,%esp
f010f7cf:	68 e8 b4 11 f0       	push   $0xf011b4e8
f010f7d4:	e8 f6 75 ff ff       	call   f0106dcf <cprintf>
f010f7d9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010f7dc:	83 ec 0c             	sub    $0xc,%esp
f010f7df:	68 b8 b4 11 f0       	push   $0xf011b4b8
f010f7e4:	e8 e6 75 ff ff       	call   f0106dcf <cprintf>
f010f7e9:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010f7ec:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f010f7f2:	b9 14 00 00 00       	mov    $0x14,%ecx
f010f7f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010f7fc:	89 d7                	mov    %edx,%edi
f010f7fe:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f010f800:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010f807:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f80c:	0f b6 d0             	movzbl %al,%edx
f010f80f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f812:	01 d0                	add    %edx,%eax
f010f814:	48                   	dec    %eax
f010f815:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010f818:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f81b:	ba 00 00 00 00       	mov    $0x0,%edx
f010f820:	f7 75 f4             	divl   -0xc(%ebp)
f010f823:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f826:	29 d0                	sub    %edx,%eax
f010f828:	89 c1                	mov    %eax,%ecx
f010f82a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010f831:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f836:	0f b6 c0             	movzbl %al,%eax
f010f839:	c1 e0 04             	shl    $0x4,%eax
f010f83c:	89 c2                	mov    %eax,%edx
f010f83e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f841:	01 d0                	add    %edx,%eax
f010f843:	48                   	dec    %eax
f010f844:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010f847:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f84a:	ba 00 00 00 00       	mov    $0x0,%edx
f010f84f:	f7 75 ec             	divl   -0x14(%ebp)
f010f852:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f855:	29 d0                	sub    %edx,%eax
f010f857:	01 c8                	add    %ecx,%eax
f010f859:	ba 01 f0 ff 09       	mov    $0x9fff001,%edx
f010f85e:	29 c2                	sub    %eax,%edx
f010f860:	89 d0                	mov    %edx,%eax
f010f862:	83 ec 0c             	sub    $0xc,%esp
f010f865:	50                   	push   %eax
f010f866:	e8 05 cb ff ff       	call   f010c370 <kmalloc>
f010f86b:	83 c4 10             	add    $0x10,%esp
f010f86e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f010f874:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f87a:	85 c0                	test   %eax,%eax
f010f87c:	74 17                	je     f010f895 <test_kmalloc_bestfit2+0xe4>
f010f87e:	83 ec 04             	sub    $0x4,%esp
f010f881:	68 18 ba 11 f0       	push   $0xf011ba18
f010f886:	68 36 02 00 00       	push   $0x236
f010f88b:	68 76 b5 11 f0       	push   $0xf011b576
f010f890:	e8 e1 08 ff ff       	call   f0100176 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f895:	e8 44 b1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f89a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f89d:	e8 ff c5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f8a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010f8a5:	83 ec 0c             	sub    $0xc,%esp
f010f8a8:	68 00 fc 1f 00       	push   $0x1ffc00
f010f8ad:	e8 be ca ff ff       	call   f010c370 <kmalloc>
f010f8b2:	83 c4 10             	add    $0x10,%esp
f010f8b5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010f8bb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f8c1:	89 c1                	mov    %eax,%ecx
f010f8c3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010f8ca:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f8cf:	0f b6 d0             	movzbl %al,%edx
f010f8d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8d5:	01 d0                	add    %edx,%eax
f010f8d7:	48                   	dec    %eax
f010f8d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010f8db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f8de:	ba 00 00 00 00       	mov    $0x0,%edx
f010f8e3:	f7 75 dc             	divl   -0x24(%ebp)
f010f8e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f8e9:	29 d0                	sub    %edx,%eax
f010f8eb:	89 c3                	mov    %eax,%ebx
f010f8ed:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010f8f4:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f8f9:	0f b6 c0             	movzbl %al,%eax
f010f8fc:	c1 e0 04             	shl    $0x4,%eax
f010f8ff:	89 c2                	mov    %eax,%edx
f010f901:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f904:	01 d0                	add    %edx,%eax
f010f906:	48                   	dec    %eax
f010f907:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f90a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f90d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f912:	f7 75 d4             	divl   -0x2c(%ebp)
f010f915:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f918:	29 d0                	sub    %edx,%eax
f010f91a:	01 d8                	add    %ebx,%eax
f010f91c:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f010f921:	39 c1                	cmp    %eax,%ecx
f010f923:	74 17                	je     f010f93c <test_kmalloc_bestfit2+0x18b>
f010f925:	83 ec 04             	sub    $0x4,%esp
f010f928:	68 80 b9 11 f0       	push   $0xf011b980
f010f92d:	68 40 02 00 00       	push   $0x240
f010f932:	68 76 b5 11 f0       	push   $0xf011b576
f010f937:	e8 3a 08 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f93c:	e8 60 c5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f941:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f944:	74 17                	je     f010f95d <test_kmalloc_bestfit2+0x1ac>
f010f946:	83 ec 04             	sub    $0x4,%esp
f010f949:	68 88 b5 11 f0       	push   $0xf011b588
f010f94e:	68 41 02 00 00       	push   $0x241
f010f953:	68 76 b5 11 f0       	push   $0xf011b576
f010f958:	e8 19 08 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010f95d:	e8 7c b0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f962:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f965:	29 c2                	sub    %eax,%edx
f010f967:	89 d0                	mov    %edx,%eax
f010f969:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f96e:	74 17                	je     f010f987 <test_kmalloc_bestfit2+0x1d6>
f010f970:	83 ec 04             	sub    $0x4,%esp
f010f973:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010f978:	68 42 02 00 00       	push   $0x242
f010f97d:	68 76 b5 11 f0       	push   $0xf011b576
f010f982:	e8 ef 07 ff ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f987:	e8 52 b0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010f98c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010f98f:	e8 0d c5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010f994:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010f997:	83 ec 0c             	sub    $0xc,%esp
f010f99a:	68 00 fc 1f 00       	push   $0x1ffc00
f010f99f:	e8 cc c9 ff ff       	call   f010c370 <kmalloc>
f010f9a4:	83 c4 10             	add    $0x10,%esp
f010f9a7:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f010f9ad:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010f9b3:	89 c1                	mov    %eax,%ecx
f010f9b5:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010f9bc:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f9c1:	0f b6 d0             	movzbl %al,%edx
f010f9c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f9c7:	01 d0                	add    %edx,%eax
f010f9c9:	48                   	dec    %eax
f010f9ca:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f9cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f9d0:	ba 00 00 00 00       	mov    $0x0,%edx
f010f9d5:	f7 75 cc             	divl   -0x34(%ebp)
f010f9d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f9db:	29 d0                	sub    %edx,%eax
f010f9dd:	89 c3                	mov    %eax,%ebx
f010f9df:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010f9e6:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010f9eb:	0f b6 c0             	movzbl %al,%eax
f010f9ee:	c1 e0 04             	shl    $0x4,%eax
f010f9f1:	89 c2                	mov    %eax,%edx
f010f9f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f9f6:	01 d0                	add    %edx,%eax
f010f9f8:	48                   	dec    %eax
f010f9f9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f9fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f9ff:	ba 00 00 00 00       	mov    $0x0,%edx
f010fa04:	f7 75 c4             	divl   -0x3c(%ebp)
f010fa07:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fa0a:	29 d0                	sub    %edx,%eax
f010fa0c:	01 d8                	add    %ebx,%eax
f010fa0e:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f010fa13:	39 c1                	cmp    %eax,%ecx
f010fa15:	74 17                	je     f010fa2e <test_kmalloc_bestfit2+0x27d>
f010fa17:	83 ec 04             	sub    $0x4,%esp
f010fa1a:	68 80 b9 11 f0       	push   $0xf011b980
f010fa1f:	68 48 02 00 00       	push   $0x248
f010fa24:	68 76 b5 11 f0       	push   $0xf011b576
f010fa29:	e8 48 07 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fa2e:	e8 6e c4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fa33:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fa36:	74 17                	je     f010fa4f <test_kmalloc_bestfit2+0x29e>
f010fa38:	83 ec 04             	sub    $0x4,%esp
f010fa3b:	68 88 b5 11 f0       	push   $0xf011b588
f010fa40:	68 49 02 00 00       	push   $0x249
f010fa45:	68 76 b5 11 f0       	push   $0xf011b576
f010fa4a:	e8 27 07 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f010fa4f:	e8 8a af ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fa54:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa57:	29 c2                	sub    %eax,%edx
f010fa59:	89 d0                	mov    %edx,%eax
f010fa5b:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fa60:	74 17                	je     f010fa79 <test_kmalloc_bestfit2+0x2c8>
f010fa62:	83 ec 04             	sub    $0x4,%esp
f010fa65:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fa6a:	68 4a 02 00 00       	push   $0x24a
f010fa6f:	68 76 b5 11 f0       	push   $0xf011b576
f010fa74:	e8 fd 06 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010fa79:	e8 60 af ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fa7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fa81:	e8 1b c4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fa86:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010fa89:	83 ec 0c             	sub    $0xc,%esp
f010fa8c:	68 00 08 00 00       	push   $0x800
f010fa91:	e8 da c8 ff ff       	call   f010c370 <kmalloc>
f010fa96:	83 c4 10             	add    $0x10,%esp
f010fa99:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f010fa9f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010faa5:	89 c1                	mov    %eax,%ecx
f010faa7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010faae:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fab3:	0f b6 d0             	movzbl %al,%edx
f010fab6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010fab9:	01 d0                	add    %edx,%eax
f010fabb:	48                   	dec    %eax
f010fabc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010fabf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010fac2:	ba 00 00 00 00       	mov    $0x0,%edx
f010fac7:	f7 75 bc             	divl   -0x44(%ebp)
f010faca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010facd:	29 d0                	sub    %edx,%eax
f010facf:	89 c3                	mov    %eax,%ebx
f010fad1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010fad8:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fadd:	0f b6 c0             	movzbl %al,%eax
f010fae0:	c1 e0 04             	shl    $0x4,%eax
f010fae3:	89 c2                	mov    %eax,%edx
f010fae5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010fae8:	01 d0                	add    %edx,%eax
f010faea:	48                   	dec    %eax
f010faeb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010faee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010faf1:	ba 00 00 00 00       	mov    $0x0,%edx
f010faf6:	f7 75 b4             	divl   -0x4c(%ebp)
f010faf9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010fafc:	29 d0                	sub    %edx,%eax
f010fafe:	01 d8                	add    %ebx,%eax
f010fb00:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f010fb05:	39 c1                	cmp    %eax,%ecx
f010fb07:	74 17                	je     f010fb20 <test_kmalloc_bestfit2+0x36f>
f010fb09:	83 ec 04             	sub    $0x4,%esp
f010fb0c:	68 80 b9 11 f0       	push   $0xf011b980
f010fb11:	68 50 02 00 00       	push   $0x250
f010fb16:	68 76 b5 11 f0       	push   $0xf011b576
f010fb1b:	e8 56 06 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb20:	e8 7c c3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fb25:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fb28:	74 17                	je     f010fb41 <test_kmalloc_bestfit2+0x390>
f010fb2a:	83 ec 04             	sub    $0x4,%esp
f010fb2d:	68 88 b5 11 f0       	push   $0xf011b588
f010fb32:	68 51 02 00 00       	push   $0x251
f010fb37:	68 76 b5 11 f0       	push   $0xf011b576
f010fb3c:	e8 35 06 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010fb41:	e8 98 ae ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fb46:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb49:	29 c2                	sub    %eax,%edx
f010fb4b:	89 d0                	mov    %edx,%eax
f010fb4d:	83 f8 01             	cmp    $0x1,%eax
f010fb50:	74 17                	je     f010fb69 <test_kmalloc_bestfit2+0x3b8>
f010fb52:	83 ec 04             	sub    $0x4,%esp
f010fb55:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fb5a:	68 52 02 00 00       	push   $0x252
f010fb5f:	68 76 b5 11 f0       	push   $0xf011b576
f010fb64:	e8 0d 06 ff ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010fb69:	e8 70 ae ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fb6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fb71:	e8 2b c3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fb76:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010fb79:	83 ec 0c             	sub    $0xc,%esp
f010fb7c:	68 00 08 00 00       	push   $0x800
f010fb81:	e8 ea c7 ff ff       	call   f010c370 <kmalloc>
f010fb86:	83 c4 10             	add    $0x10,%esp
f010fb89:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f010fb8f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010fb95:	89 c1                	mov    %eax,%ecx
f010fb97:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010fb9e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fba3:	0f b6 d0             	movzbl %al,%edx
f010fba6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fba9:	01 d0                	add    %edx,%eax
f010fbab:	48                   	dec    %eax
f010fbac:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010fbaf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fbb2:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbb7:	f7 75 ac             	divl   -0x54(%ebp)
f010fbba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fbbd:	29 d0                	sub    %edx,%eax
f010fbbf:	89 c3                	mov    %eax,%ebx
f010fbc1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010fbc8:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fbcd:	0f b6 c0             	movzbl %al,%eax
f010fbd0:	c1 e0 04             	shl    $0x4,%eax
f010fbd3:	89 c2                	mov    %eax,%edx
f010fbd5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fbd8:	01 d0                	add    %edx,%eax
f010fbda:	48                   	dec    %eax
f010fbdb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010fbde:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010fbe1:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbe6:	f7 75 a4             	divl   -0x5c(%ebp)
f010fbe9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010fbec:	29 d0                	sub    %edx,%eax
f010fbee:	01 d8                	add    %ebx,%eax
f010fbf0:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f010fbf5:	39 c1                	cmp    %eax,%ecx
f010fbf7:	74 17                	je     f010fc10 <test_kmalloc_bestfit2+0x45f>
f010fbf9:	83 ec 04             	sub    $0x4,%esp
f010fbfc:	68 80 b9 11 f0       	push   $0xf011b980
f010fc01:	68 58 02 00 00       	push   $0x258
f010fc06:	68 76 b5 11 f0       	push   $0xf011b576
f010fc0b:	e8 66 05 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc10:	e8 8c c2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fc15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc18:	74 17                	je     f010fc31 <test_kmalloc_bestfit2+0x480>
f010fc1a:	83 ec 04             	sub    $0x4,%esp
f010fc1d:	68 88 b5 11 f0       	push   $0xf011b588
f010fc22:	68 59 02 00 00       	push   $0x259
f010fc27:	68 76 b5 11 f0       	push   $0xf011b576
f010fc2c:	e8 45 05 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f010fc31:	e8 a8 ad ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fc36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc39:	29 c2                	sub    %eax,%edx
f010fc3b:	89 d0                	mov    %edx,%eax
f010fc3d:	83 f8 01             	cmp    $0x1,%eax
f010fc40:	74 17                	je     f010fc59 <test_kmalloc_bestfit2+0x4a8>
f010fc42:	83 ec 04             	sub    $0x4,%esp
f010fc45:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fc4a:	68 5a 02 00 00       	push   $0x25a
f010fc4f:	68 76 b5 11 f0       	push   $0xf011b576
f010fc54:	e8 1d 05 ff ff       	call   f0100176 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fc59:	e8 80 ad ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fc5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fc61:	e8 3b c2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fc66:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f010fc69:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010fc6f:	83 ec 0c             	sub    $0xc,%esp
f010fc72:	50                   	push   %eax
f010fc73:	e8 5e c7 ff ff       	call   f010c3d6 <kfree>
f010fc78:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc7b:	e8 21 c2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fc80:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc83:	74 17                	je     f010fc9c <test_kmalloc_bestfit2+0x4eb>
f010fc85:	83 ec 04             	sub    $0x4,%esp
f010fc88:	68 88 b5 11 f0       	push   $0xf011b588
f010fc8d:	68 60 02 00 00       	push   $0x260
f010fc92:	68 76 b5 11 f0       	push   $0xf011b576
f010fc97:	e8 da 04 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f010fc9c:	e8 3d ad ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fca1:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fca4:	83 f8 01             	cmp    $0x1,%eax
f010fca7:	74 17                	je     f010fcc0 <test_kmalloc_bestfit2+0x50f>
f010fca9:	83 ec 04             	sub    $0x4,%esp
f010fcac:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fcb1:	68 61 02 00 00       	push   $0x261
f010fcb6:	68 76 b5 11 f0       	push   $0xf011b576
f010fcbb:	e8 b6 04 ff ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010fcc0:	e8 19 ad ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fcc5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fcc8:	e8 d4 c1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fccd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010fcd0:	83 ec 0c             	sub    $0xc,%esp
f010fcd3:	68 00 1c 00 00       	push   $0x1c00
f010fcd8:	e8 93 c6 ff ff       	call   f010c370 <kmalloc>
f010fcdd:	83 c4 10             	add    $0x10,%esp
f010fce0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f010fce6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010fcec:	89 c1                	mov    %eax,%ecx
f010fcee:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010fcf5:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fcfa:	0f b6 d0             	movzbl %al,%edx
f010fcfd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010fd00:	01 d0                	add    %edx,%eax
f010fd02:	48                   	dec    %eax
f010fd03:	89 45 98             	mov    %eax,-0x68(%ebp)
f010fd06:	8b 45 98             	mov    -0x68(%ebp),%eax
f010fd09:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd0e:	f7 75 9c             	divl   -0x64(%ebp)
f010fd11:	8b 45 98             	mov    -0x68(%ebp),%eax
f010fd14:	29 d0                	sub    %edx,%eax
f010fd16:	89 c3                	mov    %eax,%ebx
f010fd18:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010fd1f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fd24:	0f b6 c0             	movzbl %al,%eax
f010fd27:	c1 e0 04             	shl    $0x4,%eax
f010fd2a:	89 c2                	mov    %eax,%edx
f010fd2c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd2f:	01 d0                	add    %edx,%eax
f010fd31:	48                   	dec    %eax
f010fd32:	89 45 90             	mov    %eax,-0x70(%ebp)
f010fd35:	8b 45 90             	mov    -0x70(%ebp),%eax
f010fd38:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd3d:	f7 75 94             	divl   -0x6c(%ebp)
f010fd40:	8b 45 90             	mov    -0x70(%ebp),%eax
f010fd43:	29 d0                	sub    %edx,%eax
f010fd45:	01 d8                	add    %ebx,%eax
f010fd47:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f010fd4c:	39 c1                	cmp    %eax,%ecx
f010fd4e:	74 17                	je     f010fd67 <test_kmalloc_bestfit2+0x5b6>
f010fd50:	83 ec 04             	sub    $0x4,%esp
f010fd53:	68 80 b9 11 f0       	push   $0xf011b980
f010fd58:	68 67 02 00 00       	push   $0x267
f010fd5d:	68 76 b5 11 f0       	push   $0xf011b576
f010fd62:	e8 0f 04 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fd67:	e8 35 c1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fd6c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd6f:	74 17                	je     f010fd88 <test_kmalloc_bestfit2+0x5d7>
f010fd71:	83 ec 04             	sub    $0x4,%esp
f010fd74:	68 88 b5 11 f0       	push   $0xf011b588
f010fd79:	68 68 02 00 00       	push   $0x268
f010fd7e:	68 76 b5 11 f0       	push   $0xf011b576
f010fd83:	e8 ee 03 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f010fd88:	e8 51 ac ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fd8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd90:	29 c2                	sub    %eax,%edx
f010fd92:	89 d0                	mov    %edx,%eax
f010fd94:	83 f8 02             	cmp    $0x2,%eax
f010fd97:	74 17                	je     f010fdb0 <test_kmalloc_bestfit2+0x5ff>
f010fd99:	83 ec 04             	sub    $0x4,%esp
f010fd9c:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fda1:	68 69 02 00 00       	push   $0x269
f010fda6:	68 76 b5 11 f0       	push   $0xf011b576
f010fdab:	e8 c6 03 ff ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fdb0:	e8 29 ac ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fdb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fdb8:	e8 e4 c0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fdbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f010fdc0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010fdc6:	83 ec 0c             	sub    $0xc,%esp
f010fdc9:	50                   	push   %eax
f010fdca:	e8 07 c6 ff ff       	call   f010c3d6 <kfree>
f010fdcf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fdd2:	e8 ca c0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fdd7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fdda:	74 17                	je     f010fdf3 <test_kmalloc_bestfit2+0x642>
f010fddc:	83 ec 04             	sub    $0x4,%esp
f010fddf:	68 88 b5 11 f0       	push   $0xf011b588
f010fde4:	68 6f 02 00 00       	push   $0x26f
f010fde9:	68 76 b5 11 f0       	push   $0xf011b576
f010fdee:	e8 83 03 ff ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f010fdf3:	e8 e6 ab ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fdf8:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f010fdfb:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fe00:	74 17                	je     f010fe19 <test_kmalloc_bestfit2+0x668>
f010fe02:	83 ec 04             	sub    $0x4,%esp
f010fe05:	68 3c b8 11 f0       	push   $0xf011b83c
f010fe0a:	68 70 02 00 00       	push   $0x270
f010fe0f:	68 76 b5 11 f0       	push   $0xf011b576
f010fe14:	e8 5d 03 ff ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010fe19:	e8 c0 ab ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fe1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010fe21:	e8 7b c0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fe26:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010fe29:	83 ec 0c             	sub    $0xc,%esp
f010fe2c:	68 00 fc 2f 00       	push   $0x2ffc00
f010fe31:	e8 3a c5 ff ff       	call   f010c370 <kmalloc>
f010fe36:	83 c4 10             	add    $0x10,%esp
f010fe39:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010fe3f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010fe45:	89 c1                	mov    %eax,%ecx
f010fe47:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010fe4e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fe53:	0f b6 d0             	movzbl %al,%edx
f010fe56:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010fe59:	01 d0                	add    %edx,%eax
f010fe5b:	48                   	dec    %eax
f010fe5c:	89 45 88             	mov    %eax,-0x78(%ebp)
f010fe5f:	8b 45 88             	mov    -0x78(%ebp),%eax
f010fe62:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe67:	f7 75 8c             	divl   -0x74(%ebp)
f010fe6a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010fe6d:	29 d0                	sub    %edx,%eax
f010fe6f:	89 c3                	mov    %eax,%ebx
f010fe71:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010fe78:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010fe7d:	0f b6 c0             	movzbl %al,%eax
f010fe80:	c1 e0 04             	shl    $0x4,%eax
f010fe83:	89 c2                	mov    %eax,%edx
f010fe85:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010fe88:	01 d0                	add    %edx,%eax
f010fe8a:	48                   	dec    %eax
f010fe8b:	89 45 80             	mov    %eax,-0x80(%ebp)
f010fe8e:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fe91:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe96:	f7 75 84             	divl   -0x7c(%ebp)
f010fe99:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fe9c:	29 d0                	sub    %edx,%eax
f010fe9e:	01 d8                	add    %ebx,%eax
f010fea0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010fea5:	39 c1                	cmp    %eax,%ecx
f010fea7:	74 17                	je     f010fec0 <test_kmalloc_bestfit2+0x70f>
f010fea9:	83 ec 04             	sub    $0x4,%esp
f010feac:	68 80 b9 11 f0       	push   $0xf011b980
f010feb1:	68 76 02 00 00       	push   $0x276
f010feb6:	68 76 b5 11 f0       	push   $0xf011b576
f010febb:	e8 b6 02 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fec0:	e8 dc bf ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010fec5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fec8:	74 17                	je     f010fee1 <test_kmalloc_bestfit2+0x730>
f010feca:	83 ec 04             	sub    $0x4,%esp
f010fecd:	68 88 b5 11 f0       	push   $0xf011b588
f010fed2:	68 77 02 00 00       	push   $0x277
f010fed7:	68 76 b5 11 f0       	push   $0xf011b576
f010fedc:	e8 95 02 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f010fee1:	e8 f8 aa ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fee6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fee9:	29 c2                	sub    %eax,%edx
f010feeb:	89 d0                	mov    %edx,%eax
f010feed:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fef2:	74 17                	je     f010ff0b <test_kmalloc_bestfit2+0x75a>
f010fef4:	83 ec 04             	sub    $0x4,%esp
f010fef7:	68 b0 b9 11 f0       	push   $0xf011b9b0
f010fefc:	68 78 02 00 00       	push   $0x278
f010ff01:	68 76 b5 11 f0       	push   $0xf011b576
f010ff06:	e8 6b 02 ff ff       	call   f0100176 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f010ff0b:	e8 ce aa ff ff       	call   f010a9de <sys_calculate_free_frames>
f010ff10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f010ff13:	e8 89 bf ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ff18:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f010ff1b:	83 ec 0c             	sub    $0xc,%esp
f010ff1e:	68 00 18 20 00       	push   $0x201800
f010ff23:	e8 48 c4 ff ff       	call   f010c370 <kmalloc>
f010ff28:	83 c4 10             	add    $0x10,%esp
f010ff2b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f010ff31:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010ff37:	89 c1                	mov    %eax,%ecx
f010ff39:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010ff40:	10 00 00 
f010ff43:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ff48:	0f b6 d0             	movzbl %al,%edx
f010ff4b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010ff51:	01 d0                	add    %edx,%eax
f010ff53:	48                   	dec    %eax
f010ff54:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010ff5a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ff60:	ba 00 00 00 00       	mov    $0x0,%edx
f010ff65:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010ff6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010ff71:	29 d0                	sub    %edx,%eax
f010ff73:	89 c3                	mov    %eax,%ebx
f010ff75:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010ff7c:	10 00 00 
f010ff7f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f010ff84:	0f b6 c0             	movzbl %al,%eax
f010ff87:	c1 e0 04             	shl    $0x4,%eax
f010ff8a:	89 c2                	mov    %eax,%edx
f010ff8c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010ff92:	01 d0                	add    %edx,%eax
f010ff94:	48                   	dec    %eax
f010ff95:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010ff9b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ffa1:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffa6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010ffac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010ffb2:	29 d0                	sub    %edx,%eax
f010ffb4:	01 d8                	add    %ebx,%eax
f010ffb6:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f010ffbb:	39 c1                	cmp    %eax,%ecx
f010ffbd:	74 17                	je     f010ffd6 <test_kmalloc_bestfit2+0x825>
f010ffbf:	83 ec 04             	sub    $0x4,%esp
f010ffc2:	68 80 b9 11 f0       	push   $0xf011b980
f010ffc7:	68 7e 02 00 00       	push   $0x27e
f010ffcc:	68 76 b5 11 f0       	push   $0xf011b576
f010ffd1:	e8 a0 01 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ffd6:	e8 c6 be ff ff       	call   f010bea1 <pf_calculate_free_frames>
f010ffdb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ffde:	74 17                	je     f010fff7 <test_kmalloc_bestfit2+0x846>
f010ffe0:	83 ec 04             	sub    $0x4,%esp
f010ffe3:	68 88 b5 11 f0       	push   $0xf011b588
f010ffe8:	68 7f 02 00 00       	push   $0x27f
f010ffed:	68 76 b5 11 f0       	push   $0xf011b576
f010fff2:	e8 7f 01 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f010fff7:	e8 e2 a9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f010fffc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ffff:	29 c2                	sub    %eax,%edx
f0110001:	89 d0                	mov    %edx,%eax
f0110003:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110008:	74 17                	je     f0110021 <test_kmalloc_bestfit2+0x870>
f011000a:	83 ec 04             	sub    $0x4,%esp
f011000d:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0110012:	68 80 02 00 00       	push   $0x280
f0110017:	68 76 b5 11 f0       	push   $0xf011b576
f011001c:	e8 55 01 ff ff       	call   f0100176 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0110021:	e8 b8 a9 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110026:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110029:	e8 73 be ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011002e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0110031:	83 ec 0c             	sub    $0xc,%esp
f0110034:	68 00 fc 4f 00       	push   $0x4ffc00
f0110039:	e8 32 c3 ff ff       	call   f010c370 <kmalloc>
f011003e:	83 c4 10             	add    $0x10,%esp
f0110041:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0110047:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011004d:	89 c1                	mov    %eax,%ecx
f011004f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110056:	10 00 00 
f0110059:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011005e:	0f b6 d0             	movzbl %al,%edx
f0110061:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110067:	01 d0                	add    %edx,%eax
f0110069:	48                   	dec    %eax
f011006a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110070:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110076:	ba 00 00 00 00       	mov    $0x0,%edx
f011007b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110081:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110087:	29 d0                	sub    %edx,%eax
f0110089:	89 c3                	mov    %eax,%ebx
f011008b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110092:	10 00 00 
f0110095:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011009a:	0f b6 c0             	movzbl %al,%eax
f011009d:	c1 e0 04             	shl    $0x4,%eax
f01100a0:	89 c2                	mov    %eax,%edx
f01100a2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01100a8:	01 d0                	add    %edx,%eax
f01100aa:	48                   	dec    %eax
f01100ab:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01100b1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01100b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01100bc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01100c2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01100c8:	29 d0                	sub    %edx,%eax
f01100ca:	01 d8                	add    %ebx,%eax
f01100cc:	2d 00 a0 6f 09       	sub    $0x96fa000,%eax
f01100d1:	39 c1                	cmp    %eax,%ecx
f01100d3:	74 17                	je     f01100ec <test_kmalloc_bestfit2+0x93b>
f01100d5:	83 ec 04             	sub    $0x4,%esp
f01100d8:	68 80 b9 11 f0       	push   $0xf011b980
f01100dd:	68 86 02 00 00       	push   $0x286
f01100e2:	68 76 b5 11 f0       	push   $0xf011b576
f01100e7:	e8 8a 00 ff ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01100ec:	e8 b0 bd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01100f1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01100f4:	74 17                	je     f011010d <test_kmalloc_bestfit2+0x95c>
f01100f6:	83 ec 04             	sub    $0x4,%esp
f01100f9:	68 88 b5 11 f0       	push   $0xf011b588
f01100fe:	68 87 02 00 00       	push   $0x287
f0110103:	68 76 b5 11 f0       	push   $0xf011b576
f0110108:	e8 69 00 ff ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011010d:	e8 cc a8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110112:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110115:	29 c2                	sub    %eax,%edx
f0110117:	89 d0                	mov    %edx,%eax
f0110119:	3d 00 05 00 00       	cmp    $0x500,%eax
f011011e:	74 17                	je     f0110137 <test_kmalloc_bestfit2+0x986>
f0110120:	83 ec 04             	sub    $0x4,%esp
f0110123:	68 b0 b9 11 f0       	push   $0xf011b9b0
f0110128:	68 88 02 00 00       	push   $0x288
f011012d:	68 76 b5 11 f0       	push   $0xf011b576
f0110132:	e8 3f 00 ff ff       	call   f0100176 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110137:	e8 a2 a8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011013c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011013f:	e8 5d bd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110144:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f0110147:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011014d:	83 ec 0c             	sub    $0xc,%esp
f0110150:	50                   	push   %eax
f0110151:	e8 80 c2 ff ff       	call   f010c3d6 <kfree>
f0110156:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110159:	e8 43 bd ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011015e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110161:	74 17                	je     f011017a <test_kmalloc_bestfit2+0x9c9>
f0110163:	83 ec 04             	sub    $0x4,%esp
f0110166:	68 88 b5 11 f0       	push   $0xf011b588
f011016b:	68 8e 02 00 00       	push   $0x28e
f0110170:	68 76 b5 11 f0       	push   $0xf011b576
f0110175:	e8 fc ff fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011017a:	e8 5f a8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011017f:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110182:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110187:	74 17                	je     f01101a0 <test_kmalloc_bestfit2+0x9ef>
f0110189:	83 ec 04             	sub    $0x4,%esp
f011018c:	68 3c b8 11 f0       	push   $0xf011b83c
f0110191:	68 8f 02 00 00       	push   $0x28f
f0110196:	68 76 b5 11 f0       	push   $0xf011b576
f011019b:	e8 d6 ff fe ff       	call   f0100176 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01101a0:	e8 39 a8 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01101a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01101a8:	e8 f4 bc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01101ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f01101b0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01101b6:	83 ec 0c             	sub    $0xc,%esp
f01101b9:	50                   	push   %eax
f01101ba:	e8 17 c2 ff ff       	call   f010c3d6 <kfree>
f01101bf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01101c2:	e8 da bc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01101c7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01101ca:	74 17                	je     f01101e3 <test_kmalloc_bestfit2+0xa32>
f01101cc:	83 ec 04             	sub    $0x4,%esp
f01101cf:	68 88 b5 11 f0       	push   $0xf011b588
f01101d4:	68 95 02 00 00       	push   $0x295
f01101d9:	68 76 b5 11 f0       	push   $0xf011b576
f01101de:	e8 93 ff fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f01101e3:	e8 f6 a7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01101e8:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01101eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f01101f0:	74 17                	je     f0110209 <test_kmalloc_bestfit2+0xa58>
f01101f2:	83 ec 04             	sub    $0x4,%esp
f01101f5:	68 60 ba 11 f0       	push   $0xf011ba60
f01101fa:	68 96 02 00 00       	push   $0x296
f01101ff:	68 76 b5 11 f0       	push   $0xf011b576
f0110204:	e8 6d ff fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110209:	e8 d0 a7 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011020e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110211:	e8 8b bc ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110216:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f0110219:	83 ec 0c             	sub    $0xc,%esp
f011021c:	68 00 fc 1f 00       	push   $0x1ffc00
f0110221:	e8 4a c1 ff ff       	call   f010c370 <kmalloc>
f0110226:	83 c4 10             	add    $0x10,%esp
f0110229:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011022f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110235:	89 c1                	mov    %eax,%ecx
f0110237:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011023e:	10 00 00 
f0110241:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110246:	0f b6 d0             	movzbl %al,%edx
f0110249:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011024f:	01 d0                	add    %edx,%eax
f0110251:	48                   	dec    %eax
f0110252:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0110258:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011025e:	ba 00 00 00 00       	mov    $0x0,%edx
f0110263:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0110269:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011026f:	29 d0                	sub    %edx,%eax
f0110271:	89 c3                	mov    %eax,%ebx
f0110273:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011027a:	10 00 00 
f011027d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110282:	0f b6 c0             	movzbl %al,%eax
f0110285:	c1 e0 04             	shl    $0x4,%eax
f0110288:	89 c2                	mov    %eax,%edx
f011028a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0110290:	01 d0                	add    %edx,%eax
f0110292:	48                   	dec    %eax
f0110293:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0110299:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011029f:	ba 00 00 00 00       	mov    $0x0,%edx
f01102a4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01102aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01102b0:	29 d0                	sub    %edx,%eax
f01102b2:	01 d8                	add    %ebx,%eax
f01102b4:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01102b9:	39 c1                	cmp    %eax,%ecx
f01102bb:	74 17                	je     f01102d4 <test_kmalloc_bestfit2+0xb23>
f01102bd:	83 ec 04             	sub    $0x4,%esp
f01102c0:	68 80 b9 11 f0       	push   $0xf011b980
f01102c5:	68 9c 02 00 00       	push   $0x29c
f01102ca:	68 76 b5 11 f0       	push   $0xf011b576
f01102cf:	e8 a2 fe fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01102d4:	e8 c8 bb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01102d9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01102dc:	74 17                	je     f01102f5 <test_kmalloc_bestfit2+0xb44>
f01102de:	83 ec 04             	sub    $0x4,%esp
f01102e1:	68 88 b5 11 f0       	push   $0xf011b588
f01102e6:	68 9d 02 00 00       	push   $0x29d
f01102eb:	68 76 b5 11 f0       	push   $0xf011b576
f01102f0:	e8 81 fe fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f01102f5:	e8 e4 a6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01102fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102fd:	29 c2                	sub    %eax,%edx
f01102ff:	89 d0                	mov    %edx,%eax
f0110301:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110306:	74 17                	je     f011031f <test_kmalloc_bestfit2+0xb6e>
f0110308:	83 ec 04             	sub    $0x4,%esp
f011030b:	68 9e ba 11 f0       	push   $0xf011ba9e
f0110310:	68 9e 02 00 00       	push   $0x29e
f0110315:	68 76 b5 11 f0       	push   $0xf011b576
f011031a:	e8 57 fe fe ff       	call   f0100176 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011031f:	e8 ba a6 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110324:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110327:	e8 75 bb ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011032c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011032f:	83 ec 0c             	sub    $0xc,%esp
f0110332:	68 00 18 00 00       	push   $0x1800
f0110337:	e8 34 c0 ff ff       	call   f010c370 <kmalloc>
f011033c:	83 c4 10             	add    $0x10,%esp
f011033f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110345:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011034b:	89 c1                	mov    %eax,%ecx
f011034d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0110354:	10 00 00 
f0110357:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011035c:	0f b6 d0             	movzbl %al,%edx
f011035f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0110365:	01 d0                	add    %edx,%eax
f0110367:	48                   	dec    %eax
f0110368:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011036e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110374:	ba 00 00 00 00       	mov    $0x0,%edx
f0110379:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011037f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110385:	29 d0                	sub    %edx,%eax
f0110387:	89 c3                	mov    %eax,%ebx
f0110389:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0110390:	10 00 00 
f0110393:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110398:	0f b6 c0             	movzbl %al,%eax
f011039b:	c1 e0 04             	shl    $0x4,%eax
f011039e:	89 c2                	mov    %eax,%edx
f01103a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01103a6:	01 d0                	add    %edx,%eax
f01103a8:	48                   	dec    %eax
f01103a9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01103af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01103b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01103ba:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01103c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01103c6:	29 d0                	sub    %edx,%eax
f01103c8:	01 d8                	add    %ebx,%eax
f01103ca:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f01103cf:	39 c1                	cmp    %eax,%ecx
f01103d1:	74 17                	je     f01103ea <test_kmalloc_bestfit2+0xc39>
f01103d3:	83 ec 04             	sub    $0x4,%esp
f01103d6:	68 80 b9 11 f0       	push   $0xf011b980
f01103db:	68 a4 02 00 00       	push   $0x2a4
f01103e0:	68 76 b5 11 f0       	push   $0xf011b576
f01103e5:	e8 8c fd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01103ea:	e8 b2 ba ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01103ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01103f2:	74 17                	je     f011040b <test_kmalloc_bestfit2+0xc5a>
f01103f4:	83 ec 04             	sub    $0x4,%esp
f01103f7:	68 88 b5 11 f0       	push   $0xf011b588
f01103fc:	68 a5 02 00 00       	push   $0x2a5
f0110401:	68 76 b5 11 f0       	push   $0xf011b576
f0110406:	e8 6b fd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011040b:	e8 ce a5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110410:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110413:	29 c2                	sub    %eax,%edx
f0110415:	89 d0                	mov    %edx,%eax
f0110417:	83 f8 02             	cmp    $0x2,%eax
f011041a:	74 17                	je     f0110433 <test_kmalloc_bestfit2+0xc82>
f011041c:	83 ec 04             	sub    $0x4,%esp
f011041f:	68 9e ba 11 f0       	push   $0xf011ba9e
f0110424:	68 a6 02 00 00       	push   $0x2a6
f0110429:	68 76 b5 11 f0       	push   $0xf011b576
f011042e:	e8 43 fd fe ff       	call   f0100176 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110433:	e8 a6 a5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110438:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011043b:	e8 61 ba ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110440:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0110443:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110449:	83 ec 0c             	sub    $0xc,%esp
f011044c:	50                   	push   %eax
f011044d:	e8 84 bf ff ff       	call   f010c3d6 <kfree>
f0110452:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110455:	e8 47 ba ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011045a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011045d:	74 17                	je     f0110476 <test_kmalloc_bestfit2+0xcc5>
f011045f:	83 ec 04             	sub    $0x4,%esp
f0110462:	68 88 b5 11 f0       	push   $0xf011b588
f0110467:	68 ac 02 00 00       	push   $0x2ac
f011046c:	68 76 b5 11 f0       	push   $0xf011b576
f0110471:	e8 00 fd fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f0110476:	e8 63 a5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011047b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011047e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110483:	74 17                	je     f011049c <test_kmalloc_bestfit2+0xceb>
f0110485:	83 ec 04             	sub    $0x4,%esp
f0110488:	68 60 ba 11 f0       	push   $0xf011ba60
f011048d:	68 ad 02 00 00       	push   $0x2ad
f0110492:	68 76 b5 11 f0       	push   $0xf011b576
f0110497:	e8 da fc fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011049c:	e8 3d a5 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01104a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01104a4:	e8 f8 b9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01104a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f01104ac:	83 ec 0c             	sub    $0xc,%esp
f01104af:	68 00 fc 2f 00       	push   $0x2ffc00
f01104b4:	e8 b7 be ff ff       	call   f010c370 <kmalloc>
f01104b9:	83 c4 10             	add    $0x10,%esp
f01104bc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f01104c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01104c8:	89 c1                	mov    %eax,%ecx
f01104ca:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01104d1:	10 00 00 
f01104d4:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01104d9:	0f b6 d0             	movzbl %al,%edx
f01104dc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01104e2:	01 d0                	add    %edx,%eax
f01104e4:	48                   	dec    %eax
f01104e5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01104eb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01104f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01104f6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01104fc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110502:	29 d0                	sub    %edx,%eax
f0110504:	89 c3                	mov    %eax,%ebx
f0110506:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011050d:	10 00 00 
f0110510:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110515:	0f b6 c0             	movzbl %al,%eax
f0110518:	c1 e0 04             	shl    $0x4,%eax
f011051b:	89 c2                	mov    %eax,%edx
f011051d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0110523:	01 d0                	add    %edx,%eax
f0110525:	48                   	dec    %eax
f0110526:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011052c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110532:	ba 00 00 00 00       	mov    $0x0,%edx
f0110537:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011053d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110543:	29 d0                	sub    %edx,%eax
f0110545:	01 d8                	add    %ebx,%eax
f0110547:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011054c:	39 c1                	cmp    %eax,%ecx
f011054e:	74 17                	je     f0110567 <test_kmalloc_bestfit2+0xdb6>
f0110550:	83 ec 04             	sub    $0x4,%esp
f0110553:	68 80 b9 11 f0       	push   $0xf011b980
f0110558:	68 b3 02 00 00       	push   $0x2b3
f011055d:	68 76 b5 11 f0       	push   $0xf011b576
f0110562:	e8 0f fc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110567:	e8 35 b9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011056c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011056f:	74 17                	je     f0110588 <test_kmalloc_bestfit2+0xdd7>
f0110571:	83 ec 04             	sub    $0x4,%esp
f0110574:	68 88 b5 11 f0       	push   $0xf011b588
f0110579:	68 b4 02 00 00       	push   $0x2b4
f011057e:	68 76 b5 11 f0       	push   $0xf011b576
f0110583:	e8 ee fb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0110588:	e8 51 a4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011058d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110590:	29 c2                	sub    %eax,%edx
f0110592:	89 d0                	mov    %edx,%eax
f0110594:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110599:	74 17                	je     f01105b2 <test_kmalloc_bestfit2+0xe01>
f011059b:	83 ec 04             	sub    $0x4,%esp
f011059e:	68 60 ba 11 f0       	push   $0xf011ba60
f01105a3:	68 b5 02 00 00       	push   $0x2b5
f01105a8:	68 76 b5 11 f0       	push   $0xf011b576
f01105ad:	e8 c4 fb fe ff       	call   f0100176 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01105b2:	e8 27 a4 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01105b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01105ba:	e8 e2 b8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01105bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f01105c2:	83 ec 0c             	sub    $0xc,%esp
f01105c5:	68 00 fc 3f 00       	push   $0x3ffc00
f01105ca:	e8 a1 bd ff ff       	call   f010c370 <kmalloc>
f01105cf:	83 c4 10             	add    $0x10,%esp
f01105d2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01105d8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01105de:	89 c1                	mov    %eax,%ecx
f01105e0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01105e7:	10 00 00 
f01105ea:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01105ef:	0f b6 d0             	movzbl %al,%edx
f01105f2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01105f8:	01 d0                	add    %edx,%eax
f01105fa:	48                   	dec    %eax
f01105fb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0110601:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110607:	ba 00 00 00 00       	mov    $0x0,%edx
f011060c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0110612:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110618:	29 d0                	sub    %edx,%eax
f011061a:	89 c3                	mov    %eax,%ebx
f011061c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0110623:	10 00 00 
f0110626:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011062b:	0f b6 c0             	movzbl %al,%eax
f011062e:	c1 e0 04             	shl    $0x4,%eax
f0110631:	89 c2                	mov    %eax,%edx
f0110633:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0110639:	01 d0                	add    %edx,%eax
f011063b:	48                   	dec    %eax
f011063c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0110642:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110648:	ba 00 00 00 00       	mov    $0x0,%edx
f011064d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0110653:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110659:	29 d0                	sub    %edx,%eax
f011065b:	01 d8                	add    %ebx,%eax
f011065d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0110662:	39 c1                	cmp    %eax,%ecx
f0110664:	74 17                	je     f011067d <test_kmalloc_bestfit2+0xecc>
f0110666:	83 ec 04             	sub    $0x4,%esp
f0110669:	68 80 b9 11 f0       	push   $0xf011b980
f011066e:	68 bb 02 00 00       	push   $0x2bb
f0110673:	68 76 b5 11 f0       	push   $0xf011b576
f0110678:	e8 f9 fa fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011067d:	e8 1f b8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110682:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110685:	74 17                	je     f011069e <test_kmalloc_bestfit2+0xeed>
f0110687:	83 ec 04             	sub    $0x4,%esp
f011068a:	68 88 b5 11 f0       	push   $0xf011b588
f011068f:	68 bc 02 00 00       	push   $0x2bc
f0110694:	68 76 b5 11 f0       	push   $0xf011b576
f0110699:	e8 d8 fa fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011069e:	e8 3b a3 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01106a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01106a6:	29 c2                	sub    %eax,%edx
f01106a8:	89 d0                	mov    %edx,%eax
f01106aa:	3d 00 04 00 00       	cmp    $0x400,%eax
f01106af:	74 17                	je     f01106c8 <test_kmalloc_bestfit2+0xf17>
f01106b1:	83 ec 04             	sub    $0x4,%esp
f01106b4:	68 60 ba 11 f0       	push   $0xf011ba60
f01106b9:	68 bd 02 00 00       	push   $0x2bd
f01106be:	68 76 b5 11 f0       	push   $0xf011b576
f01106c3:	e8 ae fa fe ff       	call   f0100176 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f01106c8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01106cf:	10 00 00 
f01106d2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01106d7:	0f b6 d0             	movzbl %al,%edx
f01106da:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01106e0:	01 d0                	add    %edx,%eax
f01106e2:	48                   	dec    %eax
f01106e3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01106e9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01106ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01106f4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01106fa:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0110700:	29 d0                	sub    %edx,%eax
f0110702:	89 c1                	mov    %eax,%ecx
f0110704:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011070b:	10 00 00 
f011070e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110713:	0f b6 c0             	movzbl %al,%eax
f0110716:	c1 e0 04             	shl    $0x4,%eax
f0110719:	89 c2                	mov    %eax,%edx
f011071b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0110721:	01 d0                	add    %edx,%eax
f0110723:	48                   	dec    %eax
f0110724:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011072a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110730:	ba 00 00 00 00       	mov    $0x0,%edx
f0110735:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011073b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110741:	29 d0                	sub    %edx,%eax
f0110743:	01 c8                	add    %ecx,%eax
f0110745:	ba 00 f0 1f 09       	mov    $0x91ff000,%edx
f011074a:	29 c2                	sub    %eax,%edx
f011074c:	89 d0                	mov    %edx,%eax
f011074e:	83 ec 0c             	sub    $0xc,%esp
f0110751:	50                   	push   %eax
f0110752:	e8 19 bc ff ff       	call   f010c370 <kmalloc>
f0110757:	83 c4 10             	add    $0x10,%esp
f011075a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0110760:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0110766:	85 c0                	test   %eax,%eax
f0110768:	74 17                	je     f0110781 <test_kmalloc_bestfit2+0xfd0>
f011076a:	83 ec 04             	sub    $0x4,%esp
f011076d:	68 b0 ba 11 f0       	push   $0xf011bab0
f0110772:	68 c5 02 00 00       	push   $0x2c5
f0110777:	68 76 b5 11 f0       	push   $0xf011b576
f011077c:	e8 f5 f9 fe ff       	call   f0100176 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f0110781:	83 ec 0c             	sub    $0xc,%esp
f0110784:	68 14 bb 11 f0       	push   $0xf011bb14
f0110789:	e8 41 66 ff ff       	call   f0106dcf <cprintf>
f011078e:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0110791:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0110796:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0110799:	5b                   	pop    %ebx
f011079a:	5f                   	pop    %edi
f011079b:	5d                   	pop    %ebp
f011079c:	c3                   	ret    

f011079d <test_kfree>:

int test_kfree()
{
f011079d:	55                   	push   %ebp
f011079e:	89 e5                	mov    %esp,%ebp
f01107a0:	57                   	push   %edi
f01107a1:	53                   	push   %ebx
f01107a2:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f01107a8:	83 ec 0c             	sub    $0xc,%esp
f01107ab:	68 b8 b4 11 f0       	push   $0xf011b4b8
f01107b0:	e8 1a 66 ff ff       	call   f0106dcf <cprintf>
f01107b5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01107b8:	83 ec 0c             	sub    $0xc,%esp
f01107bb:	68 e8 b4 11 f0       	push   $0xf011b4e8
f01107c0:	e8 0a 66 ff ff       	call   f0106dcf <cprintf>
f01107c5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01107c8:	83 ec 0c             	sub    $0xc,%esp
f01107cb:	68 b8 b4 11 f0       	push   $0xf011b4b8
f01107d0:	e8 fa 65 ff ff       	call   f0106dcf <cprintf>
f01107d5:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01107d8:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01107dc:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01107e0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01107e6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01107ec:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01107f3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01107fa:	e8 df a1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01107ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0110802:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0110808:	b9 14 00 00 00       	mov    $0x14,%ecx
f011080d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110812:	89 d7                	mov    %edx,%edi
f0110814:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0110816:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f011081c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110821:	b8 00 00 00 00       	mov    $0x0,%eax
f0110826:	89 d7                	mov    %edx,%edi
f0110828:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011082a:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0110830:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110835:	b8 00 00 00 00       	mov    $0x0,%eax
f011083a:	89 d7                	mov    %edx,%edi
f011083c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011083e:	e8 9b a1 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110843:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110846:	e8 56 b6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011084b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011084e:	83 ec 0c             	sub    $0xc,%esp
f0110851:	68 00 fc 1f 00       	push   $0x1ffc00
f0110856:	e8 15 bb ff ff       	call   f010c370 <kmalloc>
f011085b:	83 c4 10             	add    $0x10,%esp
f011085e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110864:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011086a:	89 c1                	mov    %eax,%ecx
f011086c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0110873:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110878:	0f b6 d0             	movzbl %al,%edx
f011087b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011087e:	01 d0                	add    %edx,%eax
f0110880:	48                   	dec    %eax
f0110881:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0110884:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110887:	ba 00 00 00 00       	mov    $0x0,%edx
f011088c:	f7 75 c8             	divl   -0x38(%ebp)
f011088f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110892:	29 d0                	sub    %edx,%eax
f0110894:	89 c3                	mov    %eax,%ebx
f0110896:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011089d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01108a2:	0f b6 c0             	movzbl %al,%eax
f01108a5:	c1 e0 04             	shl    $0x4,%eax
f01108a8:	89 c2                	mov    %eax,%edx
f01108aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01108ad:	01 d0                	add    %edx,%eax
f01108af:	48                   	dec    %eax
f01108b0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01108b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01108b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01108bb:	f7 75 c0             	divl   -0x40(%ebp)
f01108be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01108c1:	29 d0                	sub    %edx,%eax
f01108c3:	01 d8                	add    %ebx,%eax
f01108c5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01108ca:	39 c1                	cmp    %eax,%ecx
f01108cc:	74 17                	je     f01108e5 <test_kfree+0x148>
f01108ce:	83 ec 04             	sub    $0x4,%esp
f01108d1:	68 54 b6 11 f0       	push   $0xf011b654
f01108d6:	68 ec 02 00 00       	push   $0x2ec
f01108db:	68 76 b5 11 f0       	push   $0xf011b576
f01108e0:	e8 91 f8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01108e5:	e8 b7 b5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01108ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01108ed:	74 17                	je     f0110906 <test_kfree+0x169>
f01108ef:	83 ec 04             	sub    $0x4,%esp
f01108f2:	68 88 b5 11 f0       	push   $0xf011b588
f01108f7:	68 ed 02 00 00       	push   $0x2ed
f01108fc:	68 76 b5 11 f0       	push   $0xf011b576
f0110901:	e8 70 f8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110906:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110909:	e8 d0 a0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011090e:	29 c3                	sub    %eax,%ebx
f0110910:	89 d8                	mov    %ebx,%eax
f0110912:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110917:	74 17                	je     f0110930 <test_kfree+0x193>
f0110919:	83 ec 04             	sub    $0x4,%esp
f011091c:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110921:	68 ee 02 00 00       	push   $0x2ee
f0110926:	68 76 b5 11 f0       	push   $0xf011b576
f011092b:	e8 46 f8 fe ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0110930:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0110937:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011093a:	e8 9f a0 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011093f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110942:	e8 5a b5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110947:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011094a:	83 ec 0c             	sub    $0xc,%esp
f011094d:	68 00 fc 1f 00       	push   $0x1ffc00
f0110952:	e8 19 ba ff ff       	call   f010c370 <kmalloc>
f0110957:	83 c4 10             	add    $0x10,%esp
f011095a:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110960:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0110966:	89 c1                	mov    %eax,%ecx
f0110968:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011096f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110974:	0f b6 d0             	movzbl %al,%edx
f0110977:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011097a:	01 d0                	add    %edx,%eax
f011097c:	48                   	dec    %eax
f011097d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0110980:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110983:	ba 00 00 00 00       	mov    $0x0,%edx
f0110988:	f7 75 b8             	divl   -0x48(%ebp)
f011098b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011098e:	29 d0                	sub    %edx,%eax
f0110990:	89 c3                	mov    %eax,%ebx
f0110992:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0110999:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011099e:	0f b6 c0             	movzbl %al,%eax
f01109a1:	c1 e0 04             	shl    $0x4,%eax
f01109a4:	89 c2                	mov    %eax,%edx
f01109a6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01109a9:	01 d0                	add    %edx,%eax
f01109ab:	48                   	dec    %eax
f01109ac:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01109af:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01109b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01109b7:	f7 75 b0             	divl   -0x50(%ebp)
f01109ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01109bd:	29 d0                	sub    %edx,%eax
f01109bf:	01 d8                	add    %ebx,%eax
f01109c1:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f01109c6:	39 c1                	cmp    %eax,%ecx
f01109c8:	74 17                	je     f01109e1 <test_kfree+0x244>
f01109ca:	83 ec 04             	sub    $0x4,%esp
f01109cd:	68 54 b6 11 f0       	push   $0xf011b654
f01109d2:	68 f5 02 00 00       	push   $0x2f5
f01109d7:	68 76 b5 11 f0       	push   $0xf011b576
f01109dc:	e8 95 f7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01109e1:	e8 bb b4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01109e6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01109e9:	74 17                	je     f0110a02 <test_kfree+0x265>
f01109eb:	83 ec 04             	sub    $0x4,%esp
f01109ee:	68 88 b5 11 f0       	push   $0xf011b588
f01109f3:	68 f6 02 00 00       	push   $0x2f6
f01109f8:	68 76 b5 11 f0       	push   $0xf011b576
f01109fd:	e8 74 f7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110a02:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110a05:	e8 d4 9f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110a0a:	29 c3                	sub    %eax,%ebx
f0110a0c:	89 d8                	mov    %ebx,%eax
f0110a0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110a13:	74 17                	je     f0110a2c <test_kfree+0x28f>
f0110a15:	83 ec 04             	sub    $0x4,%esp
f0110a18:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110a1d:	68 f7 02 00 00       	push   $0x2f7
f0110a22:	68 76 b5 11 f0       	push   $0xf011b576
f0110a27:	e8 4a f7 fe ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0110a2c:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0110a33:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110a36:	e8 a3 9f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110a3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110a3e:	e8 5e b4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110a43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0110a46:	83 ec 0c             	sub    $0xc,%esp
f0110a49:	68 00 08 00 00       	push   $0x800
f0110a4e:	e8 1d b9 ff ff       	call   f010c370 <kmalloc>
f0110a53:	83 c4 10             	add    $0x10,%esp
f0110a56:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110a5c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110a62:	89 c1                	mov    %eax,%ecx
f0110a64:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0110a6b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110a70:	0f b6 d0             	movzbl %al,%edx
f0110a73:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110a76:	01 d0                	add    %edx,%eax
f0110a78:	48                   	dec    %eax
f0110a79:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110a7c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110a7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a84:	f7 75 a8             	divl   -0x58(%ebp)
f0110a87:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110a8a:	29 d0                	sub    %edx,%eax
f0110a8c:	89 c3                	mov    %eax,%ebx
f0110a8e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0110a95:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110a9a:	0f b6 c0             	movzbl %al,%eax
f0110a9d:	c1 e0 04             	shl    $0x4,%eax
f0110aa0:	89 c2                	mov    %eax,%edx
f0110aa2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110aa5:	01 d0                	add    %edx,%eax
f0110aa7:	48                   	dec    %eax
f0110aa8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0110aab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0110ab3:	f7 75 a0             	divl   -0x60(%ebp)
f0110ab6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110ab9:	29 d0                	sub    %edx,%eax
f0110abb:	01 d8                	add    %ebx,%eax
f0110abd:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f0110ac2:	39 c1                	cmp    %eax,%ecx
f0110ac4:	74 17                	je     f0110add <test_kfree+0x340>
f0110ac6:	83 ec 04             	sub    $0x4,%esp
f0110ac9:	68 54 b6 11 f0       	push   $0xf011b654
f0110ace:	68 fe 02 00 00       	push   $0x2fe
f0110ad3:	68 76 b5 11 f0       	push   $0xf011b576
f0110ad8:	e8 99 f6 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110add:	e8 bf b3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110ae2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110ae5:	74 17                	je     f0110afe <test_kfree+0x361>
f0110ae7:	83 ec 04             	sub    $0x4,%esp
f0110aea:	68 88 b5 11 f0       	push   $0xf011b588
f0110aef:	68 ff 02 00 00       	push   $0x2ff
f0110af4:	68 76 b5 11 f0       	push   $0xf011b576
f0110af9:	e8 78 f6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110afe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110b01:	e8 d8 9e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110b06:	29 c3                	sub    %eax,%ebx
f0110b08:	89 d8                	mov    %ebx,%eax
f0110b0a:	83 f8 01             	cmp    $0x1,%eax
f0110b0d:	74 17                	je     f0110b26 <test_kfree+0x389>
f0110b0f:	83 ec 04             	sub    $0x4,%esp
f0110b12:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110b17:	68 00 03 00 00       	push   $0x300
f0110b1c:	68 76 b5 11 f0       	push   $0xf011b576
f0110b21:	e8 50 f6 fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0110b26:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0110b2d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0110b30:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0110b36:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0110b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110b40:	eb 0e                	jmp    f0110b50 <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f0110b42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110b45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110b48:	01 d0                	add    %edx,%eax
f0110b4a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0110b4d:	ff 45 f4             	incl   -0xc(%ebp)
f0110b50:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110b56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b59:	7f e7                	jg     f0110b42 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110b5b:	e8 7e 9e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110b60:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110b63:	e8 39 b3 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110b68:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0110b6b:	83 ec 0c             	sub    $0xc,%esp
f0110b6e:	68 00 08 00 00       	push   $0x800
f0110b73:	e8 f8 b7 ff ff       	call   f010c370 <kmalloc>
f0110b78:	83 c4 10             	add    $0x10,%esp
f0110b7b:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110b81:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0110b87:	89 c1                	mov    %eax,%ecx
f0110b89:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0110b90:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110b95:	0f b6 d0             	movzbl %al,%edx
f0110b98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b9b:	01 d0                	add    %edx,%eax
f0110b9d:	48                   	dec    %eax
f0110b9e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0110ba1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110ba4:	ba 00 00 00 00       	mov    $0x0,%edx
f0110ba9:	f7 75 94             	divl   -0x6c(%ebp)
f0110bac:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110baf:	29 d0                	sub    %edx,%eax
f0110bb1:	89 c3                	mov    %eax,%ebx
f0110bb3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0110bba:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110bbf:	0f b6 c0             	movzbl %al,%eax
f0110bc2:	c1 e0 04             	shl    $0x4,%eax
f0110bc5:	89 c2                	mov    %eax,%edx
f0110bc7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110bca:	01 d0                	add    %edx,%eax
f0110bcc:	48                   	dec    %eax
f0110bcd:	89 45 88             	mov    %eax,-0x78(%ebp)
f0110bd0:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110bd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0110bd8:	f7 75 8c             	divl   -0x74(%ebp)
f0110bdb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110bde:	29 d0                	sub    %edx,%eax
f0110be0:	01 d8                	add    %ebx,%eax
f0110be2:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0110be7:	39 c1                	cmp    %eax,%ecx
f0110be9:	74 17                	je     f0110c02 <test_kfree+0x465>
f0110beb:	83 ec 04             	sub    $0x4,%esp
f0110bee:	68 54 b6 11 f0       	push   $0xf011b654
f0110bf3:	68 0c 03 00 00       	push   $0x30c
f0110bf8:	68 76 b5 11 f0       	push   $0xf011b576
f0110bfd:	e8 74 f5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110c02:	e8 9a b2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110c07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110c0a:	74 17                	je     f0110c23 <test_kfree+0x486>
f0110c0c:	83 ec 04             	sub    $0x4,%esp
f0110c0f:	68 88 b5 11 f0       	push   $0xf011b588
f0110c14:	68 0d 03 00 00       	push   $0x30d
f0110c19:	68 76 b5 11 f0       	push   $0xf011b576
f0110c1e:	e8 53 f5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110c23:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110c26:	e8 b3 9d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110c2b:	29 c3                	sub    %eax,%ebx
f0110c2d:	89 d8                	mov    %ebx,%eax
f0110c2f:	83 f8 01             	cmp    $0x1,%eax
f0110c32:	74 17                	je     f0110c4b <test_kfree+0x4ae>
f0110c34:	83 ec 04             	sub    $0x4,%esp
f0110c37:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110c3c:	68 0e 03 00 00       	push   $0x30e
f0110c41:	68 76 b5 11 f0       	push   $0xf011b576
f0110c46:	e8 2b f5 fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0110c4b:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0110c52:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0110c55:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0110c5b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0110c5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110c65:	eb 0e                	jmp    f0110c75 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f0110c67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c6a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110c6d:	01 d0                	add    %edx,%eax
f0110c6f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0110c72:	ff 45 f4             	incl   -0xc(%ebp)
f0110c75:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110c7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110c7e:	7f e7                	jg     f0110c67 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0110c80:	e8 59 9d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110c85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110c88:	e8 14 b2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110c8d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0110c90:	83 ec 0c             	sub    $0xc,%esp
f0110c93:	68 00 1c 00 00       	push   $0x1c00
f0110c98:	e8 d3 b6 ff ff       	call   f010c370 <kmalloc>
f0110c9d:	83 c4 10             	add    $0x10,%esp
f0110ca0:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110ca6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110cac:	89 c1                	mov    %eax,%ecx
f0110cae:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0110cb5:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110cba:	0f b6 d0             	movzbl %al,%edx
f0110cbd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110cc0:	01 d0                	add    %edx,%eax
f0110cc2:	48                   	dec    %eax
f0110cc3:	89 45 80             	mov    %eax,-0x80(%ebp)
f0110cc6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110cc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0110cce:	f7 75 84             	divl   -0x7c(%ebp)
f0110cd1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110cd4:	29 d0                	sub    %edx,%eax
f0110cd6:	89 c3                	mov    %eax,%ebx
f0110cd8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0110cdf:	10 00 00 
f0110ce2:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110ce7:	0f b6 c0             	movzbl %al,%eax
f0110cea:	c1 e0 04             	shl    $0x4,%eax
f0110ced:	89 c2                	mov    %eax,%edx
f0110cef:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110cf5:	01 d0                	add    %edx,%eax
f0110cf7:	48                   	dec    %eax
f0110cf8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0110cfe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d09:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0110d0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110d15:	29 d0                	sub    %edx,%eax
f0110d17:	01 d8                	add    %ebx,%eax
f0110d19:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0110d1e:	39 c1                	cmp    %eax,%ecx
f0110d20:	74 17                	je     f0110d39 <test_kfree+0x59c>
f0110d22:	83 ec 04             	sub    $0x4,%esp
f0110d25:	68 54 b6 11 f0       	push   $0xf011b654
f0110d2a:	68 1a 03 00 00       	push   $0x31a
f0110d2f:	68 76 b5 11 f0       	push   $0xf011b576
f0110d34:	e8 3d f4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110d39:	e8 63 b1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110d3e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110d41:	74 17                	je     f0110d5a <test_kfree+0x5bd>
f0110d43:	83 ec 04             	sub    $0x4,%esp
f0110d46:	68 88 b5 11 f0       	push   $0xf011b588
f0110d4b:	68 1b 03 00 00       	push   $0x31b
f0110d50:	68 76 b5 11 f0       	push   $0xf011b576
f0110d55:	e8 1c f4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110d5a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110d5d:	e8 7c 9c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110d62:	29 c3                	sub    %eax,%ebx
f0110d64:	89 d8                	mov    %ebx,%eax
f0110d66:	83 f8 02             	cmp    $0x2,%eax
f0110d69:	74 17                	je     f0110d82 <test_kfree+0x5e5>
f0110d6b:	83 ec 04             	sub    $0x4,%esp
f0110d6e:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110d73:	68 1c 03 00 00       	push   $0x31c
f0110d78:	68 76 b5 11 f0       	push   $0xf011b576
f0110d7d:	e8 f4 f3 fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0110d82:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0110d89:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0110d8c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110d92:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0110d95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110d9c:	eb 0e                	jmp    f0110dac <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f0110d9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110da1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110da4:	01 d0                	add    %edx,%eax
f0110da6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0110da9:	ff 45 f4             	incl   -0xc(%ebp)
f0110dac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110db2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110db5:	7f e7                	jg     f0110d9e <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110db7:	e8 22 9c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110dbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110dbf:	e8 dd b0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110dc4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0110dc7:	83 ec 0c             	sub    $0xc,%esp
f0110dca:	68 00 fc 2f 00       	push   $0x2ffc00
f0110dcf:	e8 9c b5 ff ff       	call   f010c370 <kmalloc>
f0110dd4:	83 c4 10             	add    $0x10,%esp
f0110dd7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110ddd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110de3:	89 c1                	mov    %eax,%ecx
f0110de5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0110dec:	10 00 00 
f0110def:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110df4:	0f b6 d0             	movzbl %al,%edx
f0110df7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110dfd:	01 d0                	add    %edx,%eax
f0110dff:	48                   	dec    %eax
f0110e00:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0110e06:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110e0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e11:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0110e17:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110e1d:	29 d0                	sub    %edx,%eax
f0110e1f:	89 c3                	mov    %eax,%ebx
f0110e21:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110e28:	10 00 00 
f0110e2b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110e30:	0f b6 c0             	movzbl %al,%eax
f0110e33:	c1 e0 04             	shl    $0x4,%eax
f0110e36:	89 c2                	mov    %eax,%edx
f0110e38:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110e3e:	01 d0                	add    %edx,%eax
f0110e40:	48                   	dec    %eax
f0110e41:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110e47:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110e4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e52:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110e58:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110e5e:	29 d0                	sub    %edx,%eax
f0110e60:	01 d8                	add    %ebx,%eax
f0110e62:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0110e67:	39 c1                	cmp    %eax,%ecx
f0110e69:	74 17                	je     f0110e82 <test_kfree+0x6e5>
f0110e6b:	83 ec 04             	sub    $0x4,%esp
f0110e6e:	68 54 b6 11 f0       	push   $0xf011b654
f0110e73:	68 28 03 00 00       	push   $0x328
f0110e78:	68 76 b5 11 f0       	push   $0xf011b576
f0110e7d:	e8 f4 f2 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110e82:	e8 1a b0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110e87:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110e8a:	74 17                	je     f0110ea3 <test_kfree+0x706>
f0110e8c:	83 ec 04             	sub    $0x4,%esp
f0110e8f:	68 88 b5 11 f0       	push   $0xf011b588
f0110e94:	68 29 03 00 00       	push   $0x329
f0110e99:	68 76 b5 11 f0       	push   $0xf011b576
f0110e9e:	e8 d3 f2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110ea3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110ea6:	e8 33 9b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110eab:	29 c3                	sub    %eax,%ebx
f0110ead:	89 d8                	mov    %ebx,%eax
f0110eaf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110eb4:	74 17                	je     f0110ecd <test_kfree+0x730>
f0110eb6:	83 ec 04             	sub    $0x4,%esp
f0110eb9:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0110ebe:	68 2a 03 00 00       	push   $0x32a
f0110ec3:	68 76 b5 11 f0       	push   $0xf011b576
f0110ec8:	e8 a9 f2 fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0110ecd:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0110ed4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0110ed7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110edd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0110ee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0110ee7:	eb 0e                	jmp    f0110ef7 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0110ee9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110eec:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110eef:	01 d0                	add    %edx,%eax
f0110ef1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0110ef4:	ff 45 f4             	incl   -0xc(%ebp)
f0110ef7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110efd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110f00:	7f e7                	jg     f0110ee9 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0110f02:	e8 d7 9a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110f07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110f0a:	e8 92 af ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110f0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0110f12:	83 ec 0c             	sub    $0xc,%esp
f0110f15:	68 00 fc 5f 00       	push   $0x5ffc00
f0110f1a:	e8 51 b4 ff ff       	call   f010c370 <kmalloc>
f0110f1f:	83 c4 10             	add    $0x10,%esp
f0110f22:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110f28:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110f2e:	89 c1                	mov    %eax,%ecx
f0110f30:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110f37:	10 00 00 
f0110f3a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110f3f:	0f b6 d0             	movzbl %al,%edx
f0110f42:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110f48:	01 d0                	add    %edx,%eax
f0110f4a:	48                   	dec    %eax
f0110f4b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0110f51:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110f57:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f5c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0110f62:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110f68:	29 d0                	sub    %edx,%eax
f0110f6a:	89 c3                	mov    %eax,%ebx
f0110f6c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0110f73:	10 00 00 
f0110f76:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0110f7b:	0f b6 c0             	movzbl %al,%eax
f0110f7e:	c1 e0 04             	shl    $0x4,%eax
f0110f81:	89 c2                	mov    %eax,%edx
f0110f83:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0110f89:	01 d0                	add    %edx,%eax
f0110f8b:	48                   	dec    %eax
f0110f8c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0110f92:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f9d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0110fa3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110fa9:	29 d0                	sub    %edx,%eax
f0110fab:	01 d8                	add    %ebx,%eax
f0110fad:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f0110fb2:	39 c1                	cmp    %eax,%ecx
f0110fb4:	74 17                	je     f0110fcd <test_kfree+0x830>
f0110fb6:	83 ec 04             	sub    $0x4,%esp
f0110fb9:	68 54 b6 11 f0       	push   $0xf011b654
f0110fbe:	68 36 03 00 00       	push   $0x336
f0110fc3:	68 76 b5 11 f0       	push   $0xf011b576
f0110fc8:	e8 a9 f1 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110fcd:	e8 cf ae ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0110fd2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0110fd5:	74 17                	je     f0110fee <test_kfree+0x851>
f0110fd7:	83 ec 04             	sub    $0x4,%esp
f0110fda:	68 88 b5 11 f0       	push   $0xf011b588
f0110fdf:	68 37 03 00 00       	push   $0x337
f0110fe4:	68 76 b5 11 f0       	push   $0xf011b576
f0110fe9:	e8 88 f1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110fee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110ff1:	e8 e8 99 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0110ff6:	29 c3                	sub    %eax,%ebx
f0110ff8:	89 d8                	mov    %ebx,%eax
f0110ffa:	3d 00 06 00 00       	cmp    $0x600,%eax
f0110fff:	74 17                	je     f0111018 <test_kfree+0x87b>
f0111001:	83 ec 04             	sub    $0x4,%esp
f0111004:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0111009:	68 38 03 00 00       	push   $0x338
f011100e:	68 76 b5 11 f0       	push   $0xf011b576
f0111013:	e8 5e f1 fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0111018:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f011101f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0111022:	e8 b7 99 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111027:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011102a:	e8 72 ae ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011102f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0111032:	83 ec 0c             	sub    $0xc,%esp
f0111035:	68 00 38 00 00       	push   $0x3800
f011103a:	e8 31 b3 ff ff       	call   f010c370 <kmalloc>
f011103f:	83 c4 10             	add    $0x10,%esp
f0111042:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111048:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011104e:	89 c1                	mov    %eax,%ecx
f0111050:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0111057:	10 00 00 
f011105a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011105f:	0f b6 d0             	movzbl %al,%edx
f0111062:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0111068:	01 d0                	add    %edx,%eax
f011106a:	48                   	dec    %eax
f011106b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0111071:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111077:	ba 00 00 00 00       	mov    $0x0,%edx
f011107c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0111082:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111088:	29 d0                	sub    %edx,%eax
f011108a:	89 c3                	mov    %eax,%ebx
f011108c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0111093:	10 00 00 
f0111096:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011109b:	0f b6 c0             	movzbl %al,%eax
f011109e:	c1 e0 04             	shl    $0x4,%eax
f01110a1:	89 c2                	mov    %eax,%edx
f01110a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01110a9:	01 d0                	add    %edx,%eax
f01110ab:	48                   	dec    %eax
f01110ac:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01110b2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01110b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01110bd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01110c3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01110c9:	29 d0                	sub    %edx,%eax
f01110cb:	01 d8                	add    %ebx,%eax
f01110cd:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f01110d2:	39 c1                	cmp    %eax,%ecx
f01110d4:	74 17                	je     f01110ed <test_kfree+0x950>
f01110d6:	83 ec 04             	sub    $0x4,%esp
f01110d9:	68 54 b6 11 f0       	push   $0xf011b654
f01110de:	68 3f 03 00 00       	push   $0x33f
f01110e3:	68 76 b5 11 f0       	push   $0xf011b576
f01110e8:	e8 89 f0 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01110ed:	e8 af ad ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01110f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01110f5:	74 17                	je     f011110e <test_kfree+0x971>
f01110f7:	83 ec 04             	sub    $0x4,%esp
f01110fa:	68 88 b5 11 f0       	push   $0xf011b588
f01110ff:	68 40 03 00 00       	push   $0x340
f0111104:	68 76 b5 11 f0       	push   $0xf011b576
f0111109:	e8 68 f0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011110e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111111:	e8 c8 98 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111116:	29 c3                	sub    %eax,%ebx
f0111118:	89 d8                	mov    %ebx,%eax
f011111a:	83 f8 04             	cmp    $0x4,%eax
f011111d:	74 17                	je     f0111136 <test_kfree+0x999>
f011111f:	83 ec 04             	sub    $0x4,%esp
f0111122:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0111127:	68 41 03 00 00       	push   $0x341
f011112c:	68 76 b5 11 f0       	push   $0xf011b576
f0111131:	e8 40 f0 fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0111136:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f011113d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0111140:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0111146:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0111149:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111150:	eb 0e                	jmp    f0111160 <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f0111152:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111155:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111158:	01 d0                	add    %edx,%eax
f011115a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011115d:	ff 45 f4             	incl   -0xc(%ebp)
f0111160:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111166:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111169:	7f e7                	jg     f0111152 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011116b:	e8 6e 98 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111170:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0111176:	e8 26 ad ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011117b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0111181:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111187:	83 ec 0c             	sub    $0xc,%esp
f011118a:	50                   	push   %eax
f011118b:	e8 46 b2 ff ff       	call   f010c3d6 <kfree>
f0111190:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111193:	e8 09 ad ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111198:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011119e:	74 17                	je     f01111b7 <test_kfree+0xa1a>
f01111a0:	83 ec 04             	sub    $0x4,%esp
f01111a3:	68 88 b5 11 f0       	push   $0xf011b588
f01111a8:	68 50 03 00 00       	push   $0x350
f01111ad:	68 76 b5 11 f0       	push   $0xf011b576
f01111b2:	e8 bf ef fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01111b7:	e8 22 98 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01111bc:	89 c2                	mov    %eax,%edx
f01111be:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01111c4:	29 c2                	sub    %eax,%edx
f01111c6:	89 d0                	mov    %edx,%eax
f01111c8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01111cd:	74 17                	je     f01111e6 <test_kfree+0xa49>
f01111cf:	83 ec 04             	sub    $0x4,%esp
f01111d2:	68 5c bb 11 f0       	push   $0xf011bb5c
f01111d7:	68 51 03 00 00       	push   $0x351
f01111dc:	68 76 b5 11 f0       	push   $0xf011b576
f01111e1:	e8 90 ef fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01111e6:	e8 f3 97 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01111eb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01111f1:	e8 ab ac ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01111f6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01111fc:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0111202:	83 ec 0c             	sub    $0xc,%esp
f0111205:	50                   	push   %eax
f0111206:	e8 cb b1 ff ff       	call   f010c3d6 <kfree>
f011120b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011120e:	e8 8e ac ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111213:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0111219:	74 17                	je     f0111232 <test_kfree+0xa95>
f011121b:	83 ec 04             	sub    $0x4,%esp
f011121e:	68 88 b5 11 f0       	push   $0xf011b588
f0111223:	68 57 03 00 00       	push   $0x357
f0111228:	68 76 b5 11 f0       	push   $0xf011b576
f011122d:	e8 44 ef fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0111232:	e8 a7 97 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111237:	89 c2                	mov    %eax,%edx
f0111239:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011123f:	29 c2                	sub    %eax,%edx
f0111241:	89 d0                	mov    %edx,%eax
f0111243:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111248:	74 17                	je     f0111261 <test_kfree+0xac4>
f011124a:	83 ec 04             	sub    $0x4,%esp
f011124d:	68 5c bb 11 f0       	push   $0xf011bb5c
f0111252:	68 58 03 00 00       	push   $0x358
f0111257:	68 76 b5 11 f0       	push   $0xf011b576
f011125c:	e8 15 ef fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0111261:	e8 78 97 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111266:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011126c:	e8 30 ac ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111271:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0111277:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011127d:	83 ec 0c             	sub    $0xc,%esp
f0111280:	50                   	push   %eax
f0111281:	e8 50 b1 ff ff       	call   f010c3d6 <kfree>
f0111286:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111289:	e8 13 ac ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011128e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0111294:	74 17                	je     f01112ad <test_kfree+0xb10>
f0111296:	83 ec 04             	sub    $0x4,%esp
f0111299:	68 88 b5 11 f0       	push   $0xf011b588
f011129e:	68 5e 03 00 00       	push   $0x35e
f01112a3:	68 76 b5 11 f0       	push   $0xf011b576
f01112a8:	e8 c9 ee fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01112ad:	e8 2c 97 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01112b2:	89 c2                	mov    %eax,%edx
f01112b4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01112ba:	29 c2                	sub    %eax,%edx
f01112bc:	89 d0                	mov    %edx,%eax
f01112be:	3d 00 06 00 00       	cmp    $0x600,%eax
f01112c3:	74 17                	je     f01112dc <test_kfree+0xb3f>
f01112c5:	83 ec 04             	sub    $0x4,%esp
f01112c8:	68 5c bb 11 f0       	push   $0xf011bb5c
f01112cd:	68 5f 03 00 00       	push   $0x35f
f01112d2:	68 76 b5 11 f0       	push   $0xf011b576
f01112d7:	e8 9a ee fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01112dc:	83 ec 0c             	sub    $0xc,%esp
f01112df:	68 94 bb 11 f0       	push   $0xf011bb94
f01112e4:	e8 e6 5a ff ff       	call   f0106dcf <cprintf>
f01112e9:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01112ec:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01112f2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01112f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01112fc:	eb 1e                	jmp    f011131c <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f01112fe:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0111304:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0111307:	8b 45 98             	mov    -0x68(%ebp),%eax
f011130a:	01 c8                	add    %ecx,%eax
f011130c:	8a 00                	mov    (%eax),%al
f011130e:	0f be c0             	movsbl %al,%eax
f0111311:	01 d0                	add    %edx,%eax
f0111313:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0111319:	ff 45 f4             	incl   -0xc(%ebp)
f011131c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111322:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111325:	7f d7                	jg     f01112fe <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0111327:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f011132d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111333:	01 c0                	add    %eax,%eax
f0111335:	39 c2                	cmp    %eax,%edx
f0111337:	74 17                	je     f0111350 <test_kfree+0xbb3>
f0111339:	83 ec 04             	sub    $0x4,%esp
f011133c:	68 b8 bb 11 f0       	push   $0xf011bbb8
f0111341:	68 6c 03 00 00       	push   $0x36c
f0111346:	68 76 b5 11 f0       	push   $0xf011b576
f011134b:	e8 26 ee fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0111350:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111356:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0111359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111360:	eb 1e                	jmp    f0111380 <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f0111362:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0111368:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011136b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011136e:	01 c8                	add    %ecx,%eax
f0111370:	8a 00                	mov    (%eax),%al
f0111372:	0f be c0             	movsbl %al,%eax
f0111375:	01 d0                	add    %edx,%eax
f0111377:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011137d:	ff 45 f4             	incl   -0xc(%ebp)
f0111380:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111386:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111389:	7f d7                	jg     f0111362 <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011138b:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0111391:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111397:	89 c1                	mov    %eax,%ecx
f0111399:	01 c9                	add    %ecx,%ecx
f011139b:	01 c8                	add    %ecx,%eax
f011139d:	39 c2                	cmp    %eax,%edx
f011139f:	74 17                	je     f01113b8 <test_kfree+0xc1b>
f01113a1:	83 ec 04             	sub    $0x4,%esp
f01113a4:	68 b8 bb 11 f0       	push   $0xf011bbb8
f01113a9:	68 74 03 00 00       	push   $0x374
f01113ae:	68 76 b5 11 f0       	push   $0xf011b576
f01113b3:	e8 be ed fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01113b8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01113be:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01113c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01113c8:	eb 1e                	jmp    f01113e8 <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f01113ca:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f01113d0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01113d3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01113d6:	01 c8                	add    %ecx,%eax
f01113d8:	8a 00                	mov    (%eax),%al
f01113da:	0f be c0             	movsbl %al,%eax
f01113dd:	01 d0                	add    %edx,%eax
f01113df:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01113e5:	ff 45 f4             	incl   -0xc(%ebp)
f01113e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01113ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01113f1:	7f d7                	jg     f01113ca <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01113f3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01113f9:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01113ff:	c1 e2 02             	shl    $0x2,%edx
f0111402:	39 d0                	cmp    %edx,%eax
f0111404:	74 17                	je     f011141d <test_kfree+0xc80>
f0111406:	83 ec 04             	sub    $0x4,%esp
f0111409:	68 b8 bb 11 f0       	push   $0xf011bbb8
f011140e:	68 7c 03 00 00       	push   $0x37c
f0111413:	68 76 b5 11 f0       	push   $0xf011b576
f0111418:	e8 59 ed fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011141d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111423:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0111426:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011142d:	eb 1e                	jmp    f011144d <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f011142f:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0111435:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0111438:	8b 45 98             	mov    -0x68(%ebp),%eax
f011143b:	01 c8                	add    %ecx,%eax
f011143d:	8a 00                	mov    (%eax),%al
f011143f:	0f be c0             	movsbl %al,%eax
f0111442:	01 d0                	add    %edx,%eax
f0111444:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011144a:	ff 45 f4             	incl   -0xc(%ebp)
f011144d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111456:	7f d7                	jg     f011142f <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0111458:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f011145e:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0111464:	89 d0                	mov    %edx,%eax
f0111466:	c1 e0 02             	shl    $0x2,%eax
f0111469:	01 d0                	add    %edx,%eax
f011146b:	39 c1                	cmp    %eax,%ecx
f011146d:	74 17                	je     f0111486 <test_kfree+0xce9>
f011146f:	83 ec 04             	sub    $0x4,%esp
f0111472:	68 b8 bb 11 f0       	push   $0xf011bbb8
f0111477:	68 84 03 00 00       	push   $0x384
f011147c:	68 76 b5 11 f0       	push   $0xf011b576
f0111481:	e8 f0 ec fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0111486:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011148c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011148f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111496:	eb 1e                	jmp    f01114b6 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f0111498:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f011149e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01114a1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01114a4:	01 c8                	add    %ecx,%eax
f01114a6:	8a 00                	mov    (%eax),%al
f01114a8:	0f be c0             	movsbl %al,%eax
f01114ab:	01 d0                	add    %edx,%eax
f01114ad:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01114b3:	ff 45 f4             	incl   -0xc(%ebp)
f01114b6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01114bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01114bf:	7f d7                	jg     f0111498 <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01114c1:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f01114c7:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f01114cd:	89 d0                	mov    %edx,%eax
f01114cf:	01 c0                	add    %eax,%eax
f01114d1:	01 d0                	add    %edx,%eax
f01114d3:	01 c0                	add    %eax,%eax
f01114d5:	01 d0                	add    %edx,%eax
f01114d7:	39 c1                	cmp    %eax,%ecx
f01114d9:	74 17                	je     f01114f2 <test_kfree+0xd55>
f01114db:	83 ec 04             	sub    $0x4,%esp
f01114de:	68 b8 bb 11 f0       	push   $0xf011bbb8
f01114e3:	68 8c 03 00 00       	push   $0x38c
f01114e8:	68 76 b5 11 f0       	push   $0xf011b576
f01114ed:	e8 84 ec fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f01114f2:	83 ec 0c             	sub    $0xc,%esp
f01114f5:	68 eb bb 11 f0       	push   $0xf011bbeb
f01114fa:	e8 d0 58 ff ff       	call   f0106dcf <cprintf>
f01114ff:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0111502:	e8 d7 94 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111507:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011150a:	e8 92 a9 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011150f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0111512:	83 ec 0c             	sub    $0xc,%esp
f0111515:	68 00 50 00 00       	push   $0x5000
f011151a:	e8 51 ae ff ff       	call   f010c370 <kmalloc>
f011151f:	83 c4 10             	add    $0x10,%esp
f0111522:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111528:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011152e:	89 c1                	mov    %eax,%ecx
f0111530:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111537:	10 00 00 
f011153a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011153f:	0f b6 d0             	movzbl %al,%edx
f0111542:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111548:	01 d0                	add    %edx,%eax
f011154a:	48                   	dec    %eax
f011154b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0111551:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111557:	ba 00 00 00 00       	mov    $0x0,%edx
f011155c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0111562:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111568:	29 d0                	sub    %edx,%eax
f011156a:	89 c3                	mov    %eax,%ebx
f011156c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0111573:	10 00 00 
f0111576:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011157b:	0f b6 c0             	movzbl %al,%eax
f011157e:	c1 e0 04             	shl    $0x4,%eax
f0111581:	89 c2                	mov    %eax,%edx
f0111583:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0111589:	01 d0                	add    %edx,%eax
f011158b:	48                   	dec    %eax
f011158c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0111592:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111598:	ba 00 00 00 00       	mov    $0x0,%edx
f011159d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01115a3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01115a9:	29 d0                	sub    %edx,%eax
f01115ab:	01 d8                	add    %ebx,%eax
f01115ad:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01115b2:	39 c1                	cmp    %eax,%ecx
f01115b4:	74 17                	je     f01115cd <test_kfree+0xe30>
f01115b6:	83 ec 04             	sub    $0x4,%esp
f01115b9:	68 54 b6 11 f0       	push   $0xf011b654
f01115be:	68 96 03 00 00       	push   $0x396
f01115c3:	68 76 b5 11 f0       	push   $0xf011b576
f01115c8:	e8 a9 eb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01115cd:	e8 cf a8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01115d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01115d5:	74 17                	je     f01115ee <test_kfree+0xe51>
f01115d7:	83 ec 04             	sub    $0x4,%esp
f01115da:	68 88 b5 11 f0       	push   $0xf011b588
f01115df:	68 97 03 00 00       	push   $0x397
f01115e4:	68 76 b5 11 f0       	push   $0xf011b576
f01115e9:	e8 88 eb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01115ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01115f1:	e8 e8 93 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01115f6:	29 c3                	sub    %eax,%ebx
f01115f8:	89 d8                	mov    %ebx,%eax
f01115fa:	83 f8 05             	cmp    $0x5,%eax
f01115fd:	74 17                	je     f0111616 <test_kfree+0xe79>
f01115ff:	83 ec 04             	sub    $0x4,%esp
f0111602:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0111607:	68 98 03 00 00       	push   $0x398
f011160c:	68 76 b5 11 f0       	push   $0xf011b576
f0111611:	e8 60 eb fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0111616:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f011161d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0111620:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0111626:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0111629:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111630:	eb 0e                	jmp    f0111640 <test_kfree+0xea3>
		{
			ptr[i] = 8 ;
f0111632:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111635:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111638:	01 d0                	add    %edx,%eax
f011163a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011163d:	ff 45 f4             	incl   -0xc(%ebp)
f0111640:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0111646:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111649:	7f e7                	jg     f0111632 <test_kfree+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011164b:	e8 8e 93 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111650:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111653:	e8 49 a8 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111658:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011165b:	83 ec 0c             	sub    $0xc,%esp
f011165e:	68 00 00 10 00       	push   $0x100000
f0111663:	e8 08 ad ff ff       	call   f010c370 <kmalloc>
f0111668:	83 c4 10             	add    $0x10,%esp
f011166b:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111671:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111677:	89 c1                	mov    %eax,%ecx
f0111679:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0111680:	10 00 00 
f0111683:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0111688:	0f b6 d0             	movzbl %al,%edx
f011168b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0111691:	01 d0                	add    %edx,%eax
f0111693:	48                   	dec    %eax
f0111694:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011169a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01116a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01116a5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01116ab:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01116b1:	29 d0                	sub    %edx,%eax
f01116b3:	89 c3                	mov    %eax,%ebx
f01116b5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01116bc:	10 00 00 
f01116bf:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01116c4:	0f b6 c0             	movzbl %al,%eax
f01116c7:	c1 e0 04             	shl    $0x4,%eax
f01116ca:	89 c2                	mov    %eax,%edx
f01116cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01116d2:	01 d0                	add    %edx,%eax
f01116d4:	48                   	dec    %eax
f01116d5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01116db:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01116e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01116e6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01116ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01116f2:	29 d0                	sub    %edx,%eax
f01116f4:	01 d8                	add    %ebx,%eax
f01116f6:	2d 00 30 2f 09       	sub    $0x92f3000,%eax
f01116fb:	39 c1                	cmp    %eax,%ecx
f01116fd:	74 17                	je     f0111716 <test_kfree+0xf79>
f01116ff:	83 ec 04             	sub    $0x4,%esp
f0111702:	68 54 b6 11 f0       	push   $0xf011b654
f0111707:	68 a4 03 00 00       	push   $0x3a4
f011170c:	68 76 b5 11 f0       	push   $0xf011b576
f0111711:	e8 60 ea fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111716:	e8 86 a7 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011171b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011171e:	74 17                	je     f0111737 <test_kfree+0xf9a>
f0111720:	83 ec 04             	sub    $0x4,%esp
f0111723:	68 88 b5 11 f0       	push   $0xf011b588
f0111728:	68 a5 03 00 00       	push   $0x3a5
f011172d:	68 76 b5 11 f0       	push   $0xf011b576
f0111732:	e8 3f ea fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111737:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011173a:	e8 9f 92 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011173f:	29 c3                	sub    %eax,%ebx
f0111741:	89 d8                	mov    %ebx,%eax
f0111743:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111748:	74 17                	je     f0111761 <test_kfree+0xfc4>
f011174a:	83 ec 04             	sub    $0x4,%esp
f011174d:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0111752:	68 a6 03 00 00       	push   $0x3a6
f0111757:	68 76 b5 11 f0       	push   $0xf011b576
f011175c:	e8 15 ea fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0111761:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0111768:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f011176b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111771:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0111774:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011177b:	eb 0e                	jmp    f011178b <test_kfree+0xfee>
		{
			ptr[i] = 9 ;
f011177d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111780:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111783:	01 d0                	add    %edx,%eax
f0111785:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0111788:	ff 45 f4             	incl   -0xc(%ebp)
f011178b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0111791:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0111794:	7f e7                	jg     f011177d <test_kfree+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0111796:	83 ec 0c             	sub    $0xc,%esp
f0111799:	68 f2 bb 11 f0       	push   $0xf011bbf2
f011179e:	e8 2c 56 ff ff       	call   f0106dcf <cprintf>
f01117a3:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01117a6:	e8 33 92 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01117ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01117ae:	e8 ee a6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01117b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01117b6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01117bc:	83 ec 0c             	sub    $0xc,%esp
f01117bf:	50                   	push   %eax
f01117c0:	e8 11 ac ff ff       	call   f010c3d6 <kfree>
f01117c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01117c8:	e8 d4 a6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01117cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01117d0:	74 17                	je     f01117e9 <test_kfree+0x104c>
f01117d2:	83 ec 04             	sub    $0x4,%esp
f01117d5:	68 88 b5 11 f0       	push   $0xf011b588
f01117da:	68 b6 03 00 00       	push   $0x3b6
f01117df:	68 76 b5 11 f0       	push   $0xf011b576
f01117e4:	e8 8d e9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01117e9:	e8 f0 91 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01117ee:	89 c2                	mov    %eax,%edx
f01117f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01117f3:	29 c2                	sub    %eax,%edx
f01117f5:	89 d0                	mov    %edx,%eax
f01117f7:	83 f8 02             	cmp    $0x2,%eax
f01117fa:	74 17                	je     f0111813 <test_kfree+0x1076>
f01117fc:	83 ec 04             	sub    $0x4,%esp
f01117ff:	68 5c bb 11 f0       	push   $0xf011bb5c
f0111804:	68 b7 03 00 00       	push   $0x3b7
f0111809:	68 76 b5 11 f0       	push   $0xf011b576
f011180e:	e8 63 e9 fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111813:	e8 c6 91 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111818:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011181b:	e8 81 a6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111820:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0111823:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0111829:	83 ec 0c             	sub    $0xc,%esp
f011182c:	50                   	push   %eax
f011182d:	e8 a4 ab ff ff       	call   f010c3d6 <kfree>
f0111832:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111835:	e8 67 a6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011183a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011183d:	74 17                	je     f0111856 <test_kfree+0x10b9>
f011183f:	83 ec 04             	sub    $0x4,%esp
f0111842:	68 88 b5 11 f0       	push   $0xf011b588
f0111847:	68 bd 03 00 00       	push   $0x3bd
f011184c:	68 76 b5 11 f0       	push   $0xf011b576
f0111851:	e8 20 e9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0111856:	e8 83 91 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011185b:	89 c2                	mov    %eax,%edx
f011185d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111860:	29 c2                	sub    %eax,%edx
f0111862:	89 d0                	mov    %edx,%eax
f0111864:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111869:	74 17                	je     f0111882 <test_kfree+0x10e5>
f011186b:	83 ec 04             	sub    $0x4,%esp
f011186e:	68 5c bb 11 f0       	push   $0xf011bb5c
f0111873:	68 be 03 00 00       	push   $0x3be
f0111878:	68 76 b5 11 f0       	push   $0xf011b576
f011187d:	e8 f4 e8 fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111882:	e8 57 91 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111887:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011188a:	e8 12 a6 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011188f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0111892:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111898:	83 ec 0c             	sub    $0xc,%esp
f011189b:	50                   	push   %eax
f011189c:	e8 35 ab ff ff       	call   f010c3d6 <kfree>
f01118a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01118a4:	e8 f8 a5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01118a9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01118ac:	74 17                	je     f01118c5 <test_kfree+0x1128>
f01118ae:	83 ec 04             	sub    $0x4,%esp
f01118b1:	68 88 b5 11 f0       	push   $0xf011b588
f01118b6:	68 c4 03 00 00       	push   $0x3c4
f01118bb:	68 76 b5 11 f0       	push   $0xf011b576
f01118c0:	e8 b1 e8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01118c5:	e8 14 91 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01118ca:	89 c2                	mov    %eax,%edx
f01118cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118cf:	29 c2                	sub    %eax,%edx
f01118d1:	89 d0                	mov    %edx,%eax
f01118d3:	83 f8 01             	cmp    $0x1,%eax
f01118d6:	74 17                	je     f01118ef <test_kfree+0x1152>
f01118d8:	83 ec 04             	sub    $0x4,%esp
f01118db:	68 5c bb 11 f0       	push   $0xf011bb5c
f01118e0:	68 c5 03 00 00       	push   $0x3c5
f01118e5:	68 76 b5 11 f0       	push   $0xf011b576
f01118ea:	e8 87 e8 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01118ef:	e8 ea 90 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01118f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01118f7:	e8 a5 a5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01118fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01118ff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111905:	83 ec 0c             	sub    $0xc,%esp
f0111908:	50                   	push   %eax
f0111909:	e8 c8 aa ff ff       	call   f010c3d6 <kfree>
f011190e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111911:	e8 8b a5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111916:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111919:	74 17                	je     f0111932 <test_kfree+0x1195>
f011191b:	83 ec 04             	sub    $0x4,%esp
f011191e:	68 88 b5 11 f0       	push   $0xf011b588
f0111923:	68 cb 03 00 00       	push   $0x3cb
f0111928:	68 76 b5 11 f0       	push   $0xf011b576
f011192d:	e8 44 e8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0111932:	e8 a7 90 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111937:	89 c2                	mov    %eax,%edx
f0111939:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011193c:	29 c2                	sub    %eax,%edx
f011193e:	89 d0                	mov    %edx,%eax
f0111940:	83 f8 01             	cmp    $0x1,%eax
f0111943:	74 17                	je     f011195c <test_kfree+0x11bf>
f0111945:	83 ec 04             	sub    $0x4,%esp
f0111948:	68 5c bb 11 f0       	push   $0xf011bb5c
f011194d:	68 cc 03 00 00       	push   $0x3cc
f0111952:	68 76 b5 11 f0       	push   $0xf011b576
f0111957:	e8 1a e8 fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f011195c:	e8 7d 90 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111961:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111964:	e8 38 a5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111969:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f011196c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0111972:	83 ec 0c             	sub    $0xc,%esp
f0111975:	50                   	push   %eax
f0111976:	e8 5b aa ff ff       	call   f010c3d6 <kfree>
f011197b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011197e:	e8 1e a5 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111983:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111986:	74 17                	je     f011199f <test_kfree+0x1202>
f0111988:	83 ec 04             	sub    $0x4,%esp
f011198b:	68 88 b5 11 f0       	push   $0xf011b588
f0111990:	68 d2 03 00 00       	push   $0x3d2
f0111995:	68 76 b5 11 f0       	push   $0xf011b576
f011199a:	e8 d7 e7 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f011199f:	e8 3a 90 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01119a4:	89 c2                	mov    %eax,%edx
f01119a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01119a9:	29 c2                	sub    %eax,%edx
f01119ab:	89 d0                	mov    %edx,%eax
f01119ad:	83 f8 04             	cmp    $0x4,%eax
f01119b0:	74 17                	je     f01119c9 <test_kfree+0x122c>
f01119b2:	83 ec 04             	sub    $0x4,%esp
f01119b5:	68 5c bb 11 f0       	push   $0xf011bb5c
f01119ba:	68 d3 03 00 00       	push   $0x3d3
f01119bf:	68 76 b5 11 f0       	push   $0xf011b576
f01119c4:	e8 ad e7 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01119c9:	e8 10 90 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01119ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01119d1:	e8 cb a4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01119d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01119d9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01119df:	83 ec 0c             	sub    $0xc,%esp
f01119e2:	50                   	push   %eax
f01119e3:	e8 ee a9 ff ff       	call   f010c3d6 <kfree>
f01119e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01119eb:	e8 b1 a4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01119f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01119f3:	74 17                	je     f0111a0c <test_kfree+0x126f>
f01119f5:	83 ec 04             	sub    $0x4,%esp
f01119f8:	68 88 b5 11 f0       	push   $0xf011b588
f01119fd:	68 d9 03 00 00       	push   $0x3d9
f0111a02:	68 76 b5 11 f0       	push   $0xf011b576
f0111a07:	e8 6a e7 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0111a0c:	e8 cd 8f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111a11:	89 c2                	mov    %eax,%edx
f0111a13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111a16:	29 c2                	sub    %eax,%edx
f0111a18:	89 d0                	mov    %edx,%eax
f0111a1a:	83 f8 05             	cmp    $0x5,%eax
f0111a1d:	74 17                	je     f0111a36 <test_kfree+0x1299>
f0111a1f:	83 ec 04             	sub    $0x4,%esp
f0111a22:	68 5c bb 11 f0       	push   $0xf011bb5c
f0111a27:	68 da 03 00 00       	push   $0x3da
f0111a2c:	68 76 b5 11 f0       	push   $0xf011b576
f0111a31:	e8 40 e7 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111a36:	e8 a3 8f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111a3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111a3e:	e8 5e a4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111a43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0111a46:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111a4c:	83 ec 0c             	sub    $0xc,%esp
f0111a4f:	50                   	push   %eax
f0111a50:	e8 81 a9 ff ff       	call   f010c3d6 <kfree>
f0111a55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111a58:	e8 44 a4 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111a5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111a60:	74 17                	je     f0111a79 <test_kfree+0x12dc>
f0111a62:	83 ec 04             	sub    $0x4,%esp
f0111a65:	68 88 b5 11 f0       	push   $0xf011b588
f0111a6a:	68 e0 03 00 00       	push   $0x3e0
f0111a6f:	68 76 b5 11 f0       	push   $0xf011b576
f0111a74:	e8 fd e6 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0111a79:	e8 60 8f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111a7e:	89 c2                	mov    %eax,%edx
f0111a80:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111a83:	29 c2                	sub    %eax,%edx
f0111a85:	89 d0                	mov    %edx,%eax
f0111a87:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111a8c:	74 17                	je     f0111aa5 <test_kfree+0x1308>
f0111a8e:	83 ec 04             	sub    $0x4,%esp
f0111a91:	68 5c bb 11 f0       	push   $0xf011bb5c
f0111a96:	68 e1 03 00 00       	push   $0x3e1
f0111a9b:	68 76 b5 11 f0       	push   $0xf011b576
f0111aa0:	e8 d1 e6 fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0111aa5:	e8 34 8f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111aaa:	89 c2                	mov    %eax,%edx
f0111aac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111aaf:	39 c2                	cmp    %eax,%edx
f0111ab1:	74 17                	je     f0111aca <test_kfree+0x132d>
f0111ab3:	83 ec 04             	sub    $0x4,%esp
f0111ab6:	68 fc bb 11 f0       	push   $0xf011bbfc
f0111abb:	68 e3 03 00 00       	push   $0x3e3
f0111ac0:	68 76 b5 11 f0       	push   $0xf011b576
f0111ac5:	e8 ac e6 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f0111aca:	83 ec 0c             	sub    $0xc,%esp
f0111acd:	68 30 bc 11 f0       	push   $0xf011bc30
f0111ad2:	e8 f8 52 ff ff       	call   f0106dcf <cprintf>
f0111ad7:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0111ada:	83 ec 0c             	sub    $0xc,%esp
f0111add:	6a 03                	push   $0x3
f0111adf:	e8 01 91 ff ff       	call   f010abe5 <sys_bypassPageFault>
f0111ae4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0111ae7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111aee:	e9 82 00 00 00       	jmp    f0111b75 <test_kfree+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0111af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111af6:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0111afd:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0111b00:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b03:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0111b06:	e8 c8 90 ff ff       	call   f010abd3 <sys_rcr2>
f0111b0b:	89 c2                	mov    %eax,%edx
f0111b0d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b10:	39 c2                	cmp    %eax,%edx
f0111b12:	74 17                	je     f0111b2b <test_kfree+0x138e>
f0111b14:	83 ec 04             	sub    $0x4,%esp
f0111b17:	68 38 bc 11 f0       	push   $0xf011bc38
f0111b1c:	68 f2 03 00 00       	push   $0x3f2
f0111b21:	68 76 b5 11 f0       	push   $0xf011b576
f0111b26:	e8 4b e6 fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f0111b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b2e:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0111b35:	89 c2                	mov    %eax,%edx
f0111b37:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b3a:	01 d0                	add    %edx,%eax
f0111b3c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0111b3f:	e8 8f 90 ff ff       	call   f010abd3 <sys_rcr2>
f0111b44:	89 c2                	mov    %eax,%edx
f0111b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b49:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0111b50:	89 c1                	mov    %eax,%ecx
f0111b52:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b55:	01 c8                	add    %ecx,%eax
f0111b57:	39 c2                	cmp    %eax,%edx
f0111b59:	74 17                	je     f0111b72 <test_kfree+0x13d5>
f0111b5b:	83 ec 04             	sub    $0x4,%esp
f0111b5e:	68 38 bc 11 f0       	push   $0xf011bc38
f0111b63:	68 f4 03 00 00       	push   $0x3f4
f0111b68:	68 76 b5 11 f0       	push   $0xf011b576
f0111b6d:	e8 04 e6 fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0111b72:	ff 45 f4             	incl   -0xc(%ebp)
f0111b75:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0111b79:	0f 8e 74 ff ff ff    	jle    f0111af3 <test_kfree+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0111b7f:	83 ec 0c             	sub    $0xc,%esp
f0111b82:	6a 00                	push   $0x0
f0111b84:	e8 5c 90 ff ff       	call   f010abe5 <sys_bypassPageFault>
f0111b89:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0111b8c:	83 ec 0c             	sub    $0xc,%esp
f0111b8f:	68 7d bc 11 f0       	push   $0xf011bc7d
f0111b94:	e8 36 52 ff ff       	call   f0106dcf <cprintf>
f0111b99:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111b9c:	e8 3d 8e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111ba1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111ba4:	e8 f8 a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111ba9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0111bac:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111bb2:	83 ec 0c             	sub    $0xc,%esp
f0111bb5:	50                   	push   %eax
f0111bb6:	e8 1b a8 ff ff       	call   f010c3d6 <kfree>
f0111bbb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111bbe:	e8 de a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111bc3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111bc6:	74 17                	je     f0111bdf <test_kfree+0x1442>
f0111bc8:	83 ec 04             	sub    $0x4,%esp
f0111bcb:	68 88 b5 11 f0       	push   $0xf011b588
f0111bd0:	68 02 04 00 00       	push   $0x402
f0111bd5:	68 76 b5 11 f0       	push   $0xf011b576
f0111bda:	e8 97 e5 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111bdf:	e8 fa 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111be4:	89 c2                	mov    %eax,%edx
f0111be6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111be9:	39 c2                	cmp    %eax,%edx
f0111beb:	74 17                	je     f0111c04 <test_kfree+0x1467>
f0111bed:	83 ec 04             	sub    $0x4,%esp
f0111bf0:	68 84 bc 11 f0       	push   $0xf011bc84
f0111bf5:	68 03 04 00 00       	push   $0x403
f0111bfa:	68 76 b5 11 f0       	push   $0xf011b576
f0111bff:	e8 72 e5 fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111c04:	e8 d5 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111c09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111c0c:	e8 90 a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111c11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0111c14:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0111c1a:	83 ec 0c             	sub    $0xc,%esp
f0111c1d:	50                   	push   %eax
f0111c1e:	e8 b3 a7 ff ff       	call   f010c3d6 <kfree>
f0111c23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c26:	e8 76 a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111c2b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111c2e:	74 17                	je     f0111c47 <test_kfree+0x14aa>
f0111c30:	83 ec 04             	sub    $0x4,%esp
f0111c33:	68 88 b5 11 f0       	push   $0xf011b588
f0111c38:	68 09 04 00 00       	push   $0x409
f0111c3d:	68 76 b5 11 f0       	push   $0xf011b576
f0111c42:	e8 2f e5 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111c47:	e8 92 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111c4c:	89 c2                	mov    %eax,%edx
f0111c4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111c51:	39 c2                	cmp    %eax,%edx
f0111c53:	74 17                	je     f0111c6c <test_kfree+0x14cf>
f0111c55:	83 ec 04             	sub    $0x4,%esp
f0111c58:	68 84 bc 11 f0       	push   $0xf011bc84
f0111c5d:	68 0a 04 00 00       	push   $0x40a
f0111c62:	68 76 b5 11 f0       	push   $0xf011b576
f0111c67:	e8 0a e5 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0111c6c:	e8 6d 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111c71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111c74:	e8 28 a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111c79:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0111c7c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0111c82:	83 ec 0c             	sub    $0xc,%esp
f0111c85:	50                   	push   %eax
f0111c86:	e8 4b a7 ff ff       	call   f010c3d6 <kfree>
f0111c8b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c8e:	e8 0e a2 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111c93:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111c96:	74 17                	je     f0111caf <test_kfree+0x1512>
f0111c98:	83 ec 04             	sub    $0x4,%esp
f0111c9b:	68 88 b5 11 f0       	push   $0xf011b588
f0111ca0:	68 10 04 00 00       	push   $0x410
f0111ca5:	68 76 b5 11 f0       	push   $0xf011b576
f0111caa:	e8 c7 e4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111caf:	e8 2a 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111cb4:	89 c2                	mov    %eax,%edx
f0111cb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111cb9:	39 c2                	cmp    %eax,%edx
f0111cbb:	74 17                	je     f0111cd4 <test_kfree+0x1537>
f0111cbd:	83 ec 04             	sub    $0x4,%esp
f0111cc0:	68 84 bc 11 f0       	push   $0xf011bc84
f0111cc5:	68 11 04 00 00       	push   $0x411
f0111cca:	68 76 b5 11 f0       	push   $0xf011b576
f0111ccf:	e8 a2 e4 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111cd4:	e8 05 8d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111cd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111cdc:	e8 c0 a1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111ce1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0111ce4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0111cea:	83 ec 0c             	sub    $0xc,%esp
f0111ced:	50                   	push   %eax
f0111cee:	e8 e3 a6 ff ff       	call   f010c3d6 <kfree>
f0111cf3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111cf6:	e8 a6 a1 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111cfb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111cfe:	74 17                	je     f0111d17 <test_kfree+0x157a>
f0111d00:	83 ec 04             	sub    $0x4,%esp
f0111d03:	68 88 b5 11 f0       	push   $0xf011b588
f0111d08:	68 17 04 00 00       	push   $0x417
f0111d0d:	68 76 b5 11 f0       	push   $0xf011b576
f0111d12:	e8 5f e4 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0111d17:	e8 c2 8c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111d1c:	89 c2                	mov    %eax,%edx
f0111d1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111d21:	39 c2                	cmp    %eax,%edx
f0111d23:	74 17                	je     f0111d3c <test_kfree+0x159f>
f0111d25:	83 ec 04             	sub    $0x4,%esp
f0111d28:	68 84 bc 11 f0       	push   $0xf011bc84
f0111d2d:	68 18 04 00 00       	push   $0x418
f0111d32:	68 76 b5 11 f0       	push   $0xf011b576
f0111d37:	e8 3a e4 fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f0111d3c:	83 ec 0c             	sub    $0xc,%esp
f0111d3f:	68 cb bc 11 f0       	push   $0xf011bccb
f0111d44:	e8 86 50 ff ff       	call   f0106dcf <cprintf>
f0111d49:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0111d4c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0111d53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0111d5a:	eb 4a                	jmp    f0111da6 <test_kfree+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0111d5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d5f:	89 c1                	mov    %eax,%ecx
f0111d61:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0111d66:	83 ec 04             	sub    $0x4,%esp
f0111d69:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0111d6f:	52                   	push   %edx
f0111d70:	51                   	push   %ecx
f0111d71:	50                   	push   %eax
f0111d72:	e8 9e 1d ff ff       	call   f0103b15 <get_page_table>
f0111d77:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0111d7a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0111d80:	85 c0                	test   %eax,%eax
f0111d82:	75 17                	jne    f0111d9b <test_kfree+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0111d84:	83 ec 04             	sub    $0x4,%esp
f0111d87:	68 d4 bc 11 f0       	push   $0xf011bcd4
f0111d8c:	68 26 04 00 00       	push   $0x426
f0111d91:	68 76 b5 11 f0       	push   $0xf011b576
f0111d96:	e8 db e3 fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0111d9b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0111da2:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0111da6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0111daa:	78 b0                	js     f0111d5c <test_kfree+0x15bf>
f0111dac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0111db0:	7f 09                	jg     f0111dbb <test_kfree+0x161e>
f0111db2:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0111db9:	76 a1                	jbe    f0111d5c <test_kfree+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0111dbb:	83 ec 0c             	sub    $0xc,%esp
f0111dbe:	68 52 b7 11 f0       	push   $0xf011b752
f0111dc3:	e8 07 50 ff ff       	call   f0106dcf <cprintf>
f0111dc8:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0111dcb:	83 ec 0c             	sub    $0xc,%esp
f0111dce:	68 3c bd 11 f0       	push   $0xf011bd3c
f0111dd3:	e8 f7 4f ff ff       	call   f0106dcf <cprintf>
f0111dd8:	83 c4 10             	add    $0x10,%esp

	return 1;
f0111ddb:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0111de0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0111de3:	5b                   	pop    %ebx
f0111de4:	5f                   	pop    %edi
f0111de5:	5d                   	pop    %ebp
f0111de6:	c3                   	ret    

f0111de7 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f0111de7:	55                   	push   %ebp
f0111de8:	89 e5                	mov    %esp,%ebp
f0111dea:	57                   	push   %edi
f0111deb:	53                   	push   %ebx
f0111dec:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0111df2:	83 ec 0c             	sub    $0xc,%esp
f0111df5:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0111dfa:	e8 d0 4f ff ff       	call   f0106dcf <cprintf>
f0111dff:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0111e02:	83 ec 0c             	sub    $0xc,%esp
f0111e05:	68 e8 b4 11 f0       	push   $0xf011b4e8
f0111e0a:	e8 c0 4f ff ff       	call   f0106dcf <cprintf>
f0111e0f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0111e12:	83 ec 0c             	sub    $0xc,%esp
f0111e15:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0111e1a:	e8 b0 4f ff ff       	call   f0106dcf <cprintf>
f0111e1f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0111e22:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0111e26:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0111e2a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0111e30:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0111e36:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0111e3d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0111e44:	e8 95 8b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111e49:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0111e4c:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0111e52:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111e57:	b8 00 00 00 00       	mov    $0x0,%eax
f0111e5c:	89 d7                	mov    %edx,%edi
f0111e5e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0111e60:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0111e66:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111e6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111e70:	89 d7                	mov    %edx,%edi
f0111e72:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0111e74:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0111e7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111e7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111e84:	89 d7                	mov    %edx,%edi
f0111e86:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111e88:	e8 51 8b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111e8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111e90:	e8 0c a0 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111e95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0111e98:	83 ec 0c             	sub    $0xc,%esp
f0111e9b:	68 00 fc 1f 00       	push   $0x1ffc00
f0111ea0:	e8 cb a4 ff ff       	call   f010c370 <kmalloc>
f0111ea5:	83 c4 10             	add    $0x10,%esp
f0111ea8:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111eae:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0111eb4:	89 c1                	mov    %eax,%ecx
f0111eb6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0111ebd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0111ec2:	0f b6 d0             	movzbl %al,%edx
f0111ec5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111ec8:	01 d0                	add    %edx,%eax
f0111eca:	48                   	dec    %eax
f0111ecb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0111ece:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0111ed6:	f7 75 c8             	divl   -0x38(%ebp)
f0111ed9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111edc:	29 d0                	sub    %edx,%eax
f0111ede:	89 c3                	mov    %eax,%ebx
f0111ee0:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0111ee7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0111eec:	0f b6 c0             	movzbl %al,%eax
f0111eef:	c1 e0 04             	shl    $0x4,%eax
f0111ef2:	89 c2                	mov    %eax,%edx
f0111ef4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ef7:	01 d0                	add    %edx,%eax
f0111ef9:	48                   	dec    %eax
f0111efa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0111efd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f00:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f05:	f7 75 c0             	divl   -0x40(%ebp)
f0111f08:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f0b:	29 d0                	sub    %edx,%eax
f0111f0d:	01 d8                	add    %ebx,%eax
f0111f0f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0111f14:	39 c1                	cmp    %eax,%ecx
f0111f16:	74 17                	je     f0111f2f <test_kfree_bestfit+0x148>
f0111f18:	83 ec 04             	sub    $0x4,%esp
f0111f1b:	68 54 b6 11 f0       	push   $0xf011b654
f0111f20:	68 53 04 00 00       	push   $0x453
f0111f25:	68 76 b5 11 f0       	push   $0xf011b576
f0111f2a:	e8 47 e2 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111f2f:	e8 6d 9f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111f34:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111f37:	74 17                	je     f0111f50 <test_kfree_bestfit+0x169>
f0111f39:	83 ec 04             	sub    $0x4,%esp
f0111f3c:	68 88 b5 11 f0       	push   $0xf011b588
f0111f41:	68 54 04 00 00       	push   $0x454
f0111f46:	68 76 b5 11 f0       	push   $0xf011b576
f0111f4b:	e8 26 e2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111f50:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0111f53:	e8 86 8a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111f58:	29 c3                	sub    %eax,%ebx
f0111f5a:	89 d8                	mov    %ebx,%eax
f0111f5c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111f61:	74 17                	je     f0111f7a <test_kfree_bestfit+0x193>
f0111f63:	83 ec 04             	sub    $0x4,%esp
f0111f66:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0111f6b:	68 55 04 00 00       	push   $0x455
f0111f70:	68 76 b5 11 f0       	push   $0xf011b576
f0111f75:	e8 fc e1 fe ff       	call   f0100176 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0111f7a:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0111f81:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111f84:	e8 55 8a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0111f89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111f8c:	e8 10 9f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0111f91:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0111f94:	83 ec 0c             	sub    $0xc,%esp
f0111f97:	68 00 fc 1f 00       	push   $0x1ffc00
f0111f9c:	e8 cf a3 ff ff       	call   f010c370 <kmalloc>
f0111fa1:	83 c4 10             	add    $0x10,%esp
f0111fa4:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111faa:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0111fb0:	89 c1                	mov    %eax,%ecx
f0111fb2:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0111fb9:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0111fbe:	0f b6 d0             	movzbl %al,%edx
f0111fc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111fc4:	01 d0                	add    %edx,%eax
f0111fc6:	48                   	dec    %eax
f0111fc7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0111fca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111fcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0111fd2:	f7 75 b8             	divl   -0x48(%ebp)
f0111fd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111fd8:	29 d0                	sub    %edx,%eax
f0111fda:	89 c3                	mov    %eax,%ebx
f0111fdc:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0111fe3:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0111fe8:	0f b6 c0             	movzbl %al,%eax
f0111feb:	c1 e0 04             	shl    $0x4,%eax
f0111fee:	89 c2                	mov    %eax,%edx
f0111ff0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111ff3:	01 d0                	add    %edx,%eax
f0111ff5:	48                   	dec    %eax
f0111ff6:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111ff9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ffc:	ba 00 00 00 00       	mov    $0x0,%edx
f0112001:	f7 75 b0             	divl   -0x50(%ebp)
f0112004:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112007:	29 d0                	sub    %edx,%eax
f0112009:	01 d8                	add    %ebx,%eax
f011200b:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0112010:	39 c1                	cmp    %eax,%ecx
f0112012:	74 17                	je     f011202b <test_kfree_bestfit+0x244>
f0112014:	83 ec 04             	sub    $0x4,%esp
f0112017:	68 54 b6 11 f0       	push   $0xf011b654
f011201c:	68 5c 04 00 00       	push   $0x45c
f0112021:	68 76 b5 11 f0       	push   $0xf011b576
f0112026:	e8 4b e1 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011202b:	e8 71 9e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112030:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112033:	74 17                	je     f011204c <test_kfree_bestfit+0x265>
f0112035:	83 ec 04             	sub    $0x4,%esp
f0112038:	68 88 b5 11 f0       	push   $0xf011b588
f011203d:	68 5d 04 00 00       	push   $0x45d
f0112042:	68 76 b5 11 f0       	push   $0xf011b576
f0112047:	e8 2a e1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011204c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011204f:	e8 8a 89 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112054:	29 c3                	sub    %eax,%ebx
f0112056:	89 d8                	mov    %ebx,%eax
f0112058:	3d 00 02 00 00       	cmp    $0x200,%eax
f011205d:	74 17                	je     f0112076 <test_kfree_bestfit+0x28f>
f011205f:	83 ec 04             	sub    $0x4,%esp
f0112062:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112067:	68 5e 04 00 00       	push   $0x45e
f011206c:	68 76 b5 11 f0       	push   $0xf011b576
f0112071:	e8 00 e1 fe ff       	call   f0100176 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0112076:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f011207d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112080:	e8 59 89 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112085:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112088:	e8 14 9e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011208d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0112090:	83 ec 0c             	sub    $0xc,%esp
f0112093:	68 00 08 00 00       	push   $0x800
f0112098:	e8 d3 a2 ff ff       	call   f010c370 <kmalloc>
f011209d:	83 c4 10             	add    $0x10,%esp
f01120a0:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01120a6:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01120ac:	89 c1                	mov    %eax,%ecx
f01120ae:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01120b5:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01120ba:	0f b6 d0             	movzbl %al,%edx
f01120bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01120c0:	01 d0                	add    %edx,%eax
f01120c2:	48                   	dec    %eax
f01120c3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01120c6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01120c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01120ce:	f7 75 a8             	divl   -0x58(%ebp)
f01120d1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01120d4:	29 d0                	sub    %edx,%eax
f01120d6:	89 c3                	mov    %eax,%ebx
f01120d8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01120df:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01120e4:	0f b6 c0             	movzbl %al,%eax
f01120e7:	c1 e0 04             	shl    $0x4,%eax
f01120ea:	89 c2                	mov    %eax,%edx
f01120ec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01120ef:	01 d0                	add    %edx,%eax
f01120f1:	48                   	dec    %eax
f01120f2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01120f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01120f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01120fd:	f7 75 a0             	divl   -0x60(%ebp)
f0112100:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112103:	29 d0                	sub    %edx,%eax
f0112105:	01 d8                	add    %ebx,%eax
f0112107:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f011210c:	39 c1                	cmp    %eax,%ecx
f011210e:	74 17                	je     f0112127 <test_kfree_bestfit+0x340>
f0112110:	83 ec 04             	sub    $0x4,%esp
f0112113:	68 54 b6 11 f0       	push   $0xf011b654
f0112118:	68 65 04 00 00       	push   $0x465
f011211d:	68 76 b5 11 f0       	push   $0xf011b576
f0112122:	e8 4f e0 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112127:	e8 75 9d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011212c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011212f:	74 17                	je     f0112148 <test_kfree_bestfit+0x361>
f0112131:	83 ec 04             	sub    $0x4,%esp
f0112134:	68 88 b5 11 f0       	push   $0xf011b588
f0112139:	68 66 04 00 00       	push   $0x466
f011213e:	68 76 b5 11 f0       	push   $0xf011b576
f0112143:	e8 2e e0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112148:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011214b:	e8 8e 88 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112150:	29 c3                	sub    %eax,%ebx
f0112152:	89 d8                	mov    %ebx,%eax
f0112154:	83 f8 01             	cmp    $0x1,%eax
f0112157:	74 17                	je     f0112170 <test_kfree_bestfit+0x389>
f0112159:	83 ec 04             	sub    $0x4,%esp
f011215c:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112161:	68 67 04 00 00       	push   $0x467
f0112166:	68 76 b5 11 f0       	push   $0xf011b576
f011216b:	e8 06 e0 fe ff       	call   f0100176 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0112170:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0112177:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011217a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112180:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0112183:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011218a:	eb 0e                	jmp    f011219a <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f011218c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011218f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112192:	01 d0                	add    %edx,%eax
f0112194:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0112197:	ff 45 f4             	incl   -0xc(%ebp)
f011219a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01121a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01121a3:	7f e7                	jg     f011218c <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01121a5:	e8 34 88 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01121aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01121ad:	e8 ef 9c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01121b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01121b5:	83 ec 0c             	sub    $0xc,%esp
f01121b8:	68 00 08 00 00       	push   $0x800
f01121bd:	e8 ae a1 ff ff       	call   f010c370 <kmalloc>
f01121c2:	83 c4 10             	add    $0x10,%esp
f01121c5:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01121cb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01121d1:	89 c1                	mov    %eax,%ecx
f01121d3:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01121da:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01121df:	0f b6 d0             	movzbl %al,%edx
f01121e2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01121e5:	01 d0                	add    %edx,%eax
f01121e7:	48                   	dec    %eax
f01121e8:	89 45 90             	mov    %eax,-0x70(%ebp)
f01121eb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01121f3:	f7 75 94             	divl   -0x6c(%ebp)
f01121f6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121f9:	29 d0                	sub    %edx,%eax
f01121fb:	89 c3                	mov    %eax,%ebx
f01121fd:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0112204:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112209:	0f b6 c0             	movzbl %al,%eax
f011220c:	c1 e0 04             	shl    $0x4,%eax
f011220f:	89 c2                	mov    %eax,%edx
f0112211:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112214:	01 d0                	add    %edx,%eax
f0112216:	48                   	dec    %eax
f0112217:	89 45 88             	mov    %eax,-0x78(%ebp)
f011221a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011221d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112222:	f7 75 8c             	divl   -0x74(%ebp)
f0112225:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112228:	29 d0                	sub    %edx,%eax
f011222a:	01 d8                	add    %ebx,%eax
f011222c:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0112231:	39 c1                	cmp    %eax,%ecx
f0112233:	74 17                	je     f011224c <test_kfree_bestfit+0x465>
f0112235:	83 ec 04             	sub    $0x4,%esp
f0112238:	68 54 b6 11 f0       	push   $0xf011b654
f011223d:	68 73 04 00 00       	push   $0x473
f0112242:	68 76 b5 11 f0       	push   $0xf011b576
f0112247:	e8 2a df fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011224c:	e8 50 9c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112251:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112254:	74 17                	je     f011226d <test_kfree_bestfit+0x486>
f0112256:	83 ec 04             	sub    $0x4,%esp
f0112259:	68 88 b5 11 f0       	push   $0xf011b588
f011225e:	68 74 04 00 00       	push   $0x474
f0112263:	68 76 b5 11 f0       	push   $0xf011b576
f0112268:	e8 09 df fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011226d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0112270:	e8 69 87 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112275:	29 c3                	sub    %eax,%ebx
f0112277:	89 d8                	mov    %ebx,%eax
f0112279:	83 f8 01             	cmp    $0x1,%eax
f011227c:	74 17                	je     f0112295 <test_kfree_bestfit+0x4ae>
f011227e:	83 ec 04             	sub    $0x4,%esp
f0112281:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112286:	68 75 04 00 00       	push   $0x475
f011228b:	68 76 b5 11 f0       	push   $0xf011b576
f0112290:	e8 e1 de fe ff       	call   f0100176 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0112295:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f011229c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011229f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01122a5:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01122a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01122af:	eb 0e                	jmp    f01122bf <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f01122b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01122b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01122b7:	01 d0                	add    %edx,%eax
f01122b9:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01122bc:	ff 45 f4             	incl   -0xc(%ebp)
f01122bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01122c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01122c8:	7f e7                	jg     f01122b1 <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01122ca:	e8 0f 87 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01122cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01122d2:	e8 ca 9b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01122d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01122da:	83 ec 0c             	sub    $0xc,%esp
f01122dd:	68 00 1c 00 00       	push   $0x1c00
f01122e2:	e8 89 a0 ff ff       	call   f010c370 <kmalloc>
f01122e7:	83 c4 10             	add    $0x10,%esp
f01122ea:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01122f0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01122f6:	89 c1                	mov    %eax,%ecx
f01122f8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01122ff:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112304:	0f b6 d0             	movzbl %al,%edx
f0112307:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011230a:	01 d0                	add    %edx,%eax
f011230c:	48                   	dec    %eax
f011230d:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112310:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112313:	ba 00 00 00 00       	mov    $0x0,%edx
f0112318:	f7 75 84             	divl   -0x7c(%ebp)
f011231b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011231e:	29 d0                	sub    %edx,%eax
f0112320:	89 c3                	mov    %eax,%ebx
f0112322:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0112329:	10 00 00 
f011232c:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112331:	0f b6 c0             	movzbl %al,%eax
f0112334:	c1 e0 04             	shl    $0x4,%eax
f0112337:	89 c2                	mov    %eax,%edx
f0112339:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011233f:	01 d0                	add    %edx,%eax
f0112341:	48                   	dec    %eax
f0112342:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112348:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011234e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112353:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112359:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011235f:	29 d0                	sub    %edx,%eax
f0112361:	01 d8                	add    %ebx,%eax
f0112363:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0112368:	39 c1                	cmp    %eax,%ecx
f011236a:	74 17                	je     f0112383 <test_kfree_bestfit+0x59c>
f011236c:	83 ec 04             	sub    $0x4,%esp
f011236f:	68 54 b6 11 f0       	push   $0xf011b654
f0112374:	68 81 04 00 00       	push   $0x481
f0112379:	68 76 b5 11 f0       	push   $0xf011b576
f011237e:	e8 f3 dd fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112383:	e8 19 9b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112388:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011238b:	74 17                	je     f01123a4 <test_kfree_bestfit+0x5bd>
f011238d:	83 ec 04             	sub    $0x4,%esp
f0112390:	68 88 b5 11 f0       	push   $0xf011b588
f0112395:	68 82 04 00 00       	push   $0x482
f011239a:	68 76 b5 11 f0       	push   $0xf011b576
f011239f:	e8 d2 dd fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01123a4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01123a7:	e8 32 86 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01123ac:	29 c3                	sub    %eax,%ebx
f01123ae:	89 d8                	mov    %ebx,%eax
f01123b0:	83 f8 02             	cmp    $0x2,%eax
f01123b3:	74 17                	je     f01123cc <test_kfree_bestfit+0x5e5>
f01123b5:	83 ec 04             	sub    $0x4,%esp
f01123b8:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01123bd:	68 83 04 00 00       	push   $0x483
f01123c2:	68 76 b5 11 f0       	push   $0xf011b576
f01123c7:	e8 aa dd fe ff       	call   f0100176 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01123cc:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f01123d3:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01123d6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01123dc:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01123df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01123e6:	eb 0e                	jmp    f01123f6 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f01123e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01123eb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01123ee:	01 d0                	add    %edx,%eax
f01123f0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01123f3:	ff 45 f4             	incl   -0xc(%ebp)
f01123f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01123fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01123ff:	7f e7                	jg     f01123e8 <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112401:	e8 d8 85 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112406:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112409:	e8 93 9a ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011240e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0112411:	83 ec 0c             	sub    $0xc,%esp
f0112414:	68 00 fc 2f 00       	push   $0x2ffc00
f0112419:	e8 52 9f ff ff       	call   f010c370 <kmalloc>
f011241e:	83 c4 10             	add    $0x10,%esp
f0112421:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112427:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011242d:	89 c1                	mov    %eax,%ecx
f011242f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0112436:	10 00 00 
f0112439:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011243e:	0f b6 d0             	movzbl %al,%edx
f0112441:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112447:	01 d0                	add    %edx,%eax
f0112449:	48                   	dec    %eax
f011244a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0112450:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112456:	ba 00 00 00 00       	mov    $0x0,%edx
f011245b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0112461:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112467:	29 d0                	sub    %edx,%eax
f0112469:	89 c3                	mov    %eax,%ebx
f011246b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0112472:	10 00 00 
f0112475:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011247a:	0f b6 c0             	movzbl %al,%eax
f011247d:	c1 e0 04             	shl    $0x4,%eax
f0112480:	89 c2                	mov    %eax,%edx
f0112482:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112488:	01 d0                	add    %edx,%eax
f011248a:	48                   	dec    %eax
f011248b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0112491:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112497:	ba 00 00 00 00       	mov    $0x0,%edx
f011249c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01124a2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01124a8:	29 d0                	sub    %edx,%eax
f01124aa:	01 d8                	add    %ebx,%eax
f01124ac:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01124b1:	39 c1                	cmp    %eax,%ecx
f01124b3:	74 17                	je     f01124cc <test_kfree_bestfit+0x6e5>
f01124b5:	83 ec 04             	sub    $0x4,%esp
f01124b8:	68 54 b6 11 f0       	push   $0xf011b654
f01124bd:	68 8f 04 00 00       	push   $0x48f
f01124c2:	68 76 b5 11 f0       	push   $0xf011b576
f01124c7:	e8 aa dc fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01124cc:	e8 d0 99 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01124d1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01124d4:	74 17                	je     f01124ed <test_kfree_bestfit+0x706>
f01124d6:	83 ec 04             	sub    $0x4,%esp
f01124d9:	68 88 b5 11 f0       	push   $0xf011b588
f01124de:	68 90 04 00 00       	push   $0x490
f01124e3:	68 76 b5 11 f0       	push   $0xf011b576
f01124e8:	e8 89 dc fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01124ed:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01124f0:	e8 e9 84 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01124f5:	29 c3                	sub    %eax,%ebx
f01124f7:	89 d8                	mov    %ebx,%eax
f01124f9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01124fe:	74 17                	je     f0112517 <test_kfree_bestfit+0x730>
f0112500:	83 ec 04             	sub    $0x4,%esp
f0112503:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112508:	68 91 04 00 00       	push   $0x491
f011250d:	68 76 b5 11 f0       	push   $0xf011b576
f0112512:	e8 5f dc fe ff       	call   f0100176 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0112517:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f011251e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0112521:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112527:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011252a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112531:	eb 0e                	jmp    f0112541 <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f0112533:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112536:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112539:	01 d0                	add    %edx,%eax
f011253b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011253e:	ff 45 f4             	incl   -0xc(%ebp)
f0112541:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112547:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011254a:	7f e7                	jg     f0112533 <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011254c:	e8 8d 84 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112551:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112554:	e8 48 99 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112559:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011255c:	83 ec 0c             	sub    $0xc,%esp
f011255f:	68 00 fc 5f 00       	push   $0x5ffc00
f0112564:	e8 07 9e ff ff       	call   f010c370 <kmalloc>
f0112569:	83 c4 10             	add    $0x10,%esp
f011256c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112572:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0112578:	89 c1                	mov    %eax,%ecx
f011257a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0112581:	10 00 00 
f0112584:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112589:	0f b6 d0             	movzbl %al,%edx
f011258c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0112592:	01 d0                	add    %edx,%eax
f0112594:	48                   	dec    %eax
f0112595:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011259b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01125a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01125a6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01125ac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01125b2:	29 d0                	sub    %edx,%eax
f01125b4:	89 c3                	mov    %eax,%ebx
f01125b6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01125bd:	10 00 00 
f01125c0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01125c5:	0f b6 c0             	movzbl %al,%eax
f01125c8:	c1 e0 04             	shl    $0x4,%eax
f01125cb:	89 c2                	mov    %eax,%edx
f01125cd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01125d3:	01 d0                	add    %edx,%eax
f01125d5:	48                   	dec    %eax
f01125d6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01125dc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01125e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01125e7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01125ed:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01125f3:	29 d0                	sub    %edx,%eax
f01125f5:	01 d8                	add    %ebx,%eax
f01125f7:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f01125fc:	39 c1                	cmp    %eax,%ecx
f01125fe:	74 17                	je     f0112617 <test_kfree_bestfit+0x830>
f0112600:	83 ec 04             	sub    $0x4,%esp
f0112603:	68 54 b6 11 f0       	push   $0xf011b654
f0112608:	68 9d 04 00 00       	push   $0x49d
f011260d:	68 76 b5 11 f0       	push   $0xf011b576
f0112612:	e8 5f db fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112617:	e8 85 98 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011261c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011261f:	74 17                	je     f0112638 <test_kfree_bestfit+0x851>
f0112621:	83 ec 04             	sub    $0x4,%esp
f0112624:	68 88 b5 11 f0       	push   $0xf011b588
f0112629:	68 9e 04 00 00       	push   $0x49e
f011262e:	68 76 b5 11 f0       	push   $0xf011b576
f0112633:	e8 3e db fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112638:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011263b:	e8 9e 83 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112640:	29 c3                	sub    %eax,%ebx
f0112642:	89 d8                	mov    %ebx,%eax
f0112644:	3d 00 06 00 00       	cmp    $0x600,%eax
f0112649:	74 17                	je     f0112662 <test_kfree_bestfit+0x87b>
f011264b:	83 ec 04             	sub    $0x4,%esp
f011264e:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112653:	68 9f 04 00 00       	push   $0x49f
f0112658:	68 76 b5 11 f0       	push   $0xf011b576
f011265d:	e8 14 db fe ff       	call   f0100176 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0112662:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0112669:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011266c:	e8 6d 83 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112671:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112674:	e8 28 98 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112679:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011267c:	83 ec 0c             	sub    $0xc,%esp
f011267f:	68 00 38 00 00       	push   $0x3800
f0112684:	e8 e7 9c ff ff       	call   f010c370 <kmalloc>
f0112689:	83 c4 10             	add    $0x10,%esp
f011268c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112692:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112698:	89 c1                	mov    %eax,%ecx
f011269a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01126a1:	10 00 00 
f01126a4:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01126a9:	0f b6 d0             	movzbl %al,%edx
f01126ac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01126b2:	01 d0                	add    %edx,%eax
f01126b4:	48                   	dec    %eax
f01126b5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01126bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01126c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01126c6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01126cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01126d2:	29 d0                	sub    %edx,%eax
f01126d4:	89 c3                	mov    %eax,%ebx
f01126d6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01126dd:	10 00 00 
f01126e0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01126e5:	0f b6 c0             	movzbl %al,%eax
f01126e8:	c1 e0 04             	shl    $0x4,%eax
f01126eb:	89 c2                	mov    %eax,%edx
f01126ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01126f3:	01 d0                	add    %edx,%eax
f01126f5:	48                   	dec    %eax
f01126f6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01126fc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112702:	ba 00 00 00 00       	mov    $0x0,%edx
f0112707:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011270d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112713:	29 d0                	sub    %edx,%eax
f0112715:	01 d8                	add    %ebx,%eax
f0112717:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011271c:	39 c1                	cmp    %eax,%ecx
f011271e:	74 17                	je     f0112737 <test_kfree_bestfit+0x950>
f0112720:	83 ec 04             	sub    $0x4,%esp
f0112723:	68 54 b6 11 f0       	push   $0xf011b654
f0112728:	68 a6 04 00 00       	push   $0x4a6
f011272d:	68 76 b5 11 f0       	push   $0xf011b576
f0112732:	e8 3f da fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112737:	e8 65 97 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011273c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011273f:	74 17                	je     f0112758 <test_kfree_bestfit+0x971>
f0112741:	83 ec 04             	sub    $0x4,%esp
f0112744:	68 88 b5 11 f0       	push   $0xf011b588
f0112749:	68 a7 04 00 00       	push   $0x4a7
f011274e:	68 76 b5 11 f0       	push   $0xf011b576
f0112753:	e8 1e da fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112758:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011275b:	e8 7e 82 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112760:	29 c3                	sub    %eax,%ebx
f0112762:	89 d8                	mov    %ebx,%eax
f0112764:	83 f8 04             	cmp    $0x4,%eax
f0112767:	74 17                	je     f0112780 <test_kfree_bestfit+0x999>
f0112769:	83 ec 04             	sub    $0x4,%esp
f011276c:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112771:	68 a8 04 00 00       	push   $0x4a8
f0112776:	68 76 b5 11 f0       	push   $0xf011b576
f011277b:	e8 f6 d9 fe ff       	call   f0100176 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0112780:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0112787:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011278a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112790:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0112793:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011279a:	eb 0e                	jmp    f01127aa <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f011279c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011279f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01127a2:	01 d0                	add    %edx,%eax
f01127a4:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01127a7:	ff 45 f4             	incl   -0xc(%ebp)
f01127aa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01127b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01127b3:	7f e7                	jg     f011279c <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01127b5:	e8 24 82 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01127ba:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01127c0:	e8 dc 96 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01127c5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f01127cb:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01127d1:	83 ec 0c             	sub    $0xc,%esp
f01127d4:	50                   	push   %eax
f01127d5:	e8 fc 9b ff ff       	call   f010c3d6 <kfree>
f01127da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01127dd:	e8 bf 96 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01127e2:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01127e8:	74 17                	je     f0112801 <test_kfree_bestfit+0xa1a>
f01127ea:	83 ec 04             	sub    $0x4,%esp
f01127ed:	68 88 b5 11 f0       	push   $0xf011b588
f01127f2:	68 b7 04 00 00       	push   $0x4b7
f01127f7:	68 76 b5 11 f0       	push   $0xf011b576
f01127fc:	e8 75 d9 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0112801:	e8 d8 81 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112806:	89 c2                	mov    %eax,%edx
f0112808:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011280e:	29 c2                	sub    %eax,%edx
f0112810:	89 d0                	mov    %edx,%eax
f0112812:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112817:	74 17                	je     f0112830 <test_kfree_bestfit+0xa49>
f0112819:	83 ec 04             	sub    $0x4,%esp
f011281c:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112821:	68 b8 04 00 00       	push   $0x4b8
f0112826:	68 76 b5 11 f0       	push   $0xf011b576
f011282b:	e8 46 d9 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112830:	e8 a9 81 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112835:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011283b:	e8 61 96 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112840:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0112846:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011284c:	83 ec 0c             	sub    $0xc,%esp
f011284f:	50                   	push   %eax
f0112850:	e8 81 9b ff ff       	call   f010c3d6 <kfree>
f0112855:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112858:	e8 44 96 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011285d:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0112863:	74 17                	je     f011287c <test_kfree_bestfit+0xa95>
f0112865:	83 ec 04             	sub    $0x4,%esp
f0112868:	68 88 b5 11 f0       	push   $0xf011b588
f011286d:	68 be 04 00 00       	push   $0x4be
f0112872:	68 76 b5 11 f0       	push   $0xf011b576
f0112877:	e8 fa d8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011287c:	e8 5d 81 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112881:	89 c2                	mov    %eax,%edx
f0112883:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0112889:	29 c2                	sub    %eax,%edx
f011288b:	89 d0                	mov    %edx,%eax
f011288d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112892:	74 17                	je     f01128ab <test_kfree_bestfit+0xac4>
f0112894:	83 ec 04             	sub    $0x4,%esp
f0112897:	68 5c bb 11 f0       	push   $0xf011bb5c
f011289c:	68 bf 04 00 00       	push   $0x4bf
f01128a1:	68 76 b5 11 f0       	push   $0xf011b576
f01128a6:	e8 cb d8 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01128ab:	e8 2e 81 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01128b0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01128b6:	e8 e6 95 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01128bb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01128c1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01128c7:	83 ec 0c             	sub    $0xc,%esp
f01128ca:	50                   	push   %eax
f01128cb:	e8 06 9b ff ff       	call   f010c3d6 <kfree>
f01128d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01128d3:	e8 c9 95 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01128d8:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01128de:	74 17                	je     f01128f7 <test_kfree_bestfit+0xb10>
f01128e0:	83 ec 04             	sub    $0x4,%esp
f01128e3:	68 88 b5 11 f0       	push   $0xf011b588
f01128e8:	68 c5 04 00 00       	push   $0x4c5
f01128ed:	68 76 b5 11 f0       	push   $0xf011b576
f01128f2:	e8 7f d8 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01128f7:	e8 e2 80 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01128fc:	89 c2                	mov    %eax,%edx
f01128fe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0112904:	29 c2                	sub    %eax,%edx
f0112906:	89 d0                	mov    %edx,%eax
f0112908:	3d 00 06 00 00       	cmp    $0x600,%eax
f011290d:	74 17                	je     f0112926 <test_kfree_bestfit+0xb3f>
f011290f:	83 ec 04             	sub    $0x4,%esp
f0112912:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112917:	68 c6 04 00 00       	push   $0x4c6
f011291c:	68 76 b5 11 f0       	push   $0xf011b576
f0112921:	e8 50 d8 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0112926:	83 ec 0c             	sub    $0xc,%esp
f0112929:	68 94 bb 11 f0       	push   $0xf011bb94
f011292e:	e8 9c 44 ff ff       	call   f0106dcf <cprintf>
f0112933:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0112936:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011293c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011293f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112946:	eb 1e                	jmp    f0112966 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0112948:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f011294e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112951:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112954:	01 c8                	add    %ecx,%eax
f0112956:	8a 00                	mov    (%eax),%al
f0112958:	0f be c0             	movsbl %al,%eax
f011295b:	01 d0                	add    %edx,%eax
f011295d:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0112963:	ff 45 f4             	incl   -0xc(%ebp)
f0112966:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011296c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011296f:	7f d7                	jg     f0112948 <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0112971:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0112977:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011297d:	01 c0                	add    %eax,%eax
f011297f:	39 c2                	cmp    %eax,%edx
f0112981:	74 17                	je     f011299a <test_kfree_bestfit+0xbb3>
f0112983:	83 ec 04             	sub    $0x4,%esp
f0112986:	68 b8 bb 11 f0       	push   $0xf011bbb8
f011298b:	68 d3 04 00 00       	push   $0x4d3
f0112990:	68 76 b5 11 f0       	push   $0xf011b576
f0112995:	e8 dc d7 fe ff       	call   f0100176 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f011299a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01129a0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01129a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01129aa:	eb 1e                	jmp    f01129ca <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f01129ac:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01129b2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01129b5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129b8:	01 c8                	add    %ecx,%eax
f01129ba:	8a 00                	mov    (%eax),%al
f01129bc:	0f be c0             	movsbl %al,%eax
f01129bf:	01 d0                	add    %edx,%eax
f01129c1:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01129c7:	ff 45 f4             	incl   -0xc(%ebp)
f01129ca:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01129d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01129d3:	7f d7                	jg     f01129ac <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01129d5:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01129db:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01129e1:	89 c1                	mov    %eax,%ecx
f01129e3:	01 c9                	add    %ecx,%ecx
f01129e5:	01 c8                	add    %ecx,%eax
f01129e7:	39 c2                	cmp    %eax,%edx
f01129e9:	74 17                	je     f0112a02 <test_kfree_bestfit+0xc1b>
f01129eb:	83 ec 04             	sub    $0x4,%esp
f01129ee:	68 b8 bb 11 f0       	push   $0xf011bbb8
f01129f3:	68 db 04 00 00       	push   $0x4db
f01129f8:	68 76 b5 11 f0       	push   $0xf011b576
f01129fd:	e8 74 d7 fe ff       	call   f0100176 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0112a02:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112a08:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0112a0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112a12:	eb 1e                	jmp    f0112a32 <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f0112a14:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0112a1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112a1d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a20:	01 c8                	add    %ecx,%eax
f0112a22:	8a 00                	mov    (%eax),%al
f0112a24:	0f be c0             	movsbl %al,%eax
f0112a27:	01 d0                	add    %edx,%eax
f0112a29:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0112a2f:	ff 45 f4             	incl   -0xc(%ebp)
f0112a32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112a38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112a3b:	7f d7                	jg     f0112a14 <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0112a3d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0112a43:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0112a49:	c1 e2 02             	shl    $0x2,%edx
f0112a4c:	39 d0                	cmp    %edx,%eax
f0112a4e:	74 17                	je     f0112a67 <test_kfree_bestfit+0xc80>
f0112a50:	83 ec 04             	sub    $0x4,%esp
f0112a53:	68 b8 bb 11 f0       	push   $0xf011bbb8
f0112a58:	68 e3 04 00 00       	push   $0x4e3
f0112a5d:	68 76 b5 11 f0       	push   $0xf011b576
f0112a62:	e8 0f d7 fe ff       	call   f0100176 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0112a67:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112a6d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0112a70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112a77:	eb 1e                	jmp    f0112a97 <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f0112a79:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0112a7f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112a82:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a85:	01 c8                	add    %ecx,%eax
f0112a87:	8a 00                	mov    (%eax),%al
f0112a89:	0f be c0             	movsbl %al,%eax
f0112a8c:	01 d0                	add    %edx,%eax
f0112a8e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0112a94:	ff 45 f4             	incl   -0xc(%ebp)
f0112a97:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112a9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112aa0:	7f d7                	jg     f0112a79 <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0112aa2:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0112aa8:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0112aae:	89 d0                	mov    %edx,%eax
f0112ab0:	c1 e0 02             	shl    $0x2,%eax
f0112ab3:	01 d0                	add    %edx,%eax
f0112ab5:	39 c1                	cmp    %eax,%ecx
f0112ab7:	74 17                	je     f0112ad0 <test_kfree_bestfit+0xce9>
f0112ab9:	83 ec 04             	sub    $0x4,%esp
f0112abc:	68 b8 bb 11 f0       	push   $0xf011bbb8
f0112ac1:	68 eb 04 00 00       	push   $0x4eb
f0112ac6:	68 76 b5 11 f0       	push   $0xf011b576
f0112acb:	e8 a6 d6 fe ff       	call   f0100176 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0112ad0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112ad6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0112ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112ae0:	eb 1e                	jmp    f0112b00 <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f0112ae2:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0112ae8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0112aeb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112aee:	01 c8                	add    %ecx,%eax
f0112af0:	8a 00                	mov    (%eax),%al
f0112af2:	0f be c0             	movsbl %al,%eax
f0112af5:	01 d0                	add    %edx,%eax
f0112af7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0112afd:	ff 45 f4             	incl   -0xc(%ebp)
f0112b00:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0112b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112b09:	7f d7                	jg     f0112ae2 <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0112b0b:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0112b11:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0112b17:	89 d0                	mov    %edx,%eax
f0112b19:	01 c0                	add    %eax,%eax
f0112b1b:	01 d0                	add    %edx,%eax
f0112b1d:	01 c0                	add    %eax,%eax
f0112b1f:	01 d0                	add    %edx,%eax
f0112b21:	39 c1                	cmp    %eax,%ecx
f0112b23:	74 17                	je     f0112b3c <test_kfree_bestfit+0xd55>
f0112b25:	83 ec 04             	sub    $0x4,%esp
f0112b28:	68 b8 bb 11 f0       	push   $0xf011bbb8
f0112b2d:	68 f3 04 00 00       	push   $0x4f3
f0112b32:	68 76 b5 11 f0       	push   $0xf011b576
f0112b37:	e8 3a d6 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b30%");
f0112b3c:	83 ec 0c             	sub    $0xc,%esp
f0112b3f:	68 eb bb 11 f0       	push   $0xf011bbeb
f0112b44:	e8 86 42 ff ff       	call   f0106dcf <cprintf>
f0112b49:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0112b4c:	e8 8d 7e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112b51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112b54:	e8 48 93 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112b59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0112b5c:	83 ec 0c             	sub    $0xc,%esp
f0112b5f:	68 00 50 00 00       	push   $0x5000
f0112b64:	e8 07 98 ff ff       	call   f010c370 <kmalloc>
f0112b69:	83 c4 10             	add    $0x10,%esp
f0112b6c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112b72:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112b78:	89 c1                	mov    %eax,%ecx
f0112b7a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0112b81:	10 00 00 
f0112b84:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112b89:	0f b6 d0             	movzbl %al,%edx
f0112b8c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0112b92:	01 d0                	add    %edx,%eax
f0112b94:	48                   	dec    %eax
f0112b95:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0112b9b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112ba1:	ba 00 00 00 00       	mov    $0x0,%edx
f0112ba6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0112bac:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112bb2:	29 d0                	sub    %edx,%eax
f0112bb4:	89 c3                	mov    %eax,%ebx
f0112bb6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0112bbd:	10 00 00 
f0112bc0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112bc5:	0f b6 c0             	movzbl %al,%eax
f0112bc8:	c1 e0 04             	shl    $0x4,%eax
f0112bcb:	89 c2                	mov    %eax,%edx
f0112bcd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112bd3:	01 d0                	add    %edx,%eax
f0112bd5:	48                   	dec    %eax
f0112bd6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0112bdc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112be2:	ba 00 00 00 00       	mov    $0x0,%edx
f0112be7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0112bed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112bf3:	29 d0                	sub    %edx,%eax
f0112bf5:	01 d8                	add    %ebx,%eax
f0112bf7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0112bfc:	39 c1                	cmp    %eax,%ecx
f0112bfe:	74 17                	je     f0112c17 <test_kfree_bestfit+0xe30>
f0112c00:	83 ec 04             	sub    $0x4,%esp
f0112c03:	68 54 b6 11 f0       	push   $0xf011b654
f0112c08:	68 fd 04 00 00       	push   $0x4fd
f0112c0d:	68 76 b5 11 f0       	push   $0xf011b576
f0112c12:	e8 5f d5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c17:	e8 85 92 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112c1c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112c1f:	74 17                	je     f0112c38 <test_kfree_bestfit+0xe51>
f0112c21:	83 ec 04             	sub    $0x4,%esp
f0112c24:	68 88 b5 11 f0       	push   $0xf011b588
f0112c29:	68 fe 04 00 00       	push   $0x4fe
f0112c2e:	68 76 b5 11 f0       	push   $0xf011b576
f0112c33:	e8 3e d5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112c38:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0112c3b:	e8 9e 7d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112c40:	29 c3                	sub    %eax,%ebx
f0112c42:	89 d8                	mov    %ebx,%eax
f0112c44:	83 f8 05             	cmp    $0x5,%eax
f0112c47:	74 17                	je     f0112c60 <test_kfree_bestfit+0xe79>
f0112c49:	83 ec 04             	sub    $0x4,%esp
f0112c4c:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112c51:	68 ff 04 00 00       	push   $0x4ff
f0112c56:	68 76 b5 11 f0       	push   $0xf011b576
f0112c5b:	e8 16 d5 fe ff       	call   f0100176 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0112c60:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0112c67:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0112c6a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112c70:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0112c73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112c7a:	eb 0e                	jmp    f0112c8a <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f0112c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112c7f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c82:	01 d0                	add    %edx,%eax
f0112c84:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0112c87:	ff 45 f4             	incl   -0xc(%ebp)
f0112c8a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0112c90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112c93:	7f e7                	jg     f0112c7c <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112c95:	e8 44 7d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112c9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112c9d:	e8 ff 91 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112ca2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0112ca5:	83 ec 0c             	sub    $0xc,%esp
f0112ca8:	68 00 00 10 00       	push   $0x100000
f0112cad:	e8 be 96 ff ff       	call   f010c370 <kmalloc>
f0112cb2:	83 c4 10             	add    $0x10,%esp
f0112cb5:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0112cbb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112cc1:	89 c1                	mov    %eax,%ecx
f0112cc3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0112cca:	10 00 00 
f0112ccd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112cd2:	0f b6 d0             	movzbl %al,%edx
f0112cd5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0112cdb:	01 d0                	add    %edx,%eax
f0112cdd:	48                   	dec    %eax
f0112cde:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0112ce4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0112cef:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112cf5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112cfb:	29 d0                	sub    %edx,%eax
f0112cfd:	89 c3                	mov    %eax,%ebx
f0112cff:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0112d06:	10 00 00 
f0112d09:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0112d0e:	0f b6 c0             	movzbl %al,%eax
f0112d11:	c1 e0 04             	shl    $0x4,%eax
f0112d14:	89 c2                	mov    %eax,%edx
f0112d16:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0112d1c:	01 d0                	add    %edx,%eax
f0112d1e:	48                   	dec    %eax
f0112d1f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0112d25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d30:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0112d36:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112d3c:	29 d0                	sub    %edx,%eax
f0112d3e:	01 d8                	add    %ebx,%eax
f0112d40:	2d 00 b0 ff 09       	sub    $0x9ffb000,%eax
f0112d45:	39 c1                	cmp    %eax,%ecx
f0112d47:	74 17                	je     f0112d60 <test_kfree_bestfit+0xf79>
f0112d49:	83 ec 04             	sub    $0x4,%esp
f0112d4c:	68 54 b6 11 f0       	push   $0xf011b654
f0112d51:	68 0b 05 00 00       	push   $0x50b
f0112d56:	68 76 b5 11 f0       	push   $0xf011b576
f0112d5b:	e8 16 d4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112d60:	e8 3c 91 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112d65:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112d68:	74 17                	je     f0112d81 <test_kfree_bestfit+0xf9a>
f0112d6a:	83 ec 04             	sub    $0x4,%esp
f0112d6d:	68 88 b5 11 f0       	push   $0xf011b588
f0112d72:	68 0c 05 00 00       	push   $0x50c
f0112d77:	68 76 b5 11 f0       	push   $0xf011b576
f0112d7c:	e8 f5 d3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0112d81:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0112d84:	e8 55 7c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112d89:	29 c3                	sub    %eax,%ebx
f0112d8b:	89 d8                	mov    %ebx,%eax
f0112d8d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112d92:	74 17                	je     f0112dab <test_kfree_bestfit+0xfc4>
f0112d94:	83 ec 04             	sub    $0x4,%esp
f0112d97:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0112d9c:	68 0d 05 00 00       	push   $0x50d
f0112da1:	68 76 b5 11 f0       	push   $0xf011b576
f0112da6:	e8 cb d3 fe ff       	call   f0100176 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0112dab:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0112db2:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0112db5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112dbb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0112dbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112dc5:	eb 0e                	jmp    f0112dd5 <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f0112dc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112dca:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dcd:	01 d0                	add    %edx,%eax
f0112dcf:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0112dd2:	ff 45 f4             	incl   -0xc(%ebp)
f0112dd5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0112ddb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0112dde:	7f e7                	jg     f0112dc7 <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0112de0:	83 ec 0c             	sub    $0xc,%esp
f0112de3:	68 f2 bb 11 f0       	push   $0xf011bbf2
f0112de8:	e8 e2 3f ff ff       	call   f0106dcf <cprintf>
f0112ded:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0112df0:	e8 e9 7b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112df5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112df8:	e8 a4 90 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112dfd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0112e00:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112e06:	83 ec 0c             	sub    $0xc,%esp
f0112e09:	50                   	push   %eax
f0112e0a:	e8 c7 95 ff ff       	call   f010c3d6 <kfree>
f0112e0f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e12:	e8 8a 90 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112e17:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112e1a:	74 17                	je     f0112e33 <test_kfree_bestfit+0x104c>
f0112e1c:	83 ec 04             	sub    $0x4,%esp
f0112e1f:	68 88 b5 11 f0       	push   $0xf011b588
f0112e24:	68 1d 05 00 00       	push   $0x51d
f0112e29:	68 76 b5 11 f0       	push   $0xf011b576
f0112e2e:	e8 43 d3 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0112e33:	e8 a6 7b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112e38:	89 c2                	mov    %eax,%edx
f0112e3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112e3d:	29 c2                	sub    %eax,%edx
f0112e3f:	89 d0                	mov    %edx,%eax
f0112e41:	83 f8 02             	cmp    $0x2,%eax
f0112e44:	74 17                	je     f0112e5d <test_kfree_bestfit+0x1076>
f0112e46:	83 ec 04             	sub    $0x4,%esp
f0112e49:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112e4e:	68 1e 05 00 00       	push   $0x51e
f0112e53:	68 76 b5 11 f0       	push   $0xf011b576
f0112e58:	e8 19 d3 fe ff       	call   f0100176 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112e5d:	e8 7c 7b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112e62:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112e65:	e8 37 90 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112e6a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0112e6d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112e73:	83 ec 0c             	sub    $0xc,%esp
f0112e76:	50                   	push   %eax
f0112e77:	e8 5a 95 ff ff       	call   f010c3d6 <kfree>
f0112e7c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e7f:	e8 1d 90 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112e84:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112e87:	74 17                	je     f0112ea0 <test_kfree_bestfit+0x10b9>
f0112e89:	83 ec 04             	sub    $0x4,%esp
f0112e8c:	68 88 b5 11 f0       	push   $0xf011b588
f0112e91:	68 24 05 00 00       	push   $0x524
f0112e96:	68 76 b5 11 f0       	push   $0xf011b576
f0112e9b:	e8 d6 d2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0112ea0:	e8 39 7b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112ea5:	89 c2                	mov    %eax,%edx
f0112ea7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112eaa:	29 c2                	sub    %eax,%edx
f0112eac:	89 d0                	mov    %edx,%eax
f0112eae:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112eb3:	74 17                	je     f0112ecc <test_kfree_bestfit+0x10e5>
f0112eb5:	83 ec 04             	sub    $0x4,%esp
f0112eb8:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112ebd:	68 25 05 00 00       	push   $0x525
f0112ec2:	68 76 b5 11 f0       	push   $0xf011b576
f0112ec7:	e8 aa d2 fe ff       	call   f0100176 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112ecc:	e8 0d 7b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112ed1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112ed4:	e8 c8 8f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112ed9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0112edc:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112ee2:	83 ec 0c             	sub    $0xc,%esp
f0112ee5:	50                   	push   %eax
f0112ee6:	e8 eb 94 ff ff       	call   f010c3d6 <kfree>
f0112eeb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112eee:	e8 ae 8f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112ef3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112ef6:	74 17                	je     f0112f0f <test_kfree_bestfit+0x1128>
f0112ef8:	83 ec 04             	sub    $0x4,%esp
f0112efb:	68 88 b5 11 f0       	push   $0xf011b588
f0112f00:	68 2b 05 00 00       	push   $0x52b
f0112f05:	68 76 b5 11 f0       	push   $0xf011b576
f0112f0a:	e8 67 d2 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0112f0f:	e8 ca 7a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112f14:	89 c2                	mov    %eax,%edx
f0112f16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112f19:	29 c2                	sub    %eax,%edx
f0112f1b:	89 d0                	mov    %edx,%eax
f0112f1d:	83 f8 01             	cmp    $0x1,%eax
f0112f20:	74 17                	je     f0112f39 <test_kfree_bestfit+0x1152>
f0112f22:	83 ec 04             	sub    $0x4,%esp
f0112f25:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112f2a:	68 2c 05 00 00       	push   $0x52c
f0112f2f:	68 76 b5 11 f0       	push   $0xf011b576
f0112f34:	e8 3d d2 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112f39:	e8 a0 7a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112f3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112f41:	e8 5b 8f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112f46:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0112f49:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0112f4f:	83 ec 0c             	sub    $0xc,%esp
f0112f52:	50                   	push   %eax
f0112f53:	e8 7e 94 ff ff       	call   f010c3d6 <kfree>
f0112f58:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112f5b:	e8 41 8f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112f60:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112f63:	74 17                	je     f0112f7c <test_kfree_bestfit+0x1195>
f0112f65:	83 ec 04             	sub    $0x4,%esp
f0112f68:	68 88 b5 11 f0       	push   $0xf011b588
f0112f6d:	68 32 05 00 00       	push   $0x532
f0112f72:	68 76 b5 11 f0       	push   $0xf011b576
f0112f77:	e8 fa d1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0112f7c:	e8 5d 7a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112f81:	89 c2                	mov    %eax,%edx
f0112f83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112f86:	29 c2                	sub    %eax,%edx
f0112f88:	89 d0                	mov    %edx,%eax
f0112f8a:	83 f8 01             	cmp    $0x1,%eax
f0112f8d:	74 17                	je     f0112fa6 <test_kfree_bestfit+0x11bf>
f0112f8f:	83 ec 04             	sub    $0x4,%esp
f0112f92:	68 5c bb 11 f0       	push   $0xf011bb5c
f0112f97:	68 33 05 00 00       	push   $0x533
f0112f9c:	68 76 b5 11 f0       	push   $0xf011b576
f0112fa1:	e8 d0 d1 fe ff       	call   f0100176 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0112fa6:	e8 33 7a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112fab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112fae:	e8 ee 8e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112fb3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0112fb6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112fbc:	83 ec 0c             	sub    $0xc,%esp
f0112fbf:	50                   	push   %eax
f0112fc0:	e8 11 94 ff ff       	call   f010c3d6 <kfree>
f0112fc5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112fc8:	e8 d4 8e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0112fcd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112fd0:	74 17                	je     f0112fe9 <test_kfree_bestfit+0x1202>
f0112fd2:	83 ec 04             	sub    $0x4,%esp
f0112fd5:	68 88 b5 11 f0       	push   $0xf011b588
f0112fda:	68 39 05 00 00       	push   $0x539
f0112fdf:	68 76 b5 11 f0       	push   $0xf011b576
f0112fe4:	e8 8d d1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0112fe9:	e8 f0 79 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0112fee:	89 c2                	mov    %eax,%edx
f0112ff0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ff3:	29 c2                	sub    %eax,%edx
f0112ff5:	89 d0                	mov    %edx,%eax
f0112ff7:	83 f8 04             	cmp    $0x4,%eax
f0112ffa:	74 17                	je     f0113013 <test_kfree_bestfit+0x122c>
f0112ffc:	83 ec 04             	sub    $0x4,%esp
f0112fff:	68 5c bb 11 f0       	push   $0xf011bb5c
f0113004:	68 3a 05 00 00       	push   $0x53a
f0113009:	68 76 b5 11 f0       	push   $0xf011b576
f011300e:	e8 63 d1 fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0113013:	e8 c6 79 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113018:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011301b:	e8 81 8e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113020:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0113023:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0113029:	83 ec 0c             	sub    $0xc,%esp
f011302c:	50                   	push   %eax
f011302d:	e8 a4 93 ff ff       	call   f010c3d6 <kfree>
f0113032:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113035:	e8 67 8e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011303a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011303d:	74 17                	je     f0113056 <test_kfree_bestfit+0x126f>
f011303f:	83 ec 04             	sub    $0x4,%esp
f0113042:	68 88 b5 11 f0       	push   $0xf011b588
f0113047:	68 40 05 00 00       	push   $0x540
f011304c:	68 76 b5 11 f0       	push   $0xf011b576
f0113051:	e8 20 d1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0113056:	e8 83 79 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011305b:	89 c2                	mov    %eax,%edx
f011305d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113060:	29 c2                	sub    %eax,%edx
f0113062:	89 d0                	mov    %edx,%eax
f0113064:	83 f8 05             	cmp    $0x5,%eax
f0113067:	74 17                	je     f0113080 <test_kfree_bestfit+0x1299>
f0113069:	83 ec 04             	sub    $0x4,%esp
f011306c:	68 5c bb 11 f0       	push   $0xf011bb5c
f0113071:	68 41 05 00 00       	push   $0x541
f0113076:	68 76 b5 11 f0       	push   $0xf011b576
f011307b:	e8 f6 d0 fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0113080:	e8 59 79 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113085:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113088:	e8 14 8e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011308d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0113090:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0113096:	83 ec 0c             	sub    $0xc,%esp
f0113099:	50                   	push   %eax
f011309a:	e8 37 93 ff ff       	call   f010c3d6 <kfree>
f011309f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01130a2:	e8 fa 8d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01130a7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01130aa:	74 17                	je     f01130c3 <test_kfree_bestfit+0x12dc>
f01130ac:	83 ec 04             	sub    $0x4,%esp
f01130af:	68 88 b5 11 f0       	push   $0xf011b588
f01130b4:	68 47 05 00 00       	push   $0x547
f01130b9:	68 76 b5 11 f0       	push   $0xf011b576
f01130be:	e8 b3 d0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01130c3:	e8 16 79 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01130c8:	89 c2                	mov    %eax,%edx
f01130ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130cd:	29 c2                	sub    %eax,%edx
f01130cf:	89 d0                	mov    %edx,%eax
f01130d1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01130d6:	74 17                	je     f01130ef <test_kfree_bestfit+0x1308>
f01130d8:	83 ec 04             	sub    $0x4,%esp
f01130db:	68 5c bb 11 f0       	push   $0xf011bb5c
f01130e0:	68 48 05 00 00       	push   $0x548
f01130e5:	68 76 b5 11 f0       	push   $0xf011b576
f01130ea:	e8 87 d0 fe ff       	call   f0100176 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01130ef:	e8 ea 78 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01130f4:	89 c2                	mov    %eax,%edx
f01130f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01130f9:	39 c2                	cmp    %eax,%edx
f01130fb:	74 17                	je     f0113114 <test_kfree_bestfit+0x132d>
f01130fd:	83 ec 04             	sub    $0x4,%esp
f0113100:	68 fc bb 11 f0       	push   $0xf011bbfc
f0113105:	68 4a 05 00 00       	push   $0x54a
f011310a:	68 76 b5 11 f0       	push   $0xf011b576
f011310f:	e8 62 d0 fe ff       	call   f0100176 <_panic>
	}
	cprintf("\b\b\b60%");
f0113114:	83 ec 0c             	sub    $0xc,%esp
f0113117:	68 30 bc 11 f0       	push   $0xf011bc30
f011311c:	e8 ae 3c ff ff       	call   f0106dcf <cprintf>
f0113121:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0113124:	83 ec 0c             	sub    $0xc,%esp
f0113127:	6a 03                	push   $0x3
f0113129:	e8 b7 7a ff ff       	call   f010abe5 <sys_bypassPageFault>
f011312e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0113131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0113138:	e9 82 00 00 00       	jmp    f01131bf <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f011313d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113140:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0113147:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f011314a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011314d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0113150:	e8 7e 7a ff ff       	call   f010abd3 <sys_rcr2>
f0113155:	89 c2                	mov    %eax,%edx
f0113157:	8b 45 98             	mov    -0x68(%ebp),%eax
f011315a:	39 c2                	cmp    %eax,%edx
f011315c:	74 17                	je     f0113175 <test_kfree_bestfit+0x138e>
f011315e:	83 ec 04             	sub    $0x4,%esp
f0113161:	68 38 bc 11 f0       	push   $0xf011bc38
f0113166:	68 59 05 00 00       	push   $0x559
f011316b:	68 76 b5 11 f0       	push   $0xf011b576
f0113170:	e8 01 d0 fe ff       	call   f0100176 <_panic>
			ptr[lastIndices[i]] = 10;
f0113175:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113178:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011317f:	89 c2                	mov    %eax,%edx
f0113181:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113184:	01 d0                	add    %edx,%eax
f0113186:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0113189:	e8 45 7a ff ff       	call   f010abd3 <sys_rcr2>
f011318e:	89 c2                	mov    %eax,%edx
f0113190:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113193:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011319a:	89 c1                	mov    %eax,%ecx
f011319c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011319f:	01 c8                	add    %ecx,%eax
f01131a1:	39 c2                	cmp    %eax,%edx
f01131a3:	74 17                	je     f01131bc <test_kfree_bestfit+0x13d5>
f01131a5:	83 ec 04             	sub    $0x4,%esp
f01131a8:	68 38 bc 11 f0       	push   $0xf011bc38
f01131ad:	68 5b 05 00 00       	push   $0x55b
f01131b2:	68 76 b5 11 f0       	push   $0xf011b576
f01131b7:	e8 ba cf fe ff       	call   f0100176 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01131bc:	ff 45 f4             	incl   -0xc(%ebp)
f01131bf:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01131c3:	0f 8e 74 ff ff ff    	jle    f011313d <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01131c9:	83 ec 0c             	sub    $0xc,%esp
f01131cc:	6a 00                	push   $0x0
f01131ce:	e8 12 7a ff ff       	call   f010abe5 <sys_bypassPageFault>
f01131d3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01131d6:	83 ec 0c             	sub    $0xc,%esp
f01131d9:	68 7d bc 11 f0       	push   $0xf011bc7d
f01131de:	e8 ec 3b ff ff       	call   f0106dcf <cprintf>
f01131e3:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01131e6:	e8 f3 77 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01131eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01131ee:	e8 ae 8c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01131f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01131f6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01131fc:	83 ec 0c             	sub    $0xc,%esp
f01131ff:	50                   	push   %eax
f0113200:	e8 d1 91 ff ff       	call   f010c3d6 <kfree>
f0113205:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113208:	e8 94 8c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011320d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0113210:	74 17                	je     f0113229 <test_kfree_bestfit+0x1442>
f0113212:	83 ec 04             	sub    $0x4,%esp
f0113215:	68 88 b5 11 f0       	push   $0xf011b588
f011321a:	68 69 05 00 00       	push   $0x569
f011321f:	68 76 b5 11 f0       	push   $0xf011b576
f0113224:	e8 4d cf fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0113229:	e8 b0 77 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011322e:	89 c2                	mov    %eax,%edx
f0113230:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113233:	39 c2                	cmp    %eax,%edx
f0113235:	74 17                	je     f011324e <test_kfree_bestfit+0x1467>
f0113237:	83 ec 04             	sub    $0x4,%esp
f011323a:	68 84 bc 11 f0       	push   $0xf011bc84
f011323f:	68 6a 05 00 00       	push   $0x56a
f0113244:	68 76 b5 11 f0       	push   $0xf011b576
f0113249:	e8 28 cf fe ff       	call   f0100176 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011324e:	e8 8b 77 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113253:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113256:	e8 46 8c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011325b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011325e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0113264:	83 ec 0c             	sub    $0xc,%esp
f0113267:	50                   	push   %eax
f0113268:	e8 69 91 ff ff       	call   f010c3d6 <kfree>
f011326d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113270:	e8 2c 8c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113275:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0113278:	74 17                	je     f0113291 <test_kfree_bestfit+0x14aa>
f011327a:	83 ec 04             	sub    $0x4,%esp
f011327d:	68 88 b5 11 f0       	push   $0xf011b588
f0113282:	68 70 05 00 00       	push   $0x570
f0113287:	68 76 b5 11 f0       	push   $0xf011b576
f011328c:	e8 e5 ce fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0113291:	e8 48 77 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113296:	89 c2                	mov    %eax,%edx
f0113298:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011329b:	39 c2                	cmp    %eax,%edx
f011329d:	74 17                	je     f01132b6 <test_kfree_bestfit+0x14cf>
f011329f:	83 ec 04             	sub    $0x4,%esp
f01132a2:	68 84 bc 11 f0       	push   $0xf011bc84
f01132a7:	68 71 05 00 00       	push   $0x571
f01132ac:	68 76 b5 11 f0       	push   $0xf011b576
f01132b1:	e8 c0 ce fe ff       	call   f0100176 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01132b6:	e8 23 77 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01132bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01132be:	e8 de 8b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01132c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01132c6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01132cc:	83 ec 0c             	sub    $0xc,%esp
f01132cf:	50                   	push   %eax
f01132d0:	e8 01 91 ff ff       	call   f010c3d6 <kfree>
f01132d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01132d8:	e8 c4 8b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01132dd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01132e0:	74 17                	je     f01132f9 <test_kfree_bestfit+0x1512>
f01132e2:	83 ec 04             	sub    $0x4,%esp
f01132e5:	68 88 b5 11 f0       	push   $0xf011b588
f01132ea:	68 77 05 00 00       	push   $0x577
f01132ef:	68 76 b5 11 f0       	push   $0xf011b576
f01132f4:	e8 7d ce fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01132f9:	e8 e0 76 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01132fe:	89 c2                	mov    %eax,%edx
f0113300:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113303:	39 c2                	cmp    %eax,%edx
f0113305:	74 17                	je     f011331e <test_kfree_bestfit+0x1537>
f0113307:	83 ec 04             	sub    $0x4,%esp
f011330a:	68 84 bc 11 f0       	push   $0xf011bc84
f011330f:	68 78 05 00 00       	push   $0x578
f0113314:	68 76 b5 11 f0       	push   $0xf011b576
f0113319:	e8 58 ce fe ff       	call   f0100176 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011331e:	e8 bb 76 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113323:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113326:	e8 76 8b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011332b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011332e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0113334:	83 ec 0c             	sub    $0xc,%esp
f0113337:	50                   	push   %eax
f0113338:	e8 99 90 ff ff       	call   f010c3d6 <kfree>
f011333d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113340:	e8 5c 8b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113345:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0113348:	74 17                	je     f0113361 <test_kfree_bestfit+0x157a>
f011334a:	83 ec 04             	sub    $0x4,%esp
f011334d:	68 88 b5 11 f0       	push   $0xf011b588
f0113352:	68 7e 05 00 00       	push   $0x57e
f0113357:	68 76 b5 11 f0       	push   $0xf011b576
f011335c:	e8 15 ce fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0113361:	e8 78 76 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113366:	89 c2                	mov    %eax,%edx
f0113368:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011336b:	39 c2                	cmp    %eax,%edx
f011336d:	74 17                	je     f0113386 <test_kfree_bestfit+0x159f>
f011336f:	83 ec 04             	sub    $0x4,%esp
f0113372:	68 84 bc 11 f0       	push   $0xf011bc84
f0113377:	68 7f 05 00 00       	push   $0x57f
f011337c:	68 76 b5 11 f0       	push   $0xf011b576
f0113381:	e8 f0 cd fe ff       	call   f0100176 <_panic>

	}
	cprintf("\b\b\b85%");
f0113386:	83 ec 0c             	sub    $0xc,%esp
f0113389:	68 cb bc 11 f0       	push   $0xf011bccb
f011338e:	e8 3c 3a ff ff       	call   f0106dcf <cprintf>
f0113393:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0113396:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011339d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01133a4:	eb 4a                	jmp    f01133f0 <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f01133a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01133a9:	89 c1                	mov    %eax,%ecx
f01133ab:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f01133b0:	83 ec 04             	sub    $0x4,%esp
f01133b3:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f01133b9:	52                   	push   %edx
f01133ba:	51                   	push   %ecx
f01133bb:	50                   	push   %eax
f01133bc:	e8 54 07 ff ff       	call   f0103b15 <get_page_table>
f01133c1:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01133c4:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01133ca:	85 c0                	test   %eax,%eax
f01133cc:	75 17                	jne    f01133e5 <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01133ce:	83 ec 04             	sub    $0x4,%esp
f01133d1:	68 d4 bc 11 f0       	push   $0xf011bcd4
f01133d6:	68 8d 05 00 00       	push   $0x58d
f01133db:	68 76 b5 11 f0       	push   $0xf011b576
f01133e0:	e8 91 cd fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01133e5:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01133ec:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01133f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01133f4:	78 b0                	js     f01133a6 <test_kfree_bestfit+0x15bf>
f01133f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01133fa:	7f 09                	jg     f0113405 <test_kfree_bestfit+0x161e>
f01133fc:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0113403:	76 a1                	jbe    f01133a6 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0113405:	83 ec 0c             	sub    $0xc,%esp
f0113408:	68 52 b7 11 f0       	push   $0xf011b752
f011340d:	e8 bd 39 ff ff       	call   f0106dcf <cprintf>
f0113412:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0113415:	83 ec 0c             	sub    $0xc,%esp
f0113418:	68 3c bd 11 f0       	push   $0xf011bd3c
f011341d:	e8 ad 39 ff ff       	call   f0106dcf <cprintf>
f0113422:	83 c4 10             	add    $0x10,%esp

	return 1;
f0113425:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011342a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011342d:	5b                   	pop    %ebx
f011342e:	5f                   	pop    %edi
f011342f:	5d                   	pop    %ebp
f0113430:	c3                   	ret    

f0113431 <test_kheap_phys_addr>:


int test_kheap_phys_addr()
{
f0113431:	55                   	push   %ebp
f0113432:	89 e5                	mov    %esp,%ebp
f0113434:	57                   	push   %edi
f0113435:	56                   	push   %esi
f0113436:	53                   	push   %ebx
f0113437:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f011343d:	83 ec 0c             	sub    $0xc,%esp
f0113440:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0113445:	e8 85 39 ff ff       	call   f0106dcf <cprintf>
f011344a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011344d:	83 ec 0c             	sub    $0xc,%esp
f0113450:	68 e8 b4 11 f0       	push   $0xf011b4e8
f0113455:	e8 75 39 ff ff       	call   f0106dcf <cprintf>
f011345a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011345d:	83 ec 0c             	sub    $0xc,%esp
f0113460:	68 b8 b4 11 f0       	push   $0xf011b4b8
f0113465:	e8 65 39 ff ff       	call   f0106dcf <cprintf>
f011346a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011346d:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0113471:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0113475:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011347b:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0113481:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0113488:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011348f:	e8 4a 75 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113494:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0113497:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f011349d:	b9 14 00 00 00       	mov    $0x14,%ecx
f01134a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01134a7:	89 d7                	mov    %edx,%edi
f01134a9:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01134ab:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f01134b1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01134b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01134bb:	89 d7                	mov    %edx,%edi
f01134bd:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01134bf:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f01134c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01134ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01134cf:	89 d7                	mov    %edx,%edi
f01134d1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01134d3:	e8 06 75 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01134d8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01134db:	e8 c1 89 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01134e0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01134e3:	83 ec 0c             	sub    $0xc,%esp
f01134e6:	68 00 fc 1f 00       	push   $0x1ffc00
f01134eb:	e8 80 8e ff ff       	call   f010c370 <kmalloc>
f01134f0:	83 c4 10             	add    $0x10,%esp
f01134f3:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01134f9:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01134ff:	89 c1                	mov    %eax,%ecx
f0113501:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0113508:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011350d:	0f b6 d0             	movzbl %al,%edx
f0113510:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113513:	01 d0                	add    %edx,%eax
f0113515:	48                   	dec    %eax
f0113516:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0113519:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011351c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113521:	f7 75 a0             	divl   -0x60(%ebp)
f0113524:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113527:	29 d0                	sub    %edx,%eax
f0113529:	89 c3                	mov    %eax,%ebx
f011352b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0113532:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113537:	0f b6 c0             	movzbl %al,%eax
f011353a:	c1 e0 04             	shl    $0x4,%eax
f011353d:	89 c2                	mov    %eax,%edx
f011353f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113542:	01 d0                	add    %edx,%eax
f0113544:	48                   	dec    %eax
f0113545:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0113548:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011354b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113550:	f7 75 98             	divl   -0x68(%ebp)
f0113553:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113556:	29 d0                	sub    %edx,%eax
f0113558:	01 d8                	add    %ebx,%eax
f011355a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011355f:	39 c1                	cmp    %eax,%ecx
f0113561:	74 17                	je     f011357a <test_kheap_phys_addr+0x149>
f0113563:	83 ec 04             	sub    $0x4,%esp
f0113566:	68 54 b6 11 f0       	push   $0xf011b654
f011356b:	68 bb 05 00 00       	push   $0x5bb
f0113570:	68 76 b5 11 f0       	push   $0xf011b576
f0113575:	e8 fc cb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011357a:	e8 22 89 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011357f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113582:	74 17                	je     f011359b <test_kheap_phys_addr+0x16a>
f0113584:	83 ec 04             	sub    $0x4,%esp
f0113587:	68 88 b5 11 f0       	push   $0xf011b588
f011358c:	68 bc 05 00 00       	push   $0x5bc
f0113591:	68 76 b5 11 f0       	push   $0xf011b576
f0113596:	e8 db cb fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011359b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011359e:	e8 3b 74 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01135a3:	29 c3                	sub    %eax,%ebx
f01135a5:	89 d8                	mov    %ebx,%eax
f01135a7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01135ac:	74 17                	je     f01135c5 <test_kheap_phys_addr+0x194>
f01135ae:	83 ec 04             	sub    $0x4,%esp
f01135b1:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01135b6:	68 bd 05 00 00       	push   $0x5bd
f01135bb:	68 76 b5 11 f0       	push   $0xf011b576
f01135c0:	e8 b1 cb fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01135c5:	e8 14 74 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01135ca:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01135cd:	e8 cf 88 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01135d2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01135d5:	83 ec 0c             	sub    $0xc,%esp
f01135d8:	68 00 fc 1f 00       	push   $0x1ffc00
f01135dd:	e8 8e 8d ff ff       	call   f010c370 <kmalloc>
f01135e2:	83 c4 10             	add    $0x10,%esp
f01135e5:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01135eb:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01135f1:	89 c1                	mov    %eax,%ecx
f01135f3:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01135fa:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01135ff:	0f b6 d0             	movzbl %al,%edx
f0113602:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113605:	01 d0                	add    %edx,%eax
f0113607:	48                   	dec    %eax
f0113608:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011360b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011360e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113613:	f7 75 90             	divl   -0x70(%ebp)
f0113616:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113619:	29 d0                	sub    %edx,%eax
f011361b:	89 c3                	mov    %eax,%ebx
f011361d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0113624:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113629:	0f b6 c0             	movzbl %al,%eax
f011362c:	c1 e0 04             	shl    $0x4,%eax
f011362f:	89 c2                	mov    %eax,%edx
f0113631:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113634:	01 d0                	add    %edx,%eax
f0113636:	48                   	dec    %eax
f0113637:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011363a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011363d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113642:	f7 75 88             	divl   -0x78(%ebp)
f0113645:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113648:	29 d0                	sub    %edx,%eax
f011364a:	01 d8                	add    %ebx,%eax
f011364c:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0113651:	39 c1                	cmp    %eax,%ecx
f0113653:	74 17                	je     f011366c <test_kheap_phys_addr+0x23b>
f0113655:	83 ec 04             	sub    $0x4,%esp
f0113658:	68 54 b6 11 f0       	push   $0xf011b654
f011365d:	68 c3 05 00 00       	push   $0x5c3
f0113662:	68 76 b5 11 f0       	push   $0xf011b576
f0113667:	e8 0a cb fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011366c:	e8 30 88 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113671:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113674:	74 17                	je     f011368d <test_kheap_phys_addr+0x25c>
f0113676:	83 ec 04             	sub    $0x4,%esp
f0113679:	68 88 b5 11 f0       	push   $0xf011b588
f011367e:	68 c4 05 00 00       	push   $0x5c4
f0113683:	68 76 b5 11 f0       	push   $0xf011b576
f0113688:	e8 e9 ca fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011368d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113690:	e8 49 73 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113695:	29 c3                	sub    %eax,%ebx
f0113697:	89 d8                	mov    %ebx,%eax
f0113699:	3d 00 02 00 00       	cmp    $0x200,%eax
f011369e:	74 17                	je     f01136b7 <test_kheap_phys_addr+0x286>
f01136a0:	83 ec 04             	sub    $0x4,%esp
f01136a3:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01136a8:	68 c5 05 00 00       	push   $0x5c5
f01136ad:	68 76 b5 11 f0       	push   $0xf011b576
f01136b2:	e8 bf ca fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01136b7:	e8 22 73 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01136bc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01136bf:	e8 dd 87 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01136c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01136c7:	83 ec 0c             	sub    $0xc,%esp
f01136ca:	68 00 08 00 00       	push   $0x800
f01136cf:	e8 9c 8c ff ff       	call   f010c370 <kmalloc>
f01136d4:	83 c4 10             	add    $0x10,%esp
f01136d7:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01136dd:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f01136e3:	89 c1                	mov    %eax,%ecx
f01136e5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01136ec:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01136f1:	0f b6 d0             	movzbl %al,%edx
f01136f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01136f7:	01 d0                	add    %edx,%eax
f01136f9:	48                   	dec    %eax
f01136fa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0113700:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113706:	ba 00 00 00 00       	mov    $0x0,%edx
f011370b:	f7 75 80             	divl   -0x80(%ebp)
f011370e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113714:	29 d0                	sub    %edx,%eax
f0113716:	89 c3                	mov    %eax,%ebx
f0113718:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011371f:	10 00 00 
f0113722:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113727:	0f b6 c0             	movzbl %al,%eax
f011372a:	c1 e0 04             	shl    $0x4,%eax
f011372d:	89 c2                	mov    %eax,%edx
f011372f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113735:	01 d0                	add    %edx,%eax
f0113737:	48                   	dec    %eax
f0113738:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011373e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113744:	ba 00 00 00 00       	mov    $0x0,%edx
f0113749:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011374f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113755:	29 d0                	sub    %edx,%eax
f0113757:	01 d8                	add    %ebx,%eax
f0113759:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f011375e:	39 c1                	cmp    %eax,%ecx
f0113760:	74 17                	je     f0113779 <test_kheap_phys_addr+0x348>
f0113762:	83 ec 04             	sub    $0x4,%esp
f0113765:	68 54 b6 11 f0       	push   $0xf011b654
f011376a:	68 cb 05 00 00       	push   $0x5cb
f011376f:	68 76 b5 11 f0       	push   $0xf011b576
f0113774:	e8 fd c9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113779:	e8 23 87 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011377e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113781:	74 17                	je     f011379a <test_kheap_phys_addr+0x369>
f0113783:	83 ec 04             	sub    $0x4,%esp
f0113786:	68 88 b5 11 f0       	push   $0xf011b588
f011378b:	68 cc 05 00 00       	push   $0x5cc
f0113790:	68 76 b5 11 f0       	push   $0xf011b576
f0113795:	e8 dc c9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011379a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011379d:	e8 3c 72 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01137a2:	29 c3                	sub    %eax,%ebx
f01137a4:	89 d8                	mov    %ebx,%eax
f01137a6:	83 f8 01             	cmp    $0x1,%eax
f01137a9:	74 17                	je     f01137c2 <test_kheap_phys_addr+0x391>
f01137ab:	83 ec 04             	sub    $0x4,%esp
f01137ae:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01137b3:	68 cd 05 00 00       	push   $0x5cd
f01137b8:	68 76 b5 11 f0       	push   $0xf011b576
f01137bd:	e8 b4 c9 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01137c2:	e8 17 72 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01137c7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01137ca:	e8 d2 86 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01137cf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01137d2:	83 ec 0c             	sub    $0xc,%esp
f01137d5:	68 00 08 00 00       	push   $0x800
f01137da:	e8 91 8b ff ff       	call   f010c370 <kmalloc>
f01137df:	83 c4 10             	add    $0x10,%esp
f01137e2:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01137e8:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f01137ee:	89 c1                	mov    %eax,%ecx
f01137f0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01137f7:	10 00 00 
f01137fa:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01137ff:	0f b6 d0             	movzbl %al,%edx
f0113802:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113808:	01 d0                	add    %edx,%eax
f011380a:	48                   	dec    %eax
f011380b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0113811:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113817:	ba 00 00 00 00       	mov    $0x0,%edx
f011381c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0113822:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113828:	29 d0                	sub    %edx,%eax
f011382a:	89 c3                	mov    %eax,%ebx
f011382c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0113833:	10 00 00 
f0113836:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011383b:	0f b6 c0             	movzbl %al,%eax
f011383e:	c1 e0 04             	shl    $0x4,%eax
f0113841:	89 c2                	mov    %eax,%edx
f0113843:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113849:	01 d0                	add    %edx,%eax
f011384b:	48                   	dec    %eax
f011384c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0113852:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113858:	ba 00 00 00 00       	mov    $0x0,%edx
f011385d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0113863:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113869:	29 d0                	sub    %edx,%eax
f011386b:	01 d8                	add    %ebx,%eax
f011386d:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f0113872:	39 c1                	cmp    %eax,%ecx
f0113874:	74 17                	je     f011388d <test_kheap_phys_addr+0x45c>
f0113876:	83 ec 04             	sub    $0x4,%esp
f0113879:	68 54 b6 11 f0       	push   $0xf011b654
f011387e:	68 d3 05 00 00       	push   $0x5d3
f0113883:	68 76 b5 11 f0       	push   $0xf011b576
f0113888:	e8 e9 c8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011388d:	e8 0f 86 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113892:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113895:	74 17                	je     f01138ae <test_kheap_phys_addr+0x47d>
f0113897:	83 ec 04             	sub    $0x4,%esp
f011389a:	68 88 b5 11 f0       	push   $0xf011b588
f011389f:	68 d4 05 00 00       	push   $0x5d4
f01138a4:	68 76 b5 11 f0       	push   $0xf011b576
f01138a9:	e8 c8 c8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01138ae:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01138b1:	e8 28 71 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01138b6:	29 c3                	sub    %eax,%ebx
f01138b8:	89 d8                	mov    %ebx,%eax
f01138ba:	83 f8 01             	cmp    $0x1,%eax
f01138bd:	74 17                	je     f01138d6 <test_kheap_phys_addr+0x4a5>
f01138bf:	83 ec 04             	sub    $0x4,%esp
f01138c2:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01138c7:	68 d5 05 00 00       	push   $0x5d5
f01138cc:	68 76 b5 11 f0       	push   $0xf011b576
f01138d1:	e8 a0 c8 fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01138d6:	e8 03 71 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01138db:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01138de:	e8 be 85 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01138e3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01138e6:	83 ec 0c             	sub    $0xc,%esp
f01138e9:	68 00 1c 00 00       	push   $0x1c00
f01138ee:	e8 7d 8a ff ff       	call   f010c370 <kmalloc>
f01138f3:	83 c4 10             	add    $0x10,%esp
f01138f6:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01138fc:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0113902:	89 c1                	mov    %eax,%ecx
f0113904:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011390b:	10 00 00 
f011390e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113913:	0f b6 d0             	movzbl %al,%edx
f0113916:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011391c:	01 d0                	add    %edx,%eax
f011391e:	48                   	dec    %eax
f011391f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0113925:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011392b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113930:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0113936:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011393c:	29 d0                	sub    %edx,%eax
f011393e:	89 c3                	mov    %eax,%ebx
f0113940:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0113947:	10 00 00 
f011394a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011394f:	0f b6 c0             	movzbl %al,%eax
f0113952:	c1 e0 04             	shl    $0x4,%eax
f0113955:	89 c2                	mov    %eax,%edx
f0113957:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011395d:	01 d0                	add    %edx,%eax
f011395f:	48                   	dec    %eax
f0113960:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0113966:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011396c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113971:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0113977:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011397d:	29 d0                	sub    %edx,%eax
f011397f:	01 d8                	add    %ebx,%eax
f0113981:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0113986:	39 c1                	cmp    %eax,%ecx
f0113988:	74 17                	je     f01139a1 <test_kheap_phys_addr+0x570>
f011398a:	83 ec 04             	sub    $0x4,%esp
f011398d:	68 54 b6 11 f0       	push   $0xf011b654
f0113992:	68 db 05 00 00       	push   $0x5db
f0113997:	68 76 b5 11 f0       	push   $0xf011b576
f011399c:	e8 d5 c7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01139a1:	e8 fb 84 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01139a6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01139a9:	74 17                	je     f01139c2 <test_kheap_phys_addr+0x591>
f01139ab:	83 ec 04             	sub    $0x4,%esp
f01139ae:	68 88 b5 11 f0       	push   $0xf011b588
f01139b3:	68 dc 05 00 00       	push   $0x5dc
f01139b8:	68 76 b5 11 f0       	push   $0xf011b576
f01139bd:	e8 b4 c7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01139c2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01139c5:	e8 14 70 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01139ca:	29 c3                	sub    %eax,%ebx
f01139cc:	89 d8                	mov    %ebx,%eax
f01139ce:	83 f8 02             	cmp    $0x2,%eax
f01139d1:	74 17                	je     f01139ea <test_kheap_phys_addr+0x5b9>
f01139d3:	83 ec 04             	sub    $0x4,%esp
f01139d6:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01139db:	68 dd 05 00 00       	push   $0x5dd
f01139e0:	68 76 b5 11 f0       	push   $0xf011b576
f01139e5:	e8 8c c7 fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01139ea:	e8 ef 6f ff ff       	call   f010a9de <sys_calculate_free_frames>
f01139ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01139f2:	e8 aa 84 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01139f7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01139fa:	83 ec 0c             	sub    $0xc,%esp
f01139fd:	68 00 fc 2f 00       	push   $0x2ffc00
f0113a02:	e8 69 89 ff ff       	call   f010c370 <kmalloc>
f0113a07:	83 c4 10             	add    $0x10,%esp
f0113a0a:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113a10:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0113a16:	89 c1                	mov    %eax,%ecx
f0113a18:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0113a1f:	10 00 00 
f0113a22:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113a27:	0f b6 d0             	movzbl %al,%edx
f0113a2a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0113a30:	01 d0                	add    %edx,%eax
f0113a32:	48                   	dec    %eax
f0113a33:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0113a39:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113a3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a44:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0113a4a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113a50:	29 d0                	sub    %edx,%eax
f0113a52:	89 c3                	mov    %eax,%ebx
f0113a54:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0113a5b:	10 00 00 
f0113a5e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113a63:	0f b6 c0             	movzbl %al,%eax
f0113a66:	c1 e0 04             	shl    $0x4,%eax
f0113a69:	89 c2                	mov    %eax,%edx
f0113a6b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0113a71:	01 d0                	add    %edx,%eax
f0113a73:	48                   	dec    %eax
f0113a74:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0113a7a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a85:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0113a8b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113a91:	29 d0                	sub    %edx,%eax
f0113a93:	01 d8                	add    %ebx,%eax
f0113a95:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0113a9a:	39 c1                	cmp    %eax,%ecx
f0113a9c:	74 17                	je     f0113ab5 <test_kheap_phys_addr+0x684>
f0113a9e:	83 ec 04             	sub    $0x4,%esp
f0113aa1:	68 54 b6 11 f0       	push   $0xf011b654
f0113aa6:	68 e3 05 00 00       	push   $0x5e3
f0113aab:	68 76 b5 11 f0       	push   $0xf011b576
f0113ab0:	e8 c1 c6 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113ab5:	e8 e7 83 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113aba:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113abd:	74 17                	je     f0113ad6 <test_kheap_phys_addr+0x6a5>
f0113abf:	83 ec 04             	sub    $0x4,%esp
f0113ac2:	68 88 b5 11 f0       	push   $0xf011b588
f0113ac7:	68 e4 05 00 00       	push   $0x5e4
f0113acc:	68 76 b5 11 f0       	push   $0xf011b576
f0113ad1:	e8 a0 c6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113ad6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113ad9:	e8 00 6f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113ade:	29 c3                	sub    %eax,%ebx
f0113ae0:	89 d8                	mov    %ebx,%eax
f0113ae2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113ae7:	74 17                	je     f0113b00 <test_kheap_phys_addr+0x6cf>
f0113ae9:	83 ec 04             	sub    $0x4,%esp
f0113aec:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0113af1:	68 e5 05 00 00       	push   $0x5e5
f0113af6:	68 76 b5 11 f0       	push   $0xf011b576
f0113afb:	e8 76 c6 fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0113b00:	e8 d9 6e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113b05:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113b08:	e8 94 83 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113b0d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0113b10:	83 ec 0c             	sub    $0xc,%esp
f0113b13:	68 00 fc 5f 00       	push   $0x5ffc00
f0113b18:	e8 53 88 ff ff       	call   f010c370 <kmalloc>
f0113b1d:	83 c4 10             	add    $0x10,%esp
f0113b20:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113b26:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0113b2c:	89 c1                	mov    %eax,%ecx
f0113b2e:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0113b35:	10 00 00 
f0113b38:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113b3d:	0f b6 d0             	movzbl %al,%edx
f0113b40:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113b46:	01 d0                	add    %edx,%eax
f0113b48:	48                   	dec    %eax
f0113b49:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0113b4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113b55:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b5a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0113b60:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113b66:	29 d0                	sub    %edx,%eax
f0113b68:	89 c3                	mov    %eax,%ebx
f0113b6a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0113b71:	10 00 00 
f0113b74:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113b79:	0f b6 c0             	movzbl %al,%eax
f0113b7c:	c1 e0 04             	shl    $0x4,%eax
f0113b7f:	89 c2                	mov    %eax,%edx
f0113b81:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0113b87:	01 d0                	add    %edx,%eax
f0113b89:	48                   	dec    %eax
f0113b8a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0113b90:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0113b96:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b9b:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0113ba1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0113ba7:	29 d0                	sub    %edx,%eax
f0113ba9:	01 d8                	add    %ebx,%eax
f0113bab:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f0113bb0:	39 c1                	cmp    %eax,%ecx
f0113bb2:	74 17                	je     f0113bcb <test_kheap_phys_addr+0x79a>
f0113bb4:	83 ec 04             	sub    $0x4,%esp
f0113bb7:	68 54 b6 11 f0       	push   $0xf011b654
f0113bbc:	68 eb 05 00 00       	push   $0x5eb
f0113bc1:	68 76 b5 11 f0       	push   $0xf011b576
f0113bc6:	e8 ab c5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113bcb:	e8 d1 82 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113bd0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113bd3:	74 17                	je     f0113bec <test_kheap_phys_addr+0x7bb>
f0113bd5:	83 ec 04             	sub    $0x4,%esp
f0113bd8:	68 88 b5 11 f0       	push   $0xf011b588
f0113bdd:	68 ec 05 00 00       	push   $0x5ec
f0113be2:	68 76 b5 11 f0       	push   $0xf011b576
f0113be7:	e8 8a c5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113bec:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113bef:	e8 ea 6d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113bf4:	29 c3                	sub    %eax,%ebx
f0113bf6:	89 d8                	mov    %ebx,%eax
f0113bf8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0113bfd:	74 17                	je     f0113c16 <test_kheap_phys_addr+0x7e5>
f0113bff:	83 ec 04             	sub    $0x4,%esp
f0113c02:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0113c07:	68 ed 05 00 00       	push   $0x5ed
f0113c0c:	68 76 b5 11 f0       	push   $0xf011b576
f0113c11:	e8 60 c5 fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0113c16:	e8 c3 6d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113c1b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113c1e:	e8 7e 82 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113c23:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0113c26:	83 ec 0c             	sub    $0xc,%esp
f0113c29:	68 00 38 00 00       	push   $0x3800
f0113c2e:	e8 3d 87 ff ff       	call   f010c370 <kmalloc>
f0113c33:	83 c4 10             	add    $0x10,%esp
f0113c36:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0113c3c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0113c42:	89 c1                	mov    %eax,%ecx
f0113c44:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0113c4b:	10 00 00 
f0113c4e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113c53:	0f b6 d0             	movzbl %al,%edx
f0113c56:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0113c5c:	01 d0                	add    %edx,%eax
f0113c5e:	48                   	dec    %eax
f0113c5f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0113c65:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113c6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113c70:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0113c76:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113c7c:	29 d0                	sub    %edx,%eax
f0113c7e:	89 c3                	mov    %eax,%ebx
f0113c80:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0113c87:	10 00 00 
f0113c8a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113c8f:	0f b6 c0             	movzbl %al,%eax
f0113c92:	c1 e0 04             	shl    $0x4,%eax
f0113c95:	89 c2                	mov    %eax,%edx
f0113c97:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0113c9d:	01 d0                	add    %edx,%eax
f0113c9f:	48                   	dec    %eax
f0113ca0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0113ca6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113cac:	ba 00 00 00 00       	mov    $0x0,%edx
f0113cb1:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0113cb7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113cbd:	29 d0                	sub    %edx,%eax
f0113cbf:	01 d8                	add    %ebx,%eax
f0113cc1:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0113cc6:	39 c1                	cmp    %eax,%ecx
f0113cc8:	74 17                	je     f0113ce1 <test_kheap_phys_addr+0x8b0>
f0113cca:	83 ec 04             	sub    $0x4,%esp
f0113ccd:	68 54 b6 11 f0       	push   $0xf011b654
f0113cd2:	68 f3 05 00 00       	push   $0x5f3
f0113cd7:	68 76 b5 11 f0       	push   $0xf011b576
f0113cdc:	e8 95 c4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113ce1:	e8 bb 81 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113ce6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0113ce9:	74 17                	je     f0113d02 <test_kheap_phys_addr+0x8d1>
f0113ceb:	83 ec 04             	sub    $0x4,%esp
f0113cee:	68 88 b5 11 f0       	push   $0xf011b588
f0113cf3:	68 f4 05 00 00       	push   $0x5f4
f0113cf8:	68 76 b5 11 f0       	push   $0xf011b576
f0113cfd:	e8 74 c4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0113d02:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0113d05:	e8 d4 6c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113d0a:	29 c3                	sub    %eax,%ebx
f0113d0c:	89 d8                	mov    %ebx,%eax
f0113d0e:	83 f8 04             	cmp    $0x4,%eax
f0113d11:	74 17                	je     f0113d2a <test_kheap_phys_addr+0x8f9>
f0113d13:	83 ec 04             	sub    $0x4,%esp
f0113d16:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0113d1b:	68 f5 05 00 00       	push   $0x5f5
f0113d20:	68 76 b5 11 f0       	push   $0xf011b576
f0113d25:	e8 4c c4 fe ff       	call   f0100176 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0113d2a:	89 e0                	mov    %esp,%eax
f0113d2c:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0113d2e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0113d35:	10 00 00 
f0113d38:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113d3d:	0f b6 d0             	movzbl %al,%edx
f0113d40:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113d46:	01 d0                	add    %edx,%eax
f0113d48:	48                   	dec    %eax
f0113d49:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0113d4f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113d55:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d5a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0113d60:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113d66:	29 d0                	sub    %edx,%eax
f0113d68:	89 c1                	mov    %eax,%ecx
f0113d6a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0113d71:	10 00 00 
f0113d74:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113d79:	0f b6 c0             	movzbl %al,%eax
f0113d7c:	c1 e0 04             	shl    $0x4,%eax
f0113d7f:	89 c2                	mov    %eax,%edx
f0113d81:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113d87:	01 d0                	add    %edx,%eax
f0113d89:	48                   	dec    %eax
f0113d8a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0113d90:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113d96:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d9b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0113da1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113da7:	29 d0                	sub    %edx,%eax
f0113da9:	01 c8                	add    %ecx,%eax
f0113dab:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0113db0:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0113db6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0113dbd:	10 00 00 
f0113dc0:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113dc5:	0f b6 d0             	movzbl %al,%edx
f0113dc8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113dce:	01 d0                	add    %edx,%eax
f0113dd0:	48                   	dec    %eax
f0113dd1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0113dd7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113ddd:	ba 00 00 00 00       	mov    $0x0,%edx
f0113de2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0113de8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113dee:	29 d0                	sub    %edx,%eax
f0113df0:	89 c1                	mov    %eax,%ecx
f0113df2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0113df9:	10 00 00 
f0113dfc:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0113e01:	0f b6 c0             	movzbl %al,%eax
f0113e04:	c1 e0 04             	shl    $0x4,%eax
f0113e07:	89 c2                	mov    %eax,%edx
f0113e09:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113e0f:	01 d0                	add    %edx,%eax
f0113e11:	48                   	dec    %eax
f0113e12:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0113e18:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113e1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e23:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0113e29:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113e2f:	29 d0                	sub    %edx,%eax
f0113e31:	01 c8                	add    %ecx,%eax
f0113e33:	05 00 80 d0 00       	add    $0xd08000,%eax
f0113e38:	c1 e8 0c             	shr    $0xc,%eax
f0113e3b:	89 c2                	mov    %eax,%edx
f0113e3d:	4a                   	dec    %edx
f0113e3e:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f0113e44:	c1 e0 02             	shl    $0x2,%eax
f0113e47:	8d 50 03             	lea    0x3(%eax),%edx
f0113e4a:	b8 10 00 00 00       	mov    $0x10,%eax
f0113e4f:	48                   	dec    %eax
f0113e50:	01 d0                	add    %edx,%eax
f0113e52:	bf 10 00 00 00       	mov    $0x10,%edi
f0113e57:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e5c:	f7 f7                	div    %edi
f0113e5e:	6b c0 10             	imul   $0x10,%eax,%eax
f0113e61:	29 c4                	sub    %eax,%esp
f0113e63:	89 e0                	mov    %esp,%eax
f0113e65:	83 c0 03             	add    $0x3,%eax
f0113e68:	c1 e8 02             	shr    $0x2,%eax
f0113e6b:	c1 e0 02             	shl    $0x2,%eax
f0113e6e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0113e74:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113e7b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0113e82:	eb 29                	jmp    f0113ead <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0113e84:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0113e87:	8d 43 01             	lea    0x1(%ebx),%eax
f0113e8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0113e8d:	83 ec 0c             	sub    $0xc,%esp
f0113e90:	ff 75 e0             	pushl  -0x20(%ebp)
f0113e93:	e8 6f 86 ff ff       	call   f010c507 <kheap_physical_address>
f0113e98:	83 c4 10             	add    $0x10,%esp
f0113e9b:	89 c2                	mov    %eax,%edx
f0113e9d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113ea3:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0113ea6:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0113ead:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113eb0:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0113eb6:	72 cc                	jb     f0113e84 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0113eb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113ebb:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0113ec1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113ec8:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0113ecf:	e9 a5 00 00 00       	jmp    f0113f79 <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0113ed4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0113ed7:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0113edc:	83 ec 04             	sub    $0x4,%esp
f0113edf:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f0113ee5:	51                   	push   %ecx
f0113ee6:	52                   	push   %edx
f0113ee7:	50                   	push   %eax
f0113ee8:	e8 28 fc fe ff       	call   f0103b15 <get_page_table>
f0113eed:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0113ef0:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0113ef6:	85 c0                	test   %eax,%eax
f0113ef8:	75 17                	jne    f0113f11 <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0113efa:	83 ec 04             	sub    $0x4,%esp
f0113efd:	68 74 bd 11 f0       	push   $0xf011bd74
f0113f02:	68 0a 06 00 00       	push   $0x60a
f0113f07:	68 76 b5 11 f0       	push   $0xf011b576
f0113f0c:	e8 65 c2 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113f11:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0113f18:	eb 44                	jmp    f0113f5e <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0113f1a:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0113f20:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0113f23:	c1 e2 02             	shl    $0x2,%edx
f0113f26:	01 d0                	add    %edx,%eax
f0113f28:	8b 00                	mov    (%eax),%eax
f0113f2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113f2f:	89 c1                	mov    %eax,%ecx
f0113f31:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113f37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113f3a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0113f3d:	39 c1                	cmp    %eax,%ecx
f0113f3f:	74 17                	je     f0113f58 <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0113f41:	83 ec 04             	sub    $0x4,%esp
f0113f44:	68 cd bd 11 f0       	push   $0xf011bdcd
f0113f49:	68 11 06 00 00       	push   $0x611
f0113f4e:	68 76 b5 11 f0       	push   $0xf011b576
f0113f53:	e8 1e c2 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0113f58:	ff 45 dc             	incl   -0x24(%ebp)
f0113f5b:	ff 45 e4             	incl   -0x1c(%ebp)
f0113f5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113f61:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0113f67:	7d 09                	jge    f0113f72 <test_kheap_phys_addr+0xb41>
f0113f69:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0113f70:	7e a8                	jle    f0113f1a <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0113f72:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f0113f79:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113f7c:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0113f82:	0f 82 4c ff ff ff    	jb     f0113ed4 <test_kheap_phys_addr+0xaa3>
f0113f88:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0113f8a:	83 ec 0c             	sub    $0xc,%esp
f0113f8d:	68 ec bd 11 f0       	push   $0xf011bdec
f0113f92:	e8 38 2e ff ff       	call   f0106dcf <cprintf>
f0113f97:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0113f9a:	e8 3f 6a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113f9f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0113fa5:	e8 f7 7e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113faa:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0113fb0:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0113fb6:	83 ec 0c             	sub    $0xc,%esp
f0113fb9:	50                   	push   %eax
f0113fba:	e8 17 84 ff ff       	call   f010c3d6 <kfree>
f0113fbf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113fc2:	e8 da 7e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0113fc7:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0113fcd:	74 17                	je     f0113fe6 <test_kheap_phys_addr+0xbb5>
f0113fcf:	83 ec 04             	sub    $0x4,%esp
f0113fd2:	68 88 b5 11 f0       	push   $0xf011b588
f0113fd7:	68 1e 06 00 00       	push   $0x61e
f0113fdc:	68 76 b5 11 f0       	push   $0xf011b576
f0113fe1:	e8 90 c1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0113fe6:	e8 f3 69 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0113feb:	89 c2                	mov    %eax,%edx
f0113fed:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113ff3:	29 c2                	sub    %eax,%edx
f0113ff5:	89 d0                	mov    %edx,%eax
f0113ff7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113ffc:	74 17                	je     f0114015 <test_kheap_phys_addr+0xbe4>
f0113ffe:	83 ec 04             	sub    $0x4,%esp
f0114001:	68 5c bb 11 f0       	push   $0xf011bb5c
f0114006:	68 1f 06 00 00       	push   $0x61f
f011400b:	68 76 b5 11 f0       	push   $0xf011b576
f0114010:	e8 61 c1 fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114015:	e8 c4 69 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011401a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114020:	e8 7c 7e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114025:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f011402b:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0114031:	83 ec 0c             	sub    $0xc,%esp
f0114034:	50                   	push   %eax
f0114035:	e8 9c 83 ff ff       	call   f010c3d6 <kfree>
f011403a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011403d:	e8 5f 7e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114042:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0114048:	74 17                	je     f0114061 <test_kheap_phys_addr+0xc30>
f011404a:	83 ec 04             	sub    $0x4,%esp
f011404d:	68 88 b5 11 f0       	push   $0xf011b588
f0114052:	68 25 06 00 00       	push   $0x625
f0114057:	68 76 b5 11 f0       	push   $0xf011b576
f011405c:	e8 15 c1 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0114061:	e8 78 69 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114066:	89 c2                	mov    %eax,%edx
f0114068:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011406e:	29 c2                	sub    %eax,%edx
f0114070:	89 d0                	mov    %edx,%eax
f0114072:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114077:	74 17                	je     f0114090 <test_kheap_phys_addr+0xc5f>
f0114079:	83 ec 04             	sub    $0x4,%esp
f011407c:	68 5c bb 11 f0       	push   $0xf011bb5c
f0114081:	68 26 06 00 00       	push   $0x626
f0114086:	68 76 b5 11 f0       	push   $0xf011b576
f011408b:	e8 e6 c0 fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114090:	e8 49 69 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114095:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011409b:	e8 01 7e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01140a0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01140a6:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01140ac:	83 ec 0c             	sub    $0xc,%esp
f01140af:	50                   	push   %eax
f01140b0:	e8 21 83 ff ff       	call   f010c3d6 <kfree>
f01140b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01140b8:	e8 e4 7d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01140bd:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01140c3:	74 17                	je     f01140dc <test_kheap_phys_addr+0xcab>
f01140c5:	83 ec 04             	sub    $0x4,%esp
f01140c8:	68 88 b5 11 f0       	push   $0xf011b588
f01140cd:	68 2c 06 00 00       	push   $0x62c
f01140d2:	68 76 b5 11 f0       	push   $0xf011b576
f01140d7:	e8 9a c0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01140dc:	e8 fd 68 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01140e1:	89 c2                	mov    %eax,%edx
f01140e3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01140e9:	29 c2                	sub    %eax,%edx
f01140eb:	89 d0                	mov    %edx,%eax
f01140ed:	3d 00 06 00 00       	cmp    $0x600,%eax
f01140f2:	74 17                	je     f011410b <test_kheap_phys_addr+0xcda>
f01140f4:	83 ec 04             	sub    $0x4,%esp
f01140f7:	68 5c bb 11 f0       	push   $0xf011bb5c
f01140fc:	68 2d 06 00 00       	push   $0x62d
f0114101:	68 76 b5 11 f0       	push   $0xf011b576
f0114106:	e8 6b c0 fe ff       	call   f0100176 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f011410b:	89 e0                	mov    %esp,%eax
f011410d:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011410f:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0114116:	10 00 00 
f0114119:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011411e:	0f b6 d0             	movzbl %al,%edx
f0114121:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0114127:	01 d0                	add    %edx,%eax
f0114129:	48                   	dec    %eax
f011412a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0114130:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114136:	ba 00 00 00 00       	mov    $0x0,%edx
f011413b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0114141:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114147:	29 d0                	sub    %edx,%eax
f0114149:	89 c1                	mov    %eax,%ecx
f011414b:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0114152:	10 00 00 
f0114155:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011415a:	0f b6 c0             	movzbl %al,%eax
f011415d:	c1 e0 04             	shl    $0x4,%eax
f0114160:	89 c2                	mov    %eax,%edx
f0114162:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0114168:	01 d0                	add    %edx,%eax
f011416a:	48                   	dec    %eax
f011416b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0114171:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114177:	ba 00 00 00 00       	mov    $0x0,%edx
f011417c:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0114182:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114188:	29 d0                	sub    %edx,%eax
f011418a:	01 c8                	add    %ecx,%eax
f011418c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114191:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0114197:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011419e:	10 00 00 
f01141a1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01141a6:	0f b6 d0             	movzbl %al,%edx
f01141a9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01141af:	01 d0                	add    %edx,%eax
f01141b1:	48                   	dec    %eax
f01141b2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01141b8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01141be:	ba 00 00 00 00       	mov    $0x0,%edx
f01141c3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01141c9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01141cf:	29 d0                	sub    %edx,%eax
f01141d1:	89 c1                	mov    %eax,%ecx
f01141d3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01141da:	10 00 00 
f01141dd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01141e2:	0f b6 c0             	movzbl %al,%eax
f01141e5:	c1 e0 04             	shl    $0x4,%eax
f01141e8:	89 c2                	mov    %eax,%edx
f01141ea:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01141f0:	01 d0                	add    %edx,%eax
f01141f2:	48                   	dec    %eax
f01141f3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01141f9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01141ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0114204:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011420a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114210:	29 d0                	sub    %edx,%eax
f0114212:	01 c8                	add    %ecx,%eax
f0114214:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114219:	c1 e8 0c             	shr    $0xc,%eax
f011421c:	89 c2                	mov    %eax,%edx
f011421e:	4a                   	dec    %edx
f011421f:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0114225:	c1 e0 02             	shl    $0x2,%eax
f0114228:	8d 50 03             	lea    0x3(%eax),%edx
f011422b:	b8 10 00 00 00       	mov    $0x10,%eax
f0114230:	48                   	dec    %eax
f0114231:	01 d0                	add    %edx,%eax
f0114233:	bf 10 00 00 00       	mov    $0x10,%edi
f0114238:	ba 00 00 00 00       	mov    $0x0,%edx
f011423d:	f7 f7                	div    %edi
f011423f:	6b c0 10             	imul   $0x10,%eax,%eax
f0114242:	29 c4                	sub    %eax,%esp
f0114244:	89 e0                	mov    %esp,%eax
f0114246:	83 c0 03             	add    $0x3,%eax
f0114249:	c1 e8 02             	shr    $0x2,%eax
f011424c:	c1 e0 02             	shl    $0x2,%eax
f011424f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0114255:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f011425c:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0114263:	eb 29                	jmp    f011428e <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f0114265:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0114268:	8d 43 01             	lea    0x1(%ebx),%eax
f011426b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011426e:	83 ec 0c             	sub    $0xc,%esp
f0114271:	ff 75 d8             	pushl  -0x28(%ebp)
f0114274:	e8 8e 82 ff ff       	call   f010c507 <kheap_physical_address>
f0114279:	83 c4 10             	add    $0x10,%esp
f011427c:	89 c2                	mov    %eax,%edx
f011427e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0114284:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0114287:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f011428e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114291:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0114297:	72 cc                	jb     f0114265 <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0114299:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011429c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f01142a2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01142a9:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01142b0:	e9 a5 00 00 00       	jmp    f011435a <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f01142b5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01142b8:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f01142bd:	83 ec 04             	sub    $0x4,%esp
f01142c0:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f01142c6:	51                   	push   %ecx
f01142c7:	52                   	push   %edx
f01142c8:	50                   	push   %eax
f01142c9:	e8 47 f8 fe ff       	call   f0103b15 <get_page_table>
f01142ce:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01142d1:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01142d7:	85 c0                	test   %eax,%eax
f01142d9:	75 17                	jne    f01142f2 <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01142db:	83 ec 04             	sub    $0x4,%esp
f01142de:	68 74 bd 11 f0       	push   $0xf011bd74
f01142e3:	68 43 06 00 00       	push   $0x643
f01142e8:	68 76 b5 11 f0       	push   $0xf011b576
f01142ed:	e8 84 be fe ff       	call   f0100176 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01142f2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01142f9:	eb 44                	jmp    f011433f <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01142fb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0114301:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0114304:	c1 e2 02             	shl    $0x2,%edx
f0114307:	01 d0                	add    %edx,%eax
f0114309:	8b 00                	mov    (%eax),%eax
f011430b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114310:	89 c1                	mov    %eax,%ecx
f0114312:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0114318:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011431b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011431e:	39 c1                	cmp    %eax,%ecx
f0114320:	74 17                	je     f0114339 <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0114322:	83 ec 04             	sub    $0x4,%esp
f0114325:	68 cd bd 11 f0       	push   $0xf011bdcd
f011432a:	68 4a 06 00 00       	push   $0x64a
f011432f:	68 76 b5 11 f0       	push   $0xf011b576
f0114334:	e8 3d be fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0114339:	ff 45 d4             	incl   -0x2c(%ebp)
f011433c:	ff 45 e4             	incl   -0x1c(%ebp)
f011433f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114342:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0114348:	7d 09                	jge    f0114353 <test_kheap_phys_addr+0xf22>
f011434a:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0114351:	7e a8                	jle    f01142fb <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0114353:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f011435a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011435d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0114363:	0f 82 4c ff ff ff    	jb     f01142b5 <test_kheap_phys_addr+0xe84>
f0114369:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f011436b:	83 ec 0c             	sub    $0xc,%esp
f011436e:	68 f9 b6 11 f0       	push   $0xf011b6f9
f0114373:	e8 57 2a ff ff       	call   f0106dcf <cprintf>
f0114378:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011437b:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0114382:	10 00 00 
f0114385:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011438a:	0f b6 d0             	movzbl %al,%edx
f011438d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0114393:	01 d0                	add    %edx,%eax
f0114395:	48                   	dec    %eax
f0114396:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011439c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01143a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01143a7:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01143ad:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01143b3:	29 d0                	sub    %edx,%eax
f01143b5:	89 c1                	mov    %eax,%ecx
f01143b7:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01143be:	10 00 00 
f01143c1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01143c6:	0f b6 c0             	movzbl %al,%eax
f01143c9:	c1 e0 04             	shl    $0x4,%eax
f01143cc:	89 c2                	mov    %eax,%edx
f01143ce:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01143d4:	01 d0                	add    %edx,%eax
f01143d6:	48                   	dec    %eax
f01143d7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01143dd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01143e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01143e8:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01143ee:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01143f4:	29 d0                	sub    %edx,%eax
f01143f6:	01 c8                	add    %ecx,%eax
f01143f8:	2d 00 00 00 09       	sub    $0x9000000,%eax
f01143fd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0114403:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011440a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0114410:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114413:	eb 0a                	jmp    f011441f <test_kheap_phys_addr+0xfee>
		{
			i++;
f0114415:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0114418:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011441f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0114426:	76 ed                	jbe    f0114415 <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f0114428:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011442b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0114431:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0114438:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011443e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114441:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0114448:	e9 ce 00 00 00       	jmp    f011451b <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f011444d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114450:	89 c1                	mov    %eax,%ecx
f0114452:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0114457:	83 ec 04             	sub    $0x4,%esp
f011445a:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f0114460:	52                   	push   %edx
f0114461:	51                   	push   %ecx
f0114462:	50                   	push   %eax
f0114463:	e8 ad f6 fe ff       	call   f0103b15 <get_page_table>
f0114468:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011446b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0114471:	85 c0                	test   %eax,%eax
f0114473:	75 17                	jne    f011448c <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0114475:	83 ec 04             	sub    $0x4,%esp
f0114478:	68 74 bd 11 f0       	push   $0xf011bd74
f011447d:	68 65 06 00 00       	push   $0x665
f0114482:	68 76 b5 11 f0       	push   $0xf011b576
f0114487:	e8 ea bc fe ff       	call   f0100176 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011448c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0114493:	eb 67                	jmp    f01144fc <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0114495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114498:	c1 e0 0c             	shl    $0xc,%eax
f011449b:	89 c2                	mov    %eax,%edx
f011449d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01144a3:	01 d0                	add    %edx,%eax
f01144a5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01144ab:	83 ec 0c             	sub    $0xc,%esp
f01144ae:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f01144b4:	e8 4e 80 ff ff       	call   f010c507 <kheap_physical_address>
f01144b9:	83 c4 10             	add    $0x10,%esp
f01144bc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01144c2:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01144c8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01144cb:	c1 e2 02             	shl    $0x2,%edx
f01144ce:	01 d0                	add    %edx,%eax
f01144d0:	8b 00                	mov    (%eax),%eax
f01144d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01144d7:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01144dd:	74 17                	je     f01144f6 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01144df:	83 ec 04             	sub    $0x4,%esp
f01144e2:	68 cd bd 11 f0       	push   $0xf011bdcd
f01144e7:	68 6f 06 00 00       	push   $0x66f
f01144ec:	68 76 b5 11 f0       	push   $0xf011b576
f01144f1:	e8 80 bc fe ff       	call   f0100176 <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01144f6:	ff 45 cc             	incl   -0x34(%ebp)
f01144f9:	ff 45 e4             	incl   -0x1c(%ebp)
f01144fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01144ff:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0114505:	7d 09                	jge    f0114510 <test_kheap_phys_addr+0x10df>
f0114507:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011450e:	7e 85                	jle    f0114495 <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0114510:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0114517:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011451b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011451f:	0f 88 28 ff ff ff    	js     f011444d <test_kheap_phys_addr+0x101c>
f0114525:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0114529:	7f 0d                	jg     f0114538 <test_kheap_phys_addr+0x1107>
f011452b:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0114532:	0f 86 15 ff ff ff    	jbe    f011444d <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0114538:	83 ec 0c             	sub    $0xc,%esp
f011453b:	68 52 b7 11 f0       	push   $0xf011b752
f0114540:	e8 8a 28 ff ff       	call   f0106dcf <cprintf>
f0114545:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0114548:	83 ec 0c             	sub    $0xc,%esp
f011454b:	68 20 be 11 f0       	push   $0xf011be20
f0114550:	e8 7a 28 ff ff       	call   f0106dcf <cprintf>
f0114555:	83 c4 10             	add    $0x10,%esp

	return 1;
f0114558:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011455d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114560:	5b                   	pop    %ebx
f0114561:	5e                   	pop    %esi
f0114562:	5f                   	pop    %edi
f0114563:	5d                   	pop    %ebp
f0114564:	c3                   	ret    

f0114565 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0114565:	55                   	push   %ebp
f0114566:	89 e5                	mov    %esp,%ebp
f0114568:	57                   	push   %edi
f0114569:	56                   	push   %esi
f011456a:	53                   	push   %ebx
f011456b:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0114571:	89 e0                	mov    %esp,%eax
f0114573:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0114575:	83 ec 0c             	sub    $0xc,%esp
f0114578:	68 b8 b4 11 f0       	push   $0xf011b4b8
f011457d:	e8 4d 28 ff ff       	call   f0106dcf <cprintf>
f0114582:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0114585:	83 ec 0c             	sub    $0xc,%esp
f0114588:	68 e8 b4 11 f0       	push   $0xf011b4e8
f011458d:	e8 3d 28 ff ff       	call   f0106dcf <cprintf>
f0114592:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0114595:	83 ec 0c             	sub    $0xc,%esp
f0114598:	68 b8 b4 11 f0       	push   $0xf011b4b8
f011459d:	e8 2d 28 ff ff       	call   f0106dcf <cprintf>
f01145a2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01145a5:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01145a9:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01145ad:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01145b3:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01145b9:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01145c0:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01145c7:	e8 12 64 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01145cc:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01145cf:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f01145d5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01145da:	b8 00 00 00 00       	mov    $0x0,%eax
f01145df:	89 d7                	mov    %edx,%edi
f01145e1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01145e3:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f01145e9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01145ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01145f3:	89 d7                	mov    %edx,%edi
f01145f5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01145f7:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f01145fd:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114602:	b8 00 00 00 00       	mov    $0x0,%eax
f0114607:	89 d7                	mov    %edx,%edi
f0114609:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011460b:	e8 ce 63 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114610:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114613:	e8 89 78 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114618:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011461b:	83 ec 0c             	sub    $0xc,%esp
f011461e:	68 00 fc 1f 00       	push   $0x1ffc00
f0114623:	e8 48 7d ff ff       	call   f010c370 <kmalloc>
f0114628:	83 c4 10             	add    $0x10,%esp
f011462b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114631:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0114637:	89 c1                	mov    %eax,%ecx
f0114639:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0114640:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114645:	0f b6 d0             	movzbl %al,%edx
f0114648:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011464b:	01 d0                	add    %edx,%eax
f011464d:	48                   	dec    %eax
f011464e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0114651:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114654:	ba 00 00 00 00       	mov    $0x0,%edx
f0114659:	f7 75 b4             	divl   -0x4c(%ebp)
f011465c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011465f:	29 d0                	sub    %edx,%eax
f0114661:	89 c3                	mov    %eax,%ebx
f0114663:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011466a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011466f:	0f b6 c0             	movzbl %al,%eax
f0114672:	c1 e0 04             	shl    $0x4,%eax
f0114675:	89 c2                	mov    %eax,%edx
f0114677:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011467a:	01 d0                	add    %edx,%eax
f011467c:	48                   	dec    %eax
f011467d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0114680:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114683:	ba 00 00 00 00       	mov    $0x0,%edx
f0114688:	f7 75 ac             	divl   -0x54(%ebp)
f011468b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011468e:	29 d0                	sub    %edx,%eax
f0114690:	01 d8                	add    %ebx,%eax
f0114692:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0114697:	39 c1                	cmp    %eax,%ecx
f0114699:	74 17                	je     f01146b2 <test_kheap_virt_addr+0x14d>
f011469b:	83 ec 04             	sub    $0x4,%esp
f011469e:	68 54 b6 11 f0       	push   $0xf011b654
f01146a3:	68 9c 06 00 00       	push   $0x69c
f01146a8:	68 76 b5 11 f0       	push   $0xf011b576
f01146ad:	e8 c4 ba fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01146b2:	e8 ea 77 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01146b7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01146ba:	74 17                	je     f01146d3 <test_kheap_virt_addr+0x16e>
f01146bc:	83 ec 04             	sub    $0x4,%esp
f01146bf:	68 88 b5 11 f0       	push   $0xf011b588
f01146c4:	68 9d 06 00 00       	push   $0x69d
f01146c9:	68 76 b5 11 f0       	push   $0xf011b576
f01146ce:	e8 a3 ba fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01146d3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01146d6:	e8 03 63 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01146db:	29 c3                	sub    %eax,%ebx
f01146dd:	89 d8                	mov    %ebx,%eax
f01146df:	3d 00 02 00 00       	cmp    $0x200,%eax
f01146e4:	74 17                	je     f01146fd <test_kheap_virt_addr+0x198>
f01146e6:	83 ec 04             	sub    $0x4,%esp
f01146e9:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01146ee:	68 9e 06 00 00       	push   $0x69e
f01146f3:	68 76 b5 11 f0       	push   $0xf011b576
f01146f8:	e8 79 ba fe ff       	call   f0100176 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01146fd:	e8 dc 62 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114702:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114705:	e8 97 77 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011470a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011470d:	83 ec 0c             	sub    $0xc,%esp
f0114710:	68 00 fc 1f 00       	push   $0x1ffc00
f0114715:	e8 56 7c ff ff       	call   f010c370 <kmalloc>
f011471a:	83 c4 10             	add    $0x10,%esp
f011471d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114723:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0114729:	89 c1                	mov    %eax,%ecx
f011472b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114732:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114737:	0f b6 d0             	movzbl %al,%edx
f011473a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011473d:	01 d0                	add    %edx,%eax
f011473f:	48                   	dec    %eax
f0114740:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0114743:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114746:	ba 00 00 00 00       	mov    $0x0,%edx
f011474b:	f7 75 a4             	divl   -0x5c(%ebp)
f011474e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114751:	29 d0                	sub    %edx,%eax
f0114753:	89 c3                	mov    %eax,%ebx
f0114755:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011475c:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114761:	0f b6 c0             	movzbl %al,%eax
f0114764:	c1 e0 04             	shl    $0x4,%eax
f0114767:	89 c2                	mov    %eax,%edx
f0114769:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011476c:	01 d0                	add    %edx,%eax
f011476e:	48                   	dec    %eax
f011476f:	89 45 98             	mov    %eax,-0x68(%ebp)
f0114772:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114775:	ba 00 00 00 00       	mov    $0x0,%edx
f011477a:	f7 75 9c             	divl   -0x64(%ebp)
f011477d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114780:	29 d0                	sub    %edx,%eax
f0114782:	01 d8                	add    %ebx,%eax
f0114784:	2d 00 00 e0 09       	sub    $0x9e00000,%eax
f0114789:	39 c1                	cmp    %eax,%ecx
f011478b:	74 17                	je     f01147a4 <test_kheap_virt_addr+0x23f>
f011478d:	83 ec 04             	sub    $0x4,%esp
f0114790:	68 54 b6 11 f0       	push   $0xf011b654
f0114795:	68 a4 06 00 00       	push   $0x6a4
f011479a:	68 76 b5 11 f0       	push   $0xf011b576
f011479f:	e8 d2 b9 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01147a4:	e8 f8 76 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01147a9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01147ac:	74 17                	je     f01147c5 <test_kheap_virt_addr+0x260>
f01147ae:	83 ec 04             	sub    $0x4,%esp
f01147b1:	68 88 b5 11 f0       	push   $0xf011b588
f01147b6:	68 a5 06 00 00       	push   $0x6a5
f01147bb:	68 76 b5 11 f0       	push   $0xf011b576
f01147c0:	e8 b1 b9 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01147c5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01147c8:	e8 11 62 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01147cd:	29 c3                	sub    %eax,%ebx
f01147cf:	89 d8                	mov    %ebx,%eax
f01147d1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01147d6:	74 17                	je     f01147ef <test_kheap_virt_addr+0x28a>
f01147d8:	83 ec 04             	sub    $0x4,%esp
f01147db:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01147e0:	68 a6 06 00 00       	push   $0x6a6
f01147e5:	68 76 b5 11 f0       	push   $0xf011b576
f01147ea:	e8 87 b9 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01147ef:	e8 ea 61 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01147f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01147f7:	e8 a5 76 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01147fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01147ff:	83 ec 0c             	sub    $0xc,%esp
f0114802:	68 00 08 00 00       	push   $0x800
f0114807:	e8 64 7b ff ff       	call   f010c370 <kmalloc>
f011480c:	83 c4 10             	add    $0x10,%esp
f011480f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114815:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011481b:	89 c1                	mov    %eax,%ecx
f011481d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0114824:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114829:	0f b6 d0             	movzbl %al,%edx
f011482c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011482f:	01 d0                	add    %edx,%eax
f0114831:	48                   	dec    %eax
f0114832:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114835:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114838:	ba 00 00 00 00       	mov    $0x0,%edx
f011483d:	f7 75 94             	divl   -0x6c(%ebp)
f0114840:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114843:	29 d0                	sub    %edx,%eax
f0114845:	89 c3                	mov    %eax,%ebx
f0114847:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011484e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114853:	0f b6 c0             	movzbl %al,%eax
f0114856:	c1 e0 04             	shl    $0x4,%eax
f0114859:	89 c2                	mov    %eax,%edx
f011485b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011485e:	01 d0                	add    %edx,%eax
f0114860:	48                   	dec    %eax
f0114861:	89 45 88             	mov    %eax,-0x78(%ebp)
f0114864:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114867:	ba 00 00 00 00       	mov    $0x0,%edx
f011486c:	f7 75 8c             	divl   -0x74(%ebp)
f011486f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114872:	29 d0                	sub    %edx,%eax
f0114874:	01 d8                	add    %ebx,%eax
f0114876:	2d 00 00 c0 09       	sub    $0x9c00000,%eax
f011487b:	39 c1                	cmp    %eax,%ecx
f011487d:	74 17                	je     f0114896 <test_kheap_virt_addr+0x331>
f011487f:	83 ec 04             	sub    $0x4,%esp
f0114882:	68 54 b6 11 f0       	push   $0xf011b654
f0114887:	68 ac 06 00 00       	push   $0x6ac
f011488c:	68 76 b5 11 f0       	push   $0xf011b576
f0114891:	e8 e0 b8 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114896:	e8 06 76 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011489b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011489e:	74 17                	je     f01148b7 <test_kheap_virt_addr+0x352>
f01148a0:	83 ec 04             	sub    $0x4,%esp
f01148a3:	68 88 b5 11 f0       	push   $0xf011b588
f01148a8:	68 ad 06 00 00       	push   $0x6ad
f01148ad:	68 76 b5 11 f0       	push   $0xf011b576
f01148b2:	e8 bf b8 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01148b7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01148ba:	e8 1f 61 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01148bf:	29 c3                	sub    %eax,%ebx
f01148c1:	89 d8                	mov    %ebx,%eax
f01148c3:	83 f8 01             	cmp    $0x1,%eax
f01148c6:	74 17                	je     f01148df <test_kheap_virt_addr+0x37a>
f01148c8:	83 ec 04             	sub    $0x4,%esp
f01148cb:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01148d0:	68 ae 06 00 00       	push   $0x6ae
f01148d5:	68 76 b5 11 f0       	push   $0xf011b576
f01148da:	e8 97 b8 fe ff       	call   f0100176 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01148df:	e8 fa 60 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01148e4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01148e7:	e8 b5 75 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01148ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01148ef:	83 ec 0c             	sub    $0xc,%esp
f01148f2:	68 00 08 00 00       	push   $0x800
f01148f7:	e8 74 7a ff ff       	call   f010c370 <kmalloc>
f01148fc:	83 c4 10             	add    $0x10,%esp
f01148ff:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114905:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011490b:	89 c1                	mov    %eax,%ecx
f011490d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114914:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114919:	0f b6 d0             	movzbl %al,%edx
f011491c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011491f:	01 d0                	add    %edx,%eax
f0114921:	48                   	dec    %eax
f0114922:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114925:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114928:	ba 00 00 00 00       	mov    $0x0,%edx
f011492d:	f7 75 84             	divl   -0x7c(%ebp)
f0114930:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114933:	29 d0                	sub    %edx,%eax
f0114935:	89 c3                	mov    %eax,%ebx
f0114937:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011493e:	10 00 00 
f0114941:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114946:	0f b6 c0             	movzbl %al,%eax
f0114949:	c1 e0 04             	shl    $0x4,%eax
f011494c:	89 c2                	mov    %eax,%edx
f011494e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114954:	01 d0                	add    %edx,%eax
f0114956:	48                   	dec    %eax
f0114957:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011495d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114963:	ba 00 00 00 00       	mov    $0x0,%edx
f0114968:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011496e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114974:	29 d0                	sub    %edx,%eax
f0114976:	01 d8                	add    %ebx,%eax
f0114978:	2d 00 f0 bf 09       	sub    $0x9bff000,%eax
f011497d:	39 c1                	cmp    %eax,%ecx
f011497f:	74 17                	je     f0114998 <test_kheap_virt_addr+0x433>
f0114981:	83 ec 04             	sub    $0x4,%esp
f0114984:	68 54 b6 11 f0       	push   $0xf011b654
f0114989:	68 b4 06 00 00       	push   $0x6b4
f011498e:	68 76 b5 11 f0       	push   $0xf011b576
f0114993:	e8 de b7 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114998:	e8 04 75 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011499d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01149a0:	74 17                	je     f01149b9 <test_kheap_virt_addr+0x454>
f01149a2:	83 ec 04             	sub    $0x4,%esp
f01149a5:	68 88 b5 11 f0       	push   $0xf011b588
f01149aa:	68 b5 06 00 00       	push   $0x6b5
f01149af:	68 76 b5 11 f0       	push   $0xf011b576
f01149b4:	e8 bd b7 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01149b9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01149bc:	e8 1d 60 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01149c1:	29 c3                	sub    %eax,%ebx
f01149c3:	89 d8                	mov    %ebx,%eax
f01149c5:	83 f8 01             	cmp    $0x1,%eax
f01149c8:	74 17                	je     f01149e1 <test_kheap_virt_addr+0x47c>
f01149ca:	83 ec 04             	sub    $0x4,%esp
f01149cd:	68 f0 b5 11 f0       	push   $0xf011b5f0
f01149d2:	68 b6 06 00 00       	push   $0x6b6
f01149d7:	68 76 b5 11 f0       	push   $0xf011b576
f01149dc:	e8 95 b7 fe ff       	call   f0100176 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01149e1:	e8 f8 5f ff ff       	call   f010a9de <sys_calculate_free_frames>
f01149e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01149e9:	e8 b3 74 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01149ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01149f1:	83 ec 0c             	sub    $0xc,%esp
f01149f4:	68 00 1c 00 00       	push   $0x1c00
f01149f9:	e8 72 79 ff ff       	call   f010c370 <kmalloc>
f01149fe:	83 c4 10             	add    $0x10,%esp
f0114a01:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114a07:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0114a0d:	89 c1                	mov    %eax,%ecx
f0114a0f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114a16:	10 00 00 
f0114a19:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114a1e:	0f b6 d0             	movzbl %al,%edx
f0114a21:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114a27:	01 d0                	add    %edx,%eax
f0114a29:	48                   	dec    %eax
f0114a2a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0114a30:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114a36:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a3b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114a41:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114a47:	29 d0                	sub    %edx,%eax
f0114a49:	89 c3                	mov    %eax,%ebx
f0114a4b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0114a52:	10 00 00 
f0114a55:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114a5a:	0f b6 c0             	movzbl %al,%eax
f0114a5d:	c1 e0 04             	shl    $0x4,%eax
f0114a60:	89 c2                	mov    %eax,%edx
f0114a62:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114a68:	01 d0                	add    %edx,%eax
f0114a6a:	48                   	dec    %eax
f0114a6b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0114a71:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114a77:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a7c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0114a82:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114a88:	29 d0                	sub    %edx,%eax
f0114a8a:	01 d8                	add    %ebx,%eax
f0114a8c:	2d 00 e0 bf 09       	sub    $0x9bfe000,%eax
f0114a91:	39 c1                	cmp    %eax,%ecx
f0114a93:	74 17                	je     f0114aac <test_kheap_virt_addr+0x547>
f0114a95:	83 ec 04             	sub    $0x4,%esp
f0114a98:	68 54 b6 11 f0       	push   $0xf011b654
f0114a9d:	68 bc 06 00 00       	push   $0x6bc
f0114aa2:	68 76 b5 11 f0       	push   $0xf011b576
f0114aa7:	e8 ca b6 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114aac:	e8 f0 73 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114ab1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114ab4:	74 17                	je     f0114acd <test_kheap_virt_addr+0x568>
f0114ab6:	83 ec 04             	sub    $0x4,%esp
f0114ab9:	68 88 b5 11 f0       	push   $0xf011b588
f0114abe:	68 bd 06 00 00       	push   $0x6bd
f0114ac3:	68 76 b5 11 f0       	push   $0xf011b576
f0114ac8:	e8 a9 b6 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114acd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114ad0:	e8 09 5f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114ad5:	29 c3                	sub    %eax,%ebx
f0114ad7:	89 d8                	mov    %ebx,%eax
f0114ad9:	83 f8 02             	cmp    $0x2,%eax
f0114adc:	74 17                	je     f0114af5 <test_kheap_virt_addr+0x590>
f0114ade:	83 ec 04             	sub    $0x4,%esp
f0114ae1:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0114ae6:	68 be 06 00 00       	push   $0x6be
f0114aeb:	68 76 b5 11 f0       	push   $0xf011b576
f0114af0:	e8 81 b6 fe ff       	call   f0100176 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114af5:	e8 e4 5e ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114afa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114afd:	e8 9f 73 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114b02:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114b05:	83 ec 0c             	sub    $0xc,%esp
f0114b08:	68 00 fc 2f 00       	push   $0x2ffc00
f0114b0d:	e8 5e 78 ff ff       	call   f010c370 <kmalloc>
f0114b12:	83 c4 10             	add    $0x10,%esp
f0114b15:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114b1b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0114b21:	89 c1                	mov    %eax,%ecx
f0114b23:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114b2a:	10 00 00 
f0114b2d:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114b32:	0f b6 d0             	movzbl %al,%edx
f0114b35:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114b3b:	01 d0                	add    %edx,%eax
f0114b3d:	48                   	dec    %eax
f0114b3e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0114b44:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114b4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b4f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0114b55:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114b5b:	29 d0                	sub    %edx,%eax
f0114b5d:	89 c3                	mov    %eax,%ebx
f0114b5f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0114b66:	10 00 00 
f0114b69:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114b6e:	0f b6 c0             	movzbl %al,%eax
f0114b71:	c1 e0 04             	shl    $0x4,%eax
f0114b74:	89 c2                	mov    %eax,%edx
f0114b76:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0114b7c:	01 d0                	add    %edx,%eax
f0114b7e:	48                   	dec    %eax
f0114b7f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0114b85:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114b8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b90:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0114b96:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114b9c:	29 d0                	sub    %edx,%eax
f0114b9e:	01 d8                	add    %ebx,%eax
f0114ba0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0114ba5:	39 c1                	cmp    %eax,%ecx
f0114ba7:	74 17                	je     f0114bc0 <test_kheap_virt_addr+0x65b>
f0114ba9:	83 ec 04             	sub    $0x4,%esp
f0114bac:	68 54 b6 11 f0       	push   $0xf011b654
f0114bb1:	68 c4 06 00 00       	push   $0x6c4
f0114bb6:	68 76 b5 11 f0       	push   $0xf011b576
f0114bbb:	e8 b6 b5 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114bc0:	e8 dc 72 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114bc5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114bc8:	74 17                	je     f0114be1 <test_kheap_virt_addr+0x67c>
f0114bca:	83 ec 04             	sub    $0x4,%esp
f0114bcd:	68 88 b5 11 f0       	push   $0xf011b588
f0114bd2:	68 c5 06 00 00       	push   $0x6c5
f0114bd7:	68 76 b5 11 f0       	push   $0xf011b576
f0114bdc:	e8 95 b5 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114be1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114be4:	e8 f5 5d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114be9:	29 c3                	sub    %eax,%ebx
f0114beb:	89 d8                	mov    %ebx,%eax
f0114bed:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114bf2:	74 17                	je     f0114c0b <test_kheap_virt_addr+0x6a6>
f0114bf4:	83 ec 04             	sub    $0x4,%esp
f0114bf7:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0114bfc:	68 c6 06 00 00       	push   $0x6c6
f0114c01:	68 76 b5 11 f0       	push   $0xf011b576
f0114c06:	e8 6b b5 fe ff       	call   f0100176 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114c0b:	e8 ce 5d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114c10:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114c13:	e8 89 72 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114c18:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0114c1b:	83 ec 0c             	sub    $0xc,%esp
f0114c1e:	68 00 fc 5f 00       	push   $0x5ffc00
f0114c23:	e8 48 77 ff ff       	call   f010c370 <kmalloc>
f0114c28:	83 c4 10             	add    $0x10,%esp
f0114c2b:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114c31:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0114c37:	89 c1                	mov    %eax,%ecx
f0114c39:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0114c40:	10 00 00 
f0114c43:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114c48:	0f b6 d0             	movzbl %al,%edx
f0114c4b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0114c51:	01 d0                	add    %edx,%eax
f0114c53:	48                   	dec    %eax
f0114c54:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114c5a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c65:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114c6b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114c71:	29 d0                	sub    %edx,%eax
f0114c73:	89 c3                	mov    %eax,%ebx
f0114c75:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0114c7c:	10 00 00 
f0114c7f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114c84:	0f b6 c0             	movzbl %al,%eax
f0114c87:	c1 e0 04             	shl    $0x4,%eax
f0114c8a:	89 c2                	mov    %eax,%edx
f0114c8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114c92:	01 d0                	add    %edx,%eax
f0114c94:	48                   	dec    %eax
f0114c95:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0114c9b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114ca1:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ca6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0114cac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114cb2:	29 d0                	sub    %edx,%eax
f0114cb4:	01 d8                	add    %ebx,%eax
f0114cb6:	2d 00 c0 8f 09       	sub    $0x98fc000,%eax
f0114cbb:	39 c1                	cmp    %eax,%ecx
f0114cbd:	74 17                	je     f0114cd6 <test_kheap_virt_addr+0x771>
f0114cbf:	83 ec 04             	sub    $0x4,%esp
f0114cc2:	68 54 b6 11 f0       	push   $0xf011b654
f0114cc7:	68 cc 06 00 00       	push   $0x6cc
f0114ccc:	68 76 b5 11 f0       	push   $0xf011b576
f0114cd1:	e8 a0 b4 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114cd6:	e8 c6 71 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114cdb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114cde:	74 17                	je     f0114cf7 <test_kheap_virt_addr+0x792>
f0114ce0:	83 ec 04             	sub    $0x4,%esp
f0114ce3:	68 88 b5 11 f0       	push   $0xf011b588
f0114ce8:	68 cd 06 00 00       	push   $0x6cd
f0114ced:	68 76 b5 11 f0       	push   $0xf011b576
f0114cf2:	e8 7f b4 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114cf7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114cfa:	e8 df 5c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114cff:	29 c3                	sub    %eax,%ebx
f0114d01:	89 d8                	mov    %ebx,%eax
f0114d03:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114d08:	74 17                	je     f0114d21 <test_kheap_virt_addr+0x7bc>
f0114d0a:	83 ec 04             	sub    $0x4,%esp
f0114d0d:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0114d12:	68 ce 06 00 00       	push   $0x6ce
f0114d17:	68 76 b5 11 f0       	push   $0xf011b576
f0114d1c:	e8 55 b4 fe ff       	call   f0100176 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0114d21:	e8 b8 5c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114d26:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114d29:	e8 73 71 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114d2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0114d31:	83 ec 0c             	sub    $0xc,%esp
f0114d34:	68 00 38 00 00       	push   $0x3800
f0114d39:	e8 32 76 ff ff       	call   f010c370 <kmalloc>
f0114d3e:	83 c4 10             	add    $0x10,%esp
f0114d41:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114d47:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0114d4d:	89 c1                	mov    %eax,%ecx
f0114d4f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0114d56:	10 00 00 
f0114d59:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114d5e:	0f b6 d0             	movzbl %al,%edx
f0114d61:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114d67:	01 d0                	add    %edx,%eax
f0114d69:	48                   	dec    %eax
f0114d6a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0114d70:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0114d7b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0114d81:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114d87:	29 d0                	sub    %edx,%eax
f0114d89:	89 c3                	mov    %eax,%ebx
f0114d8b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0114d92:	10 00 00 
f0114d95:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114d9a:	0f b6 c0             	movzbl %al,%eax
f0114d9d:	c1 e0 04             	shl    $0x4,%eax
f0114da0:	89 c2                	mov    %eax,%edx
f0114da2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0114da8:	01 d0                	add    %edx,%eax
f0114daa:	48                   	dec    %eax
f0114dab:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0114db1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0114dbc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0114dc2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114dc8:	29 d0                	sub    %edx,%eax
f0114dca:	01 d8                	add    %ebx,%eax
f0114dcc:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0114dd1:	39 c1                	cmp    %eax,%ecx
f0114dd3:	74 17                	je     f0114dec <test_kheap_virt_addr+0x887>
f0114dd5:	83 ec 04             	sub    $0x4,%esp
f0114dd8:	68 54 b6 11 f0       	push   $0xf011b654
f0114ddd:	68 d4 06 00 00       	push   $0x6d4
f0114de2:	68 76 b5 11 f0       	push   $0xf011b576
f0114de7:	e8 8a b3 fe ff       	call   f0100176 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114dec:	e8 b0 70 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0114df1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0114df4:	74 17                	je     f0114e0d <test_kheap_virt_addr+0x8a8>
f0114df6:	83 ec 04             	sub    $0x4,%esp
f0114df9:	68 88 b5 11 f0       	push   $0xf011b588
f0114dfe:	68 d5 06 00 00       	push   $0x6d5
f0114e03:	68 76 b5 11 f0       	push   $0xf011b576
f0114e08:	e8 69 b3 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114e0d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0114e10:	e8 c9 5b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0114e15:	29 c3                	sub    %eax,%ebx
f0114e17:	89 d8                	mov    %ebx,%eax
f0114e19:	83 f8 04             	cmp    $0x4,%eax
f0114e1c:	74 17                	je     f0114e35 <test_kheap_virt_addr+0x8d0>
f0114e1e:	83 ec 04             	sub    $0x4,%esp
f0114e21:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0114e26:	68 d6 06 00 00       	push   $0x6d6
f0114e2b:	68 76 b5 11 f0       	push   $0xf011b576
f0114e30:	e8 41 b3 fe ff       	call   f0100176 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0114e35:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0114e3c:	10 00 00 
f0114e3f:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114e44:	0f b6 d0             	movzbl %al,%edx
f0114e47:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0114e4d:	01 d0                	add    %edx,%eax
f0114e4f:	48                   	dec    %eax
f0114e50:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0114e56:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114e5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0114e61:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0114e67:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114e6d:	29 d0                	sub    %edx,%eax
f0114e6f:	89 c1                	mov    %eax,%ecx
f0114e71:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0114e78:	10 00 00 
f0114e7b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114e80:	0f b6 c0             	movzbl %al,%eax
f0114e83:	c1 e0 04             	shl    $0x4,%eax
f0114e86:	89 c2                	mov    %eax,%edx
f0114e88:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0114e8e:	01 d0                	add    %edx,%eax
f0114e90:	48                   	dec    %eax
f0114e91:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0114e97:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0114e9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ea2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0114ea8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0114eae:	29 d0                	sub    %edx,%eax
f0114eb0:	01 c8                	add    %ecx,%eax
f0114eb2:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114eb7:	c1 e8 0c             	shr    $0xc,%eax
f0114eba:	89 c2                	mov    %eax,%edx
f0114ebc:	4a                   	dec    %edx
f0114ebd:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0114ec3:	c1 e0 02             	shl    $0x2,%eax
f0114ec6:	8d 50 03             	lea    0x3(%eax),%edx
f0114ec9:	b8 10 00 00 00       	mov    $0x10,%eax
f0114ece:	48                   	dec    %eax
f0114ecf:	01 d0                	add    %edx,%eax
f0114ed1:	bf 10 00 00 00       	mov    $0x10,%edi
f0114ed6:	ba 00 00 00 00       	mov    $0x0,%edx
f0114edb:	f7 f7                	div    %edi
f0114edd:	6b c0 10             	imul   $0x10,%eax,%eax
f0114ee0:	29 c4                	sub    %eax,%esp
f0114ee2:	89 e0                	mov    %esp,%eax
f0114ee4:	83 c0 03             	add    $0x3,%eax
f0114ee7:	c1 e8 02             	shr    $0x2,%eax
f0114eea:	c1 e0 02             	shl    $0x2,%eax
f0114eed:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE ;
f0114ef3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0114efa:	10 00 00 
f0114efd:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114f02:	0f b6 d0             	movzbl %al,%edx
f0114f05:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0114f0b:	01 d0                	add    %edx,%eax
f0114f0d:	48                   	dec    %eax
f0114f0e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0114f14:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114f1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f1f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0114f25:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0114f2b:	29 d0                	sub    %edx,%eax
f0114f2d:	89 c1                	mov    %eax,%ecx
f0114f2f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0114f36:	10 00 00 
f0114f39:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114f3e:	0f b6 c0             	movzbl %al,%eax
f0114f41:	c1 e0 04             	shl    $0x4,%eax
f0114f44:	89 c2                	mov    %eax,%edx
f0114f46:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0114f4c:	01 d0                	add    %edx,%eax
f0114f4e:	48                   	dec    %eax
f0114f4f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0114f55:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f60:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0114f66:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114f6c:	29 d0                	sub    %edx,%eax
f0114f6e:	01 c8                	add    %ecx,%eax
f0114f70:	05 00 80 d0 00       	add    $0xd08000,%eax
f0114f75:	c1 e8 0c             	shr    $0xc,%eax
f0114f78:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0114f7e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0114f85:	10 00 00 
f0114f88:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114f8d:	0f b6 d0             	movzbl %al,%edx
f0114f90:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0114f96:	01 d0                	add    %edx,%eax
f0114f98:	48                   	dec    %eax
f0114f99:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0114f9f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114fa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0114faa:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0114fb0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114fb6:	29 d0                	sub    %edx,%eax
f0114fb8:	89 c1                	mov    %eax,%ecx
f0114fba:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0114fc1:	10 00 00 
f0114fc4:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0114fc9:	0f b6 c0             	movzbl %al,%eax
f0114fcc:	c1 e0 04             	shl    $0x4,%eax
f0114fcf:	89 c2                	mov    %eax,%edx
f0114fd1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0114fd7:	01 d0                	add    %edx,%eax
f0114fd9:	48                   	dec    %eax
f0114fda:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0114fe0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114fe6:	ba 00 00 00 00       	mov    $0x0,%edx
f0114feb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0114ff1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114ff7:	29 d0                	sub    %edx,%eax
f0114ff9:	01 c8                	add    %ecx,%eax
f0114ffb:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0115000:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0115006:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011500d:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0115014:	e9 d8 00 00 00       	jmp    f01150f1 <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0115019:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011501c:	a1 30 58 55 f0       	mov    0xf0555830,%eax
f0115021:	83 ec 04             	sub    $0x4,%esp
f0115024:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f011502a:	51                   	push   %ecx
f011502b:	52                   	push   %edx
f011502c:	50                   	push   %eax
f011502d:	e8 e3 ea fe ff       	call   f0103b15 <get_page_table>
f0115032:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0115035:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011503b:	85 c0                	test   %eax,%eax
f011503d:	75 17                	jne    f0115056 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011503f:	83 ec 04             	sub    $0x4,%esp
f0115042:	68 74 bd 11 f0       	push   $0xf011bd74
f0115047:	68 e7 06 00 00       	push   $0x6e7
f011504c:	68 76 b5 11 f0       	push   $0xf011b576
f0115051:	e8 20 b1 fe ff       	call   f0100176 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0115056:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011505d:	eb 73                	jmp    f01150d2 <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f011505f:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0115065:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115068:	c1 e2 02             	shl    $0x2,%edx
f011506b:	01 d0                	add    %edx,%eax
f011506d:	8b 00                	mov    (%eax),%eax
f011506f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115074:	89 c1                	mov    %eax,%ecx
f0115076:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011507c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011507f:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0115082:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115088:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011508b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011508e:	83 ec 0c             	sub    $0xc,%esp
f0115091:	50                   	push   %eax
f0115092:	e8 0e 74 ff ff       	call   f010c4a5 <kheap_virtual_address>
f0115097:	83 c4 10             	add    $0x10,%esp
f011509a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f01150a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150a3:	c1 e0 0c             	shl    $0xc,%eax
f01150a6:	89 c2                	mov    %eax,%edx
f01150a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01150ab:	01 d0                	add    %edx,%eax
f01150ad:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01150b3:	74 17                	je     f01150cc <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f01150b5:	83 ec 04             	sub    $0x4,%esp
f01150b8:	68 68 be 11 f0       	push   $0xf011be68
f01150bd:	68 f1 06 00 00       	push   $0x6f1
f01150c2:	68 76 b5 11 f0       	push   $0xf011b576
f01150c7:	e8 aa b0 fe ff       	call   f0100176 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f01150cc:	ff 45 dc             	incl   -0x24(%ebp)
f01150cf:	ff 45 e0             	incl   -0x20(%ebp)
f01150d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01150d5:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f01150db:	7d 0d                	jge    f01150ea <test_kheap_virt_addr+0xb85>
f01150dd:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01150e4:	0f 8e 75 ff ff ff    	jle    f011505f <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01150ea:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f01150f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01150f4:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f01150fa:	0f 82 19 ff ff ff    	jb     f0115019 <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0115100:	83 ec 0c             	sub    $0xc,%esp
f0115103:	68 84 be 11 f0       	push   $0xf011be84
f0115108:	e8 c2 1c ff ff       	call   f0106dcf <cprintf>
f011510d:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0115110:	e8 c9 58 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115115:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011511b:	e8 81 6d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115120:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0115126:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f011512c:	83 ec 0c             	sub    $0xc,%esp
f011512f:	50                   	push   %eax
f0115130:	e8 a1 72 ff ff       	call   f010c3d6 <kfree>
f0115135:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115138:	e8 64 6d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011513d:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0115143:	74 17                	je     f011515c <test_kheap_virt_addr+0xbf7>
f0115145:	83 ec 04             	sub    $0x4,%esp
f0115148:	68 88 b5 11 f0       	push   $0xf011b588
f011514d:	68 fe 06 00 00       	push   $0x6fe
f0115152:	68 76 b5 11 f0       	push   $0xf011b576
f0115157:	e8 1a b0 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011515c:	e8 7d 58 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115161:	89 c2                	mov    %eax,%edx
f0115163:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0115169:	29 c2                	sub    %eax,%edx
f011516b:	89 d0                	mov    %edx,%eax
f011516d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115172:	74 17                	je     f011518b <test_kheap_virt_addr+0xc26>
f0115174:	83 ec 04             	sub    $0x4,%esp
f0115177:	68 5c bb 11 f0       	push   $0xf011bb5c
f011517c:	68 ff 06 00 00       	push   $0x6ff
f0115181:	68 76 b5 11 f0       	push   $0xf011b576
f0115186:	e8 eb af fe ff       	call   f0100176 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011518b:	e8 4e 58 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115190:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115196:	e8 06 6d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011519b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01151a1:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01151a7:	83 ec 0c             	sub    $0xc,%esp
f01151aa:	50                   	push   %eax
f01151ab:	e8 26 72 ff ff       	call   f010c3d6 <kfree>
f01151b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01151b3:	e8 e9 6c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01151b8:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01151be:	74 17                	je     f01151d7 <test_kheap_virt_addr+0xc72>
f01151c0:	83 ec 04             	sub    $0x4,%esp
f01151c3:	68 88 b5 11 f0       	push   $0xf011b588
f01151c8:	68 05 07 00 00       	push   $0x705
f01151cd:	68 76 b5 11 f0       	push   $0xf011b576
f01151d2:	e8 9f af fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01151d7:	e8 02 58 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01151dc:	89 c2                	mov    %eax,%edx
f01151de:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01151e4:	29 c2                	sub    %eax,%edx
f01151e6:	89 d0                	mov    %edx,%eax
f01151e8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01151ed:	74 17                	je     f0115206 <test_kheap_virt_addr+0xca1>
f01151ef:	83 ec 04             	sub    $0x4,%esp
f01151f2:	68 5c bb 11 f0       	push   $0xf011bb5c
f01151f7:	68 06 07 00 00       	push   $0x706
f01151fc:	68 76 b5 11 f0       	push   $0xf011b576
f0115201:	e8 70 af fe ff       	call   f0100176 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0115206:	e8 d3 57 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011520b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115211:	e8 8b 6c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115216:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f011521c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0115222:	83 ec 0c             	sub    $0xc,%esp
f0115225:	50                   	push   %eax
f0115226:	e8 ab 71 ff ff       	call   f010c3d6 <kfree>
f011522b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011522e:	e8 6e 6c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115233:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0115239:	74 17                	je     f0115252 <test_kheap_virt_addr+0xced>
f011523b:	83 ec 04             	sub    $0x4,%esp
f011523e:	68 88 b5 11 f0       	push   $0xf011b588
f0115243:	68 0c 07 00 00       	push   $0x70c
f0115248:	68 76 b5 11 f0       	push   $0xf011b576
f011524d:	e8 24 af fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0115252:	e8 87 57 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115257:	89 c2                	mov    %eax,%edx
f0115259:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011525f:	29 c2                	sub    %eax,%edx
f0115261:	89 d0                	mov    %edx,%eax
f0115263:	3d 00 06 00 00       	cmp    $0x600,%eax
f0115268:	74 17                	je     f0115281 <test_kheap_virt_addr+0xd1c>
f011526a:	83 ec 04             	sub    $0x4,%esp
f011526d:	68 5c bb 11 f0       	push   $0xf011bb5c
f0115272:	68 0d 07 00 00       	push   $0x70d
f0115277:	68 76 b5 11 f0       	push   $0xf011b576
f011527c:	e8 f5 ae fe ff       	call   f0100176 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0115281:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0115288:	10 00 00 
f011528b:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0115290:	0f b6 d0             	movzbl %al,%edx
f0115293:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0115299:	01 d0                	add    %edx,%eax
f011529b:	48                   	dec    %eax
f011529c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01152a2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01152a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01152ad:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01152b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01152b9:	29 d0                	sub    %edx,%eax
f01152bb:	89 c1                	mov    %eax,%ecx
f01152bd:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01152c4:	10 00 00 
f01152c7:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f01152cc:	0f b6 c0             	movzbl %al,%eax
f01152cf:	c1 e0 04             	shl    $0x4,%eax
f01152d2:	89 c2                	mov    %eax,%edx
f01152d4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01152da:	01 d0                	add    %edx,%eax
f01152dc:	48                   	dec    %eax
f01152dd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01152e3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01152e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01152ee:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01152f4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01152fa:	29 d0                	sub    %edx,%eax
f01152fc:	01 c8                	add    %ecx,%eax
f01152fe:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0115303:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0115309:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f0115310:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0115317:	10 00 00 
f011531a:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011531f:	0f b6 d0             	movzbl %al,%edx
f0115322:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0115328:	01 d0                	add    %edx,%eax
f011532a:	48                   	dec    %eax
f011532b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0115331:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0115337:	ba 00 00 00 00       	mov    $0x0,%edx
f011533c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0115342:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0115348:	29 d0                	sub    %edx,%eax
f011534a:	89 c1                	mov    %eax,%ecx
f011534c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0115353:	10 00 00 
f0115356:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011535b:	0f b6 c0             	movzbl %al,%eax
f011535e:	c1 e0 04             	shl    $0x4,%eax
f0115361:	89 c2                	mov    %eax,%edx
f0115363:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0115369:	01 d0                	add    %edx,%eax
f011536b:	48                   	dec    %eax
f011536c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0115372:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0115378:	ba 00 00 00 00       	mov    $0x0,%edx
f011537d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0115383:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0115389:	29 d0                	sub    %edx,%eax
f011538b:	01 c8                	add    %ecx,%eax
f011538d:	c1 e8 0c             	shr    $0xc,%eax
f0115390:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0115396:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011539c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011539f:	eb 41                	jmp    f01153e2 <test_kheap_virt_addr+0xe7d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01153a1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153a7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01153aa:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01153ad:	83 ec 0c             	sub    $0xc,%esp
f01153b0:	50                   	push   %eax
f01153b1:	e8 ef 70 ff ff       	call   f010c4a5 <kheap_virtual_address>
f01153b6:	83 c4 10             	add    $0x10,%esp
f01153b9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f01153bf:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f01153c6:	74 17                	je     f01153df <test_kheap_virt_addr+0xe7a>
			{
				panic("Wrong kheap_virtual_address");
f01153c8:	83 ec 04             	sub    $0x4,%esp
f01153cb:	68 68 be 11 f0       	push   $0xf011be68
f01153d0:	68 1e 07 00 00       	push   $0x71e
f01153d5:	68 76 b5 11 f0       	push   $0xf011b576
f01153da:	e8 97 ad fe ff       	call   f0100176 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01153df:	ff 45 d8             	incl   -0x28(%ebp)
f01153e2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01153e8:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01153ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01153f1:	39 c2                	cmp    %eax,%edx
f01153f3:	77 ac                	ja     f01153a1 <test_kheap_virt_addr+0xe3c>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01153f5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01153fb:	05 00 04 00 00       	add    $0x400,%eax
f0115400:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0115403:	eb 4b                	jmp    f0115450 <test_kheap_virt_addr+0xeeb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0115405:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011540b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011540e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0115411:	83 ec 0c             	sub    $0xc,%esp
f0115414:	50                   	push   %eax
f0115415:	e8 8b 70 ff ff       	call   f010c4a5 <kheap_virtual_address>
f011541a:	83 c4 10             	add    $0x10,%esp
f011541d:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0115423:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115426:	c1 e0 0c             	shl    $0xc,%eax
f0115429:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011542e:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0115434:	74 17                	je     f011544d <test_kheap_virt_addr+0xee8>
			{
				panic("Wrong kheap_virtual_address");
f0115436:	83 ec 04             	sub    $0x4,%esp
f0115439:	68 68 be 11 f0       	push   $0xf011be68
f011543e:	68 28 07 00 00       	push   $0x728
f0115443:	68 76 b5 11 f0       	push   $0xf011b576
f0115448:	e8 29 ad fe ff       	call   f0100176 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011544d:	ff 45 d8             	incl   -0x28(%ebp)
f0115450:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115456:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f011545c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011545f:	39 c2                	cmp    %eax,%edx
f0115461:	77 a2                	ja     f0115405 <test_kheap_virt_addr+0xea0>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0115463:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115469:	05 04 07 00 00       	add    $0x704,%eax
f011546e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0115471:	eb 41                	jmp    f01154b4 <test_kheap_virt_addr+0xf4f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0115473:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115479:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011547c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011547f:	83 ec 0c             	sub    $0xc,%esp
f0115482:	50                   	push   %eax
f0115483:	e8 1d 70 ff ff       	call   f010c4a5 <kheap_virtual_address>
f0115488:	83 c4 10             	add    $0x10,%esp
f011548b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0115491:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0115498:	74 17                	je     f01154b1 <test_kheap_virt_addr+0xf4c>
			{
				panic("Wrong kheap_virtual_address");
f011549a:	83 ec 04             	sub    $0x4,%esp
f011549d:	68 68 be 11 f0       	push   $0xf011be68
f01154a2:	68 31 07 00 00       	push   $0x731
f01154a7:	68 76 b5 11 f0       	push   $0xf011b576
f01154ac:	e8 c5 ac fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01154b1:	ff 45 d8             	incl   -0x28(%ebp)
f01154b4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01154ba:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01154c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01154c3:	39 c2                	cmp    %eax,%edx
f01154c5:	77 ac                	ja     f0115473 <test_kheap_virt_addr+0xf0e>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01154c7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01154cd:	05 04 0d 00 00       	add    $0xd04,%eax
f01154d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01154d5:	eb 4b                	jmp    f0115522 <test_kheap_virt_addr+0xfbd>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01154d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154dd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01154e0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01154e3:	83 ec 0c             	sub    $0xc,%esp
f01154e6:	50                   	push   %eax
f01154e7:	e8 b9 6f ff ff       	call   f010c4a5 <kheap_virtual_address>
f01154ec:	83 c4 10             	add    $0x10,%esp
f01154ef:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f01154f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01154f8:	c1 e0 0c             	shl    $0xc,%eax
f01154fb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0115500:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0115506:	74 17                	je     f011551f <test_kheap_virt_addr+0xfba>
			{
				panic("Wrong kheap_virtual_address");
f0115508:	83 ec 04             	sub    $0x4,%esp
f011550b:	68 68 be 11 f0       	push   $0xf011be68
f0115510:	68 3a 07 00 00       	push   $0x73a
f0115515:	68 76 b5 11 f0       	push   $0xf011b576
f011551a:	e8 57 ac fe ff       	call   f0100176 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011551f:	ff 45 d8             	incl   -0x28(%ebp)
f0115522:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115528:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f011552e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115531:	39 c2                	cmp    %eax,%edx
f0115533:	77 a2                	ja     f01154d7 <test_kheap_virt_addr+0xf72>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0115535:	83 ec 0c             	sub    $0xc,%esp
f0115538:	68 f9 b6 11 f0       	push   $0xf011b6f9
f011553d:	e8 8d 18 ff ff       	call   f0106dcf <cprintf>
f0115542:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0115545:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f011554c:	eb 54                	jmp    f01155a2 <test_kheap_virt_addr+0x103d>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011554e:	83 ec 0c             	sub    $0xc,%esp
f0115551:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115554:	e8 4c 6f ff ff       	call   f010c4a5 <kheap_virtual_address>
f0115559:	83 c4 10             	add    $0x10,%esp
f011555c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0115562:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0115569:	74 30                	je     f011559b <test_kheap_virt_addr+0x1036>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011556b:	83 ec 04             	sub    $0x4,%esp
f011556e:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0115574:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115577:	68 b5 be 11 f0       	push   $0xf011beb5
f011557c:	e8 4e 18 ff ff       	call   f0106dcf <cprintf>
f0115581:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0115584:	83 ec 04             	sub    $0x4,%esp
f0115587:	68 68 be 11 f0       	push   $0xf011be68
f011558c:	68 4a 07 00 00       	push   $0x74a
f0115591:	68 76 b5 11 f0       	push   $0xf011b576
f0115596:	e8 db ab fe ff       	call   f0100176 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011559b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01155a2:	b8 68 58 15 01       	mov    $0x1155868,%eax
f01155a7:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01155aa:	72 a2                	jb     f011554e <test_kheap_virt_addr+0xfe9>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01155ac:	83 ec 0c             	sub    $0xc,%esp
f01155af:	68 52 b7 11 f0       	push   $0xf011b752
f01155b4:	e8 16 18 ff ff       	call   f0106dcf <cprintf>
f01155b9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01155bc:	83 ec 0c             	sub    $0xc,%esp
f01155bf:	68 d4 be 11 f0       	push   $0xf011bed4
f01155c4:	e8 06 18 ff ff       	call   f0106dcf <cprintf>
f01155c9:	83 c4 10             	add    $0x10,%esp

	return 1;
f01155cc:	b8 01 00 00 00       	mov    $0x1,%eax
f01155d1:	89 f4                	mov    %esi,%esp

}
f01155d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01155d6:	5b                   	pop    %ebx
f01155d7:	5e                   	pop    %esi
f01155d8:	5f                   	pop    %edi
f01155d9:	5d                   	pop    %ebp
f01155da:	c3                   	ret    

f01155db <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01155db:	55                   	push   %ebp
f01155dc:	89 e5                	mov    %esp,%ebp
f01155de:	57                   	push   %edi
f01155df:	56                   	push   %esi
f01155e0:	53                   	push   %ebx
f01155e1:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f01155e7:	a0 2c ea 14 f0       	mov    0xf014ea2c,%al
f01155ec:	84 c0                	test   %al,%al
f01155ee:	74 56                	je     f0115646 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01155f0:	c6 05 2c ea 14 f0 00 	movb   $0x0,0xf014ea2c
		initFreeFrames = sys_calculate_free_frames() ;
f01155f7:	e8 e2 53 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01155fc:	a3 64 58 15 f1       	mov    %eax,0xf1155864
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0115601:	e8 9b 68 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115606:	a3 60 58 15 f1       	mov    %eax,0xf1155860
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011560b:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0115611:	bb 2e c0 11 f0       	mov    $0xf011c02e,%ebx
f0115616:	ba 11 00 00 00       	mov    $0x11,%edx
f011561b:	89 c7                	mov    %eax,%edi
f011561d:	89 de                	mov    %ebx,%esi
f011561f:	89 d1                	mov    %edx,%ecx
f0115621:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115623:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0115629:	b9 53 00 00 00       	mov    $0x53,%ecx
f011562e:	b0 00                	mov    $0x0,%al
f0115630:	89 d7                	mov    %edx,%edi
f0115632:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0115634:	83 ec 0c             	sub    $0xc,%esp
f0115637:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f011563d:	50                   	push   %eax
f011563e:	e8 06 c2 fe ff       	call   f0101849 <execute_command>
f0115643:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0115646:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011564d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0115654:	a1 78 73 53 f0       	mov    0xf0537378,%eax
f0115659:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011565c:	eb 2d                	jmp    f011568b <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011565e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115661:	05 f4 02 00 00       	add    $0x2f4,%eax
f0115666:	83 ec 08             	sub    $0x8,%esp
f0115669:	68 1b bf 11 f0       	push   $0xf011bf1b
f011566e:	50                   	push   %eax
f011566f:	e8 52 22 00 00       	call   f01178c6 <strcmp>
f0115674:	83 c4 10             	add    $0x10,%esp
f0115677:	85 c0                	test   %eax,%eax
f0115679:	75 08                	jne    f0115683 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f011567b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011567e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0115681:	eb 2f                	jmp    f01156b2 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0115683:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f0115688:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011568b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011568f:	74 08                	je     f0115699 <test_three_creation_functions+0xbe>
f0115691:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115694:	8b 40 44             	mov    0x44(%eax),%eax
f0115697:	eb 05                	jmp    f011569e <test_three_creation_functions+0xc3>
f0115699:	b8 00 00 00 00       	mov    $0x0,%eax
f011569e:	a3 80 73 53 f0       	mov    %eax,0xf0537380
f01156a3:	a1 80 73 53 f0       	mov    0xf0537380,%eax
f01156a8:	85 c0                	test   %eax,%eax
f01156aa:	75 b2                	jne    f011565e <test_three_creation_functions+0x83>
f01156ac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01156b0:	75 ac                	jne    f011565e <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01156b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01156b5:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f01156bb:	85 c0                	test   %eax,%eax
f01156bd:	74 17                	je     f01156d6 <test_three_creation_functions+0xfb>
			panic("Page fault occur while not expected. Review the three creation functions");
f01156bf:	83 ec 04             	sub    $0x4,%esp
f01156c2:	68 24 bf 11 f0       	push   $0xf011bf24
f01156c7:	68 74 07 00 00       	push   $0x774
f01156cc:	68 76 b5 11 f0       	push   $0xf011b576
f01156d1:	e8 a0 aa fe ff       	call   f0100176 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01156d6:	83 ec 0c             	sub    $0xc,%esp
f01156d9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01156dc:	e8 3c ec fe ff       	call   f010431d <env_page_ws_get_size>
f01156e1:	83 c4 10             	add    $0x10,%esp
f01156e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01156e7:	e8 f2 52 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01156ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01156ef:	e8 ad 67 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01156f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01156f7:	a1 60 58 15 f1       	mov    0xf1155860,%eax
f01156fc:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01156ff:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0115702:	74 17                	je     f011571b <test_three_creation_functions+0x140>
f0115704:	83 ec 04             	sub    $0x4,%esp
f0115707:	68 88 b5 11 f0       	push   $0xf011b588
f011570c:	68 7a 07 00 00       	push   $0x77a
f0115711:	68 76 b5 11 f0       	push   $0xf011b576
f0115716:	e8 5b aa fe ff       	call   f0100176 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011571b:	a1 64 58 15 f1       	mov    0xf1155864,%eax
f0115720:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0115723:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115726:	83 c2 15             	add    $0x15,%edx
f0115729:	39 d0                	cmp    %edx,%eax
f011572b:	74 17                	je     f0115744 <test_three_creation_functions+0x169>
f011572d:	83 ec 04             	sub    $0x4,%esp
f0115730:	68 f0 b5 11 f0       	push   $0xf011b5f0
f0115735:	68 7c 07 00 00       	push   $0x77c
f011573a:	68 76 b5 11 f0       	push   $0xf011b576
f011573f:	e8 32 aa fe ff       	call   f0100176 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0115744:	83 ec 0c             	sub    $0xc,%esp
f0115747:	68 00 10 00 00       	push   $0x1000
f011574c:	e8 1f 6c ff ff       	call   f010c370 <kmalloc>
f0115751:	83 c4 10             	add    $0x10,%esp
f0115754:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0115757:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011575e:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0115763:	0f b6 d0             	movzbl %al,%edx
f0115766:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115769:	01 d0                	add    %edx,%eax
f011576b:	48                   	dec    %eax
f011576c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011576f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115772:	ba 00 00 00 00       	mov    $0x0,%edx
f0115777:	f7 75 cc             	divl   -0x34(%ebp)
f011577a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011577d:	29 d0                	sub    %edx,%eax
f011577f:	89 c1                	mov    %eax,%ecx
f0115781:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0115788:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f011578d:	0f b6 c0             	movzbl %al,%eax
f0115790:	c1 e0 04             	shl    $0x4,%eax
f0115793:	89 c2                	mov    %eax,%edx
f0115795:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115798:	01 d0                	add    %edx,%eax
f011579a:	48                   	dec    %eax
f011579b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011579e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01157a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01157a6:	f7 75 c4             	divl   -0x3c(%ebp)
f01157a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01157ac:	29 d0                	sub    %edx,%eax
f01157ae:	01 c8                	add    %ecx,%eax
f01157b0:	8d 90 00 50 01 f6    	lea    -0x9feb000(%eax),%edx
f01157b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157b9:	39 c2                	cmp    %eax,%edx
f01157bb:	74 17                	je     f01157d4 <test_three_creation_functions+0x1f9>
f01157bd:	83 ec 04             	sub    $0x4,%esp
f01157c0:	68 70 bf 11 f0       	push   $0xf011bf70
f01157c5:	68 80 07 00 00       	push   $0x780
f01157ca:	68 76 b5 11 f0       	push   $0xf011b576
f01157cf:	e8 a2 a9 fe ff       	call   f0100176 <_panic>
	}

	cprintf("\nCongratulations!! the 3 creation functions test has completed successfully.\n");
f01157d4:	83 ec 0c             	sub    $0xc,%esp
f01157d7:	68 e0 bf 11 f0       	push   $0xf011bfe0
f01157dc:	e8 ee 15 ff ff       	call   f0106dcf <cprintf>
f01157e1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01157e4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01157e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01157ec:	5b                   	pop    %ebx
f01157ed:	5e                   	pop    %esi
f01157ee:	5f                   	pop    %edi
f01157ef:	5d                   	pop    %ebp
f01157f0:	c3                   	ret    

f01157f1 <schenv>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void schenv()
{
f01157f1:	55                   	push   %ebp
f01157f2:	89 e5                	mov    %esp,%ebp
f01157f4:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f01157f7:	c6 05 d0 73 53 f0 00 	movb   $0x0,0xf05373d0
	__ne = NULL;
f01157fe:	c7 05 9c 73 53 f0 00 	movl   $0x0,0xf053739c
f0115805:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0115808:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011580f:	eb 3f                	jmp    f0115850 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0115811:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0115816:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115819:	c1 e2 04             	shl    $0x4,%edx
f011581c:	01 d0                	add    %edx,%eax
f011581e:	83 ec 0c             	sub    $0xc,%esp
f0115821:	50                   	push   %eax
f0115822:	e8 de 36 ff ff       	call   f0108f05 <queue_size>
f0115827:	83 c4 10             	add    $0x10,%esp
f011582a:	85 c0                	test   %eax,%eax
f011582c:	74 1f                	je     f011584d <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f011582e:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0115833:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115836:	c1 e2 04             	shl    $0x4,%edx
f0115839:	01 d0                	add    %edx,%eax
f011583b:	8b 40 04             	mov    0x4(%eax),%eax
f011583e:	a3 9c 73 53 f0       	mov    %eax,0xf053739c
			__nl = i;
f0115843:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115846:	a2 d0 73 53 f0       	mov    %al,0xf05373d0
			break;
f011584b:	eb 10                	jmp    f011585d <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f011584d:	ff 45 f4             	incl   -0xc(%ebp)
f0115850:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0115855:	0f b6 c0             	movzbl %al,%eax
f0115858:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011585b:	7f b4                	jg     f0115811 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f011585d:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0115862:	85 c0                	test   %eax,%eax
f0115864:	0f 84 86 00 00 00    	je     f01158f0 <schenv+0xff>
	{
		if (__ne != NULL)
f011586a:	a1 9c 73 53 f0       	mov    0xf053739c,%eax
f011586f:	85 c0                	test   %eax,%eax
f0115871:	74 4b                	je     f01158be <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0115873:	a0 70 73 53 f0       	mov    0xf0537370,%al
f0115878:	0f b6 c0             	movzbl %al,%eax
f011587b:	8d 50 01             	lea    0x1(%eax),%edx
f011587e:	a0 d0 73 53 f0       	mov    0xf05373d0,%al
f0115883:	0f b6 c0             	movzbl %al,%eax
f0115886:	39 c2                	cmp    %eax,%edx
f0115888:	7d 66                	jge    f01158f0 <schenv+0xff>
			{
				__ne = curenv;
f011588a:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f011588f:	a3 9c 73 53 f0       	mov    %eax,0xf053739c
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0115894:	a0 70 73 53 f0       	mov    0xf0537370,%al
f0115899:	0f b6 c0             	movzbl %al,%eax
f011589c:	8a 15 c0 73 53 f0    	mov    0xf05373c0,%dl
f01158a2:	0f b6 d2             	movzbl %dl,%edx
f01158a5:	4a                   	dec    %edx
f01158a6:	39 d0                	cmp    %edx,%eax
f01158a8:	7d 08                	jge    f01158b2 <schenv+0xc1>
f01158aa:	a0 70 73 53 f0       	mov    0xf0537370,%al
f01158af:	40                   	inc    %eax
f01158b0:	eb 05                	jmp    f01158b7 <schenv+0xc6>
f01158b2:	a0 70 73 53 f0       	mov    0xf0537370,%al
f01158b7:	a2 d0 73 53 f0       	mov    %al,0xf05373d0
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01158bc:	eb 32                	jmp    f01158f0 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f01158be:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f01158c3:	a3 9c 73 53 f0       	mov    %eax,0xf053739c
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01158c8:	a0 70 73 53 f0       	mov    0xf0537370,%al
f01158cd:	0f b6 c0             	movzbl %al,%eax
f01158d0:	8a 15 c0 73 53 f0    	mov    0xf05373c0,%dl
f01158d6:	0f b6 d2             	movzbl %dl,%edx
f01158d9:	4a                   	dec    %edx
f01158da:	39 d0                	cmp    %edx,%eax
f01158dc:	7d 08                	jge    f01158e6 <schenv+0xf5>
f01158de:	a0 70 73 53 f0       	mov    0xf0537370,%al
f01158e3:	40                   	inc    %eax
f01158e4:	eb 05                	jmp    f01158eb <schenv+0xfa>
f01158e6:	a0 70 73 53 f0       	mov    0xf0537370,%al
f01158eb:	a2 d0 73 53 f0       	mov    %al,0xf05373d0
		}
	}
}
f01158f0:	90                   	nop
f01158f1:	c9                   	leave  
f01158f2:	c3                   	ret    

f01158f3 <chksch>:

void chksch(uint8 onoff)
{
f01158f3:	55                   	push   %ebp
f01158f4:	89 e5                	mov    %esp,%ebp
f01158f6:	83 ec 04             	sub    $0x4,%esp
f01158f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01158fc:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f01158ff:	c7 05 cc 73 53 f0 00 	movl   $0x0,0xf05373cc
f0115906:	00 00 00 
	__ne = NULL;
f0115909:	c7 05 9c 73 53 f0 00 	movl   $0x0,0xf053739c
f0115910:	00 00 00 
	__pl = 0 ;
f0115913:	c6 05 70 73 53 f0 00 	movb   $0x0,0xf0537370
	__nl = 0 ;
f011591a:	c6 05 d0 73 53 f0 00 	movb   $0x0,0xf05373d0
	__chkstatus = onoff;
f0115921:	8a 45 fc             	mov    -0x4(%ebp),%al
f0115924:	a2 98 73 53 f0       	mov    %al,0xf0537398
}
f0115929:	90                   	nop
f011592a:	c9                   	leave  
f011592b:	c3                   	ret    

f011592c <chk1>:
void chk1()
{
f011592c:	55                   	push   %ebp
f011592d:	89 e5                	mov    %esp,%ebp
f011592f:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0115932:	a0 98 73 53 f0       	mov    0xf0537398,%al
f0115937:	84 c0                	test   %al,%al
f0115939:	74 2b                	je     f0115966 <chk1+0x3a>
		return ;
	__pe = curenv;
f011593b:	a1 b0 6a 53 f0       	mov    0xf0536ab0,%eax
f0115940:	a3 cc 73 53 f0       	mov    %eax,0xf05373cc
	__pl = __nl ;
f0115945:	a0 d0 73 53 f0       	mov    0xf05373d0,%al
f011594a:	a2 70 73 53 f0       	mov    %al,0xf0537370
	if (__pe == NULL)
f011594f:	a1 cc 73 53 f0       	mov    0xf05373cc,%eax
f0115954:	85 c0                	test   %eax,%eax
f0115956:	75 07                	jne    f011595f <chk1+0x33>
	{
		__pl = 0;
f0115958:	c6 05 70 73 53 f0 00 	movb   $0x0,0xf0537370
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f011595f:	e8 8d fe ff ff       	call   f01157f1 <schenv>
f0115964:	eb 01                	jmp    f0115967 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0115966:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0115967:	c9                   	leave  
f0115968:	c3                   	ret    

f0115969 <chk2>:
void chk2(struct Env* __se)
{
f0115969:	55                   	push   %ebp
f011596a:	89 e5                	mov    %esp,%ebp
f011596c:	53                   	push   %ebx
f011596d:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0115970:	a0 98 73 53 f0       	mov    0xf0537398,%al
f0115975:	84 c0                	test   %al,%al
f0115977:	0f 84 19 02 00 00    	je     f0115b96 <chk2+0x22d>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f011597d:	a1 9c 73 53 f0       	mov    0xf053739c,%eax
f0115982:	39 45 08             	cmp    %eax,0x8(%ebp)
f0115985:	74 16                	je     f011599d <chk2+0x34>
f0115987:	68 94 c0 11 f0       	push   $0xf011c094
f011598c:	68 a1 c0 11 f0       	push   $0xf011c0a1
f0115991:	6a 4b                	push   $0x4b
f0115993:	68 b6 c0 11 f0       	push   $0xf011c0b6
f0115998:	e8 48 a8 fe ff       	call   f01001e5 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f011599d:	a1 9c 73 53 f0       	mov    0xf053739c,%eax
f01159a2:	85 c0                	test   %eax,%eax
f01159a4:	0f 84 04 01 00 00    	je     f0115aae <chk2+0x145>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01159aa:	8b 15 90 73 53 f0    	mov    0xf0537390,%edx
f01159b0:	a0 d0 73 53 f0       	mov    0xf05373d0,%al
f01159b5:	0f b6 c0             	movzbl %al,%eax
f01159b8:	01 d0                	add    %edx,%eax
f01159ba:	8a 00                	mov    (%eax),%al
f01159bc:	0f b6 d8             	movzbl %al,%ebx
f01159bf:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01159c4:	99                   	cltd   
f01159c5:	f7 fb                	idiv   %ebx
f01159c7:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01159cd:	8b 15 90 73 53 f0    	mov    0xf0537390,%edx
f01159d3:	a0 d0 73 53 f0       	mov    0xf05373d0,%al
f01159d8:	0f b6 c0             	movzbl %al,%eax
f01159db:	01 d0                	add    %edx,%eax
f01159dd:	8a 00                	mov    (%eax),%al
f01159df:	0f b6 d8             	movzbl %al,%ebx
f01159e2:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01159e7:	99                   	cltd   
f01159e8:	f7 fb                	idiv   %ebx
f01159ea:	89 c3                	mov    %eax,%ebx
f01159ec:	89 c8                	mov    %ecx,%eax
f01159ee:	99                   	cltd   
f01159ef:	f7 fb                	idiv   %ebx
f01159f1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f01159f5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f01159f9:	89 d0                	mov    %edx,%eax
f01159fb:	c1 e0 02             	shl    $0x2,%eax
f01159fe:	01 d0                	add    %edx,%eax
f0115a00:	01 c0                	add    %eax,%eax
f0115a02:	01 d0                	add    %edx,%eax
f0115a04:	c1 e0 02             	shl    $0x2,%eax
f0115a07:	01 d0                	add    %edx,%eax
f0115a09:	01 c0                	add    %eax,%eax
f0115a0b:	89 c1                	mov    %eax,%ecx
f0115a0d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0115a12:	f7 e9                	imul   %ecx
f0115a14:	c1 fa 05             	sar    $0x5,%edx
f0115a17:	89 c8                	mov    %ecx,%eax
f0115a19:	c1 f8 1f             	sar    $0x1f,%eax
f0115a1c:	29 c2                	sub    %eax,%edx
f0115a1e:	89 d0                	mov    %edx,%eax
f0115a20:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0_latch();
f0115a24:	e8 50 11 ff ff       	call   f0106b79 <kclock_read_cnt0_latch>
f0115a29:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0115a2d:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0115a31:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0115a35:	76 0a                	jbe    f0115a41 <chk2+0xd8>
f0115a37:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0115a3b:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0115a3f:	76 16                	jbe    f0115a57 <chk2+0xee>
f0115a41:	68 c8 c0 11 f0       	push   $0xf011c0c8
f0115a46:	68 a1 c0 11 f0       	push   $0xf011c0a1
f0115a4b:	6a 54                	push   $0x54
f0115a4d:	68 b6 c0 11 f0       	push   $0xf011c0b6
f0115a52:	e8 8e a7 fe ff       	call   f01001e5 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0115a57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115a5e:	eb 41                	jmp    f0115aa1 <chk2+0x138>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0115a60:	a1 9c 73 53 f0       	mov    0xf053739c,%eax
f0115a65:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115a68:	89 c2                	mov    %eax,%edx
f0115a6a:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0115a6f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0115a72:	c1 e1 04             	shl    $0x4,%ecx
f0115a75:	01 c8                	add    %ecx,%eax
f0115a77:	83 ec 08             	sub    $0x8,%esp
f0115a7a:	52                   	push   %edx
f0115a7b:	50                   	push   %eax
f0115a7c:	e8 fa 35 ff ff       	call   f010907b <find_env_in_queue>
f0115a81:	83 c4 10             	add    $0x10,%esp
f0115a84:	85 c0                	test   %eax,%eax
f0115a86:	74 16                	je     f0115a9e <chk2+0x135>
f0115a88:	68 ec c0 11 f0       	push   $0xf011c0ec
f0115a8d:	68 a1 c0 11 f0       	push   $0xf011c0a1
f0115a92:	6a 58                	push   $0x58
f0115a94:	68 b6 c0 11 f0       	push   $0xf011c0b6
f0115a99:	e8 47 a7 fe ff       	call   f01001e5 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0_latch();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0115a9e:	ff 45 f4             	incl   -0xc(%ebp)
f0115aa1:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0115aa6:	0f b6 c0             	movzbl %al,%eax
f0115aa9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115aac:	7f b2                	jg     f0115a60 <chk2+0xf7>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0115aae:	a1 cc 73 53 f0       	mov    0xf05373cc,%eax
f0115ab3:	85 c0                	test   %eax,%eax
f0115ab5:	0f 84 dc 00 00 00    	je     f0115b97 <chk2+0x22e>
f0115abb:	8b 15 cc 73 53 f0    	mov    0xf05373cc,%edx
f0115ac1:	a1 9c 73 53 f0       	mov    0xf053739c,%eax
f0115ac6:	39 c2                	cmp    %eax,%edx
f0115ac8:	0f 84 c9 00 00 00    	je     f0115b97 <chk2+0x22e>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0115ace:	a0 70 73 53 f0       	mov    0xf0537370,%al
f0115ad3:	0f b6 c0             	movzbl %al,%eax
f0115ad6:	8a 15 c0 73 53 f0    	mov    0xf05373c0,%dl
f0115adc:	0f b6 d2             	movzbl %dl,%edx
f0115adf:	4a                   	dec    %edx
f0115ae0:	39 d0                	cmp    %edx,%eax
f0115ae2:	74 08                	je     f0115aec <chk2+0x183>
f0115ae4:	a0 70 73 53 f0       	mov    0xf0537370,%al
f0115ae9:	40                   	inc    %eax
f0115aea:	eb 05                	jmp    f0115af1 <chk2+0x188>
f0115aec:	a0 70 73 53 f0       	mov    0xf0537370,%al
f0115af1:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0115af4:	a1 cc 73 53 f0       	mov    0xf05373cc,%eax
f0115af9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115afc:	89 c2                	mov    %eax,%edx
f0115afe:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0115b03:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0115b07:	c1 e1 04             	shl    $0x4,%ecx
f0115b0a:	01 c8                	add    %ecx,%eax
f0115b0c:	83 ec 08             	sub    $0x8,%esp
f0115b0f:	52                   	push   %edx
f0115b10:	50                   	push   %eax
f0115b11:	e8 65 35 ff ff       	call   f010907b <find_env_in_queue>
f0115b16:	83 c4 10             	add    $0x10,%esp
f0115b19:	85 c0                	test   %eax,%eax
f0115b1b:	75 16                	jne    f0115b33 <chk2+0x1ca>
f0115b1d:	68 2c c1 11 f0       	push   $0xf011c12c
f0115b22:	68 a1 c0 11 f0       	push   $0xf011c0a1
f0115b27:	6a 5e                	push   $0x5e
f0115b29:	68 b6 c0 11 f0       	push   $0xf011c0b6
f0115b2e:	e8 b2 a6 fe ff       	call   f01001e5 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0115b33:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0115b3a:	eb 4b                	jmp    f0115b87 <chk2+0x21e>
		{
			if (i == __tl) continue;
f0115b3c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0115b40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115b43:	74 3e                	je     f0115b83 <chk2+0x21a>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0115b45:	a1 cc 73 53 f0       	mov    0xf05373cc,%eax
f0115b4a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115b4d:	89 c2                	mov    %eax,%edx
f0115b4f:	a1 74 73 53 f0       	mov    0xf0537374,%eax
f0115b54:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0115b57:	c1 e1 04             	shl    $0x4,%ecx
f0115b5a:	01 c8                	add    %ecx,%eax
f0115b5c:	83 ec 08             	sub    $0x8,%esp
f0115b5f:	52                   	push   %edx
f0115b60:	50                   	push   %eax
f0115b61:	e8 15 35 ff ff       	call   f010907b <find_env_in_queue>
f0115b66:	83 c4 10             	add    $0x10,%esp
f0115b69:	85 c0                	test   %eax,%eax
f0115b6b:	74 17                	je     f0115b84 <chk2+0x21b>
f0115b6d:	68 70 c1 11 f0       	push   $0xf011c170
f0115b72:	68 a1 c0 11 f0       	push   $0xf011c0a1
f0115b77:	6a 62                	push   $0x62
f0115b79:	68 b6 c0 11 f0       	push   $0xf011c0b6
f0115b7e:	e8 62 a6 fe ff       	call   f01001e5 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0115b83:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0115b84:	ff 45 f0             	incl   -0x10(%ebp)
f0115b87:	a0 c0 73 53 f0       	mov    0xf05373c0,%al
f0115b8c:	0f b6 c0             	movzbl %al,%eax
f0115b8f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115b92:	7f a8                	jg     f0115b3c <chk2+0x1d3>
f0115b94:	eb 01                	jmp    f0115b97 <chk2+0x22e>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0115b96:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0115b97:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0115b9a:	c9                   	leave  
f0115b9b:	c3                   	ret    

f0115b9c <set_program_priority>:
#include <kern/priority_manager.h>
#include <inc/assert.h>
#include <kern/helpers.h>
#include <kern/user_environment.h>

void set_program_priority(struct Env* env, int priority) {
f0115b9c:	55                   	push   %ebp
f0115b9d:	89 e5                	mov    %esp,%ebp
f0115b9f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2022 - BONUS4] Change WS Size according to Program Priority�

	panic("This function is not implemented yet\n");
f0115ba2:	83 ec 04             	sub    $0x4,%esp
f0115ba5:	68 b0 c1 11 f0       	push   $0xf011c1b0
f0115baa:	6a 0a                	push   $0xa
f0115bac:	68 d6 c1 11 f0       	push   $0xf011c1d6
f0115bb1:	e8 c0 a5 fe ff       	call   f0100176 <_panic>

f0115bb6 <test_priority_normal_and_higher>:
extern int pf_calculate_free_frames() ;
extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115bb6:	55                   	push   %ebp
f0115bb7:	89 e5                	mov    %esp,%ebp
f0115bb9:	57                   	push   %edi
f0115bba:	56                   	push   %esi
f0115bbb:	53                   	push   %ebx
f0115bbc:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115bc2:	a0 2d ea 14 f0       	mov    0xf014ea2d,%al
f0115bc7:	84 c0                	test   %al,%al
f0115bc9:	0f 84 b7 09 00 00    	je     f0116586 <test_priority_normal_and_higher+0x9d0>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115bcf:	c6 05 2d ea 14 f0 00 	movb   $0x0,0xf014ea2d
		char command[100] = "load fos_add 20";
f0115bd6:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115bdc:	bb 4c c4 11 f0       	mov    $0xf011c44c,%ebx
f0115be1:	ba 04 00 00 00       	mov    $0x4,%edx
f0115be6:	89 c7                	mov    %eax,%edi
f0115be8:	89 de                	mov    %ebx,%esi
f0115bea:	89 d1                	mov    %edx,%ecx
f0115bec:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115bee:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115bf4:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115bf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bfe:	89 d7                	mov    %edx,%edi
f0115c00:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115c02:	83 ec 0c             	sub    $0xc,%esp
f0115c05:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115c0b:	50                   	push   %eax
f0115c0c:	e8 38 bc fe ff       	call   f0101849 <execute_command>
f0115c11:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115c14:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115c1a:	bb b0 c4 11 f0       	mov    $0xf011c4b0,%ebx
f0115c1f:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115c24:	89 c7                	mov    %eax,%edi
f0115c26:	89 de                	mov    %ebx,%esi
f0115c28:	89 d1                	mov    %edx,%ecx
f0115c2a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115c2c:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115c32:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115c37:	b0 00                	mov    $0x0,%al
f0115c39:	89 d7                	mov    %edx,%edi
f0115c3b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115c3d:	83 ec 0c             	sub    $0xc,%esp
f0115c40:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115c46:	50                   	push   %eax
f0115c47:	e8 fd bb fe ff       	call   f0101849 <execute_command>
f0115c4c:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115c4f:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115c55:	bb 14 c5 11 f0       	mov    $0xf011c514,%ebx
f0115c5a:	ba 17 00 00 00       	mov    $0x17,%edx
f0115c5f:	89 c7                	mov    %eax,%edi
f0115c61:	89 de                	mov    %ebx,%esi
f0115c63:	89 d1                	mov    %edx,%ecx
f0115c65:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115c67:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115c6d:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115c72:	b0 00                	mov    $0x0,%al
f0115c74:	89 d7                	mov    %edx,%edi
f0115c76:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115c78:	83 ec 0c             	sub    $0xc,%esp
f0115c7b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115c81:	50                   	push   %eax
f0115c82:	e8 c2 bb fe ff       	call   f0101849 <execute_command>
f0115c87:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115c8a:	83 ec 04             	sub    $0x4,%esp
f0115c8d:	6a 00                	push   $0x0
f0115c8f:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115c92:	50                   	push   %eax
f0115c93:	68 00 10 00 00       	push   $0x1000
f0115c98:	e8 15 d4 fe ff       	call   f01030b2 <envid2env>
f0115c9d:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115ca0:	83 ec 04             	sub    $0x4,%esp
f0115ca3:	6a 00                	push   $0x0
f0115ca5:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115ca8:	50                   	push   %eax
f0115ca9:	68 01 10 00 00       	push   $0x1001
f0115cae:	e8 ff d3 fe ff       	call   f01030b2 <envid2env>
f0115cb3:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115cb6:	83 ec 04             	sub    $0x4,%esp
f0115cb9:	6a 00                	push   $0x0
f0115cbb:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115cbe:	50                   	push   %eax
f0115cbf:	68 02 10 00 00       	push   $0x1002
f0115cc4:	e8 e9 d3 fe ff       	call   f01030b2 <envid2env>
f0115cc9:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115ccc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ccf:	85 c0                	test   %eax,%eax
f0115cd1:	74 0e                	je     f0115ce1 <test_priority_normal_and_higher+0x12b>
f0115cd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115cd6:	85 c0                	test   %eax,%eax
f0115cd8:	74 07                	je     f0115ce1 <test_priority_normal_and_higher+0x12b>
f0115cda:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cdd:	85 c0                	test   %eax,%eax
f0115cdf:	75 14                	jne    f0115cf5 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115ce1:	83 ec 04             	sub    $0x4,%esp
f0115ce4:	68 f0 c1 11 f0       	push   $0xf011c1f0
f0115ce9:	6a 27                	push   $0x27
f0115ceb:	68 09 c2 11 f0       	push   $0xf011c209
f0115cf0:	e8 81 a4 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115cf5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115cf8:	8b 40 74             	mov    0x74(%eax),%eax
f0115cfb:	83 f8 14             	cmp    $0x14,%eax
f0115cfe:	75 16                	jne    f0115d16 <test_priority_normal_and_higher+0x160>
f0115d00:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d03:	8b 40 74             	mov    0x74(%eax),%eax
f0115d06:	83 f8 0f             	cmp    $0xf,%eax
f0115d09:	75 0b                	jne    f0115d16 <test_priority_normal_and_higher+0x160>
f0115d0b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d0e:	8b 40 74             	mov    0x74(%eax),%eax
f0115d11:	83 f8 0a             	cmp    $0xa,%eax
f0115d14:	74 14                	je     f0115d2a <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115d16:	83 ec 04             	sub    $0x4,%esp
f0115d19:	68 20 c2 11 f0       	push   $0xf011c220
f0115d1e:	6a 2a                	push   $0x2a
f0115d20:	68 09 c2 11 f0       	push   $0xf011c209
f0115d25:	e8 4c a4 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0115d2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115d31:	eb 44                	jmp    f0115d77 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115d33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d36:	8b 48 78             	mov    0x78(%eax),%ecx
f0115d39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115d3c:	89 d0                	mov    %edx,%eax
f0115d3e:	01 c0                	add    %eax,%eax
f0115d40:	01 d0                	add    %edx,%eax
f0115d42:	c1 e0 02             	shl    $0x2,%eax
f0115d45:	01 c8                	add    %ecx,%eax
f0115d47:	8b 10                	mov    (%eax),%edx
f0115d49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115d4c:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115d53:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d56:	8b 48 78             	mov    0x78(%eax),%ecx
f0115d59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115d5c:	89 d0                	mov    %edx,%eax
f0115d5e:	01 c0                	add    %eax,%eax
f0115d60:	01 d0                	add    %edx,%eax
f0115d62:	c1 e0 02             	shl    $0x2,%eax
f0115d65:	01 c8                	add    %ecx,%eax
f0115d67:	8b 50 08             	mov    0x8(%eax),%edx
f0115d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115d6d:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115d74:	ff 45 e4             	incl   -0x1c(%ebp)
f0115d77:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115d7b:	7e b6                	jle    f0115d33 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115d7d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115d84:	eb 44                	jmp    f0115dca <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115d86:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d89:	8b 48 78             	mov    0x78(%eax),%ecx
f0115d8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115d8f:	89 d0                	mov    %edx,%eax
f0115d91:	01 c0                	add    %eax,%eax
f0115d93:	01 d0                	add    %edx,%eax
f0115d95:	c1 e0 02             	shl    $0x2,%eax
f0115d98:	01 c8                	add    %ecx,%eax
f0115d9a:	8b 10                	mov    (%eax),%edx
f0115d9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115d9f:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115da6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115da9:	8b 48 78             	mov    0x78(%eax),%ecx
f0115dac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115daf:	89 d0                	mov    %edx,%eax
f0115db1:	01 c0                	add    %eax,%eax
f0115db3:	01 d0                	add    %edx,%eax
f0115db5:	c1 e0 02             	shl    $0x2,%eax
f0115db8:	01 c8                	add    %ecx,%eax
f0115dba:	8b 50 08             	mov    0x8(%eax),%edx
f0115dbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115dc0:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115dc7:	ff 45 e0             	incl   -0x20(%ebp)
f0115dca:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115dce:	7e b6                	jle    f0115d86 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115dd0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115dd7:	eb 44                	jmp    f0115e1d <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115dd9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ddc:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ddf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115de2:	89 d0                	mov    %edx,%eax
f0115de4:	01 c0                	add    %eax,%eax
f0115de6:	01 d0                	add    %edx,%eax
f0115de8:	c1 e0 02             	shl    $0x2,%eax
f0115deb:	01 c8                	add    %ecx,%eax
f0115ded:	8b 10                	mov    (%eax),%edx
f0115def:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115df2:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115df9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115dfc:	8b 48 78             	mov    0x78(%eax),%ecx
f0115dff:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115e02:	89 d0                	mov    %edx,%eax
f0115e04:	01 c0                	add    %eax,%eax
f0115e06:	01 d0                	add    %edx,%eax
f0115e08:	c1 e0 02             	shl    $0x2,%eax
f0115e0b:	01 c8                	add    %ecx,%eax
f0115e0d:	8b 50 08             	mov    0x8(%eax),%edx
f0115e10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115e13:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115e1a:	ff 45 dc             	incl   -0x24(%ebp)
f0115e1d:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115e21:	7e b6                	jle    f0115dd9 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115e23:	e8 b6 4b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115e28:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115e2b:	e8 71 60 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115e30:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115e33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e36:	83 ec 08             	sub    $0x8,%esp
f0115e39:	6a 03                	push   $0x3
f0115e3b:	50                   	push   %eax
f0115e3c:	e8 5b fd ff ff       	call   f0115b9c <set_program_priority>
f0115e41:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115e44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e47:	83 ec 08             	sub    $0x8,%esp
f0115e4a:	6a 03                	push   $0x3
f0115e4c:	50                   	push   %eax
f0115e4d:	e8 4a fd ff ff       	call   f0115b9c <set_program_priority>
f0115e52:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115e55:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e58:	83 ec 08             	sub    $0x8,%esp
f0115e5b:	6a 03                	push   $0x3
f0115e5d:	50                   	push   %eax
f0115e5e:	e8 39 fd ff ff       	call   f0115b9c <set_program_priority>
f0115e63:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e66:	e8 36 60 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115e6b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115e6e:	74 14                	je     f0115e84 <test_priority_normal_and_higher+0x2ce>
f0115e70:	83 ec 04             	sub    $0x4,%esp
f0115e73:	68 6c c2 11 f0       	push   $0xf011c26c
f0115e78:	6a 46                	push   $0x46
f0115e7a:	68 09 c2 11 f0       	push   $0xf011c209
f0115e7f:	e8 f2 a2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115e84:	e8 55 4b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115e89:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115e8c:	74 14                	je     f0115ea2 <test_priority_normal_and_higher+0x2ec>
f0115e8e:	83 ec 04             	sub    $0x4,%esp
f0115e91:	68 6c c2 11 f0       	push   $0xf011c26c
f0115e96:	6a 47                	push   $0x47
f0115e98:	68 09 c2 11 f0       	push   $0xf011c209
f0115e9d:	e8 d4 a2 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115ea2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ea5:	8b 40 74             	mov    0x74(%eax),%eax
f0115ea8:	83 f8 14             	cmp    $0x14,%eax
f0115eab:	75 16                	jne    f0115ec3 <test_priority_normal_and_higher+0x30d>
f0115ead:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115eb0:	8b 40 74             	mov    0x74(%eax),%eax
f0115eb3:	83 f8 0f             	cmp    $0xf,%eax
f0115eb6:	75 0b                	jne    f0115ec3 <test_priority_normal_and_higher+0x30d>
f0115eb8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ebb:	8b 40 74             	mov    0x74(%eax),%eax
f0115ebe:	83 f8 0a             	cmp    $0xa,%eax
f0115ec1:	74 14                	je     f0115ed7 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115ec3:	83 ec 04             	sub    $0x4,%esp
f0115ec6:	68 98 c2 11 f0       	push   $0xf011c298
f0115ecb:	6a 4a                	push   $0x4a
f0115ecd:	68 09 c2 11 f0       	push   $0xf011c209
f0115ed2:	e8 9f a2 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115ed7:	e8 02 4b ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115edc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115edf:	e8 bd 5f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115ee4:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115ee7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115eea:	83 ec 08             	sub    $0x8,%esp
f0115eed:	6a 04                	push   $0x4
f0115eef:	50                   	push   %eax
f0115ef0:	e8 a7 fc ff ff       	call   f0115b9c <set_program_priority>
f0115ef5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115ef8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115efb:	83 ec 08             	sub    $0x8,%esp
f0115efe:	6a 04                	push   $0x4
f0115f00:	50                   	push   %eax
f0115f01:	e8 96 fc ff ff       	call   f0115b9c <set_program_priority>
f0115f06:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115f09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f0c:	83 ec 08             	sub    $0x8,%esp
f0115f0f:	6a 04                	push   $0x4
f0115f11:	50                   	push   %eax
f0115f12:	e8 85 fc ff ff       	call   f0115b9c <set_program_priority>
f0115f17:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115f1a:	e8 82 5f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115f1f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115f22:	74 14                	je     f0115f38 <test_priority_normal_and_higher+0x382>
f0115f24:	83 ec 04             	sub    $0x4,%esp
f0115f27:	68 6c c2 11 f0       	push   $0xf011c26c
f0115f2c:	6a 54                	push   $0x54
f0115f2e:	68 09 c2 11 f0       	push   $0xf011c209
f0115f33:	e8 3e a2 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115f38:	e8 a1 4a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115f3d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115f40:	74 14                	je     f0115f56 <test_priority_normal_and_higher+0x3a0>
f0115f42:	83 ec 04             	sub    $0x4,%esp
f0115f45:	68 ec c2 11 f0       	push   $0xf011c2ec
f0115f4a:	6a 55                	push   $0x55
f0115f4c:	68 09 c2 11 f0       	push   $0xf011c209
f0115f51:	e8 20 a2 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115f56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f59:	8b 40 74             	mov    0x74(%eax),%eax
f0115f5c:	83 f8 14             	cmp    $0x14,%eax
f0115f5f:	75 16                	jne    f0115f77 <test_priority_normal_and_higher+0x3c1>
f0115f61:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f64:	8b 40 74             	mov    0x74(%eax),%eax
f0115f67:	83 f8 0f             	cmp    $0xf,%eax
f0115f6a:	75 0b                	jne    f0115f77 <test_priority_normal_and_higher+0x3c1>
f0115f6c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f6f:	8b 40 74             	mov    0x74(%eax),%eax
f0115f72:	83 f8 14             	cmp    $0x14,%eax
f0115f75:	74 14                	je     f0115f8b <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115f77:	83 ec 04             	sub    $0x4,%esp
f0115f7a:	68 1c c3 11 f0       	push   $0xf011c31c
f0115f7f:	6a 58                	push   $0x58
f0115f81:	68 09 c2 11 f0       	push   $0xf011c209
f0115f86:	e8 eb a1 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115f8b:	e8 4e 4a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115f90:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115f93:	e8 09 5f ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115f98:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115f9b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f9e:	83 ec 08             	sub    $0x8,%esp
f0115fa1:	6a 04                	push   $0x4
f0115fa3:	50                   	push   %eax
f0115fa4:	e8 f3 fb ff ff       	call   f0115b9c <set_program_priority>
f0115fa9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115fac:	e8 f0 5e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0115fb1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115fb4:	74 14                	je     f0115fca <test_priority_normal_and_higher+0x414>
f0115fb6:	83 ec 04             	sub    $0x4,%esp
f0115fb9:	68 6c c2 11 f0       	push   $0xf011c26c
f0115fbe:	6a 60                	push   $0x60
f0115fc0:	68 09 c2 11 f0       	push   $0xf011c209
f0115fc5:	e8 ac a1 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115fca:	e8 0f 4a ff ff       	call   f010a9de <sys_calculate_free_frames>
f0115fcf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115fd2:	74 14                	je     f0115fe8 <test_priority_normal_and_higher+0x432>
f0115fd4:	83 ec 04             	sub    $0x4,%esp
f0115fd7:	68 6c c2 11 f0       	push   $0xf011c26c
f0115fdc:	6a 61                	push   $0x61
f0115fde:	68 09 c2 11 f0       	push   $0xf011c209
f0115fe3:	e8 8e a1 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115fe8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115feb:	8b 40 74             	mov    0x74(%eax),%eax
f0115fee:	83 f8 14             	cmp    $0x14,%eax
f0115ff1:	75 16                	jne    f0116009 <test_priority_normal_and_higher+0x453>
f0115ff3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ff6:	8b 40 74             	mov    0x74(%eax),%eax
f0115ff9:	83 f8 0f             	cmp    $0xf,%eax
f0115ffc:	75 0b                	jne    f0116009 <test_priority_normal_and_higher+0x453>
f0115ffe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116001:	8b 40 74             	mov    0x74(%eax),%eax
f0116004:	83 f8 14             	cmp    $0x14,%eax
f0116007:	74 14                	je     f011601d <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116009:	83 ec 04             	sub    $0x4,%esp
f011600c:	68 64 c3 11 f0       	push   $0xf011c364
f0116011:	6a 64                	push   $0x64
f0116013:	68 09 c2 11 f0       	push   $0xf011c209
f0116018:	e8 59 a1 fe ff       	call   f0100176 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011601d:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116024:	eb 1b                	jmp    f0116041 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116026:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116029:	8b 48 78             	mov    0x78(%eax),%ecx
f011602c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011602f:	89 d0                	mov    %edx,%eax
f0116031:	01 c0                	add    %eax,%eax
f0116033:	01 d0                	add    %edx,%eax
f0116035:	c1 e0 02             	shl    $0x2,%eax
f0116038:	01 c8                	add    %ecx,%eax
f011603a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011603e:	ff 45 d8             	incl   -0x28(%ebp)
f0116041:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116045:	7e df                	jle    f0116026 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116047:	e8 92 49 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011604c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011604f:	e8 4d 5e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116054:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116057:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011605a:	83 ec 08             	sub    $0x8,%esp
f011605d:	6a 04                	push   $0x4
f011605f:	50                   	push   %eax
f0116060:	e8 37 fb ff ff       	call   f0115b9c <set_program_priority>
f0116065:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116068:	e8 34 5e ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011606d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116070:	74 14                	je     f0116086 <test_priority_normal_and_higher+0x4d0>
f0116072:	83 ec 04             	sub    $0x4,%esp
f0116075:	68 6c c2 11 f0       	push   $0xf011c26c
f011607a:	6a 71                	push   $0x71
f011607c:	68 09 c2 11 f0       	push   $0xf011c209
f0116081:	e8 f0 a0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116086:	e8 53 49 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011608b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011608e:	74 14                	je     f01160a4 <test_priority_normal_and_higher+0x4ee>
f0116090:	83 ec 04             	sub    $0x4,%esp
f0116093:	68 6c c2 11 f0       	push   $0xf011c26c
f0116098:	6a 72                	push   $0x72
f011609a:	68 09 c2 11 f0       	push   $0xf011c209
f011609f:	e8 d2 a0 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01160a4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01160a7:	8b 40 74             	mov    0x74(%eax),%eax
f01160aa:	83 f8 14             	cmp    $0x14,%eax
f01160ad:	75 16                	jne    f01160c5 <test_priority_normal_and_higher+0x50f>
f01160af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160b2:	8b 40 74             	mov    0x74(%eax),%eax
f01160b5:	83 f8 0f             	cmp    $0xf,%eax
f01160b8:	75 0b                	jne    f01160c5 <test_priority_normal_and_higher+0x50f>
f01160ba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160bd:	8b 40 74             	mov    0x74(%eax),%eax
f01160c0:	83 f8 14             	cmp    $0x14,%eax
f01160c3:	74 14                	je     f01160d9 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f01160c5:	83 ec 04             	sub    $0x4,%esp
f01160c8:	68 64 c3 11 f0       	push   $0xf011c364
f01160cd:	6a 75                	push   $0x75
f01160cf:	68 09 c2 11 f0       	push   $0xf011c209
f01160d4:	e8 9d a0 fe ff       	call   f0100176 <_panic>

		for(int i = 10; i < 15; i++)
f01160d9:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01160e0:	eb 1b                	jmp    f01160fd <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01160e2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160e5:	8b 48 78             	mov    0x78(%eax),%ecx
f01160e8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01160eb:	89 d0                	mov    %edx,%eax
f01160ed:	01 c0                	add    %eax,%eax
f01160ef:	01 d0                	add    %edx,%eax
f01160f1:	c1 e0 02             	shl    $0x2,%eax
f01160f4:	01 c8                	add    %ecx,%eax
f01160f6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01160fa:	ff 45 d4             	incl   -0x2c(%ebp)
f01160fd:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116101:	7e df                	jle    f01160e2 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116103:	e8 d6 48 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116108:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011610b:	e8 91 5d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116110:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116113:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116116:	83 ec 08             	sub    $0x8,%esp
f0116119:	6a 05                	push   $0x5
f011611b:	50                   	push   %eax
f011611c:	e8 7b fa ff ff       	call   f0115b9c <set_program_priority>
f0116121:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116124:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116127:	83 ec 08             	sub    $0x8,%esp
f011612a:	6a 05                	push   $0x5
f011612c:	50                   	push   %eax
f011612d:	e8 6a fa ff ff       	call   f0115b9c <set_program_priority>
f0116132:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116135:	e8 67 5d ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011613a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011613d:	74 17                	je     f0116156 <test_priority_normal_and_higher+0x5a0>
f011613f:	83 ec 04             	sub    $0x4,%esp
f0116142:	68 6c c2 11 f0       	push   $0xf011c26c
f0116147:	68 80 00 00 00       	push   $0x80
f011614c:	68 09 c2 11 f0       	push   $0xf011c209
f0116151:	e8 20 a0 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116156:	e8 83 48 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011615b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011615e:	74 17                	je     f0116177 <test_priority_normal_and_higher+0x5c1>
f0116160:	83 ec 04             	sub    $0x4,%esp
f0116163:	68 6c c2 11 f0       	push   $0xf011c26c
f0116168:	68 81 00 00 00       	push   $0x81
f011616d:	68 09 c2 11 f0       	push   $0xf011c209
f0116172:	e8 ff 9f fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116177:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011617a:	8b 40 74             	mov    0x74(%eax),%eax
f011617d:	83 f8 14             	cmp    $0x14,%eax
f0116180:	75 16                	jne    f0116198 <test_priority_normal_and_higher+0x5e2>
f0116182:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116185:	8b 40 74             	mov    0x74(%eax),%eax
f0116188:	83 f8 1e             	cmp    $0x1e,%eax
f011618b:	75 0b                	jne    f0116198 <test_priority_normal_and_higher+0x5e2>
f011618d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116190:	8b 40 74             	mov    0x74(%eax),%eax
f0116193:	83 f8 28             	cmp    $0x28,%eax
f0116196:	74 17                	je     f01161af <test_priority_normal_and_higher+0x5f9>
			panic("The programs' working set size should be doubled if full\n");
f0116198:	83 ec 04             	sub    $0x4,%esp
f011619b:	68 a0 c3 11 f0       	push   $0xf011c3a0
f01161a0:	68 84 00 00 00       	push   $0x84
f01161a5:	68 09 c2 11 f0       	push   $0xf011c209
f01161aa:	e8 c7 9f fe ff       	call   f0100176 <_panic>

		for(int i = 20; i < 40; i++)
f01161af:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01161b6:	eb 1b                	jmp    f01161d3 <test_priority_normal_and_higher+0x61d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01161b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161bb:	8b 48 78             	mov    0x78(%eax),%ecx
f01161be:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01161c1:	89 d0                	mov    %edx,%eax
f01161c3:	01 c0                	add    %eax,%eax
f01161c5:	01 d0                	add    %edx,%eax
f01161c7:	c1 e0 02             	shl    $0x2,%eax
f01161ca:	01 c8                	add    %ecx,%eax
f01161cc:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01161d0:	ff 45 d0             	incl   -0x30(%ebp)
f01161d3:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01161d7:	7e df                	jle    f01161b8 <test_priority_normal_and_higher+0x602>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01161d9:	e8 00 48 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01161de:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01161e1:	e8 bb 5c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01161e6:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01161e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161ec:	83 ec 08             	sub    $0x8,%esp
f01161ef:	6a 05                	push   $0x5
f01161f1:	50                   	push   %eax
f01161f2:	e8 a5 f9 ff ff       	call   f0115b9c <set_program_priority>
f01161f7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01161fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161fd:	83 ec 08             	sub    $0x8,%esp
f0116200:	6a 04                	push   $0x4
f0116202:	50                   	push   %eax
f0116203:	e8 94 f9 ff ff       	call   f0115b9c <set_program_priority>
f0116208:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011620b:	e8 91 5c ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116210:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116213:	74 17                	je     f011622c <test_priority_normal_and_higher+0x676>
f0116215:	83 ec 04             	sub    $0x4,%esp
f0116218:	68 6c c2 11 f0       	push   $0xf011c26c
f011621d:	68 8f 00 00 00       	push   $0x8f
f0116222:	68 09 c2 11 f0       	push   $0xf011c209
f0116227:	e8 4a 9f fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011622c:	e8 ad 47 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116231:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116234:	74 17                	je     f011624d <test_priority_normal_and_higher+0x697>
f0116236:	83 ec 04             	sub    $0x4,%esp
f0116239:	68 6c c2 11 f0       	push   $0xf011c26c
f011623e:	68 90 00 00 00       	push   $0x90
f0116243:	68 09 c2 11 f0       	push   $0xf011c209
f0116248:	e8 29 9f fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011624d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116250:	8b 40 74             	mov    0x74(%eax),%eax
f0116253:	83 f8 14             	cmp    $0x14,%eax
f0116256:	75 16                	jne    f011626e <test_priority_normal_and_higher+0x6b8>
f0116258:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011625b:	8b 40 74             	mov    0x74(%eax),%eax
f011625e:	83 f8 1e             	cmp    $0x1e,%eax
f0116261:	75 0b                	jne    f011626e <test_priority_normal_and_higher+0x6b8>
f0116263:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116266:	8b 40 74             	mov    0x74(%eax),%eax
f0116269:	83 f8 28             	cmp    $0x28,%eax
f011626c:	74 17                	je     f0116285 <test_priority_normal_and_higher+0x6cf>
			panic("The programs' working set size should be doubled if full\n");
f011626e:	83 ec 04             	sub    $0x4,%esp
f0116271:	68 a0 c3 11 f0       	push   $0xf011c3a0
f0116276:	68 93 00 00 00       	push   $0x93
f011627b:	68 09 c2 11 f0       	push   $0xf011c209
f0116280:	e8 f1 9e fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 30; i++)
f0116285:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f011628c:	eb 1b                	jmp    f01162a9 <test_priority_normal_and_higher+0x6f3>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011628e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116291:	8b 48 78             	mov    0x78(%eax),%ecx
f0116294:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116297:	89 d0                	mov    %edx,%eax
f0116299:	01 c0                	add    %eax,%eax
f011629b:	01 d0                	add    %edx,%eax
f011629d:	c1 e0 02             	shl    $0x2,%eax
f01162a0:	01 c8                	add    %ecx,%eax
f01162a2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01162a6:	ff 45 cc             	incl   -0x34(%ebp)
f01162a9:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01162ad:	7e df                	jle    f011628e <test_priority_normal_and_higher+0x6d8>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01162af:	e8 2a 47 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01162b4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162b7:	e8 e5 5b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01162bc:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01162bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162c2:	83 ec 08             	sub    $0x8,%esp
f01162c5:	6a 05                	push   $0x5
f01162c7:	50                   	push   %eax
f01162c8:	e8 cf f8 ff ff       	call   f0115b9c <set_program_priority>
f01162cd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01162d0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162d3:	83 ec 08             	sub    $0x8,%esp
f01162d6:	6a 04                	push   $0x4
f01162d8:	50                   	push   %eax
f01162d9:	e8 be f8 ff ff       	call   f0115b9c <set_program_priority>
f01162de:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01162e1:	e8 bb 5b ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01162e6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01162e9:	74 17                	je     f0116302 <test_priority_normal_and_higher+0x74c>
f01162eb:	83 ec 04             	sub    $0x4,%esp
f01162ee:	68 6c c2 11 f0       	push   $0xf011c26c
f01162f3:	68 9e 00 00 00       	push   $0x9e
f01162f8:	68 09 c2 11 f0       	push   $0xf011c209
f01162fd:	e8 74 9e fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116302:	e8 d7 46 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116307:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011630a:	74 17                	je     f0116323 <test_priority_normal_and_higher+0x76d>
f011630c:	83 ec 04             	sub    $0x4,%esp
f011630f:	68 6c c2 11 f0       	push   $0xf011c26c
f0116314:	68 9f 00 00 00       	push   $0x9f
f0116319:	68 09 c2 11 f0       	push   $0xf011c209
f011631e:	e8 53 9e fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116323:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116326:	8b 40 74             	mov    0x74(%eax),%eax
f0116329:	83 f8 14             	cmp    $0x14,%eax
f011632c:	75 16                	jne    f0116344 <test_priority_normal_and_higher+0x78e>
f011632e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116331:	8b 40 74             	mov    0x74(%eax),%eax
f0116334:	83 f8 3c             	cmp    $0x3c,%eax
f0116337:	75 0b                	jne    f0116344 <test_priority_normal_and_higher+0x78e>
f0116339:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011633c:	8b 40 74             	mov    0x74(%eax),%eax
f011633f:	83 f8 28             	cmp    $0x28,%eax
f0116342:	74 17                	je     f011635b <test_priority_normal_and_higher+0x7a5>
			panic("The programs' working set size should be doubled if full\n");
f0116344:	83 ec 04             	sub    $0x4,%esp
f0116347:	68 a0 c3 11 f0       	push   $0xf011c3a0
f011634c:	68 a2 00 00 00       	push   $0xa2
f0116351:	68 09 c2 11 f0       	push   $0xf011c209
f0116356:	e8 1b 9e fe ff       	call   f0100176 <_panic>

		for(int i = 15; i < 60; i++)
f011635b:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116362:	eb 1b                	jmp    f011637f <test_priority_normal_and_higher+0x7c9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116364:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116367:	8b 48 78             	mov    0x78(%eax),%ecx
f011636a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011636d:	89 d0                	mov    %edx,%eax
f011636f:	01 c0                	add    %eax,%eax
f0116371:	01 d0                	add    %edx,%eax
f0116373:	c1 e0 02             	shl    $0x2,%eax
f0116376:	01 c8                	add    %ecx,%eax
f0116378:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011637c:	ff 45 c8             	incl   -0x38(%ebp)
f011637f:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116383:	7e df                	jle    f0116364 <test_priority_normal_and_higher+0x7ae>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116385:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011638c:	eb 1b                	jmp    f01163a9 <test_priority_normal_and_higher+0x7f3>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f011638e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116391:	8b 48 78             	mov    0x78(%eax),%ecx
f0116394:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116397:	89 d0                	mov    %edx,%eax
f0116399:	01 c0                	add    %eax,%eax
f011639b:	01 d0                	add    %edx,%eax
f011639d:	c1 e0 02             	shl    $0x2,%eax
f01163a0:	01 c8                	add    %ecx,%eax
f01163a2:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01163a6:	ff 45 c4             	incl   -0x3c(%ebp)
f01163a9:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01163ad:	7e df                	jle    f011638e <test_priority_normal_and_higher+0x7d8>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01163af:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01163b6:	eb 7a                	jmp    f0116432 <test_priority_normal_and_higher+0x87c>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01163b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01163bb:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01163c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01163c5:	8b 58 78             	mov    0x78(%eax),%ebx
f01163c8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01163cb:	89 d0                	mov    %edx,%eax
f01163cd:	01 c0                	add    %eax,%eax
f01163cf:	01 d0                	add    %edx,%eax
f01163d1:	c1 e0 02             	shl    $0x2,%eax
f01163d4:	01 d8                	add    %ebx,%eax
f01163d6:	8b 00                	mov    (%eax),%eax
f01163d8:	39 c1                	cmp    %eax,%ecx
f01163da:	74 17                	je     f01163f3 <test_priority_normal_and_higher+0x83d>
				panic("Working set should be moved properly to the new one");
f01163dc:	83 ec 04             	sub    $0x4,%esp
f01163df:	68 dc c3 11 f0       	push   $0xf011c3dc
f01163e4:	68 b0 00 00 00       	push   $0xb0
f01163e9:	68 09 c2 11 f0       	push   $0xf011c209
f01163ee:	e8 83 9d fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01163f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01163f6:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01163fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116400:	8b 58 78             	mov    0x78(%eax),%ebx
f0116403:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116406:	89 d0                	mov    %edx,%eax
f0116408:	01 c0                	add    %eax,%eax
f011640a:	01 d0                	add    %edx,%eax
f011640c:	c1 e0 02             	shl    $0x2,%eax
f011640f:	01 d8                	add    %ebx,%eax
f0116411:	8b 40 08             	mov    0x8(%eax),%eax
f0116414:	39 c1                	cmp    %eax,%ecx
f0116416:	74 17                	je     f011642f <test_priority_normal_and_higher+0x879>
				panic("Working set should be moved properly to the new one");
f0116418:	83 ec 04             	sub    $0x4,%esp
f011641b:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116420:	68 b3 00 00 00       	push   $0xb3
f0116425:	68 09 c2 11 f0       	push   $0xf011c209
f011642a:	e8 47 9d fe ff       	call   f0100176 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011642f:	ff 45 c0             	incl   -0x40(%ebp)
f0116432:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116436:	7e 80                	jle    f01163b8 <test_priority_normal_and_higher+0x802>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011643f:	eb 7a                	jmp    f01164bb <test_priority_normal_and_higher+0x905>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116441:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116444:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011644b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011644e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116451:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116454:	89 d0                	mov    %edx,%eax
f0116456:	01 c0                	add    %eax,%eax
f0116458:	01 d0                	add    %edx,%eax
f011645a:	c1 e0 02             	shl    $0x2,%eax
f011645d:	01 d8                	add    %ebx,%eax
f011645f:	8b 00                	mov    (%eax),%eax
f0116461:	39 c1                	cmp    %eax,%ecx
f0116463:	74 17                	je     f011647c <test_priority_normal_and_higher+0x8c6>
				panic("Working set should be moved properly to the new one");
f0116465:	83 ec 04             	sub    $0x4,%esp
f0116468:	68 dc c3 11 f0       	push   $0xf011c3dc
f011646d:	68 b9 00 00 00       	push   $0xb9
f0116472:	68 09 c2 11 f0       	push   $0xf011c209
f0116477:	e8 fa 9c fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011647c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011647f:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116486:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116489:	8b 58 78             	mov    0x78(%eax),%ebx
f011648c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011648f:	89 d0                	mov    %edx,%eax
f0116491:	01 c0                	add    %eax,%eax
f0116493:	01 d0                	add    %edx,%eax
f0116495:	c1 e0 02             	shl    $0x2,%eax
f0116498:	01 d8                	add    %ebx,%eax
f011649a:	8b 40 08             	mov    0x8(%eax),%eax
f011649d:	39 c1                	cmp    %eax,%ecx
f011649f:	74 17                	je     f01164b8 <test_priority_normal_and_higher+0x902>
				panic("Working set should be moved properly to the new one");
f01164a1:	83 ec 04             	sub    $0x4,%esp
f01164a4:	68 dc c3 11 f0       	push   $0xf011c3dc
f01164a9:	68 bc 00 00 00       	push   $0xbc
f01164ae:	68 09 c2 11 f0       	push   $0xf011c209
f01164b3:	e8 be 9c fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01164b8:	ff 45 bc             	incl   -0x44(%ebp)
f01164bb:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01164bf:	7e 80                	jle    f0116441 <test_priority_normal_and_higher+0x88b>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01164c1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01164c8:	eb 7a                	jmp    f0116544 <test_priority_normal_and_higher+0x98e>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01164ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164cd:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01164d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164d7:	8b 58 78             	mov    0x78(%eax),%ebx
f01164da:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01164dd:	89 d0                	mov    %edx,%eax
f01164df:	01 c0                	add    %eax,%eax
f01164e1:	01 d0                	add    %edx,%eax
f01164e3:	c1 e0 02             	shl    $0x2,%eax
f01164e6:	01 d8                	add    %ebx,%eax
f01164e8:	8b 00                	mov    (%eax),%eax
f01164ea:	39 c1                	cmp    %eax,%ecx
f01164ec:	74 17                	je     f0116505 <test_priority_normal_and_higher+0x94f>
				panic("Working set should be moved properly to the new one");
f01164ee:	83 ec 04             	sub    $0x4,%esp
f01164f1:	68 dc c3 11 f0       	push   $0xf011c3dc
f01164f6:	68 c2 00 00 00       	push   $0xc2
f01164fb:	68 09 c2 11 f0       	push   $0xf011c209
f0116500:	e8 71 9c fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116505:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116508:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011650f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116512:	8b 58 78             	mov    0x78(%eax),%ebx
f0116515:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116518:	89 d0                	mov    %edx,%eax
f011651a:	01 c0                	add    %eax,%eax
f011651c:	01 d0                	add    %edx,%eax
f011651e:	c1 e0 02             	shl    $0x2,%eax
f0116521:	01 d8                	add    %ebx,%eax
f0116523:	8b 40 08             	mov    0x8(%eax),%eax
f0116526:	39 c1                	cmp    %eax,%ecx
f0116528:	74 17                	je     f0116541 <test_priority_normal_and_higher+0x98b>
				panic("Working set should be moved properly to the new one");
f011652a:	83 ec 04             	sub    $0x4,%esp
f011652d:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116532:	68 c5 00 00 00       	push   $0xc5
f0116537:	68 09 c2 11 f0       	push   $0xf011c209
f011653c:	e8 35 9c fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116541:	ff 45 b8             	incl   -0x48(%ebp)
f0116544:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116548:	7e 80                	jle    f01164ca <test_priority_normal_and_higher+0x914>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011654a:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116551:	75 6e 61 
f0116554:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011655b:	6c 00 00 
f011655e:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116564:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116569:	b8 00 00 00 00       	mov    $0x0,%eax
f011656e:	89 d7                	mov    %edx,%edi
f0116570:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116572:	83 ec 0c             	sub    $0xc,%esp
f0116575:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011657b:	50                   	push   %eax
f011657c:	e8 c8 b2 fe ff       	call   f0101849 <execute_command>
f0116581:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116584:	eb 10                	jmp    f0116596 <test_priority_normal_and_higher+0x9e0>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116586:	83 ec 0c             	sub    $0xc,%esp
f0116589:	68 10 c4 11 f0       	push   $0xf011c410
f011658e:	e8 3c 08 ff ff       	call   f0106dcf <cprintf>
f0116593:	83 c4 10             	add    $0x10,%esp
	}
}
f0116596:	90                   	nop
f0116597:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011659a:	5b                   	pop    %ebx
f011659b:	5e                   	pop    %esi
f011659c:	5f                   	pop    %edi
f011659d:	5d                   	pop    %ebp
f011659e:	c3                   	ret    

f011659f <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011659f:	55                   	push   %ebp
f01165a0:	89 e5                	mov    %esp,%ebp
f01165a2:	57                   	push   %edi
f01165a3:	56                   	push   %esi
f01165a4:	53                   	push   %ebx
f01165a5:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01165ab:	a0 2d ea 14 f0       	mov    0xf014ea2d,%al
f01165b0:	84 c0                	test   %al,%al
f01165b2:	0f 84 be 09 00 00    	je     f0116f76 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01165b8:	c6 05 2d ea 14 f0 00 	movb   $0x0,0xf014ea2d
		char command[100] = "load fos_add 20";
f01165bf:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01165c5:	bb 4c c4 11 f0       	mov    $0xf011c44c,%ebx
f01165ca:	ba 04 00 00 00       	mov    $0x4,%edx
f01165cf:	89 c7                	mov    %eax,%edi
f01165d1:	89 de                	mov    %ebx,%esi
f01165d3:	89 d1                	mov    %edx,%ecx
f01165d5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01165d7:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01165dd:	b9 15 00 00 00       	mov    $0x15,%ecx
f01165e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01165e7:	89 d7                	mov    %edx,%edi
f01165e9:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01165eb:	83 ec 0c             	sub    $0xc,%esp
f01165ee:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01165f4:	50                   	push   %eax
f01165f5:	e8 4f b2 fe ff       	call   f0101849 <execute_command>
f01165fa:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01165fd:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116603:	bb 08 c7 11 f0       	mov    $0xf011c708,%ebx
f0116608:	ba 0d 00 00 00       	mov    $0xd,%edx
f011660d:	89 c7                	mov    %eax,%edi
f011660f:	89 de                	mov    %ebx,%esi
f0116611:	89 d1                	mov    %edx,%ecx
f0116613:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116615:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011661b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116620:	b0 00                	mov    $0x0,%al
f0116622:	89 d7                	mov    %edx,%edi
f0116624:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116626:	83 ec 0c             	sub    $0xc,%esp
f0116629:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011662f:	50                   	push   %eax
f0116630:	e8 14 b2 fe ff       	call   f0101849 <execute_command>
f0116635:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116638:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011663e:	bb 6c c7 11 f0       	mov    $0xf011c76c,%ebx
f0116643:	ba 17 00 00 00       	mov    $0x17,%edx
f0116648:	89 c7                	mov    %eax,%edi
f011664a:	89 de                	mov    %ebx,%esi
f011664c:	89 d1                	mov    %edx,%ecx
f011664e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116650:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116656:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011665b:	b0 00                	mov    $0x0,%al
f011665d:	89 d7                	mov    %edx,%edi
f011665f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116661:	83 ec 0c             	sub    $0xc,%esp
f0116664:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011666a:	50                   	push   %eax
f011666b:	e8 d9 b1 fe ff       	call   f0101849 <execute_command>
f0116670:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116673:	83 ec 04             	sub    $0x4,%esp
f0116676:	6a 00                	push   $0x0
f0116678:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011667b:	50                   	push   %eax
f011667c:	68 00 10 00 00       	push   $0x1000
f0116681:	e8 2c ca fe ff       	call   f01030b2 <envid2env>
f0116686:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116689:	83 ec 04             	sub    $0x4,%esp
f011668c:	6a 00                	push   $0x0
f011668e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116691:	50                   	push   %eax
f0116692:	68 01 10 00 00       	push   $0x1001
f0116697:	e8 16 ca fe ff       	call   f01030b2 <envid2env>
f011669c:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011669f:	83 ec 04             	sub    $0x4,%esp
f01166a2:	6a 00                	push   $0x0
f01166a4:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01166a7:	50                   	push   %eax
f01166a8:	68 02 10 00 00       	push   $0x1002
f01166ad:	e8 00 ca fe ff       	call   f01030b2 <envid2env>
f01166b2:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01166b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166b8:	85 c0                	test   %eax,%eax
f01166ba:	74 0e                	je     f01166ca <test_priority_normal_and_lower+0x12b>
f01166bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166bf:	85 c0                	test   %eax,%eax
f01166c1:	74 07                	je     f01166ca <test_priority_normal_and_lower+0x12b>
f01166c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01166c6:	85 c0                	test   %eax,%eax
f01166c8:	75 17                	jne    f01166e1 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01166ca:	83 ec 04             	sub    $0x4,%esp
f01166cd:	68 f0 c1 11 f0       	push   $0xf011c1f0
f01166d2:	68 ec 00 00 00       	push   $0xec
f01166d7:	68 09 c2 11 f0       	push   $0xf011c209
f01166dc:	e8 95 9a fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01166e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166e4:	8b 40 74             	mov    0x74(%eax),%eax
f01166e7:	83 f8 14             	cmp    $0x14,%eax
f01166ea:	75 16                	jne    f0116702 <test_priority_normal_and_lower+0x163>
f01166ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166ef:	8b 40 74             	mov    0x74(%eax),%eax
f01166f2:	83 f8 1e             	cmp    $0x1e,%eax
f01166f5:	75 0b                	jne    f0116702 <test_priority_normal_and_lower+0x163>
f01166f7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01166fa:	8b 40 74             	mov    0x74(%eax),%eax
f01166fd:	83 f8 28             	cmp    $0x28,%eax
f0116700:	74 17                	je     f0116719 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116702:	83 ec 04             	sub    $0x4,%esp
f0116705:	68 20 c2 11 f0       	push   $0xf011c220
f011670a:	68 ef 00 00 00       	push   $0xef
f011670f:	68 09 c2 11 f0       	push   $0xf011c209
f0116714:	e8 5d 9a fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 20; i++)
f0116719:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116720:	eb 44                	jmp    f0116766 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116722:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116725:	8b 48 78             	mov    0x78(%eax),%ecx
f0116728:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011672b:	89 d0                	mov    %edx,%eax
f011672d:	01 c0                	add    %eax,%eax
f011672f:	01 d0                	add    %edx,%eax
f0116731:	c1 e0 02             	shl    $0x2,%eax
f0116734:	01 c8                	add    %ecx,%eax
f0116736:	8b 10                	mov    (%eax),%edx
f0116738:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011673b:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116742:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116745:	8b 48 78             	mov    0x78(%eax),%ecx
f0116748:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011674b:	89 d0                	mov    %edx,%eax
f011674d:	01 c0                	add    %eax,%eax
f011674f:	01 d0                	add    %edx,%eax
f0116751:	c1 e0 02             	shl    $0x2,%eax
f0116754:	01 c8                	add    %ecx,%eax
f0116756:	8b 50 08             	mov    0x8(%eax),%edx
f0116759:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011675c:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116763:	ff 45 e4             	incl   -0x1c(%ebp)
f0116766:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011676a:	7e b6                	jle    f0116722 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011676c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116773:	eb 44                	jmp    f01167b9 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116775:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116778:	8b 48 78             	mov    0x78(%eax),%ecx
f011677b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011677e:	89 d0                	mov    %edx,%eax
f0116780:	01 c0                	add    %eax,%eax
f0116782:	01 d0                	add    %edx,%eax
f0116784:	c1 e0 02             	shl    $0x2,%eax
f0116787:	01 c8                	add    %ecx,%eax
f0116789:	8b 10                	mov    (%eax),%edx
f011678b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011678e:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116795:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116798:	8b 48 78             	mov    0x78(%eax),%ecx
f011679b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011679e:	89 d0                	mov    %edx,%eax
f01167a0:	01 c0                	add    %eax,%eax
f01167a2:	01 d0                	add    %edx,%eax
f01167a4:	c1 e0 02             	shl    $0x2,%eax
f01167a7:	01 c8                	add    %ecx,%eax
f01167a9:	8b 50 08             	mov    0x8(%eax),%edx
f01167ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01167af:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01167b6:	ff 45 e0             	incl   -0x20(%ebp)
f01167b9:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01167bd:	7e b6                	jle    f0116775 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01167bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01167c6:	eb 44                	jmp    f011680c <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01167c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01167ce:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01167d1:	89 d0                	mov    %edx,%eax
f01167d3:	01 c0                	add    %eax,%eax
f01167d5:	01 d0                	add    %edx,%eax
f01167d7:	c1 e0 02             	shl    $0x2,%eax
f01167da:	01 c8                	add    %ecx,%eax
f01167dc:	8b 10                	mov    (%eax),%edx
f01167de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01167e1:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01167e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167eb:	8b 48 78             	mov    0x78(%eax),%ecx
f01167ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01167f1:	89 d0                	mov    %edx,%eax
f01167f3:	01 c0                	add    %eax,%eax
f01167f5:	01 d0                	add    %edx,%eax
f01167f7:	c1 e0 02             	shl    $0x2,%eax
f01167fa:	01 c8                	add    %ecx,%eax
f01167fc:	8b 50 08             	mov    0x8(%eax),%edx
f01167ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116802:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116809:	ff 45 dc             	incl   -0x24(%ebp)
f011680c:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116810:	7e b6                	jle    f01167c8 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116812:	e8 c7 41 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116817:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011681a:	e8 82 56 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011681f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116822:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116825:	83 ec 08             	sub    $0x8,%esp
f0116828:	6a 03                	push   $0x3
f011682a:	50                   	push   %eax
f011682b:	e8 6c f3 ff ff       	call   f0115b9c <set_program_priority>
f0116830:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116833:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116836:	83 ec 08             	sub    $0x8,%esp
f0116839:	6a 03                	push   $0x3
f011683b:	50                   	push   %eax
f011683c:	e8 5b f3 ff ff       	call   f0115b9c <set_program_priority>
f0116841:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116844:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116847:	83 ec 08             	sub    $0x8,%esp
f011684a:	6a 03                	push   $0x3
f011684c:	50                   	push   %eax
f011684d:	e8 4a f3 ff ff       	call   f0115b9c <set_program_priority>
f0116852:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116855:	e8 47 56 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f011685a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011685d:	74 17                	je     f0116876 <test_priority_normal_and_lower+0x2d7>
f011685f:	83 ec 04             	sub    $0x4,%esp
f0116862:	68 6c c2 11 f0       	push   $0xf011c26c
f0116867:	68 0b 01 00 00       	push   $0x10b
f011686c:	68 09 c2 11 f0       	push   $0xf011c209
f0116871:	e8 00 99 fe ff       	call   f0100176 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116876:	e8 63 41 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011687b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011687e:	74 17                	je     f0116897 <test_priority_normal_and_lower+0x2f8>
f0116880:	83 ec 04             	sub    $0x4,%esp
f0116883:	68 6c c2 11 f0       	push   $0xf011c26c
f0116888:	68 0c 01 00 00       	push   $0x10c
f011688d:	68 09 c2 11 f0       	push   $0xf011c209
f0116892:	e8 df 98 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116897:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011689a:	8b 40 74             	mov    0x74(%eax),%eax
f011689d:	83 f8 14             	cmp    $0x14,%eax
f01168a0:	75 16                	jne    f01168b8 <test_priority_normal_and_lower+0x319>
f01168a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168a5:	8b 40 74             	mov    0x74(%eax),%eax
f01168a8:	83 f8 1e             	cmp    $0x1e,%eax
f01168ab:	75 0b                	jne    f01168b8 <test_priority_normal_and_lower+0x319>
f01168ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168b0:	8b 40 74             	mov    0x74(%eax),%eax
f01168b3:	83 f8 28             	cmp    $0x28,%eax
f01168b6:	74 17                	je     f01168cf <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01168b8:	83 ec 04             	sub    $0x4,%esp
f01168bb:	68 98 c2 11 f0       	push   $0xf011c298
f01168c0:	68 0f 01 00 00       	push   $0x10f
f01168c5:	68 09 c2 11 f0       	push   $0xf011c209
f01168ca:	e8 a7 98 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f01168cf:	e8 0a 41 ff ff       	call   f010a9de <sys_calculate_free_frames>
f01168d4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168d7:	e8 c5 55 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01168dc:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01168df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168e2:	83 ec 08             	sub    $0x8,%esp
f01168e5:	6a 02                	push   $0x2
f01168e7:	50                   	push   %eax
f01168e8:	e8 af f2 ff ff       	call   f0115b9c <set_program_priority>
f01168ed:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01168f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168f3:	83 ec 08             	sub    $0x8,%esp
f01168f6:	6a 02                	push   $0x2
f01168f8:	50                   	push   %eax
f01168f9:	e8 9e f2 ff ff       	call   f0115b9c <set_program_priority>
f01168fe:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116901:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116904:	83 ec 08             	sub    $0x8,%esp
f0116907:	6a 02                	push   $0x2
f0116909:	50                   	push   %eax
f011690a:	e8 8d f2 ff ff       	call   f0115b9c <set_program_priority>
f011690f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116912:	e8 8a 55 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116917:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011691a:	74 17                	je     f0116933 <test_priority_normal_and_lower+0x394>
f011691c:	83 ec 04             	sub    $0x4,%esp
f011691f:	68 6c c2 11 f0       	push   $0xf011c26c
f0116924:	68 19 01 00 00       	push   $0x119
f0116929:	68 09 c2 11 f0       	push   $0xf011c209
f011692e:	e8 43 98 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116933:	e8 a6 40 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116938:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011693b:	74 21                	je     f011695e <test_priority_normal_and_lower+0x3bf>
f011693d:	e8 9c 40 ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116942:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116945:	29 c2                	sub    %eax,%edx
f0116947:	89 d0                	mov    %edx,%eax
f0116949:	50                   	push   %eax
f011694a:	68 ec c2 11 f0       	push   $0xf011c2ec
f011694f:	68 1a 01 00 00       	push   $0x11a
f0116954:	68 09 c2 11 f0       	push   $0xf011c209
f0116959:	e8 18 98 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011695e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116961:	8b 40 74             	mov    0x74(%eax),%eax
f0116964:	83 f8 0a             	cmp    $0xa,%eax
f0116967:	75 16                	jne    f011697f <test_priority_normal_and_lower+0x3e0>
f0116969:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011696c:	8b 40 74             	mov    0x74(%eax),%eax
f011696f:	83 f8 0f             	cmp    $0xf,%eax
f0116972:	75 0b                	jne    f011697f <test_priority_normal_and_lower+0x3e0>
f0116974:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116977:	8b 40 74             	mov    0x74(%eax),%eax
f011697a:	83 f8 14             	cmp    $0x14,%eax
f011697d:	74 17                	je     f0116996 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f011697f:	83 ec 04             	sub    $0x4,%esp
f0116982:	68 1c c3 11 f0       	push   $0xf011c31c
f0116987:	68 1d 01 00 00       	push   $0x11d
f011698c:	68 09 c2 11 f0       	push   $0xf011c209
f0116991:	e8 e0 97 fe ff       	call   f0100176 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116996:	e8 43 40 ff ff       	call   f010a9de <sys_calculate_free_frames>
f011699b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011699e:	e8 fe 54 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01169a3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01169a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169a9:	83 ec 08             	sub    $0x8,%esp
f01169ac:	6a 02                	push   $0x2
f01169ae:	50                   	push   %eax
f01169af:	e8 e8 f1 ff ff       	call   f0115b9c <set_program_priority>
f01169b4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01169b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169ba:	83 ec 08             	sub    $0x8,%esp
f01169bd:	6a 02                	push   $0x2
f01169bf:	50                   	push   %eax
f01169c0:	e8 d7 f1 ff ff       	call   f0115b9c <set_program_priority>
f01169c5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01169c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169cb:	83 ec 08             	sub    $0x8,%esp
f01169ce:	6a 02                	push   $0x2
f01169d0:	50                   	push   %eax
f01169d1:	e8 c6 f1 ff ff       	call   f0115b9c <set_program_priority>
f01169d6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01169d9:	e8 c3 54 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f01169de:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01169e1:	74 17                	je     f01169fa <test_priority_normal_and_lower+0x45b>
f01169e3:	83 ec 04             	sub    $0x4,%esp
f01169e6:	68 6c c2 11 f0       	push   $0xf011c26c
f01169eb:	68 27 01 00 00       	push   $0x127
f01169f0:	68 09 c2 11 f0       	push   $0xf011c209
f01169f5:	e8 7c 97 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01169fa:	e8 df 3f ff ff       	call   f010a9de <sys_calculate_free_frames>
f01169ff:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116a02:	74 21                	je     f0116a25 <test_priority_normal_and_lower+0x486>
f0116a04:	e8 d5 3f ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116a09:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a0c:	29 c2                	sub    %eax,%edx
f0116a0e:	89 d0                	mov    %edx,%eax
f0116a10:	50                   	push   %eax
f0116a11:	68 ec c2 11 f0       	push   $0xf011c2ec
f0116a16:	68 28 01 00 00       	push   $0x128
f0116a1b:	68 09 c2 11 f0       	push   $0xf011c209
f0116a20:	e8 51 97 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116a25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a28:	8b 40 74             	mov    0x74(%eax),%eax
f0116a2b:	83 f8 0a             	cmp    $0xa,%eax
f0116a2e:	75 16                	jne    f0116a46 <test_priority_normal_and_lower+0x4a7>
f0116a30:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a33:	8b 40 74             	mov    0x74(%eax),%eax
f0116a36:	83 f8 0f             	cmp    $0xf,%eax
f0116a39:	75 0b                	jne    f0116a46 <test_priority_normal_and_lower+0x4a7>
f0116a3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a3e:	8b 40 74             	mov    0x74(%eax),%eax
f0116a41:	83 f8 0a             	cmp    $0xa,%eax
f0116a44:	74 17                	je     f0116a5d <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116a46:	83 ec 04             	sub    $0x4,%esp
f0116a49:	68 1c c3 11 f0       	push   $0xf011c31c
f0116a4e:	68 2b 01 00 00       	push   $0x12b
f0116a53:	68 09 c2 11 f0       	push   $0xf011c209
f0116a58:	e8 19 97 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 10; i++)
f0116a5d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116a64:	eb 7a                	jmp    f0116ae0 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a66:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a69:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116a70:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a73:	8b 58 78             	mov    0x78(%eax),%ebx
f0116a76:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116a79:	89 d0                	mov    %edx,%eax
f0116a7b:	01 c0                	add    %eax,%eax
f0116a7d:	01 d0                	add    %edx,%eax
f0116a7f:	c1 e0 02             	shl    $0x2,%eax
f0116a82:	01 d8                	add    %ebx,%eax
f0116a84:	8b 00                	mov    (%eax),%eax
f0116a86:	39 c1                	cmp    %eax,%ecx
f0116a88:	74 17                	je     f0116aa1 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116a8a:	83 ec 04             	sub    $0x4,%esp
f0116a8d:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116a92:	68 30 01 00 00       	push   $0x130
f0116a97:	68 09 c2 11 f0       	push   $0xf011c209
f0116a9c:	e8 d5 96 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116aa1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116aa4:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116aab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116aae:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ab1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116ab4:	89 d0                	mov    %edx,%eax
f0116ab6:	01 c0                	add    %eax,%eax
f0116ab8:	01 d0                	add    %edx,%eax
f0116aba:	c1 e0 02             	shl    $0x2,%eax
f0116abd:	01 d8                	add    %ebx,%eax
f0116abf:	8b 40 08             	mov    0x8(%eax),%eax
f0116ac2:	39 c1                	cmp    %eax,%ecx
f0116ac4:	74 17                	je     f0116add <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116ac6:	83 ec 04             	sub    $0x4,%esp
f0116ac9:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116ace:	68 33 01 00 00       	push   $0x133
f0116ad3:	68 09 c2 11 f0       	push   $0xf011c209
f0116ad8:	e8 99 96 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116add:	ff 45 d8             	incl   -0x28(%ebp)
f0116ae0:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116ae4:	7e 80                	jle    f0116a66 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116ae6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116aed:	eb 7a                	jmp    f0116b69 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116aef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116af2:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116af9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116afc:	8b 58 78             	mov    0x78(%eax),%ebx
f0116aff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116b02:	89 d0                	mov    %edx,%eax
f0116b04:	01 c0                	add    %eax,%eax
f0116b06:	01 d0                	add    %edx,%eax
f0116b08:	c1 e0 02             	shl    $0x2,%eax
f0116b0b:	01 d8                	add    %ebx,%eax
f0116b0d:	8b 00                	mov    (%eax),%eax
f0116b0f:	39 c1                	cmp    %eax,%ecx
f0116b11:	74 17                	je     f0116b2a <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116b13:	83 ec 04             	sub    $0x4,%esp
f0116b16:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116b1b:	68 39 01 00 00       	push   $0x139
f0116b20:	68 09 c2 11 f0       	push   $0xf011c209
f0116b25:	e8 4c 96 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116b2a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116b2d:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116b34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b37:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b3a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116b3d:	89 d0                	mov    %edx,%eax
f0116b3f:	01 c0                	add    %eax,%eax
f0116b41:	01 d0                	add    %edx,%eax
f0116b43:	c1 e0 02             	shl    $0x2,%eax
f0116b46:	01 d8                	add    %ebx,%eax
f0116b48:	8b 40 08             	mov    0x8(%eax),%eax
f0116b4b:	39 c1                	cmp    %eax,%ecx
f0116b4d:	74 17                	je     f0116b66 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116b4f:	83 ec 04             	sub    $0x4,%esp
f0116b52:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116b57:	68 3c 01 00 00       	push   $0x13c
f0116b5c:	68 09 c2 11 f0       	push   $0xf011c209
f0116b61:	e8 10 96 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116b66:	ff 45 d4             	incl   -0x2c(%ebp)
f0116b69:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116b6d:	7e 80                	jle    f0116aef <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116b6f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116b76:	eb 7a                	jmp    f0116bf2 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116b7b:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116b82:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b85:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b88:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116b8b:	89 d0                	mov    %edx,%eax
f0116b8d:	01 c0                	add    %eax,%eax
f0116b8f:	01 d0                	add    %edx,%eax
f0116b91:	c1 e0 02             	shl    $0x2,%eax
f0116b94:	01 d8                	add    %ebx,%eax
f0116b96:	8b 00                	mov    (%eax),%eax
f0116b98:	39 c1                	cmp    %eax,%ecx
f0116b9a:	74 17                	je     f0116bb3 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116b9c:	83 ec 04             	sub    $0x4,%esp
f0116b9f:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116ba4:	68 42 01 00 00       	push   $0x142
f0116ba9:	68 09 c2 11 f0       	push   $0xf011c209
f0116bae:	e8 c3 95 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116bb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116bb6:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116bbd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116bc0:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bc3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116bc6:	89 d0                	mov    %edx,%eax
f0116bc8:	01 c0                	add    %eax,%eax
f0116bca:	01 d0                	add    %edx,%eax
f0116bcc:	c1 e0 02             	shl    $0x2,%eax
f0116bcf:	01 d8                	add    %ebx,%eax
f0116bd1:	8b 40 08             	mov    0x8(%eax),%eax
f0116bd4:	39 c1                	cmp    %eax,%ecx
f0116bd6:	74 17                	je     f0116bef <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116bd8:	83 ec 04             	sub    $0x4,%esp
f0116bdb:	68 dc c3 11 f0       	push   $0xf011c3dc
f0116be0:	68 45 01 00 00       	push   $0x145
f0116be5:	68 09 c2 11 f0       	push   $0xf011c209
f0116bea:	e8 87 95 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116bef:	ff 45 d0             	incl   -0x30(%ebp)
f0116bf2:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116bf6:	7e 80                	jle    f0116b78 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116bf8:	e8 e1 3d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116bfd:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c00:	e8 9c 52 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116c05:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116c08:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c0b:	83 ec 08             	sub    $0x8,%esp
f0116c0e:	6a 01                	push   $0x1
f0116c10:	50                   	push   %eax
f0116c11:	e8 86 ef ff ff       	call   f0115b9c <set_program_priority>
f0116c16:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116c19:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c1c:	83 ec 08             	sub    $0x8,%esp
f0116c1f:	6a 01                	push   $0x1
f0116c21:	50                   	push   %eax
f0116c22:	e8 75 ef ff ff       	call   f0115b9c <set_program_priority>
f0116c27:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116c2a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c2d:	83 ec 08             	sub    $0x8,%esp
f0116c30:	6a 01                	push   $0x1
f0116c32:	50                   	push   %eax
f0116c33:	e8 64 ef ff ff       	call   f0115b9c <set_program_priority>
f0116c38:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c3b:	e8 61 52 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116c40:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116c43:	74 17                	je     f0116c5c <test_priority_normal_and_lower+0x6bd>
f0116c45:	83 ec 04             	sub    $0x4,%esp
f0116c48:	68 6c c2 11 f0       	push   $0xf011c26c
f0116c4d:	68 4e 01 00 00       	push   $0x14e
f0116c52:	68 09 c2 11 f0       	push   $0xf011c209
f0116c57:	e8 1a 95 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116c5c:	e8 7d 3d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116c61:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116c64:	83 f8 0d             	cmp    $0xd,%eax
f0116c67:	74 17                	je     f0116c80 <test_priority_normal_and_lower+0x6e1>
f0116c69:	83 ec 04             	sub    $0x4,%esp
f0116c6c:	68 78 c5 11 f0       	push   $0xf011c578
f0116c71:	68 4f 01 00 00       	push   $0x14f
f0116c76:	68 09 c2 11 f0       	push   $0xf011c209
f0116c7b:	e8 f6 94 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116c80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c83:	8b 40 74             	mov    0x74(%eax),%eax
f0116c86:	83 f8 05             	cmp    $0x5,%eax
f0116c89:	75 16                	jne    f0116ca1 <test_priority_normal_and_lower+0x702>
f0116c8b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c8e:	8b 40 74             	mov    0x74(%eax),%eax
f0116c91:	83 f8 07             	cmp    $0x7,%eax
f0116c94:	75 0b                	jne    f0116ca1 <test_priority_normal_and_lower+0x702>
f0116c96:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c99:	8b 40 74             	mov    0x74(%eax),%eax
f0116c9c:	83 f8 05             	cmp    $0x5,%eax
f0116c9f:	74 17                	je     f0116cb8 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0116ca1:	83 ec 04             	sub    $0x4,%esp
f0116ca4:	68 c0 c5 11 f0       	push   $0xf011c5c0
f0116ca9:	68 52 01 00 00       	push   $0x152
f0116cae:	68 09 c2 11 f0       	push   $0xf011c209
f0116cb3:	e8 be 94 fe ff       	call   f0100176 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116cb8:	e8 21 3d ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116cbd:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cc0:	e8 dc 51 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116cc5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116cc8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ccb:	83 ec 08             	sub    $0x8,%esp
f0116cce:	6a 01                	push   $0x1
f0116cd0:	50                   	push   %eax
f0116cd1:	e8 c6 ee ff ff       	call   f0115b9c <set_program_priority>
f0116cd6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116cd9:	e8 c3 51 ff ff       	call   f010bea1 <pf_calculate_free_frames>
f0116cde:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116ce1:	74 17                	je     f0116cfa <test_priority_normal_and_lower+0x75b>
f0116ce3:	83 ec 04             	sub    $0x4,%esp
f0116ce6:	68 6c c2 11 f0       	push   $0xf011c26c
f0116ceb:	68 58 01 00 00       	push   $0x158
f0116cf0:	68 09 c2 11 f0       	push   $0xf011c209
f0116cf5:	e8 7c 94 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116cfa:	e8 df 3c ff ff       	call   f010a9de <sys_calculate_free_frames>
f0116cff:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116d02:	83 f8 03             	cmp    $0x3,%eax
f0116d05:	74 17                	je     f0116d1e <test_priority_normal_and_lower+0x77f>
f0116d07:	83 ec 04             	sub    $0x4,%esp
f0116d0a:	68 6c c2 11 f0       	push   $0xf011c26c
f0116d0f:	68 59 01 00 00       	push   $0x159
f0116d14:	68 09 c2 11 f0       	push   $0xf011c209
f0116d19:	e8 58 94 fe ff       	call   f0100176 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116d1e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d21:	8b 40 74             	mov    0x74(%eax),%eax
f0116d24:	83 f8 02             	cmp    $0x2,%eax
f0116d27:	75 16                	jne    f0116d3f <test_priority_normal_and_lower+0x7a0>
f0116d29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d2c:	8b 40 74             	mov    0x74(%eax),%eax
f0116d2f:	83 f8 07             	cmp    $0x7,%eax
f0116d32:	75 0b                	jne    f0116d3f <test_priority_normal_and_lower+0x7a0>
f0116d34:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d37:	8b 40 74             	mov    0x74(%eax),%eax
f0116d3a:	83 f8 05             	cmp    $0x5,%eax
f0116d3d:	74 17                	je     f0116d56 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0116d3f:	83 ec 04             	sub    $0x4,%esp
f0116d42:	68 a0 c3 11 f0       	push   $0xf011c3a0
f0116d47:	68 5c 01 00 00       	push   $0x15c
f0116d4c:	68 09 c2 11 f0       	push   $0xf011c209
f0116d51:	e8 20 94 fe ff       	call   f0100176 <_panic>

		for(int i = 0; i < 2; i++)
f0116d56:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116d5d:	e9 80 00 00 00       	jmp    f0116de2 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d62:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116d65:	83 c0 08             	add    $0x8,%eax
f0116d68:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116d6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d72:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d75:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116d78:	89 d0                	mov    %edx,%eax
f0116d7a:	01 c0                	add    %eax,%eax
f0116d7c:	01 d0                	add    %edx,%eax
f0116d7e:	c1 e0 02             	shl    $0x2,%eax
f0116d81:	01 d8                	add    %ebx,%eax
f0116d83:	8b 00                	mov    (%eax),%eax
f0116d85:	39 c1                	cmp    %eax,%ecx
f0116d87:	74 17                	je     f0116da0 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116d89:	83 ec 04             	sub    $0x4,%esp
f0116d8c:	68 f0 c5 11 f0       	push   $0xf011c5f0
f0116d91:	68 61 01 00 00       	push   $0x161
f0116d96:	68 09 c2 11 f0       	push   $0xf011c209
f0116d9b:	e8 d6 93 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116da0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116da3:	83 c0 08             	add    $0x8,%eax
f0116da6:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116dad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116db0:	8b 58 78             	mov    0x78(%eax),%ebx
f0116db3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116db6:	89 d0                	mov    %edx,%eax
f0116db8:	01 c0                	add    %eax,%eax
f0116dba:	01 d0                	add    %edx,%eax
f0116dbc:	c1 e0 02             	shl    $0x2,%eax
f0116dbf:	01 d8                	add    %ebx,%eax
f0116dc1:	8b 40 08             	mov    0x8(%eax),%eax
f0116dc4:	39 c1                	cmp    %eax,%ecx
f0116dc6:	74 17                	je     f0116ddf <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116dc8:	83 ec 04             	sub    $0x4,%esp
f0116dcb:	68 f0 c5 11 f0       	push   $0xf011c5f0
f0116dd0:	68 64 01 00 00       	push   $0x164
f0116dd5:	68 09 c2 11 f0       	push   $0xf011c209
f0116dda:	e8 97 93 fe ff       	call   f0100176 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116ddf:	ff 45 cc             	incl   -0x34(%ebp)
f0116de2:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116de6:	0f 8e 76 ff ff ff    	jle    f0116d62 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116dec:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116df3:	e9 80 00 00 00       	jmp    f0116e78 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116df8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116dfb:	83 c0 03             	add    $0x3,%eax
f0116dfe:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116e05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e08:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e0b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116e0e:	89 d0                	mov    %edx,%eax
f0116e10:	01 c0                	add    %eax,%eax
f0116e12:	01 d0                	add    %edx,%eax
f0116e14:	c1 e0 02             	shl    $0x2,%eax
f0116e17:	01 d8                	add    %ebx,%eax
f0116e19:	8b 00                	mov    (%eax),%eax
f0116e1b:	39 c1                	cmp    %eax,%ecx
f0116e1d:	74 17                	je     f0116e36 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116e1f:	ff 75 c8             	pushl  -0x38(%ebp)
f0116e22:	68 5c c6 11 f0       	push   $0xf011c65c
f0116e27:	68 6a 01 00 00       	push   $0x16a
f0116e2c:	68 09 c2 11 f0       	push   $0xf011c209
f0116e31:	e8 40 93 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116e36:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116e39:	83 c0 03             	add    $0x3,%eax
f0116e3c:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116e43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e46:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e49:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116e4c:	89 d0                	mov    %edx,%eax
f0116e4e:	01 c0                	add    %eax,%eax
f0116e50:	01 d0                	add    %edx,%eax
f0116e52:	c1 e0 02             	shl    $0x2,%eax
f0116e55:	01 d8                	add    %ebx,%eax
f0116e57:	8b 40 08             	mov    0x8(%eax),%eax
f0116e5a:	39 c1                	cmp    %eax,%ecx
f0116e5c:	74 17                	je     f0116e75 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116e5e:	83 ec 04             	sub    $0x4,%esp
f0116e61:	68 f0 c5 11 f0       	push   $0xf011c5f0
f0116e66:	68 6d 01 00 00       	push   $0x16d
f0116e6b:	68 09 c2 11 f0       	push   $0xf011c209
f0116e70:	e8 01 93 fe ff       	call   f0100176 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116e75:	ff 45 c8             	incl   -0x38(%ebp)
f0116e78:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116e7c:	0f 8e 76 ff ff ff    	jle    f0116df8 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116e82:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116e89:	e9 80 00 00 00       	jmp    f0116f0e <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e8e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116e91:	83 c0 05             	add    $0x5,%eax
f0116e94:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116e9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e9e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ea1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116ea4:	89 d0                	mov    %edx,%eax
f0116ea6:	01 c0                	add    %eax,%eax
f0116ea8:	01 d0                	add    %edx,%eax
f0116eaa:	c1 e0 02             	shl    $0x2,%eax
f0116ead:	01 d8                	add    %ebx,%eax
f0116eaf:	8b 00                	mov    (%eax),%eax
f0116eb1:	39 c1                	cmp    %eax,%ecx
f0116eb3:	74 17                	je     f0116ecc <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116eb5:	83 ec 04             	sub    $0x4,%esp
f0116eb8:	68 f0 c5 11 f0       	push   $0xf011c5f0
f0116ebd:	68 73 01 00 00       	push   $0x173
f0116ec2:	68 09 c2 11 f0       	push   $0xf011c209
f0116ec7:	e8 aa 92 fe ff       	call   f0100176 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ecc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116ecf:	83 c0 05             	add    $0x5,%eax
f0116ed2:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116ed9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116edc:	8b 58 78             	mov    0x78(%eax),%ebx
f0116edf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116ee2:	89 d0                	mov    %edx,%eax
f0116ee4:	01 c0                	add    %eax,%eax
f0116ee6:	01 d0                	add    %edx,%eax
f0116ee8:	c1 e0 02             	shl    $0x2,%eax
f0116eeb:	01 d8                	add    %ebx,%eax
f0116eed:	8b 40 08             	mov    0x8(%eax),%eax
f0116ef0:	39 c1                	cmp    %eax,%ecx
f0116ef2:	74 17                	je     f0116f0b <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116ef4:	83 ec 04             	sub    $0x4,%esp
f0116ef7:	68 f0 c5 11 f0       	push   $0xf011c5f0
f0116efc:	68 76 01 00 00       	push   $0x176
f0116f01:	68 09 c2 11 f0       	push   $0xf011c209
f0116f06:	e8 6b 92 fe ff       	call   f0100176 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116f0b:	ff 45 c4             	incl   -0x3c(%ebp)
f0116f0e:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116f12:	0f 8e 76 ff ff ff    	jle    f0116e8e <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116f18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f1b:	83 ec 08             	sub    $0x8,%esp
f0116f1e:	6a 05                	push   $0x5
f0116f20:	50                   	push   %eax
f0116f21:	e8 76 ec ff ff       	call   f0115b9c <set_program_priority>
f0116f26:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116f29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f2c:	83 ec 08             	sub    $0x8,%esp
f0116f2f:	6a 05                	push   $0x5
f0116f31:	50                   	push   %eax
f0116f32:	e8 65 ec ff ff       	call   f0115b9c <set_program_priority>
f0116f37:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116f3a:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116f41:	75 6e 61 
f0116f44:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116f4b:	6c 00 00 
f0116f4e:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116f54:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116f59:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f5e:	89 d7                	mov    %edx,%edi
f0116f60:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116f62:	83 ec 0c             	sub    $0xc,%esp
f0116f65:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116f6b:	50                   	push   %eax
f0116f6c:	e8 d8 a8 fe ff       	call   f0101849 <execute_command>
f0116f71:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116f74:	eb 10                	jmp    f0116f86 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116f76:	83 ec 0c             	sub    $0xc,%esp
f0116f79:	68 cc c6 11 f0       	push   $0xf011c6cc
f0116f7e:	e8 4c fe fe ff       	call   f0106dcf <cprintf>
f0116f83:	83 c4 10             	add    $0x10,%esp
	}
}
f0116f86:	90                   	nop
f0116f87:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116f8a:	5b                   	pop    %ebx
f0116f8b:	5e                   	pop    %esi
f0116f8c:	5f                   	pop    %edi
f0116f8d:	5d                   	pop    %ebp
f0116f8e:	c3                   	ret    

f0116f8f <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0116f8f:	55                   	push   %ebp
f0116f90:	89 e5                	mov    %esp,%ebp
f0116f92:	53                   	push   %ebx
f0116f93:	83 ec 14             	sub    $0x14,%esp
f0116f96:	8b 45 10             	mov    0x10(%ebp),%eax
f0116f99:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0116f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0116fa2:	8b 45 18             	mov    0x18(%ebp),%eax
f0116fa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0116faa:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0116fad:	77 55                	ja     f0117004 <printnum+0x75>
f0116faf:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0116fb2:	72 05                	jb     f0116fb9 <printnum+0x2a>
f0116fb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116fb7:	77 4b                	ja     f0117004 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0116fb9:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0116fbc:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0116fbf:	8b 45 18             	mov    0x18(%ebp),%eax
f0116fc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0116fc7:	52                   	push   %edx
f0116fc8:	50                   	push   %eax
f0116fc9:	ff 75 f4             	pushl  -0xc(%ebp)
f0116fcc:	ff 75 f0             	pushl  -0x10(%ebp)
f0116fcf:	e8 bc 11 00 00       	call   f0118190 <__udivdi3>
f0116fd4:	83 c4 10             	add    $0x10,%esp
f0116fd7:	83 ec 04             	sub    $0x4,%esp
f0116fda:	ff 75 20             	pushl  0x20(%ebp)
f0116fdd:	53                   	push   %ebx
f0116fde:	ff 75 18             	pushl  0x18(%ebp)
f0116fe1:	52                   	push   %edx
f0116fe2:	50                   	push   %eax
f0116fe3:	ff 75 0c             	pushl  0xc(%ebp)
f0116fe6:	ff 75 08             	pushl  0x8(%ebp)
f0116fe9:	e8 a1 ff ff ff       	call   f0116f8f <printnum>
f0116fee:	83 c4 20             	add    $0x20,%esp
f0116ff1:	eb 1a                	jmp    f011700d <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0116ff3:	83 ec 08             	sub    $0x8,%esp
f0116ff6:	ff 75 0c             	pushl  0xc(%ebp)
f0116ff9:	ff 75 20             	pushl  0x20(%ebp)
f0116ffc:	8b 45 08             	mov    0x8(%ebp),%eax
f0116fff:	ff d0                	call   *%eax
f0117001:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0117004:	ff 4d 1c             	decl   0x1c(%ebp)
f0117007:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f011700b:	7f e6                	jg     f0116ff3 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f011700d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0117010:	bb 00 00 00 00       	mov    $0x0,%ebx
f0117015:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117018:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011701b:	53                   	push   %ebx
f011701c:	51                   	push   %ecx
f011701d:	52                   	push   %edx
f011701e:	50                   	push   %eax
f011701f:	e8 7c 12 00 00       	call   f01182a0 <__umoddi3>
f0117024:	83 c4 10             	add    $0x10,%esp
f0117027:	05 f4 c9 11 f0       	add    $0xf011c9f4,%eax
f011702c:	8a 00                	mov    (%eax),%al
f011702e:	0f be c0             	movsbl %al,%eax
f0117031:	83 ec 08             	sub    $0x8,%esp
f0117034:	ff 75 0c             	pushl  0xc(%ebp)
f0117037:	50                   	push   %eax
f0117038:	8b 45 08             	mov    0x8(%ebp),%eax
f011703b:	ff d0                	call   *%eax
f011703d:	83 c4 10             	add    $0x10,%esp
}
f0117040:	90                   	nop
f0117041:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0117044:	c9                   	leave  
f0117045:	c3                   	ret    

f0117046 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0117046:	55                   	push   %ebp
f0117047:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0117049:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011704d:	7e 1c                	jle    f011706b <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f011704f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117052:	8b 00                	mov    (%eax),%eax
f0117054:	8d 50 08             	lea    0x8(%eax),%edx
f0117057:	8b 45 08             	mov    0x8(%ebp),%eax
f011705a:	89 10                	mov    %edx,(%eax)
f011705c:	8b 45 08             	mov    0x8(%ebp),%eax
f011705f:	8b 00                	mov    (%eax),%eax
f0117061:	83 e8 08             	sub    $0x8,%eax
f0117064:	8b 50 04             	mov    0x4(%eax),%edx
f0117067:	8b 00                	mov    (%eax),%eax
f0117069:	eb 40                	jmp    f01170ab <getuint+0x65>
	else if (lflag)
f011706b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011706f:	74 1e                	je     f011708f <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0117071:	8b 45 08             	mov    0x8(%ebp),%eax
f0117074:	8b 00                	mov    (%eax),%eax
f0117076:	8d 50 04             	lea    0x4(%eax),%edx
f0117079:	8b 45 08             	mov    0x8(%ebp),%eax
f011707c:	89 10                	mov    %edx,(%eax)
f011707e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117081:	8b 00                	mov    (%eax),%eax
f0117083:	83 e8 04             	sub    $0x4,%eax
f0117086:	8b 00                	mov    (%eax),%eax
f0117088:	ba 00 00 00 00       	mov    $0x0,%edx
f011708d:	eb 1c                	jmp    f01170ab <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f011708f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117092:	8b 00                	mov    (%eax),%eax
f0117094:	8d 50 04             	lea    0x4(%eax),%edx
f0117097:	8b 45 08             	mov    0x8(%ebp),%eax
f011709a:	89 10                	mov    %edx,(%eax)
f011709c:	8b 45 08             	mov    0x8(%ebp),%eax
f011709f:	8b 00                	mov    (%eax),%eax
f01170a1:	83 e8 04             	sub    $0x4,%eax
f01170a4:	8b 00                	mov    (%eax),%eax
f01170a6:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01170ab:	5d                   	pop    %ebp
f01170ac:	c3                   	ret    

f01170ad <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01170ad:	55                   	push   %ebp
f01170ae:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01170b0:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01170b4:	7e 1c                	jle    f01170d2 <getint+0x25>
		return va_arg(*ap, long long);
f01170b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01170b9:	8b 00                	mov    (%eax),%eax
f01170bb:	8d 50 08             	lea    0x8(%eax),%edx
f01170be:	8b 45 08             	mov    0x8(%ebp),%eax
f01170c1:	89 10                	mov    %edx,(%eax)
f01170c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01170c6:	8b 00                	mov    (%eax),%eax
f01170c8:	83 e8 08             	sub    $0x8,%eax
f01170cb:	8b 50 04             	mov    0x4(%eax),%edx
f01170ce:	8b 00                	mov    (%eax),%eax
f01170d0:	eb 38                	jmp    f011710a <getint+0x5d>
	else if (lflag)
f01170d2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01170d6:	74 1a                	je     f01170f2 <getint+0x45>
		return va_arg(*ap, long);
f01170d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01170db:	8b 00                	mov    (%eax),%eax
f01170dd:	8d 50 04             	lea    0x4(%eax),%edx
f01170e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01170e3:	89 10                	mov    %edx,(%eax)
f01170e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01170e8:	8b 00                	mov    (%eax),%eax
f01170ea:	83 e8 04             	sub    $0x4,%eax
f01170ed:	8b 00                	mov    (%eax),%eax
f01170ef:	99                   	cltd   
f01170f0:	eb 18                	jmp    f011710a <getint+0x5d>
	else
		return va_arg(*ap, int);
f01170f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01170f5:	8b 00                	mov    (%eax),%eax
f01170f7:	8d 50 04             	lea    0x4(%eax),%edx
f01170fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01170fd:	89 10                	mov    %edx,(%eax)
f01170ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0117102:	8b 00                	mov    (%eax),%eax
f0117104:	83 e8 04             	sub    $0x4,%eax
f0117107:	8b 00                	mov    (%eax),%eax
f0117109:	99                   	cltd   
}
f011710a:	5d                   	pop    %ebp
f011710b:	c3                   	ret    

f011710c <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f011710c:	55                   	push   %ebp
f011710d:	89 e5                	mov    %esp,%ebp
f011710f:	56                   	push   %esi
f0117110:	53                   	push   %ebx
f0117111:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0117114:	eb 17                	jmp    f011712d <vprintfmt+0x21>
			if (ch == '\0')
f0117116:	85 db                	test   %ebx,%ebx
f0117118:	0f 84 af 03 00 00    	je     f01174cd <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f011711e:	83 ec 08             	sub    $0x8,%esp
f0117121:	ff 75 0c             	pushl  0xc(%ebp)
f0117124:	53                   	push   %ebx
f0117125:	8b 45 08             	mov    0x8(%ebp),%eax
f0117128:	ff d0                	call   *%eax
f011712a:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011712d:	8b 45 10             	mov    0x10(%ebp),%eax
f0117130:	8d 50 01             	lea    0x1(%eax),%edx
f0117133:	89 55 10             	mov    %edx,0x10(%ebp)
f0117136:	8a 00                	mov    (%eax),%al
f0117138:	0f b6 d8             	movzbl %al,%ebx
f011713b:	83 fb 25             	cmp    $0x25,%ebx
f011713e:	75 d6                	jne    f0117116 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0117140:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0117144:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f011714b:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0117152:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0117159:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0117160:	8b 45 10             	mov    0x10(%ebp),%eax
f0117163:	8d 50 01             	lea    0x1(%eax),%edx
f0117166:	89 55 10             	mov    %edx,0x10(%ebp)
f0117169:	8a 00                	mov    (%eax),%al
f011716b:	0f b6 d8             	movzbl %al,%ebx
f011716e:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0117171:	83 f8 55             	cmp    $0x55,%eax
f0117174:	0f 87 2b 03 00 00    	ja     f01174a5 <vprintfmt+0x399>
f011717a:	8b 04 85 18 ca 11 f0 	mov    -0xfee35e8(,%eax,4),%eax
f0117181:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0117183:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0117187:	eb d7                	jmp    f0117160 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0117189:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f011718d:	eb d1                	jmp    f0117160 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f011718f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0117196:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117199:	89 d0                	mov    %edx,%eax
f011719b:	c1 e0 02             	shl    $0x2,%eax
f011719e:	01 d0                	add    %edx,%eax
f01171a0:	01 c0                	add    %eax,%eax
f01171a2:	01 d8                	add    %ebx,%eax
f01171a4:	83 e8 30             	sub    $0x30,%eax
f01171a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01171aa:	8b 45 10             	mov    0x10(%ebp),%eax
f01171ad:	8a 00                	mov    (%eax),%al
f01171af:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01171b2:	83 fb 2f             	cmp    $0x2f,%ebx
f01171b5:	7e 3e                	jle    f01171f5 <vprintfmt+0xe9>
f01171b7:	83 fb 39             	cmp    $0x39,%ebx
f01171ba:	7f 39                	jg     f01171f5 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01171bc:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01171bf:	eb d5                	jmp    f0117196 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01171c1:	8b 45 14             	mov    0x14(%ebp),%eax
f01171c4:	83 c0 04             	add    $0x4,%eax
f01171c7:	89 45 14             	mov    %eax,0x14(%ebp)
f01171ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01171cd:	83 e8 04             	sub    $0x4,%eax
f01171d0:	8b 00                	mov    (%eax),%eax
f01171d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01171d5:	eb 1f                	jmp    f01171f6 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01171d7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01171db:	79 83                	jns    f0117160 <vprintfmt+0x54>
				width = 0;
f01171dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01171e4:	e9 77 ff ff ff       	jmp    f0117160 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01171e9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01171f0:	e9 6b ff ff ff       	jmp    f0117160 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01171f5:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01171f6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01171fa:	0f 89 60 ff ff ff    	jns    f0117160 <vprintfmt+0x54>
				width = precision, precision = -1;
f0117200:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117203:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117206:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f011720d:	e9 4e ff ff ff       	jmp    f0117160 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0117212:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0117215:	e9 46 ff ff ff       	jmp    f0117160 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f011721a:	8b 45 14             	mov    0x14(%ebp),%eax
f011721d:	83 c0 04             	add    $0x4,%eax
f0117220:	89 45 14             	mov    %eax,0x14(%ebp)
f0117223:	8b 45 14             	mov    0x14(%ebp),%eax
f0117226:	83 e8 04             	sub    $0x4,%eax
f0117229:	8b 00                	mov    (%eax),%eax
f011722b:	83 ec 08             	sub    $0x8,%esp
f011722e:	ff 75 0c             	pushl  0xc(%ebp)
f0117231:	50                   	push   %eax
f0117232:	8b 45 08             	mov    0x8(%ebp),%eax
f0117235:	ff d0                	call   *%eax
f0117237:	83 c4 10             	add    $0x10,%esp
			break;
f011723a:	e9 89 02 00 00       	jmp    f01174c8 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f011723f:	8b 45 14             	mov    0x14(%ebp),%eax
f0117242:	83 c0 04             	add    $0x4,%eax
f0117245:	89 45 14             	mov    %eax,0x14(%ebp)
f0117248:	8b 45 14             	mov    0x14(%ebp),%eax
f011724b:	83 e8 04             	sub    $0x4,%eax
f011724e:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0117250:	85 db                	test   %ebx,%ebx
f0117252:	79 02                	jns    f0117256 <vprintfmt+0x14a>
				err = -err;
f0117254:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0117256:	83 fb 64             	cmp    $0x64,%ebx
f0117259:	7f 0b                	jg     f0117266 <vprintfmt+0x15a>
f011725b:	8b 34 9d 60 c8 11 f0 	mov    -0xfee37a0(,%ebx,4),%esi
f0117262:	85 f6                	test   %esi,%esi
f0117264:	75 19                	jne    f011727f <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0117266:	53                   	push   %ebx
f0117267:	68 05 ca 11 f0       	push   $0xf011ca05
f011726c:	ff 75 0c             	pushl  0xc(%ebp)
f011726f:	ff 75 08             	pushl  0x8(%ebp)
f0117272:	e8 5e 02 00 00       	call   f01174d5 <printfmt>
f0117277:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f011727a:	e9 49 02 00 00       	jmp    f01174c8 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f011727f:	56                   	push   %esi
f0117280:	68 0e ca 11 f0       	push   $0xf011ca0e
f0117285:	ff 75 0c             	pushl  0xc(%ebp)
f0117288:	ff 75 08             	pushl  0x8(%ebp)
f011728b:	e8 45 02 00 00       	call   f01174d5 <printfmt>
f0117290:	83 c4 10             	add    $0x10,%esp
			break;
f0117293:	e9 30 02 00 00       	jmp    f01174c8 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0117298:	8b 45 14             	mov    0x14(%ebp),%eax
f011729b:	83 c0 04             	add    $0x4,%eax
f011729e:	89 45 14             	mov    %eax,0x14(%ebp)
f01172a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01172a4:	83 e8 04             	sub    $0x4,%eax
f01172a7:	8b 30                	mov    (%eax),%esi
f01172a9:	85 f6                	test   %esi,%esi
f01172ab:	75 05                	jne    f01172b2 <vprintfmt+0x1a6>
				p = "(null)";
f01172ad:	be 11 ca 11 f0       	mov    $0xf011ca11,%esi
			if (width > 0 && padc != '-')
f01172b2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01172b6:	7e 6d                	jle    f0117325 <vprintfmt+0x219>
f01172b8:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01172bc:	74 67                	je     f0117325 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01172be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01172c1:	83 ec 08             	sub    $0x8,%esp
f01172c4:	50                   	push   %eax
f01172c5:	56                   	push   %esi
f01172c6:	e8 12 05 00 00       	call   f01177dd <strnlen>
f01172cb:	83 c4 10             	add    $0x10,%esp
f01172ce:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01172d1:	eb 16                	jmp    f01172e9 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01172d3:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01172d7:	83 ec 08             	sub    $0x8,%esp
f01172da:	ff 75 0c             	pushl  0xc(%ebp)
f01172dd:	50                   	push   %eax
f01172de:	8b 45 08             	mov    0x8(%ebp),%eax
f01172e1:	ff d0                	call   *%eax
f01172e3:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01172e6:	ff 4d e4             	decl   -0x1c(%ebp)
f01172e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01172ed:	7f e4                	jg     f01172d3 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01172ef:	eb 34                	jmp    f0117325 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01172f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01172f5:	74 1c                	je     f0117313 <vprintfmt+0x207>
f01172f7:	83 fb 1f             	cmp    $0x1f,%ebx
f01172fa:	7e 05                	jle    f0117301 <vprintfmt+0x1f5>
f01172fc:	83 fb 7e             	cmp    $0x7e,%ebx
f01172ff:	7e 12                	jle    f0117313 <vprintfmt+0x207>
					putch('?', putdat);
f0117301:	83 ec 08             	sub    $0x8,%esp
f0117304:	ff 75 0c             	pushl  0xc(%ebp)
f0117307:	6a 3f                	push   $0x3f
f0117309:	8b 45 08             	mov    0x8(%ebp),%eax
f011730c:	ff d0                	call   *%eax
f011730e:	83 c4 10             	add    $0x10,%esp
f0117311:	eb 0f                	jmp    f0117322 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0117313:	83 ec 08             	sub    $0x8,%esp
f0117316:	ff 75 0c             	pushl  0xc(%ebp)
f0117319:	53                   	push   %ebx
f011731a:	8b 45 08             	mov    0x8(%ebp),%eax
f011731d:	ff d0                	call   *%eax
f011731f:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0117322:	ff 4d e4             	decl   -0x1c(%ebp)
f0117325:	89 f0                	mov    %esi,%eax
f0117327:	8d 70 01             	lea    0x1(%eax),%esi
f011732a:	8a 00                	mov    (%eax),%al
f011732c:	0f be d8             	movsbl %al,%ebx
f011732f:	85 db                	test   %ebx,%ebx
f0117331:	74 24                	je     f0117357 <vprintfmt+0x24b>
f0117333:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0117337:	78 b8                	js     f01172f1 <vprintfmt+0x1e5>
f0117339:	ff 4d e0             	decl   -0x20(%ebp)
f011733c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0117340:	79 af                	jns    f01172f1 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0117342:	eb 13                	jmp    f0117357 <vprintfmt+0x24b>
				putch(' ', putdat);
f0117344:	83 ec 08             	sub    $0x8,%esp
f0117347:	ff 75 0c             	pushl  0xc(%ebp)
f011734a:	6a 20                	push   $0x20
f011734c:	8b 45 08             	mov    0x8(%ebp),%eax
f011734f:	ff d0                	call   *%eax
f0117351:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0117354:	ff 4d e4             	decl   -0x1c(%ebp)
f0117357:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011735b:	7f e7                	jg     f0117344 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f011735d:	e9 66 01 00 00       	jmp    f01174c8 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0117362:	83 ec 08             	sub    $0x8,%esp
f0117365:	ff 75 e8             	pushl  -0x18(%ebp)
f0117368:	8d 45 14             	lea    0x14(%ebp),%eax
f011736b:	50                   	push   %eax
f011736c:	e8 3c fd ff ff       	call   f01170ad <getint>
f0117371:	83 c4 10             	add    $0x10,%esp
f0117374:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0117377:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f011737a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011737d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117380:	85 d2                	test   %edx,%edx
f0117382:	79 23                	jns    f01173a7 <vprintfmt+0x29b>
				putch('-', putdat);
f0117384:	83 ec 08             	sub    $0x8,%esp
f0117387:	ff 75 0c             	pushl  0xc(%ebp)
f011738a:	6a 2d                	push   $0x2d
f011738c:	8b 45 08             	mov    0x8(%ebp),%eax
f011738f:	ff d0                	call   *%eax
f0117391:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0117394:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117397:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011739a:	f7 d8                	neg    %eax
f011739c:	83 d2 00             	adc    $0x0,%edx
f011739f:	f7 da                	neg    %edx
f01173a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01173a4:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01173a7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01173ae:	e9 bc 00 00 00       	jmp    f011746f <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01173b3:	83 ec 08             	sub    $0x8,%esp
f01173b6:	ff 75 e8             	pushl  -0x18(%ebp)
f01173b9:	8d 45 14             	lea    0x14(%ebp),%eax
f01173bc:	50                   	push   %eax
f01173bd:	e8 84 fc ff ff       	call   f0117046 <getuint>
f01173c2:	83 c4 10             	add    $0x10,%esp
f01173c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01173c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01173cb:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01173d2:	e9 98 00 00 00       	jmp    f011746f <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01173d7:	83 ec 08             	sub    $0x8,%esp
f01173da:	ff 75 0c             	pushl  0xc(%ebp)
f01173dd:	6a 58                	push   $0x58
f01173df:	8b 45 08             	mov    0x8(%ebp),%eax
f01173e2:	ff d0                	call   *%eax
f01173e4:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01173e7:	83 ec 08             	sub    $0x8,%esp
f01173ea:	ff 75 0c             	pushl  0xc(%ebp)
f01173ed:	6a 58                	push   $0x58
f01173ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01173f2:	ff d0                	call   *%eax
f01173f4:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01173f7:	83 ec 08             	sub    $0x8,%esp
f01173fa:	ff 75 0c             	pushl  0xc(%ebp)
f01173fd:	6a 58                	push   $0x58
f01173ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0117402:	ff d0                	call   *%eax
f0117404:	83 c4 10             	add    $0x10,%esp
			break;
f0117407:	e9 bc 00 00 00       	jmp    f01174c8 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f011740c:	83 ec 08             	sub    $0x8,%esp
f011740f:	ff 75 0c             	pushl  0xc(%ebp)
f0117412:	6a 30                	push   $0x30
f0117414:	8b 45 08             	mov    0x8(%ebp),%eax
f0117417:	ff d0                	call   *%eax
f0117419:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f011741c:	83 ec 08             	sub    $0x8,%esp
f011741f:	ff 75 0c             	pushl  0xc(%ebp)
f0117422:	6a 78                	push   $0x78
f0117424:	8b 45 08             	mov    0x8(%ebp),%eax
f0117427:	ff d0                	call   *%eax
f0117429:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f011742c:	8b 45 14             	mov    0x14(%ebp),%eax
f011742f:	83 c0 04             	add    $0x4,%eax
f0117432:	89 45 14             	mov    %eax,0x14(%ebp)
f0117435:	8b 45 14             	mov    0x14(%ebp),%eax
f0117438:	83 e8 04             	sub    $0x4,%eax
f011743b:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f011743d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0117440:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0117447:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f011744e:	eb 1f                	jmp    f011746f <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0117450:	83 ec 08             	sub    $0x8,%esp
f0117453:	ff 75 e8             	pushl  -0x18(%ebp)
f0117456:	8d 45 14             	lea    0x14(%ebp),%eax
f0117459:	50                   	push   %eax
f011745a:	e8 e7 fb ff ff       	call   f0117046 <getuint>
f011745f:	83 c4 10             	add    $0x10,%esp
f0117462:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0117465:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0117468:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f011746f:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0117473:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0117476:	83 ec 04             	sub    $0x4,%esp
f0117479:	52                   	push   %edx
f011747a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011747d:	50                   	push   %eax
f011747e:	ff 75 f4             	pushl  -0xc(%ebp)
f0117481:	ff 75 f0             	pushl  -0x10(%ebp)
f0117484:	ff 75 0c             	pushl  0xc(%ebp)
f0117487:	ff 75 08             	pushl  0x8(%ebp)
f011748a:	e8 00 fb ff ff       	call   f0116f8f <printnum>
f011748f:	83 c4 20             	add    $0x20,%esp
			break;
f0117492:	eb 34                	jmp    f01174c8 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0117494:	83 ec 08             	sub    $0x8,%esp
f0117497:	ff 75 0c             	pushl  0xc(%ebp)
f011749a:	53                   	push   %ebx
f011749b:	8b 45 08             	mov    0x8(%ebp),%eax
f011749e:	ff d0                	call   *%eax
f01174a0:	83 c4 10             	add    $0x10,%esp
			break;
f01174a3:	eb 23                	jmp    f01174c8 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01174a5:	83 ec 08             	sub    $0x8,%esp
f01174a8:	ff 75 0c             	pushl  0xc(%ebp)
f01174ab:	6a 25                	push   $0x25
f01174ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01174b0:	ff d0                	call   *%eax
f01174b2:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01174b5:	ff 4d 10             	decl   0x10(%ebp)
f01174b8:	eb 03                	jmp    f01174bd <vprintfmt+0x3b1>
f01174ba:	ff 4d 10             	decl   0x10(%ebp)
f01174bd:	8b 45 10             	mov    0x10(%ebp),%eax
f01174c0:	48                   	dec    %eax
f01174c1:	8a 00                	mov    (%eax),%al
f01174c3:	3c 25                	cmp    $0x25,%al
f01174c5:	75 f3                	jne    f01174ba <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01174c7:	90                   	nop
		}
	}
f01174c8:	e9 47 fc ff ff       	jmp    f0117114 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01174cd:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01174ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01174d1:	5b                   	pop    %ebx
f01174d2:	5e                   	pop    %esi
f01174d3:	5d                   	pop    %ebp
f01174d4:	c3                   	ret    

f01174d5 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01174d5:	55                   	push   %ebp
f01174d6:	89 e5                	mov    %esp,%ebp
f01174d8:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01174db:	8d 45 10             	lea    0x10(%ebp),%eax
f01174de:	83 c0 04             	add    $0x4,%eax
f01174e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01174e4:	8b 45 10             	mov    0x10(%ebp),%eax
f01174e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01174ea:	50                   	push   %eax
f01174eb:	ff 75 0c             	pushl  0xc(%ebp)
f01174ee:	ff 75 08             	pushl  0x8(%ebp)
f01174f1:	e8 16 fc ff ff       	call   f011710c <vprintfmt>
f01174f6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01174f9:	90                   	nop
f01174fa:	c9                   	leave  
f01174fb:	c3                   	ret    

f01174fc <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01174fc:	55                   	push   %ebp
f01174fd:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01174ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117502:	8b 40 08             	mov    0x8(%eax),%eax
f0117505:	8d 50 01             	lea    0x1(%eax),%edx
f0117508:	8b 45 0c             	mov    0xc(%ebp),%eax
f011750b:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f011750e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117511:	8b 10                	mov    (%eax),%edx
f0117513:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117516:	8b 40 04             	mov    0x4(%eax),%eax
f0117519:	39 c2                	cmp    %eax,%edx
f011751b:	73 12                	jae    f011752f <sprintputch+0x33>
		*b->buf++ = ch;
f011751d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117520:	8b 00                	mov    (%eax),%eax
f0117522:	8d 48 01             	lea    0x1(%eax),%ecx
f0117525:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117528:	89 0a                	mov    %ecx,(%edx)
f011752a:	8b 55 08             	mov    0x8(%ebp),%edx
f011752d:	88 10                	mov    %dl,(%eax)
}
f011752f:	90                   	nop
f0117530:	5d                   	pop    %ebp
f0117531:	c3                   	ret    

f0117532 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0117532:	55                   	push   %ebp
f0117533:	89 e5                	mov    %esp,%ebp
f0117535:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0117538:	8b 45 08             	mov    0x8(%ebp),%eax
f011753b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011753e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117541:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117544:	8b 45 08             	mov    0x8(%ebp),%eax
f0117547:	01 d0                	add    %edx,%eax
f0117549:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011754c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0117553:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117557:	74 06                	je     f011755f <vsnprintf+0x2d>
f0117559:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011755d:	7f 07                	jg     f0117566 <vsnprintf+0x34>
		return -E_INVAL;
f011755f:	b8 03 00 00 00       	mov    $0x3,%eax
f0117564:	eb 20                	jmp    f0117586 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0117566:	ff 75 14             	pushl  0x14(%ebp)
f0117569:	ff 75 10             	pushl  0x10(%ebp)
f011756c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f011756f:	50                   	push   %eax
f0117570:	68 fc 74 11 f0       	push   $0xf01174fc
f0117575:	e8 92 fb ff ff       	call   f011710c <vprintfmt>
f011757a:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f011757d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0117580:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0117583:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0117586:	c9                   	leave  
f0117587:	c3                   	ret    

f0117588 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0117588:	55                   	push   %ebp
f0117589:	89 e5                	mov    %esp,%ebp
f011758b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f011758e:	8d 45 10             	lea    0x10(%ebp),%eax
f0117591:	83 c0 04             	add    $0x4,%eax
f0117594:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0117597:	8b 45 10             	mov    0x10(%ebp),%eax
f011759a:	ff 75 f4             	pushl  -0xc(%ebp)
f011759d:	50                   	push   %eax
f011759e:	ff 75 0c             	pushl  0xc(%ebp)
f01175a1:	ff 75 08             	pushl  0x8(%ebp)
f01175a4:	e8 89 ff ff ff       	call   f0117532 <vsnprintf>
f01175a9:	83 c4 10             	add    $0x10,%esp
f01175ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01175af:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01175b2:	c9                   	leave  
f01175b3:	c3                   	ret    

f01175b4 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01175b4:	55                   	push   %ebp
f01175b5:	89 e5                	mov    %esp,%ebp
f01175b7:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01175ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01175be:	74 13                	je     f01175d3 <readline+0x1f>
		cprintf("%s", prompt);
f01175c0:	83 ec 08             	sub    $0x8,%esp
f01175c3:	ff 75 08             	pushl  0x8(%ebp)
f01175c6:	68 70 cb 11 f0       	push   $0xf011cb70
f01175cb:	e8 ff f7 fe ff       	call   f0106dcf <cprintf>
f01175d0:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01175d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01175da:	83 ec 0c             	sub    $0xc,%esp
f01175dd:	6a 00                	push   $0x0
f01175df:	e8 3a 97 fe ff       	call   f0100d1e <iscons>
f01175e4:	83 c4 10             	add    $0x10,%esp
f01175e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01175ea:	e8 16 97 fe ff       	call   f0100d05 <getchar>
f01175ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01175f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01175f6:	79 22                	jns    f011761a <readline+0x66>
			if (c != -E_EOF)
f01175f8:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01175fc:	0f 84 ad 00 00 00    	je     f01176af <readline+0xfb>
				cprintf("read error: %e\n", c);
f0117602:	83 ec 08             	sub    $0x8,%esp
f0117605:	ff 75 ec             	pushl  -0x14(%ebp)
f0117608:	68 73 cb 11 f0       	push   $0xf011cb73
f011760d:	e8 bd f7 fe ff       	call   f0106dcf <cprintf>
f0117612:	83 c4 10             	add    $0x10,%esp
			return;
f0117615:	e9 95 00 00 00       	jmp    f01176af <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011761a:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011761e:	7e 34                	jle    f0117654 <readline+0xa0>
f0117620:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0117627:	7f 2b                	jg     f0117654 <readline+0xa0>
			if (echoing)
f0117629:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011762d:	74 0e                	je     f011763d <readline+0x89>
				cputchar(c);
f011762f:	83 ec 0c             	sub    $0xc,%esp
f0117632:	ff 75 ec             	pushl  -0x14(%ebp)
f0117635:	e8 b4 96 fe ff       	call   f0100cee <cputchar>
f011763a:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011763d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117640:	8d 50 01             	lea    0x1(%eax),%edx
f0117643:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0117646:	89 c2                	mov    %eax,%edx
f0117648:	8b 45 0c             	mov    0xc(%ebp),%eax
f011764b:	01 d0                	add    %edx,%eax
f011764d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117650:	88 10                	mov    %dl,(%eax)
f0117652:	eb 56                	jmp    f01176aa <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0117654:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0117658:	75 1f                	jne    f0117679 <readline+0xc5>
f011765a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011765e:	7e 19                	jle    f0117679 <readline+0xc5>
			if (echoing)
f0117660:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0117664:	74 0e                	je     f0117674 <readline+0xc0>
				cputchar(c);
f0117666:	83 ec 0c             	sub    $0xc,%esp
f0117669:	ff 75 ec             	pushl  -0x14(%ebp)
f011766c:	e8 7d 96 fe ff       	call   f0100cee <cputchar>
f0117671:	83 c4 10             	add    $0x10,%esp

			i--;
f0117674:	ff 4d f4             	decl   -0xc(%ebp)
f0117677:	eb 31                	jmp    f01176aa <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0117679:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f011767d:	74 0a                	je     f0117689 <readline+0xd5>
f011767f:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0117683:	0f 85 61 ff ff ff    	jne    f01175ea <readline+0x36>
			if (echoing)
f0117689:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011768d:	74 0e                	je     f011769d <readline+0xe9>
				cputchar(c);
f011768f:	83 ec 0c             	sub    $0xc,%esp
f0117692:	ff 75 ec             	pushl  -0x14(%ebp)
f0117695:	e8 54 96 fe ff       	call   f0100cee <cputchar>
f011769a:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f011769d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01176a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01176a3:	01 d0                	add    %edx,%eax
f01176a5:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01176a8:	eb 06                	jmp    f01176b0 <readline+0xfc>
		}
	}
f01176aa:	e9 3b ff ff ff       	jmp    f01175ea <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01176af:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01176b0:	c9                   	leave  
f01176b1:	c3                   	ret    

f01176b2 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01176b2:	55                   	push   %ebp
f01176b3:	89 e5                	mov    %esp,%ebp
f01176b5:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01176b8:	e8 ef 33 ff ff       	call   f010aaac <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01176bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01176c1:	74 13                	je     f01176d6 <atomic_readline+0x24>
		cprintf("%s", prompt);
f01176c3:	83 ec 08             	sub    $0x8,%esp
f01176c6:	ff 75 08             	pushl  0x8(%ebp)
f01176c9:	68 70 cb 11 f0       	push   $0xf011cb70
f01176ce:	e8 fc f6 fe ff       	call   f0106dcf <cprintf>
f01176d3:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01176d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01176dd:	83 ec 0c             	sub    $0xc,%esp
f01176e0:	6a 00                	push   $0x0
f01176e2:	e8 37 96 fe ff       	call   f0100d1e <iscons>
f01176e7:	83 c4 10             	add    $0x10,%esp
f01176ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01176ed:	e8 13 96 fe ff       	call   f0100d05 <getchar>
f01176f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01176f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01176f9:	79 23                	jns    f011771e <atomic_readline+0x6c>
			if (c != -E_EOF)
f01176fb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01176ff:	74 13                	je     f0117714 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0117701:	83 ec 08             	sub    $0x8,%esp
f0117704:	ff 75 ec             	pushl  -0x14(%ebp)
f0117707:	68 73 cb 11 f0       	push   $0xf011cb73
f011770c:	e8 be f6 fe ff       	call   f0106dcf <cprintf>
f0117711:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0117714:	e8 ad 33 ff ff       	call   f010aac6 <sys_enable_interrupt>
			return;
f0117719:	e9 9a 00 00 00       	jmp    f01177b8 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011771e:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0117722:	7e 34                	jle    f0117758 <atomic_readline+0xa6>
f0117724:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011772b:	7f 2b                	jg     f0117758 <atomic_readline+0xa6>
			if (echoing)
f011772d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0117731:	74 0e                	je     f0117741 <atomic_readline+0x8f>
				cputchar(c);
f0117733:	83 ec 0c             	sub    $0xc,%esp
f0117736:	ff 75 ec             	pushl  -0x14(%ebp)
f0117739:	e8 b0 95 fe ff       	call   f0100cee <cputchar>
f011773e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0117741:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117744:	8d 50 01             	lea    0x1(%eax),%edx
f0117747:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011774a:	89 c2                	mov    %eax,%edx
f011774c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011774f:	01 d0                	add    %edx,%eax
f0117751:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117754:	88 10                	mov    %dl,(%eax)
f0117756:	eb 5b                	jmp    f01177b3 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0117758:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f011775c:	75 1f                	jne    f011777d <atomic_readline+0xcb>
f011775e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0117762:	7e 19                	jle    f011777d <atomic_readline+0xcb>
			if (echoing)
f0117764:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0117768:	74 0e                	je     f0117778 <atomic_readline+0xc6>
				cputchar(c);
f011776a:	83 ec 0c             	sub    $0xc,%esp
f011776d:	ff 75 ec             	pushl  -0x14(%ebp)
f0117770:	e8 79 95 fe ff       	call   f0100cee <cputchar>
f0117775:	83 c4 10             	add    $0x10,%esp
			i--;
f0117778:	ff 4d f4             	decl   -0xc(%ebp)
f011777b:	eb 36                	jmp    f01177b3 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f011777d:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0117781:	74 0a                	je     f011778d <atomic_readline+0xdb>
f0117783:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0117787:	0f 85 60 ff ff ff    	jne    f01176ed <atomic_readline+0x3b>
			if (echoing)
f011778d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0117791:	74 0e                	je     f01177a1 <atomic_readline+0xef>
				cputchar(c);
f0117793:	83 ec 0c             	sub    $0xc,%esp
f0117796:	ff 75 ec             	pushl  -0x14(%ebp)
f0117799:	e8 50 95 fe ff       	call   f0100cee <cputchar>
f011779e:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01177a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01177a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01177a7:	01 d0                	add    %edx,%eax
f01177a9:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01177ac:	e8 15 33 ff ff       	call   f010aac6 <sys_enable_interrupt>
			return;
f01177b1:	eb 05                	jmp    f01177b8 <atomic_readline+0x106>
		}
	}
f01177b3:	e9 35 ff ff ff       	jmp    f01176ed <atomic_readline+0x3b>
}
f01177b8:	c9                   	leave  
f01177b9:	c3                   	ret    

f01177ba <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01177ba:	55                   	push   %ebp
f01177bb:	89 e5                	mov    %esp,%ebp
f01177bd:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01177c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01177c7:	eb 06                	jmp    f01177cf <strlen+0x15>
		n++;
f01177c9:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01177cc:	ff 45 08             	incl   0x8(%ebp)
f01177cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01177d2:	8a 00                	mov    (%eax),%al
f01177d4:	84 c0                	test   %al,%al
f01177d6:	75 f1                	jne    f01177c9 <strlen+0xf>
		n++;
	return n;
f01177d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01177db:	c9                   	leave  
f01177dc:	c3                   	ret    

f01177dd <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01177dd:	55                   	push   %ebp
f01177de:	89 e5                	mov    %esp,%ebp
f01177e0:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01177e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01177ea:	eb 09                	jmp    f01177f5 <strnlen+0x18>
		n++;
f01177ec:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01177ef:	ff 45 08             	incl   0x8(%ebp)
f01177f2:	ff 4d 0c             	decl   0xc(%ebp)
f01177f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01177f9:	74 09                	je     f0117804 <strnlen+0x27>
f01177fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01177fe:	8a 00                	mov    (%eax),%al
f0117800:	84 c0                	test   %al,%al
f0117802:	75 e8                	jne    f01177ec <strnlen+0xf>
		n++;
	return n;
f0117804:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0117807:	c9                   	leave  
f0117808:	c3                   	ret    

f0117809 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0117809:	55                   	push   %ebp
f011780a:	89 e5                	mov    %esp,%ebp
f011780c:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f011780f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117812:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0117815:	90                   	nop
f0117816:	8b 45 08             	mov    0x8(%ebp),%eax
f0117819:	8d 50 01             	lea    0x1(%eax),%edx
f011781c:	89 55 08             	mov    %edx,0x8(%ebp)
f011781f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117822:	8d 4a 01             	lea    0x1(%edx),%ecx
f0117825:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0117828:	8a 12                	mov    (%edx),%dl
f011782a:	88 10                	mov    %dl,(%eax)
f011782c:	8a 00                	mov    (%eax),%al
f011782e:	84 c0                	test   %al,%al
f0117830:	75 e4                	jne    f0117816 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0117832:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0117835:	c9                   	leave  
f0117836:	c3                   	ret    

f0117837 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0117837:	55                   	push   %ebp
f0117838:	89 e5                	mov    %esp,%ebp
f011783a:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f011783d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117840:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0117843:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011784a:	eb 1f                	jmp    f011786b <strncpy+0x34>
		*dst++ = *src;
f011784c:	8b 45 08             	mov    0x8(%ebp),%eax
f011784f:	8d 50 01             	lea    0x1(%eax),%edx
f0117852:	89 55 08             	mov    %edx,0x8(%ebp)
f0117855:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117858:	8a 12                	mov    (%edx),%dl
f011785a:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f011785c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011785f:	8a 00                	mov    (%eax),%al
f0117861:	84 c0                	test   %al,%al
f0117863:	74 03                	je     f0117868 <strncpy+0x31>
			src++;
f0117865:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0117868:	ff 45 fc             	incl   -0x4(%ebp)
f011786b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011786e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0117871:	72 d9                	jb     f011784c <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0117873:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0117876:	c9                   	leave  
f0117877:	c3                   	ret    

f0117878 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0117878:	55                   	push   %ebp
f0117879:	89 e5                	mov    %esp,%ebp
f011787b:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f011787e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117881:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0117884:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117888:	74 30                	je     f01178ba <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f011788a:	eb 16                	jmp    f01178a2 <strlcpy+0x2a>
			*dst++ = *src++;
f011788c:	8b 45 08             	mov    0x8(%ebp),%eax
f011788f:	8d 50 01             	lea    0x1(%eax),%edx
f0117892:	89 55 08             	mov    %edx,0x8(%ebp)
f0117895:	8b 55 0c             	mov    0xc(%ebp),%edx
f0117898:	8d 4a 01             	lea    0x1(%edx),%ecx
f011789b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f011789e:	8a 12                	mov    (%edx),%dl
f01178a0:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f01178a2:	ff 4d 10             	decl   0x10(%ebp)
f01178a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01178a9:	74 09                	je     f01178b4 <strlcpy+0x3c>
f01178ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01178ae:	8a 00                	mov    (%eax),%al
f01178b0:	84 c0                	test   %al,%al
f01178b2:	75 d8                	jne    f011788c <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01178b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01178b7:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01178ba:	8b 55 08             	mov    0x8(%ebp),%edx
f01178bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01178c0:	29 c2                	sub    %eax,%edx
f01178c2:	89 d0                	mov    %edx,%eax
}
f01178c4:	c9                   	leave  
f01178c5:	c3                   	ret    

f01178c6 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01178c6:	55                   	push   %ebp
f01178c7:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01178c9:	eb 06                	jmp    f01178d1 <strcmp+0xb>
		p++, q++;
f01178cb:	ff 45 08             	incl   0x8(%ebp)
f01178ce:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01178d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01178d4:	8a 00                	mov    (%eax),%al
f01178d6:	84 c0                	test   %al,%al
f01178d8:	74 0e                	je     f01178e8 <strcmp+0x22>
f01178da:	8b 45 08             	mov    0x8(%ebp),%eax
f01178dd:	8a 10                	mov    (%eax),%dl
f01178df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01178e2:	8a 00                	mov    (%eax),%al
f01178e4:	38 c2                	cmp    %al,%dl
f01178e6:	74 e3                	je     f01178cb <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01178e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01178eb:	8a 00                	mov    (%eax),%al
f01178ed:	0f b6 d0             	movzbl %al,%edx
f01178f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01178f3:	8a 00                	mov    (%eax),%al
f01178f5:	0f b6 c0             	movzbl %al,%eax
f01178f8:	29 c2                	sub    %eax,%edx
f01178fa:	89 d0                	mov    %edx,%eax
}
f01178fc:	5d                   	pop    %ebp
f01178fd:	c3                   	ret    

f01178fe <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01178fe:	55                   	push   %ebp
f01178ff:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0117901:	eb 09                	jmp    f011790c <strncmp+0xe>
		n--, p++, q++;
f0117903:	ff 4d 10             	decl   0x10(%ebp)
f0117906:	ff 45 08             	incl   0x8(%ebp)
f0117909:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f011790c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117910:	74 17                	je     f0117929 <strncmp+0x2b>
f0117912:	8b 45 08             	mov    0x8(%ebp),%eax
f0117915:	8a 00                	mov    (%eax),%al
f0117917:	84 c0                	test   %al,%al
f0117919:	74 0e                	je     f0117929 <strncmp+0x2b>
f011791b:	8b 45 08             	mov    0x8(%ebp),%eax
f011791e:	8a 10                	mov    (%eax),%dl
f0117920:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117923:	8a 00                	mov    (%eax),%al
f0117925:	38 c2                	cmp    %al,%dl
f0117927:	74 da                	je     f0117903 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0117929:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011792d:	75 07                	jne    f0117936 <strncmp+0x38>
		return 0;
f011792f:	b8 00 00 00 00       	mov    $0x0,%eax
f0117934:	eb 14                	jmp    f011794a <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0117936:	8b 45 08             	mov    0x8(%ebp),%eax
f0117939:	8a 00                	mov    (%eax),%al
f011793b:	0f b6 d0             	movzbl %al,%edx
f011793e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117941:	8a 00                	mov    (%eax),%al
f0117943:	0f b6 c0             	movzbl %al,%eax
f0117946:	29 c2                	sub    %eax,%edx
f0117948:	89 d0                	mov    %edx,%eax
}
f011794a:	5d                   	pop    %ebp
f011794b:	c3                   	ret    

f011794c <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f011794c:	55                   	push   %ebp
f011794d:	89 e5                	mov    %esp,%ebp
f011794f:	83 ec 04             	sub    $0x4,%esp
f0117952:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117955:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0117958:	eb 12                	jmp    f011796c <strchr+0x20>
		if (*s == c)
f011795a:	8b 45 08             	mov    0x8(%ebp),%eax
f011795d:	8a 00                	mov    (%eax),%al
f011795f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0117962:	75 05                	jne    f0117969 <strchr+0x1d>
			return (char *) s;
f0117964:	8b 45 08             	mov    0x8(%ebp),%eax
f0117967:	eb 11                	jmp    f011797a <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0117969:	ff 45 08             	incl   0x8(%ebp)
f011796c:	8b 45 08             	mov    0x8(%ebp),%eax
f011796f:	8a 00                	mov    (%eax),%al
f0117971:	84 c0                	test   %al,%al
f0117973:	75 e5                	jne    f011795a <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0117975:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011797a:	c9                   	leave  
f011797b:	c3                   	ret    

f011797c <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f011797c:	55                   	push   %ebp
f011797d:	89 e5                	mov    %esp,%ebp
f011797f:	83 ec 04             	sub    $0x4,%esp
f0117982:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117985:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0117988:	eb 0d                	jmp    f0117997 <strfind+0x1b>
		if (*s == c)
f011798a:	8b 45 08             	mov    0x8(%ebp),%eax
f011798d:	8a 00                	mov    (%eax),%al
f011798f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0117992:	74 0e                	je     f01179a2 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0117994:	ff 45 08             	incl   0x8(%ebp)
f0117997:	8b 45 08             	mov    0x8(%ebp),%eax
f011799a:	8a 00                	mov    (%eax),%al
f011799c:	84 c0                	test   %al,%al
f011799e:	75 ea                	jne    f011798a <strfind+0xe>
f01179a0:	eb 01                	jmp    f01179a3 <strfind+0x27>
		if (*s == c)
			break;
f01179a2:	90                   	nop
	return (char *) s;
f01179a3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01179a6:	c9                   	leave  
f01179a7:	c3                   	ret    

f01179a8 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01179a8:	55                   	push   %ebp
f01179a9:	89 e5                	mov    %esp,%ebp
f01179ab:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01179ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01179b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01179b4:	8b 45 10             	mov    0x10(%ebp),%eax
f01179b7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01179ba:	eb 0e                	jmp    f01179ca <memset+0x22>
		*p++ = c;
f01179bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01179bf:	8d 50 01             	lea    0x1(%eax),%edx
f01179c2:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01179c5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01179c8:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01179ca:	ff 4d f8             	decl   -0x8(%ebp)
f01179cd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01179d1:	79 e9                	jns    f01179bc <memset+0x14>
		*p++ = c;

	return v;
f01179d3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01179d6:	c9                   	leave  
f01179d7:	c3                   	ret    

f01179d8 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01179d8:	55                   	push   %ebp
f01179d9:	89 e5                	mov    %esp,%ebp
f01179db:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01179de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01179e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01179e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01179e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01179ea:	eb 16                	jmp    f0117a02 <memcpy+0x2a>
		*d++ = *s++;
f01179ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01179ef:	8d 50 01             	lea    0x1(%eax),%edx
f01179f2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01179f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01179f8:	8d 4a 01             	lea    0x1(%edx),%ecx
f01179fb:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01179fe:	8a 12                	mov    (%edx),%dl
f0117a00:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0117a02:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a05:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117a08:	89 55 10             	mov    %edx,0x10(%ebp)
f0117a0b:	85 c0                	test   %eax,%eax
f0117a0d:	75 dd                	jne    f01179ec <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0117a0f:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117a12:	c9                   	leave  
f0117a13:	c3                   	ret    

f0117a14 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0117a14:	55                   	push   %ebp
f0117a15:	89 e5                	mov    %esp,%ebp
f0117a17:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;
	
	s = src;
f0117a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117a1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0117a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a23:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0117a26:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117a29:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0117a2c:	73 50                	jae    f0117a7e <memmove+0x6a>
f0117a2e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117a31:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a34:	01 d0                	add    %edx,%eax
f0117a36:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0117a39:	76 43                	jbe    f0117a7e <memmove+0x6a>
		s += n;
f0117a3b:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a3e:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0117a41:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a44:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0117a47:	eb 10                	jmp    f0117a59 <memmove+0x45>
			*--d = *--s;
f0117a49:	ff 4d f8             	decl   -0x8(%ebp)
f0117a4c:	ff 4d fc             	decl   -0x4(%ebp)
f0117a4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117a52:	8a 10                	mov    (%eax),%dl
f0117a54:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117a57:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0117a59:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a5c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117a5f:	89 55 10             	mov    %edx,0x10(%ebp)
f0117a62:	85 c0                	test   %eax,%eax
f0117a64:	75 e3                	jne    f0117a49 <memmove+0x35>
	const char *s;
	char *d;
	
	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0117a66:	eb 23                	jmp    f0117a8b <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0117a68:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117a6b:	8d 50 01             	lea    0x1(%eax),%edx
f0117a6e:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0117a71:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117a74:	8d 4a 01             	lea    0x1(%edx),%ecx
f0117a77:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0117a7a:	8a 12                	mov    (%edx),%dl
f0117a7c:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0117a7e:	8b 45 10             	mov    0x10(%ebp),%eax
f0117a81:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117a84:	89 55 10             	mov    %edx,0x10(%ebp)
f0117a87:	85 c0                	test   %eax,%eax
f0117a89:	75 dd                	jne    f0117a68 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0117a8b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117a8e:	c9                   	leave  
f0117a8f:	c3                   	ret    

f0117a90 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0117a90:	55                   	push   %ebp
f0117a91:	89 e5                	mov    %esp,%ebp
f0117a93:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0117a96:	8b 45 08             	mov    0x8(%ebp),%eax
f0117a99:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0117a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117a9f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0117aa2:	eb 2a                	jmp    f0117ace <memcmp+0x3e>
		if (*s1 != *s2)
f0117aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117aa7:	8a 10                	mov    (%eax),%dl
f0117aa9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117aac:	8a 00                	mov    (%eax),%al
f0117aae:	38 c2                	cmp    %al,%dl
f0117ab0:	74 16                	je     f0117ac8 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0117ab2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117ab5:	8a 00                	mov    (%eax),%al
f0117ab7:	0f b6 d0             	movzbl %al,%edx
f0117aba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117abd:	8a 00                	mov    (%eax),%al
f0117abf:	0f b6 c0             	movzbl %al,%eax
f0117ac2:	29 c2                	sub    %eax,%edx
f0117ac4:	89 d0                	mov    %edx,%eax
f0117ac6:	eb 18                	jmp    f0117ae0 <memcmp+0x50>
		s1++, s2++;
f0117ac8:	ff 45 fc             	incl   -0x4(%ebp)
f0117acb:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0117ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0117ad1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0117ad4:	89 55 10             	mov    %edx,0x10(%ebp)
f0117ad7:	85 c0                	test   %eax,%eax
f0117ad9:	75 c9                	jne    f0117aa4 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0117adb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117ae0:	c9                   	leave  
f0117ae1:	c3                   	ret    

f0117ae2 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0117ae2:	55                   	push   %ebp
f0117ae3:	89 e5                	mov    %esp,%ebp
f0117ae5:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0117ae8:	8b 55 08             	mov    0x8(%ebp),%edx
f0117aeb:	8b 45 10             	mov    0x10(%ebp),%eax
f0117aee:	01 d0                	add    %edx,%eax
f0117af0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0117af3:	eb 15                	jmp    f0117b0a <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0117af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0117af8:	8a 00                	mov    (%eax),%al
f0117afa:	0f b6 d0             	movzbl %al,%edx
f0117afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117b00:	0f b6 c0             	movzbl %al,%eax
f0117b03:	39 c2                	cmp    %eax,%edx
f0117b05:	74 0d                	je     f0117b14 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0117b07:	ff 45 08             	incl   0x8(%ebp)
f0117b0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b0d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0117b10:	72 e3                	jb     f0117af5 <memfind+0x13>
f0117b12:	eb 01                	jmp    f0117b15 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0117b14:	90                   	nop
	return (void *) s;
f0117b15:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0117b18:	c9                   	leave  
f0117b19:	c3                   	ret    

f0117b1a <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0117b1a:	55                   	push   %ebp
f0117b1b:	89 e5                	mov    %esp,%ebp
f0117b1d:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0117b20:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0117b27:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0117b2e:	eb 03                	jmp    f0117b33 <strtol+0x19>
		s++;
f0117b30:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0117b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b36:	8a 00                	mov    (%eax),%al
f0117b38:	3c 20                	cmp    $0x20,%al
f0117b3a:	74 f4                	je     f0117b30 <strtol+0x16>
f0117b3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b3f:	8a 00                	mov    (%eax),%al
f0117b41:	3c 09                	cmp    $0x9,%al
f0117b43:	74 eb                	je     f0117b30 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0117b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b48:	8a 00                	mov    (%eax),%al
f0117b4a:	3c 2b                	cmp    $0x2b,%al
f0117b4c:	75 05                	jne    f0117b53 <strtol+0x39>
		s++;
f0117b4e:	ff 45 08             	incl   0x8(%ebp)
f0117b51:	eb 13                	jmp    f0117b66 <strtol+0x4c>
	else if (*s == '-')
f0117b53:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b56:	8a 00                	mov    (%eax),%al
f0117b58:	3c 2d                	cmp    $0x2d,%al
f0117b5a:	75 0a                	jne    f0117b66 <strtol+0x4c>
		s++, neg = 1;
f0117b5c:	ff 45 08             	incl   0x8(%ebp)
f0117b5f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0117b66:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117b6a:	74 06                	je     f0117b72 <strtol+0x58>
f0117b6c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0117b70:	75 20                	jne    f0117b92 <strtol+0x78>
f0117b72:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b75:	8a 00                	mov    (%eax),%al
f0117b77:	3c 30                	cmp    $0x30,%al
f0117b79:	75 17                	jne    f0117b92 <strtol+0x78>
f0117b7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b7e:	40                   	inc    %eax
f0117b7f:	8a 00                	mov    (%eax),%al
f0117b81:	3c 78                	cmp    $0x78,%al
f0117b83:	75 0d                	jne    f0117b92 <strtol+0x78>
		s += 2, base = 16;
f0117b85:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0117b89:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0117b90:	eb 28                	jmp    f0117bba <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0117b92:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117b96:	75 15                	jne    f0117bad <strtol+0x93>
f0117b98:	8b 45 08             	mov    0x8(%ebp),%eax
f0117b9b:	8a 00                	mov    (%eax),%al
f0117b9d:	3c 30                	cmp    $0x30,%al
f0117b9f:	75 0c                	jne    f0117bad <strtol+0x93>
		s++, base = 8;
f0117ba1:	ff 45 08             	incl   0x8(%ebp)
f0117ba4:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0117bab:	eb 0d                	jmp    f0117bba <strtol+0xa0>
	else if (base == 0)
f0117bad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0117bb1:	75 07                	jne    f0117bba <strtol+0xa0>
		base = 10;
f0117bb3:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0117bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bbd:	8a 00                	mov    (%eax),%al
f0117bbf:	3c 2f                	cmp    $0x2f,%al
f0117bc1:	7e 19                	jle    f0117bdc <strtol+0xc2>
f0117bc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bc6:	8a 00                	mov    (%eax),%al
f0117bc8:	3c 39                	cmp    $0x39,%al
f0117bca:	7f 10                	jg     f0117bdc <strtol+0xc2>
			dig = *s - '0';
f0117bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bcf:	8a 00                	mov    (%eax),%al
f0117bd1:	0f be c0             	movsbl %al,%eax
f0117bd4:	83 e8 30             	sub    $0x30,%eax
f0117bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117bda:	eb 42                	jmp    f0117c1e <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0117bdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bdf:	8a 00                	mov    (%eax),%al
f0117be1:	3c 60                	cmp    $0x60,%al
f0117be3:	7e 19                	jle    f0117bfe <strtol+0xe4>
f0117be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0117be8:	8a 00                	mov    (%eax),%al
f0117bea:	3c 7a                	cmp    $0x7a,%al
f0117bec:	7f 10                	jg     f0117bfe <strtol+0xe4>
			dig = *s - 'a' + 10;
f0117bee:	8b 45 08             	mov    0x8(%ebp),%eax
f0117bf1:	8a 00                	mov    (%eax),%al
f0117bf3:	0f be c0             	movsbl %al,%eax
f0117bf6:	83 e8 57             	sub    $0x57,%eax
f0117bf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117bfc:	eb 20                	jmp    f0117c1e <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0117bfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0117c01:	8a 00                	mov    (%eax),%al
f0117c03:	3c 40                	cmp    $0x40,%al
f0117c05:	7e 39                	jle    f0117c40 <strtol+0x126>
f0117c07:	8b 45 08             	mov    0x8(%ebp),%eax
f0117c0a:	8a 00                	mov    (%eax),%al
f0117c0c:	3c 5a                	cmp    $0x5a,%al
f0117c0e:	7f 30                	jg     f0117c40 <strtol+0x126>
			dig = *s - 'A' + 10;
f0117c10:	8b 45 08             	mov    0x8(%ebp),%eax
f0117c13:	8a 00                	mov    (%eax),%al
f0117c15:	0f be c0             	movsbl %al,%eax
f0117c18:	83 e8 37             	sub    $0x37,%eax
f0117c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0117c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117c21:	3b 45 10             	cmp    0x10(%ebp),%eax
f0117c24:	7d 19                	jge    f0117c3f <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0117c26:	ff 45 08             	incl   0x8(%ebp)
f0117c29:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117c2c:	0f af 45 10          	imul   0x10(%ebp),%eax
f0117c30:	89 c2                	mov    %eax,%edx
f0117c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117c35:	01 d0                	add    %edx,%eax
f0117c37:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0117c3a:	e9 7b ff ff ff       	jmp    f0117bba <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0117c3f:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0117c40:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0117c44:	74 08                	je     f0117c4e <strtol+0x134>
		*endptr = (char *) s;
f0117c46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117c49:	8b 55 08             	mov    0x8(%ebp),%edx
f0117c4c:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0117c4e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0117c52:	74 07                	je     f0117c5b <strtol+0x141>
f0117c54:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117c57:	f7 d8                	neg    %eax
f0117c59:	eb 03                	jmp    f0117c5e <strtol+0x144>
f0117c5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0117c5e:	c9                   	leave  
f0117c5f:	c3                   	ret    

f0117c60 <ltostr>:

void
ltostr(long value, char *str)
{
f0117c60:	55                   	push   %ebp
f0117c61:	89 e5                	mov    %esp,%ebp
f0117c63:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0117c66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0117c6d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0117c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117c78:	79 13                	jns    f0117c8d <ltostr+0x2d>
	{
		neg = 1;
f0117c7a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0117c81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117c84:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0117c87:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0117c8a:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0117c8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117c90:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0117c95:	99                   	cltd   
f0117c96:	f7 f9                	idiv   %ecx
f0117c98:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0117c9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117c9e:	8d 50 01             	lea    0x1(%eax),%edx
f0117ca1:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0117ca4:	89 c2                	mov    %eax,%edx
f0117ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117ca9:	01 d0                	add    %edx,%eax
f0117cab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117cae:	83 c2 30             	add    $0x30,%edx
f0117cb1:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0117cb3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0117cb6:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0117cbb:	f7 e9                	imul   %ecx
f0117cbd:	c1 fa 02             	sar    $0x2,%edx
f0117cc0:	89 c8                	mov    %ecx,%eax
f0117cc2:	c1 f8 1f             	sar    $0x1f,%eax
f0117cc5:	29 c2                	sub    %eax,%edx
f0117cc7:	89 d0                	mov    %edx,%eax
f0117cc9:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0117ccc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0117ccf:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0117cd4:	f7 e9                	imul   %ecx
f0117cd6:	c1 fa 02             	sar    $0x2,%edx
f0117cd9:	89 c8                	mov    %ecx,%eax
f0117cdb:	c1 f8 1f             	sar    $0x1f,%eax
f0117cde:	29 c2                	sub    %eax,%edx
f0117ce0:	89 d0                	mov    %edx,%eax
f0117ce2:	c1 e0 02             	shl    $0x2,%eax
f0117ce5:	01 d0                	add    %edx,%eax
f0117ce7:	01 c0                	add    %eax,%eax
f0117ce9:	29 c1                	sub    %eax,%ecx
f0117ceb:	89 ca                	mov    %ecx,%edx
f0117ced:	85 d2                	test   %edx,%edx
f0117cef:	75 9c                	jne    f0117c8d <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0117cf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0117cf8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117cfb:	48                   	dec    %eax
f0117cfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0117cff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0117d03:	74 3d                	je     f0117d42 <ltostr+0xe2>
		start = 1 ;
f0117d05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0117d0c:	eb 34                	jmp    f0117d42 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0117d0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117d11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d14:	01 d0                	add    %edx,%eax
f0117d16:	8a 00                	mov    (%eax),%al
f0117d18:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0117d1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d21:	01 c2                	add    %eax,%edx
f0117d23:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0117d26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d29:	01 c8                	add    %ecx,%eax
f0117d2b:	8a 00                	mov    (%eax),%al
f0117d2d:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0117d2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117d32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d35:	01 c2                	add    %eax,%edx
f0117d37:	8a 45 eb             	mov    -0x15(%ebp),%al
f0117d3a:	88 02                	mov    %al,(%edx)
		start++ ;
f0117d3c:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0117d3f:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0117d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117d45:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117d48:	7c c4                	jl     f0117d0e <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0117d4a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0117d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117d50:	01 d0                	add    %edx,%eax
f0117d52:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0117d55:	90                   	nop
f0117d56:	c9                   	leave  
f0117d57:	c3                   	ret    

f0117d58 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0117d58:	55                   	push   %ebp
f0117d59:	89 e5                	mov    %esp,%ebp
f0117d5b:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0117d5e:	ff 75 08             	pushl  0x8(%ebp)
f0117d61:	e8 54 fa ff ff       	call   f01177ba <strlen>
f0117d66:	83 c4 04             	add    $0x4,%esp
f0117d69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0117d6c:	ff 75 0c             	pushl  0xc(%ebp)
f0117d6f:	e8 46 fa ff ff       	call   f01177ba <strlen>
f0117d74:	83 c4 04             	add    $0x4,%esp
f0117d77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0117d7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0117d81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0117d88:	eb 17                	jmp    f0117da1 <strcconcat+0x49>
		final[s] = str1[s] ;
f0117d8a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117d8d:	8b 45 10             	mov    0x10(%ebp),%eax
f0117d90:	01 c2                	add    %eax,%edx
f0117d92:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0117d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0117d98:	01 c8                	add    %ecx,%eax
f0117d9a:	8a 00                	mov    (%eax),%al
f0117d9c:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0117d9e:	ff 45 fc             	incl   -0x4(%ebp)
f0117da1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117da4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117da7:	7c e1                	jl     f0117d8a <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0117da9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0117db0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0117db7:	eb 1f                	jmp    f0117dd8 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0117db9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117dbc:	8d 50 01             	lea    0x1(%eax),%edx
f0117dbf:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0117dc2:	89 c2                	mov    %eax,%edx
f0117dc4:	8b 45 10             	mov    0x10(%ebp),%eax
f0117dc7:	01 c2                	add    %eax,%edx
f0117dc9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0117dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117dcf:	01 c8                	add    %ecx,%eax
f0117dd1:	8a 00                	mov    (%eax),%al
f0117dd3:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0117dd5:	ff 45 f8             	incl   -0x8(%ebp)
f0117dd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117ddb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117dde:	7c d9                	jl     f0117db9 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0117de0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0117de3:	8b 45 10             	mov    0x10(%ebp),%eax
f0117de6:	01 d0                	add    %edx,%eax
f0117de8:	c6 00 00             	movb   $0x0,(%eax)
}
f0117deb:	90                   	nop
f0117dec:	c9                   	leave  
f0117ded:	c3                   	ret    

f0117dee <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0117dee:	55                   	push   %ebp
f0117def:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0117df1:	8b 45 14             	mov    0x14(%ebp),%eax
f0117df4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0117dfa:	8b 45 14             	mov    0x14(%ebp),%eax
f0117dfd:	8b 00                	mov    (%eax),%eax
f0117dff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117e06:	8b 45 10             	mov    0x10(%ebp),%eax
f0117e09:	01 d0                	add    %edx,%eax
f0117e0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0117e11:	eb 0c                	jmp    f0117e1f <strsplit+0x31>
			*string++ = 0;
f0117e13:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e16:	8d 50 01             	lea    0x1(%eax),%edx
f0117e19:	89 55 08             	mov    %edx,0x8(%ebp)
f0117e1c:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0117e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e22:	8a 00                	mov    (%eax),%al
f0117e24:	84 c0                	test   %al,%al
f0117e26:	74 18                	je     f0117e40 <strsplit+0x52>
f0117e28:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e2b:	8a 00                	mov    (%eax),%al
f0117e2d:	0f be c0             	movsbl %al,%eax
f0117e30:	50                   	push   %eax
f0117e31:	ff 75 0c             	pushl  0xc(%ebp)
f0117e34:	e8 13 fb ff ff       	call   f011794c <strchr>
f0117e39:	83 c4 08             	add    $0x8,%esp
f0117e3c:	85 c0                	test   %eax,%eax
f0117e3e:	75 d3                	jne    f0117e13 <strsplit+0x25>
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
f0117e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e43:	8a 00                	mov    (%eax),%al
f0117e45:	84 c0                	test   %al,%al
f0117e47:	74 5a                	je     f0117ea3 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1) 
f0117e49:	8b 45 14             	mov    0x14(%ebp),%eax
f0117e4c:	8b 00                	mov    (%eax),%eax
f0117e4e:	83 f8 0f             	cmp    $0xf,%eax
f0117e51:	75 07                	jne    f0117e5a <strsplit+0x6c>
		{
			return 0;
f0117e53:	b8 00 00 00 00       	mov    $0x0,%eax
f0117e58:	eb 66                	jmp    f0117ec0 <strsplit+0xd2>
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0117e5a:	8b 45 14             	mov    0x14(%ebp),%eax
f0117e5d:	8b 00                	mov    (%eax),%eax
f0117e5f:	8d 48 01             	lea    0x1(%eax),%ecx
f0117e62:	8b 55 14             	mov    0x14(%ebp),%edx
f0117e65:	89 0a                	mov    %ecx,(%edx)
f0117e67:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117e6e:	8b 45 10             	mov    0x10(%ebp),%eax
f0117e71:	01 c2                	add    %eax,%edx
f0117e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e76:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117e78:	eb 03                	jmp    f0117e7d <strsplit+0x8f>
			string++;
f0117e7a:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0117e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e80:	8a 00                	mov    (%eax),%al
f0117e82:	84 c0                	test   %al,%al
f0117e84:	74 8b                	je     f0117e11 <strsplit+0x23>
f0117e86:	8b 45 08             	mov    0x8(%ebp),%eax
f0117e89:	8a 00                	mov    (%eax),%al
f0117e8b:	0f be c0             	movsbl %al,%eax
f0117e8e:	50                   	push   %eax
f0117e8f:	ff 75 0c             	pushl  0xc(%ebp)
f0117e92:	e8 b5 fa ff ff       	call   f011794c <strchr>
f0117e97:	83 c4 08             	add    $0x8,%esp
f0117e9a:	85 c0                	test   %eax,%eax
f0117e9c:	74 dc                	je     f0117e7a <strsplit+0x8c>
			string++;
	}
f0117e9e:	e9 6e ff ff ff       	jmp    f0117e11 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0117ea3:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0117ea4:	8b 45 14             	mov    0x14(%ebp),%eax
f0117ea7:	8b 00                	mov    (%eax),%eax
f0117ea9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117eb0:	8b 45 10             	mov    0x10(%ebp),%eax
f0117eb3:	01 d0                	add    %edx,%eax
f0117eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0117ebb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0117ec0:	c9                   	leave  
f0117ec1:	c3                   	ret    

f0117ec2 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0117ec2:	55                   	push   %ebp
f0117ec3:	89 e5                	mov    %esp,%ebp
f0117ec5:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0117ec8:	90                   	nop
f0117ec9:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0117ed0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0117ed3:	89 c2                	mov    %eax,%edx
f0117ed5:	ec                   	in     (%dx),%al
f0117ed6:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0117ed9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0117edc:	0f b6 c0             	movzbl %al,%eax
f0117edf:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0117ee2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117ee5:	25 c0 00 00 00       	and    $0xc0,%eax
f0117eea:	83 f8 40             	cmp    $0x40,%eax
f0117eed:	75 da                	jne    f0117ec9 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0117eef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0117ef3:	74 11                	je     f0117f06 <ide_wait_ready+0x44>
f0117ef5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0117ef8:	83 e0 21             	and    $0x21,%eax
f0117efb:	85 c0                	test   %eax,%eax
f0117efd:	74 07                	je     f0117f06 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0117eff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0117f04:	eb 05                	jmp    f0117f0b <ide_wait_ready+0x49>
	}
	return 0;
f0117f06:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0117f0b:	c9                   	leave  
f0117f0c:	c3                   	ret    

f0117f0d <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0117f0d:	55                   	push   %ebp
f0117f0e:	89 e5                	mov    %esp,%ebp
f0117f10:	57                   	push   %edi
f0117f11:	53                   	push   %ebx
f0117f12:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0117f15:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0117f1c:	76 16                	jbe    f0117f34 <ide_read+0x27>
f0117f1e:	68 83 cb 11 f0       	push   $0xf011cb83
f0117f23:	68 90 cb 11 f0       	push   $0xf011cb90
f0117f28:	6a 25                	push   $0x25
f0117f2a:	68 a5 cb 11 f0       	push   $0xf011cba5
f0117f2f:	e8 42 82 fe ff       	call   f0100176 <_panic>

	//TODOFUTUREWORK: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0117f34:	83 ec 0c             	sub    $0xc,%esp
f0117f37:	6a 00                	push   $0x0
f0117f39:	e8 84 ff ff ff       	call   f0117ec2 <ide_wait_ready>
f0117f3e:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0117f41:	8b 45 10             	mov    0x10(%ebp),%eax
f0117f44:	0f b6 c0             	movzbl %al,%eax
f0117f47:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0117f4e:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0117f51:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0117f54:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117f57:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0117f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0117f5b:	0f b6 c0             	movzbl %al,%eax
f0117f5e:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0117f65:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0117f68:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0117f6b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0117f6e:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0117f6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0117f72:	c1 e8 08             	shr    $0x8,%eax
f0117f75:	0f b6 c0             	movzbl %al,%eax
f0117f78:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0117f7f:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0117f82:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0117f85:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117f88:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0117f89:	8b 45 08             	mov    0x8(%ebp),%eax
f0117f8c:	c1 e8 10             	shr    $0x10,%eax
f0117f8f:	0f b6 c0             	movzbl %al,%eax
f0117f92:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0117f99:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0117f9c:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0117f9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117fa2:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0117fa3:	a1 6c 73 53 f0       	mov    0xf053736c,%eax
f0117fa8:	83 e0 01             	and    $0x1,%eax
f0117fab:	c1 e0 04             	shl    $0x4,%eax
f0117fae:	88 c2                	mov    %al,%dl
f0117fb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0117fb3:	c1 e8 18             	shr    $0x18,%eax
f0117fb6:	83 e0 0f             	and    $0xf,%eax
f0117fb9:	09 d0                	or     %edx,%eax
f0117fbb:	83 c8 e0             	or     $0xffffffe0,%eax
f0117fbe:	0f b6 c0             	movzbl %al,%eax
f0117fc1:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0117fc8:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0117fcb:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0117fce:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117fd1:	ee                   	out    %al,(%dx)
f0117fd2:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0117fd9:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0117fdd:	8a 45 d7             	mov    -0x29(%ebp),%al
f0117fe0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117fe3:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0117fe4:	eb 55                	jmp    f011803b <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0117fe6:	83 ec 0c             	sub    $0xc,%esp
f0117fe9:	6a 01                	push   $0x1
f0117feb:	e8 d2 fe ff ff       	call   f0117ec2 <ide_wait_ready>
f0117ff0:	83 c4 10             	add    $0x10,%esp
f0117ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117ff6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0117ffa:	79 05                	jns    f0118001 <ide_read+0xf4>
			return r;
f0117ffc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117fff:	eb 45                	jmp    f0118046 <ide_read+0x139>
f0118001:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0118008:	8b 45 0c             	mov    0xc(%ebp),%eax
f011800b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011800e:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0118015:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118018:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011801b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011801e:	89 cb                	mov    %ecx,%ebx
f0118020:	89 df                	mov    %ebx,%edi
f0118022:	89 c1                	mov    %eax,%ecx
f0118024:	fc                   	cld    
f0118025:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0118027:	89 c8                	mov    %ecx,%eax
f0118029:	89 fb                	mov    %edi,%ebx
f011802b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011802e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0118031:	ff 4d 10             	decl   0x10(%ebp)
f0118034:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011803b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011803f:	75 a5                	jne    f0117fe6 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0118041:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118046:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118049:	5b                   	pop    %ebx
f011804a:	5f                   	pop    %edi
f011804b:	5d                   	pop    %ebp
f011804c:	c3                   	ret    

f011804d <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f011804d:	55                   	push   %ebp
f011804e:	89 e5                	mov    %esp,%ebp
f0118050:	56                   	push   %esi
f0118051:	53                   	push   %ebx
f0118052:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0118055:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011805c:	76 16                	jbe    f0118074 <ide_write+0x27>
f011805e:	68 83 cb 11 f0       	push   $0xf011cb83
f0118063:	68 90 cb 11 f0       	push   $0xf011cb90
f0118068:	6a 3f                	push   $0x3f
f011806a:	68 a5 cb 11 f0       	push   $0xf011cba5
f011806f:	e8 02 81 fe ff       	call   f0100176 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0118074:	83 ec 0c             	sub    $0xc,%esp
f0118077:	6a 00                	push   $0x0
f0118079:	e8 44 fe ff ff       	call   f0117ec2 <ide_wait_ready>
f011807e:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0118081:	8b 45 10             	mov    0x10(%ebp),%eax
f0118084:	0f b6 c0             	movzbl %al,%eax
f0118087:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011808e:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0118091:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0118094:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0118097:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0118098:	8b 45 08             	mov    0x8(%ebp),%eax
f011809b:	0f b6 c0             	movzbl %al,%eax
f011809e:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01180a5:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01180a8:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01180ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01180ae:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01180af:	8b 45 08             	mov    0x8(%ebp),%eax
f01180b2:	c1 e8 08             	shr    $0x8,%eax
f01180b5:	0f b6 c0             	movzbl %al,%eax
f01180b8:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01180bf:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01180c2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01180c5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01180c8:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01180c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01180cc:	c1 e8 10             	shr    $0x10,%eax
f01180cf:	0f b6 c0             	movzbl %al,%eax
f01180d2:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01180d9:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01180dc:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01180df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01180e2:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01180e3:	a1 6c 73 53 f0       	mov    0xf053736c,%eax
f01180e8:	83 e0 01             	and    $0x1,%eax
f01180eb:	c1 e0 04             	shl    $0x4,%eax
f01180ee:	88 c2                	mov    %al,%dl
f01180f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01180f3:	c1 e8 18             	shr    $0x18,%eax
f01180f6:	83 e0 0f             	and    $0xf,%eax
f01180f9:	09 d0                	or     %edx,%eax
f01180fb:	83 c8 e0             	or     $0xffffffe0,%eax
f01180fe:	0f b6 c0             	movzbl %al,%eax
f0118101:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0118108:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011810b:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011810e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118111:	ee                   	out    %al,(%dx)
f0118112:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0118119:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f011811d:	8a 45 d7             	mov    -0x29(%ebp),%al
f0118120:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118123:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0118124:	eb 55                	jmp    f011817b <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0118126:	83 ec 0c             	sub    $0xc,%esp
f0118129:	6a 01                	push   $0x1
f011812b:	e8 92 fd ff ff       	call   f0117ec2 <ide_wait_ready>
f0118130:	83 c4 10             	add    $0x10,%esp
f0118133:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118136:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011813a:	79 05                	jns    f0118141 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f011813c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011813f:	eb 45                	jmp    f0118186 <ide_write+0x139>
f0118141:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0118148:	8b 45 0c             	mov    0xc(%ebp),%eax
f011814b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011814e:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0118155:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118158:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011815b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011815e:	89 cb                	mov    %ecx,%ebx
f0118160:	89 de                	mov    %ebx,%esi
f0118162:	89 c1                	mov    %eax,%ecx
f0118164:	fc                   	cld    
f0118165:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0118167:	89 c8                	mov    %ecx,%eax
f0118169:	89 f3                	mov    %esi,%ebx
f011816b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011816e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0118171:	ff 4d 10             	decl   0x10(%ebp)
f0118174:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011817b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011817f:	75 a5                	jne    f0118126 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0118181:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118186:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118189:	5b                   	pop    %ebx
f011818a:	5e                   	pop    %esi
f011818b:	5d                   	pop    %ebp
f011818c:	c3                   	ret    
f011818d:	66 90                	xchg   %ax,%ax
f011818f:	90                   	nop

f0118190 <__udivdi3>:
f0118190:	55                   	push   %ebp
f0118191:	57                   	push   %edi
f0118192:	56                   	push   %esi
f0118193:	53                   	push   %ebx
f0118194:	83 ec 1c             	sub    $0x1c,%esp
f0118197:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f011819b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f011819f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01181a3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01181a7:	89 ca                	mov    %ecx,%edx
f01181a9:	89 f8                	mov    %edi,%eax
f01181ab:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01181af:	85 f6                	test   %esi,%esi
f01181b1:	75 2d                	jne    f01181e0 <__udivdi3+0x50>
f01181b3:	39 cf                	cmp    %ecx,%edi
f01181b5:	77 65                	ja     f011821c <__udivdi3+0x8c>
f01181b7:	89 fd                	mov    %edi,%ebp
f01181b9:	85 ff                	test   %edi,%edi
f01181bb:	75 0b                	jne    f01181c8 <__udivdi3+0x38>
f01181bd:	b8 01 00 00 00       	mov    $0x1,%eax
f01181c2:	31 d2                	xor    %edx,%edx
f01181c4:	f7 f7                	div    %edi
f01181c6:	89 c5                	mov    %eax,%ebp
f01181c8:	31 d2                	xor    %edx,%edx
f01181ca:	89 c8                	mov    %ecx,%eax
f01181cc:	f7 f5                	div    %ebp
f01181ce:	89 c1                	mov    %eax,%ecx
f01181d0:	89 d8                	mov    %ebx,%eax
f01181d2:	f7 f5                	div    %ebp
f01181d4:	89 cf                	mov    %ecx,%edi
f01181d6:	89 fa                	mov    %edi,%edx
f01181d8:	83 c4 1c             	add    $0x1c,%esp
f01181db:	5b                   	pop    %ebx
f01181dc:	5e                   	pop    %esi
f01181dd:	5f                   	pop    %edi
f01181de:	5d                   	pop    %ebp
f01181df:	c3                   	ret    
f01181e0:	39 ce                	cmp    %ecx,%esi
f01181e2:	77 28                	ja     f011820c <__udivdi3+0x7c>
f01181e4:	0f bd fe             	bsr    %esi,%edi
f01181e7:	83 f7 1f             	xor    $0x1f,%edi
f01181ea:	75 40                	jne    f011822c <__udivdi3+0x9c>
f01181ec:	39 ce                	cmp    %ecx,%esi
f01181ee:	72 0a                	jb     f01181fa <__udivdi3+0x6a>
f01181f0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01181f4:	0f 87 9e 00 00 00    	ja     f0118298 <__udivdi3+0x108>
f01181fa:	b8 01 00 00 00       	mov    $0x1,%eax
f01181ff:	89 fa                	mov    %edi,%edx
f0118201:	83 c4 1c             	add    $0x1c,%esp
f0118204:	5b                   	pop    %ebx
f0118205:	5e                   	pop    %esi
f0118206:	5f                   	pop    %edi
f0118207:	5d                   	pop    %ebp
f0118208:	c3                   	ret    
f0118209:	8d 76 00             	lea    0x0(%esi),%esi
f011820c:	31 ff                	xor    %edi,%edi
f011820e:	31 c0                	xor    %eax,%eax
f0118210:	89 fa                	mov    %edi,%edx
f0118212:	83 c4 1c             	add    $0x1c,%esp
f0118215:	5b                   	pop    %ebx
f0118216:	5e                   	pop    %esi
f0118217:	5f                   	pop    %edi
f0118218:	5d                   	pop    %ebp
f0118219:	c3                   	ret    
f011821a:	66 90                	xchg   %ax,%ax
f011821c:	89 d8                	mov    %ebx,%eax
f011821e:	f7 f7                	div    %edi
f0118220:	31 ff                	xor    %edi,%edi
f0118222:	89 fa                	mov    %edi,%edx
f0118224:	83 c4 1c             	add    $0x1c,%esp
f0118227:	5b                   	pop    %ebx
f0118228:	5e                   	pop    %esi
f0118229:	5f                   	pop    %edi
f011822a:	5d                   	pop    %ebp
f011822b:	c3                   	ret    
f011822c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0118231:	89 eb                	mov    %ebp,%ebx
f0118233:	29 fb                	sub    %edi,%ebx
f0118235:	89 f9                	mov    %edi,%ecx
f0118237:	d3 e6                	shl    %cl,%esi
f0118239:	89 c5                	mov    %eax,%ebp
f011823b:	88 d9                	mov    %bl,%cl
f011823d:	d3 ed                	shr    %cl,%ebp
f011823f:	89 e9                	mov    %ebp,%ecx
f0118241:	09 f1                	or     %esi,%ecx
f0118243:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0118247:	89 f9                	mov    %edi,%ecx
f0118249:	d3 e0                	shl    %cl,%eax
f011824b:	89 c5                	mov    %eax,%ebp
f011824d:	89 d6                	mov    %edx,%esi
f011824f:	88 d9                	mov    %bl,%cl
f0118251:	d3 ee                	shr    %cl,%esi
f0118253:	89 f9                	mov    %edi,%ecx
f0118255:	d3 e2                	shl    %cl,%edx
f0118257:	8b 44 24 08          	mov    0x8(%esp),%eax
f011825b:	88 d9                	mov    %bl,%cl
f011825d:	d3 e8                	shr    %cl,%eax
f011825f:	09 c2                	or     %eax,%edx
f0118261:	89 d0                	mov    %edx,%eax
f0118263:	89 f2                	mov    %esi,%edx
f0118265:	f7 74 24 0c          	divl   0xc(%esp)
f0118269:	89 d6                	mov    %edx,%esi
f011826b:	89 c3                	mov    %eax,%ebx
f011826d:	f7 e5                	mul    %ebp
f011826f:	39 d6                	cmp    %edx,%esi
f0118271:	72 19                	jb     f011828c <__udivdi3+0xfc>
f0118273:	74 0b                	je     f0118280 <__udivdi3+0xf0>
f0118275:	89 d8                	mov    %ebx,%eax
f0118277:	31 ff                	xor    %edi,%edi
f0118279:	e9 58 ff ff ff       	jmp    f01181d6 <__udivdi3+0x46>
f011827e:	66 90                	xchg   %ax,%ax
f0118280:	8b 54 24 08          	mov    0x8(%esp),%edx
f0118284:	89 f9                	mov    %edi,%ecx
f0118286:	d3 e2                	shl    %cl,%edx
f0118288:	39 c2                	cmp    %eax,%edx
f011828a:	73 e9                	jae    f0118275 <__udivdi3+0xe5>
f011828c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f011828f:	31 ff                	xor    %edi,%edi
f0118291:	e9 40 ff ff ff       	jmp    f01181d6 <__udivdi3+0x46>
f0118296:	66 90                	xchg   %ax,%ax
f0118298:	31 c0                	xor    %eax,%eax
f011829a:	e9 37 ff ff ff       	jmp    f01181d6 <__udivdi3+0x46>
f011829f:	90                   	nop

f01182a0 <__umoddi3>:
f01182a0:	55                   	push   %ebp
f01182a1:	57                   	push   %edi
f01182a2:	56                   	push   %esi
f01182a3:	53                   	push   %ebx
f01182a4:	83 ec 1c             	sub    $0x1c,%esp
f01182a7:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01182ab:	8b 74 24 34          	mov    0x34(%esp),%esi
f01182af:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01182b3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01182b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01182bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01182bf:	89 f3                	mov    %esi,%ebx
f01182c1:	89 fa                	mov    %edi,%edx
f01182c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01182c7:	89 34 24             	mov    %esi,(%esp)
f01182ca:	85 c0                	test   %eax,%eax
f01182cc:	75 1a                	jne    f01182e8 <__umoddi3+0x48>
f01182ce:	39 f7                	cmp    %esi,%edi
f01182d0:	0f 86 a2 00 00 00    	jbe    f0118378 <__umoddi3+0xd8>
f01182d6:	89 c8                	mov    %ecx,%eax
f01182d8:	89 f2                	mov    %esi,%edx
f01182da:	f7 f7                	div    %edi
f01182dc:	89 d0                	mov    %edx,%eax
f01182de:	31 d2                	xor    %edx,%edx
f01182e0:	83 c4 1c             	add    $0x1c,%esp
f01182e3:	5b                   	pop    %ebx
f01182e4:	5e                   	pop    %esi
f01182e5:	5f                   	pop    %edi
f01182e6:	5d                   	pop    %ebp
f01182e7:	c3                   	ret    
f01182e8:	39 f0                	cmp    %esi,%eax
f01182ea:	0f 87 ac 00 00 00    	ja     f011839c <__umoddi3+0xfc>
f01182f0:	0f bd e8             	bsr    %eax,%ebp
f01182f3:	83 f5 1f             	xor    $0x1f,%ebp
f01182f6:	0f 84 ac 00 00 00    	je     f01183a8 <__umoddi3+0x108>
f01182fc:	bf 20 00 00 00       	mov    $0x20,%edi
f0118301:	29 ef                	sub    %ebp,%edi
f0118303:	89 fe                	mov    %edi,%esi
f0118305:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0118309:	89 e9                	mov    %ebp,%ecx
f011830b:	d3 e0                	shl    %cl,%eax
f011830d:	89 d7                	mov    %edx,%edi
f011830f:	89 f1                	mov    %esi,%ecx
f0118311:	d3 ef                	shr    %cl,%edi
f0118313:	09 c7                	or     %eax,%edi
f0118315:	89 e9                	mov    %ebp,%ecx
f0118317:	d3 e2                	shl    %cl,%edx
f0118319:	89 14 24             	mov    %edx,(%esp)
f011831c:	89 d8                	mov    %ebx,%eax
f011831e:	d3 e0                	shl    %cl,%eax
f0118320:	89 c2                	mov    %eax,%edx
f0118322:	8b 44 24 08          	mov    0x8(%esp),%eax
f0118326:	d3 e0                	shl    %cl,%eax
f0118328:	89 44 24 04          	mov    %eax,0x4(%esp)
f011832c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0118330:	89 f1                	mov    %esi,%ecx
f0118332:	d3 e8                	shr    %cl,%eax
f0118334:	09 d0                	or     %edx,%eax
f0118336:	d3 eb                	shr    %cl,%ebx
f0118338:	89 da                	mov    %ebx,%edx
f011833a:	f7 f7                	div    %edi
f011833c:	89 d3                	mov    %edx,%ebx
f011833e:	f7 24 24             	mull   (%esp)
f0118341:	89 c6                	mov    %eax,%esi
f0118343:	89 d1                	mov    %edx,%ecx
f0118345:	39 d3                	cmp    %edx,%ebx
f0118347:	0f 82 87 00 00 00    	jb     f01183d4 <__umoddi3+0x134>
f011834d:	0f 84 91 00 00 00    	je     f01183e4 <__umoddi3+0x144>
f0118353:	8b 54 24 04          	mov    0x4(%esp),%edx
f0118357:	29 f2                	sub    %esi,%edx
f0118359:	19 cb                	sbb    %ecx,%ebx
f011835b:	89 d8                	mov    %ebx,%eax
f011835d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0118361:	d3 e0                	shl    %cl,%eax
f0118363:	89 e9                	mov    %ebp,%ecx
f0118365:	d3 ea                	shr    %cl,%edx
f0118367:	09 d0                	or     %edx,%eax
f0118369:	89 e9                	mov    %ebp,%ecx
f011836b:	d3 eb                	shr    %cl,%ebx
f011836d:	89 da                	mov    %ebx,%edx
f011836f:	83 c4 1c             	add    $0x1c,%esp
f0118372:	5b                   	pop    %ebx
f0118373:	5e                   	pop    %esi
f0118374:	5f                   	pop    %edi
f0118375:	5d                   	pop    %ebp
f0118376:	c3                   	ret    
f0118377:	90                   	nop
f0118378:	89 fd                	mov    %edi,%ebp
f011837a:	85 ff                	test   %edi,%edi
f011837c:	75 0b                	jne    f0118389 <__umoddi3+0xe9>
f011837e:	b8 01 00 00 00       	mov    $0x1,%eax
f0118383:	31 d2                	xor    %edx,%edx
f0118385:	f7 f7                	div    %edi
f0118387:	89 c5                	mov    %eax,%ebp
f0118389:	89 f0                	mov    %esi,%eax
f011838b:	31 d2                	xor    %edx,%edx
f011838d:	f7 f5                	div    %ebp
f011838f:	89 c8                	mov    %ecx,%eax
f0118391:	f7 f5                	div    %ebp
f0118393:	89 d0                	mov    %edx,%eax
f0118395:	e9 44 ff ff ff       	jmp    f01182de <__umoddi3+0x3e>
f011839a:	66 90                	xchg   %ax,%ax
f011839c:	89 c8                	mov    %ecx,%eax
f011839e:	89 f2                	mov    %esi,%edx
f01183a0:	83 c4 1c             	add    $0x1c,%esp
f01183a3:	5b                   	pop    %ebx
f01183a4:	5e                   	pop    %esi
f01183a5:	5f                   	pop    %edi
f01183a6:	5d                   	pop    %ebp
f01183a7:	c3                   	ret    
f01183a8:	3b 04 24             	cmp    (%esp),%eax
f01183ab:	72 06                	jb     f01183b3 <__umoddi3+0x113>
f01183ad:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01183b1:	77 0f                	ja     f01183c2 <__umoddi3+0x122>
f01183b3:	89 f2                	mov    %esi,%edx
f01183b5:	29 f9                	sub    %edi,%ecx
f01183b7:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01183bb:	89 14 24             	mov    %edx,(%esp)
f01183be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01183c2:	8b 44 24 04          	mov    0x4(%esp),%eax
f01183c6:	8b 14 24             	mov    (%esp),%edx
f01183c9:	83 c4 1c             	add    $0x1c,%esp
f01183cc:	5b                   	pop    %ebx
f01183cd:	5e                   	pop    %esi
f01183ce:	5f                   	pop    %edi
f01183cf:	5d                   	pop    %ebp
f01183d0:	c3                   	ret    
f01183d1:	8d 76 00             	lea    0x0(%esi),%esi
f01183d4:	2b 04 24             	sub    (%esp),%eax
f01183d7:	19 fa                	sbb    %edi,%edx
f01183d9:	89 d1                	mov    %edx,%ecx
f01183db:	89 c6                	mov    %eax,%esi
f01183dd:	e9 71 ff ff ff       	jmp    f0118353 <__umoddi3+0xb3>
f01183e2:	66 90                	xchg   %ax,%ax
f01183e4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01183e8:	72 ea                	jb     f01183d4 <__umoddi3+0x134>
f01183ea:	89 d9                	mov    %ebx,%ecx
f01183ec:	e9 62 ff ff ff       	jmp    f0118353 <__umoddi3+0xb3>
